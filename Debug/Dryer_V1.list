
Dryer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d38  08003d38  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003d38  08003d38  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d38  08003d38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000074  08003db4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003db4  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a697  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c88  00000000  00000000  0002a734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  0002d088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001900d  00000000  00000000  0002dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e41e  00000000  00000000  00046c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba18  00000000  00000000  00055093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000e0aab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b98  00000000  00000000  000e0af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b68 	.word	0x08003b68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003b68 	.word	0x08003b68

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <gpio_init>:

/* USER CODE BEGIN 2 */
void gpio_init(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIOx = {0};
 8000196:	463b      	mov	r3, r7
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = DOOR_SW;
 80001a2:	2301      	movs	r3, #1
 80001a4:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001a6:	4b19      	ldr	r3, [pc, #100]	; (800020c <gpio_init+0x7c>)
 80001a8:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_PULLUP;
 80001aa:	2301      	movs	r3, #1
 80001ac:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001ae:	2302      	movs	r3, #2
 80001b0:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001b2:	463b      	mov	r3, r7
 80001b4:	4619      	mov	r1, r3
 80001b6:	4816      	ldr	r0, [pc, #88]	; (8000210 <gpio_init+0x80>)
 80001b8:	f001 f8cc 	bl	8001354 <HAL_GPIO_Init>

	GPIOx.Pin = LIMIT_SW | HEATER_SW | SEL_ROT_SW;
 80001bc:	230e      	movs	r3, #14
 80001be:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_INPUT;
 80001c0:	2300      	movs	r3, #0
 80001c2:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_PULLUP;
 80001c4:	2301      	movs	r3, #1
 80001c6:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001c8:	2302      	movs	r3, #2
 80001ca:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001cc:	463b      	mov	r3, r7
 80001ce:	4619      	mov	r1, r3
 80001d0:	480f      	ldr	r0, [pc, #60]	; (8000210 <gpio_init+0x80>)
 80001d2:	f001 f8bf 	bl	8001354 <HAL_GPIO_Init>

	GPIOx.Pin = LED;
 80001d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001da:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80001dc:	2301      	movs	r3, #1
 80001de:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_NOPULL;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001e4:	2302      	movs	r3, #2
 80001e6:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOC, &GPIOx);
 80001e8:	463b      	mov	r3, r7
 80001ea:	4619      	mov	r1, r3
 80001ec:	4809      	ldr	r0, [pc, #36]	; (8000214 <gpio_init+0x84>)
 80001ee:	f001 f8b1 	bl	8001354 <HAL_GPIO_Init>

	//HAL_GPIO_WritePin(GPIOC, LED, LOW);

	HAL_NVIC_SetPriority(EXTI0_IRQn,0,0);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	2006      	movs	r0, #6
 80001f8:	f001 f875 	bl	80012e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80001fc:	2006      	movs	r0, #6
 80001fe:	f001 f88e 	bl	800131e <HAL_NVIC_EnableIRQ>
}
 8000202:	bf00      	nop
 8000204:	3710      	adds	r7, #16
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	10310000 	.word	0x10310000
 8000210:	40010800 	.word	0x40010800
 8000214:	40011000 	.word	0x40011000

08000218 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(DOOR_SW);
 800021c:	2001      	movs	r0, #1
 800021e:	f001 fa4d 	bl	80016bc <HAL_GPIO_EXTI_IRQHandler>
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <keypad_init>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

void keypad_init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 800022e:	4b13      	ldr	r3, [pc, #76]	; (800027c <keypad_init+0x54>)
 8000230:	699b      	ldr	r3, [r3, #24]
 8000232:	4a12      	ldr	r2, [pc, #72]	; (800027c <keypad_init+0x54>)
 8000234:	f043 0308 	orr.w	r3, r3, #8
 8000238:	6193      	str	r3, [r2, #24]
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <keypad_init+0x54>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	f003 0308 	and.w	r3, r3, #8
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = LOW_KEY | MED_KEY | HIGH_KEY | FN_KEY;
 8000254:	f640 4303 	movw	r3, #3075	; 0xc03
 8000258:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_INPUT;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 800025e:	2301      	movs	r3, #1
 8000260:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 8000262:	2303      	movs	r3, #3
 8000264:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(KEYPAD_PORT, &GPIOx);
 8000266:	f107 0308 	add.w	r3, r7, #8
 800026a:	4619      	mov	r1, r3
 800026c:	4804      	ldr	r0, [pc, #16]	; (8000280 <keypad_init+0x58>)
 800026e:	f001 f871 	bl	8001354 <HAL_GPIO_Init>
}
 8000272:	bf00      	nop
 8000274:	3718      	adds	r7, #24
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000
 8000280:	40010c00 	.word	0x40010c00

08000284 <scan_keypad>:

uint8_t scan_keypad(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 8000288:	f000 f832 	bl	80002f0 <is_low_key_pressed>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d004      	beq.n	800029c <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 8000292:	4813      	ldr	r0, [pc, #76]	; (80002e0 <scan_keypad+0x5c>)
 8000294:	f002 fce4 	bl	8002c60 <puts>
		return LOW_KEY_PRESSED;
 8000298:	2301      	movs	r3, #1
 800029a:	e01e      	b.n	80002da <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 800029c:	f000 f860 	bl	8000360 <is_med_key_pressed>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d004      	beq.n	80002b0 <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 80002a6:	480f      	ldr	r0, [pc, #60]	; (80002e4 <scan_keypad+0x60>)
 80002a8:	f002 fcda 	bl	8002c60 <puts>
		return MED_KEY_PRESSED;
 80002ac:	2302      	movs	r3, #2
 80002ae:	e014      	b.n	80002da <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 80002b0:	f000 f890 	bl	80003d4 <is_high_key_pressed>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d004      	beq.n	80002c4 <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 80002ba:	480b      	ldr	r0, [pc, #44]	; (80002e8 <scan_keypad+0x64>)
 80002bc:	f002 fcd0 	bl	8002c60 <puts>
		return HIGH_KEY_PRESSED;
 80002c0:	2303      	movs	r3, #3
 80002c2:	e00a      	b.n	80002da <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 80002c4:	f000 f8c0 	bl	8000448 <is_fn_key_pressed>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d004      	beq.n	80002d8 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <scan_keypad+0x68>)
 80002d0:	f002 fcc6 	bl	8002c60 <puts>
		return FN_KEY_PRESSED;
 80002d4:	2304      	movs	r3, #4
 80002d6:	e000      	b.n	80002da <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 80002d8:	2300      	movs	r3, #0
}
 80002da:	4618      	mov	r0, r3
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	08003b80 	.word	0x08003b80
 80002e4:	08003b94 	.word	0x08003b94
 80002e8:	08003ba8 	.word	0x08003ba8
 80002ec:	08003bbc 	.word	0x08003bbc

080002f0 <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 80002f4:	f000 ff16 	bl	8001124 <HAL_GetTick>
 80002f8:	4602      	mov	r2, r0
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <is_low_key_pressed+0x64>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	2b0a      	cmp	r3, #10
 8000302:	d923      	bls.n	800034c <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 8000304:	2102      	movs	r1, #2
 8000306:	4814      	ldr	r0, [pc, #80]	; (8000358 <is_low_key_pressed+0x68>)
 8000308:	f001 f9a8 	bl	800165c <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d114      	bne.n	800033c <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <is_low_key_pressed+0x6c>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b01      	cmp	r3, #1
 800031a:	d112      	bne.n	8000342 <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 800031c:	2102      	movs	r1, #2
 800031e:	480e      	ldr	r0, [pc, #56]	; (8000358 <is_low_key_pressed+0x68>)
 8000320:	f001 f99c 	bl	800165c <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d104      	bne.n	8000334 <is_low_key_pressed+0x44>
				{
					last_state = 0;
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <is_low_key_pressed+0x6c>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
					return 1;
 8000330:	2301      	movs	r3, #1
 8000332:	e00c      	b.n	800034e <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <is_low_key_pressed+0x6c>)
 8000336:	2201      	movs	r2, #1
 8000338:	701a      	strb	r2, [r3, #0]
 800033a:	e002      	b.n	8000342 <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <is_low_key_pressed+0x6c>)
 800033e:	2201      	movs	r2, #1
 8000340:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000342:	f000 feef 	bl	8001124 <HAL_GetTick>
 8000346:	4603      	mov	r3, r0
 8000348:	4a02      	ldr	r2, [pc, #8]	; (8000354 <is_low_key_pressed+0x64>)
 800034a:	6013      	str	r3, [r2, #0]
	}
	return 0;
 800034c:	2300      	movs	r3, #0
}
 800034e:	4618      	mov	r0, r3
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000090 	.word	0x20000090
 8000358:	40010c00 	.word	0x40010c00
 800035c:	20000094 	.word	0x20000094

08000360 <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 8000364:	f000 fede 	bl	8001124 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <is_med_key_pressed+0x68>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	1ad3      	subs	r3, r2, r3
 8000370:	2b0a      	cmp	r3, #10
 8000372:	d925      	bls.n	80003c0 <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 8000374:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000378:	4814      	ldr	r0, [pc, #80]	; (80003cc <is_med_key_pressed+0x6c>)
 800037a:	f001 f96f 	bl	800165c <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d115      	bne.n	80003b0 <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <is_med_key_pressed+0x70>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b01      	cmp	r3, #1
 800038c:	d113      	bne.n	80003b6 <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 800038e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000392:	480e      	ldr	r0, [pc, #56]	; (80003cc <is_med_key_pressed+0x6c>)
 8000394:	f001 f962 	bl	800165c <HAL_GPIO_ReadPin>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d104      	bne.n	80003a8 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <is_med_key_pressed+0x70>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
					return 1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	e00c      	b.n	80003c2 <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <is_med_key_pressed+0x70>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	701a      	strb	r2, [r3, #0]
 80003ae:	e002      	b.n	80003b6 <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <is_med_key_pressed+0x70>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80003b6:	f000 feb5 	bl	8001124 <HAL_GetTick>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a02      	ldr	r2, [pc, #8]	; (80003c8 <is_med_key_pressed+0x68>)
 80003be:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80003c0:	2300      	movs	r3, #0
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000098 	.word	0x20000098
 80003cc:	40010c00 	.word	0x40010c00
 80003d0:	2000009c 	.word	0x2000009c

080003d4 <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 80003d8:	f000 fea4 	bl	8001124 <HAL_GetTick>
 80003dc:	4602      	mov	r2, r0
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <is_high_key_pressed+0x68>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	2b0a      	cmp	r3, #10
 80003e6:	d925      	bls.n	8000434 <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 80003e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ec:	4814      	ldr	r0, [pc, #80]	; (8000440 <is_high_key_pressed+0x6c>)
 80003ee:	f001 f935 	bl	800165c <HAL_GPIO_ReadPin>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d115      	bne.n	8000424 <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <is_high_key_pressed+0x70>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d113      	bne.n	800042a <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 8000402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000406:	480e      	ldr	r0, [pc, #56]	; (8000440 <is_high_key_pressed+0x6c>)
 8000408:	f001 f928 	bl	800165c <HAL_GPIO_ReadPin>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d104      	bne.n	800041c <is_high_key_pressed+0x48>
				{
					last_state = 0;
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <is_high_key_pressed+0x70>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
					return 1;
 8000418:	2301      	movs	r3, #1
 800041a:	e00c      	b.n	8000436 <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <is_high_key_pressed+0x70>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
 8000422:	e002      	b.n	800042a <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 8000424:	4b07      	ldr	r3, [pc, #28]	; (8000444 <is_high_key_pressed+0x70>)
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800042a:	f000 fe7b 	bl	8001124 <HAL_GetTick>
 800042e:	4603      	mov	r3, r0
 8000430:	4a02      	ldr	r2, [pc, #8]	; (800043c <is_high_key_pressed+0x68>)
 8000432:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	200000a0 	.word	0x200000a0
 8000440:	40010c00 	.word	0x40010c00
 8000444:	200000a4 	.word	0x200000a4

08000448 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 800044c:	f000 fe6a 	bl	8001124 <HAL_GetTick>
 8000450:	4602      	mov	r2, r0
 8000452:	4b16      	ldr	r3, [pc, #88]	; (80004ac <is_fn_key_pressed+0x64>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	2b0a      	cmp	r3, #10
 800045a:	d923      	bls.n	80004a4 <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 800045c:	2101      	movs	r1, #1
 800045e:	4814      	ldr	r0, [pc, #80]	; (80004b0 <is_fn_key_pressed+0x68>)
 8000460:	f001 f8fc 	bl	800165c <HAL_GPIO_ReadPin>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d114      	bne.n	8000494 <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <is_fn_key_pressed+0x6c>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	b2db      	uxtb	r3, r3
 8000470:	2b01      	cmp	r3, #1
 8000472:	d112      	bne.n	800049a <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8000474:	2101      	movs	r1, #1
 8000476:	480e      	ldr	r0, [pc, #56]	; (80004b0 <is_fn_key_pressed+0x68>)
 8000478:	f001 f8f0 	bl	800165c <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <is_fn_key_pressed+0x6c>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
					return 1;
 8000488:	2301      	movs	r3, #1
 800048a:	e00c      	b.n	80004a6 <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <is_fn_key_pressed+0x6c>)
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	e002      	b.n	800049a <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <is_fn_key_pressed+0x6c>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800049a:	f000 fe43 	bl	8001124 <HAL_GetTick>
 800049e:	4603      	mov	r3, r0
 80004a0:	4a02      	ldr	r2, [pc, #8]	; (80004ac <is_fn_key_pressed+0x64>)
 80004a2:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80004a4:	2300      	movs	r3, #0
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200000a8 	.word	0x200000a8
 80004b0:	40010c00 	.word	0x40010c00
 80004b4:	200000ac 	.word	0x200000ac

080004b8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 80004c0:	1d39      	adds	r1, r7, #4
 80004c2:	230a      	movs	r3, #10
 80004c4:	2201      	movs	r2, #1
 80004c6:	4804      	ldr	r0, [pc, #16]	; (80004d8 <__io_putchar+0x20>)
 80004c8:	f002 f9a7 	bl	800281a <HAL_UART_Transmit>
	return ch;
 80004cc:	687b      	ldr	r3, [r7, #4]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2000010c 	.word	0x2000010c

080004dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e0:	f000 fdc8 	bl	8001074 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e4:	f000 fad6 	bl	8000a94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e8:	f7ff fe30 	bl	800014c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80004ec:	f000 fd26 	bl	8000f3c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	gpio_init();
 80004f0:	f7ff fe4e 	bl	8000190 <gpio_init>
	keypad_init();
 80004f4:	f7ff fe98 	bl	8000228 <keypad_init>
	timer_init();
 80004f8:	f000 fcbe 	bl	8000e78 <timer_init>

	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 80004fc:	488e      	ldr	r0, [pc, #568]	; (8000738 <main+0x25c>)
 80004fe:	f002 fbaf 	bl	8002c60 <puts>
	dryer.state = INIT;
 8000502:	4b8e      	ldr	r3, [pc, #568]	; (800073c <main+0x260>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8000508:	4b8c      	ldr	r3, [pc, #560]	; (800073c <main+0x260>)
 800050a:	2200      	movs	r2, #0
 800050c:	705a      	strb	r2, [r3, #1]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(timer_stop_evt)
 800050e:	4b8c      	ldr	r3, [pc, #560]	; (8000740 <main+0x264>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d006      	beq.n	8000524 <main+0x48>
		{
			HAL_TIM_Base_Stop_IT(&htim4);
 8000516:	488b      	ldr	r0, [pc, #556]	; (8000744 <main+0x268>)
 8000518:	f001 fdac 	bl	8002074 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 800051c:	4b88      	ldr	r3, [pc, #544]	; (8000740 <main+0x264>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e00d      	b.n	8000540 <main+0x64>

		}else if((timer_start_evt) && (dryer.state == START))
 8000524:	4b88      	ldr	r3, [pc, #544]	; (8000748 <main+0x26c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d009      	beq.n	8000540 <main+0x64>
 800052c:	4b83      	ldr	r3, [pc, #524]	; (800073c <main+0x260>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <main+0x64>
		{

			HAL_TIM_Base_Start_IT(&htim4);
 8000534:	4883      	ldr	r0, [pc, #524]	; (8000744 <main+0x268>)
 8000536:	f001 fd4b 	bl	8001fd0 <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 800053a:	4b83      	ldr	r3, [pc, #524]	; (8000748 <main+0x26c>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]

		}

		if (door_open_flag) {
 8000540:	4b82      	ldr	r3, [pc, #520]	; (800074c <main+0x270>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d006      	beq.n	8000556 <main+0x7a>

			HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	4880      	ldr	r0, [pc, #512]	; (8000750 <main+0x274>)
 8000550:	f001 f89b 	bl	800168a <HAL_GPIO_WritePin>
 8000554:	e160      	b.n	8000818 <main+0x33c>

		} else {

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	487c      	ldr	r0, [pc, #496]	; (8000750 <main+0x274>)
 800055e:	f001 f894 	bl	800168a <HAL_GPIO_WritePin>

			if (dryer.state == START) {
 8000562:	4b76      	ldr	r3, [pc, #472]	; (800073c <main+0x260>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	f040 80a8 	bne.w	80006bc <main+0x1e0>

				scaned_key = scan_keypad();
 800056c:	f7ff fe8a 	bl	8000284 <scan_keypad>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	4b77      	ldr	r3, [pc, #476]	; (8000754 <main+0x278>)
 8000576:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 8000578:	4b76      	ldr	r3, [pc, #472]	; (8000754 <main+0x278>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	2b03      	cmp	r3, #3
 8000580:	f200 8098 	bhi.w	80006b4 <main+0x1d8>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <main+0xb0>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	0800059d 	.word	0x0800059d
 8000590:	080005df 	.word	0x080005df
 8000594:	080005ed 	.word	0x080005ed
 8000598:	0800068f 	.word	0x0800068f

				case LOW_KEY_PRESSED:
					switch (dryer.cycle) {
 800059c:	4b67      	ldr	r3, [pc, #412]	; (800073c <main+0x260>)
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <main+0xce>
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d00b      	beq.n	80005c0 <main+0xe4>
					case COOL_CYCLE:
						if (dryer.coolTime > 60U)
							dryer.coolTime -= 60U;
						break;
					}
					break;
 80005a8:	e084      	b.n	80006b4 <main+0x1d8>
						if (dryer.heatTime > 60U)
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <main+0x260>)
 80005ac:	885b      	ldrh	r3, [r3, #2]
 80005ae:	2b3c      	cmp	r3, #60	; 0x3c
 80005b0:	d911      	bls.n	80005d6 <main+0xfa>
							dryer.heatTime -= 60U;
 80005b2:	4b62      	ldr	r3, [pc, #392]	; (800073c <main+0x260>)
 80005b4:	885b      	ldrh	r3, [r3, #2]
 80005b6:	3b3c      	subs	r3, #60	; 0x3c
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	4b60      	ldr	r3, [pc, #384]	; (800073c <main+0x260>)
 80005bc:	805a      	strh	r2, [r3, #2]
						break;
 80005be:	e00a      	b.n	80005d6 <main+0xfa>
						if (dryer.coolTime > 60U)
 80005c0:	4b5e      	ldr	r3, [pc, #376]	; (800073c <main+0x260>)
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2b3c      	cmp	r3, #60	; 0x3c
 80005c6:	d908      	bls.n	80005da <main+0xfe>
							dryer.coolTime -= 60U;
 80005c8:	4b5c      	ldr	r3, [pc, #368]	; (800073c <main+0x260>)
 80005ca:	889b      	ldrh	r3, [r3, #4]
 80005cc:	3b3c      	subs	r3, #60	; 0x3c
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b5a      	ldr	r3, [pc, #360]	; (800073c <main+0x260>)
 80005d2:	809a      	strh	r2, [r3, #4]
						break;
 80005d4:	e001      	b.n	80005da <main+0xfe>
						break;
 80005d6:	bf00      	nop
 80005d8:	e06c      	b.n	80006b4 <main+0x1d8>
						break;
 80005da:	bf00      	nop
					break;
 80005dc:	e06a      	b.n	80006b4 <main+0x1d8>

				case MED_KEY_PRESSED:
					dryer.state = INIT;
 80005de:	4b57      	ldr	r3, [pc, #348]	; (800073c <main+0x260>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 80005e4:	4b56      	ldr	r3, [pc, #344]	; (8000740 <main+0x264>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
					break;
 80005ea:	e063      	b.n	80006b4 <main+0x1d8>

				case HIGH_KEY_PRESSED:
					switch (dryer.cycle) {
 80005ec:	4b53      	ldr	r3, [pc, #332]	; (800073c <main+0x260>)
 80005ee:	79db      	ldrb	r3, [r3, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d002      	beq.n	80005fa <main+0x11e>
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d037      	beq.n	8000668 <main+0x18c>
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
 80005f8:	e05c      	b.n	80006b4 <main+0x1d8>
						if ((dryer.heatTime < 1800U)
 80005fa:	4b50      	ldr	r3, [pc, #320]	; (800073c <main+0x260>)
 80005fc:	885b      	ldrh	r3, [r3, #2]
 80005fe:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000602:	d20a      	bcs.n	800061a <main+0x13e>
								&& (dryer.mode == LOW_LEVEL))
 8000604:	4b4d      	ldr	r3, [pc, #308]	; (800073c <main+0x260>)
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d106      	bne.n	800061a <main+0x13e>
							dryer.heatTime += 60U;
 800060c:	4b4b      	ldr	r3, [pc, #300]	; (800073c <main+0x260>)
 800060e:	885b      	ldrh	r3, [r3, #2]
 8000610:	333c      	adds	r3, #60	; 0x3c
 8000612:	b29a      	uxth	r2, r3
 8000614:	4b49      	ldr	r3, [pc, #292]	; (800073c <main+0x260>)
 8000616:	805a      	strh	r2, [r3, #2]
 8000618:	e01f      	b.n	800065a <main+0x17e>
						else if ((dryer.heatTime < 2400U)
 800061a:	4b48      	ldr	r3, [pc, #288]	; (800073c <main+0x260>)
 800061c:	885b      	ldrh	r3, [r3, #2]
 800061e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000622:	d20a      	bcs.n	800063a <main+0x15e>
								&& (dryer.mode == MED_LEVEL))
 8000624:	4b45      	ldr	r3, [pc, #276]	; (800073c <main+0x260>)
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d106      	bne.n	800063a <main+0x15e>
							dryer.heatTime += 60U;
 800062c:	4b43      	ldr	r3, [pc, #268]	; (800073c <main+0x260>)
 800062e:	885b      	ldrh	r3, [r3, #2]
 8000630:	333c      	adds	r3, #60	; 0x3c
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b41      	ldr	r3, [pc, #260]	; (800073c <main+0x260>)
 8000636:	805a      	strh	r2, [r3, #2]
 8000638:	e00f      	b.n	800065a <main+0x17e>
						else if ((dryer.heatTime < 3000U)
 800063a:	4b40      	ldr	r3, [pc, #256]	; (800073c <main+0x260>)
 800063c:	885b      	ldrh	r3, [r3, #2]
 800063e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000642:	4293      	cmp	r3, r2
 8000644:	d809      	bhi.n	800065a <main+0x17e>
								&& (dryer.mode == HIGH_LEVEL))
 8000646:	4b3d      	ldr	r3, [pc, #244]	; (800073c <main+0x260>)
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	2b03      	cmp	r3, #3
 800064c:	d105      	bne.n	800065a <main+0x17e>
							dryer.heatTime += 60U;
 800064e:	4b3b      	ldr	r3, [pc, #236]	; (800073c <main+0x260>)
 8000650:	885b      	ldrh	r3, [r3, #2]
 8000652:	333c      	adds	r3, #60	; 0x3c
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b39      	ldr	r3, [pc, #228]	; (800073c <main+0x260>)
 8000658:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 800065a:	4b38      	ldr	r3, [pc, #224]	; (800073c <main+0x260>)
 800065c:	885b      	ldrh	r3, [r3, #2]
 800065e:	4619      	mov	r1, r3
 8000660:	483d      	ldr	r0, [pc, #244]	; (8000758 <main+0x27c>)
 8000662:	f002 fa77 	bl	8002b54 <iprintf>
						break;
 8000666:	e011      	b.n	800068c <main+0x1b0>
						if (dryer.coolTime < 900U)
 8000668:	4b34      	ldr	r3, [pc, #208]	; (800073c <main+0x260>)
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000670:	d205      	bcs.n	800067e <main+0x1a2>
							dryer.coolTime += 60U;
 8000672:	4b32      	ldr	r3, [pc, #200]	; (800073c <main+0x260>)
 8000674:	889b      	ldrh	r3, [r3, #4]
 8000676:	333c      	adds	r3, #60	; 0x3c
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <main+0x260>)
 800067c:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 800067e:	4b2f      	ldr	r3, [pc, #188]	; (800073c <main+0x260>)
 8000680:	889b      	ldrh	r3, [r3, #4]
 8000682:	4619      	mov	r1, r3
 8000684:	4835      	ldr	r0, [pc, #212]	; (800075c <main+0x280>)
 8000686:	f002 fa65 	bl	8002b54 <iprintf>
						break;
 800068a:	bf00      	nop
					break;
 800068c:	e012      	b.n	80006b4 <main+0x1d8>

				case FN_KEY_PRESSED:
					dryer.heatTime = 0U;
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <main+0x260>)
 8000690:	2200      	movs	r2, #0
 8000692:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <main+0x260>)
 8000696:	2201      	movs	r2, #1
 8000698:	71da      	strb	r2, [r3, #7]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <main+0x260>)
 800069c:	885b      	ldrh	r3, [r3, #2]
 800069e:	4619      	mov	r1, r3
 80006a0:	482d      	ldr	r0, [pc, #180]	; (8000758 <main+0x27c>)
 80006a2:	f002 fa57 	bl	8002b54 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <main+0x260>)
 80006a8:	889b      	ldrh	r3, [r3, #4]
 80006aa:	4619      	mov	r1, r3
 80006ac:	482b      	ldr	r0, [pc, #172]	; (800075c <main+0x280>)
 80006ae:	f002 fa51 	bl	8002b54 <iprintf>
					break;
 80006b2:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 80006b4:	4b27      	ldr	r3, [pc, #156]	; (8000754 <main+0x278>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e0ad      	b.n	8000818 <main+0x33c>

			} else if (dryer.state == INIT) {
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <main+0x260>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	f040 80a9 	bne.w	8000818 <main+0x33c>

				scaned_key = scan_keypad();
 80006c6:	f7ff fddd 	bl	8000284 <scan_keypad>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <main+0x278>)
 80006d0:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <main+0x278>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d073      	beq.n	80007c2 <main+0x2e6>
 80006da:	2b03      	cmp	r3, #3
 80006dc:	f300 8098 	bgt.w	8000810 <main+0x334>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d002      	beq.n	80006ea <main+0x20e>
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d045      	beq.n	8000774 <main+0x298>
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
							sizeof("HIGH_LEVEL\r\n"), 10);
					break;

				default:
					break;
 80006e8:	e092      	b.n	8000810 <main+0x334>
					dryer.mode = LOW_LEVEL;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <main+0x260>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <main+0x260>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <main+0x260>)
 80006f8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80006fc:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <main+0x260>)
 8000700:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000704:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <main+0x260>)
 8000708:	221e      	movs	r2, #30
 800070a:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <main+0x260>)
 800070e:	2200      	movs	r2, #0
 8000710:	71da      	strb	r2, [r3, #7]
					rot_left_cunt = 30U;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <main+0x284>)
 8000714:	221e      	movs	r2, #30
 8000716:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <main+0x288>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <main+0x28c>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <main+0x26c>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 800072a:	230a      	movs	r3, #10
 800072c:	220c      	movs	r2, #12
 800072e:	490f      	ldr	r1, [pc, #60]	; (800076c <main+0x290>)
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <main+0x294>)
 8000732:	f002 f872 	bl	800281a <HAL_UART_Transmit>
					break;
 8000736:	e06c      	b.n	8000812 <main+0x336>
 8000738:	08003bcc 	.word	0x08003bcc
 800073c:	200000b0 	.word	0x200000b0
 8000740:	200000b9 	.word	0x200000b9
 8000744:	200000c4 	.word	0x200000c4
 8000748:	200000ba 	.word	0x200000ba
 800074c:	200000b8 	.word	0x200000b8
 8000750:	40011000 	.word	0x40011000
 8000754:	200000bb 	.word	0x200000bb
 8000758:	08003bd4 	.word	0x08003bd4
 800075c:	08003be4 	.word	0x08003be4
 8000760:	20000001 	.word	0x20000001
 8000764:	200000bc 	.word	0x200000bc
 8000768:	200000bd 	.word	0x200000bd
 800076c:	08003bf4 	.word	0x08003bf4
 8000770:	2000010c 	.word	0x2000010c
					dryer.mode = MED_LEVEL;
 8000774:	4bb2      	ldr	r3, [pc, #712]	; (8000a40 <main+0x564>)
 8000776:	2202      	movs	r2, #2
 8000778:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 800077a:	4bb1      	ldr	r3, [pc, #708]	; (8000a40 <main+0x564>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 8000780:	4baf      	ldr	r3, [pc, #700]	; (8000a40 <main+0x564>)
 8000782:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000786:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8000788:	4bad      	ldr	r3, [pc, #692]	; (8000a40 <main+0x564>)
 800078a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800078e:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8000790:	4bab      	ldr	r3, [pc, #684]	; (8000a40 <main+0x564>)
 8000792:	221e      	movs	r2, #30
 8000794:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8000796:	4baa      	ldr	r3, [pc, #680]	; (8000a40 <main+0x564>)
 8000798:	2200      	movs	r2, #0
 800079a:	71da      	strb	r2, [r3, #7]
					rot_left_cunt = 30U;
 800079c:	4ba9      	ldr	r3, [pc, #676]	; (8000a44 <main+0x568>)
 800079e:	221e      	movs	r2, #30
 80007a0:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 80007a2:	4ba9      	ldr	r3, [pc, #676]	; (8000a48 <main+0x56c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 80007a8:	4ba8      	ldr	r3, [pc, #672]	; (8000a4c <main+0x570>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 80007ae:	4ba8      	ldr	r3, [pc, #672]	; (8000a50 <main+0x574>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 80007b4:	230a      	movs	r3, #10
 80007b6:	220c      	movs	r2, #12
 80007b8:	49a6      	ldr	r1, [pc, #664]	; (8000a54 <main+0x578>)
 80007ba:	48a7      	ldr	r0, [pc, #668]	; (8000a58 <main+0x57c>)
 80007bc:	f002 f82d 	bl	800281a <HAL_UART_Transmit>
					break;
 80007c0:	e027      	b.n	8000812 <main+0x336>
					dryer.mode = HIGH_LEVEL;
 80007c2:	4b9f      	ldr	r3, [pc, #636]	; (8000a40 <main+0x564>)
 80007c4:	2203      	movs	r2, #3
 80007c6:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80007c8:	4b9d      	ldr	r3, [pc, #628]	; (8000a40 <main+0x564>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 80007ce:	4b9c      	ldr	r3, [pc, #624]	; (8000a40 <main+0x564>)
 80007d0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80007d4:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80007d6:	4b9a      	ldr	r3, [pc, #616]	; (8000a40 <main+0x564>)
 80007d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007dc:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80007de:	4b98      	ldr	r3, [pc, #608]	; (8000a40 <main+0x564>)
 80007e0:	221e      	movs	r2, #30
 80007e2:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 80007e4:	4b96      	ldr	r3, [pc, #600]	; (8000a40 <main+0x564>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	71da      	strb	r2, [r3, #7]
					rot_left_cunt = 30U;
 80007ea:	4b96      	ldr	r3, [pc, #600]	; (8000a44 <main+0x568>)
 80007ec:	221e      	movs	r2, #30
 80007ee:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 80007f0:	4b95      	ldr	r3, [pc, #596]	; (8000a48 <main+0x56c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 80007f6:	4b95      	ldr	r3, [pc, #596]	; (8000a4c <main+0x570>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 80007fc:	4b94      	ldr	r3, [pc, #592]	; (8000a50 <main+0x574>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 8000802:	230a      	movs	r3, #10
 8000804:	220d      	movs	r2, #13
 8000806:	4995      	ldr	r1, [pc, #596]	; (8000a5c <main+0x580>)
 8000808:	4893      	ldr	r0, [pc, #588]	; (8000a58 <main+0x57c>)
 800080a:	f002 f806 	bl	800281a <HAL_UART_Transmit>
					break;
 800080e:	e000      	b.n	8000812 <main+0x336>
					break;
 8000810:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 8000812:	4b93      	ldr	r3, [pc, #588]	; (8000a60 <main+0x584>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
			} //else if ends
		} //else ends

		if (door_open_flag) {
 8000818:	4b92      	ldr	r3, [pc, #584]	; (8000a64 <main+0x588>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d029      	beq.n	8000874 <main+0x398>

			HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	4890      	ldr	r0, [pc, #576]	; (8000a68 <main+0x58c>)
 8000828:	f000 ff2f 	bl	800168a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000832:	488e      	ldr	r0, [pc, #568]	; (8000a6c <main+0x590>)
 8000834:	f000 ff29 	bl	800168a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	488b      	ldr	r0, [pc, #556]	; (8000a6c <main+0x590>)
 8000840:	f000 ff23 	bl	800168a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	4888      	ldr	r0, [pc, #544]	; (8000a6c <main+0x590>)
 800084c:	f000 ff1d 	bl	800168a <HAL_GPIO_WritePin>

			if(dryer.state == COMPLETE)
 8000850:	4b7b      	ldr	r3, [pc, #492]	; (8000a40 <main+0x564>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b02      	cmp	r3, #2
 8000856:	f47f ae5a 	bne.w	800050e <main+0x32>
			{
				//beep off
				timer_stop_evt = 1U;
 800085a:	4b85      	ldr	r3, [pc, #532]	; (8000a70 <main+0x594>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
				dryer.beepTime = 0U;
 8000860:	4b77      	ldr	r3, [pc, #476]	; (8000a40 <main+0x564>)
 8000862:	2200      	movs	r2, #0
 8000864:	719a      	strb	r2, [r3, #6]
				dryer.state = INIT;
 8000866:	4b76      	ldr	r3, [pc, #472]	; (8000a40 <main+0x564>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
				dryer.mode = NO_MODE;
 800086c:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <main+0x564>)
 800086e:	2200      	movs	r2, #0
 8000870:	705a      	strb	r2, [r3, #1]
 8000872:	e64c      	b.n	800050e <main+0x32>
			}

		} else {

			if (dryer.state == START) {
 8000874:	4b72      	ldr	r3, [pc, #456]	; (8000a40 <main+0x564>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	f040 809d 	bne.w	80009b8 <main+0x4dc>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000884:	4878      	ldr	r0, [pc, #480]	; (8000a68 <main+0x58c>)
 8000886:	f000 ff00 	bl	800168a <HAL_GPIO_WritePin>

				if (otp) {
 800088a:	4b7a      	ldr	r3, [pc, #488]	; (8000a74 <main+0x598>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d020      	beq.n	80008d4 <main+0x3f8>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 8000892:	4b6b      	ldr	r3, [pc, #428]	; (8000a40 <main+0x564>)
 8000894:	885b      	ldrh	r3, [r3, #2]
 8000896:	4619      	mov	r1, r3
 8000898:	4877      	ldr	r0, [pc, #476]	; (8000a78 <main+0x59c>)
 800089a:	f002 f95b 	bl	8002b54 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 800089e:	4b68      	ldr	r3, [pc, #416]	; (8000a40 <main+0x564>)
 80008a0:	889b      	ldrh	r3, [r3, #4]
 80008a2:	4619      	mov	r1, r3
 80008a4:	4875      	ldr	r0, [pc, #468]	; (8000a7c <main+0x5a0>)
 80008a6:	f002 f955 	bl	8002b54 <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 80008aa:	4b66      	ldr	r3, [pc, #408]	; (8000a44 <main+0x568>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4873      	ldr	r0, [pc, #460]	; (8000a80 <main+0x5a4>)
 80008b2:	f002 f94f 	bl	8002b54 <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 80008b6:	4b65      	ldr	r3, [pc, #404]	; (8000a4c <main+0x570>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4871      	ldr	r0, [pc, #452]	; (8000a84 <main+0x5a8>)
 80008be:	f002 f949 	bl	8002b54 <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 80008c2:	4b61      	ldr	r3, [pc, #388]	; (8000a48 <main+0x56c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4619      	mov	r1, r3
 80008c8:	486f      	ldr	r0, [pc, #444]	; (8000a88 <main+0x5ac>)
 80008ca:	f002 f943 	bl	8002b54 <iprintf>
					otp = 0;
 80008ce:	4b69      	ldr	r3, [pc, #420]	; (8000a74 <main+0x598>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
				}

				//start Flip Flop
				if (pasue_cunt > 0) {
 80008d4:	4b5d      	ldr	r3, [pc, #372]	; (8000a4c <main+0x570>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d034      	beq.n	8000946 <main+0x46a>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	4862      	ldr	r0, [pc, #392]	; (8000a6c <main+0x590>)
 80008e4:	f000 fed1 	bl	800168a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ee:	485f      	ldr	r0, [pc, #380]	; (8000a6c <main+0x590>)
 80008f0:	f000 fecb 	bl	800168a <HAL_GPIO_WritePin>

					if (pasue_cunt <= 1) {
 80008f4:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <main+0x570>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d84b      	bhi.n	8000994 <main+0x4b8>

						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 80008fc:	2104      	movs	r1, #4
 80008fe:	485a      	ldr	r0, [pc, #360]	; (8000a68 <main+0x58c>)
 8000900:	f000 feac 	bl	800165c <HAL_GPIO_ReadPin>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <main+0x5b0>)
 800090a:	701a      	strb	r2, [r3, #0]
						SEL_ROT_SW);

						if (rot_sw_state) {
 800090c:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <main+0x5b0>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d006      	beq.n	8000922 <main+0x446>

							rot_left_cunt = 30U;
 8000914:	4b4b      	ldr	r3, [pc, #300]	; (8000a44 <main+0x568>)
 8000916:	221e      	movs	r2, #30
 8000918:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 800091a:	4b4b      	ldr	r3, [pc, #300]	; (8000a48 <main+0x56c>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	e038      	b.n	8000994 <main+0x4b8>

						} else {

							if (flipflop) {
 8000922:	4b5b      	ldr	r3, [pc, #364]	; (8000a90 <main+0x5b4>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d006      	beq.n	8000938 <main+0x45c>

								rot_left_cunt = 0U;
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <main+0x568>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 8000930:	4b45      	ldr	r3, [pc, #276]	; (8000a48 <main+0x56c>)
 8000932:	221e      	movs	r2, #30
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	e02d      	b.n	8000994 <main+0x4b8>

							} else {

								rot_left_cunt = 30U;
 8000938:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <main+0x568>)
 800093a:	221e      	movs	r2, #30
 800093c:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 800093e:	4b42      	ldr	r3, [pc, #264]	; (8000a48 <main+0x56c>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	e026      	b.n	8000994 <main+0x4b8>

							}
						}
					}
				} else if (rot_left_cunt > 0) {
 8000946:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <main+0x568>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00f      	beq.n	800096e <main+0x492>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000954:	4845      	ldr	r0, [pc, #276]	; (8000a6c <main+0x590>)
 8000956:	f000 fe98 	bl	800168a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000960:	4842      	ldr	r0, [pc, #264]	; (8000a6c <main+0x590>)
 8000962:	f000 fe92 	bl	800168a <HAL_GPIO_WritePin>
					flipflop = 1;
 8000966:	4b4a      	ldr	r3, [pc, #296]	; (8000a90 <main+0x5b4>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	e012      	b.n	8000994 <main+0x4b8>

				} else if (rot_right_cunt > 0) {
 800096e:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <main+0x56c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00e      	beq.n	8000994 <main+0x4b8>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097c:	483b      	ldr	r0, [pc, #236]	; (8000a6c <main+0x590>)
 800097e:	f000 fe84 	bl	800168a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000988:	4838      	ldr	r0, [pc, #224]	; (8000a6c <main+0x590>)
 800098a:	f000 fe7e 	bl	800168a <HAL_GPIO_WritePin>
					flipflop = 0;
 800098e:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <main+0x5b4>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]

				}

				if (dryer.cycle == HEAT_CYCLE) {
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <main+0x564>)
 8000996:	79db      	ldrb	r3, [r3, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d106      	bne.n	80009aa <main+0x4ce>

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a2:	4832      	ldr	r0, [pc, #200]	; (8000a6c <main+0x590>)
 80009a4:	f000 fe71 	bl	800168a <HAL_GPIO_WritePin>
 80009a8:	e5b1      	b.n	800050e <main+0x32>

				} else {

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b0:	482e      	ldr	r0, [pc, #184]	; (8000a6c <main+0x590>)
 80009b2:	f000 fe6a 	bl	800168a <HAL_GPIO_WritePin>
 80009b6:	e5aa      	b.n	800050e <main+0x32>

				}
			}else if(dryer.state == COMPLETE){
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <main+0x564>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d125      	bne.n	8000a0c <main+0x530>

				if(dryer.beepTime == 0)
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <main+0x564>)
 80009c2:	799b      	ldrb	r3, [r3, #6]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d108      	bne.n	80009da <main+0x4fe>
				{
					//beep off
					timer_stop_evt = 1U;
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <main+0x594>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <main+0x564>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <main+0x564>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	705a      	strb	r2, [r3, #1]
				}
				if(dryer.beepTime % 3 == 0)
				{
					//beep toggle
				}
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e0:	4821      	ldr	r0, [pc, #132]	; (8000a68 <main+0x58c>)
 80009e2:	f000 fe52 	bl	800168a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ec:	481f      	ldr	r0, [pc, #124]	; (8000a6c <main+0x590>)
 80009ee:	f000 fe4c 	bl	800168a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f8:	481c      	ldr	r0, [pc, #112]	; (8000a6c <main+0x590>)
 80009fa:	f000 fe46 	bl	800168a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a04:	4819      	ldr	r0, [pc, #100]	; (8000a6c <main+0x590>)
 8000a06:	f000 fe40 	bl	800168a <HAL_GPIO_WritePin>
 8000a0a:	e580      	b.n	800050e <main+0x32>
			}
			else{
				//beep off
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a12:	4815      	ldr	r0, [pc, #84]	; (8000a68 <main+0x58c>)
 8000a14:	f000 fe39 	bl	800168a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	4813      	ldr	r0, [pc, #76]	; (8000a6c <main+0x590>)
 8000a20:	f000 fe33 	bl	800168a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2a:	4810      	ldr	r0, [pc, #64]	; (8000a6c <main+0x590>)
 8000a2c:	f000 fe2d 	bl	800168a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <main+0x590>)
 8000a38:	f000 fe27 	bl	800168a <HAL_GPIO_WritePin>
		if(timer_stop_evt)
 8000a3c:	e567      	b.n	800050e <main+0x32>
 8000a3e:	bf00      	nop
 8000a40:	200000b0 	.word	0x200000b0
 8000a44:	20000001 	.word	0x20000001
 8000a48:	200000bc 	.word	0x200000bc
 8000a4c:	200000bd 	.word	0x200000bd
 8000a50:	200000ba 	.word	0x200000ba
 8000a54:	08003c00 	.word	0x08003c00
 8000a58:	2000010c 	.word	0x2000010c
 8000a5c:	08003c0c 	.word	0x08003c0c
 8000a60:	200000bb 	.word	0x200000bb
 8000a64:	200000b8 	.word	0x200000b8
 8000a68:	40010800 	.word	0x40010800
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	200000b9 	.word	0x200000b9
 8000a74:	20000000 	.word	0x20000000
 8000a78:	08003c1c 	.word	0x08003c1c
 8000a7c:	08003be4 	.word	0x08003be4
 8000a80:	08003c30 	.word	0x08003c30
 8000a84:	08003c40 	.word	0x08003c40
 8000a88:	08003c50 	.word	0x08003c50
 8000a8c:	200000be 	.word	0x200000be
 8000a90:	200000bf 	.word	0x200000bf

08000a94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b090      	sub	sp, #64	; 0x40
 8000a98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	2228      	movs	r2, #40	; 0x28
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f002 f84e 	bl	8002b44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abe:	2310      	movs	r3, #16
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fe0e 	bl	80016ec <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x46>
		Error_Handler();
 8000ad6:	f000 f8db 	bl	8000c90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 f87c 	bl	8001bf0 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x6e>
		Error_Handler();
 8000afe:	f000 f8c7 	bl	8000c90 <Error_Handler>
	}
}
 8000b02:	bf00      	nop
 8000b04:	3740      	adds	r7, #64	; 0x40
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d115      	bne.n	8000b48 <HAL_GPIO_EXTI_Callback+0x3c>

		uint8_t temp = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b20:	f000 fd9c 	bl	800165c <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	73fb      	strb	r3, [r7, #15]

		if (temp == HIGH) {
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d106      	bne.n	8000b3c <HAL_GPIO_EXTI_Callback+0x30>

			door_open_flag = 1;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
			timer_stop_evt = 1;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
			timer_start_evt = 1;
			door_open_flag = 0;

		}
	}
}
 8000b3a:	e005      	b.n	8000b48 <HAL_GPIO_EXTI_Callback+0x3c>
			timer_start_evt = 1;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_GPIO_EXTI_Callback+0x50>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
			door_open_flag = 0;
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40010800 	.word	0x40010800
 8000b54:	200000b8 	.word	0x200000b8
 8000b58:	200000b9 	.word	0x200000b9
 8000b5c:	200000ba 	.word	0x200000ba

08000b60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

	if(door_open_flag)
 8000b68:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_stop_evt = 1U;
 8000b70:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit(&huart1, (uint8_t*) "TIMER\r\n", sizeof("TIMER\r\n"), 10);
 8000b76:	230a      	movs	r3, #10
 8000b78:	2208      	movs	r2, #8
 8000b7a:	493d      	ldr	r1, [pc, #244]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b7c:	483d      	ldr	r0, [pc, #244]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b7e:	f001 fe4c 	bl	800281a <HAL_UART_Transmit>

	if (dryer.heatTime > 0) {
 8000b82:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b84:	885b      	ldrh	r3, [r3, #2]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d006      	beq.n	8000b98 <HAL_TIM_PeriodElapsedCallback+0x38>

		dryer.heatTime--;
 8000b8a:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b8c:	885b      	ldrh	r3, [r3, #2]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b94:	805a      	strh	r2, [r3, #2]
 8000b96:	e014      	b.n	8000bc2 <HAL_TIM_PeriodElapsedCallback+0x62>

	} else if(dryer.coolTime > 0) {
 8000b98:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b9a:	889b      	ldrh	r3, [r3, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <HAL_TIM_PeriodElapsedCallback+0x4e>

		dryer.coolTime--;
 8000ba0:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ba2:	889b      	ldrh	r3, [r3, #4]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000baa:	809a      	strh	r2, [r3, #4]
 8000bac:	e009      	b.n	8000bc2 <HAL_TIM_PeriodElapsedCallback+0x62>

	}else if(dryer.state == COMPLETE)
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d105      	bne.n	8000bc2 <HAL_TIM_PeriodElapsedCallback+0x62>
	{
		dryer.beepTime--;
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bb8:	799b      	ldrb	r3, [r3, #6]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bc0:	719a      	strb	r2, [r3, #6]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bc4:	885b      	ldrh	r3, [r3, #2]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d107      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x7a>
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bcc:	79db      	ldrb	r3, [r3, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d103      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x7a>

		dryer.cycle = COOL_CYCLE;
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	71da      	strb	r2, [r3, #7]
 8000bd8:	e010      	b.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0x9c>

	}else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bdc:	889b      	ldrh	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10c      	bne.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0x9c>
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000be4:	79db      	ldrb	r3, [r3, #7]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d108      	bne.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0x9c>

		printf("Complete\r\n");
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000bec:	f002 f838 	bl	8002c60 <puts>
		dryer.state = COMPLETE;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	705a      	strb	r2, [r3, #1]

	}

	if (pasue_cunt > 0) {
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0xb2>

		pasue_cunt--;
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e022      	b.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0xf8>

	} else if (rot_left_cunt > 0) {
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00d      	beq.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0xd6>

		rot_left_cunt--;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c24:	701a      	strb	r2, [r3, #0]

		if (rot_left_cunt == 0) {
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d114      	bne.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0xf8>

			pasue_cunt = 3U;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c30:	2203      	movs	r2, #3
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e010      	b.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0xf8>

		}

	} else if (rot_right_cunt > 0) {
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d00c      	beq.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0xf8>

		rot_right_cunt--;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c48:	701a      	strb	r2, [r3, #0]

		if (rot_right_cunt == 0) {
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0xf8>

			pasue_cunt = 3U;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c54:	2203      	movs	r2, #3
 8000c56:	701a      	strb	r2, [r3, #0]

		}
	}
	otp = 1;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000b8 	.word	0x200000b8
 8000c6c:	200000b9 	.word	0x200000b9
 8000c70:	08003c64 	.word	0x08003c64
 8000c74:	2000010c 	.word	0x2000010c
 8000c78:	200000b0 	.word	0x200000b0
 8000c7c:	08003c6c 	.word	0x08003c6c
 8000c80:	200000bd 	.word	0x200000bd
 8000c84:	20000001 	.word	0x20000001
 8000c88:	200000bc 	.word	0x200000bc
 8000c8c:	20000000 	.word	0x20000000

08000c90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_MspInit+0x40>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_MspInit+0x40>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_MspInit+0x40>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_MspInit+0x40>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_MspInit+0x40>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_MspInit+0x40>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f000 f9eb 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e00a      	b.n	8000d56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d40:	f3af 8000 	nop.w
 8000d44:	4601      	mov	r1, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1c5a      	adds	r2, r3, #1
 8000d4a:	60ba      	str	r2, [r7, #8]
 8000d4c:	b2ca      	uxtb	r2, r1
 8000d4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	dbf0      	blt.n	8000d40 <_read+0x12>
  }

  return len;
 8000d5e:	687b      	ldr	r3, [r7, #4]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e009      	b.n	8000d8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	60ba      	str	r2, [r7, #8]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fb98 	bl	80004b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dbf1      	blt.n	8000d7a <_write+0x12>
  }
  return len;
 8000d96:	687b      	ldr	r3, [r7, #4]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_close>:

int _close(int file)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <_isatty>:

int _isatty(int file)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f001 fe5e 	bl	8002af0 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20005000 	.word	0x20005000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200000c0 	.word	0x200000c0
 8000e68:	20000168 	.word	0x20000168

08000e6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <timer_init>:
#include "timer.h"

TIM_HandleTypeDef htim4;

void timer_init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_CLK_ENABLE();
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <timer_init+0xa4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <timer_init+0xa4>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <timer_init+0xa4>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <timer_init+0xa8>)
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <timer_init+0xac>)
 8000eb2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7200;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <timer_init+0xa8>)
 8000eb6:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000eba:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <timer_init+0xa8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1110+1;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <timer_init+0xa8>)
 8000ec4:	f240 4257 	movw	r2, #1111	; 0x457
 8000ec8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <timer_init+0xa8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <timer_init+0xa8>)
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim4);
 8000ed6:	4812      	ldr	r0, [pc, #72]	; (8000f20 <timer_init+0xa8>)
 8000ed8:	f001 f822 	bl	8001f20 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee0:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <timer_init+0xa8>)
 8000eea:	f001 f9f9 	bl	80022e0 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <timer_init+0xa8>)
 8000efe:	f001 fbcf 	bl	80026a0 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2101      	movs	r1, #1
 8000f06:	201e      	movs	r0, #30
 8000f08:	f000 f9ed 	bl	80012e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f0c:	201e      	movs	r0, #30
 8000f0e:	f000 fa06 	bl	800131e <HAL_NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	200000c4 	.word	0x200000c4
 8000f24:	40000800 	.word	0x40000800

08000f28 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <TIM4_IRQHandler+0x10>)
 8000f2e:	f001 f8cf 	bl	80020d0 <HAL_TIM_IRQHandler>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000c4 	.word	0x200000c4

08000f3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_USART1_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f74:	f001 fc04 	bl	8002780 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f7ff fe87 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000010c 	.word	0x2000010c
 8000f8c:	40013800 	.word	0x40013800

08000f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <HAL_UART_MspInit+0x8c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d131      	bne.n	8001014 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_UART_MspInit+0x90>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <HAL_UART_MspInit+0x94>)
 8000ff6:	f000 f9ad 	bl	8001354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0x94>)
 8001010:	f000 f9a0 	bl	8001354 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013800 	.word	0x40013800
 8001020:	40021000 	.word	0x40021000
 8001024:	40010800 	.word	0x40010800

08001028 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	; (800106c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800104e:	f7ff ff0d 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f001 fd53 	bl	8002afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001056:	f7ff fa41 	bl	80004dc <main>
  bx lr
 800105a:	4770      	bx	lr
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001064:	08003d40 	.word	0x08003d40
  ldr r2, =_sbss
 8001068:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800106c:	20000164 	.word	0x20000164

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_Init+0x28>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_Init+0x28>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 f923 	bl	80012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	200f      	movs	r0, #15
 800108c:	f000 f808 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fe04 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40022000 	.word	0x40022000

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f93b 	bl	800133a <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 f903 	bl	80012e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000004 	.word	0x20000004
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	20000008 	.word	0x20000008

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_IncTick+0x1c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x20>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a03      	ldr	r2, [pc, #12]	; (8001120 <HAL_IncTick+0x20>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	2000000c 	.word	0x2000000c
 8001120:	20000150 	.word	0x20000150

08001124 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <HAL_GetTick+0x10>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	20000150 	.word	0x20000150

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4906      	ldr	r1, [pc, #24]	; (80011d0 <__NVIC_EnableIRQ+0x34>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800129c:	d301      	bcc.n	80012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e00f      	b.n	80012c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <SysTick_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	210f      	movs	r1, #15
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f7ff ff90 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SysTick_Config+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <SysTick_Config+0x40>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff2d 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff42 	bl	8001180 <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff90 	bl	8001228 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5f 	bl	80011d4 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff35 	bl	800119c <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa2 	bl	800128c <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b08b      	sub	sp, #44	; 0x2c
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001366:	e169      	b.n	800163c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001368:	2201      	movs	r2, #1
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	429a      	cmp	r2, r3
 8001382:	f040 8158 	bne.w	8001636 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4a9a      	ldr	r2, [pc, #616]	; (80015f4 <HAL_GPIO_Init+0x2a0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d05e      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 8001390:	4a98      	ldr	r2, [pc, #608]	; (80015f4 <HAL_GPIO_Init+0x2a0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d875      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 8001396:	4a98      	ldr	r2, [pc, #608]	; (80015f8 <HAL_GPIO_Init+0x2a4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d058      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 800139c:	4a96      	ldr	r2, [pc, #600]	; (80015f8 <HAL_GPIO_Init+0x2a4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d86f      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013a2:	4a96      	ldr	r2, [pc, #600]	; (80015fc <HAL_GPIO_Init+0x2a8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d052      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 80013a8:	4a94      	ldr	r2, [pc, #592]	; (80015fc <HAL_GPIO_Init+0x2a8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d869      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013ae:	4a94      	ldr	r2, [pc, #592]	; (8001600 <HAL_GPIO_Init+0x2ac>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d04c      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 80013b4:	4a92      	ldr	r2, [pc, #584]	; (8001600 <HAL_GPIO_Init+0x2ac>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d863      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013ba:	4a92      	ldr	r2, [pc, #584]	; (8001604 <HAL_GPIO_Init+0x2b0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d046      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 80013c0:	4a90      	ldr	r2, [pc, #576]	; (8001604 <HAL_GPIO_Init+0x2b0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d85d      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d82a      	bhi.n	8001420 <HAL_GPIO_Init+0xcc>
 80013ca:	2b12      	cmp	r3, #18
 80013cc:	d859      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013ce:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <HAL_GPIO_Init+0x80>)
 80013d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d4:	0800144f 	.word	0x0800144f
 80013d8:	08001429 	.word	0x08001429
 80013dc:	0800143b 	.word	0x0800143b
 80013e0:	0800147d 	.word	0x0800147d
 80013e4:	08001483 	.word	0x08001483
 80013e8:	08001483 	.word	0x08001483
 80013ec:	08001483 	.word	0x08001483
 80013f0:	08001483 	.word	0x08001483
 80013f4:	08001483 	.word	0x08001483
 80013f8:	08001483 	.word	0x08001483
 80013fc:	08001483 	.word	0x08001483
 8001400:	08001483 	.word	0x08001483
 8001404:	08001483 	.word	0x08001483
 8001408:	08001483 	.word	0x08001483
 800140c:	08001483 	.word	0x08001483
 8001410:	08001483 	.word	0x08001483
 8001414:	08001483 	.word	0x08001483
 8001418:	08001431 	.word	0x08001431
 800141c:	08001445 	.word	0x08001445
 8001420:	4a79      	ldr	r2, [pc, #484]	; (8001608 <HAL_GPIO_Init+0x2b4>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d013      	beq.n	800144e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001426:	e02c      	b.n	8001482 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e029      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	3304      	adds	r3, #4
 8001436:	623b      	str	r3, [r7, #32]
          break;
 8001438:	e024      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	3308      	adds	r3, #8
 8001440:	623b      	str	r3, [r7, #32]
          break;
 8001442:	e01f      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	330c      	adds	r3, #12
 800144a:	623b      	str	r3, [r7, #32]
          break;
 800144c:	e01a      	b.n	8001484 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001456:	2304      	movs	r3, #4
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e013      	b.n	8001484 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d105      	bne.n	8001470 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001464:	2308      	movs	r3, #8
 8001466:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	611a      	str	r2, [r3, #16]
          break;
 800146e:	e009      	b.n	8001484 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001470:	2308      	movs	r3, #8
 8001472:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	615a      	str	r2, [r3, #20]
          break;
 800147a:	e003      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
          break;
 8001480:	e000      	b.n	8001484 <HAL_GPIO_Init+0x130>
          break;
 8001482:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2bff      	cmp	r3, #255	; 0xff
 8001488:	d801      	bhi.n	800148e <HAL_GPIO_Init+0x13a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	e001      	b.n	8001492 <HAL_GPIO_Init+0x13e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3304      	adds	r3, #4
 8001492:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2bff      	cmp	r3, #255	; 0xff
 8001498:	d802      	bhi.n	80014a0 <HAL_GPIO_Init+0x14c>
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	e002      	b.n	80014a6 <HAL_GPIO_Init+0x152>
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3b08      	subs	r3, #8
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	210f      	movs	r1, #15
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	6a39      	ldr	r1, [r7, #32]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	431a      	orrs	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80b1 	beq.w	8001636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d4:	4b4d      	ldr	r3, [pc, #308]	; (800160c <HAL_GPIO_Init+0x2b8>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a4c      	ldr	r2, [pc, #304]	; (800160c <HAL_GPIO_Init+0x2b8>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b4a      	ldr	r3, [pc, #296]	; (800160c <HAL_GPIO_Init+0x2b8>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014ec:	4a48      	ldr	r2, [pc, #288]	; (8001610 <HAL_GPIO_Init+0x2bc>)
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a40      	ldr	r2, [pc, #256]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d013      	beq.n	8001540 <HAL_GPIO_Init+0x1ec>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a3f      	ldr	r2, [pc, #252]	; (8001618 <HAL_GPIO_Init+0x2c4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d00d      	beq.n	800153c <HAL_GPIO_Init+0x1e8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3e      	ldr	r2, [pc, #248]	; (800161c <HAL_GPIO_Init+0x2c8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d007      	beq.n	8001538 <HAL_GPIO_Init+0x1e4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3d      	ldr	r2, [pc, #244]	; (8001620 <HAL_GPIO_Init+0x2cc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d101      	bne.n	8001534 <HAL_GPIO_Init+0x1e0>
 8001530:	2303      	movs	r3, #3
 8001532:	e006      	b.n	8001542 <HAL_GPIO_Init+0x1ee>
 8001534:	2304      	movs	r3, #4
 8001536:	e004      	b.n	8001542 <HAL_GPIO_Init+0x1ee>
 8001538:	2302      	movs	r3, #2
 800153a:	e002      	b.n	8001542 <HAL_GPIO_Init+0x1ee>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_GPIO_Init+0x1ee>
 8001540:	2300      	movs	r3, #0
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	f002 0203 	and.w	r2, r2, #3
 8001548:	0092      	lsls	r2, r2, #2
 800154a:	4093      	lsls	r3, r2
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001552:	492f      	ldr	r1, [pc, #188]	; (8001610 <HAL_GPIO_Init+0x2bc>)
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	3302      	adds	r3, #2
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800156c:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	492c      	ldr	r1, [pc, #176]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	43db      	mvns	r3, r3
 8001582:	4928      	ldr	r1, [pc, #160]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 8001584:	4013      	ands	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4922      	ldr	r1, [pc, #136]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	491e      	ldr	r1, [pc, #120]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	4918      	ldr	r1, [pc, #96]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	608b      	str	r3, [r1, #8]
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4914      	ldr	r1, [pc, #80]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d021      	beq.n	8001628 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	490e      	ldr	r1, [pc, #56]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60cb      	str	r3, [r1, #12]
 80015f0:	e021      	b.n	8001636 <HAL_GPIO_Init+0x2e2>
 80015f2:	bf00      	nop
 80015f4:	10320000 	.word	0x10320000
 80015f8:	10310000 	.word	0x10310000
 80015fc:	10220000 	.word	0x10220000
 8001600:	10210000 	.word	0x10210000
 8001604:	10120000 	.word	0x10120000
 8001608:	10110000 	.word	0x10110000
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000
 8001614:	40010800 	.word	0x40010800
 8001618:	40010c00 	.word	0x40010c00
 800161c:	40011000 	.word	0x40011000
 8001620:	40011400 	.word	0x40011400
 8001624:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_GPIO_Init+0x304>)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	43db      	mvns	r3, r3
 8001630:	4909      	ldr	r1, [pc, #36]	; (8001658 <HAL_GPIO_Init+0x304>)
 8001632:	4013      	ands	r3, r2
 8001634:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	3301      	adds	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	fa22 f303 	lsr.w	r3, r2, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	f47f ae8e 	bne.w	8001368 <HAL_GPIO_Init+0x14>
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	372c      	adds	r7, #44	; 0x2c
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e001      	b.n	800167e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	807b      	strh	r3, [r7, #2]
 8001696:	4613      	mov	r3, r2
 8001698:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800169a:	787b      	ldrb	r3, [r7, #1]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a0:	887a      	ldrh	r2, [r7, #2]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016a6:	e003      	b.n	80016b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	041a      	lsls	r2, r3, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fa16 	bl	8000b0c <HAL_GPIO_EXTI_Callback>
  }
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e272      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800170c:	4b92      	ldr	r3, [pc, #584]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00c      	beq.n	8001732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001718:	4b8f      	ldr	r3, [pc, #572]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d112      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
 8001724:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d10b      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	4b89      	ldr	r3, [pc, #548]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d06c      	beq.n	8001818 <HAL_RCC_OscConfig+0x12c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d168      	bne.n	8001818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e24c      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x76>
 8001754:	4b80      	ldr	r3, [pc, #512]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a7f      	ldr	r2, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e02e      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x98>
 800176a:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7a      	ldr	r2, [pc, #488]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b78      	ldr	r3, [pc, #480]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a77      	ldr	r2, [pc, #476]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0xbc>
 800178e:	4b72      	ldr	r3, [pc, #456]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a71      	ldr	r2, [pc, #452]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6e      	ldr	r2, [pc, #440]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 80017a8:	4b6b      	ldr	r3, [pc, #428]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6a      	ldr	r2, [pc, #424]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b68      	ldr	r3, [pc, #416]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a67      	ldr	r2, [pc, #412]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fcac 	bl	8001124 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fca8 	bl	8001124 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e200      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0xe4>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fc98 	bl	8001124 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fc94 	bl	8001124 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1ec      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x10c>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001826:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001832:	4b49      	ldr	r3, [pc, #292]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
 800183e:	4b46      	ldr	r3, [pc, #280]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b43      	ldr	r3, [pc, #268]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1c0      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4939      	ldr	r1, [pc, #228]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e03a      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b36      	ldr	r3, [pc, #216]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fc4d 	bl	8001124 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fc49 	bl	8001124 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1a1      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4927      	ldr	r1, [pc, #156]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fc2c 	bl	8001124 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff fc28 	bl	8001124 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e180      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03a      	beq.n	8001970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fc0c 	bl	8001124 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fc08 	bl	8001124 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e160      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f000 fad8 	bl	8001ee4 <RCC_Delay>
 8001934:	e01c      	b.n	8001970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff fbf2 	bl	8001124 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001942:	e00f      	b.n	8001964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fbee 	bl	8001124 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d908      	bls.n	8001964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e146      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	42420000 	.word	0x42420000
 8001960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b92      	ldr	r3, [pc, #584]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e9      	bne.n	8001944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a6 	beq.w	8001aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10d      	bne.n	80019aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a87      	ldr	r2, [pc, #540]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b85      	ldr	r3, [pc, #532]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b82      	ldr	r3, [pc, #520]	; (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b6:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7e      	ldr	r2, [pc, #504]	; (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c2:	f7ff fbaf 	bl	8001124 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff fbab 	bl	8001124 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	; 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e103      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	4b75      	ldr	r3, [pc, #468]	; (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x312>
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a6e      	ldr	r2, [pc, #440]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e02d      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x334>
 8001a06:	4b6a      	ldr	r3, [pc, #424]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a69      	ldr	r2, [pc, #420]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a66      	ldr	r2, [pc, #408]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	e01c      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x356>
 8001a28:	4b61      	ldr	r3, [pc, #388]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a60      	ldr	r2, [pc, #384]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	4b5e      	ldr	r3, [pc, #376]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a5d      	ldr	r2, [pc, #372]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a42:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a5a      	ldr	r2, [pc, #360]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a57      	ldr	r2, [pc, #348]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb5f 	bl	8001124 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fb5b 	bl	8001124 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0b1      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x37e>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb49 	bl	8001124 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff fb45 	bl	8001124 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e09b      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	4b40      	ldr	r3, [pc, #256]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a3b      	ldr	r2, [pc, #236]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8087 	beq.w	8001be2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d061      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d146      	bne.n	8001b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fb19 	bl	8001124 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff fb15 	bl	8001124 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e06d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d108      	bne.n	8001b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4921      	ldr	r1, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a19      	ldr	r1, [r3, #32]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	430b      	orrs	r3, r1
 8001b42:	491b      	ldr	r1, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fae9 	bl	8001124 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fae5 	bl	8001124 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e03d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x46a>
 8001b74:	e035      	b.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fad2 	bl	8001124 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff face 	bl	8001124 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e026      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x498>
 8001ba2:	e01e      	b.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e019      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_OscConfig+0x500>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0d0      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b6a      	ldr	r3, [pc, #424]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d910      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b67      	ldr	r3, [pc, #412]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	4965      	ldr	r1, [pc, #404]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b8      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c4c:	4b59      	ldr	r3, [pc, #356]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a52      	ldr	r2, [pc, #328]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	494d      	ldr	r1, [pc, #308]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d040      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d115      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e07f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	4b41      	ldr	r3, [pc, #260]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e073      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e06b      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cce:	4b39      	ldr	r3, [pc, #228]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f023 0203 	bic.w	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4936      	ldr	r1, [pc, #216]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce0:	f7ff fa20 	bl	8001124 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7ff fa1c 	bl	8001124 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e053      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 020c 	and.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d1eb      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d210      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	4922      	ldr	r1, [pc, #136]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e032      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4916      	ldr	r1, [pc, #88]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	490e      	ldr	r1, [pc, #56]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7e:	f000 f821 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	490a      	ldr	r1, [pc, #40]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1cc>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f97e 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08003c88 	.word	0x08003c88
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	b490      	push	{r4, r7}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xac>)
 8001dcc:	1d3c      	adds	r4, r7, #4
 8001dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dd4:	f240 2301 	movw	r3, #513	; 0x201
 8001dd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d002      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x40>
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x46>
 8001e02:	e02b      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e06:	623b      	str	r3, [r7, #32]
      break;
 8001e08:	e02b      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	0c9b      	lsrs	r3, r3, #18
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3328      	adds	r3, #40	; 0x28
 8001e14:	443b      	add	r3, r7
 8001e16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e1a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0c5b      	lsrs	r3, r3, #17
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	3328      	adds	r3, #40	; 0x28
 8001e32:	443b      	add	r3, r7
 8001e34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e3e:	fb03 f202 	mul.w	r2, r3, r2
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	e004      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	623b      	str	r3, [r7, #32]
      break;
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e5e:	623b      	str	r3, [r7, #32]
      break;
 8001e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e62:	6a3b      	ldr	r3, [r7, #32]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc90      	pop	{r4, r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	08003c78 	.word	0x08003c78
 8001e74:	40021000 	.word	0x40021000
 8001e78:	007a1200 	.word	0x007a1200
 8001e7c:	003d0900 	.word	0x003d0900

08001e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e84:	4b02      	ldr	r3, [pc, #8]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e98:	f7ff fff2 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4903      	ldr	r1, [pc, #12]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08003c98 	.word	0x08003c98

08001ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec0:	f7ff ffde 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	0adb      	lsrs	r3, r3, #11
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4903      	ldr	r1, [pc, #12]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08003c98 	.word	0x08003c98

08001ee4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <RCC_Delay+0x34>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <RCC_Delay+0x38>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	0a5b      	lsrs	r3, r3, #9
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f00:	bf00      	nop
  }
  while (Delay --);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	60fa      	str	r2, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f9      	bne.n	8001f00 <RCC_Delay+0x1c>
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	10624dd3 	.word	0x10624dd3

08001f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e041      	b.n	8001fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f839 	bl	8001fbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	f000 faa6 	bl	80024b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d001      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e03a      	b.n	800205e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_TIM_Base_Start_IT+0x98>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00e      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x58>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002012:	d009      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x58>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_TIM_Base_Start_IT+0x9c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x58>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_TIM_Base_Start_IT+0xa0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d111      	bne.n	800204c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b06      	cmp	r3, #6
 8002038:	d010      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204a:	e007      	b.n	800205c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800

08002074 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	f241 1311 	movw	r3, #4369	; 0x1111
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10f      	bne.n	80020bc <HAL_TIM_Base_Stop_IT+0x48>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a1a      	ldr	r2, [r3, #32]
 80020a2:	f240 4344 	movw	r3, #1092	; 0x444
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_TIM_Base_Stop_IT+0x48>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d122      	bne.n	800212c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d11b      	bne.n	800212c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0202 	mvn.w	r2, #2
 80020fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f9b1 	bl	800247a <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f9a4 	bl	8002468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f9b3 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b04      	cmp	r3, #4
 8002138:	d122      	bne.n	8002180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b04      	cmp	r3, #4
 8002146:	d11b      	bne.n	8002180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0204 	mvn.w	r2, #4
 8002150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f987 	bl	800247a <HAL_TIM_IC_CaptureCallback>
 800216c:	e005      	b.n	800217a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f97a 	bl	8002468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f989 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b08      	cmp	r3, #8
 800218c:	d122      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b08      	cmp	r3, #8
 800219a:	d11b      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0208 	mvn.w	r2, #8
 80021a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2204      	movs	r2, #4
 80021aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f95d 	bl	800247a <HAL_TIM_IC_CaptureCallback>
 80021c0:	e005      	b.n	80021ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f950 	bl	8002468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f95f 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b10      	cmp	r3, #16
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0210 	mvn.w	r2, #16
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2208      	movs	r2, #8
 80021fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f933 	bl	800247a <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f926 	bl	8002468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f935 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10e      	bne.n	8002254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0201 	mvn.w	r2, #1
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fc86 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	2b80      	cmp	r3, #128	; 0x80
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226c:	2b80      	cmp	r3, #128	; 0x80
 800226e:	d107      	bne.n	8002280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fa77 	bl	800276e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b40      	cmp	r3, #64	; 0x40
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d107      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f8f9 	bl	800249e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d10e      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d107      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0220 	mvn.w	r2, #32
 80022d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa42 	bl	800275c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_TIM_ConfigClockSource+0x18>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e0b3      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x180>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002316:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800231e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002330:	d03e      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0xd0>
 8002332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002336:	f200 8087 	bhi.w	8002448 <HAL_TIM_ConfigClockSource+0x168>
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233e:	f000 8085 	beq.w	800244c <HAL_TIM_ConfigClockSource+0x16c>
 8002342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002346:	d87f      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002348:	2b70      	cmp	r3, #112	; 0x70
 800234a:	d01a      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0xa2>
 800234c:	2b70      	cmp	r3, #112	; 0x70
 800234e:	d87b      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002350:	2b60      	cmp	r3, #96	; 0x60
 8002352:	d050      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x116>
 8002354:	2b60      	cmp	r3, #96	; 0x60
 8002356:	d877      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002358:	2b50      	cmp	r3, #80	; 0x50
 800235a:	d03c      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0xf6>
 800235c:	2b50      	cmp	r3, #80	; 0x50
 800235e:	d873      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002360:	2b40      	cmp	r3, #64	; 0x40
 8002362:	d058      	beq.n	8002416 <HAL_TIM_ConfigClockSource+0x136>
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d86f      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002368:	2b30      	cmp	r3, #48	; 0x30
 800236a:	d064      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x156>
 800236c:	2b30      	cmp	r3, #48	; 0x30
 800236e:	d86b      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002370:	2b20      	cmp	r3, #32
 8002372:	d060      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x156>
 8002374:	2b20      	cmp	r3, #32
 8002376:	d867      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d05c      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x156>
 800237c:	2b10      	cmp	r3, #16
 800237e:	d05a      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002380:	e062      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f000 f966 	bl	8002662 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	609a      	str	r2, [r3, #8]
      break;
 80023ae:	e04e      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6899      	ldr	r1, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f000 f94f 	bl	8002662 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d2:	609a      	str	r2, [r3, #8]
      break;
 80023d4:	e03b      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f000 f8c6 	bl	8002574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2150      	movs	r1, #80	; 0x50
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f91d 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 80023f4:	e02b      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	461a      	mov	r2, r3
 8002404:	f000 f8e4 	bl	80025d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2160      	movs	r1, #96	; 0x60
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f90d 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 8002414:	e01b      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	461a      	mov	r2, r3
 8002424:	f000 f8a6 	bl	8002574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2140      	movs	r1, #64	; 0x40
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f8fd 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 8002434:	e00b      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f000 f8f4 	bl	800262e <TIM_ITRx_SetConfig>
        break;
 8002446:	e002      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002448:	bf00      	nop
 800244a:	e000      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800244c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a29      	ldr	r2, [pc, #164]	; (8002568 <TIM_Base_SetConfig+0xb8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00b      	beq.n	80024e0 <TIM_Base_SetConfig+0x30>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ce:	d007      	beq.n	80024e0 <TIM_Base_SetConfig+0x30>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a26      	ldr	r2, [pc, #152]	; (800256c <TIM_Base_SetConfig+0xbc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d003      	beq.n	80024e0 <TIM_Base_SetConfig+0x30>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a25      	ldr	r2, [pc, #148]	; (8002570 <TIM_Base_SetConfig+0xc0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d108      	bne.n	80024f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <TIM_Base_SetConfig+0xb8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00b      	beq.n	8002512 <TIM_Base_SetConfig+0x62>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002500:	d007      	beq.n	8002512 <TIM_Base_SetConfig+0x62>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <TIM_Base_SetConfig+0xbc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d003      	beq.n	8002512 <TIM_Base_SetConfig+0x62>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a18      	ldr	r2, [pc, #96]	; (8002570 <TIM_Base_SetConfig+0xc0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d108      	bne.n	8002524 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <TIM_Base_SetConfig+0xb8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d103      	bne.n	8002558 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	615a      	str	r2, [r3, #20]
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	40012c00 	.word	0x40012c00
 800256c:	40000400 	.word	0x40000400
 8002570:	40000800 	.word	0x40000800

08002574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f023 0201 	bic.w	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f023 030a 	bic.w	r3, r3, #10
 80025b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	621a      	str	r2, [r3, #32]
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 0210 	bic.w	r2, r3, #16
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	031b      	lsls	r3, r3, #12
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800260c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	621a      	str	r2, [r3, #32]
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	f043 0307 	orr.w	r3, r3, #7
 8002650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002662:	b480      	push	{r7}
 8002664:	b087      	sub	sp, #28
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800267c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	021a      	lsls	r2, r3, #8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	431a      	orrs	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4313      	orrs	r3, r2
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	609a      	str	r2, [r3, #8]
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e046      	b.n	8002746 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00e      	beq.n	800271a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002704:	d009      	beq.n	800271a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d004      	beq.n	800271a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a10      	ldr	r2, [pc, #64]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d10c      	bne.n	8002734 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	4313      	orrs	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	40012c00 	.word	0x40012c00
 8002754:	40000400 	.word	0x40000400
 8002758:	40000800 	.word	0x40000800

0800275c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e03f      	b.n	8002812 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fbf2 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2224      	movs	r2, #36	; 0x24
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f905 	bl	80029d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b08a      	sub	sp, #40	; 0x28
 800281e:	af02      	add	r7, sp, #8
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b20      	cmp	r3, #32
 8002838:	d17c      	bne.n	8002934 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_UART_Transmit+0x2c>
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e075      	b.n	8002936 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_UART_Transmit+0x3e>
 8002854:	2302      	movs	r3, #2
 8002856:	e06e      	b.n	8002936 <HAL_UART_Transmit+0x11c>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2221      	movs	r2, #33	; 0x21
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286e:	f7fe fc59 	bl	8001124 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002888:	d108      	bne.n	800289c <HAL_UART_Transmit+0x82>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e003      	b.n	80028a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028ac:	e02a      	b.n	8002904 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f840 	bl	800293e <UART_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e036      	b.n	8002936 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	3302      	adds	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e007      	b.n	80028f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1cf      	bne.n	80028ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2140      	movs	r1, #64	; 0x40
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f810 	bl	800293e <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e006      	b.n	8002936 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002934:	2302      	movs	r3, #2
  }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294e:	e02c      	b.n	80029aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d028      	beq.n	80029aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <UART_WaitOnFlagUntilTimeout+0x30>
 800295e:	f7fe fbe1 	bl	8001124 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	429a      	cmp	r2, r3
 800296c:	d21d      	bcs.n	80029aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800297c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e00f      	b.n	80029ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4013      	ands	r3, r2
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	bf0c      	ite	eq
 80029ba:	2301      	moveq	r3, #1
 80029bc:	2300      	movne	r3, #0
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d0c3      	beq.n	8002950 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a0e:	f023 030c 	bic.w	r3, r3, #12
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2c      	ldr	r2, [pc, #176]	; (8002ae8 <UART_SetConfig+0x114>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d103      	bne.n	8002a44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a3c:	f7ff fa3e 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	e002      	b.n	8002a4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a44:	f7ff fa26 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8002a48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009a      	lsls	r2, r3, #2
 8002a54:	441a      	add	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	4a22      	ldr	r2, [pc, #136]	; (8002aec <UART_SetConfig+0x118>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	0119      	lsls	r1, r3, #4
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009a      	lsls	r2, r3, #2
 8002a74:	441a      	add	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <UART_SetConfig+0x118>)
 8002a82:	fba3 0302 	umull	r0, r3, r3, r2
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2064      	movs	r0, #100	; 0x64
 8002a8a:	fb00 f303 	mul.w	r3, r0, r3
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	3332      	adds	r3, #50	; 0x32
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <UART_SetConfig+0x118>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa0:	4419      	add	r1, r3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <UART_SetConfig+0x118>)
 8002aba:	fba3 0302 	umull	r0, r3, r3, r2
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2064      	movs	r0, #100	; 0x64
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	3332      	adds	r3, #50	; 0x32
 8002acc:	4a07      	ldr	r2, [pc, #28]	; (8002aec <UART_SetConfig+0x118>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	f003 020f 	and.w	r2, r3, #15
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	440a      	add	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	51eb851f 	.word	0x51eb851f

08002af0 <__errno>:
 8002af0:	4b01      	ldr	r3, [pc, #4]	; (8002af8 <__errno+0x8>)
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000010 	.word	0x20000010

08002afc <__libc_init_array>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	2600      	movs	r6, #0
 8002b00:	4d0c      	ldr	r5, [pc, #48]	; (8002b34 <__libc_init_array+0x38>)
 8002b02:	4c0d      	ldr	r4, [pc, #52]	; (8002b38 <__libc_init_array+0x3c>)
 8002b04:	1b64      	subs	r4, r4, r5
 8002b06:	10a4      	asrs	r4, r4, #2
 8002b08:	42a6      	cmp	r6, r4
 8002b0a:	d109      	bne.n	8002b20 <__libc_init_array+0x24>
 8002b0c:	f001 f82c 	bl	8003b68 <_init>
 8002b10:	2600      	movs	r6, #0
 8002b12:	4d0a      	ldr	r5, [pc, #40]	; (8002b3c <__libc_init_array+0x40>)
 8002b14:	4c0a      	ldr	r4, [pc, #40]	; (8002b40 <__libc_init_array+0x44>)
 8002b16:	1b64      	subs	r4, r4, r5
 8002b18:	10a4      	asrs	r4, r4, #2
 8002b1a:	42a6      	cmp	r6, r4
 8002b1c:	d105      	bne.n	8002b2a <__libc_init_array+0x2e>
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
 8002b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b24:	4798      	blx	r3
 8002b26:	3601      	adds	r6, #1
 8002b28:	e7ee      	b.n	8002b08 <__libc_init_array+0xc>
 8002b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2e:	4798      	blx	r3
 8002b30:	3601      	adds	r6, #1
 8002b32:	e7f2      	b.n	8002b1a <__libc_init_array+0x1e>
 8002b34:	08003d38 	.word	0x08003d38
 8002b38:	08003d38 	.word	0x08003d38
 8002b3c:	08003d38 	.word	0x08003d38
 8002b40:	08003d3c 	.word	0x08003d3c

08002b44 <memset>:
 8002b44:	4603      	mov	r3, r0
 8002b46:	4402      	add	r2, r0
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d100      	bne.n	8002b4e <memset+0xa>
 8002b4c:	4770      	bx	lr
 8002b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b52:	e7f9      	b.n	8002b48 <memset+0x4>

08002b54 <iprintf>:
 8002b54:	b40f      	push	{r0, r1, r2, r3}
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <iprintf+0x2c>)
 8002b58:	b513      	push	{r0, r1, r4, lr}
 8002b5a:	681c      	ldr	r4, [r3, #0]
 8002b5c:	b124      	cbz	r4, 8002b68 <iprintf+0x14>
 8002b5e:	69a3      	ldr	r3, [r4, #24]
 8002b60:	b913      	cbnz	r3, 8002b68 <iprintf+0x14>
 8002b62:	4620      	mov	r0, r4
 8002b64:	f000 fa5a 	bl	800301c <__sinit>
 8002b68:	ab05      	add	r3, sp, #20
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	9a04      	ldr	r2, [sp, #16]
 8002b6e:	68a1      	ldr	r1, [r4, #8]
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	f000 fc5d 	bl	8003430 <_vfiprintf_r>
 8002b76:	b002      	add	sp, #8
 8002b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b7c:	b004      	add	sp, #16
 8002b7e:	4770      	bx	lr
 8002b80:	20000010 	.word	0x20000010

08002b84 <_puts_r>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	460e      	mov	r6, r1
 8002b88:	4605      	mov	r5, r0
 8002b8a:	b118      	cbz	r0, 8002b94 <_puts_r+0x10>
 8002b8c:	6983      	ldr	r3, [r0, #24]
 8002b8e:	b90b      	cbnz	r3, 8002b94 <_puts_r+0x10>
 8002b90:	f000 fa44 	bl	800301c <__sinit>
 8002b94:	69ab      	ldr	r3, [r5, #24]
 8002b96:	68ac      	ldr	r4, [r5, #8]
 8002b98:	b913      	cbnz	r3, 8002ba0 <_puts_r+0x1c>
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f000 fa3e 	bl	800301c <__sinit>
 8002ba0:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <_puts_r+0xd0>)
 8002ba2:	429c      	cmp	r4, r3
 8002ba4:	d120      	bne.n	8002be8 <_puts_r+0x64>
 8002ba6:	686c      	ldr	r4, [r5, #4]
 8002ba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002baa:	07db      	lsls	r3, r3, #31
 8002bac:	d405      	bmi.n	8002bba <_puts_r+0x36>
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	0598      	lsls	r0, r3, #22
 8002bb2:	d402      	bmi.n	8002bba <_puts_r+0x36>
 8002bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bb6:	f000 facf 	bl	8003158 <__retarget_lock_acquire_recursive>
 8002bba:	89a3      	ldrh	r3, [r4, #12]
 8002bbc:	0719      	lsls	r1, r3, #28
 8002bbe:	d51d      	bpl.n	8002bfc <_puts_r+0x78>
 8002bc0:	6923      	ldr	r3, [r4, #16]
 8002bc2:	b1db      	cbz	r3, 8002bfc <_puts_r+0x78>
 8002bc4:	3e01      	subs	r6, #1
 8002bc6:	68a3      	ldr	r3, [r4, #8]
 8002bc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60a3      	str	r3, [r4, #8]
 8002bd0:	bb39      	cbnz	r1, 8002c22 <_puts_r+0x9e>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da38      	bge.n	8002c48 <_puts_r+0xc4>
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	210a      	movs	r1, #10
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f000 f848 	bl	8002c70 <__swbuf_r>
 8002be0:	3001      	adds	r0, #1
 8002be2:	d011      	beq.n	8002c08 <_puts_r+0x84>
 8002be4:	250a      	movs	r5, #10
 8002be6:	e011      	b.n	8002c0c <_puts_r+0x88>
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <_puts_r+0xd4>)
 8002bea:	429c      	cmp	r4, r3
 8002bec:	d101      	bne.n	8002bf2 <_puts_r+0x6e>
 8002bee:	68ac      	ldr	r4, [r5, #8]
 8002bf0:	e7da      	b.n	8002ba8 <_puts_r+0x24>
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <_puts_r+0xd8>)
 8002bf4:	429c      	cmp	r4, r3
 8002bf6:	bf08      	it	eq
 8002bf8:	68ec      	ldreq	r4, [r5, #12]
 8002bfa:	e7d5      	b.n	8002ba8 <_puts_r+0x24>
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f000 f888 	bl	8002d14 <__swsetup_r>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d0dd      	beq.n	8002bc4 <_puts_r+0x40>
 8002c08:	f04f 35ff 	mov.w	r5, #4294967295
 8002c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c0e:	07da      	lsls	r2, r3, #31
 8002c10:	d405      	bmi.n	8002c1e <_puts_r+0x9a>
 8002c12:	89a3      	ldrh	r3, [r4, #12]
 8002c14:	059b      	lsls	r3, r3, #22
 8002c16:	d402      	bmi.n	8002c1e <_puts_r+0x9a>
 8002c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c1a:	f000 fa9e 	bl	800315a <__retarget_lock_release_recursive>
 8002c1e:	4628      	mov	r0, r5
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da04      	bge.n	8002c30 <_puts_r+0xac>
 8002c26:	69a2      	ldr	r2, [r4, #24]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	dc06      	bgt.n	8002c3a <_puts_r+0xb6>
 8002c2c:	290a      	cmp	r1, #10
 8002c2e:	d004      	beq.n	8002c3a <_puts_r+0xb6>
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	6022      	str	r2, [r4, #0]
 8002c36:	7019      	strb	r1, [r3, #0]
 8002c38:	e7c5      	b.n	8002bc6 <_puts_r+0x42>
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f000 f817 	bl	8002c70 <__swbuf_r>
 8002c42:	3001      	adds	r0, #1
 8002c44:	d1bf      	bne.n	8002bc6 <_puts_r+0x42>
 8002c46:	e7df      	b.n	8002c08 <_puts_r+0x84>
 8002c48:	250a      	movs	r5, #10
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	6022      	str	r2, [r4, #0]
 8002c50:	701d      	strb	r5, [r3, #0]
 8002c52:	e7db      	b.n	8002c0c <_puts_r+0x88>
 8002c54:	08003cc4 	.word	0x08003cc4
 8002c58:	08003ce4 	.word	0x08003ce4
 8002c5c:	08003ca4 	.word	0x08003ca4

08002c60 <puts>:
 8002c60:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <puts+0xc>)
 8002c62:	4601      	mov	r1, r0
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	f7ff bf8d 	b.w	8002b84 <_puts_r>
 8002c6a:	bf00      	nop
 8002c6c:	20000010 	.word	0x20000010

08002c70 <__swbuf_r>:
 8002c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c72:	460e      	mov	r6, r1
 8002c74:	4614      	mov	r4, r2
 8002c76:	4605      	mov	r5, r0
 8002c78:	b118      	cbz	r0, 8002c82 <__swbuf_r+0x12>
 8002c7a:	6983      	ldr	r3, [r0, #24]
 8002c7c:	b90b      	cbnz	r3, 8002c82 <__swbuf_r+0x12>
 8002c7e:	f000 f9cd 	bl	800301c <__sinit>
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <__swbuf_r+0x98>)
 8002c84:	429c      	cmp	r4, r3
 8002c86:	d12b      	bne.n	8002ce0 <__swbuf_r+0x70>
 8002c88:	686c      	ldr	r4, [r5, #4]
 8002c8a:	69a3      	ldr	r3, [r4, #24]
 8002c8c:	60a3      	str	r3, [r4, #8]
 8002c8e:	89a3      	ldrh	r3, [r4, #12]
 8002c90:	071a      	lsls	r2, r3, #28
 8002c92:	d52f      	bpl.n	8002cf4 <__swbuf_r+0x84>
 8002c94:	6923      	ldr	r3, [r4, #16]
 8002c96:	b36b      	cbz	r3, 8002cf4 <__swbuf_r+0x84>
 8002c98:	6923      	ldr	r3, [r4, #16]
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	b2f6      	uxtb	r6, r6
 8002c9e:	1ac0      	subs	r0, r0, r3
 8002ca0:	6963      	ldr	r3, [r4, #20]
 8002ca2:	4637      	mov	r7, r6
 8002ca4:	4283      	cmp	r3, r0
 8002ca6:	dc04      	bgt.n	8002cb2 <__swbuf_r+0x42>
 8002ca8:	4621      	mov	r1, r4
 8002caa:	4628      	mov	r0, r5
 8002cac:	f000 f922 	bl	8002ef4 <_fflush_r>
 8002cb0:	bb30      	cbnz	r0, 8002d00 <__swbuf_r+0x90>
 8002cb2:	68a3      	ldr	r3, [r4, #8]
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	60a3      	str	r3, [r4, #8]
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	6022      	str	r2, [r4, #0]
 8002cc0:	701e      	strb	r6, [r3, #0]
 8002cc2:	6963      	ldr	r3, [r4, #20]
 8002cc4:	4283      	cmp	r3, r0
 8002cc6:	d004      	beq.n	8002cd2 <__swbuf_r+0x62>
 8002cc8:	89a3      	ldrh	r3, [r4, #12]
 8002cca:	07db      	lsls	r3, r3, #31
 8002ccc:	d506      	bpl.n	8002cdc <__swbuf_r+0x6c>
 8002cce:	2e0a      	cmp	r6, #10
 8002cd0:	d104      	bne.n	8002cdc <__swbuf_r+0x6c>
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	f000 f90d 	bl	8002ef4 <_fflush_r>
 8002cda:	b988      	cbnz	r0, 8002d00 <__swbuf_r+0x90>
 8002cdc:	4638      	mov	r0, r7
 8002cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <__swbuf_r+0x9c>)
 8002ce2:	429c      	cmp	r4, r3
 8002ce4:	d101      	bne.n	8002cea <__swbuf_r+0x7a>
 8002ce6:	68ac      	ldr	r4, [r5, #8]
 8002ce8:	e7cf      	b.n	8002c8a <__swbuf_r+0x1a>
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <__swbuf_r+0xa0>)
 8002cec:	429c      	cmp	r4, r3
 8002cee:	bf08      	it	eq
 8002cf0:	68ec      	ldreq	r4, [r5, #12]
 8002cf2:	e7ca      	b.n	8002c8a <__swbuf_r+0x1a>
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 f80c 	bl	8002d14 <__swsetup_r>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d0cb      	beq.n	8002c98 <__swbuf_r+0x28>
 8002d00:	f04f 37ff 	mov.w	r7, #4294967295
 8002d04:	e7ea      	b.n	8002cdc <__swbuf_r+0x6c>
 8002d06:	bf00      	nop
 8002d08:	08003cc4 	.word	0x08003cc4
 8002d0c:	08003ce4 	.word	0x08003ce4
 8002d10:	08003ca4 	.word	0x08003ca4

08002d14 <__swsetup_r>:
 8002d14:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <__swsetup_r+0xcc>)
 8002d16:	b570      	push	{r4, r5, r6, lr}
 8002d18:	681d      	ldr	r5, [r3, #0]
 8002d1a:	4606      	mov	r6, r0
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	b125      	cbz	r5, 8002d2a <__swsetup_r+0x16>
 8002d20:	69ab      	ldr	r3, [r5, #24]
 8002d22:	b913      	cbnz	r3, 8002d2a <__swsetup_r+0x16>
 8002d24:	4628      	mov	r0, r5
 8002d26:	f000 f979 	bl	800301c <__sinit>
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <__swsetup_r+0xd0>)
 8002d2c:	429c      	cmp	r4, r3
 8002d2e:	d10f      	bne.n	8002d50 <__swsetup_r+0x3c>
 8002d30:	686c      	ldr	r4, [r5, #4]
 8002d32:	89a3      	ldrh	r3, [r4, #12]
 8002d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d38:	0719      	lsls	r1, r3, #28
 8002d3a:	d42c      	bmi.n	8002d96 <__swsetup_r+0x82>
 8002d3c:	06dd      	lsls	r5, r3, #27
 8002d3e:	d411      	bmi.n	8002d64 <__swsetup_r+0x50>
 8002d40:	2309      	movs	r3, #9
 8002d42:	6033      	str	r3, [r6, #0]
 8002d44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	81a3      	strh	r3, [r4, #12]
 8002d4e:	e03e      	b.n	8002dce <__swsetup_r+0xba>
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <__swsetup_r+0xd4>)
 8002d52:	429c      	cmp	r4, r3
 8002d54:	d101      	bne.n	8002d5a <__swsetup_r+0x46>
 8002d56:	68ac      	ldr	r4, [r5, #8]
 8002d58:	e7eb      	b.n	8002d32 <__swsetup_r+0x1e>
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <__swsetup_r+0xd8>)
 8002d5c:	429c      	cmp	r4, r3
 8002d5e:	bf08      	it	eq
 8002d60:	68ec      	ldreq	r4, [r5, #12]
 8002d62:	e7e6      	b.n	8002d32 <__swsetup_r+0x1e>
 8002d64:	0758      	lsls	r0, r3, #29
 8002d66:	d512      	bpl.n	8002d8e <__swsetup_r+0x7a>
 8002d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d6a:	b141      	cbz	r1, 8002d7e <__swsetup_r+0x6a>
 8002d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d70:	4299      	cmp	r1, r3
 8002d72:	d002      	beq.n	8002d7a <__swsetup_r+0x66>
 8002d74:	4630      	mov	r0, r6
 8002d76:	f000 fa57 	bl	8003228 <_free_r>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8002d7e:	89a3      	ldrh	r3, [r4, #12]
 8002d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	2300      	movs	r3, #0
 8002d88:	6063      	str	r3, [r4, #4]
 8002d8a:	6923      	ldr	r3, [r4, #16]
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	89a3      	ldrh	r3, [r4, #12]
 8002d90:	f043 0308 	orr.w	r3, r3, #8
 8002d94:	81a3      	strh	r3, [r4, #12]
 8002d96:	6923      	ldr	r3, [r4, #16]
 8002d98:	b94b      	cbnz	r3, 8002dae <__swsetup_r+0x9a>
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d003      	beq.n	8002dae <__swsetup_r+0x9a>
 8002da6:	4621      	mov	r1, r4
 8002da8:	4630      	mov	r0, r6
 8002daa:	f000 f9fd 	bl	80031a8 <__smakebuf_r>
 8002dae:	89a0      	ldrh	r0, [r4, #12]
 8002db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002db4:	f010 0301 	ands.w	r3, r0, #1
 8002db8:	d00a      	beq.n	8002dd0 <__swsetup_r+0xbc>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60a3      	str	r3, [r4, #8]
 8002dbe:	6963      	ldr	r3, [r4, #20]
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	61a3      	str	r3, [r4, #24]
 8002dc4:	6923      	ldr	r3, [r4, #16]
 8002dc6:	b943      	cbnz	r3, 8002dda <__swsetup_r+0xc6>
 8002dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002dcc:	d1ba      	bne.n	8002d44 <__swsetup_r+0x30>
 8002dce:	bd70      	pop	{r4, r5, r6, pc}
 8002dd0:	0781      	lsls	r1, r0, #30
 8002dd2:	bf58      	it	pl
 8002dd4:	6963      	ldrpl	r3, [r4, #20]
 8002dd6:	60a3      	str	r3, [r4, #8]
 8002dd8:	e7f4      	b.n	8002dc4 <__swsetup_r+0xb0>
 8002dda:	2000      	movs	r0, #0
 8002ddc:	e7f7      	b.n	8002dce <__swsetup_r+0xba>
 8002dde:	bf00      	nop
 8002de0:	20000010 	.word	0x20000010
 8002de4:	08003cc4 	.word	0x08003cc4
 8002de8:	08003ce4 	.word	0x08003ce4
 8002dec:	08003ca4 	.word	0x08003ca4

08002df0 <__sflush_r>:
 8002df0:	898a      	ldrh	r2, [r1, #12]
 8002df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df4:	4605      	mov	r5, r0
 8002df6:	0710      	lsls	r0, r2, #28
 8002df8:	460c      	mov	r4, r1
 8002dfa:	d457      	bmi.n	8002eac <__sflush_r+0xbc>
 8002dfc:	684b      	ldr	r3, [r1, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	dc04      	bgt.n	8002e0c <__sflush_r+0x1c>
 8002e02:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dc01      	bgt.n	8002e0c <__sflush_r+0x1c>
 8002e08:	2000      	movs	r0, #0
 8002e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e0e:	2e00      	cmp	r6, #0
 8002e10:	d0fa      	beq.n	8002e08 <__sflush_r+0x18>
 8002e12:	2300      	movs	r3, #0
 8002e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e18:	682f      	ldr	r7, [r5, #0]
 8002e1a:	602b      	str	r3, [r5, #0]
 8002e1c:	d032      	beq.n	8002e84 <__sflush_r+0x94>
 8002e1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e20:	89a3      	ldrh	r3, [r4, #12]
 8002e22:	075a      	lsls	r2, r3, #29
 8002e24:	d505      	bpl.n	8002e32 <__sflush_r+0x42>
 8002e26:	6863      	ldr	r3, [r4, #4]
 8002e28:	1ac0      	subs	r0, r0, r3
 8002e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e2c:	b10b      	cbz	r3, 8002e32 <__sflush_r+0x42>
 8002e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e30:	1ac0      	subs	r0, r0, r3
 8002e32:	2300      	movs	r3, #0
 8002e34:	4602      	mov	r2, r0
 8002e36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e38:	4628      	mov	r0, r5
 8002e3a:	6a21      	ldr	r1, [r4, #32]
 8002e3c:	47b0      	blx	r6
 8002e3e:	1c43      	adds	r3, r0, #1
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	d106      	bne.n	8002e52 <__sflush_r+0x62>
 8002e44:	6829      	ldr	r1, [r5, #0]
 8002e46:	291d      	cmp	r1, #29
 8002e48:	d82c      	bhi.n	8002ea4 <__sflush_r+0xb4>
 8002e4a:	4a29      	ldr	r2, [pc, #164]	; (8002ef0 <__sflush_r+0x100>)
 8002e4c:	40ca      	lsrs	r2, r1
 8002e4e:	07d6      	lsls	r6, r2, #31
 8002e50:	d528      	bpl.n	8002ea4 <__sflush_r+0xb4>
 8002e52:	2200      	movs	r2, #0
 8002e54:	6062      	str	r2, [r4, #4]
 8002e56:	6922      	ldr	r2, [r4, #16]
 8002e58:	04d9      	lsls	r1, r3, #19
 8002e5a:	6022      	str	r2, [r4, #0]
 8002e5c:	d504      	bpl.n	8002e68 <__sflush_r+0x78>
 8002e5e:	1c42      	adds	r2, r0, #1
 8002e60:	d101      	bne.n	8002e66 <__sflush_r+0x76>
 8002e62:	682b      	ldr	r3, [r5, #0]
 8002e64:	b903      	cbnz	r3, 8002e68 <__sflush_r+0x78>
 8002e66:	6560      	str	r0, [r4, #84]	; 0x54
 8002e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e6a:	602f      	str	r7, [r5, #0]
 8002e6c:	2900      	cmp	r1, #0
 8002e6e:	d0cb      	beq.n	8002e08 <__sflush_r+0x18>
 8002e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e74:	4299      	cmp	r1, r3
 8002e76:	d002      	beq.n	8002e7e <__sflush_r+0x8e>
 8002e78:	4628      	mov	r0, r5
 8002e7a:	f000 f9d5 	bl	8003228 <_free_r>
 8002e7e:	2000      	movs	r0, #0
 8002e80:	6360      	str	r0, [r4, #52]	; 0x34
 8002e82:	e7c2      	b.n	8002e0a <__sflush_r+0x1a>
 8002e84:	6a21      	ldr	r1, [r4, #32]
 8002e86:	2301      	movs	r3, #1
 8002e88:	4628      	mov	r0, r5
 8002e8a:	47b0      	blx	r6
 8002e8c:	1c41      	adds	r1, r0, #1
 8002e8e:	d1c7      	bne.n	8002e20 <__sflush_r+0x30>
 8002e90:	682b      	ldr	r3, [r5, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0c4      	beq.n	8002e20 <__sflush_r+0x30>
 8002e96:	2b1d      	cmp	r3, #29
 8002e98:	d001      	beq.n	8002e9e <__sflush_r+0xae>
 8002e9a:	2b16      	cmp	r3, #22
 8002e9c:	d101      	bne.n	8002ea2 <__sflush_r+0xb2>
 8002e9e:	602f      	str	r7, [r5, #0]
 8002ea0:	e7b2      	b.n	8002e08 <__sflush_r+0x18>
 8002ea2:	89a3      	ldrh	r3, [r4, #12]
 8002ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea8:	81a3      	strh	r3, [r4, #12]
 8002eaa:	e7ae      	b.n	8002e0a <__sflush_r+0x1a>
 8002eac:	690f      	ldr	r7, [r1, #16]
 8002eae:	2f00      	cmp	r7, #0
 8002eb0:	d0aa      	beq.n	8002e08 <__sflush_r+0x18>
 8002eb2:	0793      	lsls	r3, r2, #30
 8002eb4:	bf18      	it	ne
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	680e      	ldr	r6, [r1, #0]
 8002eba:	bf08      	it	eq
 8002ebc:	694b      	ldreq	r3, [r1, #20]
 8002ebe:	1bf6      	subs	r6, r6, r7
 8002ec0:	600f      	str	r7, [r1, #0]
 8002ec2:	608b      	str	r3, [r1, #8]
 8002ec4:	2e00      	cmp	r6, #0
 8002ec6:	dd9f      	ble.n	8002e08 <__sflush_r+0x18>
 8002ec8:	4633      	mov	r3, r6
 8002eca:	463a      	mov	r2, r7
 8002ecc:	4628      	mov	r0, r5
 8002ece:	6a21      	ldr	r1, [r4, #32]
 8002ed0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002ed4:	47e0      	blx	ip
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	dc06      	bgt.n	8002ee8 <__sflush_r+0xf8>
 8002eda:	89a3      	ldrh	r3, [r4, #12]
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee4:	81a3      	strh	r3, [r4, #12]
 8002ee6:	e790      	b.n	8002e0a <__sflush_r+0x1a>
 8002ee8:	4407      	add	r7, r0
 8002eea:	1a36      	subs	r6, r6, r0
 8002eec:	e7ea      	b.n	8002ec4 <__sflush_r+0xd4>
 8002eee:	bf00      	nop
 8002ef0:	20400001 	.word	0x20400001

08002ef4 <_fflush_r>:
 8002ef4:	b538      	push	{r3, r4, r5, lr}
 8002ef6:	690b      	ldr	r3, [r1, #16]
 8002ef8:	4605      	mov	r5, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	b913      	cbnz	r3, 8002f04 <_fflush_r+0x10>
 8002efe:	2500      	movs	r5, #0
 8002f00:	4628      	mov	r0, r5
 8002f02:	bd38      	pop	{r3, r4, r5, pc}
 8002f04:	b118      	cbz	r0, 8002f0e <_fflush_r+0x1a>
 8002f06:	6983      	ldr	r3, [r0, #24]
 8002f08:	b90b      	cbnz	r3, 8002f0e <_fflush_r+0x1a>
 8002f0a:	f000 f887 	bl	800301c <__sinit>
 8002f0e:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <_fflush_r+0x6c>)
 8002f10:	429c      	cmp	r4, r3
 8002f12:	d11b      	bne.n	8002f4c <_fflush_r+0x58>
 8002f14:	686c      	ldr	r4, [r5, #4]
 8002f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ef      	beq.n	8002efe <_fflush_r+0xa>
 8002f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f20:	07d0      	lsls	r0, r2, #31
 8002f22:	d404      	bmi.n	8002f2e <_fflush_r+0x3a>
 8002f24:	0599      	lsls	r1, r3, #22
 8002f26:	d402      	bmi.n	8002f2e <_fflush_r+0x3a>
 8002f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f2a:	f000 f915 	bl	8003158 <__retarget_lock_acquire_recursive>
 8002f2e:	4628      	mov	r0, r5
 8002f30:	4621      	mov	r1, r4
 8002f32:	f7ff ff5d 	bl	8002df0 <__sflush_r>
 8002f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f38:	4605      	mov	r5, r0
 8002f3a:	07da      	lsls	r2, r3, #31
 8002f3c:	d4e0      	bmi.n	8002f00 <_fflush_r+0xc>
 8002f3e:	89a3      	ldrh	r3, [r4, #12]
 8002f40:	059b      	lsls	r3, r3, #22
 8002f42:	d4dd      	bmi.n	8002f00 <_fflush_r+0xc>
 8002f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f46:	f000 f908 	bl	800315a <__retarget_lock_release_recursive>
 8002f4a:	e7d9      	b.n	8002f00 <_fflush_r+0xc>
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <_fflush_r+0x70>)
 8002f4e:	429c      	cmp	r4, r3
 8002f50:	d101      	bne.n	8002f56 <_fflush_r+0x62>
 8002f52:	68ac      	ldr	r4, [r5, #8]
 8002f54:	e7df      	b.n	8002f16 <_fflush_r+0x22>
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <_fflush_r+0x74>)
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	bf08      	it	eq
 8002f5c:	68ec      	ldreq	r4, [r5, #12]
 8002f5e:	e7da      	b.n	8002f16 <_fflush_r+0x22>
 8002f60:	08003cc4 	.word	0x08003cc4
 8002f64:	08003ce4 	.word	0x08003ce4
 8002f68:	08003ca4 	.word	0x08003ca4

08002f6c <std>:
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	b510      	push	{r4, lr}
 8002f70:	4604      	mov	r4, r0
 8002f72:	e9c0 3300 	strd	r3, r3, [r0]
 8002f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f7a:	6083      	str	r3, [r0, #8]
 8002f7c:	8181      	strh	r1, [r0, #12]
 8002f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8002f80:	81c2      	strh	r2, [r0, #14]
 8002f82:	6183      	str	r3, [r0, #24]
 8002f84:	4619      	mov	r1, r3
 8002f86:	2208      	movs	r2, #8
 8002f88:	305c      	adds	r0, #92	; 0x5c
 8002f8a:	f7ff fddb 	bl	8002b44 <memset>
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <std+0x38>)
 8002f90:	6224      	str	r4, [r4, #32]
 8002f92:	6263      	str	r3, [r4, #36]	; 0x24
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <std+0x3c>)
 8002f96:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <std+0x40>)
 8002f9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <std+0x44>)
 8002f9e:	6323      	str	r3, [r4, #48]	; 0x30
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	bf00      	nop
 8002fa4:	080039dd 	.word	0x080039dd
 8002fa8:	080039ff 	.word	0x080039ff
 8002fac:	08003a37 	.word	0x08003a37
 8002fb0:	08003a5b 	.word	0x08003a5b

08002fb4 <_cleanup_r>:
 8002fb4:	4901      	ldr	r1, [pc, #4]	; (8002fbc <_cleanup_r+0x8>)
 8002fb6:	f000 b8af 	b.w	8003118 <_fwalk_reent>
 8002fba:	bf00      	nop
 8002fbc:	08002ef5 	.word	0x08002ef5

08002fc0 <__sfmoreglue>:
 8002fc0:	2268      	movs	r2, #104	; 0x68
 8002fc2:	b570      	push	{r4, r5, r6, lr}
 8002fc4:	1e4d      	subs	r5, r1, #1
 8002fc6:	4355      	muls	r5, r2
 8002fc8:	460e      	mov	r6, r1
 8002fca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002fce:	f000 f993 	bl	80032f8 <_malloc_r>
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	b140      	cbz	r0, 8002fe8 <__sfmoreglue+0x28>
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	e9c0 1600 	strd	r1, r6, [r0]
 8002fdc:	300c      	adds	r0, #12
 8002fde:	60a0      	str	r0, [r4, #8]
 8002fe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002fe4:	f7ff fdae 	bl	8002b44 <memset>
 8002fe8:	4620      	mov	r0, r4
 8002fea:	bd70      	pop	{r4, r5, r6, pc}

08002fec <__sfp_lock_acquire>:
 8002fec:	4801      	ldr	r0, [pc, #4]	; (8002ff4 <__sfp_lock_acquire+0x8>)
 8002fee:	f000 b8b3 	b.w	8003158 <__retarget_lock_acquire_recursive>
 8002ff2:	bf00      	nop
 8002ff4:	20000155 	.word	0x20000155

08002ff8 <__sfp_lock_release>:
 8002ff8:	4801      	ldr	r0, [pc, #4]	; (8003000 <__sfp_lock_release+0x8>)
 8002ffa:	f000 b8ae 	b.w	800315a <__retarget_lock_release_recursive>
 8002ffe:	bf00      	nop
 8003000:	20000155 	.word	0x20000155

08003004 <__sinit_lock_acquire>:
 8003004:	4801      	ldr	r0, [pc, #4]	; (800300c <__sinit_lock_acquire+0x8>)
 8003006:	f000 b8a7 	b.w	8003158 <__retarget_lock_acquire_recursive>
 800300a:	bf00      	nop
 800300c:	20000156 	.word	0x20000156

08003010 <__sinit_lock_release>:
 8003010:	4801      	ldr	r0, [pc, #4]	; (8003018 <__sinit_lock_release+0x8>)
 8003012:	f000 b8a2 	b.w	800315a <__retarget_lock_release_recursive>
 8003016:	bf00      	nop
 8003018:	20000156 	.word	0x20000156

0800301c <__sinit>:
 800301c:	b510      	push	{r4, lr}
 800301e:	4604      	mov	r4, r0
 8003020:	f7ff fff0 	bl	8003004 <__sinit_lock_acquire>
 8003024:	69a3      	ldr	r3, [r4, #24]
 8003026:	b11b      	cbz	r3, 8003030 <__sinit+0x14>
 8003028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800302c:	f7ff bff0 	b.w	8003010 <__sinit_lock_release>
 8003030:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003034:	6523      	str	r3, [r4, #80]	; 0x50
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <__sinit+0x68>)
 8003038:	4a13      	ldr	r2, [pc, #76]	; (8003088 <__sinit+0x6c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	62a2      	str	r2, [r4, #40]	; 0x28
 800303e:	42a3      	cmp	r3, r4
 8003040:	bf08      	it	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	4620      	mov	r0, r4
 8003046:	bf08      	it	eq
 8003048:	61a3      	streq	r3, [r4, #24]
 800304a:	f000 f81f 	bl	800308c <__sfp>
 800304e:	6060      	str	r0, [r4, #4]
 8003050:	4620      	mov	r0, r4
 8003052:	f000 f81b 	bl	800308c <__sfp>
 8003056:	60a0      	str	r0, [r4, #8]
 8003058:	4620      	mov	r0, r4
 800305a:	f000 f817 	bl	800308c <__sfp>
 800305e:	2200      	movs	r2, #0
 8003060:	2104      	movs	r1, #4
 8003062:	60e0      	str	r0, [r4, #12]
 8003064:	6860      	ldr	r0, [r4, #4]
 8003066:	f7ff ff81 	bl	8002f6c <std>
 800306a:	2201      	movs	r2, #1
 800306c:	2109      	movs	r1, #9
 800306e:	68a0      	ldr	r0, [r4, #8]
 8003070:	f7ff ff7c 	bl	8002f6c <std>
 8003074:	2202      	movs	r2, #2
 8003076:	2112      	movs	r1, #18
 8003078:	68e0      	ldr	r0, [r4, #12]
 800307a:	f7ff ff77 	bl	8002f6c <std>
 800307e:	2301      	movs	r3, #1
 8003080:	61a3      	str	r3, [r4, #24]
 8003082:	e7d1      	b.n	8003028 <__sinit+0xc>
 8003084:	08003ca0 	.word	0x08003ca0
 8003088:	08002fb5 	.word	0x08002fb5

0800308c <__sfp>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	4607      	mov	r7, r0
 8003090:	f7ff ffac 	bl	8002fec <__sfp_lock_acquire>
 8003094:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <__sfp+0x84>)
 8003096:	681e      	ldr	r6, [r3, #0]
 8003098:	69b3      	ldr	r3, [r6, #24]
 800309a:	b913      	cbnz	r3, 80030a2 <__sfp+0x16>
 800309c:	4630      	mov	r0, r6
 800309e:	f7ff ffbd 	bl	800301c <__sinit>
 80030a2:	3648      	adds	r6, #72	; 0x48
 80030a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	d503      	bpl.n	80030b4 <__sfp+0x28>
 80030ac:	6833      	ldr	r3, [r6, #0]
 80030ae:	b30b      	cbz	r3, 80030f4 <__sfp+0x68>
 80030b0:	6836      	ldr	r6, [r6, #0]
 80030b2:	e7f7      	b.n	80030a4 <__sfp+0x18>
 80030b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030b8:	b9d5      	cbnz	r5, 80030f0 <__sfp+0x64>
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <__sfp+0x88>)
 80030bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80030c0:	60e3      	str	r3, [r4, #12]
 80030c2:	6665      	str	r5, [r4, #100]	; 0x64
 80030c4:	f000 f847 	bl	8003156 <__retarget_lock_init_recursive>
 80030c8:	f7ff ff96 	bl	8002ff8 <__sfp_lock_release>
 80030cc:	2208      	movs	r2, #8
 80030ce:	4629      	mov	r1, r5
 80030d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80030d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80030d8:	6025      	str	r5, [r4, #0]
 80030da:	61a5      	str	r5, [r4, #24]
 80030dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80030e0:	f7ff fd30 	bl	8002b44 <memset>
 80030e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80030e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80030ec:	4620      	mov	r0, r4
 80030ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030f0:	3468      	adds	r4, #104	; 0x68
 80030f2:	e7d9      	b.n	80030a8 <__sfp+0x1c>
 80030f4:	2104      	movs	r1, #4
 80030f6:	4638      	mov	r0, r7
 80030f8:	f7ff ff62 	bl	8002fc0 <__sfmoreglue>
 80030fc:	4604      	mov	r4, r0
 80030fe:	6030      	str	r0, [r6, #0]
 8003100:	2800      	cmp	r0, #0
 8003102:	d1d5      	bne.n	80030b0 <__sfp+0x24>
 8003104:	f7ff ff78 	bl	8002ff8 <__sfp_lock_release>
 8003108:	230c      	movs	r3, #12
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	e7ee      	b.n	80030ec <__sfp+0x60>
 800310e:	bf00      	nop
 8003110:	08003ca0 	.word	0x08003ca0
 8003114:	ffff0001 	.word	0xffff0001

08003118 <_fwalk_reent>:
 8003118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800311c:	4606      	mov	r6, r0
 800311e:	4688      	mov	r8, r1
 8003120:	2700      	movs	r7, #0
 8003122:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003126:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800312a:	f1b9 0901 	subs.w	r9, r9, #1
 800312e:	d505      	bpl.n	800313c <_fwalk_reent+0x24>
 8003130:	6824      	ldr	r4, [r4, #0]
 8003132:	2c00      	cmp	r4, #0
 8003134:	d1f7      	bne.n	8003126 <_fwalk_reent+0xe>
 8003136:	4638      	mov	r0, r7
 8003138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800313c:	89ab      	ldrh	r3, [r5, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d907      	bls.n	8003152 <_fwalk_reent+0x3a>
 8003142:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003146:	3301      	adds	r3, #1
 8003148:	d003      	beq.n	8003152 <_fwalk_reent+0x3a>
 800314a:	4629      	mov	r1, r5
 800314c:	4630      	mov	r0, r6
 800314e:	47c0      	blx	r8
 8003150:	4307      	orrs	r7, r0
 8003152:	3568      	adds	r5, #104	; 0x68
 8003154:	e7e9      	b.n	800312a <_fwalk_reent+0x12>

08003156 <__retarget_lock_init_recursive>:
 8003156:	4770      	bx	lr

08003158 <__retarget_lock_acquire_recursive>:
 8003158:	4770      	bx	lr

0800315a <__retarget_lock_release_recursive>:
 800315a:	4770      	bx	lr

0800315c <__swhatbuf_r>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	460e      	mov	r6, r1
 8003160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003164:	4614      	mov	r4, r2
 8003166:	2900      	cmp	r1, #0
 8003168:	461d      	mov	r5, r3
 800316a:	b096      	sub	sp, #88	; 0x58
 800316c:	da08      	bge.n	8003180 <__swhatbuf_r+0x24>
 800316e:	2200      	movs	r2, #0
 8003170:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003174:	602a      	str	r2, [r5, #0]
 8003176:	061a      	lsls	r2, r3, #24
 8003178:	d410      	bmi.n	800319c <__swhatbuf_r+0x40>
 800317a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317e:	e00e      	b.n	800319e <__swhatbuf_r+0x42>
 8003180:	466a      	mov	r2, sp
 8003182:	f000 fc91 	bl	8003aa8 <_fstat_r>
 8003186:	2800      	cmp	r0, #0
 8003188:	dbf1      	blt.n	800316e <__swhatbuf_r+0x12>
 800318a:	9a01      	ldr	r2, [sp, #4]
 800318c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003190:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003194:	425a      	negs	r2, r3
 8003196:	415a      	adcs	r2, r3
 8003198:	602a      	str	r2, [r5, #0]
 800319a:	e7ee      	b.n	800317a <__swhatbuf_r+0x1e>
 800319c:	2340      	movs	r3, #64	; 0x40
 800319e:	2000      	movs	r0, #0
 80031a0:	6023      	str	r3, [r4, #0]
 80031a2:	b016      	add	sp, #88	; 0x58
 80031a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080031a8 <__smakebuf_r>:
 80031a8:	898b      	ldrh	r3, [r1, #12]
 80031aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031ac:	079d      	lsls	r5, r3, #30
 80031ae:	4606      	mov	r6, r0
 80031b0:	460c      	mov	r4, r1
 80031b2:	d507      	bpl.n	80031c4 <__smakebuf_r+0x1c>
 80031b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031b8:	6023      	str	r3, [r4, #0]
 80031ba:	6123      	str	r3, [r4, #16]
 80031bc:	2301      	movs	r3, #1
 80031be:	6163      	str	r3, [r4, #20]
 80031c0:	b002      	add	sp, #8
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	466a      	mov	r2, sp
 80031c6:	ab01      	add	r3, sp, #4
 80031c8:	f7ff ffc8 	bl	800315c <__swhatbuf_r>
 80031cc:	9900      	ldr	r1, [sp, #0]
 80031ce:	4605      	mov	r5, r0
 80031d0:	4630      	mov	r0, r6
 80031d2:	f000 f891 	bl	80032f8 <_malloc_r>
 80031d6:	b948      	cbnz	r0, 80031ec <__smakebuf_r+0x44>
 80031d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031dc:	059a      	lsls	r2, r3, #22
 80031de:	d4ef      	bmi.n	80031c0 <__smakebuf_r+0x18>
 80031e0:	f023 0303 	bic.w	r3, r3, #3
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	81a3      	strh	r3, [r4, #12]
 80031ea:	e7e3      	b.n	80031b4 <__smakebuf_r+0xc>
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <__smakebuf_r+0x7c>)
 80031ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	6020      	str	r0, [r4, #0]
 80031f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f8:	81a3      	strh	r3, [r4, #12]
 80031fa:	9b00      	ldr	r3, [sp, #0]
 80031fc:	6120      	str	r0, [r4, #16]
 80031fe:	6163      	str	r3, [r4, #20]
 8003200:	9b01      	ldr	r3, [sp, #4]
 8003202:	b15b      	cbz	r3, 800321c <__smakebuf_r+0x74>
 8003204:	4630      	mov	r0, r6
 8003206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800320a:	f000 fc5f 	bl	8003acc <_isatty_r>
 800320e:	b128      	cbz	r0, 800321c <__smakebuf_r+0x74>
 8003210:	89a3      	ldrh	r3, [r4, #12]
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	81a3      	strh	r3, [r4, #12]
 800321c:	89a0      	ldrh	r0, [r4, #12]
 800321e:	4305      	orrs	r5, r0
 8003220:	81a5      	strh	r5, [r4, #12]
 8003222:	e7cd      	b.n	80031c0 <__smakebuf_r+0x18>
 8003224:	08002fb5 	.word	0x08002fb5

08003228 <_free_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	4605      	mov	r5, r0
 800322c:	2900      	cmp	r1, #0
 800322e:	d040      	beq.n	80032b2 <_free_r+0x8a>
 8003230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003234:	1f0c      	subs	r4, r1, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	bfb8      	it	lt
 800323a:	18e4      	addlt	r4, r4, r3
 800323c:	f000 fc76 	bl	8003b2c <__malloc_lock>
 8003240:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <_free_r+0x8c>)
 8003242:	6813      	ldr	r3, [r2, #0]
 8003244:	b933      	cbnz	r3, 8003254 <_free_r+0x2c>
 8003246:	6063      	str	r3, [r4, #4]
 8003248:	6014      	str	r4, [r2, #0]
 800324a:	4628      	mov	r0, r5
 800324c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003250:	f000 bc72 	b.w	8003b38 <__malloc_unlock>
 8003254:	42a3      	cmp	r3, r4
 8003256:	d908      	bls.n	800326a <_free_r+0x42>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	1821      	adds	r1, r4, r0
 800325c:	428b      	cmp	r3, r1
 800325e:	bf01      	itttt	eq
 8003260:	6819      	ldreq	r1, [r3, #0]
 8003262:	685b      	ldreq	r3, [r3, #4]
 8003264:	1809      	addeq	r1, r1, r0
 8003266:	6021      	streq	r1, [r4, #0]
 8003268:	e7ed      	b.n	8003246 <_free_r+0x1e>
 800326a:	461a      	mov	r2, r3
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b10b      	cbz	r3, 8003274 <_free_r+0x4c>
 8003270:	42a3      	cmp	r3, r4
 8003272:	d9fa      	bls.n	800326a <_free_r+0x42>
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	1850      	adds	r0, r2, r1
 8003278:	42a0      	cmp	r0, r4
 800327a:	d10b      	bne.n	8003294 <_free_r+0x6c>
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	4401      	add	r1, r0
 8003280:	1850      	adds	r0, r2, r1
 8003282:	4283      	cmp	r3, r0
 8003284:	6011      	str	r1, [r2, #0]
 8003286:	d1e0      	bne.n	800324a <_free_r+0x22>
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4401      	add	r1, r0
 800328e:	6011      	str	r1, [r2, #0]
 8003290:	6053      	str	r3, [r2, #4]
 8003292:	e7da      	b.n	800324a <_free_r+0x22>
 8003294:	d902      	bls.n	800329c <_free_r+0x74>
 8003296:	230c      	movs	r3, #12
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	e7d6      	b.n	800324a <_free_r+0x22>
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	1821      	adds	r1, r4, r0
 80032a0:	428b      	cmp	r3, r1
 80032a2:	bf01      	itttt	eq
 80032a4:	6819      	ldreq	r1, [r3, #0]
 80032a6:	685b      	ldreq	r3, [r3, #4]
 80032a8:	1809      	addeq	r1, r1, r0
 80032aa:	6021      	streq	r1, [r4, #0]
 80032ac:	6063      	str	r3, [r4, #4]
 80032ae:	6054      	str	r4, [r2, #4]
 80032b0:	e7cb      	b.n	800324a <_free_r+0x22>
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	20000158 	.word	0x20000158

080032b8 <sbrk_aligned>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4e0e      	ldr	r6, [pc, #56]	; (80032f4 <sbrk_aligned+0x3c>)
 80032bc:	460c      	mov	r4, r1
 80032be:	6831      	ldr	r1, [r6, #0]
 80032c0:	4605      	mov	r5, r0
 80032c2:	b911      	cbnz	r1, 80032ca <sbrk_aligned+0x12>
 80032c4:	f000 fb7a 	bl	80039bc <_sbrk_r>
 80032c8:	6030      	str	r0, [r6, #0]
 80032ca:	4621      	mov	r1, r4
 80032cc:	4628      	mov	r0, r5
 80032ce:	f000 fb75 	bl	80039bc <_sbrk_r>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	d00a      	beq.n	80032ec <sbrk_aligned+0x34>
 80032d6:	1cc4      	adds	r4, r0, #3
 80032d8:	f024 0403 	bic.w	r4, r4, #3
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d007      	beq.n	80032f0 <sbrk_aligned+0x38>
 80032e0:	1a21      	subs	r1, r4, r0
 80032e2:	4628      	mov	r0, r5
 80032e4:	f000 fb6a 	bl	80039bc <_sbrk_r>
 80032e8:	3001      	adds	r0, #1
 80032ea:	d101      	bne.n	80032f0 <sbrk_aligned+0x38>
 80032ec:	f04f 34ff 	mov.w	r4, #4294967295
 80032f0:	4620      	mov	r0, r4
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	2000015c 	.word	0x2000015c

080032f8 <_malloc_r>:
 80032f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032fc:	1ccd      	adds	r5, r1, #3
 80032fe:	f025 0503 	bic.w	r5, r5, #3
 8003302:	3508      	adds	r5, #8
 8003304:	2d0c      	cmp	r5, #12
 8003306:	bf38      	it	cc
 8003308:	250c      	movcc	r5, #12
 800330a:	2d00      	cmp	r5, #0
 800330c:	4607      	mov	r7, r0
 800330e:	db01      	blt.n	8003314 <_malloc_r+0x1c>
 8003310:	42a9      	cmp	r1, r5
 8003312:	d905      	bls.n	8003320 <_malloc_r+0x28>
 8003314:	230c      	movs	r3, #12
 8003316:	2600      	movs	r6, #0
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4630      	mov	r0, r6
 800331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003320:	4e2e      	ldr	r6, [pc, #184]	; (80033dc <_malloc_r+0xe4>)
 8003322:	f000 fc03 	bl	8003b2c <__malloc_lock>
 8003326:	6833      	ldr	r3, [r6, #0]
 8003328:	461c      	mov	r4, r3
 800332a:	bb34      	cbnz	r4, 800337a <_malloc_r+0x82>
 800332c:	4629      	mov	r1, r5
 800332e:	4638      	mov	r0, r7
 8003330:	f7ff ffc2 	bl	80032b8 <sbrk_aligned>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	4604      	mov	r4, r0
 8003338:	d14d      	bne.n	80033d6 <_malloc_r+0xde>
 800333a:	6834      	ldr	r4, [r6, #0]
 800333c:	4626      	mov	r6, r4
 800333e:	2e00      	cmp	r6, #0
 8003340:	d140      	bne.n	80033c4 <_malloc_r+0xcc>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	4631      	mov	r1, r6
 8003346:	4638      	mov	r0, r7
 8003348:	eb04 0803 	add.w	r8, r4, r3
 800334c:	f000 fb36 	bl	80039bc <_sbrk_r>
 8003350:	4580      	cmp	r8, r0
 8003352:	d13a      	bne.n	80033ca <_malloc_r+0xd2>
 8003354:	6821      	ldr	r1, [r4, #0]
 8003356:	3503      	adds	r5, #3
 8003358:	1a6d      	subs	r5, r5, r1
 800335a:	f025 0503 	bic.w	r5, r5, #3
 800335e:	3508      	adds	r5, #8
 8003360:	2d0c      	cmp	r5, #12
 8003362:	bf38      	it	cc
 8003364:	250c      	movcc	r5, #12
 8003366:	4638      	mov	r0, r7
 8003368:	4629      	mov	r1, r5
 800336a:	f7ff ffa5 	bl	80032b8 <sbrk_aligned>
 800336e:	3001      	adds	r0, #1
 8003370:	d02b      	beq.n	80033ca <_malloc_r+0xd2>
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	442b      	add	r3, r5
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	e00e      	b.n	8003398 <_malloc_r+0xa0>
 800337a:	6822      	ldr	r2, [r4, #0]
 800337c:	1b52      	subs	r2, r2, r5
 800337e:	d41e      	bmi.n	80033be <_malloc_r+0xc6>
 8003380:	2a0b      	cmp	r2, #11
 8003382:	d916      	bls.n	80033b2 <_malloc_r+0xba>
 8003384:	1961      	adds	r1, r4, r5
 8003386:	42a3      	cmp	r3, r4
 8003388:	6025      	str	r5, [r4, #0]
 800338a:	bf18      	it	ne
 800338c:	6059      	strne	r1, [r3, #4]
 800338e:	6863      	ldr	r3, [r4, #4]
 8003390:	bf08      	it	eq
 8003392:	6031      	streq	r1, [r6, #0]
 8003394:	5162      	str	r2, [r4, r5]
 8003396:	604b      	str	r3, [r1, #4]
 8003398:	4638      	mov	r0, r7
 800339a:	f104 060b 	add.w	r6, r4, #11
 800339e:	f000 fbcb 	bl	8003b38 <__malloc_unlock>
 80033a2:	f026 0607 	bic.w	r6, r6, #7
 80033a6:	1d23      	adds	r3, r4, #4
 80033a8:	1af2      	subs	r2, r6, r3
 80033aa:	d0b6      	beq.n	800331a <_malloc_r+0x22>
 80033ac:	1b9b      	subs	r3, r3, r6
 80033ae:	50a3      	str	r3, [r4, r2]
 80033b0:	e7b3      	b.n	800331a <_malloc_r+0x22>
 80033b2:	6862      	ldr	r2, [r4, #4]
 80033b4:	42a3      	cmp	r3, r4
 80033b6:	bf0c      	ite	eq
 80033b8:	6032      	streq	r2, [r6, #0]
 80033ba:	605a      	strne	r2, [r3, #4]
 80033bc:	e7ec      	b.n	8003398 <_malloc_r+0xa0>
 80033be:	4623      	mov	r3, r4
 80033c0:	6864      	ldr	r4, [r4, #4]
 80033c2:	e7b2      	b.n	800332a <_malloc_r+0x32>
 80033c4:	4634      	mov	r4, r6
 80033c6:	6876      	ldr	r6, [r6, #4]
 80033c8:	e7b9      	b.n	800333e <_malloc_r+0x46>
 80033ca:	230c      	movs	r3, #12
 80033cc:	4638      	mov	r0, r7
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	f000 fbb2 	bl	8003b38 <__malloc_unlock>
 80033d4:	e7a1      	b.n	800331a <_malloc_r+0x22>
 80033d6:	6025      	str	r5, [r4, #0]
 80033d8:	e7de      	b.n	8003398 <_malloc_r+0xa0>
 80033da:	bf00      	nop
 80033dc:	20000158 	.word	0x20000158

080033e0 <__sfputc_r>:
 80033e0:	6893      	ldr	r3, [r2, #8]
 80033e2:	b410      	push	{r4}
 80033e4:	3b01      	subs	r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	6093      	str	r3, [r2, #8]
 80033ea:	da07      	bge.n	80033fc <__sfputc_r+0x1c>
 80033ec:	6994      	ldr	r4, [r2, #24]
 80033ee:	42a3      	cmp	r3, r4
 80033f0:	db01      	blt.n	80033f6 <__sfputc_r+0x16>
 80033f2:	290a      	cmp	r1, #10
 80033f4:	d102      	bne.n	80033fc <__sfputc_r+0x1c>
 80033f6:	bc10      	pop	{r4}
 80033f8:	f7ff bc3a 	b.w	8002c70 <__swbuf_r>
 80033fc:	6813      	ldr	r3, [r2, #0]
 80033fe:	1c58      	adds	r0, r3, #1
 8003400:	6010      	str	r0, [r2, #0]
 8003402:	7019      	strb	r1, [r3, #0]
 8003404:	4608      	mov	r0, r1
 8003406:	bc10      	pop	{r4}
 8003408:	4770      	bx	lr

0800340a <__sfputs_r>:
 800340a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340c:	4606      	mov	r6, r0
 800340e:	460f      	mov	r7, r1
 8003410:	4614      	mov	r4, r2
 8003412:	18d5      	adds	r5, r2, r3
 8003414:	42ac      	cmp	r4, r5
 8003416:	d101      	bne.n	800341c <__sfputs_r+0x12>
 8003418:	2000      	movs	r0, #0
 800341a:	e007      	b.n	800342c <__sfputs_r+0x22>
 800341c:	463a      	mov	r2, r7
 800341e:	4630      	mov	r0, r6
 8003420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003424:	f7ff ffdc 	bl	80033e0 <__sfputc_r>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d1f3      	bne.n	8003414 <__sfputs_r+0xa>
 800342c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003430 <_vfiprintf_r>:
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	460d      	mov	r5, r1
 8003436:	4614      	mov	r4, r2
 8003438:	4698      	mov	r8, r3
 800343a:	4606      	mov	r6, r0
 800343c:	b09d      	sub	sp, #116	; 0x74
 800343e:	b118      	cbz	r0, 8003448 <_vfiprintf_r+0x18>
 8003440:	6983      	ldr	r3, [r0, #24]
 8003442:	b90b      	cbnz	r3, 8003448 <_vfiprintf_r+0x18>
 8003444:	f7ff fdea 	bl	800301c <__sinit>
 8003448:	4b89      	ldr	r3, [pc, #548]	; (8003670 <_vfiprintf_r+0x240>)
 800344a:	429d      	cmp	r5, r3
 800344c:	d11b      	bne.n	8003486 <_vfiprintf_r+0x56>
 800344e:	6875      	ldr	r5, [r6, #4]
 8003450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003452:	07d9      	lsls	r1, r3, #31
 8003454:	d405      	bmi.n	8003462 <_vfiprintf_r+0x32>
 8003456:	89ab      	ldrh	r3, [r5, #12]
 8003458:	059a      	lsls	r2, r3, #22
 800345a:	d402      	bmi.n	8003462 <_vfiprintf_r+0x32>
 800345c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800345e:	f7ff fe7b 	bl	8003158 <__retarget_lock_acquire_recursive>
 8003462:	89ab      	ldrh	r3, [r5, #12]
 8003464:	071b      	lsls	r3, r3, #28
 8003466:	d501      	bpl.n	800346c <_vfiprintf_r+0x3c>
 8003468:	692b      	ldr	r3, [r5, #16]
 800346a:	b9eb      	cbnz	r3, 80034a8 <_vfiprintf_r+0x78>
 800346c:	4629      	mov	r1, r5
 800346e:	4630      	mov	r0, r6
 8003470:	f7ff fc50 	bl	8002d14 <__swsetup_r>
 8003474:	b1c0      	cbz	r0, 80034a8 <_vfiprintf_r+0x78>
 8003476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003478:	07dc      	lsls	r4, r3, #31
 800347a:	d50e      	bpl.n	800349a <_vfiprintf_r+0x6a>
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	b01d      	add	sp, #116	; 0x74
 8003482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003486:	4b7b      	ldr	r3, [pc, #492]	; (8003674 <_vfiprintf_r+0x244>)
 8003488:	429d      	cmp	r5, r3
 800348a:	d101      	bne.n	8003490 <_vfiprintf_r+0x60>
 800348c:	68b5      	ldr	r5, [r6, #8]
 800348e:	e7df      	b.n	8003450 <_vfiprintf_r+0x20>
 8003490:	4b79      	ldr	r3, [pc, #484]	; (8003678 <_vfiprintf_r+0x248>)
 8003492:	429d      	cmp	r5, r3
 8003494:	bf08      	it	eq
 8003496:	68f5      	ldreq	r5, [r6, #12]
 8003498:	e7da      	b.n	8003450 <_vfiprintf_r+0x20>
 800349a:	89ab      	ldrh	r3, [r5, #12]
 800349c:	0598      	lsls	r0, r3, #22
 800349e:	d4ed      	bmi.n	800347c <_vfiprintf_r+0x4c>
 80034a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034a2:	f7ff fe5a 	bl	800315a <__retarget_lock_release_recursive>
 80034a6:	e7e9      	b.n	800347c <_vfiprintf_r+0x4c>
 80034a8:	2300      	movs	r3, #0
 80034aa:	9309      	str	r3, [sp, #36]	; 0x24
 80034ac:	2320      	movs	r3, #32
 80034ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034b2:	2330      	movs	r3, #48	; 0x30
 80034b4:	f04f 0901 	mov.w	r9, #1
 80034b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80034bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800367c <_vfiprintf_r+0x24c>
 80034c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034c4:	4623      	mov	r3, r4
 80034c6:	469a      	mov	sl, r3
 80034c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034cc:	b10a      	cbz	r2, 80034d2 <_vfiprintf_r+0xa2>
 80034ce:	2a25      	cmp	r2, #37	; 0x25
 80034d0:	d1f9      	bne.n	80034c6 <_vfiprintf_r+0x96>
 80034d2:	ebba 0b04 	subs.w	fp, sl, r4
 80034d6:	d00b      	beq.n	80034f0 <_vfiprintf_r+0xc0>
 80034d8:	465b      	mov	r3, fp
 80034da:	4622      	mov	r2, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	4630      	mov	r0, r6
 80034e0:	f7ff ff93 	bl	800340a <__sfputs_r>
 80034e4:	3001      	adds	r0, #1
 80034e6:	f000 80aa 	beq.w	800363e <_vfiprintf_r+0x20e>
 80034ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034ec:	445a      	add	r2, fp
 80034ee:	9209      	str	r2, [sp, #36]	; 0x24
 80034f0:	f89a 3000 	ldrb.w	r3, [sl]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a2 	beq.w	800363e <_vfiprintf_r+0x20e>
 80034fa:	2300      	movs	r3, #0
 80034fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003504:	f10a 0a01 	add.w	sl, sl, #1
 8003508:	9304      	str	r3, [sp, #16]
 800350a:	9307      	str	r3, [sp, #28]
 800350c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003510:	931a      	str	r3, [sp, #104]	; 0x68
 8003512:	4654      	mov	r4, sl
 8003514:	2205      	movs	r2, #5
 8003516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800351a:	4858      	ldr	r0, [pc, #352]	; (800367c <_vfiprintf_r+0x24c>)
 800351c:	f000 faf8 	bl	8003b10 <memchr>
 8003520:	9a04      	ldr	r2, [sp, #16]
 8003522:	b9d8      	cbnz	r0, 800355c <_vfiprintf_r+0x12c>
 8003524:	06d1      	lsls	r1, r2, #27
 8003526:	bf44      	itt	mi
 8003528:	2320      	movmi	r3, #32
 800352a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800352e:	0713      	lsls	r3, r2, #28
 8003530:	bf44      	itt	mi
 8003532:	232b      	movmi	r3, #43	; 0x2b
 8003534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003538:	f89a 3000 	ldrb.w	r3, [sl]
 800353c:	2b2a      	cmp	r3, #42	; 0x2a
 800353e:	d015      	beq.n	800356c <_vfiprintf_r+0x13c>
 8003540:	4654      	mov	r4, sl
 8003542:	2000      	movs	r0, #0
 8003544:	f04f 0c0a 	mov.w	ip, #10
 8003548:	9a07      	ldr	r2, [sp, #28]
 800354a:	4621      	mov	r1, r4
 800354c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003550:	3b30      	subs	r3, #48	; 0x30
 8003552:	2b09      	cmp	r3, #9
 8003554:	d94e      	bls.n	80035f4 <_vfiprintf_r+0x1c4>
 8003556:	b1b0      	cbz	r0, 8003586 <_vfiprintf_r+0x156>
 8003558:	9207      	str	r2, [sp, #28]
 800355a:	e014      	b.n	8003586 <_vfiprintf_r+0x156>
 800355c:	eba0 0308 	sub.w	r3, r0, r8
 8003560:	fa09 f303 	lsl.w	r3, r9, r3
 8003564:	4313      	orrs	r3, r2
 8003566:	46a2      	mov	sl, r4
 8003568:	9304      	str	r3, [sp, #16]
 800356a:	e7d2      	b.n	8003512 <_vfiprintf_r+0xe2>
 800356c:	9b03      	ldr	r3, [sp, #12]
 800356e:	1d19      	adds	r1, r3, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	9103      	str	r1, [sp, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	bfbb      	ittet	lt
 8003578:	425b      	neglt	r3, r3
 800357a:	f042 0202 	orrlt.w	r2, r2, #2
 800357e:	9307      	strge	r3, [sp, #28]
 8003580:	9307      	strlt	r3, [sp, #28]
 8003582:	bfb8      	it	lt
 8003584:	9204      	strlt	r2, [sp, #16]
 8003586:	7823      	ldrb	r3, [r4, #0]
 8003588:	2b2e      	cmp	r3, #46	; 0x2e
 800358a:	d10c      	bne.n	80035a6 <_vfiprintf_r+0x176>
 800358c:	7863      	ldrb	r3, [r4, #1]
 800358e:	2b2a      	cmp	r3, #42	; 0x2a
 8003590:	d135      	bne.n	80035fe <_vfiprintf_r+0x1ce>
 8003592:	9b03      	ldr	r3, [sp, #12]
 8003594:	3402      	adds	r4, #2
 8003596:	1d1a      	adds	r2, r3, #4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	9203      	str	r2, [sp, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	bfb8      	it	lt
 80035a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80035a4:	9305      	str	r3, [sp, #20]
 80035a6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003680 <_vfiprintf_r+0x250>
 80035aa:	2203      	movs	r2, #3
 80035ac:	4650      	mov	r0, sl
 80035ae:	7821      	ldrb	r1, [r4, #0]
 80035b0:	f000 faae 	bl	8003b10 <memchr>
 80035b4:	b140      	cbz	r0, 80035c8 <_vfiprintf_r+0x198>
 80035b6:	2340      	movs	r3, #64	; 0x40
 80035b8:	eba0 000a 	sub.w	r0, r0, sl
 80035bc:	fa03 f000 	lsl.w	r0, r3, r0
 80035c0:	9b04      	ldr	r3, [sp, #16]
 80035c2:	3401      	adds	r4, #1
 80035c4:	4303      	orrs	r3, r0
 80035c6:	9304      	str	r3, [sp, #16]
 80035c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035cc:	2206      	movs	r2, #6
 80035ce:	482d      	ldr	r0, [pc, #180]	; (8003684 <_vfiprintf_r+0x254>)
 80035d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035d4:	f000 fa9c 	bl	8003b10 <memchr>
 80035d8:	2800      	cmp	r0, #0
 80035da:	d03f      	beq.n	800365c <_vfiprintf_r+0x22c>
 80035dc:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <_vfiprintf_r+0x258>)
 80035de:	bb1b      	cbnz	r3, 8003628 <_vfiprintf_r+0x1f8>
 80035e0:	9b03      	ldr	r3, [sp, #12]
 80035e2:	3307      	adds	r3, #7
 80035e4:	f023 0307 	bic.w	r3, r3, #7
 80035e8:	3308      	adds	r3, #8
 80035ea:	9303      	str	r3, [sp, #12]
 80035ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ee:	443b      	add	r3, r7
 80035f0:	9309      	str	r3, [sp, #36]	; 0x24
 80035f2:	e767      	b.n	80034c4 <_vfiprintf_r+0x94>
 80035f4:	460c      	mov	r4, r1
 80035f6:	2001      	movs	r0, #1
 80035f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80035fc:	e7a5      	b.n	800354a <_vfiprintf_r+0x11a>
 80035fe:	2300      	movs	r3, #0
 8003600:	f04f 0c0a 	mov.w	ip, #10
 8003604:	4619      	mov	r1, r3
 8003606:	3401      	adds	r4, #1
 8003608:	9305      	str	r3, [sp, #20]
 800360a:	4620      	mov	r0, r4
 800360c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003610:	3a30      	subs	r2, #48	; 0x30
 8003612:	2a09      	cmp	r2, #9
 8003614:	d903      	bls.n	800361e <_vfiprintf_r+0x1ee>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0c5      	beq.n	80035a6 <_vfiprintf_r+0x176>
 800361a:	9105      	str	r1, [sp, #20]
 800361c:	e7c3      	b.n	80035a6 <_vfiprintf_r+0x176>
 800361e:	4604      	mov	r4, r0
 8003620:	2301      	movs	r3, #1
 8003622:	fb0c 2101 	mla	r1, ip, r1, r2
 8003626:	e7f0      	b.n	800360a <_vfiprintf_r+0x1da>
 8003628:	ab03      	add	r3, sp, #12
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	462a      	mov	r2, r5
 800362e:	4630      	mov	r0, r6
 8003630:	4b16      	ldr	r3, [pc, #88]	; (800368c <_vfiprintf_r+0x25c>)
 8003632:	a904      	add	r1, sp, #16
 8003634:	f3af 8000 	nop.w
 8003638:	4607      	mov	r7, r0
 800363a:	1c78      	adds	r0, r7, #1
 800363c:	d1d6      	bne.n	80035ec <_vfiprintf_r+0x1bc>
 800363e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003640:	07d9      	lsls	r1, r3, #31
 8003642:	d405      	bmi.n	8003650 <_vfiprintf_r+0x220>
 8003644:	89ab      	ldrh	r3, [r5, #12]
 8003646:	059a      	lsls	r2, r3, #22
 8003648:	d402      	bmi.n	8003650 <_vfiprintf_r+0x220>
 800364a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800364c:	f7ff fd85 	bl	800315a <__retarget_lock_release_recursive>
 8003650:	89ab      	ldrh	r3, [r5, #12]
 8003652:	065b      	lsls	r3, r3, #25
 8003654:	f53f af12 	bmi.w	800347c <_vfiprintf_r+0x4c>
 8003658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800365a:	e711      	b.n	8003480 <_vfiprintf_r+0x50>
 800365c:	ab03      	add	r3, sp, #12
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	462a      	mov	r2, r5
 8003662:	4630      	mov	r0, r6
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <_vfiprintf_r+0x25c>)
 8003666:	a904      	add	r1, sp, #16
 8003668:	f000 f882 	bl	8003770 <_printf_i>
 800366c:	e7e4      	b.n	8003638 <_vfiprintf_r+0x208>
 800366e:	bf00      	nop
 8003670:	08003cc4 	.word	0x08003cc4
 8003674:	08003ce4 	.word	0x08003ce4
 8003678:	08003ca4 	.word	0x08003ca4
 800367c:	08003d04 	.word	0x08003d04
 8003680:	08003d0a 	.word	0x08003d0a
 8003684:	08003d0e 	.word	0x08003d0e
 8003688:	00000000 	.word	0x00000000
 800368c:	0800340b 	.word	0x0800340b

08003690 <_printf_common>:
 8003690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003694:	4616      	mov	r6, r2
 8003696:	4699      	mov	r9, r3
 8003698:	688a      	ldr	r2, [r1, #8]
 800369a:	690b      	ldr	r3, [r1, #16]
 800369c:	4607      	mov	r7, r0
 800369e:	4293      	cmp	r3, r2
 80036a0:	bfb8      	it	lt
 80036a2:	4613      	movlt	r3, r2
 80036a4:	6033      	str	r3, [r6, #0]
 80036a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036aa:	460c      	mov	r4, r1
 80036ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036b0:	b10a      	cbz	r2, 80036b6 <_printf_common+0x26>
 80036b2:	3301      	adds	r3, #1
 80036b4:	6033      	str	r3, [r6, #0]
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	0699      	lsls	r1, r3, #26
 80036ba:	bf42      	ittt	mi
 80036bc:	6833      	ldrmi	r3, [r6, #0]
 80036be:	3302      	addmi	r3, #2
 80036c0:	6033      	strmi	r3, [r6, #0]
 80036c2:	6825      	ldr	r5, [r4, #0]
 80036c4:	f015 0506 	ands.w	r5, r5, #6
 80036c8:	d106      	bne.n	80036d8 <_printf_common+0x48>
 80036ca:	f104 0a19 	add.w	sl, r4, #25
 80036ce:	68e3      	ldr	r3, [r4, #12]
 80036d0:	6832      	ldr	r2, [r6, #0]
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	42ab      	cmp	r3, r5
 80036d6:	dc28      	bgt.n	800372a <_printf_common+0x9a>
 80036d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036dc:	1e13      	subs	r3, r2, #0
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	bf18      	it	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	0692      	lsls	r2, r2, #26
 80036e6:	d42d      	bmi.n	8003744 <_printf_common+0xb4>
 80036e8:	4649      	mov	r1, r9
 80036ea:	4638      	mov	r0, r7
 80036ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036f0:	47c0      	blx	r8
 80036f2:	3001      	adds	r0, #1
 80036f4:	d020      	beq.n	8003738 <_printf_common+0xa8>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	68e5      	ldr	r5, [r4, #12]
 80036fa:	f003 0306 	and.w	r3, r3, #6
 80036fe:	2b04      	cmp	r3, #4
 8003700:	bf18      	it	ne
 8003702:	2500      	movne	r5, #0
 8003704:	6832      	ldr	r2, [r6, #0]
 8003706:	f04f 0600 	mov.w	r6, #0
 800370a:	68a3      	ldr	r3, [r4, #8]
 800370c:	bf08      	it	eq
 800370e:	1aad      	subeq	r5, r5, r2
 8003710:	6922      	ldr	r2, [r4, #16]
 8003712:	bf08      	it	eq
 8003714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003718:	4293      	cmp	r3, r2
 800371a:	bfc4      	itt	gt
 800371c:	1a9b      	subgt	r3, r3, r2
 800371e:	18ed      	addgt	r5, r5, r3
 8003720:	341a      	adds	r4, #26
 8003722:	42b5      	cmp	r5, r6
 8003724:	d11a      	bne.n	800375c <_printf_common+0xcc>
 8003726:	2000      	movs	r0, #0
 8003728:	e008      	b.n	800373c <_printf_common+0xac>
 800372a:	2301      	movs	r3, #1
 800372c:	4652      	mov	r2, sl
 800372e:	4649      	mov	r1, r9
 8003730:	4638      	mov	r0, r7
 8003732:	47c0      	blx	r8
 8003734:	3001      	adds	r0, #1
 8003736:	d103      	bne.n	8003740 <_printf_common+0xb0>
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003740:	3501      	adds	r5, #1
 8003742:	e7c4      	b.n	80036ce <_printf_common+0x3e>
 8003744:	2030      	movs	r0, #48	; 0x30
 8003746:	18e1      	adds	r1, r4, r3
 8003748:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003752:	4422      	add	r2, r4
 8003754:	3302      	adds	r3, #2
 8003756:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800375a:	e7c5      	b.n	80036e8 <_printf_common+0x58>
 800375c:	2301      	movs	r3, #1
 800375e:	4622      	mov	r2, r4
 8003760:	4649      	mov	r1, r9
 8003762:	4638      	mov	r0, r7
 8003764:	47c0      	blx	r8
 8003766:	3001      	adds	r0, #1
 8003768:	d0e6      	beq.n	8003738 <_printf_common+0xa8>
 800376a:	3601      	adds	r6, #1
 800376c:	e7d9      	b.n	8003722 <_printf_common+0x92>
	...

08003770 <_printf_i>:
 8003770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003774:	7e0f      	ldrb	r7, [r1, #24]
 8003776:	4691      	mov	r9, r2
 8003778:	2f78      	cmp	r7, #120	; 0x78
 800377a:	4680      	mov	r8, r0
 800377c:	460c      	mov	r4, r1
 800377e:	469a      	mov	sl, r3
 8003780:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003786:	d807      	bhi.n	8003798 <_printf_i+0x28>
 8003788:	2f62      	cmp	r7, #98	; 0x62
 800378a:	d80a      	bhi.n	80037a2 <_printf_i+0x32>
 800378c:	2f00      	cmp	r7, #0
 800378e:	f000 80d9 	beq.w	8003944 <_printf_i+0x1d4>
 8003792:	2f58      	cmp	r7, #88	; 0x58
 8003794:	f000 80a4 	beq.w	80038e0 <_printf_i+0x170>
 8003798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800379c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037a0:	e03a      	b.n	8003818 <_printf_i+0xa8>
 80037a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037a6:	2b15      	cmp	r3, #21
 80037a8:	d8f6      	bhi.n	8003798 <_printf_i+0x28>
 80037aa:	a101      	add	r1, pc, #4	; (adr r1, 80037b0 <_printf_i+0x40>)
 80037ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037b0:	08003809 	.word	0x08003809
 80037b4:	0800381d 	.word	0x0800381d
 80037b8:	08003799 	.word	0x08003799
 80037bc:	08003799 	.word	0x08003799
 80037c0:	08003799 	.word	0x08003799
 80037c4:	08003799 	.word	0x08003799
 80037c8:	0800381d 	.word	0x0800381d
 80037cc:	08003799 	.word	0x08003799
 80037d0:	08003799 	.word	0x08003799
 80037d4:	08003799 	.word	0x08003799
 80037d8:	08003799 	.word	0x08003799
 80037dc:	0800392b 	.word	0x0800392b
 80037e0:	0800384d 	.word	0x0800384d
 80037e4:	0800390d 	.word	0x0800390d
 80037e8:	08003799 	.word	0x08003799
 80037ec:	08003799 	.word	0x08003799
 80037f0:	0800394d 	.word	0x0800394d
 80037f4:	08003799 	.word	0x08003799
 80037f8:	0800384d 	.word	0x0800384d
 80037fc:	08003799 	.word	0x08003799
 8003800:	08003799 	.word	0x08003799
 8003804:	08003915 	.word	0x08003915
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	1d1a      	adds	r2, r3, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	602a      	str	r2, [r5, #0]
 8003810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003818:	2301      	movs	r3, #1
 800381a:	e0a4      	b.n	8003966 <_printf_i+0x1f6>
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	6829      	ldr	r1, [r5, #0]
 8003820:	0606      	lsls	r6, r0, #24
 8003822:	f101 0304 	add.w	r3, r1, #4
 8003826:	d50a      	bpl.n	800383e <_printf_i+0xce>
 8003828:	680e      	ldr	r6, [r1, #0]
 800382a:	602b      	str	r3, [r5, #0]
 800382c:	2e00      	cmp	r6, #0
 800382e:	da03      	bge.n	8003838 <_printf_i+0xc8>
 8003830:	232d      	movs	r3, #45	; 0x2d
 8003832:	4276      	negs	r6, r6
 8003834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003838:	230a      	movs	r3, #10
 800383a:	485e      	ldr	r0, [pc, #376]	; (80039b4 <_printf_i+0x244>)
 800383c:	e019      	b.n	8003872 <_printf_i+0x102>
 800383e:	680e      	ldr	r6, [r1, #0]
 8003840:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	bf18      	it	ne
 8003848:	b236      	sxthne	r6, r6
 800384a:	e7ef      	b.n	800382c <_printf_i+0xbc>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	6820      	ldr	r0, [r4, #0]
 8003850:	1d19      	adds	r1, r3, #4
 8003852:	6029      	str	r1, [r5, #0]
 8003854:	0601      	lsls	r1, r0, #24
 8003856:	d501      	bpl.n	800385c <_printf_i+0xec>
 8003858:	681e      	ldr	r6, [r3, #0]
 800385a:	e002      	b.n	8003862 <_printf_i+0xf2>
 800385c:	0646      	lsls	r6, r0, #25
 800385e:	d5fb      	bpl.n	8003858 <_printf_i+0xe8>
 8003860:	881e      	ldrh	r6, [r3, #0]
 8003862:	2f6f      	cmp	r7, #111	; 0x6f
 8003864:	bf0c      	ite	eq
 8003866:	2308      	moveq	r3, #8
 8003868:	230a      	movne	r3, #10
 800386a:	4852      	ldr	r0, [pc, #328]	; (80039b4 <_printf_i+0x244>)
 800386c:	2100      	movs	r1, #0
 800386e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003872:	6865      	ldr	r5, [r4, #4]
 8003874:	2d00      	cmp	r5, #0
 8003876:	bfa8      	it	ge
 8003878:	6821      	ldrge	r1, [r4, #0]
 800387a:	60a5      	str	r5, [r4, #8]
 800387c:	bfa4      	itt	ge
 800387e:	f021 0104 	bicge.w	r1, r1, #4
 8003882:	6021      	strge	r1, [r4, #0]
 8003884:	b90e      	cbnz	r6, 800388a <_printf_i+0x11a>
 8003886:	2d00      	cmp	r5, #0
 8003888:	d04d      	beq.n	8003926 <_printf_i+0x1b6>
 800388a:	4615      	mov	r5, r2
 800388c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003890:	fb03 6711 	mls	r7, r3, r1, r6
 8003894:	5dc7      	ldrb	r7, [r0, r7]
 8003896:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800389a:	4637      	mov	r7, r6
 800389c:	42bb      	cmp	r3, r7
 800389e:	460e      	mov	r6, r1
 80038a0:	d9f4      	bls.n	800388c <_printf_i+0x11c>
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d10b      	bne.n	80038be <_printf_i+0x14e>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	07de      	lsls	r6, r3, #31
 80038aa:	d508      	bpl.n	80038be <_printf_i+0x14e>
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	6861      	ldr	r1, [r4, #4]
 80038b0:	4299      	cmp	r1, r3
 80038b2:	bfde      	ittt	le
 80038b4:	2330      	movle	r3, #48	; 0x30
 80038b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038be:	1b52      	subs	r2, r2, r5
 80038c0:	6122      	str	r2, [r4, #16]
 80038c2:	464b      	mov	r3, r9
 80038c4:	4621      	mov	r1, r4
 80038c6:	4640      	mov	r0, r8
 80038c8:	f8cd a000 	str.w	sl, [sp]
 80038cc:	aa03      	add	r2, sp, #12
 80038ce:	f7ff fedf 	bl	8003690 <_printf_common>
 80038d2:	3001      	adds	r0, #1
 80038d4:	d14c      	bne.n	8003970 <_printf_i+0x200>
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295
 80038da:	b004      	add	sp, #16
 80038dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e0:	4834      	ldr	r0, [pc, #208]	; (80039b4 <_printf_i+0x244>)
 80038e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038e6:	6829      	ldr	r1, [r5, #0]
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80038ee:	6029      	str	r1, [r5, #0]
 80038f0:	061d      	lsls	r5, r3, #24
 80038f2:	d514      	bpl.n	800391e <_printf_i+0x1ae>
 80038f4:	07df      	lsls	r7, r3, #31
 80038f6:	bf44      	itt	mi
 80038f8:	f043 0320 	orrmi.w	r3, r3, #32
 80038fc:	6023      	strmi	r3, [r4, #0]
 80038fe:	b91e      	cbnz	r6, 8003908 <_printf_i+0x198>
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	f023 0320 	bic.w	r3, r3, #32
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	2310      	movs	r3, #16
 800390a:	e7af      	b.n	800386c <_printf_i+0xfc>
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	f043 0320 	orr.w	r3, r3, #32
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	2378      	movs	r3, #120	; 0x78
 8003916:	4828      	ldr	r0, [pc, #160]	; (80039b8 <_printf_i+0x248>)
 8003918:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800391c:	e7e3      	b.n	80038e6 <_printf_i+0x176>
 800391e:	0659      	lsls	r1, r3, #25
 8003920:	bf48      	it	mi
 8003922:	b2b6      	uxthmi	r6, r6
 8003924:	e7e6      	b.n	80038f4 <_printf_i+0x184>
 8003926:	4615      	mov	r5, r2
 8003928:	e7bb      	b.n	80038a2 <_printf_i+0x132>
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	6826      	ldr	r6, [r4, #0]
 800392e:	1d18      	adds	r0, r3, #4
 8003930:	6961      	ldr	r1, [r4, #20]
 8003932:	6028      	str	r0, [r5, #0]
 8003934:	0635      	lsls	r5, r6, #24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	d501      	bpl.n	800393e <_printf_i+0x1ce>
 800393a:	6019      	str	r1, [r3, #0]
 800393c:	e002      	b.n	8003944 <_printf_i+0x1d4>
 800393e:	0670      	lsls	r0, r6, #25
 8003940:	d5fb      	bpl.n	800393a <_printf_i+0x1ca>
 8003942:	8019      	strh	r1, [r3, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	4615      	mov	r5, r2
 8003948:	6123      	str	r3, [r4, #16]
 800394a:	e7ba      	b.n	80038c2 <_printf_i+0x152>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	2100      	movs	r1, #0
 8003950:	1d1a      	adds	r2, r3, #4
 8003952:	602a      	str	r2, [r5, #0]
 8003954:	681d      	ldr	r5, [r3, #0]
 8003956:	6862      	ldr	r2, [r4, #4]
 8003958:	4628      	mov	r0, r5
 800395a:	f000 f8d9 	bl	8003b10 <memchr>
 800395e:	b108      	cbz	r0, 8003964 <_printf_i+0x1f4>
 8003960:	1b40      	subs	r0, r0, r5
 8003962:	6060      	str	r0, [r4, #4]
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	6123      	str	r3, [r4, #16]
 8003968:	2300      	movs	r3, #0
 800396a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800396e:	e7a8      	b.n	80038c2 <_printf_i+0x152>
 8003970:	462a      	mov	r2, r5
 8003972:	4649      	mov	r1, r9
 8003974:	4640      	mov	r0, r8
 8003976:	6923      	ldr	r3, [r4, #16]
 8003978:	47d0      	blx	sl
 800397a:	3001      	adds	r0, #1
 800397c:	d0ab      	beq.n	80038d6 <_printf_i+0x166>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	079b      	lsls	r3, r3, #30
 8003982:	d413      	bmi.n	80039ac <_printf_i+0x23c>
 8003984:	68e0      	ldr	r0, [r4, #12]
 8003986:	9b03      	ldr	r3, [sp, #12]
 8003988:	4298      	cmp	r0, r3
 800398a:	bfb8      	it	lt
 800398c:	4618      	movlt	r0, r3
 800398e:	e7a4      	b.n	80038da <_printf_i+0x16a>
 8003990:	2301      	movs	r3, #1
 8003992:	4632      	mov	r2, r6
 8003994:	4649      	mov	r1, r9
 8003996:	4640      	mov	r0, r8
 8003998:	47d0      	blx	sl
 800399a:	3001      	adds	r0, #1
 800399c:	d09b      	beq.n	80038d6 <_printf_i+0x166>
 800399e:	3501      	adds	r5, #1
 80039a0:	68e3      	ldr	r3, [r4, #12]
 80039a2:	9903      	ldr	r1, [sp, #12]
 80039a4:	1a5b      	subs	r3, r3, r1
 80039a6:	42ab      	cmp	r3, r5
 80039a8:	dcf2      	bgt.n	8003990 <_printf_i+0x220>
 80039aa:	e7eb      	b.n	8003984 <_printf_i+0x214>
 80039ac:	2500      	movs	r5, #0
 80039ae:	f104 0619 	add.w	r6, r4, #25
 80039b2:	e7f5      	b.n	80039a0 <_printf_i+0x230>
 80039b4:	08003d15 	.word	0x08003d15
 80039b8:	08003d26 	.word	0x08003d26

080039bc <_sbrk_r>:
 80039bc:	b538      	push	{r3, r4, r5, lr}
 80039be:	2300      	movs	r3, #0
 80039c0:	4d05      	ldr	r5, [pc, #20]	; (80039d8 <_sbrk_r+0x1c>)
 80039c2:	4604      	mov	r4, r0
 80039c4:	4608      	mov	r0, r1
 80039c6:	602b      	str	r3, [r5, #0]
 80039c8:	f7fd fa1a 	bl	8000e00 <_sbrk>
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	d102      	bne.n	80039d6 <_sbrk_r+0x1a>
 80039d0:	682b      	ldr	r3, [r5, #0]
 80039d2:	b103      	cbz	r3, 80039d6 <_sbrk_r+0x1a>
 80039d4:	6023      	str	r3, [r4, #0]
 80039d6:	bd38      	pop	{r3, r4, r5, pc}
 80039d8:	20000160 	.word	0x20000160

080039dc <__sread>:
 80039dc:	b510      	push	{r4, lr}
 80039de:	460c      	mov	r4, r1
 80039e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e4:	f000 f8ae 	bl	8003b44 <_read_r>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bfab      	itete	ge
 80039ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039ee:	89a3      	ldrhlt	r3, [r4, #12]
 80039f0:	181b      	addge	r3, r3, r0
 80039f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039f6:	bfac      	ite	ge
 80039f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80039fa:	81a3      	strhlt	r3, [r4, #12]
 80039fc:	bd10      	pop	{r4, pc}

080039fe <__swrite>:
 80039fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a02:	461f      	mov	r7, r3
 8003a04:	898b      	ldrh	r3, [r1, #12]
 8003a06:	4605      	mov	r5, r0
 8003a08:	05db      	lsls	r3, r3, #23
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	d505      	bpl.n	8003a1c <__swrite+0x1e>
 8003a10:	2302      	movs	r3, #2
 8003a12:	2200      	movs	r2, #0
 8003a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a18:	f000 f868 	bl	8003aec <_lseek_r>
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	4632      	mov	r2, r6
 8003a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a24:	81a3      	strh	r3, [r4, #12]
 8003a26:	4628      	mov	r0, r5
 8003a28:	463b      	mov	r3, r7
 8003a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a32:	f000 b817 	b.w	8003a64 <_write_r>

08003a36 <__sseek>:
 8003a36:	b510      	push	{r4, lr}
 8003a38:	460c      	mov	r4, r1
 8003a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3e:	f000 f855 	bl	8003aec <_lseek_r>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	bf15      	itete	ne
 8003a48:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a52:	81a3      	strheq	r3, [r4, #12]
 8003a54:	bf18      	it	ne
 8003a56:	81a3      	strhne	r3, [r4, #12]
 8003a58:	bd10      	pop	{r4, pc}

08003a5a <__sclose>:
 8003a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5e:	f000 b813 	b.w	8003a88 <_close_r>
	...

08003a64 <_write_r>:
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	4604      	mov	r4, r0
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4d05      	ldr	r5, [pc, #20]	; (8003a84 <_write_r+0x20>)
 8003a70:	602a      	str	r2, [r5, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f7fd f978 	bl	8000d68 <_write>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_write_r+0x1e>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_write_r+0x1e>
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	20000160 	.word	0x20000160

08003a88 <_close_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	4d05      	ldr	r5, [pc, #20]	; (8003aa4 <_close_r+0x1c>)
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	602b      	str	r3, [r5, #0]
 8003a94:	f7fd f984 	bl	8000da0 <_close>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_close_r+0x1a>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_close_r+0x1a>
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	20000160 	.word	0x20000160

08003aa8 <_fstat_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	2300      	movs	r3, #0
 8003aac:	4d06      	ldr	r5, [pc, #24]	; (8003ac8 <_fstat_r+0x20>)
 8003aae:	4604      	mov	r4, r0
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	602b      	str	r3, [r5, #0]
 8003ab6:	f7fd f97e 	bl	8000db6 <_fstat>
 8003aba:	1c43      	adds	r3, r0, #1
 8003abc:	d102      	bne.n	8003ac4 <_fstat_r+0x1c>
 8003abe:	682b      	ldr	r3, [r5, #0]
 8003ac0:	b103      	cbz	r3, 8003ac4 <_fstat_r+0x1c>
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000160 	.word	0x20000160

08003acc <_isatty_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4d05      	ldr	r5, [pc, #20]	; (8003ae8 <_isatty_r+0x1c>)
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	f7fd f97c 	bl	8000dd4 <_isatty>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_isatty_r+0x1a>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_isatty_r+0x1a>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	20000160 	.word	0x20000160

08003aec <_lseek_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4604      	mov	r4, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	2200      	movs	r2, #0
 8003af6:	4d05      	ldr	r5, [pc, #20]	; (8003b0c <_lseek_r+0x20>)
 8003af8:	602a      	str	r2, [r5, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fd f974 	bl	8000de8 <_lseek>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_lseek_r+0x1e>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_lseek_r+0x1e>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	20000160 	.word	0x20000160

08003b10 <memchr>:
 8003b10:	4603      	mov	r3, r0
 8003b12:	b510      	push	{r4, lr}
 8003b14:	b2c9      	uxtb	r1, r1
 8003b16:	4402      	add	r2, r0
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	d101      	bne.n	8003b22 <memchr+0x12>
 8003b1e:	2000      	movs	r0, #0
 8003b20:	e003      	b.n	8003b2a <memchr+0x1a>
 8003b22:	7804      	ldrb	r4, [r0, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	428c      	cmp	r4, r1
 8003b28:	d1f6      	bne.n	8003b18 <memchr+0x8>
 8003b2a:	bd10      	pop	{r4, pc}

08003b2c <__malloc_lock>:
 8003b2c:	4801      	ldr	r0, [pc, #4]	; (8003b34 <__malloc_lock+0x8>)
 8003b2e:	f7ff bb13 	b.w	8003158 <__retarget_lock_acquire_recursive>
 8003b32:	bf00      	nop
 8003b34:	20000154 	.word	0x20000154

08003b38 <__malloc_unlock>:
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <__malloc_unlock+0x8>)
 8003b3a:	f7ff bb0e 	b.w	800315a <__retarget_lock_release_recursive>
 8003b3e:	bf00      	nop
 8003b40:	20000154 	.word	0x20000154

08003b44 <_read_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4604      	mov	r4, r0
 8003b48:	4608      	mov	r0, r1
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4d05      	ldr	r5, [pc, #20]	; (8003b64 <_read_r+0x20>)
 8003b50:	602a      	str	r2, [r5, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f7fd f8eb 	bl	8000d2e <_read>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_read_r+0x1e>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_read_r+0x1e>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	20000160 	.word	0x20000160

08003b68 <_init>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr

08003b74 <_fini>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr
