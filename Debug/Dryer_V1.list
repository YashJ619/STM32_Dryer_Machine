
Dryer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004290  08004290  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004290  08004290  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004290  08004290  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  0800430c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800430c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acfb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e77  00000000  00000000  0002ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0002cc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0002d988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193d1  00000000  00000000  0002e608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed4d  00000000  00000000  000479d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bef1  00000000  00000000  00056726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000e2617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e20  00000000  00000000  000e2660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080040b8 	.word	0x080040b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080040b8 	.word	0x080040b8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0310 	and.w	r3, r3, #16
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]


}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <gpio_init>:

/* USER CODE BEGIN 2 */
void gpio_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIOx = {0};
 80001ae:	463b      	mov	r3, r7
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = DOOR_SW;
 80001ba:	2301      	movs	r3, #1
 80001bc:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001be:	4b19      	ldr	r3, [pc, #100]	; (8000224 <gpio_init+0x7c>)
 80001c0:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_PULLUP;
 80001c2:	2301      	movs	r3, #1
 80001c4:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001c6:	2302      	movs	r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001ca:	463b      	mov	r3, r7
 80001cc:	4619      	mov	r1, r3
 80001ce:	4816      	ldr	r0, [pc, #88]	; (8000228 <gpio_init+0x80>)
 80001d0:	f001 fb68 	bl	80018a4 <HAL_GPIO_Init>

	GPIOx.Pin = LIMIT_SW | HEATER_SW | SEL_ROT_SW;
 80001d4:	230e      	movs	r3, #14
 80001d6:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_INPUT;
 80001d8:	2300      	movs	r3, #0
 80001da:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_PULLUP;
 80001dc:	2301      	movs	r3, #1
 80001de:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001e0:	2302      	movs	r3, #2
 80001e2:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001e4:	463b      	mov	r3, r7
 80001e6:	4619      	mov	r1, r3
 80001e8:	480f      	ldr	r0, [pc, #60]	; (8000228 <gpio_init+0x80>)
 80001ea:	f001 fb5b 	bl	80018a4 <HAL_GPIO_Init>

	GPIOx.Pin = LED;
 80001ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f2:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2301      	movs	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOC, &GPIOx);
 8000200:	463b      	mov	r3, r7
 8000202:	4619      	mov	r1, r3
 8000204:	4809      	ldr	r0, [pc, #36]	; (800022c <gpio_init+0x84>)
 8000206:	f001 fb4d 	bl	80018a4 <HAL_GPIO_Init>

	//HAL_GPIO_WritePin(GPIOC, LED, LOW);

	HAL_NVIC_SetPriority(EXTI0_IRQn,0,0);
 800020a:	2200      	movs	r2, #0
 800020c:	2100      	movs	r1, #0
 800020e:	2006      	movs	r0, #6
 8000210:	f001 fb11 	bl	8001836 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000214:	2006      	movs	r0, #6
 8000216:	f001 fb2a 	bl	800186e <HAL_NVIC_EnableIRQ>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	10310000 	.word	0x10310000
 8000228:	40010800 	.word	0x40010800
 800022c:	40011000 	.word	0x40011000

08000230 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(DOOR_SW);
 8000234:	2001      	movs	r0, #1
 8000236:	f001 fce9 	bl	8001c0c <HAL_GPIO_EXTI_IRQHandler>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <keypad_init>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

void keypad_init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <keypad_init+0x54>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <keypad_init+0x54>)
 800024c:	f043 0308 	orr.w	r3, r3, #8
 8000250:	6193      	str	r3, [r2, #24]
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <keypad_init+0x54>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	f003 0308 	and.w	r3, r3, #8
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 800025e:	f107 0308 	add.w	r3, r7, #8
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = LOW_KEY | MED_KEY | HIGH_KEY | FN_KEY;
 800026c:	f640 4303 	movw	r3, #3075	; 0xc03
 8000270:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_INPUT;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 8000276:	2301      	movs	r3, #1
 8000278:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 800027a:	2303      	movs	r3, #3
 800027c:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(KEYPAD_PORT, &GPIOx);
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	4619      	mov	r1, r3
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <keypad_init+0x58>)
 8000286:	f001 fb0d 	bl	80018a4 <HAL_GPIO_Init>
}
 800028a:	bf00      	nop
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	40010c00 	.word	0x40010c00

0800029c <scan_keypad>:

uint8_t scan_keypad(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 80002a0:	f000 f832 	bl	8000308 <is_low_key_pressed>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d004      	beq.n	80002b4 <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 80002aa:	4813      	ldr	r0, [pc, #76]	; (80002f8 <scan_keypad+0x5c>)
 80002ac:	f002 ff80 	bl	80031b0 <puts>
		return LOW_KEY_PRESSED;
 80002b0:	2301      	movs	r3, #1
 80002b2:	e01e      	b.n	80002f2 <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 80002b4:	f000 f860 	bl	8000378 <is_med_key_pressed>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d004      	beq.n	80002c8 <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 80002be:	480f      	ldr	r0, [pc, #60]	; (80002fc <scan_keypad+0x60>)
 80002c0:	f002 ff76 	bl	80031b0 <puts>
		return MED_KEY_PRESSED;
 80002c4:	2302      	movs	r3, #2
 80002c6:	e014      	b.n	80002f2 <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 80002c8:	f000 f890 	bl	80003ec <is_high_key_pressed>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d004      	beq.n	80002dc <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 80002d2:	480b      	ldr	r0, [pc, #44]	; (8000300 <scan_keypad+0x64>)
 80002d4:	f002 ff6c 	bl	80031b0 <puts>
		return HIGH_KEY_PRESSED;
 80002d8:	2303      	movs	r3, #3
 80002da:	e00a      	b.n	80002f2 <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 80002dc:	f000 f8c0 	bl	8000460 <is_fn_key_pressed>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d004      	beq.n	80002f0 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 80002e6:	4807      	ldr	r0, [pc, #28]	; (8000304 <scan_keypad+0x68>)
 80002e8:	f002 ff62 	bl	80031b0 <puts>
		return FN_KEY_PRESSED;
 80002ec:	2304      	movs	r3, #4
 80002ee:	e000      	b.n	80002f2 <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	080040d0 	.word	0x080040d0
 80002fc:	080040e4 	.word	0x080040e4
 8000300:	080040f8 	.word	0x080040f8
 8000304:	0800410c 	.word	0x0800410c

08000308 <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 800030c:	f001 f98e 	bl	800162c <HAL_GetTick>
 8000310:	4602      	mov	r2, r0
 8000312:	4b16      	ldr	r3, [pc, #88]	; (800036c <is_low_key_pressed+0x64>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	1ad3      	subs	r3, r2, r3
 8000318:	2b0a      	cmp	r3, #10
 800031a:	d923      	bls.n	8000364 <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 800031c:	2102      	movs	r1, #2
 800031e:	4814      	ldr	r0, [pc, #80]	; (8000370 <is_low_key_pressed+0x68>)
 8000320:	f001 fc44 	bl	8001bac <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d114      	bne.n	8000354 <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <is_low_key_pressed+0x6c>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b01      	cmp	r3, #1
 8000332:	d112      	bne.n	800035a <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 8000334:	2102      	movs	r1, #2
 8000336:	480e      	ldr	r0, [pc, #56]	; (8000370 <is_low_key_pressed+0x68>)
 8000338:	f001 fc38 	bl	8001bac <HAL_GPIO_ReadPin>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d104      	bne.n	800034c <is_low_key_pressed+0x44>
				{
					last_state = 0;
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <is_low_key_pressed+0x6c>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
					return 1;
 8000348:	2301      	movs	r3, #1
 800034a:	e00c      	b.n	8000366 <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <is_low_key_pressed+0x6c>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
 8000352:	e002      	b.n	800035a <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <is_low_key_pressed+0x6c>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800035a:	f001 f967 	bl	800162c <HAL_GetTick>
 800035e:	4603      	mov	r3, r0
 8000360:	4a02      	ldr	r2, [pc, #8]	; (800036c <is_low_key_pressed+0x64>)
 8000362:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000364:	2300      	movs	r3, #0
}
 8000366:	4618      	mov	r0, r3
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000090 	.word	0x20000090
 8000370:	40010c00 	.word	0x40010c00
 8000374:	20000094 	.word	0x20000094

08000378 <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 800037c:	f001 f956 	bl	800162c <HAL_GetTick>
 8000380:	4602      	mov	r2, r0
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <is_med_key_pressed+0x68>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	2b0a      	cmp	r3, #10
 800038a:	d925      	bls.n	80003d8 <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 800038c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000390:	4814      	ldr	r0, [pc, #80]	; (80003e4 <is_med_key_pressed+0x6c>)
 8000392:	f001 fc0b 	bl	8001bac <HAL_GPIO_ReadPin>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d115      	bne.n	80003c8 <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <is_med_key_pressed+0x70>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d113      	bne.n	80003ce <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 80003a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003aa:	480e      	ldr	r0, [pc, #56]	; (80003e4 <is_med_key_pressed+0x6c>)
 80003ac:	f001 fbfe 	bl	8001bac <HAL_GPIO_ReadPin>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d104      	bne.n	80003c0 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <is_med_key_pressed+0x70>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
					return 1;
 80003bc:	2301      	movs	r3, #1
 80003be:	e00c      	b.n	80003da <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <is_med_key_pressed+0x70>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
 80003c6:	e002      	b.n	80003ce <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <is_med_key_pressed+0x70>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80003ce:	f001 f92d 	bl	800162c <HAL_GetTick>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a02      	ldr	r2, [pc, #8]	; (80003e0 <is_med_key_pressed+0x68>)
 80003d6:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80003d8:	2300      	movs	r3, #0
}
 80003da:	4618      	mov	r0, r3
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000098 	.word	0x20000098
 80003e4:	40010c00 	.word	0x40010c00
 80003e8:	2000009c 	.word	0x2000009c

080003ec <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 80003f0:	f001 f91c 	bl	800162c <HAL_GetTick>
 80003f4:	4602      	mov	r2, r0
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <is_high_key_pressed+0x68>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	1ad3      	subs	r3, r2, r3
 80003fc:	2b0a      	cmp	r3, #10
 80003fe:	d925      	bls.n	800044c <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4814      	ldr	r0, [pc, #80]	; (8000458 <is_high_key_pressed+0x6c>)
 8000406:	f001 fbd1 	bl	8001bac <HAL_GPIO_ReadPin>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d115      	bne.n	800043c <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <is_high_key_pressed+0x70>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b01      	cmp	r3, #1
 8000418:	d113      	bne.n	8000442 <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	480e      	ldr	r0, [pc, #56]	; (8000458 <is_high_key_pressed+0x6c>)
 8000420:	f001 fbc4 	bl	8001bac <HAL_GPIO_ReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d104      	bne.n	8000434 <is_high_key_pressed+0x48>
				{
					last_state = 0;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <is_high_key_pressed+0x70>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
					return 1;
 8000430:	2301      	movs	r3, #1
 8000432:	e00c      	b.n	800044e <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <is_high_key_pressed+0x70>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
 800043a:	e002      	b.n	8000442 <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <is_high_key_pressed+0x70>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000442:	f001 f8f3 	bl	800162c <HAL_GetTick>
 8000446:	4603      	mov	r3, r0
 8000448:	4a02      	ldr	r2, [pc, #8]	; (8000454 <is_high_key_pressed+0x68>)
 800044a:	6013      	str	r3, [r2, #0]
	}
	return 0;
 800044c:	2300      	movs	r3, #0
}
 800044e:	4618      	mov	r0, r3
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a0 	.word	0x200000a0
 8000458:	40010c00 	.word	0x40010c00
 800045c:	200000a4 	.word	0x200000a4

08000460 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 8000464:	f001 f8e2 	bl	800162c <HAL_GetTick>
 8000468:	4602      	mov	r2, r0
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <is_fn_key_pressed+0x64>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	2b0a      	cmp	r3, #10
 8000472:	d923      	bls.n	80004bc <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8000474:	2101      	movs	r1, #1
 8000476:	4814      	ldr	r0, [pc, #80]	; (80004c8 <is_fn_key_pressed+0x68>)
 8000478:	f001 fb98 	bl	8001bac <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d114      	bne.n	80004ac <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <is_fn_key_pressed+0x6c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	2b01      	cmp	r3, #1
 800048a:	d112      	bne.n	80004b2 <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 800048c:	2101      	movs	r1, #1
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <is_fn_key_pressed+0x68>)
 8000490:	f001 fb8c 	bl	8001bac <HAL_GPIO_ReadPin>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d104      	bne.n	80004a4 <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <is_fn_key_pressed+0x6c>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
					return 1;
 80004a0:	2301      	movs	r3, #1
 80004a2:	e00c      	b.n	80004be <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <is_fn_key_pressed+0x6c>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e002      	b.n	80004b2 <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 80004ac:	4b07      	ldr	r3, [pc, #28]	; (80004cc <is_fn_key_pressed+0x6c>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80004b2:	f001 f8bb 	bl	800162c <HAL_GetTick>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a02      	ldr	r2, [pc, #8]	; (80004c4 <is_fn_key_pressed+0x64>)
 80004ba:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000a8 	.word	0x200000a8
 80004c8:	40010c00 	.word	0x40010c00
 80004cc:	200000ac 	.word	0x200000ac

080004d0 <lcd_gpio_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_gpio_init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0
	__HAL_RCC_AFIO_CLK_ENABLE();
 80004d6:	4b47      	ldr	r3, [pc, #284]	; (80005f4 <lcd_gpio_init+0x124>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a46      	ldr	r2, [pc, #280]	; (80005f4 <lcd_gpio_init+0x124>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b44      	ldr	r3, [pc, #272]	; (80005f4 <lcd_gpio_init+0x124>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_AFIO_REMAP_SWJ_NONJTRST();
 80004ee:	4b42      	ldr	r3, [pc, #264]	; (80005f8 <lcd_gpio_init+0x128>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
 80004f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
 80004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000502:	627b      	str	r3, [r7, #36]	; 0x24
 8000504:	4a3c      	ldr	r2, [pc, #240]	; (80005f8 <lcd_gpio_init+0x128>)
 8000506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000508:	6053      	str	r3, [r2, #4]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050a:	4b3b      	ldr	r3, [pc, #236]	; (80005f8 <lcd_gpio_init+0x128>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	623b      	str	r3, [r7, #32]
 8000510:	6a3b      	ldr	r3, [r7, #32]
 8000512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000516:	623b      	str	r3, [r7, #32]
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051e:	623b      	str	r3, [r7, #32]
 8000520:	4a35      	ldr	r2, [pc, #212]	; (80005f8 <lcd_gpio_init+0x128>)
 8000522:	6a3b      	ldr	r3, [r7, #32]
 8000524:	6053      	str	r3, [r2, #4]

	//__HAL_AFIO_REMAP_SWJ_DISABLE();

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <lcd_gpio_init+0x124>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a32      	ldr	r2, [pc, #200]	; (80005f4 <lcd_gpio_init+0x124>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <lcd_gpio_init+0x124>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <lcd_gpio_init+0x124>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <lcd_gpio_init+0x124>)
 8000544:	f043 0308 	orr.w	r3, r3, #8
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <lcd_gpio_init+0x124>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0308 	and.w	r3, r3, #8
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	4824      	ldr	r0, [pc, #144]	; (80005fc <lcd_gpio_init+0x12c>)
 800056c:	f001 fb35 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_gpio_init+0x12c>)
 8000578:	f001 fb2f 	bl	8001bda <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_RS | LCD_PIN_EN;
 800057c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000580:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 8000586:	2302      	movs	r3, #2
 8000588:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2302      	movs	r3, #2
 800058c:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_CTRL, &GPIOx);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4819      	ldr	r0, [pc, #100]	; (80005fc <lcd_gpio_init+0x12c>)
 8000596:	f001 f985 	bl	80018a4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	21f8      	movs	r1, #248	; 0xf8
 800059e:	4817      	ldr	r0, [pc, #92]	; (80005fc <lcd_gpio_init+0x12c>)
 80005a0:	f001 fb1b 	bl	8001bda <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4;
 80005a4:	23f8      	movs	r3, #248	; 0xf8
 80005a6:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D0_4, &GPIOx);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	4810      	ldr	r0, [pc, #64]	; (80005fc <lcd_gpio_init+0x12c>)
 80005bc:	f001 f972 	bl	80018a4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <lcd_gpio_init+0x130>)
 80005c8:	f001 fb07 	bl	8001bda <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7;
 80005cc:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80005d0:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 80005d6:	2302      	movs	r3, #2
 80005d8:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2302      	movs	r3, #2
 80005dc:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D5_7, &GPIOx);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <lcd_gpio_init+0x130>)
 80005e6:	f001 f95d 	bl	80018a4 <HAL_GPIO_Init>

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010000 	.word	0x40010000
 80005fc:	40010c00 	.word	0x40010c00
 8000600:	40010800 	.word	0x40010800

08000604 <lcd_init>:

void lcd_init(uint8_t fourbitmode)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <lcd_init+0x28>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 800061a:	e002      	b.n	8000622 <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <lcd_init+0x28>)
 800061e:	2210      	movs	r2, #16
 8000620:	701a      	strb	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	200000ad 	.word	0x200000ad

08000630 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	460b      	mov	r3, r1
 800063c:	71bb      	strb	r3, [r7, #6]
 800063e:	4613      	mov	r3, r2
 8000640:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d906      	bls.n	8000656 <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 8000648:	4b30      	ldr	r3, [pc, #192]	; (800070c <lcd_begin+0xdc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <lcd_begin+0xdc>)
 8000654:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 8000656:	4a2e      	ldr	r2, [pc, #184]	; (8000710 <lcd_begin+0xe0>)
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <lcd_begin+0xe4>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d009      	beq.n	800067c <lcd_begin+0x4c>
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d106      	bne.n	800067c <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <lcd_begin+0xdc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <lcd_begin+0xdc>)
 800067a:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f000 ffde 	bl	8001640 <HAL_Delay>
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS | LCD_PIN_EN, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 7140 	mov.w	r1, #768	; 0x300
 800068a:	4823      	ldr	r0, [pc, #140]	; (8000718 <lcd_begin+0xe8>)
 800068c:	f001 faa5 	bl	8001bda <HAL_GPIO_WritePin>
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <lcd_begin+0xdc>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	f043 0320 	orr.w	r3, r3, #32
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f8f8 	bl	8000890 <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 80006a0:	200a      	movs	r0, #10
 80006a2:	f000 ffcd 	bl	8001640 <HAL_Delay>

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <lcd_begin+0xdc>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f8ed 	bl	8000890 <lcd_send_cmd>
	    HAL_Delay(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 ffc2 	bl	8001640 <HAL_Delay>

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <lcd_begin+0xdc>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	f043 0320 	orr.w	r3, r3, #32
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f8e2 	bl	8000890 <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <lcd_begin+0xdc>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f043 0320 	orr.w	r3, r3, #32
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f8da 	bl	8000890 <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <lcd_begin+0xec>)
 80006de:	2204      	movs	r2, #4
 80006e0:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 f81e 	bl	8000724 <lcd_display>

	// clear it off
	lcd_clear();
 80006e8:	f000 f8e8 	bl	80008bc <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <lcd_begin+0xf0>)
 80006ee:	2202      	movs	r2, #2
 80006f0:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <lcd_begin+0xf0>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f8c7 	bl	8000890 <lcd_send_cmd>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000ad 	.word	0x200000ad
 8000710:	200000b0 	.word	0x200000b0
 8000714:	200000b1 	.word	0x200000b1
 8000718:	40010c00 	.word	0x40010c00
 800071c:	200000ae 	.word	0x200000ae
 8000720:	200000af 	.word	0x200000af

08000724 <lcd_display>:
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
	HAL_Delay(2000); // this command takes a long time!
}

void lcd_display(uint8_t state)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	if(state)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00f      	beq.n	8000754 <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <lcd_display+0x58>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <lcd_display+0x58>)
 8000740:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <lcd_display+0x58>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f89f 	bl	8000890 <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 8000752:	e00e      	b.n	8000772 <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <lcd_display+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f023 0304 	bic.w	r3, r3, #4
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <lcd_display+0x58>)
 8000760:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <lcd_display+0x58>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f88f 	bl	8000890 <lcd_send_cmd>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000ae 	.word	0x200000ae

08000780 <lcd_enable>:

void lcd_enable(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <lcd_enable+0x40>)
 800078c:	f001 fa25 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 ff55 	bl	8001640 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079c:	4808      	ldr	r0, [pc, #32]	; (80007c0 <lcd_enable+0x40>)
 800079e:	f001 fa1c 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_Delay(1); // enable pulse must be >450ns
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 ff4c 	bl	8001640 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <lcd_enable+0x40>)
 80007b0:	f001 fa13 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_Delay(1); // commands need > 37us to settle
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 ff43 	bl	8001640 <HAL_Delay>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40010c00 	.word	0x40010c00

080007c4 <write_8bit>:

void write_8bit(uint8_t value)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D7, (value >> 7) & 0x01);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	09db      	lsrs	r3, r3, #7
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007da:	482b      	ldr	r0, [pc, #172]	; (8000888 <write_8bit+0xc4>)
 80007dc:	f001 f9fd 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D6, (value >> 6) & 0x01);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	099b      	lsrs	r3, r3, #6
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	461a      	mov	r2, r3
 80007ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f2:	4825      	ldr	r0, [pc, #148]	; (8000888 <write_8bit+0xc4>)
 80007f4:	f001 f9f1 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5, (value >> 5) & 0x01);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	461a      	mov	r2, r3
 8000806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080a:	481f      	ldr	r0, [pc, #124]	; (8000888 <write_8bit+0xc4>)
 800080c:	f001 f9e5 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D4, (value >> 4) & 0x01);
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	091b      	lsrs	r3, r3, #4
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	2108      	movs	r1, #8
 8000820:	481a      	ldr	r0, [pc, #104]	; (800088c <write_8bit+0xc8>)
 8000822:	f001 f9da 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D3, (value >> 3) & 0x01);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	2110      	movs	r1, #16
 8000836:	4815      	ldr	r0, [pc, #84]	; (800088c <write_8bit+0xc8>)
 8000838:	f001 f9cf 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D2, (value >> 2) & 0x01);
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	2120      	movs	r1, #32
 800084c:	480f      	ldr	r0, [pc, #60]	; (800088c <write_8bit+0xc8>)
 800084e:	f001 f9c4 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D1, (value >> 1) & 0x01);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	461a      	mov	r2, r3
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <write_8bit+0xc8>)
 8000864:	f001 f9b9 	bl	8001bda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0, (value >> 0) & 0x01);
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <write_8bit+0xc8>)
 8000876:	f001 f9b0 	bl	8001bda <HAL_GPIO_WritePin>

	lcd_enable();
 800087a:	f7ff ff81 	bl	8000780 <lcd_enable>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010800 	.word	0x40010800
 800088c:	40010c00 	.word	0x40010c00

08000890 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <lcd_send_cmd+0x28>)
 80008a2:	f001 f99a 	bl	8001bda <HAL_GPIO_WritePin>
	write_8bit(cmd);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff8b 	bl	80007c4 <write_8bit>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40010c00 	.word	0x40010c00

080008bc <lcd_clear>:

void lcd_clear(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ffe5 	bl	8000890 <lcd_send_cmd>
	HAL_Delay(2000);
 80008c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ca:	f000 feb9 	bl	8001640 <HAL_Delay>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <lcd_send_data+0x28>)
 80008e6:	f001 f978 	bl	8001bda <HAL_GPIO_WritePin>
	write_8bit(data);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff69 	bl	80007c4 <write_8bit>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010c00 	.word	0x40010c00

08000900 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ffe1 	bl	80008d4 <lcd_send_data>
		str++;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1f3      	bne.n	8000908 <lcd_print+0x8>
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <lcd_set_cursor>:
//		}
//	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
//}

void lcd_set_cursor(uint8_t row, uint8_t col)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	71bb      	strb	r3, [r7, #6]
	col--;
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	3b01      	subs	r3, #1
 8000940:	71bb      	strb	r3, [r7, #6]
	switch(row)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3b01      	subs	r3, #1
 8000946:	2b03      	cmp	r3, #3
 8000948:	d82e      	bhi.n	80009a8 <lcd_set_cursor+0x7c>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <lcd_set_cursor+0x24>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	08000961 	.word	0x08000961
 8000954:	08000973 	.word	0x08000973
 8000958:	08000985 	.word	0x08000985
 800095c:	08000997 	.word	0x08000997
	{
	case 1:
		lcd_send_cmd(col |= 0x80);
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000966:	71bb      	strb	r3, [r7, #6]
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ff90 	bl	8000890 <lcd_send_cmd>
		break;
 8000970:	e01b      	b.n	80009aa <lcd_set_cursor+0x7e>
	case 2:
		lcd_send_cmd(col |= 0xC0);
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000978:	71bb      	strb	r3, [r7, #6]
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff87 	bl	8000890 <lcd_send_cmd>
		break;
 8000982:	e012      	b.n	80009aa <lcd_set_cursor+0x7e>
	case 3:
		lcd_send_cmd(col |= 0x90);
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800098a:	71bb      	strb	r3, [r7, #6]
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff7e 	bl	8000890 <lcd_send_cmd>
		break;
 8000994:	e009      	b.n	80009aa <lcd_set_cursor+0x7e>
	case 4:
		lcd_send_cmd(col |= 0xD0);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800099c:	71bb      	strb	r3, [r7, #6]
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff75 	bl	8000890 <lcd_send_cmd>
		break;
 80009a6:	e000      	b.n	80009aa <lcd_set_cursor+0x7e>
	default:
		break;
 80009a8:	bf00      	nop
	}
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop

080009b4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 80009bc:	1d39      	adds	r1, r7, #4
 80009be:	230a      	movs	r3, #10
 80009c0:	2201      	movs	r2, #1
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <__io_putchar+0x20>)
 80009c4:	f002 f9d1 	bl	8002d6a <HAL_UART_Transmit>
	return ch;
 80009c8:	687b      	ldr	r3, [r7, #4]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000110 	.word	0x20000110

080009d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009dc:	f000 fdce 	bl	800157c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009e0:	f000 fae8 	bl	8000fb4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009e4:	f7ff fbb2 	bl	800014c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80009e8:	f000 fd2c 	bl	8001444 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	gpio_init();
 80009ec:	f7ff fbdc 	bl	80001a8 <gpio_init>
	keypad_init();
 80009f0:	f7ff fc26 	bl	8000240 <keypad_init>
	timer_init();
 80009f4:	f000 fcc4 	bl	8001380 <timer_init>

	lcd_gpio_init();
 80009f8:	f7ff fd6a 	bl	80004d0 <lcd_gpio_init>
	lcd_init(0);
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fe01 	bl	8000604 <lcd_init>
	lcd_begin(16, 4, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2104      	movs	r1, #4
 8000a06:	2010      	movs	r0, #16
 8000a08:	f7ff fe12 	bl	8000630 <lcd_begin>


	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 8000a0c:	4891      	ldr	r0, [pc, #580]	; (8000c54 <main+0x27c>)
 8000a0e:	f002 fbcf 	bl	80031b0 <puts>
	dryer.state = INIT;
 8000a12:	4b91      	ldr	r3, [pc, #580]	; (8000c58 <main+0x280>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8000a18:	4b8f      	ldr	r3, [pc, #572]	; (8000c58 <main+0x280>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	705a      	strb	r2, [r3, #1]

	lcd_set_cursor(1, 1);
 8000a1e:	2101      	movs	r1, #1
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff ff83 	bl	800092c <lcd_set_cursor>
	lcd_print("Dryer");
 8000a26:	488d      	ldr	r0, [pc, #564]	; (8000c5c <main+0x284>)
 8000a28:	f7ff ff6a 	bl	8000900 <lcd_print>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(timer_stop_evt)
 8000a2c:	4b8c      	ldr	r3, [pc, #560]	; (8000c60 <main+0x288>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <main+0x6a>
		{
			HAL_TIM_Base_Stop_IT(&htim4);
 8000a34:	488b      	ldr	r0, [pc, #556]	; (8000c64 <main+0x28c>)
 8000a36:	f001 fdc5 	bl	80025c4 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 8000a3a:	4b89      	ldr	r3, [pc, #548]	; (8000c60 <main+0x288>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	e00d      	b.n	8000a5e <main+0x86>

		}else if((timer_start_evt) && (dryer.state == START))
 8000a42:	4b89      	ldr	r3, [pc, #548]	; (8000c68 <main+0x290>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d009      	beq.n	8000a5e <main+0x86>
 8000a4a:	4b83      	ldr	r3, [pc, #524]	; (8000c58 <main+0x280>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d105      	bne.n	8000a5e <main+0x86>
		{

			HAL_TIM_Base_Start_IT(&htim4);
 8000a52:	4884      	ldr	r0, [pc, #528]	; (8000c64 <main+0x28c>)
 8000a54:	f001 fd64 	bl	8002520 <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 8000a58:	4b83      	ldr	r3, [pc, #524]	; (8000c68 <main+0x290>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]

		}

		if (door_open_flag) {
 8000a5e:	4b83      	ldr	r3, [pc, #524]	; (8000c6c <main+0x294>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <main+0x9c>

			HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6c:	4880      	ldr	r0, [pc, #512]	; (8000c70 <main+0x298>)
 8000a6e:	f001 f8b4 	bl	8001bda <HAL_GPIO_WritePin>
 8000a72:	e161      	b.n	8000d38 <main+0x360>

		} else {

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7a:	487d      	ldr	r0, [pc, #500]	; (8000c70 <main+0x298>)
 8000a7c:	f001 f8ad 	bl	8001bda <HAL_GPIO_WritePin>

			if (dryer.state == START) {
 8000a80:	4b75      	ldr	r3, [pc, #468]	; (8000c58 <main+0x280>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	f040 80a7 	bne.w	8000bd8 <main+0x200>

				scaned_key = scan_keypad();
 8000a8a:	f7ff fc07 	bl	800029c <scan_keypad>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b78      	ldr	r3, [pc, #480]	; (8000c74 <main+0x29c>)
 8000a94:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 8000a96:	4b77      	ldr	r3, [pc, #476]	; (8000c74 <main+0x29c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	f200 8097 	bhi.w	8000bd0 <main+0x1f8>
 8000aa2:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <main+0xd0>)
 8000aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa8:	08000ab9 	.word	0x08000ab9
 8000aac:	08000afb 	.word	0x08000afb
 8000ab0:	08000b09 	.word	0x08000b09
 8000ab4:	08000bab 	.word	0x08000bab

				case LOW_KEY_PRESSED:
					switch (dryer.cycle) {
 8000ab8:	4b67      	ldr	r3, [pc, #412]	; (8000c58 <main+0x280>)
 8000aba:	79db      	ldrb	r3, [r3, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <main+0xee>
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d00b      	beq.n	8000adc <main+0x104>
					case COOL_CYCLE:
						if (dryer.coolTime > 60U)
							dryer.coolTime -= 60U;
						break;
					}
					break;
 8000ac4:	e084      	b.n	8000bd0 <main+0x1f8>
						if (dryer.heatTime > 60U)
 8000ac6:	4b64      	ldr	r3, [pc, #400]	; (8000c58 <main+0x280>)
 8000ac8:	885b      	ldrh	r3, [r3, #2]
 8000aca:	2b3c      	cmp	r3, #60	; 0x3c
 8000acc:	d911      	bls.n	8000af2 <main+0x11a>
							dryer.heatTime -= 60U;
 8000ace:	4b62      	ldr	r3, [pc, #392]	; (8000c58 <main+0x280>)
 8000ad0:	885b      	ldrh	r3, [r3, #2]
 8000ad2:	3b3c      	subs	r3, #60	; 0x3c
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b60      	ldr	r3, [pc, #384]	; (8000c58 <main+0x280>)
 8000ad8:	805a      	strh	r2, [r3, #2]
						break;
 8000ada:	e00a      	b.n	8000af2 <main+0x11a>
						if (dryer.coolTime > 60U)
 8000adc:	4b5e      	ldr	r3, [pc, #376]	; (8000c58 <main+0x280>)
 8000ade:	889b      	ldrh	r3, [r3, #4]
 8000ae0:	2b3c      	cmp	r3, #60	; 0x3c
 8000ae2:	d908      	bls.n	8000af6 <main+0x11e>
							dryer.coolTime -= 60U;
 8000ae4:	4b5c      	ldr	r3, [pc, #368]	; (8000c58 <main+0x280>)
 8000ae6:	889b      	ldrh	r3, [r3, #4]
 8000ae8:	3b3c      	subs	r3, #60	; 0x3c
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b5a      	ldr	r3, [pc, #360]	; (8000c58 <main+0x280>)
 8000aee:	809a      	strh	r2, [r3, #4]
						break;
 8000af0:	e001      	b.n	8000af6 <main+0x11e>
						break;
 8000af2:	bf00      	nop
 8000af4:	e06c      	b.n	8000bd0 <main+0x1f8>
						break;
 8000af6:	bf00      	nop
					break;
 8000af8:	e06a      	b.n	8000bd0 <main+0x1f8>

				case MED_KEY_PRESSED:
					dryer.state = INIT;
 8000afa:	4b57      	ldr	r3, [pc, #348]	; (8000c58 <main+0x280>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8000b00:	4b57      	ldr	r3, [pc, #348]	; (8000c60 <main+0x288>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]
					break;
 8000b06:	e063      	b.n	8000bd0 <main+0x1f8>

				case HIGH_KEY_PRESSED:
					switch (dryer.cycle) {
 8000b08:	4b53      	ldr	r3, [pc, #332]	; (8000c58 <main+0x280>)
 8000b0a:	79db      	ldrb	r3, [r3, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <main+0x13e>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d037      	beq.n	8000b84 <main+0x1ac>
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
 8000b14:	e05c      	b.n	8000bd0 <main+0x1f8>
						if ((dryer.heatTime < 1800U)
 8000b16:	4b50      	ldr	r3, [pc, #320]	; (8000c58 <main+0x280>)
 8000b18:	885b      	ldrh	r3, [r3, #2]
 8000b1a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000b1e:	d20a      	bcs.n	8000b36 <main+0x15e>
								&& (dryer.mode == LOW_LEVEL))
 8000b20:	4b4d      	ldr	r3, [pc, #308]	; (8000c58 <main+0x280>)
 8000b22:	785b      	ldrb	r3, [r3, #1]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d106      	bne.n	8000b36 <main+0x15e>
							dryer.heatTime += 60U;
 8000b28:	4b4b      	ldr	r3, [pc, #300]	; (8000c58 <main+0x280>)
 8000b2a:	885b      	ldrh	r3, [r3, #2]
 8000b2c:	333c      	adds	r3, #60	; 0x3c
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b49      	ldr	r3, [pc, #292]	; (8000c58 <main+0x280>)
 8000b32:	805a      	strh	r2, [r3, #2]
 8000b34:	e01f      	b.n	8000b76 <main+0x19e>
						else if ((dryer.heatTime < 2400U)
 8000b36:	4b48      	ldr	r3, [pc, #288]	; (8000c58 <main+0x280>)
 8000b38:	885b      	ldrh	r3, [r3, #2]
 8000b3a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000b3e:	d20a      	bcs.n	8000b56 <main+0x17e>
								&& (dryer.mode == MED_LEVEL))
 8000b40:	4b45      	ldr	r3, [pc, #276]	; (8000c58 <main+0x280>)
 8000b42:	785b      	ldrb	r3, [r3, #1]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d106      	bne.n	8000b56 <main+0x17e>
							dryer.heatTime += 60U;
 8000b48:	4b43      	ldr	r3, [pc, #268]	; (8000c58 <main+0x280>)
 8000b4a:	885b      	ldrh	r3, [r3, #2]
 8000b4c:	333c      	adds	r3, #60	; 0x3c
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <main+0x280>)
 8000b52:	805a      	strh	r2, [r3, #2]
 8000b54:	e00f      	b.n	8000b76 <main+0x19e>
						else if ((dryer.heatTime < 3000U)
 8000b56:	4b40      	ldr	r3, [pc, #256]	; (8000c58 <main+0x280>)
 8000b58:	885b      	ldrh	r3, [r3, #2]
 8000b5a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d809      	bhi.n	8000b76 <main+0x19e>
								&& (dryer.mode == HIGH_LEVEL))
 8000b62:	4b3d      	ldr	r3, [pc, #244]	; (8000c58 <main+0x280>)
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d105      	bne.n	8000b76 <main+0x19e>
							dryer.heatTime += 60U;
 8000b6a:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <main+0x280>)
 8000b6c:	885b      	ldrh	r3, [r3, #2]
 8000b6e:	333c      	adds	r3, #60	; 0x3c
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <main+0x280>)
 8000b74:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 8000b76:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <main+0x280>)
 8000b78:	885b      	ldrh	r3, [r3, #2]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	483e      	ldr	r0, [pc, #248]	; (8000c78 <main+0x2a0>)
 8000b7e:	f002 fa91 	bl	80030a4 <iprintf>
						break;
 8000b82:	e011      	b.n	8000ba8 <main+0x1d0>
						if (dryer.coolTime < 900U)
 8000b84:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <main+0x280>)
 8000b86:	889b      	ldrh	r3, [r3, #4]
 8000b88:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000b8c:	d205      	bcs.n	8000b9a <main+0x1c2>
							dryer.coolTime += 60U;
 8000b8e:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <main+0x280>)
 8000b90:	889b      	ldrh	r3, [r3, #4]
 8000b92:	333c      	adds	r3, #60	; 0x3c
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <main+0x280>)
 8000b98:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <main+0x280>)
 8000b9c:	889b      	ldrh	r3, [r3, #4]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4836      	ldr	r0, [pc, #216]	; (8000c7c <main+0x2a4>)
 8000ba2:	f002 fa7f 	bl	80030a4 <iprintf>
						break;
 8000ba6:	bf00      	nop
					break;
 8000ba8:	e012      	b.n	8000bd0 <main+0x1f8>

				case FN_KEY_PRESSED:
					dryer.heatTime = 0U;
 8000baa:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <main+0x280>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <main+0x280>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	71da      	strb	r2, [r3, #7]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <main+0x280>)
 8000bb8:	885b      	ldrh	r3, [r3, #2]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	482e      	ldr	r0, [pc, #184]	; (8000c78 <main+0x2a0>)
 8000bbe:	f002 fa71 	bl	80030a4 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8000bc2:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <main+0x280>)
 8000bc4:	889b      	ldrh	r3, [r3, #4]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482c      	ldr	r0, [pc, #176]	; (8000c7c <main+0x2a4>)
 8000bca:	f002 fa6b 	bl	80030a4 <iprintf>
					break;
 8000bce:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <main+0x29c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e0af      	b.n	8000d38 <main+0x360>

			} else if (dryer.state == INIT) {
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <main+0x280>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f040 80ab 	bne.w	8000d38 <main+0x360>

				scaned_key = scan_keypad();
 8000be2:	f7ff fb5b 	bl	800029c <scan_keypad>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <main+0x29c>)
 8000bec:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <main+0x29c>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d075      	beq.n	8000ce2 <main+0x30a>
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	f300 809a 	bgt.w	8000d30 <main+0x358>
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d002      	beq.n	8000c06 <main+0x22e>
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d047      	beq.n	8000c94 <main+0x2bc>
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
							sizeof("HIGH_LEVEL\r\n"), 10);
					break;

				default:
					break;
 8000c04:	e094      	b.n	8000d30 <main+0x358>
					dryer.mode = LOW_LEVEL;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <main+0x280>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <main+0x280>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <main+0x280>)
 8000c14:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000c18:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <main+0x280>)
 8000c1c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c20:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <main+0x280>)
 8000c24:	221e      	movs	r2, #30
 8000c26:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <main+0x280>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	71da      	strb	r2, [r3, #7]
					rot_left_cunt = 30U;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <main+0x2a8>)
 8000c30:	221e      	movs	r2, #30
 8000c32:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <main+0x2ac>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <main+0x2b0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <main+0x290>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 8000c46:	230a      	movs	r3, #10
 8000c48:	220c      	movs	r2, #12
 8000c4a:	4910      	ldr	r1, [pc, #64]	; (8000c8c <main+0x2b4>)
 8000c4c:	4810      	ldr	r0, [pc, #64]	; (8000c90 <main+0x2b8>)
 8000c4e:	f002 f88c 	bl	8002d6a <HAL_UART_Transmit>
					break;
 8000c52:	e06e      	b.n	8000d32 <main+0x35a>
 8000c54:	0800411c 	.word	0x0800411c
 8000c58:	200000b4 	.word	0x200000b4
 8000c5c:	08004124 	.word	0x08004124
 8000c60:	200000bd 	.word	0x200000bd
 8000c64:	200000c8 	.word	0x200000c8
 8000c68:	200000be 	.word	0x200000be
 8000c6c:	200000bc 	.word	0x200000bc
 8000c70:	40011000 	.word	0x40011000
 8000c74:	200000bf 	.word	0x200000bf
 8000c78:	0800412c 	.word	0x0800412c
 8000c7c:	0800413c 	.word	0x0800413c
 8000c80:	20000001 	.word	0x20000001
 8000c84:	200000c0 	.word	0x200000c0
 8000c88:	200000c1 	.word	0x200000c1
 8000c8c:	0800414c 	.word	0x0800414c
 8000c90:	20000110 	.word	0x20000110
					dryer.mode = MED_LEVEL;
 8000c94:	4bb2      	ldr	r3, [pc, #712]	; (8000f60 <main+0x588>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 8000c9a:	4bb1      	ldr	r3, [pc, #708]	; (8000f60 <main+0x588>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 8000ca0:	4baf      	ldr	r3, [pc, #700]	; (8000f60 <main+0x588>)
 8000ca2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000ca6:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8000ca8:	4bad      	ldr	r3, [pc, #692]	; (8000f60 <main+0x588>)
 8000caa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cae:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8000cb0:	4bab      	ldr	r3, [pc, #684]	; (8000f60 <main+0x588>)
 8000cb2:	221e      	movs	r2, #30
 8000cb4:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8000cb6:	4baa      	ldr	r3, [pc, #680]	; (8000f60 <main+0x588>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	71da      	strb	r2, [r3, #7]
					rot_left_cunt = 30U;
 8000cbc:	4ba9      	ldr	r3, [pc, #676]	; (8000f64 <main+0x58c>)
 8000cbe:	221e      	movs	r2, #30
 8000cc0:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8000cc2:	4ba9      	ldr	r3, [pc, #676]	; (8000f68 <main+0x590>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8000cc8:	4ba8      	ldr	r3, [pc, #672]	; (8000f6c <main+0x594>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8000cce:	4ba8      	ldr	r3, [pc, #672]	; (8000f70 <main+0x598>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	49a6      	ldr	r1, [pc, #664]	; (8000f74 <main+0x59c>)
 8000cda:	48a7      	ldr	r0, [pc, #668]	; (8000f78 <main+0x5a0>)
 8000cdc:	f002 f845 	bl	8002d6a <HAL_UART_Transmit>
					break;
 8000ce0:	e027      	b.n	8000d32 <main+0x35a>
					dryer.mode = HIGH_LEVEL;
 8000ce2:	4b9f      	ldr	r3, [pc, #636]	; (8000f60 <main+0x588>)
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 8000ce8:	4b9d      	ldr	r3, [pc, #628]	; (8000f60 <main+0x588>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 8000cee:	4b9c      	ldr	r3, [pc, #624]	; (8000f60 <main+0x588>)
 8000cf0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000cf4:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8000cf6:	4b9a      	ldr	r3, [pc, #616]	; (8000f60 <main+0x588>)
 8000cf8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cfc:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8000cfe:	4b98      	ldr	r3, [pc, #608]	; (8000f60 <main+0x588>)
 8000d00:	221e      	movs	r2, #30
 8000d02:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8000d04:	4b96      	ldr	r3, [pc, #600]	; (8000f60 <main+0x588>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	71da      	strb	r2, [r3, #7]
					rot_left_cunt = 30U;
 8000d0a:	4b96      	ldr	r3, [pc, #600]	; (8000f64 <main+0x58c>)
 8000d0c:	221e      	movs	r2, #30
 8000d0e:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8000d10:	4b95      	ldr	r3, [pc, #596]	; (8000f68 <main+0x590>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8000d16:	4b95      	ldr	r3, [pc, #596]	; (8000f6c <main+0x594>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8000d1c:	4b94      	ldr	r3, [pc, #592]	; (8000f70 <main+0x598>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 8000d22:	230a      	movs	r3, #10
 8000d24:	220d      	movs	r2, #13
 8000d26:	4995      	ldr	r1, [pc, #596]	; (8000f7c <main+0x5a4>)
 8000d28:	4893      	ldr	r0, [pc, #588]	; (8000f78 <main+0x5a0>)
 8000d2a:	f002 f81e 	bl	8002d6a <HAL_UART_Transmit>
					break;
 8000d2e:	e000      	b.n	8000d32 <main+0x35a>
					break;
 8000d30:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 8000d32:	4b93      	ldr	r3, [pc, #588]	; (8000f80 <main+0x5a8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
			} //else if ends
		} //else ends

		if (door_open_flag) {
 8000d38:	4b92      	ldr	r3, [pc, #584]	; (8000f84 <main+0x5ac>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d029      	beq.n	8000d94 <main+0x3bc>

			HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d46:	4890      	ldr	r0, [pc, #576]	; (8000f88 <main+0x5b0>)
 8000d48:	f000 ff47 	bl	8001bda <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d52:	488e      	ldr	r0, [pc, #568]	; (8000f8c <main+0x5b4>)
 8000d54:	f000 ff41 	bl	8001bda <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5e:	488b      	ldr	r0, [pc, #556]	; (8000f8c <main+0x5b4>)
 8000d60:	f000 ff3b 	bl	8001bda <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6a:	4888      	ldr	r0, [pc, #544]	; (8000f8c <main+0x5b4>)
 8000d6c:	f000 ff35 	bl	8001bda <HAL_GPIO_WritePin>

			if(dryer.state == COMPLETE)
 8000d70:	4b7b      	ldr	r3, [pc, #492]	; (8000f60 <main+0x588>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	f47f ae59 	bne.w	8000a2c <main+0x54>
			{
				//beep off
				timer_stop_evt = 1U;
 8000d7a:	4b85      	ldr	r3, [pc, #532]	; (8000f90 <main+0x5b8>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
				dryer.beepTime = 0U;
 8000d80:	4b77      	ldr	r3, [pc, #476]	; (8000f60 <main+0x588>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	719a      	strb	r2, [r3, #6]
				dryer.state = INIT;
 8000d86:	4b76      	ldr	r3, [pc, #472]	; (8000f60 <main+0x588>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
				dryer.mode = NO_MODE;
 8000d8c:	4b74      	ldr	r3, [pc, #464]	; (8000f60 <main+0x588>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	705a      	strb	r2, [r3, #1]
 8000d92:	e64b      	b.n	8000a2c <main+0x54>
			}

		} else {

			if (dryer.state == START) {
 8000d94:	4b72      	ldr	r3, [pc, #456]	; (8000f60 <main+0x588>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	f040 809d 	bne.w	8000ed8 <main+0x500>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	4878      	ldr	r0, [pc, #480]	; (8000f88 <main+0x5b0>)
 8000da6:	f000 ff18 	bl	8001bda <HAL_GPIO_WritePin>

				if (otp) {
 8000daa:	4b7a      	ldr	r3, [pc, #488]	; (8000f94 <main+0x5bc>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d020      	beq.n	8000df4 <main+0x41c>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 8000db2:	4b6b      	ldr	r3, [pc, #428]	; (8000f60 <main+0x588>)
 8000db4:	885b      	ldrh	r3, [r3, #2]
 8000db6:	4619      	mov	r1, r3
 8000db8:	4877      	ldr	r0, [pc, #476]	; (8000f98 <main+0x5c0>)
 8000dba:	f002 f973 	bl	80030a4 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8000dbe:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <main+0x588>)
 8000dc0:	889b      	ldrh	r3, [r3, #4]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4875      	ldr	r0, [pc, #468]	; (8000f9c <main+0x5c4>)
 8000dc6:	f002 f96d 	bl	80030a4 <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 8000dca:	4b66      	ldr	r3, [pc, #408]	; (8000f64 <main+0x58c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4873      	ldr	r0, [pc, #460]	; (8000fa0 <main+0x5c8>)
 8000dd2:	f002 f967 	bl	80030a4 <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 8000dd6:	4b65      	ldr	r3, [pc, #404]	; (8000f6c <main+0x594>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4871      	ldr	r0, [pc, #452]	; (8000fa4 <main+0x5cc>)
 8000dde:	f002 f961 	bl	80030a4 <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 8000de2:	4b61      	ldr	r3, [pc, #388]	; (8000f68 <main+0x590>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4619      	mov	r1, r3
 8000de8:	486f      	ldr	r0, [pc, #444]	; (8000fa8 <main+0x5d0>)
 8000dea:	f002 f95b 	bl	80030a4 <iprintf>
					otp = 0;
 8000dee:	4b69      	ldr	r3, [pc, #420]	; (8000f94 <main+0x5bc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
				}

				//start Flip Flop
				if (pasue_cunt > 0) {
 8000df4:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <main+0x594>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d034      	beq.n	8000e66 <main+0x48e>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e02:	4862      	ldr	r0, [pc, #392]	; (8000f8c <main+0x5b4>)
 8000e04:	f000 fee9 	bl	8001bda <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0e:	485f      	ldr	r0, [pc, #380]	; (8000f8c <main+0x5b4>)
 8000e10:	f000 fee3 	bl	8001bda <HAL_GPIO_WritePin>

					if (pasue_cunt <= 1) {
 8000e14:	4b55      	ldr	r3, [pc, #340]	; (8000f6c <main+0x594>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d84b      	bhi.n	8000eb4 <main+0x4dc>

						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	485a      	ldr	r0, [pc, #360]	; (8000f88 <main+0x5b0>)
 8000e20:	f000 fec4 	bl	8001bac <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b60      	ldr	r3, [pc, #384]	; (8000fac <main+0x5d4>)
 8000e2a:	701a      	strb	r2, [r3, #0]
						SEL_ROT_SW);

						if (rot_sw_state) {
 8000e2c:	4b5f      	ldr	r3, [pc, #380]	; (8000fac <main+0x5d4>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <main+0x46a>

							rot_left_cunt = 30U;
 8000e34:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <main+0x58c>)
 8000e36:	221e      	movs	r2, #30
 8000e38:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 8000e3a:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <main+0x590>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e038      	b.n	8000eb4 <main+0x4dc>

						} else {

							if (flipflop) {
 8000e42:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <main+0x5d8>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d006      	beq.n	8000e58 <main+0x480>

								rot_left_cunt = 0U;
 8000e4a:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <main+0x58c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 8000e50:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <main+0x590>)
 8000e52:	221e      	movs	r2, #30
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	e02d      	b.n	8000eb4 <main+0x4dc>

							} else {

								rot_left_cunt = 30U;
 8000e58:	4b42      	ldr	r3, [pc, #264]	; (8000f64 <main+0x58c>)
 8000e5a:	221e      	movs	r2, #30
 8000e5c:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 8000e5e:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <main+0x590>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
 8000e64:	e026      	b.n	8000eb4 <main+0x4dc>

							}
						}
					}
				} else if (rot_left_cunt > 0) {
 8000e66:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <main+0x58c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00f      	beq.n	8000e8e <main+0x4b6>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e74:	4845      	ldr	r0, [pc, #276]	; (8000f8c <main+0x5b4>)
 8000e76:	f000 feb0 	bl	8001bda <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e80:	4842      	ldr	r0, [pc, #264]	; (8000f8c <main+0x5b4>)
 8000e82:	f000 feaa 	bl	8001bda <HAL_GPIO_WritePin>
					flipflop = 1;
 8000e86:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <main+0x5d8>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	e012      	b.n	8000eb4 <main+0x4dc>

				} else if (rot_right_cunt > 0) {
 8000e8e:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <main+0x590>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00e      	beq.n	8000eb4 <main+0x4dc>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9c:	483b      	ldr	r0, [pc, #236]	; (8000f8c <main+0x5b4>)
 8000e9e:	f000 fe9c 	bl	8001bda <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea8:	4838      	ldr	r0, [pc, #224]	; (8000f8c <main+0x5b4>)
 8000eaa:	f000 fe96 	bl	8001bda <HAL_GPIO_WritePin>
					flipflop = 0;
 8000eae:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <main+0x5d8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]

				}

				if (dryer.cycle == HEAT_CYCLE) {
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <main+0x588>)
 8000eb6:	79db      	ldrb	r3, [r3, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d106      	bne.n	8000eca <main+0x4f2>

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	4832      	ldr	r0, [pc, #200]	; (8000f8c <main+0x5b4>)
 8000ec4:	f000 fe89 	bl	8001bda <HAL_GPIO_WritePin>
 8000ec8:	e5b0      	b.n	8000a2c <main+0x54>

				} else {

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed0:	482e      	ldr	r0, [pc, #184]	; (8000f8c <main+0x5b4>)
 8000ed2:	f000 fe82 	bl	8001bda <HAL_GPIO_WritePin>
 8000ed6:	e5a9      	b.n	8000a2c <main+0x54>

				}
			}else if(dryer.state == COMPLETE){
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <main+0x588>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d125      	bne.n	8000f2c <main+0x554>

				if(dryer.beepTime == 0)
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <main+0x588>)
 8000ee2:	799b      	ldrb	r3, [r3, #6]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d108      	bne.n	8000efa <main+0x522>
				{
					//beep off
					timer_stop_evt = 1U;
 8000ee8:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <main+0x5b8>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <main+0x588>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <main+0x588>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	705a      	strb	r2, [r3, #1]
				}
				if(dryer.beepTime % 3 == 0)
				{
					//beep toggle
				}
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	4821      	ldr	r0, [pc, #132]	; (8000f88 <main+0x5b0>)
 8000f02:	f000 fe6a 	bl	8001bda <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0c:	481f      	ldr	r0, [pc, #124]	; (8000f8c <main+0x5b4>)
 8000f0e:	f000 fe64 	bl	8001bda <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f18:	481c      	ldr	r0, [pc, #112]	; (8000f8c <main+0x5b4>)
 8000f1a:	f000 fe5e 	bl	8001bda <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f24:	4819      	ldr	r0, [pc, #100]	; (8000f8c <main+0x5b4>)
 8000f26:	f000 fe58 	bl	8001bda <HAL_GPIO_WritePin>
 8000f2a:	e57f      	b.n	8000a2c <main+0x54>
			}
			else{
				//beep off
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	4815      	ldr	r0, [pc, #84]	; (8000f88 <main+0x5b0>)
 8000f34:	f000 fe51 	bl	8001bda <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	4813      	ldr	r0, [pc, #76]	; (8000f8c <main+0x5b4>)
 8000f40:	f000 fe4b 	bl	8001bda <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4a:	4810      	ldr	r0, [pc, #64]	; (8000f8c <main+0x5b4>)
 8000f4c:	f000 fe45 	bl	8001bda <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <main+0x5b4>)
 8000f58:	f000 fe3f 	bl	8001bda <HAL_GPIO_WritePin>
		if(timer_stop_evt)
 8000f5c:	e566      	b.n	8000a2c <main+0x54>
 8000f5e:	bf00      	nop
 8000f60:	200000b4 	.word	0x200000b4
 8000f64:	20000001 	.word	0x20000001
 8000f68:	200000c0 	.word	0x200000c0
 8000f6c:	200000c1 	.word	0x200000c1
 8000f70:	200000be 	.word	0x200000be
 8000f74:	08004158 	.word	0x08004158
 8000f78:	20000110 	.word	0x20000110
 8000f7c:	08004164 	.word	0x08004164
 8000f80:	200000bf 	.word	0x200000bf
 8000f84:	200000bc 	.word	0x200000bc
 8000f88:	40010800 	.word	0x40010800
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	200000bd 	.word	0x200000bd
 8000f94:	20000000 	.word	0x20000000
 8000f98:	08004174 	.word	0x08004174
 8000f9c:	0800413c 	.word	0x0800413c
 8000fa0:	08004188 	.word	0x08004188
 8000fa4:	08004198 	.word	0x08004198
 8000fa8:	080041a8 	.word	0x080041a8
 8000fac:	200000c2 	.word	0x200000c2
 8000fb0:	200000c3 	.word	0x200000c3

08000fb4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b090      	sub	sp, #64	; 0x40
 8000fb8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	2228      	movs	r2, #40	; 0x28
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 f866 	bl	8003094 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fe26 	bl	8001c3c <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x46>
		Error_Handler();
 8000ff6:	f000 f8cf 	bl	8001198 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f001 f894 	bl	8002140 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x6e>
		Error_Handler();
 800101e:	f000 f8bb 	bl	8001198 <Error_Handler>
	}
}
 8001022:	bf00      	nop
 8001024:	3740      	adds	r7, #64	; 0x40
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d115      	bne.n	8001068 <HAL_GPIO_EXTI_Callback+0x3c>

		uint8_t temp = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 800103c:	2101      	movs	r1, #1
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <HAL_GPIO_EXTI_Callback+0x44>)
 8001040:	f000 fdb4 	bl	8001bac <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]

		if (temp == HIGH) {
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d106      	bne.n	800105c <HAL_GPIO_EXTI_Callback+0x30>

			door_open_flag = 1;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_GPIO_EXTI_Callback+0x48>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
			timer_stop_evt = 1;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
			timer_start_evt = 1;
			door_open_flag = 0;

		}
	}
}
 800105a:	e005      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x3c>
			timer_start_evt = 1;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_GPIO_EXTI_Callback+0x50>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
			door_open_flag = 0;
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_GPIO_EXTI_Callback+0x48>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40010800 	.word	0x40010800
 8001074:	200000bc 	.word	0x200000bc
 8001078:	200000bd 	.word	0x200000bd
 800107c:	200000be 	.word	0x200000be

08001080 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) "TIMER\r\n", sizeof("TIMER\r\n"), 10);
 8001088:	230a      	movs	r3, #10
 800108a:	2208      	movs	r2, #8
 800108c:	493a      	ldr	r1, [pc, #232]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800108e:	483b      	ldr	r0, [pc, #236]	; (800117c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001090:	f001 fe6b 	bl	8002d6a <HAL_UART_Transmit>

	if (dryer.heatTime > 0) {
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001096:	885b      	ldrh	r3, [r3, #2]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x2a>

		dryer.heatTime--;
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800109e:	885b      	ldrh	r3, [r3, #2]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010a6:	805a      	strh	r2, [r3, #2]
 80010a8:	e014      	b.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x54>

	} else if(dryer.coolTime > 0) {
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010ac:	889b      	ldrh	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <HAL_TIM_PeriodElapsedCallback+0x40>

		dryer.coolTime--;
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010b4:	889b      	ldrh	r3, [r3, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010bc:	809a      	strh	r2, [r3, #4]
 80010be:	e009      	b.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x54>

	}else if(dryer.state == COMPLETE)
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d105      	bne.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		dryer.beepTime--;
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010ca:	799b      	ldrb	r3, [r3, #6]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010d2:	719a      	strb	r2, [r3, #6]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010d6:	885b      	ldrh	r3, [r3, #2]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d107      	bne.n	80010ec <HAL_TIM_PeriodElapsedCallback+0x6c>
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010de:	79db      	ldrb	r3, [r3, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <HAL_TIM_PeriodElapsedCallback+0x6c>

		dryer.cycle = COOL_CYCLE;
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	71da      	strb	r2, [r3, #7]
 80010ea:	e010      	b.n	800110e <HAL_TIM_PeriodElapsedCallback+0x8e>

	}else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010ee:	889b      	ldrh	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10c      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x8e>
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010f6:	79db      	ldrb	r3, [r3, #7]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d108      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x8e>

		printf("Complete\r\n");
 80010fc:	4821      	ldr	r0, [pc, #132]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010fe:	f002 f857 	bl	80031b0 <puts>
		dryer.state = COMPLETE;
 8001102:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001104:	2202      	movs	r2, #2
 8001106:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800110a:	2200      	movs	r2, #0
 800110c:	705a      	strb	r2, [r3, #1]

	}

	if (pasue_cunt > 0) {
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <HAL_TIM_PeriodElapsedCallback+0xa4>

		pasue_cunt--;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	3b01      	subs	r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e022      	b.n	800116a <HAL_TIM_PeriodElapsedCallback+0xea>

	} else if (rot_left_cunt > 0) {
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00d      	beq.n	8001148 <HAL_TIM_PeriodElapsedCallback+0xc8>

		rot_left_cunt--;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	3b01      	subs	r3, #1
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001136:	701a      	strb	r2, [r3, #0]

		if (rot_left_cunt == 0) {
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d114      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0xea>

			pasue_cunt = 3U;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001142:	2203      	movs	r2, #3
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e010      	b.n	800116a <HAL_TIM_PeriodElapsedCallback+0xea>

		}

	} else if (rot_right_cunt > 0) {
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00c      	beq.n	800116a <HAL_TIM_PeriodElapsedCallback+0xea>

		rot_right_cunt--;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800115a:	701a      	strb	r2, [r3, #0]

		if (rot_right_cunt == 0) {
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0xea>

			pasue_cunt = 3U;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001166:	2203      	movs	r2, #3
 8001168:	701a      	strb	r2, [r3, #0]

		}
	}
	otp = 1;
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	080041bc 	.word	0x080041bc
 800117c:	20000110 	.word	0x20000110
 8001180:	200000b4 	.word	0x200000b4
 8001184:	080041c4 	.word	0x080041c4
 8001188:	200000c1 	.word	0x200000c1
 800118c:	20000001 	.word	0x20000001
 8001190:	200000c0 	.word	0x200000c0
 8001194:	20000000 	.word	0x20000000

08001198 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_MspInit+0x40>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_MspInit+0x40>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6193      	str	r3, [r2, #24]
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_MspInit+0x40>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_MspInit+0x40>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_MspInit+0x40>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_MspInit+0x40>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40021000 	.word	0x40021000

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122e:	f000 f9eb 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}

08001236 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e00a      	b.n	800125e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001248:	f3af 8000 	nop.w
 800124c:	4601      	mov	r1, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	60ba      	str	r2, [r7, #8]
 8001254:	b2ca      	uxtb	r2, r1
 8001256:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	dbf0      	blt.n	8001248 <_read+0x12>
  }

  return len;
 8001266:	687b      	ldr	r3, [r7, #4]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e009      	b.n	8001296 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	60ba      	str	r2, [r7, #8]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fb92 	bl	80009b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	dbf1      	blt.n	8001282 <_write+0x12>
  }
  return len;
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_close>:

int _close(int file)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ce:	605a      	str	r2, [r3, #4]
  return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <_isatty>:

int _isatty(int file)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f001 fe82 	bl	8003040 <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20005000 	.word	0x20005000
 8001368:	00000400 	.word	0x00000400
 800136c:	200000c4 	.word	0x200000c4
 8001370:	20000168 	.word	0x20000168

08001374 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <timer_init>:
#include "timer.h"

TIM_HandleTypeDef htim4;

void timer_init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_CLK_ENABLE();
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <timer_init+0xa4>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a26      	ldr	r2, [pc, #152]	; (8001424 <timer_init+0xa4>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <timer_init+0xa4>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <timer_init+0xa8>)
 80013b8:	4a1c      	ldr	r2, [pc, #112]	; (800142c <timer_init+0xac>)
 80013ba:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7200;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <timer_init+0xa8>)
 80013be:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80013c2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <timer_init+0xa8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1110+1;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <timer_init+0xa8>)
 80013cc:	f240 4257 	movw	r2, #1111	; 0x457
 80013d0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <timer_init+0xa8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <timer_init+0xa8>)
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim4);
 80013de:	4812      	ldr	r0, [pc, #72]	; (8001428 <timer_init+0xa8>)
 80013e0:	f001 f846 	bl	8002470 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4619      	mov	r1, r3
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <timer_init+0xa8>)
 80013f2:	f001 fa1d 	bl	8002830 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4619      	mov	r1, r3
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <timer_init+0xa8>)
 8001406:	f001 fbf3 	bl	8002bf0 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2101      	movs	r1, #1
 800140e:	201e      	movs	r0, #30
 8001410:	f000 fa11 	bl	8001836 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001414:	201e      	movs	r0, #30
 8001416:	f000 fa2a 	bl	800186e <HAL_NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	200000c8 	.word	0x200000c8
 800142c:	40000800 	.word	0x40000800

08001430 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM4_IRQHandler+0x10>)
 8001436:	f001 f8f3 	bl	8002620 <HAL_TIM_IRQHandler>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000c8 	.word	0x200000c8

08001444 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USART1_UART_Init+0x4c>)
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <MX_USART1_UART_Init+0x50>)
 800144c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_USART1_UART_Init+0x4c>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USART1_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USART1_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USART1_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USART1_UART_Init+0x4c>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USART1_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USART1_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USART1_UART_Init+0x4c>)
 800147c:	f001 fc28 	bl	8002cd0 <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001486:	f7ff fe87 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000110 	.word	0x20000110
 8001494:	40013800 	.word	0x40013800

08001498 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <HAL_UART_MspInit+0x8c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d131      	bne.n	800151c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_UART_MspInit+0x90>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <HAL_UART_MspInit+0x94>)
 80014fe:	f000 f9d1 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_UART_MspInit+0x94>)
 8001518:	f000 f9c4 	bl	80018a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40013800 	.word	0x40013800
 8001528:	40021000 	.word	0x40021000
 800152c:	40010800 	.word	0x40010800

08001530 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001532:	490d      	ldr	r1, [pc, #52]	; (8001568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001548:	4c0a      	ldr	r4, [pc, #40]	; (8001574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001556:	f7ff ff0d 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f001 fd77 	bl	800304c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155e:	f7ff fa3b 	bl	80009d8 <main>
  bx lr
 8001562:	4770      	bx	lr
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800156c:	08004298 	.word	0x08004298
  ldr r2, =_sbss
 8001570:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001574:	20000168 	.word	0x20000168

08001578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC1_2_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_Init+0x28>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_Init+0x28>)
 8001586:	f043 0310 	orr.w	r3, r3, #16
 800158a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158c:	2003      	movs	r0, #3
 800158e:	f000 f947 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001592:	200f      	movs	r0, #15
 8001594:	f000 f808 	bl	80015a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001598:	f7ff fe04 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40022000 	.word	0x40022000

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x54>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x58>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f95f 	bl	800188a <HAL_SYSTICK_Config>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00e      	b.n	80015f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d80a      	bhi.n	80015f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f000 f927 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <HAL_InitTick+0x5c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000004 	.word	0x20000004
 8001600:	2000000c 	.word	0x2000000c
 8001604:	20000008 	.word	0x20000008

08001608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_IncTick+0x1c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_IncTick+0x20>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a03      	ldr	r2, [pc, #12]	; (8001628 <HAL_IncTick+0x20>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	2000000c 	.word	0x2000000c
 8001628:	20000154 	.word	0x20000154

0800162c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <HAL_GetTick+0x10>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000154 	.word	0x20000154

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff fff0 	bl	800162c <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001666:	bf00      	nop
 8001668:	f7ff ffe0 	bl	800162c <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000000c 	.word	0x2000000c

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4906      	ldr	r1, [pc, #24]	; (8001720 <__NVIC_EnableIRQ+0x34>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff90 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff2d 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff42 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff90 	bl	8001778 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5f 	bl	8001724 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff35 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b08b      	sub	sp, #44	; 0x2c
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b6:	e169      	b.n	8001b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b8:	2201      	movs	r2, #1
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f040 8158 	bne.w	8001b86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a9a      	ldr	r2, [pc, #616]	; (8001b44 <HAL_GPIO_Init+0x2a0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d05e      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018e0:	4a98      	ldr	r2, [pc, #608]	; (8001b44 <HAL_GPIO_Init+0x2a0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d875      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018e6:	4a98      	ldr	r2, [pc, #608]	; (8001b48 <HAL_GPIO_Init+0x2a4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d058      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018ec:	4a96      	ldr	r2, [pc, #600]	; (8001b48 <HAL_GPIO_Init+0x2a4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d86f      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018f2:	4a96      	ldr	r2, [pc, #600]	; (8001b4c <HAL_GPIO_Init+0x2a8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d052      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018f8:	4a94      	ldr	r2, [pc, #592]	; (8001b4c <HAL_GPIO_Init+0x2a8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d869      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018fe:	4a94      	ldr	r2, [pc, #592]	; (8001b50 <HAL_GPIO_Init+0x2ac>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d04c      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 8001904:	4a92      	ldr	r2, [pc, #584]	; (8001b50 <HAL_GPIO_Init+0x2ac>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d863      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 800190a:	4a92      	ldr	r2, [pc, #584]	; (8001b54 <HAL_GPIO_Init+0x2b0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d046      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 8001910:	4a90      	ldr	r2, [pc, #576]	; (8001b54 <HAL_GPIO_Init+0x2b0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d85d      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 8001916:	2b12      	cmp	r3, #18
 8001918:	d82a      	bhi.n	8001970 <HAL_GPIO_Init+0xcc>
 800191a:	2b12      	cmp	r3, #18
 800191c:	d859      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 800191e:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <HAL_GPIO_Init+0x80>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	0800199f 	.word	0x0800199f
 8001928:	08001979 	.word	0x08001979
 800192c:	0800198b 	.word	0x0800198b
 8001930:	080019cd 	.word	0x080019cd
 8001934:	080019d3 	.word	0x080019d3
 8001938:	080019d3 	.word	0x080019d3
 800193c:	080019d3 	.word	0x080019d3
 8001940:	080019d3 	.word	0x080019d3
 8001944:	080019d3 	.word	0x080019d3
 8001948:	080019d3 	.word	0x080019d3
 800194c:	080019d3 	.word	0x080019d3
 8001950:	080019d3 	.word	0x080019d3
 8001954:	080019d3 	.word	0x080019d3
 8001958:	080019d3 	.word	0x080019d3
 800195c:	080019d3 	.word	0x080019d3
 8001960:	080019d3 	.word	0x080019d3
 8001964:	080019d3 	.word	0x080019d3
 8001968:	08001981 	.word	0x08001981
 800196c:	08001995 	.word	0x08001995
 8001970:	4a79      	ldr	r2, [pc, #484]	; (8001b58 <HAL_GPIO_Init+0x2b4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001976:	e02c      	b.n	80019d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	623b      	str	r3, [r7, #32]
          break;
 800197e:	e029      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	3304      	adds	r3, #4
 8001986:	623b      	str	r3, [r7, #32]
          break;
 8001988:	e024      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	3308      	adds	r3, #8
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e01f      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	330c      	adds	r3, #12
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e01a      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019a6:	2304      	movs	r3, #4
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e013      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b4:	2308      	movs	r3, #8
 80019b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	611a      	str	r2, [r3, #16]
          break;
 80019be:	e009      	b.n	80019d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c0:	2308      	movs	r3, #8
 80019c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	615a      	str	r2, [r3, #20]
          break;
 80019ca:	e003      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e000      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          break;
 80019d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d801      	bhi.n	80019de <HAL_GPIO_Init+0x13a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	e001      	b.n	80019e2 <HAL_GPIO_Init+0x13e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3304      	adds	r3, #4
 80019e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2bff      	cmp	r3, #255	; 0xff
 80019e8:	d802      	bhi.n	80019f0 <HAL_GPIO_Init+0x14c>
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x152>
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3b08      	subs	r3, #8
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	210f      	movs	r1, #15
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	6a39      	ldr	r1, [r7, #32]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	431a      	orrs	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80b1 	beq.w	8001b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a24:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_GPIO_Init+0x2b8>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_GPIO_Init+0x2b8>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_GPIO_Init+0x2b8>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a3c:	4a48      	ldr	r2, [pc, #288]	; (8001b60 <HAL_GPIO_Init+0x2bc>)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a40      	ldr	r2, [pc, #256]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_GPIO_Init+0x1ec>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3f      	ldr	r2, [pc, #252]	; (8001b68 <HAL_GPIO_Init+0x2c4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00d      	beq.n	8001a8c <HAL_GPIO_Init+0x1e8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a3e      	ldr	r2, [pc, #248]	; (8001b6c <HAL_GPIO_Init+0x2c8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d007      	beq.n	8001a88 <HAL_GPIO_Init+0x1e4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a3d      	ldr	r2, [pc, #244]	; (8001b70 <HAL_GPIO_Init+0x2cc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_GPIO_Init+0x1e0>
 8001a80:	2303      	movs	r3, #3
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a84:	2304      	movs	r3, #4
 8001a86:	e004      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a90:	2300      	movs	r3, #0
 8001a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a94:	f002 0203 	and.w	r2, r2, #3
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	4093      	lsls	r3, r2
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aa2:	492f      	ldr	r1, [pc, #188]	; (8001b60 <HAL_GPIO_Init+0x2bc>)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	492c      	ldr	r1, [pc, #176]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4928      	ldr	r1, [pc, #160]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae4:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4922      	ldr	r1, [pc, #136]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	491e      	ldr	r1, [pc, #120]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	4918      	ldr	r1, [pc, #96]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	4914      	ldr	r1, [pc, #80]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d021      	beq.n	8001b78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60cb      	str	r3, [r1, #12]
 8001b40:	e021      	b.n	8001b86 <HAL_GPIO_Init+0x2e2>
 8001b42:	bf00      	nop
 8001b44:	10320000 	.word	0x10320000
 8001b48:	10310000 	.word	0x10310000
 8001b4c:	10220000 	.word	0x10220000
 8001b50:	10210000 	.word	0x10210000
 8001b54:	10120000 	.word	0x10120000
 8001b58:	10110000 	.word	0x10110000
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010000 	.word	0x40010000
 8001b64:	40010800 	.word	0x40010800
 8001b68:	40010c00 	.word	0x40010c00
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	40011400 	.word	0x40011400
 8001b74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_GPIO_Init+0x304>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	4909      	ldr	r1, [pc, #36]	; (8001ba8 <HAL_GPIO_Init+0x304>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	3301      	adds	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	fa22 f303 	lsr.w	r3, r2, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f47f ae8e 	bne.w	80018b8 <HAL_GPIO_Init+0x14>
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	372c      	adds	r7, #44	; 0x2c
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	40010400 	.word	0x40010400

08001bac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e001      	b.n	8001bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	807b      	strh	r3, [r7, #2]
 8001be6:	4613      	mov	r3, r2
 8001be8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bea:	787b      	ldrb	r3, [r7, #1]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf0:	887a      	ldrh	r2, [r7, #2]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bf6:	e003      	b.n	8001c00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	041a      	lsls	r2, r3, #16
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	611a      	str	r2, [r3, #16]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f9fe 	bl	800102c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e272      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8087 	beq.w	8001d6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c5c:	4b92      	ldr	r3, [pc, #584]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d00c      	beq.n	8001c82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c68:	4b8f      	ldr	r3, [pc, #572]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d112      	bne.n	8001c9a <HAL_RCC_OscConfig+0x5e>
 8001c74:	4b8c      	ldr	r3, [pc, #560]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d10b      	bne.n	8001c9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c82:	4b89      	ldr	r3, [pc, #548]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d06c      	beq.n	8001d68 <HAL_RCC_OscConfig+0x12c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d168      	bne.n	8001d68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e24c      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x76>
 8001ca4:	4b80      	ldr	r3, [pc, #512]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a7f      	ldr	r2, [pc, #508]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	e02e      	b.n	8001d10 <HAL_RCC_OscConfig+0xd4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x98>
 8001cba:	4b7b      	ldr	r3, [pc, #492]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a7a      	ldr	r2, [pc, #488]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a77      	ldr	r2, [pc, #476]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e01d      	b.n	8001d10 <HAL_RCC_OscConfig+0xd4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0xbc>
 8001cde:	4b72      	ldr	r3, [pc, #456]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a71      	ldr	r2, [pc, #452]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b6f      	ldr	r3, [pc, #444]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6e      	ldr	r2, [pc, #440]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0xd4>
 8001cf8:	4b6b      	ldr	r3, [pc, #428]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a6a      	ldr	r2, [pc, #424]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b68      	ldr	r3, [pc, #416]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a67      	ldr	r2, [pc, #412]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fc88 	bl	800162c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff fc84 	bl	800162c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e200      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0xe4>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fc74 	bl	800162c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff fc70 	bl	800162c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1ec      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x10c>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d063      	beq.n	8001e3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d76:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x18c>
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_RCC_OscConfig+0x176>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e1c0      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4939      	ldr	r1, [pc, #228]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	e03a      	b.n	8001e3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd0:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fc29 	bl	800162c <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff fc25 	bl	800162c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1a1      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4927      	ldr	r1, [pc, #156]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	e015      	b.n	8001e3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fc08 	bl	800162c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff fc04 	bl	800162c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e180      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d03a      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d019      	beq.n	8001e86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_RCC_OscConfig+0x274>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff fbe8 	bl	800162c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff fbe4 	bl	800162c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e160      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f000 fad8 	bl	8002434 <RCC_Delay>
 8001e84:	e01c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_RCC_OscConfig+0x274>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fbce 	bl	800162c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e92:	e00f      	b.n	8001eb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff fbca 	bl	800162c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d908      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e146      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	42420000 	.word	0x42420000
 8001eb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b92      	ldr	r3, [pc, #584]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e9      	bne.n	8001e94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a6 	beq.w	800201a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10d      	bne.n	8001efa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a87      	ldr	r2, [pc, #540]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b82      	ldr	r3, [pc, #520]	; (8002104 <HAL_RCC_OscConfig+0x4c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f06:	4b7f      	ldr	r3, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x4c8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7e      	ldr	r2, [pc, #504]	; (8002104 <HAL_RCC_OscConfig+0x4c8>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fb8b 	bl	800162c <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1a:	f7ff fb87 	bl	800162c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b64      	cmp	r3, #100	; 0x64
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e103      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	4b75      	ldr	r3, [pc, #468]	; (8002104 <HAL_RCC_OscConfig+0x4c8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x312>
 8001f40:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	e02d      	b.n	8001faa <HAL_RCC_OscConfig+0x36e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x334>
 8001f56:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a69      	ldr	r2, [pc, #420]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6213      	str	r3, [r2, #32]
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a66      	ldr	r2, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	f023 0304 	bic.w	r3, r3, #4
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	e01c      	b.n	8001faa <HAL_RCC_OscConfig+0x36e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b05      	cmp	r3, #5
 8001f76:	d10c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x356>
 8001f78:	4b61      	ldr	r3, [pc, #388]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a60      	ldr	r2, [pc, #384]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	4b5e      	ldr	r3, [pc, #376]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a5d      	ldr	r2, [pc, #372]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e00b      	b.n	8001faa <HAL_RCC_OscConfig+0x36e>
 8001f92:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a5a      	ldr	r2, [pc, #360]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	4b58      	ldr	r3, [pc, #352]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a57      	ldr	r2, [pc, #348]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 0304 	bic.w	r3, r3, #4
 8001fa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d015      	beq.n	8001fde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fb3b 	bl	800162c <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff fb37 	bl	800162c <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e0b1      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0ee      	beq.n	8001fba <HAL_RCC_OscConfig+0x37e>
 8001fdc:	e014      	b.n	8002008 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7ff fb25 	bl	800162c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fb21 	bl	800162c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e09b      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffc:	4b40      	ldr	r3, [pc, #256]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1ee      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d105      	bne.n	800201a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200e:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002018:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8087 	beq.w	8002132 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d061      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d146      	bne.n	80020c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x4cc>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff faf5 	bl	800162c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff faf1 	bl	800162c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e06d      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d108      	bne.n	8002080 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	4921      	ldr	r1, [pc, #132]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a19      	ldr	r1, [r3, #32]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	430b      	orrs	r3, r1
 8002092:	491b      	ldr	r1, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x4cc>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7ff fac5 	bl	800162c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a6:	f7ff fac1 	bl	800162c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e03d      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x46a>
 80020c4:	e035      	b.n	8002132 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_RCC_OscConfig+0x4cc>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff faae 	bl	800162c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff faaa 	bl	800162c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e026      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x498>
 80020f2:	e01e      	b.n	8002132 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e019      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x500>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	429a      	cmp	r2, r3
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000

08002140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0d0      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d910      	bls.n	8002184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b67      	ldr	r3, [pc, #412]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0207 	bic.w	r2, r3, #7
 800216a:	4965      	ldr	r1, [pc, #404]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b8      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d040      	beq.n	8002260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d115      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e07f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e073      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4936      	ldr	r1, [pc, #216]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7ff f9fc 	bl	800162c <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7ff f9f8 	bl	800162c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e053      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d210      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4922      	ldr	r1, [pc, #136]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e032      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4916      	ldr	r1, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ce:	f000 f821 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1cc>)
 80022e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1d0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f95a 	bl	80015a8 <HAL_InitTick>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40022000 	.word	0x40022000
 8002304:	40021000 	.word	0x40021000
 8002308:	080041e0 	.word	0x080041e0
 800230c:	20000004 	.word	0x20000004
 8002310:	20000008 	.word	0x20000008

08002314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b490      	push	{r4, r7}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800231c:	1d3c      	adds	r4, r7, #4
 800231e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002324:	f240 2301 	movw	r3, #513	; 0x201
 8002328:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d002      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x40>
 800234e:	2b08      	cmp	r3, #8
 8002350:	d003      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x46>
 8002352:	e02b      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002356:	623b      	str	r3, [r7, #32]
      break;
 8002358:	e02b      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	0c9b      	lsrs	r3, r3, #18
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3328      	adds	r3, #40	; 0x28
 8002364:	443b      	add	r3, r7
 8002366:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800236a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d012      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	0c5b      	lsrs	r3, r3, #17
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	3328      	adds	r3, #40	; 0x28
 8002382:	443b      	add	r3, r7
 8002384:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002388:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800238e:	fb03 f202 	mul.w	r2, r3, r2
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
 800239a:	e004      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	623b      	str	r3, [r7, #32]
      break;
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ae:	623b      	str	r3, [r7, #32]
      break;
 80023b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b2:	6a3b      	ldr	r3, [r7, #32]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc90      	pop	{r4, r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	080041d0 	.word	0x080041d0
 80023c4:	40021000 	.word	0x40021000
 80023c8:	007a1200 	.word	0x007a1200
 80023cc:	003d0900 	.word	0x003d0900

080023d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	20000004 	.word	0x20000004

080023e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e8:	f7ff fff2 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4903      	ldr	r1, [pc, #12]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	080041f0 	.word	0x080041f0

0800240c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002410:	f7ff ffde 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	0adb      	lsrs	r3, r3, #11
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4903      	ldr	r1, [pc, #12]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	080041f0 	.word	0x080041f0

08002434 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <RCC_Delay+0x34>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <RCC_Delay+0x38>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0a5b      	lsrs	r3, r3, #9
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002450:	bf00      	nop
  }
  while (Delay --);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1e5a      	subs	r2, r3, #1
 8002456:	60fa      	str	r2, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f9      	bne.n	8002450 <RCC_Delay+0x1c>
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000004 	.word	0x20000004
 800246c:	10624dd3 	.word	0x10624dd3

08002470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e041      	b.n	8002506 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f839 	bl	800250e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f000 faa6 	bl	8002a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d001      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e03a      	b.n	80025ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00e      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x58>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d009      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x58>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <HAL_TIM_Base_Start_IT+0x9c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d004      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x58>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d111      	bne.n	800259c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b06      	cmp	r3, #6
 8002588:	d010      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259a:	e007      	b.n	80025ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40000400 	.word	0x40000400
 80025c0:	40000800 	.word	0x40000800

080025c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10f      	bne.n	800260c <HAL_TIM_Base_Stop_IT+0x48>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	f240 4344 	movw	r3, #1092	; 0x444
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_TIM_Base_Stop_IT+0x48>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d122      	bne.n	800267c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b02      	cmp	r3, #2
 8002642:	d11b      	bne.n	800267c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0202 	mvn.w	r2, #2
 800264c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f9b1 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 8002668:	e005      	b.n	8002676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f9a4 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f9b3 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b04      	cmp	r3, #4
 8002688:	d122      	bne.n	80026d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b04      	cmp	r3, #4
 8002696:	d11b      	bne.n	80026d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0204 	mvn.w	r2, #4
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f987 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f97a 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f989 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d122      	bne.n	8002724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d11b      	bne.n	8002724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0208 	mvn.w	r2, #8
 80026f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2204      	movs	r2, #4
 80026fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f95d 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 8002710:	e005      	b.n	800271e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f950 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f95f 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b10      	cmp	r3, #16
 8002730:	d122      	bne.n	8002778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b10      	cmp	r3, #16
 800273e:	d11b      	bne.n	8002778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0210 	mvn.w	r2, #16
 8002748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2208      	movs	r2, #8
 800274e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f933 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 8002764:	e005      	b.n	8002772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f926 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f935 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d107      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0201 	mvn.w	r2, #1
 800279c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fc6e 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	2b80      	cmp	r3, #128	; 0x80
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	d107      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa77 	bl	8002cbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d10e      	bne.n	80027fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d107      	bne.n	80027fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f8f9 	bl	80029ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b20      	cmp	r3, #32
 8002808:	d10e      	bne.n	8002828 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b20      	cmp	r3, #32
 8002816:	d107      	bne.n	8002828 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0220 	mvn.w	r2, #32
 8002820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fa42 	bl	8002cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_TIM_ConfigClockSource+0x18>
 8002844:	2302      	movs	r3, #2
 8002846:	e0b3      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x180>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002866:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800286e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002880:	d03e      	beq.n	8002900 <HAL_TIM_ConfigClockSource+0xd0>
 8002882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002886:	f200 8087 	bhi.w	8002998 <HAL_TIM_ConfigClockSource+0x168>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288e:	f000 8085 	beq.w	800299c <HAL_TIM_ConfigClockSource+0x16c>
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002896:	d87f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 8002898:	2b70      	cmp	r3, #112	; 0x70
 800289a:	d01a      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0xa2>
 800289c:	2b70      	cmp	r3, #112	; 0x70
 800289e:	d87b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d050      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x116>
 80028a4:	2b60      	cmp	r3, #96	; 0x60
 80028a6:	d877      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028a8:	2b50      	cmp	r3, #80	; 0x50
 80028aa:	d03c      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0xf6>
 80028ac:	2b50      	cmp	r3, #80	; 0x50
 80028ae:	d873      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d058      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x136>
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d86f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028b8:	2b30      	cmp	r3, #48	; 0x30
 80028ba:	d064      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x156>
 80028bc:	2b30      	cmp	r3, #48	; 0x30
 80028be:	d86b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d060      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x156>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d867      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05c      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x156>
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d05a      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028d0:	e062      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f000 f966 	bl	8002bb2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	609a      	str	r2, [r3, #8]
      break;
 80028fe:	e04e      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6899      	ldr	r1, [r3, #8]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f000 f94f 	bl	8002bb2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002922:	609a      	str	r2, [r3, #8]
      break;
 8002924:	e03b      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f8c6 	bl	8002ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2150      	movs	r1, #80	; 0x50
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f91d 	bl	8002b7e <TIM_ITRx_SetConfig>
      break;
 8002944:	e02b      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	461a      	mov	r2, r3
 8002954:	f000 f8e4 	bl	8002b20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2160      	movs	r1, #96	; 0x60
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f90d 	bl	8002b7e <TIM_ITRx_SetConfig>
      break;
 8002964:	e01b      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	461a      	mov	r2, r3
 8002974:	f000 f8a6 	bl	8002ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2140      	movs	r1, #64	; 0x40
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f8fd 	bl	8002b7e <TIM_ITRx_SetConfig>
      break;
 8002984:	e00b      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f000 f8f4 	bl	8002b7e <TIM_ITRx_SetConfig>
        break;
 8002996:	e002      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002998:	bf00      	nop
 800299a:	e000      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800299c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <TIM_Base_SetConfig+0xb8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <TIM_Base_SetConfig+0x30>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d007      	beq.n	8002a30 <TIM_Base_SetConfig+0x30>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a26      	ldr	r2, [pc, #152]	; (8002abc <TIM_Base_SetConfig+0xbc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <TIM_Base_SetConfig+0x30>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <TIM_Base_SetConfig+0xc0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d108      	bne.n	8002a42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <TIM_Base_SetConfig+0xb8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00b      	beq.n	8002a62 <TIM_Base_SetConfig+0x62>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a50:	d007      	beq.n	8002a62 <TIM_Base_SetConfig+0x62>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a19      	ldr	r2, [pc, #100]	; (8002abc <TIM_Base_SetConfig+0xbc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d003      	beq.n	8002a62 <TIM_Base_SetConfig+0x62>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <TIM_Base_SetConfig+0xc0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <TIM_Base_SetConfig+0xb8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d103      	bne.n	8002aa8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	615a      	str	r2, [r3, #20]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800

08002ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f023 0201 	bic.w	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f023 030a 	bic.w	r3, r3, #10
 8002b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	621a      	str	r2, [r3, #32]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f023 0210 	bic.w	r2, r3, #16
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	031b      	lsls	r3, r3, #12
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	621a      	str	r2, [r3, #32]
}
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f043 0307 	orr.w	r3, r3, #7
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b087      	sub	sp, #28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	021a      	lsls	r2, r3, #8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	609a      	str	r2, [r3, #8]
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e046      	b.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00e      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d009      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10c      	bne.n	8002c84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40000800 	.word	0x40000800

08002cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e03f      	b.n	8002d62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe fbce 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2224      	movs	r2, #36	; 0x24
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f905 	bl	8002f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b08a      	sub	sp, #40	; 0x28
 8002d6e:	af02      	add	r7, sp, #8
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d17c      	bne.n	8002e84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_UART_Transmit+0x2c>
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e075      	b.n	8002e86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_UART_Transmit+0x3e>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e06e      	b.n	8002e86 <HAL_UART_Transmit+0x11c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2221      	movs	r2, #33	; 0x21
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dbe:	f7fe fc35 	bl	800162c <HAL_GetTick>
 8002dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd8:	d108      	bne.n	8002dec <HAL_UART_Transmit+0x82>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	e003      	b.n	8002df4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002dfc:	e02a      	b.n	8002e54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f840 	bl	8002e8e <UART_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e036      	b.n	8002e86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10b      	bne.n	8002e36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	3302      	adds	r3, #2
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e007      	b.n	8002e46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1cf      	bne.n	8002dfe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2140      	movs	r1, #64	; 0x40
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f810 	bl	8002e8e <UART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e006      	b.n	8002e86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9e:	e02c      	b.n	8002efa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d028      	beq.n	8002efa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8002eae:	f7fe fbbd 	bl	800162c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d21d      	bcs.n	8002efa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ecc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e00f      	b.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4013      	ands	r3, r2
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	bf0c      	ite	eq
 8002f0a:	2301      	moveq	r3, #1
 8002f0c:	2300      	movne	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d0c3      	beq.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f5e:	f023 030c 	bic.w	r3, r3, #12
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2c      	ldr	r2, [pc, #176]	; (8003038 <UART_SetConfig+0x114>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d103      	bne.n	8002f94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f8c:	f7ff fa3e 	bl	800240c <HAL_RCC_GetPCLK2Freq>
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	e002      	b.n	8002f9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f94:	f7ff fa26 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8002f98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	4a22      	ldr	r2, [pc, #136]	; (800303c <UART_SetConfig+0x118>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	0119      	lsls	r1, r3, #4
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009a      	lsls	r2, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <UART_SetConfig+0x118>)
 8002fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2064      	movs	r0, #100	; 0x64
 8002fda:	fb00 f303 	mul.w	r3, r0, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	3332      	adds	r3, #50	; 0x32
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <UART_SetConfig+0x118>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff0:	4419      	add	r1, r3
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009a      	lsls	r2, r3, #2
 8002ffc:	441a      	add	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	fbb2 f2f3 	udiv	r2, r2, r3
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <UART_SetConfig+0x118>)
 800300a:	fba3 0302 	umull	r0, r3, r3, r2
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2064      	movs	r0, #100	; 0x64
 8003012:	fb00 f303 	mul.w	r3, r0, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	3332      	adds	r3, #50	; 0x32
 800301c:	4a07      	ldr	r2, [pc, #28]	; (800303c <UART_SetConfig+0x118>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	f003 020f 	and.w	r2, r3, #15
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	440a      	add	r2, r1
 800302e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40013800 	.word	0x40013800
 800303c:	51eb851f 	.word	0x51eb851f

08003040 <__errno>:
 8003040:	4b01      	ldr	r3, [pc, #4]	; (8003048 <__errno+0x8>)
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000010 	.word	0x20000010

0800304c <__libc_init_array>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	2600      	movs	r6, #0
 8003050:	4d0c      	ldr	r5, [pc, #48]	; (8003084 <__libc_init_array+0x38>)
 8003052:	4c0d      	ldr	r4, [pc, #52]	; (8003088 <__libc_init_array+0x3c>)
 8003054:	1b64      	subs	r4, r4, r5
 8003056:	10a4      	asrs	r4, r4, #2
 8003058:	42a6      	cmp	r6, r4
 800305a:	d109      	bne.n	8003070 <__libc_init_array+0x24>
 800305c:	f001 f82c 	bl	80040b8 <_init>
 8003060:	2600      	movs	r6, #0
 8003062:	4d0a      	ldr	r5, [pc, #40]	; (800308c <__libc_init_array+0x40>)
 8003064:	4c0a      	ldr	r4, [pc, #40]	; (8003090 <__libc_init_array+0x44>)
 8003066:	1b64      	subs	r4, r4, r5
 8003068:	10a4      	asrs	r4, r4, #2
 800306a:	42a6      	cmp	r6, r4
 800306c:	d105      	bne.n	800307a <__libc_init_array+0x2e>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	f855 3b04 	ldr.w	r3, [r5], #4
 8003074:	4798      	blx	r3
 8003076:	3601      	adds	r6, #1
 8003078:	e7ee      	b.n	8003058 <__libc_init_array+0xc>
 800307a:	f855 3b04 	ldr.w	r3, [r5], #4
 800307e:	4798      	blx	r3
 8003080:	3601      	adds	r6, #1
 8003082:	e7f2      	b.n	800306a <__libc_init_array+0x1e>
 8003084:	08004290 	.word	0x08004290
 8003088:	08004290 	.word	0x08004290
 800308c:	08004290 	.word	0x08004290
 8003090:	08004294 	.word	0x08004294

08003094 <memset>:
 8003094:	4603      	mov	r3, r0
 8003096:	4402      	add	r2, r0
 8003098:	4293      	cmp	r3, r2
 800309a:	d100      	bne.n	800309e <memset+0xa>
 800309c:	4770      	bx	lr
 800309e:	f803 1b01 	strb.w	r1, [r3], #1
 80030a2:	e7f9      	b.n	8003098 <memset+0x4>

080030a4 <iprintf>:
 80030a4:	b40f      	push	{r0, r1, r2, r3}
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <iprintf+0x2c>)
 80030a8:	b513      	push	{r0, r1, r4, lr}
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	b124      	cbz	r4, 80030b8 <iprintf+0x14>
 80030ae:	69a3      	ldr	r3, [r4, #24]
 80030b0:	b913      	cbnz	r3, 80030b8 <iprintf+0x14>
 80030b2:	4620      	mov	r0, r4
 80030b4:	f000 fa5a 	bl	800356c <__sinit>
 80030b8:	ab05      	add	r3, sp, #20
 80030ba:	4620      	mov	r0, r4
 80030bc:	9a04      	ldr	r2, [sp, #16]
 80030be:	68a1      	ldr	r1, [r4, #8]
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	f000 fc5d 	bl	8003980 <_vfiprintf_r>
 80030c6:	b002      	add	sp, #8
 80030c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030cc:	b004      	add	sp, #16
 80030ce:	4770      	bx	lr
 80030d0:	20000010 	.word	0x20000010

080030d4 <_puts_r>:
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	460e      	mov	r6, r1
 80030d8:	4605      	mov	r5, r0
 80030da:	b118      	cbz	r0, 80030e4 <_puts_r+0x10>
 80030dc:	6983      	ldr	r3, [r0, #24]
 80030de:	b90b      	cbnz	r3, 80030e4 <_puts_r+0x10>
 80030e0:	f000 fa44 	bl	800356c <__sinit>
 80030e4:	69ab      	ldr	r3, [r5, #24]
 80030e6:	68ac      	ldr	r4, [r5, #8]
 80030e8:	b913      	cbnz	r3, 80030f0 <_puts_r+0x1c>
 80030ea:	4628      	mov	r0, r5
 80030ec:	f000 fa3e 	bl	800356c <__sinit>
 80030f0:	4b2c      	ldr	r3, [pc, #176]	; (80031a4 <_puts_r+0xd0>)
 80030f2:	429c      	cmp	r4, r3
 80030f4:	d120      	bne.n	8003138 <_puts_r+0x64>
 80030f6:	686c      	ldr	r4, [r5, #4]
 80030f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030fa:	07db      	lsls	r3, r3, #31
 80030fc:	d405      	bmi.n	800310a <_puts_r+0x36>
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	0598      	lsls	r0, r3, #22
 8003102:	d402      	bmi.n	800310a <_puts_r+0x36>
 8003104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003106:	f000 facf 	bl	80036a8 <__retarget_lock_acquire_recursive>
 800310a:	89a3      	ldrh	r3, [r4, #12]
 800310c:	0719      	lsls	r1, r3, #28
 800310e:	d51d      	bpl.n	800314c <_puts_r+0x78>
 8003110:	6923      	ldr	r3, [r4, #16]
 8003112:	b1db      	cbz	r3, 800314c <_puts_r+0x78>
 8003114:	3e01      	subs	r6, #1
 8003116:	68a3      	ldr	r3, [r4, #8]
 8003118:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800311c:	3b01      	subs	r3, #1
 800311e:	60a3      	str	r3, [r4, #8]
 8003120:	bb39      	cbnz	r1, 8003172 <_puts_r+0x9e>
 8003122:	2b00      	cmp	r3, #0
 8003124:	da38      	bge.n	8003198 <_puts_r+0xc4>
 8003126:	4622      	mov	r2, r4
 8003128:	210a      	movs	r1, #10
 800312a:	4628      	mov	r0, r5
 800312c:	f000 f848 	bl	80031c0 <__swbuf_r>
 8003130:	3001      	adds	r0, #1
 8003132:	d011      	beq.n	8003158 <_puts_r+0x84>
 8003134:	250a      	movs	r5, #10
 8003136:	e011      	b.n	800315c <_puts_r+0x88>
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <_puts_r+0xd4>)
 800313a:	429c      	cmp	r4, r3
 800313c:	d101      	bne.n	8003142 <_puts_r+0x6e>
 800313e:	68ac      	ldr	r4, [r5, #8]
 8003140:	e7da      	b.n	80030f8 <_puts_r+0x24>
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <_puts_r+0xd8>)
 8003144:	429c      	cmp	r4, r3
 8003146:	bf08      	it	eq
 8003148:	68ec      	ldreq	r4, [r5, #12]
 800314a:	e7d5      	b.n	80030f8 <_puts_r+0x24>
 800314c:	4621      	mov	r1, r4
 800314e:	4628      	mov	r0, r5
 8003150:	f000 f888 	bl	8003264 <__swsetup_r>
 8003154:	2800      	cmp	r0, #0
 8003156:	d0dd      	beq.n	8003114 <_puts_r+0x40>
 8003158:	f04f 35ff 	mov.w	r5, #4294967295
 800315c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800315e:	07da      	lsls	r2, r3, #31
 8003160:	d405      	bmi.n	800316e <_puts_r+0x9a>
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	059b      	lsls	r3, r3, #22
 8003166:	d402      	bmi.n	800316e <_puts_r+0x9a>
 8003168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800316a:	f000 fa9e 	bl	80036aa <__retarget_lock_release_recursive>
 800316e:	4628      	mov	r0, r5
 8003170:	bd70      	pop	{r4, r5, r6, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	da04      	bge.n	8003180 <_puts_r+0xac>
 8003176:	69a2      	ldr	r2, [r4, #24]
 8003178:	429a      	cmp	r2, r3
 800317a:	dc06      	bgt.n	800318a <_puts_r+0xb6>
 800317c:	290a      	cmp	r1, #10
 800317e:	d004      	beq.n	800318a <_puts_r+0xb6>
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	6022      	str	r2, [r4, #0]
 8003186:	7019      	strb	r1, [r3, #0]
 8003188:	e7c5      	b.n	8003116 <_puts_r+0x42>
 800318a:	4622      	mov	r2, r4
 800318c:	4628      	mov	r0, r5
 800318e:	f000 f817 	bl	80031c0 <__swbuf_r>
 8003192:	3001      	adds	r0, #1
 8003194:	d1bf      	bne.n	8003116 <_puts_r+0x42>
 8003196:	e7df      	b.n	8003158 <_puts_r+0x84>
 8003198:	250a      	movs	r5, #10
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	6022      	str	r2, [r4, #0]
 80031a0:	701d      	strb	r5, [r3, #0]
 80031a2:	e7db      	b.n	800315c <_puts_r+0x88>
 80031a4:	0800421c 	.word	0x0800421c
 80031a8:	0800423c 	.word	0x0800423c
 80031ac:	080041fc 	.word	0x080041fc

080031b0 <puts>:
 80031b0:	4b02      	ldr	r3, [pc, #8]	; (80031bc <puts+0xc>)
 80031b2:	4601      	mov	r1, r0
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f7ff bf8d 	b.w	80030d4 <_puts_r>
 80031ba:	bf00      	nop
 80031bc:	20000010 	.word	0x20000010

080031c0 <__swbuf_r>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	460e      	mov	r6, r1
 80031c4:	4614      	mov	r4, r2
 80031c6:	4605      	mov	r5, r0
 80031c8:	b118      	cbz	r0, 80031d2 <__swbuf_r+0x12>
 80031ca:	6983      	ldr	r3, [r0, #24]
 80031cc:	b90b      	cbnz	r3, 80031d2 <__swbuf_r+0x12>
 80031ce:	f000 f9cd 	bl	800356c <__sinit>
 80031d2:	4b21      	ldr	r3, [pc, #132]	; (8003258 <__swbuf_r+0x98>)
 80031d4:	429c      	cmp	r4, r3
 80031d6:	d12b      	bne.n	8003230 <__swbuf_r+0x70>
 80031d8:	686c      	ldr	r4, [r5, #4]
 80031da:	69a3      	ldr	r3, [r4, #24]
 80031dc:	60a3      	str	r3, [r4, #8]
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	071a      	lsls	r2, r3, #28
 80031e2:	d52f      	bpl.n	8003244 <__swbuf_r+0x84>
 80031e4:	6923      	ldr	r3, [r4, #16]
 80031e6:	b36b      	cbz	r3, 8003244 <__swbuf_r+0x84>
 80031e8:	6923      	ldr	r3, [r4, #16]
 80031ea:	6820      	ldr	r0, [r4, #0]
 80031ec:	b2f6      	uxtb	r6, r6
 80031ee:	1ac0      	subs	r0, r0, r3
 80031f0:	6963      	ldr	r3, [r4, #20]
 80031f2:	4637      	mov	r7, r6
 80031f4:	4283      	cmp	r3, r0
 80031f6:	dc04      	bgt.n	8003202 <__swbuf_r+0x42>
 80031f8:	4621      	mov	r1, r4
 80031fa:	4628      	mov	r0, r5
 80031fc:	f000 f922 	bl	8003444 <_fflush_r>
 8003200:	bb30      	cbnz	r0, 8003250 <__swbuf_r+0x90>
 8003202:	68a3      	ldr	r3, [r4, #8]
 8003204:	3001      	adds	r0, #1
 8003206:	3b01      	subs	r3, #1
 8003208:	60a3      	str	r3, [r4, #8]
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	6022      	str	r2, [r4, #0]
 8003210:	701e      	strb	r6, [r3, #0]
 8003212:	6963      	ldr	r3, [r4, #20]
 8003214:	4283      	cmp	r3, r0
 8003216:	d004      	beq.n	8003222 <__swbuf_r+0x62>
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	07db      	lsls	r3, r3, #31
 800321c:	d506      	bpl.n	800322c <__swbuf_r+0x6c>
 800321e:	2e0a      	cmp	r6, #10
 8003220:	d104      	bne.n	800322c <__swbuf_r+0x6c>
 8003222:	4621      	mov	r1, r4
 8003224:	4628      	mov	r0, r5
 8003226:	f000 f90d 	bl	8003444 <_fflush_r>
 800322a:	b988      	cbnz	r0, 8003250 <__swbuf_r+0x90>
 800322c:	4638      	mov	r0, r7
 800322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <__swbuf_r+0x9c>)
 8003232:	429c      	cmp	r4, r3
 8003234:	d101      	bne.n	800323a <__swbuf_r+0x7a>
 8003236:	68ac      	ldr	r4, [r5, #8]
 8003238:	e7cf      	b.n	80031da <__swbuf_r+0x1a>
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <__swbuf_r+0xa0>)
 800323c:	429c      	cmp	r4, r3
 800323e:	bf08      	it	eq
 8003240:	68ec      	ldreq	r4, [r5, #12]
 8003242:	e7ca      	b.n	80031da <__swbuf_r+0x1a>
 8003244:	4621      	mov	r1, r4
 8003246:	4628      	mov	r0, r5
 8003248:	f000 f80c 	bl	8003264 <__swsetup_r>
 800324c:	2800      	cmp	r0, #0
 800324e:	d0cb      	beq.n	80031e8 <__swbuf_r+0x28>
 8003250:	f04f 37ff 	mov.w	r7, #4294967295
 8003254:	e7ea      	b.n	800322c <__swbuf_r+0x6c>
 8003256:	bf00      	nop
 8003258:	0800421c 	.word	0x0800421c
 800325c:	0800423c 	.word	0x0800423c
 8003260:	080041fc 	.word	0x080041fc

08003264 <__swsetup_r>:
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <__swsetup_r+0xcc>)
 8003266:	b570      	push	{r4, r5, r6, lr}
 8003268:	681d      	ldr	r5, [r3, #0]
 800326a:	4606      	mov	r6, r0
 800326c:	460c      	mov	r4, r1
 800326e:	b125      	cbz	r5, 800327a <__swsetup_r+0x16>
 8003270:	69ab      	ldr	r3, [r5, #24]
 8003272:	b913      	cbnz	r3, 800327a <__swsetup_r+0x16>
 8003274:	4628      	mov	r0, r5
 8003276:	f000 f979 	bl	800356c <__sinit>
 800327a:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <__swsetup_r+0xd0>)
 800327c:	429c      	cmp	r4, r3
 800327e:	d10f      	bne.n	80032a0 <__swsetup_r+0x3c>
 8003280:	686c      	ldr	r4, [r5, #4]
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003288:	0719      	lsls	r1, r3, #28
 800328a:	d42c      	bmi.n	80032e6 <__swsetup_r+0x82>
 800328c:	06dd      	lsls	r5, r3, #27
 800328e:	d411      	bmi.n	80032b4 <__swsetup_r+0x50>
 8003290:	2309      	movs	r3, #9
 8003292:	6033      	str	r3, [r6, #0]
 8003294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	e03e      	b.n	800331e <__swsetup_r+0xba>
 80032a0:	4b25      	ldr	r3, [pc, #148]	; (8003338 <__swsetup_r+0xd4>)
 80032a2:	429c      	cmp	r4, r3
 80032a4:	d101      	bne.n	80032aa <__swsetup_r+0x46>
 80032a6:	68ac      	ldr	r4, [r5, #8]
 80032a8:	e7eb      	b.n	8003282 <__swsetup_r+0x1e>
 80032aa:	4b24      	ldr	r3, [pc, #144]	; (800333c <__swsetup_r+0xd8>)
 80032ac:	429c      	cmp	r4, r3
 80032ae:	bf08      	it	eq
 80032b0:	68ec      	ldreq	r4, [r5, #12]
 80032b2:	e7e6      	b.n	8003282 <__swsetup_r+0x1e>
 80032b4:	0758      	lsls	r0, r3, #29
 80032b6:	d512      	bpl.n	80032de <__swsetup_r+0x7a>
 80032b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032ba:	b141      	cbz	r1, 80032ce <__swsetup_r+0x6a>
 80032bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032c0:	4299      	cmp	r1, r3
 80032c2:	d002      	beq.n	80032ca <__swsetup_r+0x66>
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 fa57 	bl	8003778 <_free_r>
 80032ca:	2300      	movs	r3, #0
 80032cc:	6363      	str	r3, [r4, #52]	; 0x34
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032d4:	81a3      	strh	r3, [r4, #12]
 80032d6:	2300      	movs	r3, #0
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6923      	ldr	r3, [r4, #16]
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	f043 0308 	orr.w	r3, r3, #8
 80032e4:	81a3      	strh	r3, [r4, #12]
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	b94b      	cbnz	r3, 80032fe <__swsetup_r+0x9a>
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f4:	d003      	beq.n	80032fe <__swsetup_r+0x9a>
 80032f6:	4621      	mov	r1, r4
 80032f8:	4630      	mov	r0, r6
 80032fa:	f000 f9fd 	bl	80036f8 <__smakebuf_r>
 80032fe:	89a0      	ldrh	r0, [r4, #12]
 8003300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003304:	f010 0301 	ands.w	r3, r0, #1
 8003308:	d00a      	beq.n	8003320 <__swsetup_r+0xbc>
 800330a:	2300      	movs	r3, #0
 800330c:	60a3      	str	r3, [r4, #8]
 800330e:	6963      	ldr	r3, [r4, #20]
 8003310:	425b      	negs	r3, r3
 8003312:	61a3      	str	r3, [r4, #24]
 8003314:	6923      	ldr	r3, [r4, #16]
 8003316:	b943      	cbnz	r3, 800332a <__swsetup_r+0xc6>
 8003318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800331c:	d1ba      	bne.n	8003294 <__swsetup_r+0x30>
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	0781      	lsls	r1, r0, #30
 8003322:	bf58      	it	pl
 8003324:	6963      	ldrpl	r3, [r4, #20]
 8003326:	60a3      	str	r3, [r4, #8]
 8003328:	e7f4      	b.n	8003314 <__swsetup_r+0xb0>
 800332a:	2000      	movs	r0, #0
 800332c:	e7f7      	b.n	800331e <__swsetup_r+0xba>
 800332e:	bf00      	nop
 8003330:	20000010 	.word	0x20000010
 8003334:	0800421c 	.word	0x0800421c
 8003338:	0800423c 	.word	0x0800423c
 800333c:	080041fc 	.word	0x080041fc

08003340 <__sflush_r>:
 8003340:	898a      	ldrh	r2, [r1, #12]
 8003342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003344:	4605      	mov	r5, r0
 8003346:	0710      	lsls	r0, r2, #28
 8003348:	460c      	mov	r4, r1
 800334a:	d457      	bmi.n	80033fc <__sflush_r+0xbc>
 800334c:	684b      	ldr	r3, [r1, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	dc04      	bgt.n	800335c <__sflush_r+0x1c>
 8003352:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	dc01      	bgt.n	800335c <__sflush_r+0x1c>
 8003358:	2000      	movs	r0, #0
 800335a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800335c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800335e:	2e00      	cmp	r6, #0
 8003360:	d0fa      	beq.n	8003358 <__sflush_r+0x18>
 8003362:	2300      	movs	r3, #0
 8003364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003368:	682f      	ldr	r7, [r5, #0]
 800336a:	602b      	str	r3, [r5, #0]
 800336c:	d032      	beq.n	80033d4 <__sflush_r+0x94>
 800336e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	075a      	lsls	r2, r3, #29
 8003374:	d505      	bpl.n	8003382 <__sflush_r+0x42>
 8003376:	6863      	ldr	r3, [r4, #4]
 8003378:	1ac0      	subs	r0, r0, r3
 800337a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800337c:	b10b      	cbz	r3, 8003382 <__sflush_r+0x42>
 800337e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003380:	1ac0      	subs	r0, r0, r3
 8003382:	2300      	movs	r3, #0
 8003384:	4602      	mov	r2, r0
 8003386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003388:	4628      	mov	r0, r5
 800338a:	6a21      	ldr	r1, [r4, #32]
 800338c:	47b0      	blx	r6
 800338e:	1c43      	adds	r3, r0, #1
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	d106      	bne.n	80033a2 <__sflush_r+0x62>
 8003394:	6829      	ldr	r1, [r5, #0]
 8003396:	291d      	cmp	r1, #29
 8003398:	d82c      	bhi.n	80033f4 <__sflush_r+0xb4>
 800339a:	4a29      	ldr	r2, [pc, #164]	; (8003440 <__sflush_r+0x100>)
 800339c:	40ca      	lsrs	r2, r1
 800339e:	07d6      	lsls	r6, r2, #31
 80033a0:	d528      	bpl.n	80033f4 <__sflush_r+0xb4>
 80033a2:	2200      	movs	r2, #0
 80033a4:	6062      	str	r2, [r4, #4]
 80033a6:	6922      	ldr	r2, [r4, #16]
 80033a8:	04d9      	lsls	r1, r3, #19
 80033aa:	6022      	str	r2, [r4, #0]
 80033ac:	d504      	bpl.n	80033b8 <__sflush_r+0x78>
 80033ae:	1c42      	adds	r2, r0, #1
 80033b0:	d101      	bne.n	80033b6 <__sflush_r+0x76>
 80033b2:	682b      	ldr	r3, [r5, #0]
 80033b4:	b903      	cbnz	r3, 80033b8 <__sflush_r+0x78>
 80033b6:	6560      	str	r0, [r4, #84]	; 0x54
 80033b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033ba:	602f      	str	r7, [r5, #0]
 80033bc:	2900      	cmp	r1, #0
 80033be:	d0cb      	beq.n	8003358 <__sflush_r+0x18>
 80033c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033c4:	4299      	cmp	r1, r3
 80033c6:	d002      	beq.n	80033ce <__sflush_r+0x8e>
 80033c8:	4628      	mov	r0, r5
 80033ca:	f000 f9d5 	bl	8003778 <_free_r>
 80033ce:	2000      	movs	r0, #0
 80033d0:	6360      	str	r0, [r4, #52]	; 0x34
 80033d2:	e7c2      	b.n	800335a <__sflush_r+0x1a>
 80033d4:	6a21      	ldr	r1, [r4, #32]
 80033d6:	2301      	movs	r3, #1
 80033d8:	4628      	mov	r0, r5
 80033da:	47b0      	blx	r6
 80033dc:	1c41      	adds	r1, r0, #1
 80033de:	d1c7      	bne.n	8003370 <__sflush_r+0x30>
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0c4      	beq.n	8003370 <__sflush_r+0x30>
 80033e6:	2b1d      	cmp	r3, #29
 80033e8:	d001      	beq.n	80033ee <__sflush_r+0xae>
 80033ea:	2b16      	cmp	r3, #22
 80033ec:	d101      	bne.n	80033f2 <__sflush_r+0xb2>
 80033ee:	602f      	str	r7, [r5, #0]
 80033f0:	e7b2      	b.n	8003358 <__sflush_r+0x18>
 80033f2:	89a3      	ldrh	r3, [r4, #12]
 80033f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f8:	81a3      	strh	r3, [r4, #12]
 80033fa:	e7ae      	b.n	800335a <__sflush_r+0x1a>
 80033fc:	690f      	ldr	r7, [r1, #16]
 80033fe:	2f00      	cmp	r7, #0
 8003400:	d0aa      	beq.n	8003358 <__sflush_r+0x18>
 8003402:	0793      	lsls	r3, r2, #30
 8003404:	bf18      	it	ne
 8003406:	2300      	movne	r3, #0
 8003408:	680e      	ldr	r6, [r1, #0]
 800340a:	bf08      	it	eq
 800340c:	694b      	ldreq	r3, [r1, #20]
 800340e:	1bf6      	subs	r6, r6, r7
 8003410:	600f      	str	r7, [r1, #0]
 8003412:	608b      	str	r3, [r1, #8]
 8003414:	2e00      	cmp	r6, #0
 8003416:	dd9f      	ble.n	8003358 <__sflush_r+0x18>
 8003418:	4633      	mov	r3, r6
 800341a:	463a      	mov	r2, r7
 800341c:	4628      	mov	r0, r5
 800341e:	6a21      	ldr	r1, [r4, #32]
 8003420:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003424:	47e0      	blx	ip
 8003426:	2800      	cmp	r0, #0
 8003428:	dc06      	bgt.n	8003438 <__sflush_r+0xf8>
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003434:	81a3      	strh	r3, [r4, #12]
 8003436:	e790      	b.n	800335a <__sflush_r+0x1a>
 8003438:	4407      	add	r7, r0
 800343a:	1a36      	subs	r6, r6, r0
 800343c:	e7ea      	b.n	8003414 <__sflush_r+0xd4>
 800343e:	bf00      	nop
 8003440:	20400001 	.word	0x20400001

08003444 <_fflush_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	690b      	ldr	r3, [r1, #16]
 8003448:	4605      	mov	r5, r0
 800344a:	460c      	mov	r4, r1
 800344c:	b913      	cbnz	r3, 8003454 <_fflush_r+0x10>
 800344e:	2500      	movs	r5, #0
 8003450:	4628      	mov	r0, r5
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	b118      	cbz	r0, 800345e <_fflush_r+0x1a>
 8003456:	6983      	ldr	r3, [r0, #24]
 8003458:	b90b      	cbnz	r3, 800345e <_fflush_r+0x1a>
 800345a:	f000 f887 	bl	800356c <__sinit>
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <_fflush_r+0x6c>)
 8003460:	429c      	cmp	r4, r3
 8003462:	d11b      	bne.n	800349c <_fflush_r+0x58>
 8003464:	686c      	ldr	r4, [r5, #4]
 8003466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0ef      	beq.n	800344e <_fflush_r+0xa>
 800346e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003470:	07d0      	lsls	r0, r2, #31
 8003472:	d404      	bmi.n	800347e <_fflush_r+0x3a>
 8003474:	0599      	lsls	r1, r3, #22
 8003476:	d402      	bmi.n	800347e <_fflush_r+0x3a>
 8003478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800347a:	f000 f915 	bl	80036a8 <__retarget_lock_acquire_recursive>
 800347e:	4628      	mov	r0, r5
 8003480:	4621      	mov	r1, r4
 8003482:	f7ff ff5d 	bl	8003340 <__sflush_r>
 8003486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003488:	4605      	mov	r5, r0
 800348a:	07da      	lsls	r2, r3, #31
 800348c:	d4e0      	bmi.n	8003450 <_fflush_r+0xc>
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	059b      	lsls	r3, r3, #22
 8003492:	d4dd      	bmi.n	8003450 <_fflush_r+0xc>
 8003494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003496:	f000 f908 	bl	80036aa <__retarget_lock_release_recursive>
 800349a:	e7d9      	b.n	8003450 <_fflush_r+0xc>
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <_fflush_r+0x70>)
 800349e:	429c      	cmp	r4, r3
 80034a0:	d101      	bne.n	80034a6 <_fflush_r+0x62>
 80034a2:	68ac      	ldr	r4, [r5, #8]
 80034a4:	e7df      	b.n	8003466 <_fflush_r+0x22>
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <_fflush_r+0x74>)
 80034a8:	429c      	cmp	r4, r3
 80034aa:	bf08      	it	eq
 80034ac:	68ec      	ldreq	r4, [r5, #12]
 80034ae:	e7da      	b.n	8003466 <_fflush_r+0x22>
 80034b0:	0800421c 	.word	0x0800421c
 80034b4:	0800423c 	.word	0x0800423c
 80034b8:	080041fc 	.word	0x080041fc

080034bc <std>:
 80034bc:	2300      	movs	r3, #0
 80034be:	b510      	push	{r4, lr}
 80034c0:	4604      	mov	r4, r0
 80034c2:	e9c0 3300 	strd	r3, r3, [r0]
 80034c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ca:	6083      	str	r3, [r0, #8]
 80034cc:	8181      	strh	r1, [r0, #12]
 80034ce:	6643      	str	r3, [r0, #100]	; 0x64
 80034d0:	81c2      	strh	r2, [r0, #14]
 80034d2:	6183      	str	r3, [r0, #24]
 80034d4:	4619      	mov	r1, r3
 80034d6:	2208      	movs	r2, #8
 80034d8:	305c      	adds	r0, #92	; 0x5c
 80034da:	f7ff fddb 	bl	8003094 <memset>
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <std+0x38>)
 80034e0:	6224      	str	r4, [r4, #32]
 80034e2:	6263      	str	r3, [r4, #36]	; 0x24
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <std+0x3c>)
 80034e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <std+0x40>)
 80034ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <std+0x44>)
 80034ee:	6323      	str	r3, [r4, #48]	; 0x30
 80034f0:	bd10      	pop	{r4, pc}
 80034f2:	bf00      	nop
 80034f4:	08003f2d 	.word	0x08003f2d
 80034f8:	08003f4f 	.word	0x08003f4f
 80034fc:	08003f87 	.word	0x08003f87
 8003500:	08003fab 	.word	0x08003fab

08003504 <_cleanup_r>:
 8003504:	4901      	ldr	r1, [pc, #4]	; (800350c <_cleanup_r+0x8>)
 8003506:	f000 b8af 	b.w	8003668 <_fwalk_reent>
 800350a:	bf00      	nop
 800350c:	08003445 	.word	0x08003445

08003510 <__sfmoreglue>:
 8003510:	2268      	movs	r2, #104	; 0x68
 8003512:	b570      	push	{r4, r5, r6, lr}
 8003514:	1e4d      	subs	r5, r1, #1
 8003516:	4355      	muls	r5, r2
 8003518:	460e      	mov	r6, r1
 800351a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800351e:	f000 f993 	bl	8003848 <_malloc_r>
 8003522:	4604      	mov	r4, r0
 8003524:	b140      	cbz	r0, 8003538 <__sfmoreglue+0x28>
 8003526:	2100      	movs	r1, #0
 8003528:	e9c0 1600 	strd	r1, r6, [r0]
 800352c:	300c      	adds	r0, #12
 800352e:	60a0      	str	r0, [r4, #8]
 8003530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003534:	f7ff fdae 	bl	8003094 <memset>
 8003538:	4620      	mov	r0, r4
 800353a:	bd70      	pop	{r4, r5, r6, pc}

0800353c <__sfp_lock_acquire>:
 800353c:	4801      	ldr	r0, [pc, #4]	; (8003544 <__sfp_lock_acquire+0x8>)
 800353e:	f000 b8b3 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 8003542:	bf00      	nop
 8003544:	20000159 	.word	0x20000159

08003548 <__sfp_lock_release>:
 8003548:	4801      	ldr	r0, [pc, #4]	; (8003550 <__sfp_lock_release+0x8>)
 800354a:	f000 b8ae 	b.w	80036aa <__retarget_lock_release_recursive>
 800354e:	bf00      	nop
 8003550:	20000159 	.word	0x20000159

08003554 <__sinit_lock_acquire>:
 8003554:	4801      	ldr	r0, [pc, #4]	; (800355c <__sinit_lock_acquire+0x8>)
 8003556:	f000 b8a7 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 800355a:	bf00      	nop
 800355c:	2000015a 	.word	0x2000015a

08003560 <__sinit_lock_release>:
 8003560:	4801      	ldr	r0, [pc, #4]	; (8003568 <__sinit_lock_release+0x8>)
 8003562:	f000 b8a2 	b.w	80036aa <__retarget_lock_release_recursive>
 8003566:	bf00      	nop
 8003568:	2000015a 	.word	0x2000015a

0800356c <__sinit>:
 800356c:	b510      	push	{r4, lr}
 800356e:	4604      	mov	r4, r0
 8003570:	f7ff fff0 	bl	8003554 <__sinit_lock_acquire>
 8003574:	69a3      	ldr	r3, [r4, #24]
 8003576:	b11b      	cbz	r3, 8003580 <__sinit+0x14>
 8003578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800357c:	f7ff bff0 	b.w	8003560 <__sinit_lock_release>
 8003580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003584:	6523      	str	r3, [r4, #80]	; 0x50
 8003586:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <__sinit+0x68>)
 8003588:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <__sinit+0x6c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	62a2      	str	r2, [r4, #40]	; 0x28
 800358e:	42a3      	cmp	r3, r4
 8003590:	bf08      	it	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	4620      	mov	r0, r4
 8003596:	bf08      	it	eq
 8003598:	61a3      	streq	r3, [r4, #24]
 800359a:	f000 f81f 	bl	80035dc <__sfp>
 800359e:	6060      	str	r0, [r4, #4]
 80035a0:	4620      	mov	r0, r4
 80035a2:	f000 f81b 	bl	80035dc <__sfp>
 80035a6:	60a0      	str	r0, [r4, #8]
 80035a8:	4620      	mov	r0, r4
 80035aa:	f000 f817 	bl	80035dc <__sfp>
 80035ae:	2200      	movs	r2, #0
 80035b0:	2104      	movs	r1, #4
 80035b2:	60e0      	str	r0, [r4, #12]
 80035b4:	6860      	ldr	r0, [r4, #4]
 80035b6:	f7ff ff81 	bl	80034bc <std>
 80035ba:	2201      	movs	r2, #1
 80035bc:	2109      	movs	r1, #9
 80035be:	68a0      	ldr	r0, [r4, #8]
 80035c0:	f7ff ff7c 	bl	80034bc <std>
 80035c4:	2202      	movs	r2, #2
 80035c6:	2112      	movs	r1, #18
 80035c8:	68e0      	ldr	r0, [r4, #12]
 80035ca:	f7ff ff77 	bl	80034bc <std>
 80035ce:	2301      	movs	r3, #1
 80035d0:	61a3      	str	r3, [r4, #24]
 80035d2:	e7d1      	b.n	8003578 <__sinit+0xc>
 80035d4:	080041f8 	.word	0x080041f8
 80035d8:	08003505 	.word	0x08003505

080035dc <__sfp>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	4607      	mov	r7, r0
 80035e0:	f7ff ffac 	bl	800353c <__sfp_lock_acquire>
 80035e4:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <__sfp+0x84>)
 80035e6:	681e      	ldr	r6, [r3, #0]
 80035e8:	69b3      	ldr	r3, [r6, #24]
 80035ea:	b913      	cbnz	r3, 80035f2 <__sfp+0x16>
 80035ec:	4630      	mov	r0, r6
 80035ee:	f7ff ffbd 	bl	800356c <__sinit>
 80035f2:	3648      	adds	r6, #72	; 0x48
 80035f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	d503      	bpl.n	8003604 <__sfp+0x28>
 80035fc:	6833      	ldr	r3, [r6, #0]
 80035fe:	b30b      	cbz	r3, 8003644 <__sfp+0x68>
 8003600:	6836      	ldr	r6, [r6, #0]
 8003602:	e7f7      	b.n	80035f4 <__sfp+0x18>
 8003604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003608:	b9d5      	cbnz	r5, 8003640 <__sfp+0x64>
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <__sfp+0x88>)
 800360c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003610:	60e3      	str	r3, [r4, #12]
 8003612:	6665      	str	r5, [r4, #100]	; 0x64
 8003614:	f000 f847 	bl	80036a6 <__retarget_lock_init_recursive>
 8003618:	f7ff ff96 	bl	8003548 <__sfp_lock_release>
 800361c:	2208      	movs	r2, #8
 800361e:	4629      	mov	r1, r5
 8003620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003628:	6025      	str	r5, [r4, #0]
 800362a:	61a5      	str	r5, [r4, #24]
 800362c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003630:	f7ff fd30 	bl	8003094 <memset>
 8003634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800363c:	4620      	mov	r0, r4
 800363e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003640:	3468      	adds	r4, #104	; 0x68
 8003642:	e7d9      	b.n	80035f8 <__sfp+0x1c>
 8003644:	2104      	movs	r1, #4
 8003646:	4638      	mov	r0, r7
 8003648:	f7ff ff62 	bl	8003510 <__sfmoreglue>
 800364c:	4604      	mov	r4, r0
 800364e:	6030      	str	r0, [r6, #0]
 8003650:	2800      	cmp	r0, #0
 8003652:	d1d5      	bne.n	8003600 <__sfp+0x24>
 8003654:	f7ff ff78 	bl	8003548 <__sfp_lock_release>
 8003658:	230c      	movs	r3, #12
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	e7ee      	b.n	800363c <__sfp+0x60>
 800365e:	bf00      	nop
 8003660:	080041f8 	.word	0x080041f8
 8003664:	ffff0001 	.word	0xffff0001

08003668 <_fwalk_reent>:
 8003668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800366c:	4606      	mov	r6, r0
 800366e:	4688      	mov	r8, r1
 8003670:	2700      	movs	r7, #0
 8003672:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800367a:	f1b9 0901 	subs.w	r9, r9, #1
 800367e:	d505      	bpl.n	800368c <_fwalk_reent+0x24>
 8003680:	6824      	ldr	r4, [r4, #0]
 8003682:	2c00      	cmp	r4, #0
 8003684:	d1f7      	bne.n	8003676 <_fwalk_reent+0xe>
 8003686:	4638      	mov	r0, r7
 8003688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800368c:	89ab      	ldrh	r3, [r5, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d907      	bls.n	80036a2 <_fwalk_reent+0x3a>
 8003692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003696:	3301      	adds	r3, #1
 8003698:	d003      	beq.n	80036a2 <_fwalk_reent+0x3a>
 800369a:	4629      	mov	r1, r5
 800369c:	4630      	mov	r0, r6
 800369e:	47c0      	blx	r8
 80036a0:	4307      	orrs	r7, r0
 80036a2:	3568      	adds	r5, #104	; 0x68
 80036a4:	e7e9      	b.n	800367a <_fwalk_reent+0x12>

080036a6 <__retarget_lock_init_recursive>:
 80036a6:	4770      	bx	lr

080036a8 <__retarget_lock_acquire_recursive>:
 80036a8:	4770      	bx	lr

080036aa <__retarget_lock_release_recursive>:
 80036aa:	4770      	bx	lr

080036ac <__swhatbuf_r>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	460e      	mov	r6, r1
 80036b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b4:	4614      	mov	r4, r2
 80036b6:	2900      	cmp	r1, #0
 80036b8:	461d      	mov	r5, r3
 80036ba:	b096      	sub	sp, #88	; 0x58
 80036bc:	da08      	bge.n	80036d0 <__swhatbuf_r+0x24>
 80036be:	2200      	movs	r2, #0
 80036c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80036c4:	602a      	str	r2, [r5, #0]
 80036c6:	061a      	lsls	r2, r3, #24
 80036c8:	d410      	bmi.n	80036ec <__swhatbuf_r+0x40>
 80036ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ce:	e00e      	b.n	80036ee <__swhatbuf_r+0x42>
 80036d0:	466a      	mov	r2, sp
 80036d2:	f000 fc91 	bl	8003ff8 <_fstat_r>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	dbf1      	blt.n	80036be <__swhatbuf_r+0x12>
 80036da:	9a01      	ldr	r2, [sp, #4]
 80036dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036e4:	425a      	negs	r2, r3
 80036e6:	415a      	adcs	r2, r3
 80036e8:	602a      	str	r2, [r5, #0]
 80036ea:	e7ee      	b.n	80036ca <__swhatbuf_r+0x1e>
 80036ec:	2340      	movs	r3, #64	; 0x40
 80036ee:	2000      	movs	r0, #0
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	b016      	add	sp, #88	; 0x58
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080036f8 <__smakebuf_r>:
 80036f8:	898b      	ldrh	r3, [r1, #12]
 80036fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036fc:	079d      	lsls	r5, r3, #30
 80036fe:	4606      	mov	r6, r0
 8003700:	460c      	mov	r4, r1
 8003702:	d507      	bpl.n	8003714 <__smakebuf_r+0x1c>
 8003704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	2301      	movs	r3, #1
 800370e:	6163      	str	r3, [r4, #20]
 8003710:	b002      	add	sp, #8
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	466a      	mov	r2, sp
 8003716:	ab01      	add	r3, sp, #4
 8003718:	f7ff ffc8 	bl	80036ac <__swhatbuf_r>
 800371c:	9900      	ldr	r1, [sp, #0]
 800371e:	4605      	mov	r5, r0
 8003720:	4630      	mov	r0, r6
 8003722:	f000 f891 	bl	8003848 <_malloc_r>
 8003726:	b948      	cbnz	r0, 800373c <__smakebuf_r+0x44>
 8003728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800372c:	059a      	lsls	r2, r3, #22
 800372e:	d4ef      	bmi.n	8003710 <__smakebuf_r+0x18>
 8003730:	f023 0303 	bic.w	r3, r3, #3
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	81a3      	strh	r3, [r4, #12]
 800373a:	e7e3      	b.n	8003704 <__smakebuf_r+0xc>
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <__smakebuf_r+0x7c>)
 800373e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	6020      	str	r0, [r4, #0]
 8003744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	9b00      	ldr	r3, [sp, #0]
 800374c:	6120      	str	r0, [r4, #16]
 800374e:	6163      	str	r3, [r4, #20]
 8003750:	9b01      	ldr	r3, [sp, #4]
 8003752:	b15b      	cbz	r3, 800376c <__smakebuf_r+0x74>
 8003754:	4630      	mov	r0, r6
 8003756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800375a:	f000 fc5f 	bl	800401c <_isatty_r>
 800375e:	b128      	cbz	r0, 800376c <__smakebuf_r+0x74>
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	89a0      	ldrh	r0, [r4, #12]
 800376e:	4305      	orrs	r5, r0
 8003770:	81a5      	strh	r5, [r4, #12]
 8003772:	e7cd      	b.n	8003710 <__smakebuf_r+0x18>
 8003774:	08003505 	.word	0x08003505

08003778 <_free_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4605      	mov	r5, r0
 800377c:	2900      	cmp	r1, #0
 800377e:	d040      	beq.n	8003802 <_free_r+0x8a>
 8003780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003784:	1f0c      	subs	r4, r1, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	bfb8      	it	lt
 800378a:	18e4      	addlt	r4, r4, r3
 800378c:	f000 fc76 	bl	800407c <__malloc_lock>
 8003790:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <_free_r+0x8c>)
 8003792:	6813      	ldr	r3, [r2, #0]
 8003794:	b933      	cbnz	r3, 80037a4 <_free_r+0x2c>
 8003796:	6063      	str	r3, [r4, #4]
 8003798:	6014      	str	r4, [r2, #0]
 800379a:	4628      	mov	r0, r5
 800379c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037a0:	f000 bc72 	b.w	8004088 <__malloc_unlock>
 80037a4:	42a3      	cmp	r3, r4
 80037a6:	d908      	bls.n	80037ba <_free_r+0x42>
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	1821      	adds	r1, r4, r0
 80037ac:	428b      	cmp	r3, r1
 80037ae:	bf01      	itttt	eq
 80037b0:	6819      	ldreq	r1, [r3, #0]
 80037b2:	685b      	ldreq	r3, [r3, #4]
 80037b4:	1809      	addeq	r1, r1, r0
 80037b6:	6021      	streq	r1, [r4, #0]
 80037b8:	e7ed      	b.n	8003796 <_free_r+0x1e>
 80037ba:	461a      	mov	r2, r3
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	b10b      	cbz	r3, 80037c4 <_free_r+0x4c>
 80037c0:	42a3      	cmp	r3, r4
 80037c2:	d9fa      	bls.n	80037ba <_free_r+0x42>
 80037c4:	6811      	ldr	r1, [r2, #0]
 80037c6:	1850      	adds	r0, r2, r1
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d10b      	bne.n	80037e4 <_free_r+0x6c>
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	4401      	add	r1, r0
 80037d0:	1850      	adds	r0, r2, r1
 80037d2:	4283      	cmp	r3, r0
 80037d4:	6011      	str	r1, [r2, #0]
 80037d6:	d1e0      	bne.n	800379a <_free_r+0x22>
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4401      	add	r1, r0
 80037de:	6011      	str	r1, [r2, #0]
 80037e0:	6053      	str	r3, [r2, #4]
 80037e2:	e7da      	b.n	800379a <_free_r+0x22>
 80037e4:	d902      	bls.n	80037ec <_free_r+0x74>
 80037e6:	230c      	movs	r3, #12
 80037e8:	602b      	str	r3, [r5, #0]
 80037ea:	e7d6      	b.n	800379a <_free_r+0x22>
 80037ec:	6820      	ldr	r0, [r4, #0]
 80037ee:	1821      	adds	r1, r4, r0
 80037f0:	428b      	cmp	r3, r1
 80037f2:	bf01      	itttt	eq
 80037f4:	6819      	ldreq	r1, [r3, #0]
 80037f6:	685b      	ldreq	r3, [r3, #4]
 80037f8:	1809      	addeq	r1, r1, r0
 80037fa:	6021      	streq	r1, [r4, #0]
 80037fc:	6063      	str	r3, [r4, #4]
 80037fe:	6054      	str	r4, [r2, #4]
 8003800:	e7cb      	b.n	800379a <_free_r+0x22>
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	2000015c 	.word	0x2000015c

08003808 <sbrk_aligned>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	4e0e      	ldr	r6, [pc, #56]	; (8003844 <sbrk_aligned+0x3c>)
 800380c:	460c      	mov	r4, r1
 800380e:	6831      	ldr	r1, [r6, #0]
 8003810:	4605      	mov	r5, r0
 8003812:	b911      	cbnz	r1, 800381a <sbrk_aligned+0x12>
 8003814:	f000 fb7a 	bl	8003f0c <_sbrk_r>
 8003818:	6030      	str	r0, [r6, #0]
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 fb75 	bl	8003f0c <_sbrk_r>
 8003822:	1c43      	adds	r3, r0, #1
 8003824:	d00a      	beq.n	800383c <sbrk_aligned+0x34>
 8003826:	1cc4      	adds	r4, r0, #3
 8003828:	f024 0403 	bic.w	r4, r4, #3
 800382c:	42a0      	cmp	r0, r4
 800382e:	d007      	beq.n	8003840 <sbrk_aligned+0x38>
 8003830:	1a21      	subs	r1, r4, r0
 8003832:	4628      	mov	r0, r5
 8003834:	f000 fb6a 	bl	8003f0c <_sbrk_r>
 8003838:	3001      	adds	r0, #1
 800383a:	d101      	bne.n	8003840 <sbrk_aligned+0x38>
 800383c:	f04f 34ff 	mov.w	r4, #4294967295
 8003840:	4620      	mov	r0, r4
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	20000160 	.word	0x20000160

08003848 <_malloc_r>:
 8003848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800384c:	1ccd      	adds	r5, r1, #3
 800384e:	f025 0503 	bic.w	r5, r5, #3
 8003852:	3508      	adds	r5, #8
 8003854:	2d0c      	cmp	r5, #12
 8003856:	bf38      	it	cc
 8003858:	250c      	movcc	r5, #12
 800385a:	2d00      	cmp	r5, #0
 800385c:	4607      	mov	r7, r0
 800385e:	db01      	blt.n	8003864 <_malloc_r+0x1c>
 8003860:	42a9      	cmp	r1, r5
 8003862:	d905      	bls.n	8003870 <_malloc_r+0x28>
 8003864:	230c      	movs	r3, #12
 8003866:	2600      	movs	r6, #0
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4630      	mov	r0, r6
 800386c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003870:	4e2e      	ldr	r6, [pc, #184]	; (800392c <_malloc_r+0xe4>)
 8003872:	f000 fc03 	bl	800407c <__malloc_lock>
 8003876:	6833      	ldr	r3, [r6, #0]
 8003878:	461c      	mov	r4, r3
 800387a:	bb34      	cbnz	r4, 80038ca <_malloc_r+0x82>
 800387c:	4629      	mov	r1, r5
 800387e:	4638      	mov	r0, r7
 8003880:	f7ff ffc2 	bl	8003808 <sbrk_aligned>
 8003884:	1c43      	adds	r3, r0, #1
 8003886:	4604      	mov	r4, r0
 8003888:	d14d      	bne.n	8003926 <_malloc_r+0xde>
 800388a:	6834      	ldr	r4, [r6, #0]
 800388c:	4626      	mov	r6, r4
 800388e:	2e00      	cmp	r6, #0
 8003890:	d140      	bne.n	8003914 <_malloc_r+0xcc>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	4631      	mov	r1, r6
 8003896:	4638      	mov	r0, r7
 8003898:	eb04 0803 	add.w	r8, r4, r3
 800389c:	f000 fb36 	bl	8003f0c <_sbrk_r>
 80038a0:	4580      	cmp	r8, r0
 80038a2:	d13a      	bne.n	800391a <_malloc_r+0xd2>
 80038a4:	6821      	ldr	r1, [r4, #0]
 80038a6:	3503      	adds	r5, #3
 80038a8:	1a6d      	subs	r5, r5, r1
 80038aa:	f025 0503 	bic.w	r5, r5, #3
 80038ae:	3508      	adds	r5, #8
 80038b0:	2d0c      	cmp	r5, #12
 80038b2:	bf38      	it	cc
 80038b4:	250c      	movcc	r5, #12
 80038b6:	4638      	mov	r0, r7
 80038b8:	4629      	mov	r1, r5
 80038ba:	f7ff ffa5 	bl	8003808 <sbrk_aligned>
 80038be:	3001      	adds	r0, #1
 80038c0:	d02b      	beq.n	800391a <_malloc_r+0xd2>
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	442b      	add	r3, r5
 80038c6:	6023      	str	r3, [r4, #0]
 80038c8:	e00e      	b.n	80038e8 <_malloc_r+0xa0>
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	1b52      	subs	r2, r2, r5
 80038ce:	d41e      	bmi.n	800390e <_malloc_r+0xc6>
 80038d0:	2a0b      	cmp	r2, #11
 80038d2:	d916      	bls.n	8003902 <_malloc_r+0xba>
 80038d4:	1961      	adds	r1, r4, r5
 80038d6:	42a3      	cmp	r3, r4
 80038d8:	6025      	str	r5, [r4, #0]
 80038da:	bf18      	it	ne
 80038dc:	6059      	strne	r1, [r3, #4]
 80038de:	6863      	ldr	r3, [r4, #4]
 80038e0:	bf08      	it	eq
 80038e2:	6031      	streq	r1, [r6, #0]
 80038e4:	5162      	str	r2, [r4, r5]
 80038e6:	604b      	str	r3, [r1, #4]
 80038e8:	4638      	mov	r0, r7
 80038ea:	f104 060b 	add.w	r6, r4, #11
 80038ee:	f000 fbcb 	bl	8004088 <__malloc_unlock>
 80038f2:	f026 0607 	bic.w	r6, r6, #7
 80038f6:	1d23      	adds	r3, r4, #4
 80038f8:	1af2      	subs	r2, r6, r3
 80038fa:	d0b6      	beq.n	800386a <_malloc_r+0x22>
 80038fc:	1b9b      	subs	r3, r3, r6
 80038fe:	50a3      	str	r3, [r4, r2]
 8003900:	e7b3      	b.n	800386a <_malloc_r+0x22>
 8003902:	6862      	ldr	r2, [r4, #4]
 8003904:	42a3      	cmp	r3, r4
 8003906:	bf0c      	ite	eq
 8003908:	6032      	streq	r2, [r6, #0]
 800390a:	605a      	strne	r2, [r3, #4]
 800390c:	e7ec      	b.n	80038e8 <_malloc_r+0xa0>
 800390e:	4623      	mov	r3, r4
 8003910:	6864      	ldr	r4, [r4, #4]
 8003912:	e7b2      	b.n	800387a <_malloc_r+0x32>
 8003914:	4634      	mov	r4, r6
 8003916:	6876      	ldr	r6, [r6, #4]
 8003918:	e7b9      	b.n	800388e <_malloc_r+0x46>
 800391a:	230c      	movs	r3, #12
 800391c:	4638      	mov	r0, r7
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	f000 fbb2 	bl	8004088 <__malloc_unlock>
 8003924:	e7a1      	b.n	800386a <_malloc_r+0x22>
 8003926:	6025      	str	r5, [r4, #0]
 8003928:	e7de      	b.n	80038e8 <_malloc_r+0xa0>
 800392a:	bf00      	nop
 800392c:	2000015c 	.word	0x2000015c

08003930 <__sfputc_r>:
 8003930:	6893      	ldr	r3, [r2, #8]
 8003932:	b410      	push	{r4}
 8003934:	3b01      	subs	r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	6093      	str	r3, [r2, #8]
 800393a:	da07      	bge.n	800394c <__sfputc_r+0x1c>
 800393c:	6994      	ldr	r4, [r2, #24]
 800393e:	42a3      	cmp	r3, r4
 8003940:	db01      	blt.n	8003946 <__sfputc_r+0x16>
 8003942:	290a      	cmp	r1, #10
 8003944:	d102      	bne.n	800394c <__sfputc_r+0x1c>
 8003946:	bc10      	pop	{r4}
 8003948:	f7ff bc3a 	b.w	80031c0 <__swbuf_r>
 800394c:	6813      	ldr	r3, [r2, #0]
 800394e:	1c58      	adds	r0, r3, #1
 8003950:	6010      	str	r0, [r2, #0]
 8003952:	7019      	strb	r1, [r3, #0]
 8003954:	4608      	mov	r0, r1
 8003956:	bc10      	pop	{r4}
 8003958:	4770      	bx	lr

0800395a <__sfputs_r>:
 800395a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395c:	4606      	mov	r6, r0
 800395e:	460f      	mov	r7, r1
 8003960:	4614      	mov	r4, r2
 8003962:	18d5      	adds	r5, r2, r3
 8003964:	42ac      	cmp	r4, r5
 8003966:	d101      	bne.n	800396c <__sfputs_r+0x12>
 8003968:	2000      	movs	r0, #0
 800396a:	e007      	b.n	800397c <__sfputs_r+0x22>
 800396c:	463a      	mov	r2, r7
 800396e:	4630      	mov	r0, r6
 8003970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003974:	f7ff ffdc 	bl	8003930 <__sfputc_r>
 8003978:	1c43      	adds	r3, r0, #1
 800397a:	d1f3      	bne.n	8003964 <__sfputs_r+0xa>
 800397c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003980 <_vfiprintf_r>:
 8003980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003984:	460d      	mov	r5, r1
 8003986:	4614      	mov	r4, r2
 8003988:	4698      	mov	r8, r3
 800398a:	4606      	mov	r6, r0
 800398c:	b09d      	sub	sp, #116	; 0x74
 800398e:	b118      	cbz	r0, 8003998 <_vfiprintf_r+0x18>
 8003990:	6983      	ldr	r3, [r0, #24]
 8003992:	b90b      	cbnz	r3, 8003998 <_vfiprintf_r+0x18>
 8003994:	f7ff fdea 	bl	800356c <__sinit>
 8003998:	4b89      	ldr	r3, [pc, #548]	; (8003bc0 <_vfiprintf_r+0x240>)
 800399a:	429d      	cmp	r5, r3
 800399c:	d11b      	bne.n	80039d6 <_vfiprintf_r+0x56>
 800399e:	6875      	ldr	r5, [r6, #4]
 80039a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039a2:	07d9      	lsls	r1, r3, #31
 80039a4:	d405      	bmi.n	80039b2 <_vfiprintf_r+0x32>
 80039a6:	89ab      	ldrh	r3, [r5, #12]
 80039a8:	059a      	lsls	r2, r3, #22
 80039aa:	d402      	bmi.n	80039b2 <_vfiprintf_r+0x32>
 80039ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039ae:	f7ff fe7b 	bl	80036a8 <__retarget_lock_acquire_recursive>
 80039b2:	89ab      	ldrh	r3, [r5, #12]
 80039b4:	071b      	lsls	r3, r3, #28
 80039b6:	d501      	bpl.n	80039bc <_vfiprintf_r+0x3c>
 80039b8:	692b      	ldr	r3, [r5, #16]
 80039ba:	b9eb      	cbnz	r3, 80039f8 <_vfiprintf_r+0x78>
 80039bc:	4629      	mov	r1, r5
 80039be:	4630      	mov	r0, r6
 80039c0:	f7ff fc50 	bl	8003264 <__swsetup_r>
 80039c4:	b1c0      	cbz	r0, 80039f8 <_vfiprintf_r+0x78>
 80039c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039c8:	07dc      	lsls	r4, r3, #31
 80039ca:	d50e      	bpl.n	80039ea <_vfiprintf_r+0x6a>
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	b01d      	add	sp, #116	; 0x74
 80039d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d6:	4b7b      	ldr	r3, [pc, #492]	; (8003bc4 <_vfiprintf_r+0x244>)
 80039d8:	429d      	cmp	r5, r3
 80039da:	d101      	bne.n	80039e0 <_vfiprintf_r+0x60>
 80039dc:	68b5      	ldr	r5, [r6, #8]
 80039de:	e7df      	b.n	80039a0 <_vfiprintf_r+0x20>
 80039e0:	4b79      	ldr	r3, [pc, #484]	; (8003bc8 <_vfiprintf_r+0x248>)
 80039e2:	429d      	cmp	r5, r3
 80039e4:	bf08      	it	eq
 80039e6:	68f5      	ldreq	r5, [r6, #12]
 80039e8:	e7da      	b.n	80039a0 <_vfiprintf_r+0x20>
 80039ea:	89ab      	ldrh	r3, [r5, #12]
 80039ec:	0598      	lsls	r0, r3, #22
 80039ee:	d4ed      	bmi.n	80039cc <_vfiprintf_r+0x4c>
 80039f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039f2:	f7ff fe5a 	bl	80036aa <__retarget_lock_release_recursive>
 80039f6:	e7e9      	b.n	80039cc <_vfiprintf_r+0x4c>
 80039f8:	2300      	movs	r3, #0
 80039fa:	9309      	str	r3, [sp, #36]	; 0x24
 80039fc:	2320      	movs	r3, #32
 80039fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a02:	2330      	movs	r3, #48	; 0x30
 8003a04:	f04f 0901 	mov.w	r9, #1
 8003a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003bcc <_vfiprintf_r+0x24c>
 8003a10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a14:	4623      	mov	r3, r4
 8003a16:	469a      	mov	sl, r3
 8003a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a1c:	b10a      	cbz	r2, 8003a22 <_vfiprintf_r+0xa2>
 8003a1e:	2a25      	cmp	r2, #37	; 0x25
 8003a20:	d1f9      	bne.n	8003a16 <_vfiprintf_r+0x96>
 8003a22:	ebba 0b04 	subs.w	fp, sl, r4
 8003a26:	d00b      	beq.n	8003a40 <_vfiprintf_r+0xc0>
 8003a28:	465b      	mov	r3, fp
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	4630      	mov	r0, r6
 8003a30:	f7ff ff93 	bl	800395a <__sfputs_r>
 8003a34:	3001      	adds	r0, #1
 8003a36:	f000 80aa 	beq.w	8003b8e <_vfiprintf_r+0x20e>
 8003a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a3c:	445a      	add	r2, fp
 8003a3e:	9209      	str	r2, [sp, #36]	; 0x24
 8003a40:	f89a 3000 	ldrb.w	r3, [sl]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80a2 	beq.w	8003b8e <_vfiprintf_r+0x20e>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a54:	f10a 0a01 	add.w	sl, sl, #1
 8003a58:	9304      	str	r3, [sp, #16]
 8003a5a:	9307      	str	r3, [sp, #28]
 8003a5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a60:	931a      	str	r3, [sp, #104]	; 0x68
 8003a62:	4654      	mov	r4, sl
 8003a64:	2205      	movs	r2, #5
 8003a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6a:	4858      	ldr	r0, [pc, #352]	; (8003bcc <_vfiprintf_r+0x24c>)
 8003a6c:	f000 faf8 	bl	8004060 <memchr>
 8003a70:	9a04      	ldr	r2, [sp, #16]
 8003a72:	b9d8      	cbnz	r0, 8003aac <_vfiprintf_r+0x12c>
 8003a74:	06d1      	lsls	r1, r2, #27
 8003a76:	bf44      	itt	mi
 8003a78:	2320      	movmi	r3, #32
 8003a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a7e:	0713      	lsls	r3, r2, #28
 8003a80:	bf44      	itt	mi
 8003a82:	232b      	movmi	r3, #43	; 0x2b
 8003a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a88:	f89a 3000 	ldrb.w	r3, [sl]
 8003a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8e:	d015      	beq.n	8003abc <_vfiprintf_r+0x13c>
 8003a90:	4654      	mov	r4, sl
 8003a92:	2000      	movs	r0, #0
 8003a94:	f04f 0c0a 	mov.w	ip, #10
 8003a98:	9a07      	ldr	r2, [sp, #28]
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aa0:	3b30      	subs	r3, #48	; 0x30
 8003aa2:	2b09      	cmp	r3, #9
 8003aa4:	d94e      	bls.n	8003b44 <_vfiprintf_r+0x1c4>
 8003aa6:	b1b0      	cbz	r0, 8003ad6 <_vfiprintf_r+0x156>
 8003aa8:	9207      	str	r2, [sp, #28]
 8003aaa:	e014      	b.n	8003ad6 <_vfiprintf_r+0x156>
 8003aac:	eba0 0308 	sub.w	r3, r0, r8
 8003ab0:	fa09 f303 	lsl.w	r3, r9, r3
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	46a2      	mov	sl, r4
 8003ab8:	9304      	str	r3, [sp, #16]
 8003aba:	e7d2      	b.n	8003a62 <_vfiprintf_r+0xe2>
 8003abc:	9b03      	ldr	r3, [sp, #12]
 8003abe:	1d19      	adds	r1, r3, #4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	9103      	str	r1, [sp, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bfbb      	ittet	lt
 8003ac8:	425b      	neglt	r3, r3
 8003aca:	f042 0202 	orrlt.w	r2, r2, #2
 8003ace:	9307      	strge	r3, [sp, #28]
 8003ad0:	9307      	strlt	r3, [sp, #28]
 8003ad2:	bfb8      	it	lt
 8003ad4:	9204      	strlt	r2, [sp, #16]
 8003ad6:	7823      	ldrb	r3, [r4, #0]
 8003ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8003ada:	d10c      	bne.n	8003af6 <_vfiprintf_r+0x176>
 8003adc:	7863      	ldrb	r3, [r4, #1]
 8003ade:	2b2a      	cmp	r3, #42	; 0x2a
 8003ae0:	d135      	bne.n	8003b4e <_vfiprintf_r+0x1ce>
 8003ae2:	9b03      	ldr	r3, [sp, #12]
 8003ae4:	3402      	adds	r4, #2
 8003ae6:	1d1a      	adds	r2, r3, #4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	9203      	str	r2, [sp, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bfb8      	it	lt
 8003af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003af4:	9305      	str	r3, [sp, #20]
 8003af6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003bd0 <_vfiprintf_r+0x250>
 8003afa:	2203      	movs	r2, #3
 8003afc:	4650      	mov	r0, sl
 8003afe:	7821      	ldrb	r1, [r4, #0]
 8003b00:	f000 faae 	bl	8004060 <memchr>
 8003b04:	b140      	cbz	r0, 8003b18 <_vfiprintf_r+0x198>
 8003b06:	2340      	movs	r3, #64	; 0x40
 8003b08:	eba0 000a 	sub.w	r0, r0, sl
 8003b0c:	fa03 f000 	lsl.w	r0, r3, r0
 8003b10:	9b04      	ldr	r3, [sp, #16]
 8003b12:	3401      	adds	r4, #1
 8003b14:	4303      	orrs	r3, r0
 8003b16:	9304      	str	r3, [sp, #16]
 8003b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b1c:	2206      	movs	r2, #6
 8003b1e:	482d      	ldr	r0, [pc, #180]	; (8003bd4 <_vfiprintf_r+0x254>)
 8003b20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b24:	f000 fa9c 	bl	8004060 <memchr>
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d03f      	beq.n	8003bac <_vfiprintf_r+0x22c>
 8003b2c:	4b2a      	ldr	r3, [pc, #168]	; (8003bd8 <_vfiprintf_r+0x258>)
 8003b2e:	bb1b      	cbnz	r3, 8003b78 <_vfiprintf_r+0x1f8>
 8003b30:	9b03      	ldr	r3, [sp, #12]
 8003b32:	3307      	adds	r3, #7
 8003b34:	f023 0307 	bic.w	r3, r3, #7
 8003b38:	3308      	adds	r3, #8
 8003b3a:	9303      	str	r3, [sp, #12]
 8003b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3e:	443b      	add	r3, r7
 8003b40:	9309      	str	r3, [sp, #36]	; 0x24
 8003b42:	e767      	b.n	8003a14 <_vfiprintf_r+0x94>
 8003b44:	460c      	mov	r4, r1
 8003b46:	2001      	movs	r0, #1
 8003b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b4c:	e7a5      	b.n	8003a9a <_vfiprintf_r+0x11a>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f04f 0c0a 	mov.w	ip, #10
 8003b54:	4619      	mov	r1, r3
 8003b56:	3401      	adds	r4, #1
 8003b58:	9305      	str	r3, [sp, #20]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b60:	3a30      	subs	r2, #48	; 0x30
 8003b62:	2a09      	cmp	r2, #9
 8003b64:	d903      	bls.n	8003b6e <_vfiprintf_r+0x1ee>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0c5      	beq.n	8003af6 <_vfiprintf_r+0x176>
 8003b6a:	9105      	str	r1, [sp, #20]
 8003b6c:	e7c3      	b.n	8003af6 <_vfiprintf_r+0x176>
 8003b6e:	4604      	mov	r4, r0
 8003b70:	2301      	movs	r3, #1
 8003b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b76:	e7f0      	b.n	8003b5a <_vfiprintf_r+0x1da>
 8003b78:	ab03      	add	r3, sp, #12
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	462a      	mov	r2, r5
 8003b7e:	4630      	mov	r0, r6
 8003b80:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <_vfiprintf_r+0x25c>)
 8003b82:	a904      	add	r1, sp, #16
 8003b84:	f3af 8000 	nop.w
 8003b88:	4607      	mov	r7, r0
 8003b8a:	1c78      	adds	r0, r7, #1
 8003b8c:	d1d6      	bne.n	8003b3c <_vfiprintf_r+0x1bc>
 8003b8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b90:	07d9      	lsls	r1, r3, #31
 8003b92:	d405      	bmi.n	8003ba0 <_vfiprintf_r+0x220>
 8003b94:	89ab      	ldrh	r3, [r5, #12]
 8003b96:	059a      	lsls	r2, r3, #22
 8003b98:	d402      	bmi.n	8003ba0 <_vfiprintf_r+0x220>
 8003b9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b9c:	f7ff fd85 	bl	80036aa <__retarget_lock_release_recursive>
 8003ba0:	89ab      	ldrh	r3, [r5, #12]
 8003ba2:	065b      	lsls	r3, r3, #25
 8003ba4:	f53f af12 	bmi.w	80039cc <_vfiprintf_r+0x4c>
 8003ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003baa:	e711      	b.n	80039d0 <_vfiprintf_r+0x50>
 8003bac:	ab03      	add	r3, sp, #12
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	462a      	mov	r2, r5
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <_vfiprintf_r+0x25c>)
 8003bb6:	a904      	add	r1, sp, #16
 8003bb8:	f000 f882 	bl	8003cc0 <_printf_i>
 8003bbc:	e7e4      	b.n	8003b88 <_vfiprintf_r+0x208>
 8003bbe:	bf00      	nop
 8003bc0:	0800421c 	.word	0x0800421c
 8003bc4:	0800423c 	.word	0x0800423c
 8003bc8:	080041fc 	.word	0x080041fc
 8003bcc:	0800425c 	.word	0x0800425c
 8003bd0:	08004262 	.word	0x08004262
 8003bd4:	08004266 	.word	0x08004266
 8003bd8:	00000000 	.word	0x00000000
 8003bdc:	0800395b 	.word	0x0800395b

08003be0 <_printf_common>:
 8003be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be4:	4616      	mov	r6, r2
 8003be6:	4699      	mov	r9, r3
 8003be8:	688a      	ldr	r2, [r1, #8]
 8003bea:	690b      	ldr	r3, [r1, #16]
 8003bec:	4607      	mov	r7, r0
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	bfb8      	it	lt
 8003bf2:	4613      	movlt	r3, r2
 8003bf4:	6033      	str	r3, [r6, #0]
 8003bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c00:	b10a      	cbz	r2, 8003c06 <_printf_common+0x26>
 8003c02:	3301      	adds	r3, #1
 8003c04:	6033      	str	r3, [r6, #0]
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	0699      	lsls	r1, r3, #26
 8003c0a:	bf42      	ittt	mi
 8003c0c:	6833      	ldrmi	r3, [r6, #0]
 8003c0e:	3302      	addmi	r3, #2
 8003c10:	6033      	strmi	r3, [r6, #0]
 8003c12:	6825      	ldr	r5, [r4, #0]
 8003c14:	f015 0506 	ands.w	r5, r5, #6
 8003c18:	d106      	bne.n	8003c28 <_printf_common+0x48>
 8003c1a:	f104 0a19 	add.w	sl, r4, #25
 8003c1e:	68e3      	ldr	r3, [r4, #12]
 8003c20:	6832      	ldr	r2, [r6, #0]
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	42ab      	cmp	r3, r5
 8003c26:	dc28      	bgt.n	8003c7a <_printf_common+0x9a>
 8003c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c2c:	1e13      	subs	r3, r2, #0
 8003c2e:	6822      	ldr	r2, [r4, #0]
 8003c30:	bf18      	it	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	0692      	lsls	r2, r2, #26
 8003c36:	d42d      	bmi.n	8003c94 <_printf_common+0xb4>
 8003c38:	4649      	mov	r1, r9
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c40:	47c0      	blx	r8
 8003c42:	3001      	adds	r0, #1
 8003c44:	d020      	beq.n	8003c88 <_printf_common+0xa8>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	68e5      	ldr	r5, [r4, #12]
 8003c4a:	f003 0306 	and.w	r3, r3, #6
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	bf18      	it	ne
 8003c52:	2500      	movne	r5, #0
 8003c54:	6832      	ldr	r2, [r6, #0]
 8003c56:	f04f 0600 	mov.w	r6, #0
 8003c5a:	68a3      	ldr	r3, [r4, #8]
 8003c5c:	bf08      	it	eq
 8003c5e:	1aad      	subeq	r5, r5, r2
 8003c60:	6922      	ldr	r2, [r4, #16]
 8003c62:	bf08      	it	eq
 8003c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bfc4      	itt	gt
 8003c6c:	1a9b      	subgt	r3, r3, r2
 8003c6e:	18ed      	addgt	r5, r5, r3
 8003c70:	341a      	adds	r4, #26
 8003c72:	42b5      	cmp	r5, r6
 8003c74:	d11a      	bne.n	8003cac <_printf_common+0xcc>
 8003c76:	2000      	movs	r0, #0
 8003c78:	e008      	b.n	8003c8c <_printf_common+0xac>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4652      	mov	r2, sl
 8003c7e:	4649      	mov	r1, r9
 8003c80:	4638      	mov	r0, r7
 8003c82:	47c0      	blx	r8
 8003c84:	3001      	adds	r0, #1
 8003c86:	d103      	bne.n	8003c90 <_printf_common+0xb0>
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c90:	3501      	adds	r5, #1
 8003c92:	e7c4      	b.n	8003c1e <_printf_common+0x3e>
 8003c94:	2030      	movs	r0, #48	; 0x30
 8003c96:	18e1      	adds	r1, r4, r3
 8003c98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ca2:	4422      	add	r2, r4
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003caa:	e7c5      	b.n	8003c38 <_printf_common+0x58>
 8003cac:	2301      	movs	r3, #1
 8003cae:	4622      	mov	r2, r4
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	47c0      	blx	r8
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d0e6      	beq.n	8003c88 <_printf_common+0xa8>
 8003cba:	3601      	adds	r6, #1
 8003cbc:	e7d9      	b.n	8003c72 <_printf_common+0x92>
	...

08003cc0 <_printf_i>:
 8003cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc4:	7e0f      	ldrb	r7, [r1, #24]
 8003cc6:	4691      	mov	r9, r2
 8003cc8:	2f78      	cmp	r7, #120	; 0x78
 8003cca:	4680      	mov	r8, r0
 8003ccc:	460c      	mov	r4, r1
 8003cce:	469a      	mov	sl, r3
 8003cd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cd6:	d807      	bhi.n	8003ce8 <_printf_i+0x28>
 8003cd8:	2f62      	cmp	r7, #98	; 0x62
 8003cda:	d80a      	bhi.n	8003cf2 <_printf_i+0x32>
 8003cdc:	2f00      	cmp	r7, #0
 8003cde:	f000 80d9 	beq.w	8003e94 <_printf_i+0x1d4>
 8003ce2:	2f58      	cmp	r7, #88	; 0x58
 8003ce4:	f000 80a4 	beq.w	8003e30 <_printf_i+0x170>
 8003ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cf0:	e03a      	b.n	8003d68 <_printf_i+0xa8>
 8003cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cf6:	2b15      	cmp	r3, #21
 8003cf8:	d8f6      	bhi.n	8003ce8 <_printf_i+0x28>
 8003cfa:	a101      	add	r1, pc, #4	; (adr r1, 8003d00 <_printf_i+0x40>)
 8003cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d00:	08003d59 	.word	0x08003d59
 8003d04:	08003d6d 	.word	0x08003d6d
 8003d08:	08003ce9 	.word	0x08003ce9
 8003d0c:	08003ce9 	.word	0x08003ce9
 8003d10:	08003ce9 	.word	0x08003ce9
 8003d14:	08003ce9 	.word	0x08003ce9
 8003d18:	08003d6d 	.word	0x08003d6d
 8003d1c:	08003ce9 	.word	0x08003ce9
 8003d20:	08003ce9 	.word	0x08003ce9
 8003d24:	08003ce9 	.word	0x08003ce9
 8003d28:	08003ce9 	.word	0x08003ce9
 8003d2c:	08003e7b 	.word	0x08003e7b
 8003d30:	08003d9d 	.word	0x08003d9d
 8003d34:	08003e5d 	.word	0x08003e5d
 8003d38:	08003ce9 	.word	0x08003ce9
 8003d3c:	08003ce9 	.word	0x08003ce9
 8003d40:	08003e9d 	.word	0x08003e9d
 8003d44:	08003ce9 	.word	0x08003ce9
 8003d48:	08003d9d 	.word	0x08003d9d
 8003d4c:	08003ce9 	.word	0x08003ce9
 8003d50:	08003ce9 	.word	0x08003ce9
 8003d54:	08003e65 	.word	0x08003e65
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	1d1a      	adds	r2, r3, #4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	602a      	str	r2, [r5, #0]
 8003d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0a4      	b.n	8003eb6 <_printf_i+0x1f6>
 8003d6c:	6820      	ldr	r0, [r4, #0]
 8003d6e:	6829      	ldr	r1, [r5, #0]
 8003d70:	0606      	lsls	r6, r0, #24
 8003d72:	f101 0304 	add.w	r3, r1, #4
 8003d76:	d50a      	bpl.n	8003d8e <_printf_i+0xce>
 8003d78:	680e      	ldr	r6, [r1, #0]
 8003d7a:	602b      	str	r3, [r5, #0]
 8003d7c:	2e00      	cmp	r6, #0
 8003d7e:	da03      	bge.n	8003d88 <_printf_i+0xc8>
 8003d80:	232d      	movs	r3, #45	; 0x2d
 8003d82:	4276      	negs	r6, r6
 8003d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d88:	230a      	movs	r3, #10
 8003d8a:	485e      	ldr	r0, [pc, #376]	; (8003f04 <_printf_i+0x244>)
 8003d8c:	e019      	b.n	8003dc2 <_printf_i+0x102>
 8003d8e:	680e      	ldr	r6, [r1, #0]
 8003d90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d94:	602b      	str	r3, [r5, #0]
 8003d96:	bf18      	it	ne
 8003d98:	b236      	sxthne	r6, r6
 8003d9a:	e7ef      	b.n	8003d7c <_printf_i+0xbc>
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	6820      	ldr	r0, [r4, #0]
 8003da0:	1d19      	adds	r1, r3, #4
 8003da2:	6029      	str	r1, [r5, #0]
 8003da4:	0601      	lsls	r1, r0, #24
 8003da6:	d501      	bpl.n	8003dac <_printf_i+0xec>
 8003da8:	681e      	ldr	r6, [r3, #0]
 8003daa:	e002      	b.n	8003db2 <_printf_i+0xf2>
 8003dac:	0646      	lsls	r6, r0, #25
 8003dae:	d5fb      	bpl.n	8003da8 <_printf_i+0xe8>
 8003db0:	881e      	ldrh	r6, [r3, #0]
 8003db2:	2f6f      	cmp	r7, #111	; 0x6f
 8003db4:	bf0c      	ite	eq
 8003db6:	2308      	moveq	r3, #8
 8003db8:	230a      	movne	r3, #10
 8003dba:	4852      	ldr	r0, [pc, #328]	; (8003f04 <_printf_i+0x244>)
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dc2:	6865      	ldr	r5, [r4, #4]
 8003dc4:	2d00      	cmp	r5, #0
 8003dc6:	bfa8      	it	ge
 8003dc8:	6821      	ldrge	r1, [r4, #0]
 8003dca:	60a5      	str	r5, [r4, #8]
 8003dcc:	bfa4      	itt	ge
 8003dce:	f021 0104 	bicge.w	r1, r1, #4
 8003dd2:	6021      	strge	r1, [r4, #0]
 8003dd4:	b90e      	cbnz	r6, 8003dda <_printf_i+0x11a>
 8003dd6:	2d00      	cmp	r5, #0
 8003dd8:	d04d      	beq.n	8003e76 <_printf_i+0x1b6>
 8003dda:	4615      	mov	r5, r2
 8003ddc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003de0:	fb03 6711 	mls	r7, r3, r1, r6
 8003de4:	5dc7      	ldrb	r7, [r0, r7]
 8003de6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dea:	4637      	mov	r7, r6
 8003dec:	42bb      	cmp	r3, r7
 8003dee:	460e      	mov	r6, r1
 8003df0:	d9f4      	bls.n	8003ddc <_printf_i+0x11c>
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d10b      	bne.n	8003e0e <_printf_i+0x14e>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	07de      	lsls	r6, r3, #31
 8003dfa:	d508      	bpl.n	8003e0e <_printf_i+0x14e>
 8003dfc:	6923      	ldr	r3, [r4, #16]
 8003dfe:	6861      	ldr	r1, [r4, #4]
 8003e00:	4299      	cmp	r1, r3
 8003e02:	bfde      	ittt	le
 8003e04:	2330      	movle	r3, #48	; 0x30
 8003e06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e0e:	1b52      	subs	r2, r2, r5
 8003e10:	6122      	str	r2, [r4, #16]
 8003e12:	464b      	mov	r3, r9
 8003e14:	4621      	mov	r1, r4
 8003e16:	4640      	mov	r0, r8
 8003e18:	f8cd a000 	str.w	sl, [sp]
 8003e1c:	aa03      	add	r2, sp, #12
 8003e1e:	f7ff fedf 	bl	8003be0 <_printf_common>
 8003e22:	3001      	adds	r0, #1
 8003e24:	d14c      	bne.n	8003ec0 <_printf_i+0x200>
 8003e26:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2a:	b004      	add	sp, #16
 8003e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e30:	4834      	ldr	r0, [pc, #208]	; (8003f04 <_printf_i+0x244>)
 8003e32:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e36:	6829      	ldr	r1, [r5, #0]
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e3e:	6029      	str	r1, [r5, #0]
 8003e40:	061d      	lsls	r5, r3, #24
 8003e42:	d514      	bpl.n	8003e6e <_printf_i+0x1ae>
 8003e44:	07df      	lsls	r7, r3, #31
 8003e46:	bf44      	itt	mi
 8003e48:	f043 0320 	orrmi.w	r3, r3, #32
 8003e4c:	6023      	strmi	r3, [r4, #0]
 8003e4e:	b91e      	cbnz	r6, 8003e58 <_printf_i+0x198>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	f023 0320 	bic.w	r3, r3, #32
 8003e56:	6023      	str	r3, [r4, #0]
 8003e58:	2310      	movs	r3, #16
 8003e5a:	e7af      	b.n	8003dbc <_printf_i+0xfc>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	f043 0320 	orr.w	r3, r3, #32
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	2378      	movs	r3, #120	; 0x78
 8003e66:	4828      	ldr	r0, [pc, #160]	; (8003f08 <_printf_i+0x248>)
 8003e68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e6c:	e7e3      	b.n	8003e36 <_printf_i+0x176>
 8003e6e:	0659      	lsls	r1, r3, #25
 8003e70:	bf48      	it	mi
 8003e72:	b2b6      	uxthmi	r6, r6
 8003e74:	e7e6      	b.n	8003e44 <_printf_i+0x184>
 8003e76:	4615      	mov	r5, r2
 8003e78:	e7bb      	b.n	8003df2 <_printf_i+0x132>
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	6826      	ldr	r6, [r4, #0]
 8003e7e:	1d18      	adds	r0, r3, #4
 8003e80:	6961      	ldr	r1, [r4, #20]
 8003e82:	6028      	str	r0, [r5, #0]
 8003e84:	0635      	lsls	r5, r6, #24
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	d501      	bpl.n	8003e8e <_printf_i+0x1ce>
 8003e8a:	6019      	str	r1, [r3, #0]
 8003e8c:	e002      	b.n	8003e94 <_printf_i+0x1d4>
 8003e8e:	0670      	lsls	r0, r6, #25
 8003e90:	d5fb      	bpl.n	8003e8a <_printf_i+0x1ca>
 8003e92:	8019      	strh	r1, [r3, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	4615      	mov	r5, r2
 8003e98:	6123      	str	r3, [r4, #16]
 8003e9a:	e7ba      	b.n	8003e12 <_printf_i+0x152>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	1d1a      	adds	r2, r3, #4
 8003ea2:	602a      	str	r2, [r5, #0]
 8003ea4:	681d      	ldr	r5, [r3, #0]
 8003ea6:	6862      	ldr	r2, [r4, #4]
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f000 f8d9 	bl	8004060 <memchr>
 8003eae:	b108      	cbz	r0, 8003eb4 <_printf_i+0x1f4>
 8003eb0:	1b40      	subs	r0, r0, r5
 8003eb2:	6060      	str	r0, [r4, #4]
 8003eb4:	6863      	ldr	r3, [r4, #4]
 8003eb6:	6123      	str	r3, [r4, #16]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ebe:	e7a8      	b.n	8003e12 <_printf_i+0x152>
 8003ec0:	462a      	mov	r2, r5
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	4640      	mov	r0, r8
 8003ec6:	6923      	ldr	r3, [r4, #16]
 8003ec8:	47d0      	blx	sl
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d0ab      	beq.n	8003e26 <_printf_i+0x166>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	079b      	lsls	r3, r3, #30
 8003ed2:	d413      	bmi.n	8003efc <_printf_i+0x23c>
 8003ed4:	68e0      	ldr	r0, [r4, #12]
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	4298      	cmp	r0, r3
 8003eda:	bfb8      	it	lt
 8003edc:	4618      	movlt	r0, r3
 8003ede:	e7a4      	b.n	8003e2a <_printf_i+0x16a>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4632      	mov	r2, r6
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	47d0      	blx	sl
 8003eea:	3001      	adds	r0, #1
 8003eec:	d09b      	beq.n	8003e26 <_printf_i+0x166>
 8003eee:	3501      	adds	r5, #1
 8003ef0:	68e3      	ldr	r3, [r4, #12]
 8003ef2:	9903      	ldr	r1, [sp, #12]
 8003ef4:	1a5b      	subs	r3, r3, r1
 8003ef6:	42ab      	cmp	r3, r5
 8003ef8:	dcf2      	bgt.n	8003ee0 <_printf_i+0x220>
 8003efa:	e7eb      	b.n	8003ed4 <_printf_i+0x214>
 8003efc:	2500      	movs	r5, #0
 8003efe:	f104 0619 	add.w	r6, r4, #25
 8003f02:	e7f5      	b.n	8003ef0 <_printf_i+0x230>
 8003f04:	0800426d 	.word	0x0800426d
 8003f08:	0800427e 	.word	0x0800427e

08003f0c <_sbrk_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	2300      	movs	r3, #0
 8003f10:	4d05      	ldr	r5, [pc, #20]	; (8003f28 <_sbrk_r+0x1c>)
 8003f12:	4604      	mov	r4, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	602b      	str	r3, [r5, #0]
 8003f18:	f7fd f9f6 	bl	8001308 <_sbrk>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_sbrk_r+0x1a>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_sbrk_r+0x1a>
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	20000164 	.word	0x20000164

08003f2c <__sread>:
 8003f2c:	b510      	push	{r4, lr}
 8003f2e:	460c      	mov	r4, r1
 8003f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f34:	f000 f8ae 	bl	8004094 <_read_r>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	bfab      	itete	ge
 8003f3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f40:	181b      	addge	r3, r3, r0
 8003f42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f46:	bfac      	ite	ge
 8003f48:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f4a:	81a3      	strhlt	r3, [r4, #12]
 8003f4c:	bd10      	pop	{r4, pc}

08003f4e <__swrite>:
 8003f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f52:	461f      	mov	r7, r3
 8003f54:	898b      	ldrh	r3, [r1, #12]
 8003f56:	4605      	mov	r5, r0
 8003f58:	05db      	lsls	r3, r3, #23
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	4616      	mov	r6, r2
 8003f5e:	d505      	bpl.n	8003f6c <__swrite+0x1e>
 8003f60:	2302      	movs	r3, #2
 8003f62:	2200      	movs	r2, #0
 8003f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f68:	f000 f868 	bl	800403c <_lseek_r>
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	4632      	mov	r2, r6
 8003f70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f74:	81a3      	strh	r3, [r4, #12]
 8003f76:	4628      	mov	r0, r5
 8003f78:	463b      	mov	r3, r7
 8003f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f82:	f000 b817 	b.w	8003fb4 <_write_r>

08003f86 <__sseek>:
 8003f86:	b510      	push	{r4, lr}
 8003f88:	460c      	mov	r4, r1
 8003f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8e:	f000 f855 	bl	800403c <_lseek_r>
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	bf15      	itete	ne
 8003f98:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fa2:	81a3      	strheq	r3, [r4, #12]
 8003fa4:	bf18      	it	ne
 8003fa6:	81a3      	strhne	r3, [r4, #12]
 8003fa8:	bd10      	pop	{r4, pc}

08003faa <__sclose>:
 8003faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fae:	f000 b813 	b.w	8003fd8 <_close_r>
	...

08003fb4 <_write_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	4608      	mov	r0, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4d05      	ldr	r5, [pc, #20]	; (8003fd4 <_write_r+0x20>)
 8003fc0:	602a      	str	r2, [r5, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f7fd f954 	bl	8001270 <_write>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d102      	bne.n	8003fd2 <_write_r+0x1e>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	b103      	cbz	r3, 8003fd2 <_write_r+0x1e>
 8003fd0:	6023      	str	r3, [r4, #0]
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
 8003fd4:	20000164 	.word	0x20000164

08003fd8 <_close_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	2300      	movs	r3, #0
 8003fdc:	4d05      	ldr	r5, [pc, #20]	; (8003ff4 <_close_r+0x1c>)
 8003fde:	4604      	mov	r4, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	602b      	str	r3, [r5, #0]
 8003fe4:	f7fd f960 	bl	80012a8 <_close>
 8003fe8:	1c43      	adds	r3, r0, #1
 8003fea:	d102      	bne.n	8003ff2 <_close_r+0x1a>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	b103      	cbz	r3, 8003ff2 <_close_r+0x1a>
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	bd38      	pop	{r3, r4, r5, pc}
 8003ff4:	20000164 	.word	0x20000164

08003ff8 <_fstat_r>:
 8003ff8:	b538      	push	{r3, r4, r5, lr}
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	4d06      	ldr	r5, [pc, #24]	; (8004018 <_fstat_r+0x20>)
 8003ffe:	4604      	mov	r4, r0
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	602b      	str	r3, [r5, #0]
 8004006:	f7fd f95a 	bl	80012be <_fstat>
 800400a:	1c43      	adds	r3, r0, #1
 800400c:	d102      	bne.n	8004014 <_fstat_r+0x1c>
 800400e:	682b      	ldr	r3, [r5, #0]
 8004010:	b103      	cbz	r3, 8004014 <_fstat_r+0x1c>
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	bd38      	pop	{r3, r4, r5, pc}
 8004016:	bf00      	nop
 8004018:	20000164 	.word	0x20000164

0800401c <_isatty_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	2300      	movs	r3, #0
 8004020:	4d05      	ldr	r5, [pc, #20]	; (8004038 <_isatty_r+0x1c>)
 8004022:	4604      	mov	r4, r0
 8004024:	4608      	mov	r0, r1
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	f7fd f958 	bl	80012dc <_isatty>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d102      	bne.n	8004036 <_isatty_r+0x1a>
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	b103      	cbz	r3, 8004036 <_isatty_r+0x1a>
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	20000164 	.word	0x20000164

0800403c <_lseek_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4604      	mov	r4, r0
 8004040:	4608      	mov	r0, r1
 8004042:	4611      	mov	r1, r2
 8004044:	2200      	movs	r2, #0
 8004046:	4d05      	ldr	r5, [pc, #20]	; (800405c <_lseek_r+0x20>)
 8004048:	602a      	str	r2, [r5, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	f7fd f950 	bl	80012f0 <_lseek>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_lseek_r+0x1e>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	b103      	cbz	r3, 800405a <_lseek_r+0x1e>
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	20000164 	.word	0x20000164

08004060 <memchr>:
 8004060:	4603      	mov	r3, r0
 8004062:	b510      	push	{r4, lr}
 8004064:	b2c9      	uxtb	r1, r1
 8004066:	4402      	add	r2, r0
 8004068:	4293      	cmp	r3, r2
 800406a:	4618      	mov	r0, r3
 800406c:	d101      	bne.n	8004072 <memchr+0x12>
 800406e:	2000      	movs	r0, #0
 8004070:	e003      	b.n	800407a <memchr+0x1a>
 8004072:	7804      	ldrb	r4, [r0, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	428c      	cmp	r4, r1
 8004078:	d1f6      	bne.n	8004068 <memchr+0x8>
 800407a:	bd10      	pop	{r4, pc}

0800407c <__malloc_lock>:
 800407c:	4801      	ldr	r0, [pc, #4]	; (8004084 <__malloc_lock+0x8>)
 800407e:	f7ff bb13 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 8004082:	bf00      	nop
 8004084:	20000158 	.word	0x20000158

08004088 <__malloc_unlock>:
 8004088:	4801      	ldr	r0, [pc, #4]	; (8004090 <__malloc_unlock+0x8>)
 800408a:	f7ff bb0e 	b.w	80036aa <__retarget_lock_release_recursive>
 800408e:	bf00      	nop
 8004090:	20000158 	.word	0x20000158

08004094 <_read_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4604      	mov	r4, r0
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	2200      	movs	r2, #0
 800409e:	4d05      	ldr	r5, [pc, #20]	; (80040b4 <_read_r+0x20>)
 80040a0:	602a      	str	r2, [r5, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f7fd f8c7 	bl	8001236 <_read>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_read_r+0x1e>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_read_r+0x1e>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	20000164 	.word	0x20000164

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <_fini>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr
