
Dryer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f1c  08004f1c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004f1c  08004f1c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f1c  08004f1c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000074  08004f98  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08004f98  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdab  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002447  00000000  00000000  0002be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  0002e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  0002f080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001950d  00000000  00000000  0002fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8bc  00000000  00000000  00049265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c167  00000000  00000000  00058b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4c88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  000e4cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c84 	.word	0x08004c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004c84 	.word	0x08004c84

0800014c <input_init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void input_init(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b31      	ldr	r3, [pc, #196]	; (8000218 <input_init+0xcc>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a30      	ldr	r2, [pc, #192]	; (8000218 <input_init+0xcc>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b2e      	ldr	r3, [pc, #184]	; (8000218 <input_init+0xcc>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b2b      	ldr	r3, [pc, #172]	; (8000218 <input_init+0xcc>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a2a      	ldr	r2, [pc, #168]	; (8000218 <input_init+0xcc>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b28      	ldr	r3, [pc, #160]	; (8000218 <input_init+0xcc>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000182:	4b25      	ldr	r3, [pc, #148]	; (8000218 <input_init+0xcc>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a24      	ldr	r2, [pc, #144]	; (8000218 <input_init+0xcc>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b22      	ldr	r3, [pc, #136]	; (8000218 <input_init+0xcc>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0310 	and.w	r3, r3, #16
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = { 0 };
 800019a:	f107 0310 	add.w	r3, r7, #16
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = DOOR_SW;
 80001a8:	2301      	movs	r3, #1
 80001aa:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001ac:	4b1b      	ldr	r3, [pc, #108]	; (800021c <input_init+0xd0>)
 80001ae:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 80001b0:	2301      	movs	r3, #1
 80001b2:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001b4:	2302      	movs	r3, #2
 80001b6:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001b8:	f107 0310 	add.w	r3, r7, #16
 80001bc:	4619      	mov	r1, r3
 80001be:	4818      	ldr	r0, [pc, #96]	; (8000220 <input_init+0xd4>)
 80001c0:	f001 ff7a 	bl	80020b8 <HAL_GPIO_Init>

	GPIOx.Pin = LIMIT_SW | HEATER_SW | SEL_ROT_SW;
 80001c4:	230e      	movs	r3, #14
 80001c6:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_INPUT;
 80001c8:	2300      	movs	r3, #0
 80001ca:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 80001cc:	2301      	movs	r3, #1
 80001ce:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001d0:	2302      	movs	r3, #2
 80001d2:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	4619      	mov	r1, r3
 80001da:	4811      	ldr	r0, [pc, #68]	; (8000220 <input_init+0xd4>)
 80001dc:	f001 ff6c 	bl	80020b8 <HAL_GPIO_Init>

	GPIOx.Pin = LED;
 80001e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e4:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80001e6:	2301      	movs	r3, #1
 80001e8:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_NOPULL;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOC, &GPIOx);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	480a      	ldr	r0, [pc, #40]	; (8000224 <input_init+0xd8>)
 80001fa:	f001 ff5d 	bl	80020b8 <HAL_GPIO_Init>

	//HAL_GPIO_WritePin(GPIOC, LED, LOW);

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2100      	movs	r1, #0
 8000202:	2006      	movs	r0, #6
 8000204:	f001 ff21 	bl	800204a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000208:	2006      	movs	r0, #6
 800020a:	f001 ff3a 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 800020e:	bf00      	nop
 8000210:	3720      	adds	r7, #32
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000
 800021c:	10310000 	.word	0x10310000
 8000220:	40010800 	.word	0x40010800
 8000224:	40011000 	.word	0x40011000

08000228 <is_door_open>:

uint8_t is_door_open(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 800022c:	f001 fe08 	bl	8001e40 <HAL_GetTick>
 8000230:	4602      	mov	r2, r0
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <is_door_open+0x44>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	2b05      	cmp	r3, #5
 800023a:	d912      	bls.n	8000262 <is_door_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == GPIO_PIN_RESET) {
 800023c:	2101      	movs	r1, #1
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <is_door_open+0x48>)
 8000240:	f002 f8be 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d103      	bne.n	8000252 <is_door_open+0x2a>
			last_state = 0;
 800024a:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <is_door_open+0x4c>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
 8000250:	e002      	b.n	8000258 <is_door_open+0x30>
		} else {
			last_state = 1;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <is_door_open+0x4c>)
 8000254:	2201      	movs	r2, #1
 8000256:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000258:	f001 fdf2 	bl	8001e40 <HAL_GetTick>
 800025c:	4603      	mov	r3, r0
 800025e:	4a03      	ldr	r2, [pc, #12]	; (800026c <is_door_open+0x44>)
 8000260:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 8000262:	4b04      	ldr	r3, [pc, #16]	; (8000274 <is_door_open+0x4c>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	b2db      	uxtb	r3, r3
}
 8000268:	4618      	mov	r0, r3
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000090 	.word	0x20000090
 8000270:	40010800 	.word	0x40010800
 8000274:	20000094 	.word	0x20000094

08000278 <is_coil_open>:

uint8_t is_coil_open(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 800027c:	f001 fde0 	bl	8001e40 <HAL_GetTick>
 8000280:	4602      	mov	r2, r0
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <is_coil_open+0x44>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	1ad3      	subs	r3, r2, r3
 8000288:	2b05      	cmp	r3, #5
 800028a:	d912      	bls.n	80002b2 <is_coil_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, HEATER_SW) == GPIO_PIN_RESET) {
 800028c:	2108      	movs	r1, #8
 800028e:	480c      	ldr	r0, [pc, #48]	; (80002c0 <is_coil_open+0x48>)
 8000290:	f002 f896 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d103      	bne.n	80002a2 <is_coil_open+0x2a>
			last_state = 0;
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <is_coil_open+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
 80002a0:	e002      	b.n	80002a8 <is_coil_open+0x30>
		} else {
			last_state = 1;
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <is_coil_open+0x4c>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80002a8:	f001 fdca 	bl	8001e40 <HAL_GetTick>
 80002ac:	4603      	mov	r3, r0
 80002ae:	4a03      	ldr	r2, [pc, #12]	; (80002bc <is_coil_open+0x44>)
 80002b0:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <is_coil_open+0x4c>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b2db      	uxtb	r3, r3
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000098 	.word	0x20000098
 80002c0:	40010800 	.word	0x40010800
 80002c4:	2000009c 	.word	0x2000009c

080002c8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(DOOR_SW);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f002 f8a7 	bl	8002420 <HAL_GPIO_EXTI_IRQHandler>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <keypad_init>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

void keypad_init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <keypad_init+0x54>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a12      	ldr	r2, [pc, #72]	; (800032c <keypad_init+0x54>)
 80002e4:	f043 0308 	orr.w	r3, r3, #8
 80002e8:	6193      	str	r3, [r2, #24]
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <keypad_init+0x54>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	f003 0308 	and.w	r3, r3, #8
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = LOW_KEY | MED_KEY | HIGH_KEY | FN_KEY;
 8000304:	f640 4303 	movw	r3, #3075	; 0xc03
 8000308:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_INPUT;
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 800030e:	2301      	movs	r3, #1
 8000310:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 8000312:	2303      	movs	r3, #3
 8000314:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(KEYPAD_PORT, &GPIOx);
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	4619      	mov	r1, r3
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <keypad_init+0x58>)
 800031e:	f001 fecb 	bl	80020b8 <HAL_GPIO_Init>
}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	40010c00 	.word	0x40010c00

08000334 <scan_keypad>:

uint8_t scan_keypad(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 8000338:	f000 f832 	bl	80003a0 <is_low_key_pressed>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d004      	beq.n	800034c <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 8000342:	4813      	ldr	r0, [pc, #76]	; (8000390 <scan_keypad+0x5c>)
 8000344:	f003 fb3e 	bl	80039c4 <puts>
		return LOW_KEY_PRESSED;
 8000348:	2301      	movs	r3, #1
 800034a:	e01e      	b.n	800038a <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 800034c:	f000 f860 	bl	8000410 <is_med_key_pressed>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d004      	beq.n	8000360 <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 8000356:	480f      	ldr	r0, [pc, #60]	; (8000394 <scan_keypad+0x60>)
 8000358:	f003 fb34 	bl	80039c4 <puts>
		return MED_KEY_PRESSED;
 800035c:	2302      	movs	r3, #2
 800035e:	e014      	b.n	800038a <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 8000360:	f000 f890 	bl	8000484 <is_high_key_pressed>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d004      	beq.n	8000374 <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 800036a:	480b      	ldr	r0, [pc, #44]	; (8000398 <scan_keypad+0x64>)
 800036c:	f003 fb2a 	bl	80039c4 <puts>
		return HIGH_KEY_PRESSED;
 8000370:	2303      	movs	r3, #3
 8000372:	e00a      	b.n	800038a <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 8000374:	f000 f8c0 	bl	80004f8 <is_fn_key_pressed>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d004      	beq.n	8000388 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 800037e:	4807      	ldr	r0, [pc, #28]	; (800039c <scan_keypad+0x68>)
 8000380:	f003 fb20 	bl	80039c4 <puts>
		return FN_KEY_PRESSED;
 8000384:	2304      	movs	r3, #4
 8000386:	e000      	b.n	800038a <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 8000388:	2300      	movs	r3, #0
}
 800038a:	4618      	mov	r0, r3
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	08004c9c 	.word	0x08004c9c
 8000394:	08004cb0 	.word	0x08004cb0
 8000398:	08004cc4 	.word	0x08004cc4
 800039c:	08004cd8 	.word	0x08004cd8

080003a0 <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 80003a4:	f001 fd4c 	bl	8001e40 <HAL_GetTick>
 80003a8:	4602      	mov	r2, r0
 80003aa:	4b16      	ldr	r3, [pc, #88]	; (8000404 <is_low_key_pressed+0x64>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	1ad3      	subs	r3, r2, r3
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d923      	bls.n	80003fc <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 80003b4:	2102      	movs	r1, #2
 80003b6:	4814      	ldr	r0, [pc, #80]	; (8000408 <is_low_key_pressed+0x68>)
 80003b8:	f002 f802 	bl	80023c0 <HAL_GPIO_ReadPin>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d114      	bne.n	80003ec <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <is_low_key_pressed+0x6c>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d112      	bne.n	80003f2 <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 80003cc:	2102      	movs	r1, #2
 80003ce:	480e      	ldr	r0, [pc, #56]	; (8000408 <is_low_key_pressed+0x68>)
 80003d0:	f001 fff6 	bl	80023c0 <HAL_GPIO_ReadPin>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d104      	bne.n	80003e4 <is_low_key_pressed+0x44>
				{
					last_state = 0;
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <is_low_key_pressed+0x6c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
					return 1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	e00c      	b.n	80003fe <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <is_low_key_pressed+0x6c>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	e002      	b.n	80003f2 <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <is_low_key_pressed+0x6c>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80003f2:	f001 fd25 	bl	8001e40 <HAL_GetTick>
 80003f6:	4603      	mov	r3, r0
 80003f8:	4a02      	ldr	r2, [pc, #8]	; (8000404 <is_low_key_pressed+0x64>)
 80003fa:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200000a0 	.word	0x200000a0
 8000408:	40010c00 	.word	0x40010c00
 800040c:	200000a4 	.word	0x200000a4

08000410 <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 8000414:	f001 fd14 	bl	8001e40 <HAL_GetTick>
 8000418:	4602      	mov	r2, r0
 800041a:	4b17      	ldr	r3, [pc, #92]	; (8000478 <is_med_key_pressed+0x68>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	1ad3      	subs	r3, r2, r3
 8000420:	2b05      	cmp	r3, #5
 8000422:	d925      	bls.n	8000470 <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 8000424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000428:	4814      	ldr	r0, [pc, #80]	; (800047c <is_med_key_pressed+0x6c>)
 800042a:	f001 ffc9 	bl	80023c0 <HAL_GPIO_ReadPin>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d115      	bne.n	8000460 <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <is_med_key_pressed+0x70>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	b2db      	uxtb	r3, r3
 800043a:	2b01      	cmp	r3, #1
 800043c:	d113      	bne.n	8000466 <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 800043e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000442:	480e      	ldr	r0, [pc, #56]	; (800047c <is_med_key_pressed+0x6c>)
 8000444:	f001 ffbc 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d104      	bne.n	8000458 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <is_med_key_pressed+0x70>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
					return 1;
 8000454:	2301      	movs	r3, #1
 8000456:	e00c      	b.n	8000472 <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <is_med_key_pressed+0x70>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
 800045e:	e002      	b.n	8000466 <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <is_med_key_pressed+0x70>)
 8000462:	2201      	movs	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000466:	f001 fceb 	bl	8001e40 <HAL_GetTick>
 800046a:	4603      	mov	r3, r0
 800046c:	4a02      	ldr	r2, [pc, #8]	; (8000478 <is_med_key_pressed+0x68>)
 800046e:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200000a8 	.word	0x200000a8
 800047c:	40010c00 	.word	0x40010c00
 8000480:	200000ac 	.word	0x200000ac

08000484 <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 8000488:	f001 fcda 	bl	8001e40 <HAL_GetTick>
 800048c:	4602      	mov	r2, r0
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <is_high_key_pressed+0x68>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	1ad3      	subs	r3, r2, r3
 8000494:	2b05      	cmp	r3, #5
 8000496:	d925      	bls.n	80004e4 <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 8000498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049c:	4814      	ldr	r0, [pc, #80]	; (80004f0 <is_high_key_pressed+0x6c>)
 800049e:	f001 ff8f 	bl	80023c0 <HAL_GPIO_ReadPin>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d115      	bne.n	80004d4 <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <is_high_key_pressed+0x70>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d113      	bne.n	80004da <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 80004b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b6:	480e      	ldr	r0, [pc, #56]	; (80004f0 <is_high_key_pressed+0x6c>)
 80004b8:	f001 ff82 	bl	80023c0 <HAL_GPIO_ReadPin>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d104      	bne.n	80004cc <is_high_key_pressed+0x48>
				{
					last_state = 0;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <is_high_key_pressed+0x70>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
					return 1;
 80004c8:	2301      	movs	r3, #1
 80004ca:	e00c      	b.n	80004e6 <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <is_high_key_pressed+0x70>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	e002      	b.n	80004da <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <is_high_key_pressed+0x70>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80004da:	f001 fcb1 	bl	8001e40 <HAL_GetTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a02      	ldr	r2, [pc, #8]	; (80004ec <is_high_key_pressed+0x68>)
 80004e2:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000b0 	.word	0x200000b0
 80004f0:	40010c00 	.word	0x40010c00
 80004f4:	200000b4 	.word	0x200000b4

080004f8 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 80004fc:	f001 fca0 	bl	8001e40 <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <is_fn_key_pressed+0x64>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	2b05      	cmp	r3, #5
 800050a:	d923      	bls.n	8000554 <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 800050c:	2101      	movs	r1, #1
 800050e:	4814      	ldr	r0, [pc, #80]	; (8000560 <is_fn_key_pressed+0x68>)
 8000510:	f001 ff56 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d114      	bne.n	8000544 <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <is_fn_key_pressed+0x6c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2b01      	cmp	r3, #1
 8000522:	d112      	bne.n	800054a <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8000524:	2101      	movs	r1, #1
 8000526:	480e      	ldr	r0, [pc, #56]	; (8000560 <is_fn_key_pressed+0x68>)
 8000528:	f001 ff4a 	bl	80023c0 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d104      	bne.n	800053c <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <is_fn_key_pressed+0x6c>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
					return 1;
 8000538:	2301      	movs	r3, #1
 800053a:	e00c      	b.n	8000556 <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <is_fn_key_pressed+0x6c>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	e002      	b.n	800054a <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <is_fn_key_pressed+0x6c>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800054a:	f001 fc79 	bl	8001e40 <HAL_GetTick>
 800054e:	4603      	mov	r3, r0
 8000550:	4a02      	ldr	r2, [pc, #8]	; (800055c <is_fn_key_pressed+0x64>)
 8000552:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000b8 	.word	0x200000b8
 8000560:	40010c00 	.word	0x40010c00
 8000564:	200000bc 	.word	0x200000bc

08000568 <lcd_gpio_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_gpio_init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
	__HAL_RCC_AFIO_CLK_ENABLE();
 800056e:	4b47      	ldr	r3, [pc, #284]	; (800068c <lcd_gpio_init+0x124>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a46      	ldr	r2, [pc, #280]	; (800068c <lcd_gpio_init+0x124>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b44      	ldr	r3, [pc, #272]	; (800068c <lcd_gpio_init+0x124>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
	__HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000586:	4b42      	ldr	r3, [pc, #264]	; (8000690 <lcd_gpio_init+0x128>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	627b      	str	r3, [r7, #36]	; 0x24
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
 8000594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
 800059c:	4a3c      	ldr	r2, [pc, #240]	; (8000690 <lcd_gpio_init+0x128>)
 800059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a0:	6053      	str	r3, [r2, #4]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a2:	4b3b      	ldr	r3, [pc, #236]	; (8000690 <lcd_gpio_init+0x128>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	623b      	str	r3, [r7, #32]
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ae:	623b      	str	r3, [r7, #32]
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005b6:	623b      	str	r3, [r7, #32]
 80005b8:	4a35      	ldr	r2, [pc, #212]	; (8000690 <lcd_gpio_init+0x128>)
 80005ba:	6a3b      	ldr	r3, [r7, #32]
 80005bc:	6053      	str	r3, [r2, #4]

	//__HAL_AFIO_REMAP_SWJ_DISABLE();

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <lcd_gpio_init+0x124>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a32      	ldr	r2, [pc, #200]	; (800068c <lcd_gpio_init+0x124>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b30      	ldr	r3, [pc, #192]	; (800068c <lcd_gpio_init+0x124>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b2d      	ldr	r3, [pc, #180]	; (800068c <lcd_gpio_init+0x124>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a2c      	ldr	r2, [pc, #176]	; (800068c <lcd_gpio_init+0x124>)
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b2a      	ldr	r3, [pc, #168]	; (800068c <lcd_gpio_init+0x124>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0308 	and.w	r3, r3, #8
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000602:	4824      	ldr	r0, [pc, #144]	; (8000694 <lcd_gpio_init+0x12c>)
 8000604:	f001 fef3 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060e:	4821      	ldr	r0, [pc, #132]	; (8000694 <lcd_gpio_init+0x12c>)
 8000610:	f001 feed 	bl	80023ee <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_RS | LCD_PIN_EN;
 8000614:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000618:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 800061e:	2302      	movs	r3, #2
 8000620:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2302      	movs	r3, #2
 8000624:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_CTRL, &GPIOx);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	4819      	ldr	r0, [pc, #100]	; (8000694 <lcd_gpio_init+0x12c>)
 800062e:	f001 fd43 	bl	80020b8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	21f8      	movs	r1, #248	; 0xf8
 8000636:	4817      	ldr	r0, [pc, #92]	; (8000694 <lcd_gpio_init+0x12c>)
 8000638:	f001 fed9 	bl	80023ee <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4;
 800063c:	23f8      	movs	r3, #248	; 0xf8
 800063e:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2302      	movs	r3, #2
 800064a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D0_4, &GPIOx);
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	4619      	mov	r1, r3
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <lcd_gpio_init+0x12c>)
 8000654:	f001 fd30 	bl	80020b8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800065e:	480e      	ldr	r0, [pc, #56]	; (8000698 <lcd_gpio_init+0x130>)
 8000660:	f001 fec5 	bl	80023ee <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7;
 8000664:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8000668:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 800066e:	2302      	movs	r3, #2
 8000670:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2302      	movs	r3, #2
 8000674:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D5_7, &GPIOx);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	4806      	ldr	r0, [pc, #24]	; (8000698 <lcd_gpio_init+0x130>)
 800067e:	f001 fd1b 	bl	80020b8 <HAL_GPIO_Init>

}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	40010000 	.word	0x40010000
 8000694:	40010c00 	.word	0x40010c00
 8000698:	40010800 	.word	0x40010800

0800069c <lcd_init>:

void lcd_init(uint8_t fourbitmode)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d003      	beq.n	80006b4 <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <lcd_init+0x28>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 80006b2:	e002      	b.n	80006ba <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <lcd_init+0x28>)
 80006b6:	2210      	movs	r2, #16
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	200000bd 	.word	0x200000bd

080006c8 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
 80006d2:	460b      	mov	r3, r1
 80006d4:	71bb      	strb	r3, [r7, #6]
 80006d6:	4613      	mov	r3, r2
 80006d8:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d906      	bls.n	80006ee <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <lcd_begin+0xdc>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <lcd_begin+0xdc>)
 80006ec:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 80006ee:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <lcd_begin+0xe0>)
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 80006f4:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <lcd_begin+0xe4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 80006fa:	797b      	ldrb	r3, [r7, #5]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d009      	beq.n	8000714 <lcd_begin+0x4c>
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d106      	bne.n	8000714 <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <lcd_begin+0xdc>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <lcd_begin+0xdc>)
 8000712:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000718:	f001 fb9c 	bl	8001e54 <HAL_Delay>
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS | LCD_PIN_EN, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000722:	4823      	ldr	r0, [pc, #140]	; (80007b0 <lcd_begin+0xe8>)
 8000724:	f001 fe63 	bl	80023ee <HAL_GPIO_WritePin>
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <lcd_begin+0xdc>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	f043 0320 	orr.w	r3, r3, #32
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f902 	bl	800093c <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 8000738:	200a      	movs	r0, #10
 800073a:	f001 fb8b 	bl	8001e54 <HAL_Delay>

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <lcd_begin+0xdc>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	f043 0320 	orr.w	r3, r3, #32
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f8f7 	bl	800093c <lcd_send_cmd>
	    HAL_Delay(1);
 800074e:	2001      	movs	r0, #1
 8000750:	f001 fb80 	bl	8001e54 <HAL_Delay>

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <lcd_begin+0xdc>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f8ec 	bl	800093c <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <lcd_begin+0xdc>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	f043 0320 	orr.w	r3, r3, #32
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f8e4 	bl	800093c <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <lcd_begin+0xec>)
 8000776:	2204      	movs	r2, #4
 8000778:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f000 f828 	bl	80007d0 <lcd_display>

	// clear it off
	lcd_clear();
 8000780:	f000 f8f2 	bl	8000968 <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <lcd_begin+0xf0>)
 8000786:	2202      	movs	r2, #2
 8000788:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <lcd_begin+0xf0>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f8d1 	bl	800093c <lcd_send_cmd>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000bd 	.word	0x200000bd
 80007a8:	200000c0 	.word	0x200000c0
 80007ac:	200000c1 	.word	0x200000c1
 80007b0:	40010c00 	.word	0x40010c00
 80007b4:	200000be 	.word	0x200000be
 80007b8:	200000bf 	.word	0x200000bf

080007bc <lcd_home>:

void lcd_home(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
 80007c0:	2002      	movs	r0, #2
 80007c2:	f000 f8bb 	bl	800093c <lcd_send_cmd>
	HAL_Delay(2); // this command takes a long time!
 80007c6:	2002      	movs	r0, #2
 80007c8:	f001 fb44 	bl	8001e54 <HAL_Delay>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <lcd_display>:

void lcd_display(uint8_t state)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	if(state)
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00f      	beq.n	8000800 <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <lcd_display+0x58>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <lcd_display+0x58>)
 80007ec:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <lcd_display+0x58>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f89f 	bl	800093c <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 80007fe:	e00e      	b.n	800081e <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <lcd_display+0x58>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f023 0304 	bic.w	r3, r3, #4
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <lcd_display+0x58>)
 800080c:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <lcd_display+0x58>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f88f 	bl	800093c <lcd_send_cmd>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000be 	.word	0x200000be

0800082c <lcd_enable>:

void lcd_enable(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <lcd_enable+0x40>)
 8000838:	f001 fdd9 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f001 fb09 	bl	8001e54 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <lcd_enable+0x40>)
 800084a:	f001 fdd0 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_Delay(1); // enable pulse must be >450ns
 800084e:	2001      	movs	r0, #1
 8000850:	f001 fb00 	bl	8001e54 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <lcd_enable+0x40>)
 800085c:	f001 fdc7 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_Delay(1); // commands need > 37us to settle
 8000860:	2001      	movs	r0, #1
 8000862:	f001 faf7 	bl	8001e54 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40010c00 	.word	0x40010c00

08000870 <write_8bit>:

void write_8bit(uint8_t value)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D7, (value >> 7) & 0x01);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	09db      	lsrs	r3, r3, #7
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000886:	482b      	ldr	r0, [pc, #172]	; (8000934 <write_8bit+0xc4>)
 8000888:	f001 fdb1 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D6, (value >> 6) & 0x01);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	099b      	lsrs	r3, r3, #6
 8000890:	b2db      	uxtb	r3, r3
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089e:	4825      	ldr	r0, [pc, #148]	; (8000934 <write_8bit+0xc4>)
 80008a0:	f001 fda5 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5, (value >> 5) & 0x01);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b6:	481f      	ldr	r0, [pc, #124]	; (8000934 <write_8bit+0xc4>)
 80008b8:	f001 fd99 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D4, (value >> 4) & 0x01);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	091b      	lsrs	r3, r3, #4
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	2108      	movs	r1, #8
 80008cc:	481a      	ldr	r0, [pc, #104]	; (8000938 <write_8bit+0xc8>)
 80008ce:	f001 fd8e 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D3, (value >> 3) & 0x01);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	2110      	movs	r1, #16
 80008e2:	4815      	ldr	r0, [pc, #84]	; (8000938 <write_8bit+0xc8>)
 80008e4:	f001 fd83 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D2, (value >> 2) & 0x01);
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	2120      	movs	r1, #32
 80008f8:	480f      	ldr	r0, [pc, #60]	; (8000938 <write_8bit+0xc8>)
 80008fa:	f001 fd78 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D1, (value >> 1) & 0x01);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <write_8bit+0xc8>)
 8000910:	f001 fd6d 	bl	80023ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0, (value >> 0) & 0x01);
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	b2db      	uxtb	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <write_8bit+0xc8>)
 8000922:	f001 fd64 	bl	80023ee <HAL_GPIO_WritePin>

	lcd_enable();
 8000926:	f7ff ff81 	bl	800082c <lcd_enable>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010800 	.word	0x40010800
 8000938:	40010c00 	.word	0x40010c00

0800093c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <lcd_send_cmd+0x28>)
 800094e:	f001 fd4e 	bl	80023ee <HAL_GPIO_WritePin>
	write_8bit(cmd);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff8b 	bl	8000870 <write_8bit>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010c00 	.word	0x40010c00

08000968 <lcd_clear>:

void lcd_clear(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff ffe5 	bl	800093c <lcd_send_cmd>
	HAL_Delay(2);
 8000972:	2002      	movs	r0, #2
 8000974:	f001 fa6e 	bl	8001e54 <HAL_Delay>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <lcd_send_data+0x28>)
 800098e:	f001 fd2e 	bl	80023ee <HAL_GPIO_WritePin>
	write_8bit(data);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff6b 	bl	8000870 <write_8bit>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010c00 	.word	0x40010c00

080009a8 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ffe1 	bl	800097c <lcd_send_data>
		str++;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3301      	adds	r3, #1
 80009be:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f3      	bne.n	80009b0 <lcd_print+0x8>
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <lcd_set_cursor+0x58>)
 80009e6:	f107 0408 	add.w	r4, r7, #8
 80009ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _numlines) {
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <lcd_set_cursor+0x5c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	79ba      	ldrb	r2, [r7, #6]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d903      	bls.n	8000a02 <lcd_set_cursor+0x2e>
		row = _numlines - 1; // we count rows starting w/0
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <lcd_set_cursor+0x5c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	71bb      	strb	r3, [r7, #6]
		}
	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	3318      	adds	r3, #24
 8000a08:	443b      	add	r3, r7
 8000a0a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4413      	add	r3, r2
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff8d 	bl	800093c <lcd_send_cmd>
}
 8000a22:	bf00      	nop
 8000a24:	371c      	adds	r7, #28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08004ce8 	.word	0x08004ce8
 8000a30:	200000c0 	.word	0x200000c0

08000a34 <lcd_update>:
void mode_level_page(void);
void limit_sw_err_page(void);
void complete_page(void);

void lcd_update(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	switch(cur_page){
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <lcd_update+0x5c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b07      	cmp	r3, #7
 8000a3e:	d825      	bhi.n	8000a8c <lcd_update+0x58>
 8000a40:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <lcd_update+0x14>)
 8000a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a46:	bf00      	nop
 8000a48:	08000a69 	.word	0x08000a69
 8000a4c:	08000a6f 	.word	0x08000a6f
 8000a50:	08000a6f 	.word	0x08000a6f
 8000a54:	08000a6f 	.word	0x08000a6f
 8000a58:	08000a75 	.word	0x08000a75
 8000a5c:	08000a7b 	.word	0x08000a7b
 8000a60:	08000a81 	.word	0x08000a81
 8000a64:	08000a87 	.word	0x08000a87
	case INIT_PAGE:
		welcome_page();
 8000a68:	f000 f814 	bl	8000a94 <welcome_page>
		break;
 8000a6c:	e00e      	b.n	8000a8c <lcd_update+0x58>
	case LOW_LEVEL_PAGE:
	case MED_LEVEL_PAGE:
	case HIGH_LEVEL_PAGE:
		mode_level_page();
 8000a6e:	f000 f8eb 	bl	8000c48 <mode_level_page>
		break;
 8000a72:	e00b      	b.n	8000a8c <lcd_update+0x58>
	case COMPLETE_PAGE:
		complete_page();
 8000a74:	f000 f8be 	bl	8000bf4 <complete_page>
		break;
 8000a78:	e008      	b.n	8000a8c <lcd_update+0x58>
	case DOOR_OPEN_PAGE:
		door_open_page();
 8000a7a:	f000 f83d 	bl	8000af8 <door_open_page>
		break;
 8000a7e:	e005      	b.n	8000a8c <lcd_update+0x58>
	case LIMIT_SW_ERR_PAGE:
		limit_sw_err_page();
 8000a80:	f000 f88e 	bl	8000ba0 <limit_sw_err_page>
		break;
 8000a84:	e002      	b.n	8000a8c <lcd_update+0x58>
	case HEATER_COIL_PAGE:
		heater_coil_page();
 8000a86:	f000 f861 	bl	8000b4c <heater_coil_page>
		break;
 8000a8a:	bf00      	nop
	}

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000012c 	.word	0x2000012c

08000a94 <welcome_page>:

void welcome_page(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <welcome_page+0x50>)
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <welcome_page+0x54>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d006      	beq.n	8000ab2 <welcome_page+0x1e>
	{
		lcd_clear();
 8000aa4:	f7ff ff60 	bl	8000968 <lcd_clear>
		last_page = cur_page;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <welcome_page+0x54>)
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <welcome_page+0x50>)
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e001      	b.n	8000ab6 <welcome_page+0x22>
	}
	else{
		lcd_home();
 8000ab2:	f7ff fe83 	bl	80007bc <lcd_home>
	}
	
	lcd_set_cursor(6, 0);
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2006      	movs	r0, #6
 8000aba:	f7ff ff8b 	bl	80009d4 <lcd_set_cursor>
	lcd_print("WELCOME!");
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <welcome_page+0x58>)
 8000ac0:	f7ff ff72 	bl	80009a8 <lcd_print>
	lcd_set_cursor(3,2);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f7ff ff84 	bl	80009d4 <lcd_set_cursor>
	lcd_print("Select a mode");
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <welcome_page+0x5c>)
 8000ace:	f7ff ff6b 	bl	80009a8 <lcd_print>
	lcd_set_cursor(3,3);
 8000ad2:	2103      	movs	r1, #3
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f7ff ff7d 	bl	80009d4 <lcd_set_cursor>
	lcd_print("to start dryer");
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <welcome_page+0x60>)
 8000adc:	f7ff ff64 	bl	80009a8 <lcd_print>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000012d 	.word	0x2000012d
 8000ae8:	2000012c 	.word	0x2000012c
 8000aec:	08004cf8 	.word	0x08004cf8
 8000af0:	08004d04 	.word	0x08004d04
 8000af4:	08004d14 	.word	0x08004d14

08000af8 <door_open_page>:

void door_open_page(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <door_open_page+0x44>)
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <door_open_page+0x48>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d006      	beq.n	8000b16 <door_open_page+0x1e>
	{
		lcd_clear();
 8000b08:	f7ff ff2e 	bl	8000968 <lcd_clear>
		last_page = cur_page;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <door_open_page+0x48>)
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <door_open_page+0x44>)
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	e001      	b.n	8000b1a <door_open_page+0x22>
	}
	else{
		lcd_home();
 8000b16:	f7ff fe51 	bl	80007bc <lcd_home>
	}

	lcd_set_cursor(6, 1);
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	2006      	movs	r0, #6
 8000b1e:	f7ff ff59 	bl	80009d4 <lcd_set_cursor>
	lcd_print("DOOR");
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <door_open_page+0x4c>)
 8000b24:	f7ff ff40 	bl	80009a8 <lcd_print>
	lcd_set_cursor(6,2);
 8000b28:	2102      	movs	r1, #2
 8000b2a:	2006      	movs	r0, #6
 8000b2c:	f7ff ff52 	bl	80009d4 <lcd_set_cursor>
	lcd_print("OPEN");
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <door_open_page+0x50>)
 8000b32:	f7ff ff39 	bl	80009a8 <lcd_print>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000012d 	.word	0x2000012d
 8000b40:	2000012c 	.word	0x2000012c
 8000b44:	08004d24 	.word	0x08004d24
 8000b48:	08004d2c 	.word	0x08004d2c

08000b4c <heater_coil_page>:

void heater_coil_page(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <heater_coil_page+0x44>)
 8000b52:	781a      	ldrb	r2, [r3, #0]
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <heater_coil_page+0x48>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d006      	beq.n	8000b6a <heater_coil_page+0x1e>
	{
		lcd_clear();
 8000b5c:	f7ff ff04 	bl	8000968 <lcd_clear>
		last_page = cur_page;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <heater_coil_page+0x48>)
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <heater_coil_page+0x44>)
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e001      	b.n	8000b6e <heater_coil_page+0x22>
	}
	else{
		lcd_home();
 8000b6a:	f7ff fe27 	bl	80007bc <lcd_home>
	}

	lcd_set_cursor(5, 1);
 8000b6e:	2101      	movs	r1, #1
 8000b70:	2005      	movs	r0, #5
 8000b72:	f7ff ff2f 	bl	80009d4 <lcd_set_cursor>
	lcd_print("HEATER");
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <heater_coil_page+0x4c>)
 8000b78:	f7ff ff16 	bl	80009a8 <lcd_print>
	lcd_set_cursor(5,2);
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	2005      	movs	r0, #5
 8000b80:	f7ff ff28 	bl	80009d4 <lcd_set_cursor>
	lcd_print("ERROR");
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <heater_coil_page+0x50>)
 8000b86:	f7ff ff0f 	bl	80009a8 <lcd_print>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000012d 	.word	0x2000012d
 8000b94:	2000012c 	.word	0x2000012c
 8000b98:	08004d34 	.word	0x08004d34
 8000b9c:	08004d3c 	.word	0x08004d3c

08000ba0 <limit_sw_err_page>:

void limit_sw_err_page(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <limit_sw_err_page+0x44>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <limit_sw_err_page+0x48>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d006      	beq.n	8000bbe <limit_sw_err_page+0x1e>
	{
		lcd_clear();
 8000bb0:	f7ff feda 	bl	8000968 <lcd_clear>
		last_page = cur_page;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <limit_sw_err_page+0x48>)
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <limit_sw_err_page+0x44>)
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	e001      	b.n	8000bc2 <limit_sw_err_page+0x22>
	}
	else{
		lcd_home();
 8000bbe:	f7ff fdfd 	bl	80007bc <lcd_home>
	}

	lcd_set_cursor(5, 0);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f7ff ff05 	bl	80009d4 <lcd_set_cursor>
	lcd_print("ERROR");
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <limit_sw_err_page+0x4c>)
 8000bcc:	f7ff feec 	bl	80009a8 <lcd_print>
	lcd_set_cursor(2, 2);
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff fefe 	bl	80009d4 <lcd_set_cursor>
	lcd_print("AIR");
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <limit_sw_err_page+0x50>)
 8000bda:	f7ff fee5 	bl	80009a8 <lcd_print>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000012d 	.word	0x2000012d
 8000be8:	2000012c 	.word	0x2000012c
 8000bec:	08004d3c 	.word	0x08004d3c
 8000bf0:	08004d44 	.word	0x08004d44

08000bf4 <complete_page>:

void complete_page(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <complete_page+0x44>)
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <complete_page+0x48>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d006      	beq.n	8000c12 <complete_page+0x1e>
	{
		lcd_clear();
 8000c04:	f7ff feb0 	bl	8000968 <lcd_clear>
		last_page = cur_page;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <complete_page+0x48>)
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <complete_page+0x44>)
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e001      	b.n	8000c16 <complete_page+0x22>
	}
	else{
		lcd_home();
 8000c12:	f7ff fdd3 	bl	80007bc <lcd_home>
	}

	lcd_set_cursor(4, 0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f7ff fedb 	bl	80009d4 <lcd_set_cursor>
	lcd_print("PROCESS");
 8000c1e:	4808      	ldr	r0, [pc, #32]	; (8000c40 <complete_page+0x4c>)
 8000c20:	f7ff fec2 	bl	80009a8 <lcd_print>
	lcd_set_cursor(0, 2);
 8000c24:	2102      	movs	r1, #2
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fed4 	bl	80009d4 <lcd_set_cursor>
	lcd_print("COMPLETE");
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <complete_page+0x50>)
 8000c2e:	f7ff febb 	bl	80009a8 <lcd_print>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000012d 	.word	0x2000012d
 8000c3c:	2000012c 	.word	0x2000012c
 8000c40:	08004d48 	.word	0x08004d48
 8000c44:	08004d50 	.word	0x08004d50

08000c48 <mode_level_page>:

void mode_level_page(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	static uint16_t a = 0,b = 0;
	if(last_page!=cur_page)
 8000c4c:	4b4c      	ldr	r3, [pc, #304]	; (8000d80 <mode_level_page+0x138>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b4c      	ldr	r3, [pc, #304]	; (8000d84 <mode_level_page+0x13c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d006      	beq.n	8000c66 <mode_level_page+0x1e>
	{
		lcd_clear();
 8000c58:	f7ff fe86 	bl	8000968 <lcd_clear>
		last_page = cur_page;
 8000c5c:	4b49      	ldr	r3, [pc, #292]	; (8000d84 <mode_level_page+0x13c>)
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	4b47      	ldr	r3, [pc, #284]	; (8000d80 <mode_level_page+0x138>)
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e001      	b.n	8000c6a <mode_level_page+0x22>
	}
	else lcd_home();
 8000c66:	f7ff fda9 	bl	80007bc <lcd_home>
	a = dryer.heatTime % 60;
 8000c6a:	4b47      	ldr	r3, [pc, #284]	; (8000d88 <mode_level_page+0x140>)
 8000c6c:	885a      	ldrh	r2, [r3, #2]
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <mode_level_page+0x144>)
 8000c70:	fba3 1302 	umull	r1, r3, r3, r2
 8000c74:	0959      	lsrs	r1, r3, #5
 8000c76:	460b      	mov	r3, r1
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	1a5b      	subs	r3, r3, r1
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <mode_level_page+0x148>)
 8000c84:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 8000c86:	4b40      	ldr	r3, [pc, #256]	; (8000d88 <mode_level_page+0x140>)
 8000c88:	885b      	ldrh	r3, [r3, #2]
 8000c8a:	4a40      	ldr	r2, [pc, #256]	; (8000d8c <mode_level_page+0x144>)
 8000c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c90:	095b      	lsrs	r3, r3, #5
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <mode_level_page+0x14c>)
 8000c96:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"h=%02d:%02d",b,a);
 8000c98:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <mode_level_page+0x14c>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	; (8000d90 <mode_level_page+0x148>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	493d      	ldr	r1, [pc, #244]	; (8000d98 <mode_level_page+0x150>)
 8000ca4:	483d      	ldr	r0, [pc, #244]	; (8000d9c <mode_level_page+0x154>)
 8000ca6:	f002 fe95 	bl	80039d4 <siprintf>
	lcd_set_cursor(0, 0);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fe91 	bl	80009d4 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000cb2:	483a      	ldr	r0, [pc, #232]	; (8000d9c <mode_level_page+0x154>)
 8000cb4:	f7ff fe78 	bl	80009a8 <lcd_print>

	a = dryer.coolTime % 60;
 8000cb8:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <mode_level_page+0x140>)
 8000cba:	889a      	ldrh	r2, [r3, #4]
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <mode_level_page+0x144>)
 8000cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8000cc2:	0959      	lsrs	r1, r3, #5
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <mode_level_page+0x148>)
 8000cd2:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <mode_level_page+0x140>)
 8000cd6:	889b      	ldrh	r3, [r3, #4]
 8000cd8:	4a2c      	ldr	r2, [pc, #176]	; (8000d8c <mode_level_page+0x144>)
 8000cda:	fba2 2303 	umull	r2, r3, r2, r3
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <mode_level_page+0x14c>)
 8000ce4:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"c=%02d:%02d",b,a);
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <mode_level_page+0x14c>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <mode_level_page+0x148>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	492b      	ldr	r1, [pc, #172]	; (8000da0 <mode_level_page+0x158>)
 8000cf2:	482a      	ldr	r0, [pc, #168]	; (8000d9c <mode_level_page+0x154>)
 8000cf4:	f002 fe6e 	bl	80039d4 <siprintf>
	lcd_set_cursor(13, 0);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	200d      	movs	r0, #13
 8000cfc:	f7ff fe6a 	bl	80009d4 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d00:	4826      	ldr	r0, [pc, #152]	; (8000d9c <mode_level_page+0x154>)
 8000d02:	f7ff fe51 	bl	80009a8 <lcd_print>

	if(dryer.mode == LOW_LEVEL)sprintf(lcd_buf,"LEVEL: LOW");
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <mode_level_page+0x140>)
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d104      	bne.n	8000d18 <mode_level_page+0xd0>
 8000d0e:	4925      	ldr	r1, [pc, #148]	; (8000da4 <mode_level_page+0x15c>)
 8000d10:	4822      	ldr	r0, [pc, #136]	; (8000d9c <mode_level_page+0x154>)
 8000d12:	f002 fe5f 	bl	80039d4 <siprintf>
 8000d16:	e010      	b.n	8000d3a <mode_level_page+0xf2>
	else if(dryer.mode == MED_LEVEL)sprintf(lcd_buf,"LEVEL: MEDIUM");
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <mode_level_page+0x140>)
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d104      	bne.n	8000d2a <mode_level_page+0xe2>
 8000d20:	4921      	ldr	r1, [pc, #132]	; (8000da8 <mode_level_page+0x160>)
 8000d22:	481e      	ldr	r0, [pc, #120]	; (8000d9c <mode_level_page+0x154>)
 8000d24:	f002 fe56 	bl	80039d4 <siprintf>
 8000d28:	e007      	b.n	8000d3a <mode_level_page+0xf2>
	else if(dryer.mode == HIGH_LEVEL)sprintf(lcd_buf,"LEVEL: HIGH");
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <mode_level_page+0x140>)
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d103      	bne.n	8000d3a <mode_level_page+0xf2>
 8000d32:	491e      	ldr	r1, [pc, #120]	; (8000dac <mode_level_page+0x164>)
 8000d34:	4819      	ldr	r0, [pc, #100]	; (8000d9c <mode_level_page+0x154>)
 8000d36:	f002 fe4d 	bl	80039d4 <siprintf>
	else;

	lcd_set_cursor(5, 1);
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	2005      	movs	r0, #5
 8000d3e:	f7ff fe49 	bl	80009d4 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d42:	4816      	ldr	r0, [pc, #88]	; (8000d9c <mode_level_page+0x154>)
 8000d44:	f7ff fe30 	bl	80009a8 <lcd_print>

	sprintf(lcd_buf,"Set:%02dC",dryer.setTemp);
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <mode_level_page+0x140>)
 8000d4a:	799b      	ldrb	r3, [r3, #6]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4918      	ldr	r1, [pc, #96]	; (8000db0 <mode_level_page+0x168>)
 8000d50:	4812      	ldr	r0, [pc, #72]	; (8000d9c <mode_level_page+0x154>)
 8000d52:	f002 fe3f 	bl	80039d4 <siprintf>
	lcd_set_cursor(0, 3);
 8000d56:	2103      	movs	r1, #3
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fe3b 	bl	80009d4 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d5e:	480f      	ldr	r0, [pc, #60]	; (8000d9c <mode_level_page+0x154>)
 8000d60:	f7ff fe22 	bl	80009a8 <lcd_print>

	sprintf(lcd_buf,"Cur:ERR");
 8000d64:	4913      	ldr	r1, [pc, #76]	; (8000db4 <mode_level_page+0x16c>)
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <mode_level_page+0x154>)
 8000d68:	f002 fe34 	bl	80039d4 <siprintf>
	lcd_set_cursor(13, 3);
 8000d6c:	2103      	movs	r1, #3
 8000d6e:	200d      	movs	r0, #13
 8000d70:	f7ff fe30 	bl	80009d4 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <mode_level_page+0x154>)
 8000d76:	f7ff fe17 	bl	80009a8 <lcd_print>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000012d 	.word	0x2000012d
 8000d84:	2000012c 	.word	0x2000012c
 8000d88:	20000118 	.word	0x20000118
 8000d8c:	88888889 	.word	0x88888889
 8000d90:	20000114 	.word	0x20000114
 8000d94:	20000116 	.word	0x20000116
 8000d98:	08004d5c 	.word	0x08004d5c
 8000d9c:	200000c4 	.word	0x200000c4
 8000da0:	08004d68 	.word	0x08004d68
 8000da4:	08004d74 	.word	0x08004d74
 8000da8:	08004d80 	.word	0x08004d80
 8000dac:	08004d90 	.word	0x08004d90
 8000db0:	08004d9c 	.word	0x08004d9c
 8000db4:	08004da8 	.word	0x08004da8

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4906      	ldr	r1, [pc, #24]	; (8000dec <__NVIC_EnableIRQ+0x34>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db12      	blt.n	8000e28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	490a      	ldr	r1, [pc, #40]	; (8000e34 <__NVIC_DisableIRQ+0x44>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	3320      	adds	r3, #32
 8000e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1c:	f3bf 8f4f 	dsb	sy
}
 8000e20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e22:	f3bf 8f6f 	isb	sy
}
 8000e26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 8000e40:	1d39      	adds	r1, r7, #4
 8000e42:	230a      	movs	r3, #10
 8000e44:	2201      	movs	r2, #1
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <__io_putchar+0x20>)
 8000e48:	f002 fb99 	bl	800357e <HAL_UART_Transmit>
	return ch;
 8000e4c:	687b      	ldr	r3, [r7, #4]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000017c 	.word	0x2000017c

08000e5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e60:	f000 ff96 	bl	8001d90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e64:	f000 fc46 	bl	80016f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_USART1_UART_Init();
 8000e68:	f000 fef6 	bl	8001c58 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	input_init();
 8000e6c:	f7ff f96e 	bl	800014c <input_init>
	output_init();
 8000e70:	f000 fd34 	bl	80018dc <output_init>
	keypad_init();
 8000e74:	f7ff fa30 	bl	80002d8 <keypad_init>
	timer_init();
 8000e78:	f000 fe8c 	bl	8001b94 <timer_init>

	lcd_gpio_init();
 8000e7c:	f7ff fb74 	bl	8000568 <lcd_gpio_init>
	lcd_init(0);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff fc0b 	bl	800069c <lcd_init>
	lcd_begin(16, 4, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2104      	movs	r1, #4
 8000e8a:	2010      	movs	r0, #16
 8000e8c:	f7ff fc1c 	bl	80006c8 <lcd_begin>

	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 8000e90:	489b      	ldr	r0, [pc, #620]	; (8001100 <main+0x2a4>)
 8000e92:	f002 fd97 	bl	80039c4 <puts>
	dryer.state = INIT;
 8000e96:	4b9b      	ldr	r3, [pc, #620]	; (8001104 <main+0x2a8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8000e9c:	4b99      	ldr	r3, [pc, #612]	; (8001104 <main+0x2a8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	705a      	strb	r2, [r3, #1]
	dryer.setTemp = 40U;
 8000ea2:	4b98      	ldr	r3, [pc, #608]	; (8001104 <main+0x2a8>)
 8000ea4:	2228      	movs	r2, #40	; 0x28
 8000ea6:	719a      	strb	r2, [r3, #6]

	if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == HIGH) {
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4897      	ldr	r0, [pc, #604]	; (8001108 <main+0x2ac>)
 8000eac:	f001 fa88 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <main+0x6c>
		door_open_flag = 1U;
 8000eb6:	4b95      	ldr	r3, [pc, #596]	; (800110c <main+0x2b0>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8000ebc:	4b94      	ldr	r3, [pc, #592]	; (8001110 <main+0x2b4>)
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	701a      	strb	r2, [r3, #0]
		lcd_update_flag = 1U;
 8000ec2:	4b94      	ldr	r3, [pc, #592]	; (8001114 <main+0x2b8>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
	}

	lcd_update();
 8000ec8:	f7ff fdb4 	bl	8000a34 <lcd_update>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		if (is_door_open() && (!door_open_flag)) {
 8000ecc:	f7ff f9ac 	bl	8000228 <is_door_open>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d009      	beq.n	8000eea <main+0x8e>
 8000ed6:	4b8d      	ldr	r3, [pc, #564]	; (800110c <main+0x2b0>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d105      	bne.n	8000eea <main+0x8e>
			door_open_evt = 1U;
 8000ede:	4b8e      	ldr	r3, [pc, #568]	; (8001118 <main+0x2bc>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
			door_open_flag = 1U;
 8000ee4:	4b89      	ldr	r3, [pc, #548]	; (800110c <main+0x2b0>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
		}

		if (door_open_evt) {
 8000eea:	4b8b      	ldr	r3, [pc, #556]	; (8001118 <main+0x2bc>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 8082 	beq.w	8000ff8 <main+0x19c>
			static volatile uint8_t temp_pin_state = 0U;

			temp_pin_state = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4884      	ldr	r0, [pc, #528]	; (8001108 <main+0x2ac>)
 8000ef8:	f001 fa62 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b86      	ldr	r3, [pc, #536]	; (800111c <main+0x2c0>)
 8000f02:	701a      	strb	r2, [r3, #0]
			//printf("Pin: %d\r\n",temp_pin_state);

			if (temp_pin_state == HIGH) {
 8000f04:	4b85      	ldr	r3, [pc, #532]	; (800111c <main+0x2c0>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d13d      	bne.n	8000f8a <main+0x12e>

				door_open_flag = 1U;
 8000f0e:	4b7f      	ldr	r3, [pc, #508]	; (800110c <main+0x2b0>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8000f14:	4b82      	ldr	r3, [pc, #520]	; (8001120 <main+0x2c4>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
				cur_page = DOOR_OPEN_PAGE;
 8000f1a:	4b7d      	ldr	r3, [pc, #500]	; (8001110 <main+0x2b4>)
 8000f1c:	2205      	movs	r2, #5
 8000f1e:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8000f20:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <main+0x2b8>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8000f26:	4b77      	ldr	r3, [pc, #476]	; (8001104 <main+0x2a8>)
 8000f28:	2203      	movs	r2, #3
 8000f2a:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f32:	487c      	ldr	r0, [pc, #496]	; (8001124 <main+0x2c8>)
 8000f34:	f001 fa5b 	bl	80023ee <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3e:	4872      	ldr	r0, [pc, #456]	; (8001108 <main+0x2ac>)
 8000f40:	f001 fa55 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	4877      	ldr	r0, [pc, #476]	; (8001128 <main+0x2cc>)
 8000f4c:	f001 fa4f 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f56:	4874      	ldr	r0, [pc, #464]	; (8001128 <main+0x2cc>)
 8000f58:	f001 fa49 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f62:	4871      	ldr	r0, [pc, #452]	; (8001128 <main+0x2cc>)
 8000f64:	f001 fa43 	bl	80023ee <HAL_GPIO_WritePin>

				if (dryer.state == COMPLETE) {
 8000f68:	4b66      	ldr	r3, [pc, #408]	; (8001104 <main+0x2a8>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d140      	bne.n	8000ff2 <main+0x196>
					//beep off
					timer_stop_evt = 1U;
 8000f70:	4b6b      	ldr	r3, [pc, #428]	; (8001120 <main+0x2c4>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
					dryer.beepTime = 0U;
 8000f76:	4b63      	ldr	r3, [pc, #396]	; (8001104 <main+0x2a8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	71da      	strb	r2, [r3, #7]
					dryer.state = INIT;
 8000f7c:	4b61      	ldr	r3, [pc, #388]	; (8001104 <main+0x2a8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8000f82:	4b60      	ldr	r3, [pc, #384]	; (8001104 <main+0x2a8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	705a      	strb	r2, [r3, #1]
 8000f88:	e033      	b.n	8000ff2 <main+0x196>
				}

				//stop

			} else {
				switch (dryer.mode) {
 8000f8a:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <main+0x2a8>)
 8000f8c:	785b      	ldrb	r3, [r3, #1]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d826      	bhi.n	8000fe0 <main+0x184>
 8000f92:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <main+0x13c>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08000fa9 	.word	0x08000fa9
 8000f9c:	08000fb7 	.word	0x08000fb7
 8000fa0:	08000fc5 	.word	0x08000fc5
 8000fa4:	08000fd3 	.word	0x08000fd3
				case NO_MODE:
					cur_page = INIT_PAGE;
 8000fa8:	4b59      	ldr	r3, [pc, #356]	; (8001110 <main+0x2b4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8000fae:	4b55      	ldr	r3, [pc, #340]	; (8001104 <main+0x2a8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
					break;
 8000fb4:	e014      	b.n	8000fe0 <main+0x184>
				case LOW_LEVEL:
					cur_page = LOW_LEVEL_PAGE;
 8000fb6:	4b56      	ldr	r3, [pc, #344]	; (8001110 <main+0x2b4>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8000fbc:	4b51      	ldr	r3, [pc, #324]	; (8001104 <main+0x2a8>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
					break;
 8000fc2:	e00d      	b.n	8000fe0 <main+0x184>
				case MED_LEVEL:
					cur_page = MED_LEVEL_PAGE;
 8000fc4:	4b52      	ldr	r3, [pc, #328]	; (8001110 <main+0x2b4>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8000fca:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <main+0x2a8>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
					break;
 8000fd0:	e006      	b.n	8000fe0 <main+0x184>
				case HIGH_LEVEL:
					cur_page = HIGH_LEVEL_PAGE;
 8000fd2:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <main+0x2b4>)
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8000fd8:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <main+0x2a8>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
					break;
 8000fde:	bf00      	nop
				}
				timer_start_evt = 1U;
 8000fe0:	4b52      	ldr	r3, [pc, #328]	; (800112c <main+0x2d0>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <main+0x2b8>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
				door_open_flag = 0U;
 8000fec:	4b47      	ldr	r3, [pc, #284]	; (800110c <main+0x2b0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
			}
			door_open_evt = 0U;
 8000ff2:	4b49      	ldr	r3, [pc, #292]	; (8001118 <main+0x2bc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
		}

		if (!door_open_flag && dryer.state != COMPLETE) {
 8000ff8:	4b44      	ldr	r3, [pc, #272]	; (800110c <main+0x2b0>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d16a      	bne.n	80010d6 <main+0x27a>
 8001000:	4b40      	ldr	r3, [pc, #256]	; (8001104 <main+0x2a8>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d066      	beq.n	80010d6 <main+0x27a>

			if (is_coil_open()) {
 8001008:	f7ff f936 	bl	8000278 <is_coil_open>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d02d      	beq.n	800106e <main+0x212>

				coil_open_flag = 1U;
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <main+0x2d4>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001018:	4b41      	ldr	r3, [pc, #260]	; (8001120 <main+0x2c4>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
				cur_page = HEATER_COIL_PAGE;
 800101e:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <main+0x2b4>)
 8001020:	2207      	movs	r2, #7
 8001022:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001024:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <main+0x2b8>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 800102a:	4b36      	ldr	r3, [pc, #216]	; (8001104 <main+0x2a8>)
 800102c:	2203      	movs	r2, #3
 800102e:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001036:	483b      	ldr	r0, [pc, #236]	; (8001124 <main+0x2c8>)
 8001038:	f001 f9d9 	bl	80023ee <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001042:	4831      	ldr	r0, [pc, #196]	; (8001108 <main+0x2ac>)
 8001044:	f001 f9d3 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	4836      	ldr	r0, [pc, #216]	; (8001128 <main+0x2cc>)
 8001050:	f001 f9cd 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105a:	4833      	ldr	r0, [pc, #204]	; (8001128 <main+0x2cc>)
 800105c:	f001 f9c7 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001066:	4830      	ldr	r0, [pc, #192]	; (8001128 <main+0x2cc>)
 8001068:	f001 f9c1 	bl	80023ee <HAL_GPIO_WritePin>
 800106c:	e033      	b.n	80010d6 <main+0x27a>

				//stop

			} else {
				switch (dryer.mode) {
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <main+0x2a8>)
 8001070:	785b      	ldrb	r3, [r3, #1]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d826      	bhi.n	80010c4 <main+0x268>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <main+0x220>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	0800108d 	.word	0x0800108d
 8001080:	0800109b 	.word	0x0800109b
 8001084:	080010a9 	.word	0x080010a9
 8001088:	080010b7 	.word	0x080010b7
				case NO_MODE:
					cur_page = INIT_PAGE;
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <main+0x2b4>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <main+0x2a8>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
					break;
 8001098:	e014      	b.n	80010c4 <main+0x268>
				case LOW_LEVEL:
					cur_page = LOW_LEVEL_PAGE;
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <main+0x2b4>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <main+0x2a8>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
					break;
 80010a6:	e00d      	b.n	80010c4 <main+0x268>
				case MED_LEVEL:
					cur_page = MED_LEVEL_PAGE;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <main+0x2b4>)
 80010aa:	2202      	movs	r2, #2
 80010ac:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <main+0x2a8>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
					break;
 80010b4:	e006      	b.n	80010c4 <main+0x268>
				case HIGH_LEVEL:
					cur_page = HIGH_LEVEL_PAGE;
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <main+0x2b4>)
 80010b8:	2203      	movs	r2, #3
 80010ba:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <main+0x2a8>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
					break;
 80010c2:	bf00      	nop
				}
				timer_start_evt = 1U;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <main+0x2d0>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <main+0x2b8>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
				coil_open_flag = 0U;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <main+0x2d4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
		}

		/**********************************************************************************************************
		 **************************************** LCD SCREEN UPDATE RUTINE ****************************************
		 **********************************************************************************************************/
		if (lcd_update_flag) {
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <main+0x2b8>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <main+0x28c>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 80010de:	f7ff fca9 	bl	8000a34 <lcd_update>
			lcd_update_flag = 0U;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <main+0x2b8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* TIMER EVENT RUTINE ************************************************
		 ***************************************************************************************************************/
		if (timer_stop_evt) {
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <main+0x2c4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d023      	beq.n	8001138 <main+0x2dc>
			//printf("Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 80010f0:	4810      	ldr	r0, [pc, #64]	; (8001134 <main+0x2d8>)
 80010f2:	f001 fe71 	bl	8002dd8 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <main+0x2c4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	e02a      	b.n	8001154 <main+0x2f8>
 80010fe:	bf00      	nop
 8001100:	08004db0 	.word	0x08004db0
 8001104:	20000118 	.word	0x20000118
 8001108:	40010800 	.word	0x40010800
 800110c:	20000122 	.word	0x20000122
 8001110:	2000012c 	.word	0x2000012c
 8001114:	2000012e 	.word	0x2000012e
 8001118:	20000123 	.word	0x20000123
 800111c:	2000012f 	.word	0x2000012f
 8001120:	20000125 	.word	0x20000125
 8001124:	40011000 	.word	0x40011000
 8001128:	40010c00 	.word	0x40010c00
 800112c:	20000126 	.word	0x20000126
 8001130:	20000124 	.word	0x20000124
 8001134:	20000134 	.word	0x20000134

		} else if ((timer_start_evt) && (dryer.state == START)) {
 8001138:	4b93      	ldr	r3, [pc, #588]	; (8001388 <main+0x52c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d009      	beq.n	8001154 <main+0x2f8>
 8001140:	4b92      	ldr	r3, [pc, #584]	; (800138c <main+0x530>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d105      	bne.n	8001154 <main+0x2f8>
			HAL_TIM_Base_Start_IT(&htim4);
 8001148:	4891      	ldr	r0, [pc, #580]	; (8001390 <main+0x534>)
 800114a:	f001 fdf3 	bl	8002d34 <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 800114e:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <main+0x52c>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]

		/***************************************************************************************************************
		 ********************************************* KEYBOARD SCANNING ***********************************************
		 ********************************** INCREMENT DECREMENT OF TIMER AND MODE SET **********************************
		 ***************************************************************************************************************/
		if (!door_open_flag && !coil_open_flag) {
 8001154:	4b8f      	ldr	r3, [pc, #572]	; (8001394 <main+0x538>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f040 819b 	bne.w	8001494 <main+0x638>
 800115e:	4b8e      	ldr	r3, [pc, #568]	; (8001398 <main+0x53c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 8196 	bne.w	8001494 <main+0x638>
//			HAL_GPIO_WritePin(GPIOC, LED, LOW);
//
//		} else {

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116e:	488b      	ldr	r0, [pc, #556]	; (800139c <main+0x540>)
 8001170:	f001 f93d 	bl	80023ee <HAL_GPIO_WritePin>

			if (dryer.state == START) {
 8001174:	4b85      	ldr	r3, [pc, #532]	; (800138c <main+0x530>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	f040 80bc 	bne.w	80012f6 <main+0x49a>

				scaned_key = scan_keypad();
 800117e:	f7ff f8d9 	bl	8000334 <scan_keypad>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	4b86      	ldr	r3, [pc, #536]	; (80013a0 <main+0x544>)
 8001188:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 800118a:	4b85      	ldr	r3, [pc, #532]	; (80013a0 <main+0x544>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	3b01      	subs	r3, #1
 8001190:	2b03      	cmp	r3, #3
 8001192:	f200 80ac 	bhi.w	80012ee <main+0x492>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <main+0x340>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011f5 	.word	0x080011f5
 80011a4:	0800121b 	.word	0x0800121b
 80011a8:	080012c3 	.word	0x080012c3
				case LOW_KEY_PRESSED:
					lcd_update_flag = 1U;
 80011ac:	4b7d      	ldr	r3, [pc, #500]	; (80013a4 <main+0x548>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 80011b2:	4b76      	ldr	r3, [pc, #472]	; (800138c <main+0x530>)
 80011b4:	7a1b      	ldrb	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <main+0x364>
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d00b      	beq.n	80011d6 <main+0x37a>
					case COOL_CYCLE:
						if (dryer.coolTime > 60U)
							dryer.coolTime -= 60U;
						break;
					}
					break;
 80011be:	e096      	b.n	80012ee <main+0x492>
						if (dryer.heatTime > 60U)
 80011c0:	4b72      	ldr	r3, [pc, #456]	; (800138c <main+0x530>)
 80011c2:	885b      	ldrh	r3, [r3, #2]
 80011c4:	2b3c      	cmp	r3, #60	; 0x3c
 80011c6:	d911      	bls.n	80011ec <main+0x390>
							dryer.heatTime -= 60U;
 80011c8:	4b70      	ldr	r3, [pc, #448]	; (800138c <main+0x530>)
 80011ca:	885b      	ldrh	r3, [r3, #2]
 80011cc:	3b3c      	subs	r3, #60	; 0x3c
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b6e      	ldr	r3, [pc, #440]	; (800138c <main+0x530>)
 80011d2:	805a      	strh	r2, [r3, #2]
						break;
 80011d4:	e00a      	b.n	80011ec <main+0x390>
						if (dryer.coolTime > 60U)
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <main+0x530>)
 80011d8:	889b      	ldrh	r3, [r3, #4]
 80011da:	2b3c      	cmp	r3, #60	; 0x3c
 80011dc:	d908      	bls.n	80011f0 <main+0x394>
							dryer.coolTime -= 60U;
 80011de:	4b6b      	ldr	r3, [pc, #428]	; (800138c <main+0x530>)
 80011e0:	889b      	ldrh	r3, [r3, #4]
 80011e2:	3b3c      	subs	r3, #60	; 0x3c
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b69      	ldr	r3, [pc, #420]	; (800138c <main+0x530>)
 80011e8:	809a      	strh	r2, [r3, #4]
						break;
 80011ea:	e001      	b.n	80011f0 <main+0x394>
						break;
 80011ec:	bf00      	nop
 80011ee:	e07e      	b.n	80012ee <main+0x492>
						break;
 80011f0:	bf00      	nop
					break;
 80011f2:	e07c      	b.n	80012ee <main+0x492>

				case MED_KEY_PRESSED:
					lcd_update_flag = 1U;
 80011f4:	4b6b      	ldr	r3, [pc, #428]	; (80013a4 <main+0x548>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80011fa:	4b64      	ldr	r3, [pc, #400]	; (800138c <main+0x530>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001200:	4b62      	ldr	r3, [pc, #392]	; (800138c <main+0x530>)
 8001202:	2200      	movs	r2, #0
 8001204:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 8001206:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <main+0x54c>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 800120c:	4b65      	ldr	r3, [pc, #404]	; (80013a4 <main+0x548>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8001212:	4b66      	ldr	r3, [pc, #408]	; (80013ac <main+0x550>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
					break;
 8001218:	e069      	b.n	80012ee <main+0x492>

				case HIGH_KEY_PRESSED:
					lcd_update_flag = 1U;
 800121a:	4b62      	ldr	r3, [pc, #392]	; (80013a4 <main+0x548>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 8001220:	4b5a      	ldr	r3, [pc, #360]	; (800138c <main+0x530>)
 8001222:	7a1b      	ldrb	r3, [r3, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <main+0x3d2>
 8001228:	2b01      	cmp	r3, #1
 800122a:	d037      	beq.n	800129c <main+0x440>
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
 800122c:	e05f      	b.n	80012ee <main+0x492>
						if ((dryer.heatTime < 1800U)
 800122e:	4b57      	ldr	r3, [pc, #348]	; (800138c <main+0x530>)
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001236:	d20a      	bcs.n	800124e <main+0x3f2>
								&& (dryer.mode == LOW_LEVEL))
 8001238:	4b54      	ldr	r3, [pc, #336]	; (800138c <main+0x530>)
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <main+0x3f2>
							dryer.heatTime += 60U;
 8001240:	4b52      	ldr	r3, [pc, #328]	; (800138c <main+0x530>)
 8001242:	885b      	ldrh	r3, [r3, #2]
 8001244:	333c      	adds	r3, #60	; 0x3c
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b50      	ldr	r3, [pc, #320]	; (800138c <main+0x530>)
 800124a:	805a      	strh	r2, [r3, #2]
 800124c:	e01f      	b.n	800128e <main+0x432>
						else if ((dryer.heatTime < 2400U)
 800124e:	4b4f      	ldr	r3, [pc, #316]	; (800138c <main+0x530>)
 8001250:	885b      	ldrh	r3, [r3, #2]
 8001252:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001256:	d20a      	bcs.n	800126e <main+0x412>
								&& (dryer.mode == MED_LEVEL))
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <main+0x530>)
 800125a:	785b      	ldrb	r3, [r3, #1]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d106      	bne.n	800126e <main+0x412>
							dryer.heatTime += 60U;
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <main+0x530>)
 8001262:	885b      	ldrh	r3, [r3, #2]
 8001264:	333c      	adds	r3, #60	; 0x3c
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b48      	ldr	r3, [pc, #288]	; (800138c <main+0x530>)
 800126a:	805a      	strh	r2, [r3, #2]
 800126c:	e00f      	b.n	800128e <main+0x432>
						else if ((dryer.heatTime < 3000U)
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <main+0x530>)
 8001270:	885b      	ldrh	r3, [r3, #2]
 8001272:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001276:	4293      	cmp	r3, r2
 8001278:	d809      	bhi.n	800128e <main+0x432>
								&& (dryer.mode == HIGH_LEVEL))
 800127a:	4b44      	ldr	r3, [pc, #272]	; (800138c <main+0x530>)
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d105      	bne.n	800128e <main+0x432>
							dryer.heatTime += 60U;
 8001282:	4b42      	ldr	r3, [pc, #264]	; (800138c <main+0x530>)
 8001284:	885b      	ldrh	r3, [r3, #2]
 8001286:	333c      	adds	r3, #60	; 0x3c
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b40      	ldr	r3, [pc, #256]	; (800138c <main+0x530>)
 800128c:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 800128e:	4b3f      	ldr	r3, [pc, #252]	; (800138c <main+0x530>)
 8001290:	885b      	ldrh	r3, [r3, #2]
 8001292:	4619      	mov	r1, r3
 8001294:	4846      	ldr	r0, [pc, #280]	; (80013b0 <main+0x554>)
 8001296:	f002 fb0f 	bl	80038b8 <iprintf>
						break;
 800129a:	e011      	b.n	80012c0 <main+0x464>
						if (dryer.coolTime < 900U)
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <main+0x530>)
 800129e:	889b      	ldrh	r3, [r3, #4]
 80012a0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80012a4:	d205      	bcs.n	80012b2 <main+0x456>
							dryer.coolTime += 60U;
 80012a6:	4b39      	ldr	r3, [pc, #228]	; (800138c <main+0x530>)
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	333c      	adds	r3, #60	; 0x3c
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	4b37      	ldr	r3, [pc, #220]	; (800138c <main+0x530>)
 80012b0:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 80012b2:	4b36      	ldr	r3, [pc, #216]	; (800138c <main+0x530>)
 80012b4:	889b      	ldrh	r3, [r3, #4]
 80012b6:	4619      	mov	r1, r3
 80012b8:	483e      	ldr	r0, [pc, #248]	; (80013b4 <main+0x558>)
 80012ba:	f002 fafd 	bl	80038b8 <iprintf>
						break;
 80012be:	bf00      	nop
					break;
 80012c0:	e015      	b.n	80012ee <main+0x492>

				case FN_KEY_PRESSED:
					lcd_update_flag = 1U;
 80012c2:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <main+0x548>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 0U;
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <main+0x530>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <main+0x530>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	721a      	strb	r2, [r3, #8]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <main+0x530>)
 80012d6:	885b      	ldrh	r3, [r3, #2]
 80012d8:	4619      	mov	r1, r3
 80012da:	4835      	ldr	r0, [pc, #212]	; (80013b0 <main+0x554>)
 80012dc:	f002 faec 	bl	80038b8 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 80012e0:	4b2a      	ldr	r3, [pc, #168]	; (800138c <main+0x530>)
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4833      	ldr	r0, [pc, #204]	; (80013b4 <main+0x558>)
 80012e8:	f002 fae6 	bl	80038b8 <iprintf>
					break;
 80012ec:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <main+0x544>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	e0ce      	b.n	8001494 <main+0x638>

			} else if (dryer.state == INIT) {
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <main+0x530>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 80ca 	bne.w	8001494 <main+0x638>

				scaned_key = scan_keypad();
 8001300:	f7ff f818 	bl	8000334 <scan_keypad>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <main+0x544>)
 800130a:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <main+0x544>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b03      	cmp	r3, #3
 8001312:	f000 808b 	beq.w	800142c <main+0x5d0>
 8001316:	2b03      	cmp	r3, #3
 8001318:	f300 80b8 	bgt.w	800148c <main+0x630>
 800131c:	2b01      	cmp	r3, #1
 800131e:	d002      	beq.n	8001326 <main+0x4ca>
 8001320:	2b02      	cmp	r3, #2
 8001322:	d053      	beq.n	80013cc <main+0x570>
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
							sizeof("HIGH_LEVEL\r\n"), 10);
					break;

				default:
					break;
 8001324:	e0b2      	b.n	800148c <main+0x630>
					dryer.mode = LOW_LEVEL;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <main+0x530>)
 8001328:	2201      	movs	r2, #1
 800132a:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <main+0x530>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <main+0x530>)
 8001334:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001338:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <main+0x530>)
 800133c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001340:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <main+0x530>)
 8001344:	221e      	movs	r2, #30
 8001346:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 40U;
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <main+0x530>)
 800134a:	2228      	movs	r2, #40	; 0x28
 800134c:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <main+0x530>)
 8001350:	2200      	movs	r2, #0
 8001352:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <main+0x55c>)
 8001356:	221e      	movs	r2, #30
 8001358:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <main+0x560>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <main+0x564>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <main+0x52c>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
					cur_page = LOW_LEVEL_PAGE;
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <main+0x54c>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <main+0x548>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 8001378:	230a      	movs	r3, #10
 800137a:	220c      	movs	r2, #12
 800137c:	4911      	ldr	r1, [pc, #68]	; (80013c4 <main+0x568>)
 800137e:	4812      	ldr	r0, [pc, #72]	; (80013c8 <main+0x56c>)
 8001380:	f002 f8fd 	bl	800357e <HAL_UART_Transmit>
					break;
 8001384:	e083      	b.n	800148e <main+0x632>
 8001386:	bf00      	nop
 8001388:	20000126 	.word	0x20000126
 800138c:	20000118 	.word	0x20000118
 8001390:	20000134 	.word	0x20000134
 8001394:	20000122 	.word	0x20000122
 8001398:	20000124 	.word	0x20000124
 800139c:	40011000 	.word	0x40011000
 80013a0:	20000127 	.word	0x20000127
 80013a4:	2000012e 	.word	0x2000012e
 80013a8:	2000012c 	.word	0x2000012c
 80013ac:	20000125 	.word	0x20000125
 80013b0:	08004db8 	.word	0x08004db8
 80013b4:	08004dc8 	.word	0x08004dc8
 80013b8:	20000001 	.word	0x20000001
 80013bc:	20000128 	.word	0x20000128
 80013c0:	20000129 	.word	0x20000129
 80013c4:	08004dd8 	.word	0x08004dd8
 80013c8:	2000017c 	.word	0x2000017c
					dryer.mode = MED_LEVEL;
 80013cc:	4bb0      	ldr	r3, [pc, #704]	; (8001690 <main+0x834>)
 80013ce:	2202      	movs	r2, #2
 80013d0:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80013d2:	4baf      	ldr	r3, [pc, #700]	; (8001690 <main+0x834>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 80013d8:	4bad      	ldr	r3, [pc, #692]	; (8001690 <main+0x834>)
 80013da:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80013de:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80013e0:	4bab      	ldr	r3, [pc, #684]	; (8001690 <main+0x834>)
 80013e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013e6:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80013e8:	4ba9      	ldr	r3, [pc, #676]	; (8001690 <main+0x834>)
 80013ea:	221e      	movs	r2, #30
 80013ec:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 70U;
 80013ee:	4ba8      	ldr	r3, [pc, #672]	; (8001690 <main+0x834>)
 80013f0:	2246      	movs	r2, #70	; 0x46
 80013f2:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 80013f4:	4ba6      	ldr	r3, [pc, #664]	; (8001690 <main+0x834>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 80013fa:	4ba6      	ldr	r3, [pc, #664]	; (8001694 <main+0x838>)
 80013fc:	221e      	movs	r2, #30
 80013fe:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8001400:	4ba5      	ldr	r3, [pc, #660]	; (8001698 <main+0x83c>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8001406:	4ba5      	ldr	r3, [pc, #660]	; (800169c <main+0x840>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 800140c:	4ba4      	ldr	r3, [pc, #656]	; (80016a0 <main+0x844>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
					cur_page = MED_LEVEL_PAGE;
 8001412:	4ba4      	ldr	r3, [pc, #656]	; (80016a4 <main+0x848>)
 8001414:	2202      	movs	r2, #2
 8001416:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001418:	4ba3      	ldr	r3, [pc, #652]	; (80016a8 <main+0x84c>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 800141e:	230a      	movs	r3, #10
 8001420:	220c      	movs	r2, #12
 8001422:	49a2      	ldr	r1, [pc, #648]	; (80016ac <main+0x850>)
 8001424:	48a2      	ldr	r0, [pc, #648]	; (80016b0 <main+0x854>)
 8001426:	f002 f8aa 	bl	800357e <HAL_UART_Transmit>
					break;
 800142a:	e030      	b.n	800148e <main+0x632>
					dryer.mode = HIGH_LEVEL;
 800142c:	4b98      	ldr	r3, [pc, #608]	; (8001690 <main+0x834>)
 800142e:	2203      	movs	r2, #3
 8001430:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 8001432:	4b97      	ldr	r3, [pc, #604]	; (8001690 <main+0x834>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 8001438:	4b95      	ldr	r3, [pc, #596]	; (8001690 <main+0x834>)
 800143a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800143e:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8001440:	4b93      	ldr	r3, [pc, #588]	; (8001690 <main+0x834>)
 8001442:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001446:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8001448:	4b91      	ldr	r3, [pc, #580]	; (8001690 <main+0x834>)
 800144a:	221e      	movs	r2, #30
 800144c:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 90U;
 800144e:	4b90      	ldr	r3, [pc, #576]	; (8001690 <main+0x834>)
 8001450:	225a      	movs	r2, #90	; 0x5a
 8001452:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8001454:	4b8e      	ldr	r3, [pc, #568]	; (8001690 <main+0x834>)
 8001456:	2200      	movs	r2, #0
 8001458:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 800145a:	4b8e      	ldr	r3, [pc, #568]	; (8001694 <main+0x838>)
 800145c:	221e      	movs	r2, #30
 800145e:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8001460:	4b8d      	ldr	r3, [pc, #564]	; (8001698 <main+0x83c>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8001466:	4b8d      	ldr	r3, [pc, #564]	; (800169c <main+0x840>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 800146c:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <main+0x844>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
					cur_page = HIGH_LEVEL_PAGE;
 8001472:	4b8c      	ldr	r3, [pc, #560]	; (80016a4 <main+0x848>)
 8001474:	2203      	movs	r2, #3
 8001476:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001478:	4b8b      	ldr	r3, [pc, #556]	; (80016a8 <main+0x84c>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 800147e:	230a      	movs	r3, #10
 8001480:	220d      	movs	r2, #13
 8001482:	498c      	ldr	r1, [pc, #560]	; (80016b4 <main+0x858>)
 8001484:	488a      	ldr	r0, [pc, #552]	; (80016b0 <main+0x854>)
 8001486:	f002 f87a 	bl	800357e <HAL_UART_Transmit>
					break;
 800148a:	e000      	b.n	800148e <main+0x632>
					break;
 800148c:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 800148e:	4b8a      	ldr	r3, [pc, #552]	; (80016b8 <main+0x85c>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
		 * @COMPLETE STATE
		 * 		->TURNS OFF FAN, DRUM MOTORS, HEATER
		 * 		->TRUNS ON/OFF BEEP EVERY 3s FOR 30s
		 * 		->WATCHS DOOR OPEN
		 **********************************************************************************************************/
		if (!door_open_flag && !coil_open_flag) {
 8001494:	4b89      	ldr	r3, [pc, #548]	; (80016bc <main+0x860>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f040 80f5 	bne.w	8001688 <main+0x82c>
 800149e:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <main+0x864>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 80f0 	bne.w	8001688 <main+0x82c>

			if (dryer.state == START) {
 80014a8:	4b79      	ldr	r3, [pc, #484]	; (8001690 <main+0x834>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	f040 809d 	bne.w	80015ec <main+0x790>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b8:	4882      	ldr	r0, [pc, #520]	; (80016c4 <main+0x868>)
 80014ba:	f000 ff98 	bl	80023ee <HAL_GPIO_WritePin>

				if (otp) {
 80014be:	4b82      	ldr	r3, [pc, #520]	; (80016c8 <main+0x86c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d020      	beq.n	8001508 <main+0x6ac>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 80014c6:	4b72      	ldr	r3, [pc, #456]	; (8001690 <main+0x834>)
 80014c8:	885b      	ldrh	r3, [r3, #2]
 80014ca:	4619      	mov	r1, r3
 80014cc:	487f      	ldr	r0, [pc, #508]	; (80016cc <main+0x870>)
 80014ce:	f002 f9f3 	bl	80038b8 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 80014d2:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <main+0x834>)
 80014d4:	889b      	ldrh	r3, [r3, #4]
 80014d6:	4619      	mov	r1, r3
 80014d8:	487d      	ldr	r0, [pc, #500]	; (80016d0 <main+0x874>)
 80014da:	f002 f9ed 	bl	80038b8 <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 80014de:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <main+0x838>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	487b      	ldr	r0, [pc, #492]	; (80016d4 <main+0x878>)
 80014e6:	f002 f9e7 	bl	80038b8 <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 80014ea:	4b6c      	ldr	r3, [pc, #432]	; (800169c <main+0x840>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4879      	ldr	r0, [pc, #484]	; (80016d8 <main+0x87c>)
 80014f2:	f002 f9e1 	bl	80038b8 <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 80014f6:	4b68      	ldr	r3, [pc, #416]	; (8001698 <main+0x83c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4877      	ldr	r0, [pc, #476]	; (80016dc <main+0x880>)
 80014fe:	f002 f9db 	bl	80038b8 <iprintf>
					otp = 0;
 8001502:	4b71      	ldr	r3, [pc, #452]	; (80016c8 <main+0x86c>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
				}

				//start Flip Flop
				if (pasue_cunt > 0) {
 8001508:	4b64      	ldr	r3, [pc, #400]	; (800169c <main+0x840>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d034      	beq.n	800157a <main+0x71e>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001516:	4872      	ldr	r0, [pc, #456]	; (80016e0 <main+0x884>)
 8001518:	f000 ff69 	bl	80023ee <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001522:	486f      	ldr	r0, [pc, #444]	; (80016e0 <main+0x884>)
 8001524:	f000 ff63 	bl	80023ee <HAL_GPIO_WritePin>

					if (pasue_cunt <= 1) {
 8001528:	4b5c      	ldr	r3, [pc, #368]	; (800169c <main+0x840>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d84b      	bhi.n	80015c8 <main+0x76c>

						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 8001530:	2104      	movs	r1, #4
 8001532:	4864      	ldr	r0, [pc, #400]	; (80016c4 <main+0x868>)
 8001534:	f000 ff44 	bl	80023c0 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b69      	ldr	r3, [pc, #420]	; (80016e4 <main+0x888>)
 800153e:	701a      	strb	r2, [r3, #0]
						SEL_ROT_SW);

						if (rot_sw_state) {
 8001540:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <main+0x888>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <main+0x6fa>

							rot_left_cunt = 30U;
 8001548:	4b52      	ldr	r3, [pc, #328]	; (8001694 <main+0x838>)
 800154a:	221e      	movs	r2, #30
 800154c:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 800154e:	4b52      	ldr	r3, [pc, #328]	; (8001698 <main+0x83c>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e038      	b.n	80015c8 <main+0x76c>

						} else {

							if (flipflop) {
 8001556:	4b64      	ldr	r3, [pc, #400]	; (80016e8 <main+0x88c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <main+0x710>

								rot_left_cunt = 0U;
 800155e:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <main+0x838>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 8001564:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <main+0x83c>)
 8001566:	221e      	movs	r2, #30
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e02d      	b.n	80015c8 <main+0x76c>

							} else {

								rot_left_cunt = 30U;
 800156c:	4b49      	ldr	r3, [pc, #292]	; (8001694 <main+0x838>)
 800156e:	221e      	movs	r2, #30
 8001570:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 8001572:	4b49      	ldr	r3, [pc, #292]	; (8001698 <main+0x83c>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e026      	b.n	80015c8 <main+0x76c>

							}
						}
					}
				} else if (rot_left_cunt > 0) {
 800157a:	4b46      	ldr	r3, [pc, #280]	; (8001694 <main+0x838>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00f      	beq.n	80015a2 <main+0x746>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001588:	4855      	ldr	r0, [pc, #340]	; (80016e0 <main+0x884>)
 800158a:	f000 ff30 	bl	80023ee <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001594:	4852      	ldr	r0, [pc, #328]	; (80016e0 <main+0x884>)
 8001596:	f000 ff2a 	bl	80023ee <HAL_GPIO_WritePin>
					flipflop = 1;
 800159a:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <main+0x88c>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e012      	b.n	80015c8 <main+0x76c>

				} else if (rot_right_cunt > 0) {
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <main+0x83c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00e      	beq.n	80015c8 <main+0x76c>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b0:	484b      	ldr	r0, [pc, #300]	; (80016e0 <main+0x884>)
 80015b2:	f000 ff1c 	bl	80023ee <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015bc:	4848      	ldr	r0, [pc, #288]	; (80016e0 <main+0x884>)
 80015be:	f000 ff16 	bl	80023ee <HAL_GPIO_WritePin>
					flipflop = 0;
 80015c2:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <main+0x88c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

				}

				if (dryer.cycle == HEAT_CYCLE) {
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <main+0x834>)
 80015ca:	7a1b      	ldrb	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d106      	bne.n	80015de <main+0x782>

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d6:	4842      	ldr	r0, [pc, #264]	; (80016e0 <main+0x884>)
 80015d8:	f000 ff09 	bl	80023ee <HAL_GPIO_WritePin>
 80015dc:	e054      	b.n	8001688 <main+0x82c>

				} else {

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e4:	483e      	ldr	r0, [pc, #248]	; (80016e0 <main+0x884>)
 80015e6:	f000 ff02 	bl	80023ee <HAL_GPIO_WritePin>
 80015ea:	e04d      	b.n	8001688 <main+0x82c>

				}
			} else if (dryer.state == COMPLETE) {
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <main+0x834>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d131      	bne.n	8001658 <main+0x7fc>

				if (dryer.beepTime == 0) {
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <main+0x834>)
 80015f6:	79db      	ldrb	r3, [r3, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d114      	bne.n	8001626 <main+0x7ca>
					HAL_GPIO_WritePin(GPIOC, LED, LOW);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001602:	483a      	ldr	r0, [pc, #232]	; (80016ec <main+0x890>)
 8001604:	f000 fef3 	bl	80023ee <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <main+0x848>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <main+0x84c>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
					//beep off
					timer_stop_evt = 1U;
 8001614:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <main+0x894>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <main+0x834>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <main+0x834>)
 8001622:	2200      	movs	r2, #0
 8001624:	705a      	strb	r2, [r3, #1]
				} else if (dryer.beepTime % 3 == 0) {
					//beep toggle
				}
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	4825      	ldr	r0, [pc, #148]	; (80016c4 <main+0x868>)
 800162e:	f000 fede 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001638:	4829      	ldr	r0, [pc, #164]	; (80016e0 <main+0x884>)
 800163a:	f000 fed8 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001644:	4826      	ldr	r0, [pc, #152]	; (80016e0 <main+0x884>)
 8001646:	f000 fed2 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001650:	4823      	ldr	r0, [pc, #140]	; (80016e0 <main+0x884>)
 8001652:	f000 fecc 	bl	80023ee <HAL_GPIO_WritePin>
 8001656:	e017      	b.n	8001688 <main+0x82c>

			} else {
				//beep off
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165e:	4819      	ldr	r0, [pc, #100]	; (80016c4 <main+0x868>)
 8001660:	f000 fec5 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800166a:	481d      	ldr	r0, [pc, #116]	; (80016e0 <main+0x884>)
 800166c:	f000 febf 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001676:	481a      	ldr	r0, [pc, #104]	; (80016e0 <main+0x884>)
 8001678:	f000 feb9 	bl	80023ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001682:	4817      	ldr	r0, [pc, #92]	; (80016e0 <main+0x884>)
 8001684:	f000 feb3 	bl	80023ee <HAL_GPIO_WritePin>
			}
		}
		lcd_update_flag = 1U;
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <main+0x84c>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
		if (is_door_open() && (!door_open_flag)) {
 800168e:	e41d      	b.n	8000ecc <main+0x70>
 8001690:	20000118 	.word	0x20000118
 8001694:	20000001 	.word	0x20000001
 8001698:	20000128 	.word	0x20000128
 800169c:	20000129 	.word	0x20000129
 80016a0:	20000126 	.word	0x20000126
 80016a4:	2000012c 	.word	0x2000012c
 80016a8:	2000012e 	.word	0x2000012e
 80016ac:	08004de4 	.word	0x08004de4
 80016b0:	2000017c 	.word	0x2000017c
 80016b4:	08004df0 	.word	0x08004df0
 80016b8:	20000127 	.word	0x20000127
 80016bc:	20000122 	.word	0x20000122
 80016c0:	20000124 	.word	0x20000124
 80016c4:	40010800 	.word	0x40010800
 80016c8:	20000000 	.word	0x20000000
 80016cc:	08004e00 	.word	0x08004e00
 80016d0:	08004dc8 	.word	0x08004dc8
 80016d4:	08004e14 	.word	0x08004e14
 80016d8:	08004e24 	.word	0x08004e24
 80016dc:	08004e34 	.word	0x08004e34
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	2000012a 	.word	0x2000012a
 80016e8:	2000012b 	.word	0x2000012b
 80016ec:	40011000 	.word	0x40011000
 80016f0:	20000125 	.word	0x20000125

080016f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b090      	sub	sp, #64	; 0x40
 80016f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016fa:	f107 0318 	add.w	r3, r7, #24
 80016fe:	2228      	movs	r2, #40	; 0x28
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f002 f8d0 	bl	80038a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171a:	2301      	movs	r3, #1
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171e:	2310      	movs	r3, #16
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fe90 	bl	8002450 <HAL_RCC_OscConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x46>
		Error_Handler();
 8001736:	f000 f8cb 	bl	80018d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800173a:	230f      	movs	r3, #15
 800173c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f001 f8fe 	bl	8002954 <HAL_RCC_ClockConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x6e>
		Error_Handler();
 800175e:	f000 f8b7 	bl	80018d0 <Error_Handler>
	}
}
 8001762:	bf00      	nop
 8001764:	3740      	adds	r7, #64	; 0x40
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
//	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d10b      	bne.n	8001794 <HAL_GPIO_EXTI_Callback+0x28>
		NVIC_DisableIRQ(EXTI0_IRQn);
 800177c:	2006      	movs	r0, #6
 800177e:	f7ff fb37 	bl	8000df0 <__NVIC_DisableIRQ>

		door_open_flag = 1U;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_GPIO_EXTI_Callback+0x30>)
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
		door_open_evt = 1U;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x34>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]

		NVIC_EnableIRQ(EXTI0_IRQn);
 800178e:	2006      	movs	r0, #6
 8001790:	f7ff fb12 	bl	8000db8 <__NVIC_EnableIRQ>
	}
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000122 	.word	0x20000122
 80017a0:	20000123 	.word	0x20000123

080017a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) "TIMER\r\n", sizeof("TIMER\r\n"), 10);
 80017ac:	230a      	movs	r3, #10
 80017ae:	2208      	movs	r2, #8
 80017b0:	493d      	ldr	r1, [pc, #244]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80017b2:	483e      	ldr	r0, [pc, #248]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 80017b4:	f001 fee3 	bl	800357e <HAL_UART_Transmit>

	if (dryer.heatTime > 0) {
 80017b8:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017ba:	885b      	ldrh	r3, [r3, #2]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x2a>

		dryer.heatTime--;
 80017c0:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017c2:	885b      	ldrh	r3, [r3, #2]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017ca:	805a      	strh	r2, [r3, #2]
 80017cc:	e014      	b.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x54>

	} else if (dryer.coolTime > 0) {
 80017ce:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017d0:	889b      	ldrh	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <HAL_TIM_PeriodElapsedCallback+0x40>

		dryer.coolTime--;
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017d8:	889b      	ldrh	r3, [r3, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017e0:	809a      	strh	r2, [r3, #4]
 80017e2:	e009      	b.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x54>

	} else if (dryer.state == COMPLETE) {
 80017e4:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d105      	bne.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x54>
		dryer.beepTime--;
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017ee:	79db      	ldrb	r3, [r3, #7]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017f6:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017fa:	885b      	ldrh	r3, [r3, #2]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d107      	bne.n	8001810 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001802:	7a1b      	ldrb	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d103      	bne.n	8001810 <HAL_TIM_PeriodElapsedCallback+0x6c>

		dryer.cycle = COOL_CYCLE;
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800180a:	2201      	movs	r2, #1
 800180c:	721a      	strb	r2, [r3, #8]
 800180e:	e013      	b.n	8001838 <HAL_TIM_PeriodElapsedCallback+0x94>

	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001812:	889b      	ldrh	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10f      	bne.n	8001838 <HAL_TIM_PeriodElapsedCallback+0x94>
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800181a:	7a1b      	ldrb	r3, [r3, #8]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10b      	bne.n	8001838 <HAL_TIM_PeriodElapsedCallback+0x94>

		printf("Complete\r\n");
 8001820:	4824      	ldr	r0, [pc, #144]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001822:	f002 f8cf 	bl	80039c4 <puts>
		dryer.state = COMPLETE;
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001828:	2202      	movs	r2, #2
 800182a:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800182e:	2200      	movs	r2, #0
 8001830:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001834:	2204      	movs	r2, #4
 8001836:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <HAL_TIM_PeriodElapsedCallback+0xaa>

		pasue_cunt--;
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	3b01      	subs	r3, #1
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	e022      	b.n	8001894 <HAL_TIM_PeriodElapsedCallback+0xf0>

	} else if (rot_left_cunt > 0) {
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <HAL_TIM_PeriodElapsedCallback+0xce>

		rot_left_cunt--;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	3b01      	subs	r3, #1
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001860:	701a      	strb	r2, [r3, #0]

		if (rot_left_cunt == 0) {
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d114      	bne.n	8001894 <HAL_TIM_PeriodElapsedCallback+0xf0>

			pasue_cunt = 3U;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800186c:	2203      	movs	r2, #3
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e010      	b.n	8001894 <HAL_TIM_PeriodElapsedCallback+0xf0>

		}

	} else if (rot_right_cunt > 0) {
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00c      	beq.n	8001894 <HAL_TIM_PeriodElapsedCallback+0xf0>

		rot_right_cunt--;
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	3b01      	subs	r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001884:	701a      	strb	r2, [r3, #0]

		if (rot_right_cunt == 0) {
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <HAL_TIM_PeriodElapsedCallback+0xf0>

			pasue_cunt = 3U;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001890:	2203      	movs	r2, #3
 8001892:	701a      	strb	r2, [r3, #0]

		}
	}
	otp = 1;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
	lcd_update_flag = 1U;
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x128>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	08004e48 	.word	0x08004e48
 80018ac:	2000017c 	.word	0x2000017c
 80018b0:	20000118 	.word	0x20000118
 80018b4:	08004e50 	.word	0x08004e50
 80018b8:	2000012c 	.word	0x2000012c
 80018bc:	20000129 	.word	0x20000129
 80018c0:	20000001 	.word	0x20000001
 80018c4:	20000128 	.word	0x20000128
 80018c8:	20000000 	.word	0x20000000
 80018cc:	2000012e 	.word	0x2000012e

080018d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018d8:	e7fe      	b.n	80018d8 <Error_Handler+0x8>
	...

080018dc <output_init>:
 *  Created on: Mar 27, 2023
 *      Author: Yash
 */
#include "output.h"

void output_init(void) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <output_init+0xcc>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <output_init+0xcc>)
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	6193      	str	r3, [r2, #24]
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <output_init+0xcc>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <output_init+0xcc>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <output_init+0xcc>)
 8001900:	f043 0310 	orr.w	r3, r3, #16
 8001904:	6193      	str	r3, [r2, #24]
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <output_init+0xcc>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOx = { 0 };
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001926:	4821      	ldr	r0, [pc, #132]	; (80019ac <output_init+0xd0>)
 8001928:	f000 fd61 	bl	80023ee <HAL_GPIO_WritePin>

	GPIOx.Pin = DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN;
 800192c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001930:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001936:	2302      	movs	r3, #2
 8001938:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2302      	movs	r3, #2
 800193c:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(OUTPUT_PORT, &GPIOx);
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	4619      	mov	r1, r3
 8001944:	4819      	ldr	r0, [pc, #100]	; (80019ac <output_init+0xd0>)
 8001946:	f000 fbb7 	bl	80020b8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001950:	4817      	ldr	r0, [pc, #92]	; (80019b0 <output_init+0xd4>)
 8001952:	f000 fd4c 	bl	80023ee <HAL_GPIO_WritePin>

	GPIOx.Pin = FAN_PIN;
 8001956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195a:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001960:	2302      	movs	r3, #2
 8001962:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2302      	movs	r3, #2
 8001966:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(FAN_PORT, &GPIOx);
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	4619      	mov	r1, r3
 800196e:	4810      	ldr	r0, [pc, #64]	; (80019b0 <output_init+0xd4>)
 8001970:	f000 fba2 	bl	80020b8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <output_init+0xd8>)
 800197c:	f000 fd37 	bl	80023ee <HAL_GPIO_WritePin>

	GPIOx.Pin = BUZZER_PIN;
 8001980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001984:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 800198a:	2302      	movs	r3, #2
 800198c:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2302      	movs	r3, #2
 8001990:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(BUZZER_PORT, &GPIOx);
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	4619      	mov	r1, r3
 8001998:	4806      	ldr	r0, [pc, #24]	; (80019b4 <output_init+0xd8>)
 800199a:	f000 fb8d 	bl	80020b8 <HAL_GPIO_Init>

}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	40010800 	.word	0x40010800
 80019b4:	40011000 	.word	0x40011000

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_MspInit+0x40>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <HAL_MspInit+0x40>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6193      	str	r3, [r2, #24]
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_MspInit+0x40>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_MspInit+0x40>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_MspInit+0x40>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_MspInit+0x40>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	40021000 	.word	0x40021000

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <NMI_Handler+0x4>

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a42:	f000 f9eb 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e00a      	b.n	8001a72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a5c:	f3af 8000 	nop.w
 8001a60:	4601      	mov	r1, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	60ba      	str	r2, [r7, #8]
 8001a68:	b2ca      	uxtb	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbf0      	blt.n	8001a5c <_read+0x12>
  }

  return len;
 8001a7a:	687b      	ldr	r3, [r7, #4]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e009      	b.n	8001aaa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60ba      	str	r2, [r7, #8]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f9ca 	bl	8000e38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbf1      	blt.n	8001a96 <_write+0x12>
  }
  return len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_close>:

int _close(int file)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <_isatty>:

int _isatty(int file)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b24:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <_sbrk+0x5c>)
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <_sbrk+0x60>)
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <_sbrk+0x64>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <_sbrk+0x68>)
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <_sbrk+0x64>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d207      	bcs.n	8001b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b4c:	f001 fe82 	bl	8003854 <__errno>
 8001b50:	4603      	mov	r3, r0
 8001b52:	220c      	movs	r2, #12
 8001b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e009      	b.n	8001b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <_sbrk+0x64>)
 8001b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20005000 	.word	0x20005000
 8001b7c:	00000400 	.word	0x00000400
 8001b80:	20000130 	.word	0x20000130
 8001b84:	200001d8 	.word	0x200001d8

08001b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <timer_init>:
#include "timer.h"

TIM_HandleTypeDef htim4;

void timer_init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_CLK_ENABLE();
 8001b9a:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <timer_init+0xa4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <timer_init+0xa4>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <timer_init+0xa4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <timer_init+0xa8>)
 8001bcc:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <timer_init+0xac>)
 8001bce:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7200;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <timer_init+0xa8>)
 8001bd2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001bd6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <timer_init+0xa8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1110+1;
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <timer_init+0xa8>)
 8001be0:	f240 4257 	movw	r2, #1111	; 0x457
 8001be4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <timer_init+0xa8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <timer_init+0xa8>)
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim4);
 8001bf2:	4812      	ldr	r0, [pc, #72]	; (8001c3c <timer_init+0xa8>)
 8001bf4:	f001 f846 	bl	8002c84 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfc:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	4619      	mov	r1, r3
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <timer_init+0xa8>)
 8001c06:	f001 fa1d 	bl	8003044 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	4619      	mov	r1, r3
 8001c18:	4808      	ldr	r0, [pc, #32]	; (8001c3c <timer_init+0xa8>)
 8001c1a:	f001 fbf3 	bl	8003404 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2101      	movs	r1, #1
 8001c22:	201e      	movs	r0, #30
 8001c24:	f000 fa11 	bl	800204a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c28:	201e      	movs	r0, #30
 8001c2a:	f000 fa2a 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	20000134 	.word	0x20000134
 8001c40:	40000800 	.word	0x40000800

08001c44 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM4_IRQHandler+0x10>)
 8001c4a:	f001 f8f3 	bl	8002e34 <HAL_TIM_IRQHandler>
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000134 	.word	0x20000134

08001c58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <MX_USART1_UART_Init+0x50>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c90:	f001 fc28 	bl	80034e4 <HAL_UART_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c9a:	f7ff fe19 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000017c 	.word	0x2000017c
 8001ca8:	40013800 	.word	0x40013800

08001cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <HAL_UART_MspInit+0x8c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d131      	bne.n	8001d30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_UART_MspInit+0x90>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <HAL_UART_MspInit+0x90>)
 8001cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_UART_MspInit+0x90>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_UART_MspInit+0x90>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_UART_MspInit+0x90>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_UART_MspInit+0x90>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480b      	ldr	r0, [pc, #44]	; (8001d40 <HAL_UART_MspInit+0x94>)
 8001d12:	f000 f9d1 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <HAL_UART_MspInit+0x94>)
 8001d2c:	f000 f9c4 	bl	80020b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010800 	.word	0x40010800

08001d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d46:	490d      	ldr	r1, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	; (8001d88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d6a:	f7ff ff0d 	bl	8001b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f001 fd77 	bl	8003860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d72:	f7ff f873 	bl	8000e5c <main>
  bx lr
 8001d76:	4770      	bx	lr
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d80:	08004f24 	.word	0x08004f24
  ldr r2, =_sbss
 8001d84:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d88:	200001d4 	.word	0x200001d4

08001d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_2_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_Init+0x28>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_Init+0x28>)
 8001d9a:	f043 0310 	orr.w	r3, r3, #16
 8001d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f947 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f000 f808 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff fe04 	bl	80019b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x54>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x58>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f95f 	bl	800209e <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f000 f927 	bl	800204a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_InitTick+0x5c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000004 	.word	0x20000004
 8001e14:	2000000c 	.word	0x2000000c
 8001e18:	20000008 	.word	0x20000008

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	2000000c 	.word	0x2000000c
 8001e3c:	200001c0 	.word	0x200001c0

08001e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	200001c0 	.word	0x200001c0

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fff0 	bl	8001e40 <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7a:	bf00      	nop
 8001e7c:	f7ff ffe0 	bl	8001e40 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000000c 	.word	0x2000000c

08001e9c <__NVIC_SetPriorityGrouping>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4906      	ldr	r1, [pc, #24]	; (8001f34 <__NVIC_EnableIRQ+0x34>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff90 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff2d 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff42 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff90 	bl	8001f8c <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5f 	bl	8001f38 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff35 	bl	8001f00 <__NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa2 	bl	8001ff0 <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b08b      	sub	sp, #44	; 0x2c
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e169      	b.n	80023a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020cc:	2201      	movs	r2, #1
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8158 	bne.w	800239a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a9a      	ldr	r2, [pc, #616]	; (8002358 <HAL_GPIO_Init+0x2a0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d05e      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 80020f4:	4a98      	ldr	r2, [pc, #608]	; (8002358 <HAL_GPIO_Init+0x2a0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d875      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 80020fa:	4a98      	ldr	r2, [pc, #608]	; (800235c <HAL_GPIO_Init+0x2a4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d058      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002100:	4a96      	ldr	r2, [pc, #600]	; (800235c <HAL_GPIO_Init+0x2a4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d86f      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002106:	4a96      	ldr	r2, [pc, #600]	; (8002360 <HAL_GPIO_Init+0x2a8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d052      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 800210c:	4a94      	ldr	r2, [pc, #592]	; (8002360 <HAL_GPIO_Init+0x2a8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d869      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002112:	4a94      	ldr	r2, [pc, #592]	; (8002364 <HAL_GPIO_Init+0x2ac>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04c      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002118:	4a92      	ldr	r2, [pc, #584]	; (8002364 <HAL_GPIO_Init+0x2ac>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d863      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800211e:	4a92      	ldr	r2, [pc, #584]	; (8002368 <HAL_GPIO_Init+0x2b0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d046      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002124:	4a90      	ldr	r2, [pc, #576]	; (8002368 <HAL_GPIO_Init+0x2b0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d85d      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800212a:	2b12      	cmp	r3, #18
 800212c:	d82a      	bhi.n	8002184 <HAL_GPIO_Init+0xcc>
 800212e:	2b12      	cmp	r3, #18
 8002130:	d859      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <HAL_GPIO_Init+0x80>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	080021b3 	.word	0x080021b3
 800213c:	0800218d 	.word	0x0800218d
 8002140:	0800219f 	.word	0x0800219f
 8002144:	080021e1 	.word	0x080021e1
 8002148:	080021e7 	.word	0x080021e7
 800214c:	080021e7 	.word	0x080021e7
 8002150:	080021e7 	.word	0x080021e7
 8002154:	080021e7 	.word	0x080021e7
 8002158:	080021e7 	.word	0x080021e7
 800215c:	080021e7 	.word	0x080021e7
 8002160:	080021e7 	.word	0x080021e7
 8002164:	080021e7 	.word	0x080021e7
 8002168:	080021e7 	.word	0x080021e7
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021e7 	.word	0x080021e7
 8002174:	080021e7 	.word	0x080021e7
 8002178:	080021e7 	.word	0x080021e7
 800217c:	08002195 	.word	0x08002195
 8002180:	080021a9 	.word	0x080021a9
 8002184:	4a79      	ldr	r2, [pc, #484]	; (800236c <HAL_GPIO_Init+0x2b4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800218a:	e02c      	b.n	80021e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e029      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	3304      	adds	r3, #4
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e024      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	3308      	adds	r3, #8
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e01f      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	330c      	adds	r3, #12
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e01a      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ba:	2304      	movs	r3, #4
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e013      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c8:	2308      	movs	r3, #8
 80021ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	611a      	str	r2, [r3, #16]
          break;
 80021d2:	e009      	b.n	80021e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d4:	2308      	movs	r3, #8
 80021d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	615a      	str	r2, [r3, #20]
          break;
 80021de:	e003      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          break;
 80021e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	; 0xff
 80021ec:	d801      	bhi.n	80021f2 <HAL_GPIO_Init+0x13a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_Init+0x13e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2bff      	cmp	r3, #255	; 0xff
 80021fc:	d802      	bhi.n	8002204 <HAL_GPIO_Init+0x14c>
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x152>
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	3b08      	subs	r3, #8
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	210f      	movs	r1, #15
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	431a      	orrs	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80b1 	beq.w	800239a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002238:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <HAL_GPIO_Init+0x2b8>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a4c      	ldr	r2, [pc, #304]	; (8002370 <HAL_GPIO_Init+0x2b8>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b4a      	ldr	r3, [pc, #296]	; (8002370 <HAL_GPIO_Init+0x2b8>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002250:	4a48      	ldr	r2, [pc, #288]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a40      	ldr	r2, [pc, #256]	; (8002378 <HAL_GPIO_Init+0x2c0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <HAL_GPIO_Init+0x1ec>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3f      	ldr	r2, [pc, #252]	; (800237c <HAL_GPIO_Init+0x2c4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00d      	beq.n	80022a0 <HAL_GPIO_Init+0x1e8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3e      	ldr	r2, [pc, #248]	; (8002380 <HAL_GPIO_Init+0x2c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d007      	beq.n	800229c <HAL_GPIO_Init+0x1e4>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3d      	ldr	r2, [pc, #244]	; (8002384 <HAL_GPIO_Init+0x2cc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_GPIO_Init+0x1e0>
 8002294:	2303      	movs	r3, #3
 8002296:	e006      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 8002298:	2304      	movs	r3, #4
 800229a:	e004      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 800229c:	2302      	movs	r3, #2
 800229e:	e002      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 80022a4:	2300      	movs	r3, #0
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	f002 0203 	and.w	r2, r2, #3
 80022ac:	0092      	lsls	r2, r2, #2
 80022ae:	4093      	lsls	r3, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022b6:	492f      	ldr	r1, [pc, #188]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	492c      	ldr	r1, [pc, #176]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4928      	ldr	r1, [pc, #160]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022f8:	4b23      	ldr	r3, [pc, #140]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4922      	ldr	r1, [pc, #136]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	43db      	mvns	r3, r3
 800230e:	491e      	ldr	r1, [pc, #120]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002310:	4013      	ands	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	4918      	ldr	r1, [pc, #96]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800232e:	4b16      	ldr	r3, [pc, #88]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	43db      	mvns	r3, r3
 8002336:	4914      	ldr	r1, [pc, #80]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002338:	4013      	ands	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d021      	beq.n	800238c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	490e      	ldr	r1, [pc, #56]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
 8002354:	e021      	b.n	800239a <HAL_GPIO_Init+0x2e2>
 8002356:	bf00      	nop
 8002358:	10320000 	.word	0x10320000
 800235c:	10310000 	.word	0x10310000
 8002360:	10220000 	.word	0x10220000
 8002364:	10210000 	.word	0x10210000
 8002368:	10120000 	.word	0x10120000
 800236c:	10110000 	.word	0x10110000
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000
 8002378:	40010800 	.word	0x40010800
 800237c:	40010c00 	.word	0x40010c00
 8002380:	40011000 	.word	0x40011000
 8002384:	40011400 	.word	0x40011400
 8002388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_GPIO_Init+0x304>)
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	43db      	mvns	r3, r3
 8002394:	4909      	ldr	r1, [pc, #36]	; (80023bc <HAL_GPIO_Init+0x304>)
 8002396:	4013      	ands	r3, r2
 8002398:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	3301      	adds	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f47f ae8e 	bne.w	80020cc <HAL_GPIO_Init+0x14>
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	372c      	adds	r7, #44	; 0x2c
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	887b      	ldrh	r3, [r7, #2]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e001      	b.n	80023e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	807b      	strh	r3, [r7, #2]
 80023fa:	4613      	mov	r3, r2
 80023fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023fe:	787b      	ldrb	r3, [r7, #1]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002404:	887a      	ldrh	r2, [r7, #2]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800240a:	e003      	b.n	8002414 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	041a      	lsls	r2, r3, #16
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	611a      	str	r2, [r3, #16]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
	...

08002420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f994 	bl	800176c <HAL_GPIO_EXTI_Callback>
  }
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e272      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8087 	beq.w	800257e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002470:	4b92      	ldr	r3, [pc, #584]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b04      	cmp	r3, #4
 800247a:	d00c      	beq.n	8002496 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800247c:	4b8f      	ldr	r3, [pc, #572]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d112      	bne.n	80024ae <HAL_RCC_OscConfig+0x5e>
 8002488:	4b8c      	ldr	r3, [pc, #560]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d10b      	bne.n	80024ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002496:	4b89      	ldr	r3, [pc, #548]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d06c      	beq.n	800257c <HAL_RCC_OscConfig+0x12c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d168      	bne.n	800257c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e24c      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x76>
 80024b8:	4b80      	ldr	r3, [pc, #512]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a7f      	ldr	r2, [pc, #508]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	e02e      	b.n	8002524 <HAL_RCC_OscConfig+0xd4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x98>
 80024ce:	4b7b      	ldr	r3, [pc, #492]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7a      	ldr	r2, [pc, #488]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80024d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b78      	ldr	r3, [pc, #480]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a77      	ldr	r2, [pc, #476]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80024e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e01d      	b.n	8002524 <HAL_RCC_OscConfig+0xd4>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0xbc>
 80024f2:	4b72      	ldr	r3, [pc, #456]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a71      	ldr	r2, [pc, #452]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b6f      	ldr	r3, [pc, #444]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6e      	ldr	r2, [pc, #440]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0xd4>
 800250c:	4b6b      	ldr	r3, [pc, #428]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a6a      	ldr	r2, [pc, #424]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a67      	ldr	r2, [pc, #412]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff fc88 	bl	8001e40 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff fc84 	bl	8001e40 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e200      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0xe4>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff fc74 	bl	8001e40 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff fc70 	bl	8001e40 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1ec      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	4b53      	ldr	r3, [pc, #332]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x10c>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d063      	beq.n	8002652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800258a:	4b4c      	ldr	r3, [pc, #304]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002596:	4b49      	ldr	r3, [pc, #292]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d11c      	bne.n	80025dc <HAL_RCC_OscConfig+0x18c>
 80025a2:	4b46      	ldr	r3, [pc, #280]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d116      	bne.n	80025dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x176>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e1c0      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4939      	ldr	r1, [pc, #228]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	e03a      	b.n	8002652 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e4:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7ff fc29 	bl	8001e40 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f2:	f7ff fc25 	bl	8001e40 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1a1      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4927      	ldr	r1, [pc, #156]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]
 8002624:	e015      	b.n	8002652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fc08 	bl	8001e40 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002634:	f7ff fc04 	bl	8001e40 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e180      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d03a      	beq.n	80026d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d019      	beq.n	800269a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266c:	f7ff fbe8 	bl	8001e40 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002674:	f7ff fbe4 	bl	8001e40 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e160      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <HAL_RCC_OscConfig+0x26c>)
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002692:	2001      	movs	r0, #1
 8002694:	f000 fad8 	bl	8002c48 <RCC_Delay>
 8002698:	e01c      	b.n	80026d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7ff fbce 	bl	8001e40 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a6:	e00f      	b.n	80026c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a8:	f7ff fbca 	bl	8001e40 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d908      	bls.n	80026c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e146      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	42420000 	.word	0x42420000
 80026c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	4b92      	ldr	r3, [pc, #584]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e9      	bne.n	80026a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80a6 	beq.w	800282e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e6:	4b8b      	ldr	r3, [pc, #556]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	4b88      	ldr	r3, [pc, #544]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	4a87      	ldr	r2, [pc, #540]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fc:	61d3      	str	r3, [r2, #28]
 80026fe:	4b85      	ldr	r3, [pc, #532]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270a:	2301      	movs	r3, #1
 800270c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270e:	4b82      	ldr	r3, [pc, #520]	; (8002918 <HAL_RCC_OscConfig+0x4c8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d118      	bne.n	800274c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271a:	4b7f      	ldr	r3, [pc, #508]	; (8002918 <HAL_RCC_OscConfig+0x4c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a7e      	ldr	r2, [pc, #504]	; (8002918 <HAL_RCC_OscConfig+0x4c8>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002726:	f7ff fb8b 	bl	8001e40 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272e:	f7ff fb87 	bl	8001e40 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	; 0x64
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e103      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002740:	4b75      	ldr	r3, [pc, #468]	; (8002918 <HAL_RCC_OscConfig+0x4c8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d106      	bne.n	8002762 <HAL_RCC_OscConfig+0x312>
 8002754:	4b6f      	ldr	r3, [pc, #444]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4a6e      	ldr	r2, [pc, #440]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6213      	str	r3, [r2, #32]
 8002760:	e02d      	b.n	80027be <HAL_RCC_OscConfig+0x36e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0x334>
 800276a:	4b6a      	ldr	r3, [pc, #424]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4a69      	ldr	r2, [pc, #420]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6213      	str	r3, [r2, #32]
 8002776:	4b67      	ldr	r3, [pc, #412]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	4a66      	ldr	r2, [pc, #408]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	f023 0304 	bic.w	r3, r3, #4
 8002780:	6213      	str	r3, [r2, #32]
 8002782:	e01c      	b.n	80027be <HAL_RCC_OscConfig+0x36e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b05      	cmp	r3, #5
 800278a:	d10c      	bne.n	80027a6 <HAL_RCC_OscConfig+0x356>
 800278c:	4b61      	ldr	r3, [pc, #388]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4a60      	ldr	r2, [pc, #384]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6213      	str	r3, [r2, #32]
 8002798:	4b5e      	ldr	r3, [pc, #376]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4a5d      	ldr	r2, [pc, #372]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6213      	str	r3, [r2, #32]
 80027a4:	e00b      	b.n	80027be <HAL_RCC_OscConfig+0x36e>
 80027a6:	4b5b      	ldr	r3, [pc, #364]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a5a      	ldr	r2, [pc, #360]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6213      	str	r3, [r2, #32]
 80027b2:	4b58      	ldr	r3, [pc, #352]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a57      	ldr	r2, [pc, #348]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d015      	beq.n	80027f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c6:	f7ff fb3b 	bl	8001e40 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7ff fb37 	bl	8001e40 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0b1      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	4b4b      	ldr	r3, [pc, #300]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ee      	beq.n	80027ce <HAL_RCC_OscConfig+0x37e>
 80027f0:	e014      	b.n	800281c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7ff fb25 	bl	8001e40 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7ff fb21 	bl	8001e40 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e09b      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002810:	4b40      	ldr	r3, [pc, #256]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ee      	bne.n	80027fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d105      	bne.n	800282e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002822:	4b3c      	ldr	r3, [pc, #240]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a3b      	ldr	r2, [pc, #236]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8087 	beq.w	8002946 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002838:	4b36      	ldr	r3, [pc, #216]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b08      	cmp	r3, #8
 8002842:	d061      	beq.n	8002908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d146      	bne.n	80028da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284c:	4b33      	ldr	r3, [pc, #204]	; (800291c <HAL_RCC_OscConfig+0x4cc>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7ff faf5 	bl	8001e40 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285a:	f7ff faf1 	bl	8001e40 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e06d      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d108      	bne.n	8002894 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4921      	ldr	r1, [pc, #132]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a19      	ldr	r1, [r3, #32]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	430b      	orrs	r3, r1
 80028a6:	491b      	ldr	r1, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x4cc>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7ff fac5 	bl	8001e40 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ba:	f7ff fac1 	bl	8001e40 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e03d      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x46a>
 80028d8:	e035      	b.n	8002946 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_RCC_OscConfig+0x4cc>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff faae 	bl	8001e40 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7ff faaa 	bl	8001e40 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e026      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x498>
 8002906:	e01e      	b.n	8002946 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e019      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
 8002914:	40021000 	.word	0x40021000
 8002918:	40007000 	.word	0x40007000
 800291c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_OscConfig+0x500>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	429a      	cmp	r2, r3
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000

08002954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0d0      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d910      	bls.n	8002998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b67      	ldr	r3, [pc, #412]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 0207 	bic.w	r2, r3, #7
 800297e:	4965      	ldr	r1, [pc, #404]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d040      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d115      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e073      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06b      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4936      	ldr	r1, [pc, #216]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a44:	f7ff f9fc 	bl	8001e40 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7ff f9f8 	bl	8001e40 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e053      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 020c 	and.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1eb      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d210      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 0207 	bic.w	r2, r3, #7
 8002a8a:	4922      	ldr	r1, [pc, #136]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 f821 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	490a      	ldr	r1, [pc, #40]	; (8002b1c <HAL_RCC_ClockConfig+0x1c8>)
 8002af4:	5ccb      	ldrb	r3, [r1, r3]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1cc>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1d0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f95a 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	08004e6c 	.word	0x08004e6c
 8002b20:	20000004 	.word	0x20000004
 8002b24:	20000008 	.word	0x20000008

08002b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	b490      	push	{r4, r7}
 8002b2a:	b08a      	sub	sp, #40	; 0x28
 8002b2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002b30:	1d3c      	adds	r4, r7, #4
 8002b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b38:	f240 2301 	movw	r3, #513	; 0x201
 8002b3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d002      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x40>
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d003      	beq.n	8002b6e <HAL_RCC_GetSysClockFreq+0x46>
 8002b66:	e02b      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b6a:	623b      	str	r3, [r7, #32]
      break;
 8002b6c:	e02b      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	0c9b      	lsrs	r3, r3, #18
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3328      	adds	r3, #40	; 0x28
 8002b78:	443b      	add	r3, r7
 8002b7a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b7e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	0c5b      	lsrs	r3, r3, #17
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	3328      	adds	r3, #40	; 0x28
 8002b96:	443b      	add	r3, r7
 8002b98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ba2:	fb03 f202 	mul.w	r2, r3, r2
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	e004      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	623b      	str	r3, [r7, #32]
      break;
 8002bbe:	e002      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc2:	623b      	str	r3, [r7, #32]
      break;
 8002bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc90      	pop	{r4, r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	08004e5c 	.word	0x08004e5c
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	007a1200 	.word	0x007a1200
 8002be0:	003d0900 	.word	0x003d0900

08002be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be8:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	20000004 	.word	0x20000004

08002bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bfc:	f7ff fff2 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4903      	ldr	r1, [pc, #12]	; (8002c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	08004e7c 	.word	0x08004e7c

08002c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c24:	f7ff ffde 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0adb      	lsrs	r3, r3, #11
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4903      	ldr	r1, [pc, #12]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	08004e7c 	.word	0x08004e7c

08002c48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <RCC_Delay+0x34>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <RCC_Delay+0x38>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0a5b      	lsrs	r3, r3, #9
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c64:	bf00      	nop
  }
  while (Delay --);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1e5a      	subs	r2, r3, #1
 8002c6a:	60fa      	str	r2, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f9      	bne.n	8002c64 <RCC_Delay+0x1c>
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	10624dd3 	.word	0x10624dd3

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e041      	b.n	8002d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f839 	bl	8002d22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 faa6 	bl	8003214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e03a      	b.n	8002dc2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_TIM_Base_Start_IT+0x98>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00e      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x58>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d76:	d009      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x58>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x58>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d111      	bne.n	8002db0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d010      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dae:	e007      	b.n	8002dc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	40000800 	.word	0x40000800

08002dd8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10f      	bne.n	8002e20 <HAL_TIM_Base_Stop_IT+0x48>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	f240 4344 	movw	r3, #1092	; 0x444
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d107      	bne.n	8002e20 <HAL_TIM_Base_Stop_IT+0x48>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d122      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11b      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0202 	mvn.w	r2, #2
 8002e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9b1 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9a4 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f9b3 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d122      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0204 	mvn.w	r2, #4
 8002eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f987 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e005      	b.n	8002ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f97a 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f989 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d122      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d11b      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0208 	mvn.w	r2, #8
 8002f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f95d 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f950 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f95f 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d122      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d11b      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0210 	mvn.w	r2, #16
 8002f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2208      	movs	r2, #8
 8002f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f933 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f926 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f935 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10e      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0201 	mvn.w	r2, #1
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe fbf6 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b80      	cmp	r3, #128	; 0x80
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa77 	bl	80034d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d10e      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d107      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8f9 	bl	8003202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b20      	cmp	r3, #32
 800301c:	d10e      	bne.n	800303c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b20      	cmp	r3, #32
 800302a:	d107      	bne.n	800303c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0220 	mvn.w	r2, #32
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa42 	bl	80034c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_TIM_ConfigClockSource+0x18>
 8003058:	2302      	movs	r3, #2
 800305a:	e0b3      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x180>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800307a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003082:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003094:	d03e      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0xd0>
 8003096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309a:	f200 8087 	bhi.w	80031ac <HAL_TIM_ConfigClockSource+0x168>
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	f000 8085 	beq.w	80031b0 <HAL_TIM_ConfigClockSource+0x16c>
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030aa:	d87f      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030ac:	2b70      	cmp	r3, #112	; 0x70
 80030ae:	d01a      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0xa2>
 80030b0:	2b70      	cmp	r3, #112	; 0x70
 80030b2:	d87b      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030b4:	2b60      	cmp	r3, #96	; 0x60
 80030b6:	d050      	beq.n	800315a <HAL_TIM_ConfigClockSource+0x116>
 80030b8:	2b60      	cmp	r3, #96	; 0x60
 80030ba:	d877      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030bc:	2b50      	cmp	r3, #80	; 0x50
 80030be:	d03c      	beq.n	800313a <HAL_TIM_ConfigClockSource+0xf6>
 80030c0:	2b50      	cmp	r3, #80	; 0x50
 80030c2:	d873      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d058      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x136>
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d86f      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030cc:	2b30      	cmp	r3, #48	; 0x30
 80030ce:	d064      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x156>
 80030d0:	2b30      	cmp	r3, #48	; 0x30
 80030d2:	d86b      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d060      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x156>
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d867      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d05c      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x156>
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d05a      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030e4:	e062      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f000 f966 	bl	80033c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003108:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	609a      	str	r2, [r3, #8]
      break;
 8003112:	e04e      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f000 f94f 	bl	80033c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003136:	609a      	str	r2, [r3, #8]
      break;
 8003138:	e03b      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	461a      	mov	r2, r3
 8003148:	f000 f8c6 	bl	80032d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2150      	movs	r1, #80	; 0x50
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f91d 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003158:	e02b      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	461a      	mov	r2, r3
 8003168:	f000 f8e4 	bl	8003334 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2160      	movs	r1, #96	; 0x60
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f90d 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003178:	e01b      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	461a      	mov	r2, r3
 8003188:	f000 f8a6 	bl	80032d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2140      	movs	r1, #64	; 0x40
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f8fd 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003198:	e00b      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4619      	mov	r1, r3
 80031a4:	4610      	mov	r0, r2
 80031a6:	f000 f8f4 	bl	8003392 <TIM_ITRx_SetConfig>
        break;
 80031aa:	e002      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <TIM_Base_SetConfig+0xb8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00b      	beq.n	8003244 <TIM_Base_SetConfig+0x30>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d007      	beq.n	8003244 <TIM_Base_SetConfig+0x30>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <TIM_Base_SetConfig+0xbc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_Base_SetConfig+0x30>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a25      	ldr	r2, [pc, #148]	; (80032d4 <TIM_Base_SetConfig+0xc0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d108      	bne.n	8003256 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1c      	ldr	r2, [pc, #112]	; (80032cc <TIM_Base_SetConfig+0xb8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00b      	beq.n	8003276 <TIM_Base_SetConfig+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d007      	beq.n	8003276 <TIM_Base_SetConfig+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <TIM_Base_SetConfig+0xbc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_Base_SetConfig+0x62>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <TIM_Base_SetConfig+0xc0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d108      	bne.n	8003288 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <TIM_Base_SetConfig+0xb8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d103      	bne.n	80032bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	615a      	str	r2, [r3, #20]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800

080032d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f023 0201 	bic.w	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f023 030a 	bic.w	r3, r3, #10
 8003314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f023 0210 	bic.w	r2, r3, #16
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800335e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	031b      	lsls	r3, r3, #12
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003370:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f043 0307 	orr.w	r3, r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b087      	sub	sp, #28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	021a      	lsls	r2, r3, #8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	609a      	str	r2, [r3, #8]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003418:	2302      	movs	r3, #2
 800341a:	e046      	b.n	80034aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a16      	ldr	r2, [pc, #88]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003468:	d009      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a10      	ldr	r2, [pc, #64]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d10c      	bne.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4313      	orrs	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40000800 	.word	0x40000800

080034c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e03f      	b.n	8003576 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fe fbce 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	; 0x24
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f905 	bl	8003738 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800353c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800354c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800355c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b08a      	sub	sp, #40	; 0x28
 8003582:	af02      	add	r7, sp, #8
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b20      	cmp	r3, #32
 800359c:	d17c      	bne.n	8003698 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_UART_Transmit+0x2c>
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e075      	b.n	800369a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_UART_Transmit+0x3e>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e06e      	b.n	800369a <HAL_UART_Transmit+0x11c>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2221      	movs	r2, #33	; 0x21
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d2:	f7fe fc35 	bl	8001e40 <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ec:	d108      	bne.n	8003600 <HAL_UART_Transmit+0x82>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e003      	b.n	8003608 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003610:	e02a      	b.n	8003668 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f840 	bl	80036a2 <UART_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e036      	b.n	800369a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	3302      	adds	r3, #2
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e007      	b.n	800365a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	3301      	adds	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1cf      	bne.n	8003612 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	2140      	movs	r1, #64	; 0x40
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f810 	bl	80036a2 <UART_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e006      	b.n	800369a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b2:	e02c      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d028      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036c2:	f7fe fbbd 	bl	8001e40 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d21d      	bcs.n	800370e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e00f      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	429a      	cmp	r2, r3
 800372a:	d0c3      	beq.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003772:	f023 030c 	bic.w	r3, r3, #12
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	430b      	orrs	r3, r1
 800377e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2c      	ldr	r2, [pc, #176]	; (800384c <UART_SetConfig+0x114>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d103      	bne.n	80037a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037a0:	f7ff fa3e 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	e002      	b.n	80037ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037a8:	f7ff fa26 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 80037ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009a      	lsls	r2, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	4a22      	ldr	r2, [pc, #136]	; (8003850 <UART_SetConfig+0x118>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	0119      	lsls	r1, r3, #4
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e4:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <UART_SetConfig+0x118>)
 80037e6:	fba3 0302 	umull	r0, r3, r3, r2
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2064      	movs	r0, #100	; 0x64
 80037ee:	fb00 f303 	mul.w	r3, r0, r3
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	3332      	adds	r3, #50	; 0x32
 80037f8:	4a15      	ldr	r2, [pc, #84]	; (8003850 <UART_SetConfig+0x118>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003804:	4419      	add	r1, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f2f3 	udiv	r2, r2, r3
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <UART_SetConfig+0x118>)
 800381e:	fba3 0302 	umull	r0, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2064      	movs	r0, #100	; 0x64
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	; 0x32
 8003830:	4a07      	ldr	r2, [pc, #28]	; (8003850 <UART_SetConfig+0x118>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 020f 	and.w	r2, r3, #15
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	440a      	add	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40013800 	.word	0x40013800
 8003850:	51eb851f 	.word	0x51eb851f

08003854 <__errno>:
 8003854:	4b01      	ldr	r3, [pc, #4]	; (800385c <__errno+0x8>)
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000010 	.word	0x20000010

08003860 <__libc_init_array>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	2600      	movs	r6, #0
 8003864:	4d0c      	ldr	r5, [pc, #48]	; (8003898 <__libc_init_array+0x38>)
 8003866:	4c0d      	ldr	r4, [pc, #52]	; (800389c <__libc_init_array+0x3c>)
 8003868:	1b64      	subs	r4, r4, r5
 800386a:	10a4      	asrs	r4, r4, #2
 800386c:	42a6      	cmp	r6, r4
 800386e:	d109      	bne.n	8003884 <__libc_init_array+0x24>
 8003870:	f001 fa08 	bl	8004c84 <_init>
 8003874:	2600      	movs	r6, #0
 8003876:	4d0a      	ldr	r5, [pc, #40]	; (80038a0 <__libc_init_array+0x40>)
 8003878:	4c0a      	ldr	r4, [pc, #40]	; (80038a4 <__libc_init_array+0x44>)
 800387a:	1b64      	subs	r4, r4, r5
 800387c:	10a4      	asrs	r4, r4, #2
 800387e:	42a6      	cmp	r6, r4
 8003880:	d105      	bne.n	800388e <__libc_init_array+0x2e>
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	f855 3b04 	ldr.w	r3, [r5], #4
 8003888:	4798      	blx	r3
 800388a:	3601      	adds	r6, #1
 800388c:	e7ee      	b.n	800386c <__libc_init_array+0xc>
 800388e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003892:	4798      	blx	r3
 8003894:	3601      	adds	r6, #1
 8003896:	e7f2      	b.n	800387e <__libc_init_array+0x1e>
 8003898:	08004f1c 	.word	0x08004f1c
 800389c:	08004f1c 	.word	0x08004f1c
 80038a0:	08004f1c 	.word	0x08004f1c
 80038a4:	08004f20 	.word	0x08004f20

080038a8 <memset>:
 80038a8:	4603      	mov	r3, r0
 80038aa:	4402      	add	r2, r0
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d100      	bne.n	80038b2 <memset+0xa>
 80038b0:	4770      	bx	lr
 80038b2:	f803 1b01 	strb.w	r1, [r3], #1
 80038b6:	e7f9      	b.n	80038ac <memset+0x4>

080038b8 <iprintf>:
 80038b8:	b40f      	push	{r0, r1, r2, r3}
 80038ba:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <iprintf+0x2c>)
 80038bc:	b513      	push	{r0, r1, r4, lr}
 80038be:	681c      	ldr	r4, [r3, #0]
 80038c0:	b124      	cbz	r4, 80038cc <iprintf+0x14>
 80038c2:	69a3      	ldr	r3, [r4, #24]
 80038c4:	b913      	cbnz	r3, 80038cc <iprintf+0x14>
 80038c6:	4620      	mov	r0, r4
 80038c8:	f000 fa7a 	bl	8003dc0 <__sinit>
 80038cc:	ab05      	add	r3, sp, #20
 80038ce:	4620      	mov	r0, r4
 80038d0:	9a04      	ldr	r2, [sp, #16]
 80038d2:	68a1      	ldr	r1, [r4, #8]
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	f000 fdd9 	bl	800448c <_vfiprintf_r>
 80038da:	b002      	add	sp, #8
 80038dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e0:	b004      	add	sp, #16
 80038e2:	4770      	bx	lr
 80038e4:	20000010 	.word	0x20000010

080038e8 <_puts_r>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	460e      	mov	r6, r1
 80038ec:	4605      	mov	r5, r0
 80038ee:	b118      	cbz	r0, 80038f8 <_puts_r+0x10>
 80038f0:	6983      	ldr	r3, [r0, #24]
 80038f2:	b90b      	cbnz	r3, 80038f8 <_puts_r+0x10>
 80038f4:	f000 fa64 	bl	8003dc0 <__sinit>
 80038f8:	69ab      	ldr	r3, [r5, #24]
 80038fa:	68ac      	ldr	r4, [r5, #8]
 80038fc:	b913      	cbnz	r3, 8003904 <_puts_r+0x1c>
 80038fe:	4628      	mov	r0, r5
 8003900:	f000 fa5e 	bl	8003dc0 <__sinit>
 8003904:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <_puts_r+0xd0>)
 8003906:	429c      	cmp	r4, r3
 8003908:	d120      	bne.n	800394c <_puts_r+0x64>
 800390a:	686c      	ldr	r4, [r5, #4]
 800390c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800390e:	07db      	lsls	r3, r3, #31
 8003910:	d405      	bmi.n	800391e <_puts_r+0x36>
 8003912:	89a3      	ldrh	r3, [r4, #12]
 8003914:	0598      	lsls	r0, r3, #22
 8003916:	d402      	bmi.n	800391e <_puts_r+0x36>
 8003918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800391a:	f000 faef 	bl	8003efc <__retarget_lock_acquire_recursive>
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	0719      	lsls	r1, r3, #28
 8003922:	d51d      	bpl.n	8003960 <_puts_r+0x78>
 8003924:	6923      	ldr	r3, [r4, #16]
 8003926:	b1db      	cbz	r3, 8003960 <_puts_r+0x78>
 8003928:	3e01      	subs	r6, #1
 800392a:	68a3      	ldr	r3, [r4, #8]
 800392c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003930:	3b01      	subs	r3, #1
 8003932:	60a3      	str	r3, [r4, #8]
 8003934:	bb39      	cbnz	r1, 8003986 <_puts_r+0x9e>
 8003936:	2b00      	cmp	r3, #0
 8003938:	da38      	bge.n	80039ac <_puts_r+0xc4>
 800393a:	4622      	mov	r2, r4
 800393c:	210a      	movs	r1, #10
 800393e:	4628      	mov	r0, r5
 8003940:	f000 f868 	bl	8003a14 <__swbuf_r>
 8003944:	3001      	adds	r0, #1
 8003946:	d011      	beq.n	800396c <_puts_r+0x84>
 8003948:	250a      	movs	r5, #10
 800394a:	e011      	b.n	8003970 <_puts_r+0x88>
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <_puts_r+0xd4>)
 800394e:	429c      	cmp	r4, r3
 8003950:	d101      	bne.n	8003956 <_puts_r+0x6e>
 8003952:	68ac      	ldr	r4, [r5, #8]
 8003954:	e7da      	b.n	800390c <_puts_r+0x24>
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <_puts_r+0xd8>)
 8003958:	429c      	cmp	r4, r3
 800395a:	bf08      	it	eq
 800395c:	68ec      	ldreq	r4, [r5, #12]
 800395e:	e7d5      	b.n	800390c <_puts_r+0x24>
 8003960:	4621      	mov	r1, r4
 8003962:	4628      	mov	r0, r5
 8003964:	f000 f8a8 	bl	8003ab8 <__swsetup_r>
 8003968:	2800      	cmp	r0, #0
 800396a:	d0dd      	beq.n	8003928 <_puts_r+0x40>
 800396c:	f04f 35ff 	mov.w	r5, #4294967295
 8003970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003972:	07da      	lsls	r2, r3, #31
 8003974:	d405      	bmi.n	8003982 <_puts_r+0x9a>
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	059b      	lsls	r3, r3, #22
 800397a:	d402      	bmi.n	8003982 <_puts_r+0x9a>
 800397c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800397e:	f000 fabe 	bl	8003efe <__retarget_lock_release_recursive>
 8003982:	4628      	mov	r0, r5
 8003984:	bd70      	pop	{r4, r5, r6, pc}
 8003986:	2b00      	cmp	r3, #0
 8003988:	da04      	bge.n	8003994 <_puts_r+0xac>
 800398a:	69a2      	ldr	r2, [r4, #24]
 800398c:	429a      	cmp	r2, r3
 800398e:	dc06      	bgt.n	800399e <_puts_r+0xb6>
 8003990:	290a      	cmp	r1, #10
 8003992:	d004      	beq.n	800399e <_puts_r+0xb6>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	6022      	str	r2, [r4, #0]
 800399a:	7019      	strb	r1, [r3, #0]
 800399c:	e7c5      	b.n	800392a <_puts_r+0x42>
 800399e:	4622      	mov	r2, r4
 80039a0:	4628      	mov	r0, r5
 80039a2:	f000 f837 	bl	8003a14 <__swbuf_r>
 80039a6:	3001      	adds	r0, #1
 80039a8:	d1bf      	bne.n	800392a <_puts_r+0x42>
 80039aa:	e7df      	b.n	800396c <_puts_r+0x84>
 80039ac:	250a      	movs	r5, #10
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	6022      	str	r2, [r4, #0]
 80039b4:	701d      	strb	r5, [r3, #0]
 80039b6:	e7db      	b.n	8003970 <_puts_r+0x88>
 80039b8:	08004ea8 	.word	0x08004ea8
 80039bc:	08004ec8 	.word	0x08004ec8
 80039c0:	08004e88 	.word	0x08004e88

080039c4 <puts>:
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <puts+0xc>)
 80039c6:	4601      	mov	r1, r0
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	f7ff bf8d 	b.w	80038e8 <_puts_r>
 80039ce:	bf00      	nop
 80039d0:	20000010 	.word	0x20000010

080039d4 <siprintf>:
 80039d4:	b40e      	push	{r1, r2, r3}
 80039d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039da:	b500      	push	{lr}
 80039dc:	b09c      	sub	sp, #112	; 0x70
 80039de:	ab1d      	add	r3, sp, #116	; 0x74
 80039e0:	9002      	str	r0, [sp, #8]
 80039e2:	9006      	str	r0, [sp, #24]
 80039e4:	9107      	str	r1, [sp, #28]
 80039e6:	9104      	str	r1, [sp, #16]
 80039e8:	4808      	ldr	r0, [pc, #32]	; (8003a0c <siprintf+0x38>)
 80039ea:	4909      	ldr	r1, [pc, #36]	; (8003a10 <siprintf+0x3c>)
 80039ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80039f0:	9105      	str	r1, [sp, #20]
 80039f2:	6800      	ldr	r0, [r0, #0]
 80039f4:	a902      	add	r1, sp, #8
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	f000 fc20 	bl	800423c <_svfiprintf_r>
 80039fc:	2200      	movs	r2, #0
 80039fe:	9b02      	ldr	r3, [sp, #8]
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	b01c      	add	sp, #112	; 0x70
 8003a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a08:	b003      	add	sp, #12
 8003a0a:	4770      	bx	lr
 8003a0c:	20000010 	.word	0x20000010
 8003a10:	ffff0208 	.word	0xffff0208

08003a14 <__swbuf_r>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	460e      	mov	r6, r1
 8003a18:	4614      	mov	r4, r2
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	b118      	cbz	r0, 8003a26 <__swbuf_r+0x12>
 8003a1e:	6983      	ldr	r3, [r0, #24]
 8003a20:	b90b      	cbnz	r3, 8003a26 <__swbuf_r+0x12>
 8003a22:	f000 f9cd 	bl	8003dc0 <__sinit>
 8003a26:	4b21      	ldr	r3, [pc, #132]	; (8003aac <__swbuf_r+0x98>)
 8003a28:	429c      	cmp	r4, r3
 8003a2a:	d12b      	bne.n	8003a84 <__swbuf_r+0x70>
 8003a2c:	686c      	ldr	r4, [r5, #4]
 8003a2e:	69a3      	ldr	r3, [r4, #24]
 8003a30:	60a3      	str	r3, [r4, #8]
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	071a      	lsls	r2, r3, #28
 8003a36:	d52f      	bpl.n	8003a98 <__swbuf_r+0x84>
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	b36b      	cbz	r3, 8003a98 <__swbuf_r+0x84>
 8003a3c:	6923      	ldr	r3, [r4, #16]
 8003a3e:	6820      	ldr	r0, [r4, #0]
 8003a40:	b2f6      	uxtb	r6, r6
 8003a42:	1ac0      	subs	r0, r0, r3
 8003a44:	6963      	ldr	r3, [r4, #20]
 8003a46:	4637      	mov	r7, r6
 8003a48:	4283      	cmp	r3, r0
 8003a4a:	dc04      	bgt.n	8003a56 <__swbuf_r+0x42>
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f000 f922 	bl	8003c98 <_fflush_r>
 8003a54:	bb30      	cbnz	r0, 8003aa4 <__swbuf_r+0x90>
 8003a56:	68a3      	ldr	r3, [r4, #8]
 8003a58:	3001      	adds	r0, #1
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	60a3      	str	r3, [r4, #8]
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	6022      	str	r2, [r4, #0]
 8003a64:	701e      	strb	r6, [r3, #0]
 8003a66:	6963      	ldr	r3, [r4, #20]
 8003a68:	4283      	cmp	r3, r0
 8003a6a:	d004      	beq.n	8003a76 <__swbuf_r+0x62>
 8003a6c:	89a3      	ldrh	r3, [r4, #12]
 8003a6e:	07db      	lsls	r3, r3, #31
 8003a70:	d506      	bpl.n	8003a80 <__swbuf_r+0x6c>
 8003a72:	2e0a      	cmp	r6, #10
 8003a74:	d104      	bne.n	8003a80 <__swbuf_r+0x6c>
 8003a76:	4621      	mov	r1, r4
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f000 f90d 	bl	8003c98 <_fflush_r>
 8003a7e:	b988      	cbnz	r0, 8003aa4 <__swbuf_r+0x90>
 8003a80:	4638      	mov	r0, r7
 8003a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <__swbuf_r+0x9c>)
 8003a86:	429c      	cmp	r4, r3
 8003a88:	d101      	bne.n	8003a8e <__swbuf_r+0x7a>
 8003a8a:	68ac      	ldr	r4, [r5, #8]
 8003a8c:	e7cf      	b.n	8003a2e <__swbuf_r+0x1a>
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <__swbuf_r+0xa0>)
 8003a90:	429c      	cmp	r4, r3
 8003a92:	bf08      	it	eq
 8003a94:	68ec      	ldreq	r4, [r5, #12]
 8003a96:	e7ca      	b.n	8003a2e <__swbuf_r+0x1a>
 8003a98:	4621      	mov	r1, r4
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f000 f80c 	bl	8003ab8 <__swsetup_r>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d0cb      	beq.n	8003a3c <__swbuf_r+0x28>
 8003aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8003aa8:	e7ea      	b.n	8003a80 <__swbuf_r+0x6c>
 8003aaa:	bf00      	nop
 8003aac:	08004ea8 	.word	0x08004ea8
 8003ab0:	08004ec8 	.word	0x08004ec8
 8003ab4:	08004e88 	.word	0x08004e88

08003ab8 <__swsetup_r>:
 8003ab8:	4b32      	ldr	r3, [pc, #200]	; (8003b84 <__swsetup_r+0xcc>)
 8003aba:	b570      	push	{r4, r5, r6, lr}
 8003abc:	681d      	ldr	r5, [r3, #0]
 8003abe:	4606      	mov	r6, r0
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	b125      	cbz	r5, 8003ace <__swsetup_r+0x16>
 8003ac4:	69ab      	ldr	r3, [r5, #24]
 8003ac6:	b913      	cbnz	r3, 8003ace <__swsetup_r+0x16>
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 f979 	bl	8003dc0 <__sinit>
 8003ace:	4b2e      	ldr	r3, [pc, #184]	; (8003b88 <__swsetup_r+0xd0>)
 8003ad0:	429c      	cmp	r4, r3
 8003ad2:	d10f      	bne.n	8003af4 <__swsetup_r+0x3c>
 8003ad4:	686c      	ldr	r4, [r5, #4]
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003adc:	0719      	lsls	r1, r3, #28
 8003ade:	d42c      	bmi.n	8003b3a <__swsetup_r+0x82>
 8003ae0:	06dd      	lsls	r5, r3, #27
 8003ae2:	d411      	bmi.n	8003b08 <__swsetup_r+0x50>
 8003ae4:	2309      	movs	r3, #9
 8003ae6:	6033      	str	r3, [r6, #0]
 8003ae8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	81a3      	strh	r3, [r4, #12]
 8003af2:	e03e      	b.n	8003b72 <__swsetup_r+0xba>
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <__swsetup_r+0xd4>)
 8003af6:	429c      	cmp	r4, r3
 8003af8:	d101      	bne.n	8003afe <__swsetup_r+0x46>
 8003afa:	68ac      	ldr	r4, [r5, #8]
 8003afc:	e7eb      	b.n	8003ad6 <__swsetup_r+0x1e>
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <__swsetup_r+0xd8>)
 8003b00:	429c      	cmp	r4, r3
 8003b02:	bf08      	it	eq
 8003b04:	68ec      	ldreq	r4, [r5, #12]
 8003b06:	e7e6      	b.n	8003ad6 <__swsetup_r+0x1e>
 8003b08:	0758      	lsls	r0, r3, #29
 8003b0a:	d512      	bpl.n	8003b32 <__swsetup_r+0x7a>
 8003b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b0e:	b141      	cbz	r1, 8003b22 <__swsetup_r+0x6a>
 8003b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b14:	4299      	cmp	r1, r3
 8003b16:	d002      	beq.n	8003b1e <__swsetup_r+0x66>
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f000 fa57 	bl	8003fcc <_free_r>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	6363      	str	r3, [r4, #52]	; 0x34
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b28:	81a3      	strh	r3, [r4, #12]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6063      	str	r3, [r4, #4]
 8003b2e:	6923      	ldr	r3, [r4, #16]
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	89a3      	ldrh	r3, [r4, #12]
 8003b34:	f043 0308 	orr.w	r3, r3, #8
 8003b38:	81a3      	strh	r3, [r4, #12]
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	b94b      	cbnz	r3, 8003b52 <__swsetup_r+0x9a>
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b48:	d003      	beq.n	8003b52 <__swsetup_r+0x9a>
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f000 f9fd 	bl	8003f4c <__smakebuf_r>
 8003b52:	89a0      	ldrh	r0, [r4, #12]
 8003b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b58:	f010 0301 	ands.w	r3, r0, #1
 8003b5c:	d00a      	beq.n	8003b74 <__swsetup_r+0xbc>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60a3      	str	r3, [r4, #8]
 8003b62:	6963      	ldr	r3, [r4, #20]
 8003b64:	425b      	negs	r3, r3
 8003b66:	61a3      	str	r3, [r4, #24]
 8003b68:	6923      	ldr	r3, [r4, #16]
 8003b6a:	b943      	cbnz	r3, 8003b7e <__swsetup_r+0xc6>
 8003b6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b70:	d1ba      	bne.n	8003ae8 <__swsetup_r+0x30>
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	0781      	lsls	r1, r0, #30
 8003b76:	bf58      	it	pl
 8003b78:	6963      	ldrpl	r3, [r4, #20]
 8003b7a:	60a3      	str	r3, [r4, #8]
 8003b7c:	e7f4      	b.n	8003b68 <__swsetup_r+0xb0>
 8003b7e:	2000      	movs	r0, #0
 8003b80:	e7f7      	b.n	8003b72 <__swsetup_r+0xba>
 8003b82:	bf00      	nop
 8003b84:	20000010 	.word	0x20000010
 8003b88:	08004ea8 	.word	0x08004ea8
 8003b8c:	08004ec8 	.word	0x08004ec8
 8003b90:	08004e88 	.word	0x08004e88

08003b94 <__sflush_r>:
 8003b94:	898a      	ldrh	r2, [r1, #12]
 8003b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b98:	4605      	mov	r5, r0
 8003b9a:	0710      	lsls	r0, r2, #28
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	d457      	bmi.n	8003c50 <__sflush_r+0xbc>
 8003ba0:	684b      	ldr	r3, [r1, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	dc04      	bgt.n	8003bb0 <__sflush_r+0x1c>
 8003ba6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	dc01      	bgt.n	8003bb0 <__sflush_r+0x1c>
 8003bac:	2000      	movs	r0, #0
 8003bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bb2:	2e00      	cmp	r6, #0
 8003bb4:	d0fa      	beq.n	8003bac <__sflush_r+0x18>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bbc:	682f      	ldr	r7, [r5, #0]
 8003bbe:	602b      	str	r3, [r5, #0]
 8003bc0:	d032      	beq.n	8003c28 <__sflush_r+0x94>
 8003bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	075a      	lsls	r2, r3, #29
 8003bc8:	d505      	bpl.n	8003bd6 <__sflush_r+0x42>
 8003bca:	6863      	ldr	r3, [r4, #4]
 8003bcc:	1ac0      	subs	r0, r0, r3
 8003bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bd0:	b10b      	cbz	r3, 8003bd6 <__sflush_r+0x42>
 8003bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bd4:	1ac0      	subs	r0, r0, r3
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bdc:	4628      	mov	r0, r5
 8003bde:	6a21      	ldr	r1, [r4, #32]
 8003be0:	47b0      	blx	r6
 8003be2:	1c43      	adds	r3, r0, #1
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	d106      	bne.n	8003bf6 <__sflush_r+0x62>
 8003be8:	6829      	ldr	r1, [r5, #0]
 8003bea:	291d      	cmp	r1, #29
 8003bec:	d82c      	bhi.n	8003c48 <__sflush_r+0xb4>
 8003bee:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <__sflush_r+0x100>)
 8003bf0:	40ca      	lsrs	r2, r1
 8003bf2:	07d6      	lsls	r6, r2, #31
 8003bf4:	d528      	bpl.n	8003c48 <__sflush_r+0xb4>
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	6062      	str	r2, [r4, #4]
 8003bfa:	6922      	ldr	r2, [r4, #16]
 8003bfc:	04d9      	lsls	r1, r3, #19
 8003bfe:	6022      	str	r2, [r4, #0]
 8003c00:	d504      	bpl.n	8003c0c <__sflush_r+0x78>
 8003c02:	1c42      	adds	r2, r0, #1
 8003c04:	d101      	bne.n	8003c0a <__sflush_r+0x76>
 8003c06:	682b      	ldr	r3, [r5, #0]
 8003c08:	b903      	cbnz	r3, 8003c0c <__sflush_r+0x78>
 8003c0a:	6560      	str	r0, [r4, #84]	; 0x54
 8003c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c0e:	602f      	str	r7, [r5, #0]
 8003c10:	2900      	cmp	r1, #0
 8003c12:	d0cb      	beq.n	8003bac <__sflush_r+0x18>
 8003c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c18:	4299      	cmp	r1, r3
 8003c1a:	d002      	beq.n	8003c22 <__sflush_r+0x8e>
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f000 f9d5 	bl	8003fcc <_free_r>
 8003c22:	2000      	movs	r0, #0
 8003c24:	6360      	str	r0, [r4, #52]	; 0x34
 8003c26:	e7c2      	b.n	8003bae <__sflush_r+0x1a>
 8003c28:	6a21      	ldr	r1, [r4, #32]
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	47b0      	blx	r6
 8003c30:	1c41      	adds	r1, r0, #1
 8003c32:	d1c7      	bne.n	8003bc4 <__sflush_r+0x30>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0c4      	beq.n	8003bc4 <__sflush_r+0x30>
 8003c3a:	2b1d      	cmp	r3, #29
 8003c3c:	d001      	beq.n	8003c42 <__sflush_r+0xae>
 8003c3e:	2b16      	cmp	r3, #22
 8003c40:	d101      	bne.n	8003c46 <__sflush_r+0xb2>
 8003c42:	602f      	str	r7, [r5, #0]
 8003c44:	e7b2      	b.n	8003bac <__sflush_r+0x18>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4c:	81a3      	strh	r3, [r4, #12]
 8003c4e:	e7ae      	b.n	8003bae <__sflush_r+0x1a>
 8003c50:	690f      	ldr	r7, [r1, #16]
 8003c52:	2f00      	cmp	r7, #0
 8003c54:	d0aa      	beq.n	8003bac <__sflush_r+0x18>
 8003c56:	0793      	lsls	r3, r2, #30
 8003c58:	bf18      	it	ne
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	680e      	ldr	r6, [r1, #0]
 8003c5e:	bf08      	it	eq
 8003c60:	694b      	ldreq	r3, [r1, #20]
 8003c62:	1bf6      	subs	r6, r6, r7
 8003c64:	600f      	str	r7, [r1, #0]
 8003c66:	608b      	str	r3, [r1, #8]
 8003c68:	2e00      	cmp	r6, #0
 8003c6a:	dd9f      	ble.n	8003bac <__sflush_r+0x18>
 8003c6c:	4633      	mov	r3, r6
 8003c6e:	463a      	mov	r2, r7
 8003c70:	4628      	mov	r0, r5
 8003c72:	6a21      	ldr	r1, [r4, #32]
 8003c74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003c78:	47e0      	blx	ip
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	dc06      	bgt.n	8003c8c <__sflush_r+0xf8>
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c88:	81a3      	strh	r3, [r4, #12]
 8003c8a:	e790      	b.n	8003bae <__sflush_r+0x1a>
 8003c8c:	4407      	add	r7, r0
 8003c8e:	1a36      	subs	r6, r6, r0
 8003c90:	e7ea      	b.n	8003c68 <__sflush_r+0xd4>
 8003c92:	bf00      	nop
 8003c94:	20400001 	.word	0x20400001

08003c98 <_fflush_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	690b      	ldr	r3, [r1, #16]
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	b913      	cbnz	r3, 8003ca8 <_fflush_r+0x10>
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	b118      	cbz	r0, 8003cb2 <_fflush_r+0x1a>
 8003caa:	6983      	ldr	r3, [r0, #24]
 8003cac:	b90b      	cbnz	r3, 8003cb2 <_fflush_r+0x1a>
 8003cae:	f000 f887 	bl	8003dc0 <__sinit>
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <_fflush_r+0x6c>)
 8003cb4:	429c      	cmp	r4, r3
 8003cb6:	d11b      	bne.n	8003cf0 <_fflush_r+0x58>
 8003cb8:	686c      	ldr	r4, [r5, #4]
 8003cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ef      	beq.n	8003ca2 <_fflush_r+0xa>
 8003cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cc4:	07d0      	lsls	r0, r2, #31
 8003cc6:	d404      	bmi.n	8003cd2 <_fflush_r+0x3a>
 8003cc8:	0599      	lsls	r1, r3, #22
 8003cca:	d402      	bmi.n	8003cd2 <_fflush_r+0x3a>
 8003ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cce:	f000 f915 	bl	8003efc <__retarget_lock_acquire_recursive>
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	f7ff ff5d 	bl	8003b94 <__sflush_r>
 8003cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cdc:	4605      	mov	r5, r0
 8003cde:	07da      	lsls	r2, r3, #31
 8003ce0:	d4e0      	bmi.n	8003ca4 <_fflush_r+0xc>
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	059b      	lsls	r3, r3, #22
 8003ce6:	d4dd      	bmi.n	8003ca4 <_fflush_r+0xc>
 8003ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cea:	f000 f908 	bl	8003efe <__retarget_lock_release_recursive>
 8003cee:	e7d9      	b.n	8003ca4 <_fflush_r+0xc>
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <_fflush_r+0x70>)
 8003cf2:	429c      	cmp	r4, r3
 8003cf4:	d101      	bne.n	8003cfa <_fflush_r+0x62>
 8003cf6:	68ac      	ldr	r4, [r5, #8]
 8003cf8:	e7df      	b.n	8003cba <_fflush_r+0x22>
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <_fflush_r+0x74>)
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	bf08      	it	eq
 8003d00:	68ec      	ldreq	r4, [r5, #12]
 8003d02:	e7da      	b.n	8003cba <_fflush_r+0x22>
 8003d04:	08004ea8 	.word	0x08004ea8
 8003d08:	08004ec8 	.word	0x08004ec8
 8003d0c:	08004e88 	.word	0x08004e88

08003d10 <std>:
 8003d10:	2300      	movs	r3, #0
 8003d12:	b510      	push	{r4, lr}
 8003d14:	4604      	mov	r4, r0
 8003d16:	e9c0 3300 	strd	r3, r3, [r0]
 8003d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d1e:	6083      	str	r3, [r0, #8]
 8003d20:	8181      	strh	r1, [r0, #12]
 8003d22:	6643      	str	r3, [r0, #100]	; 0x64
 8003d24:	81c2      	strh	r2, [r0, #14]
 8003d26:	6183      	str	r3, [r0, #24]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	2208      	movs	r2, #8
 8003d2c:	305c      	adds	r0, #92	; 0x5c
 8003d2e:	f7ff fdbb 	bl	80038a8 <memset>
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <std+0x38>)
 8003d34:	6224      	str	r4, [r4, #32]
 8003d36:	6263      	str	r3, [r4, #36]	; 0x24
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <std+0x3c>)
 8003d3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <std+0x40>)
 8003d3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <std+0x44>)
 8003d42:	6323      	str	r3, [r4, #48]	; 0x30
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	bf00      	nop
 8003d48:	08004a39 	.word	0x08004a39
 8003d4c:	08004a5b 	.word	0x08004a5b
 8003d50:	08004a93 	.word	0x08004a93
 8003d54:	08004ab7 	.word	0x08004ab7

08003d58 <_cleanup_r>:
 8003d58:	4901      	ldr	r1, [pc, #4]	; (8003d60 <_cleanup_r+0x8>)
 8003d5a:	f000 b8af 	b.w	8003ebc <_fwalk_reent>
 8003d5e:	bf00      	nop
 8003d60:	08003c99 	.word	0x08003c99

08003d64 <__sfmoreglue>:
 8003d64:	2268      	movs	r2, #104	; 0x68
 8003d66:	b570      	push	{r4, r5, r6, lr}
 8003d68:	1e4d      	subs	r5, r1, #1
 8003d6a:	4355      	muls	r5, r2
 8003d6c:	460e      	mov	r6, r1
 8003d6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d72:	f000 f993 	bl	800409c <_malloc_r>
 8003d76:	4604      	mov	r4, r0
 8003d78:	b140      	cbz	r0, 8003d8c <__sfmoreglue+0x28>
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	e9c0 1600 	strd	r1, r6, [r0]
 8003d80:	300c      	adds	r0, #12
 8003d82:	60a0      	str	r0, [r4, #8]
 8003d84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d88:	f7ff fd8e 	bl	80038a8 <memset>
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}

08003d90 <__sfp_lock_acquire>:
 8003d90:	4801      	ldr	r0, [pc, #4]	; (8003d98 <__sfp_lock_acquire+0x8>)
 8003d92:	f000 b8b3 	b.w	8003efc <__retarget_lock_acquire_recursive>
 8003d96:	bf00      	nop
 8003d98:	200001c5 	.word	0x200001c5

08003d9c <__sfp_lock_release>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__sfp_lock_release+0x8>)
 8003d9e:	f000 b8ae 	b.w	8003efe <__retarget_lock_release_recursive>
 8003da2:	bf00      	nop
 8003da4:	200001c5 	.word	0x200001c5

08003da8 <__sinit_lock_acquire>:
 8003da8:	4801      	ldr	r0, [pc, #4]	; (8003db0 <__sinit_lock_acquire+0x8>)
 8003daa:	f000 b8a7 	b.w	8003efc <__retarget_lock_acquire_recursive>
 8003dae:	bf00      	nop
 8003db0:	200001c6 	.word	0x200001c6

08003db4 <__sinit_lock_release>:
 8003db4:	4801      	ldr	r0, [pc, #4]	; (8003dbc <__sinit_lock_release+0x8>)
 8003db6:	f000 b8a2 	b.w	8003efe <__retarget_lock_release_recursive>
 8003dba:	bf00      	nop
 8003dbc:	200001c6 	.word	0x200001c6

08003dc0 <__sinit>:
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	f7ff fff0 	bl	8003da8 <__sinit_lock_acquire>
 8003dc8:	69a3      	ldr	r3, [r4, #24]
 8003dca:	b11b      	cbz	r3, 8003dd4 <__sinit+0x14>
 8003dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dd0:	f7ff bff0 	b.w	8003db4 <__sinit_lock_release>
 8003dd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003dd8:	6523      	str	r3, [r4, #80]	; 0x50
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <__sinit+0x68>)
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <__sinit+0x6c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003de2:	42a3      	cmp	r3, r4
 8003de4:	bf08      	it	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	4620      	mov	r0, r4
 8003dea:	bf08      	it	eq
 8003dec:	61a3      	streq	r3, [r4, #24]
 8003dee:	f000 f81f 	bl	8003e30 <__sfp>
 8003df2:	6060      	str	r0, [r4, #4]
 8003df4:	4620      	mov	r0, r4
 8003df6:	f000 f81b 	bl	8003e30 <__sfp>
 8003dfa:	60a0      	str	r0, [r4, #8]
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f000 f817 	bl	8003e30 <__sfp>
 8003e02:	2200      	movs	r2, #0
 8003e04:	2104      	movs	r1, #4
 8003e06:	60e0      	str	r0, [r4, #12]
 8003e08:	6860      	ldr	r0, [r4, #4]
 8003e0a:	f7ff ff81 	bl	8003d10 <std>
 8003e0e:	2201      	movs	r2, #1
 8003e10:	2109      	movs	r1, #9
 8003e12:	68a0      	ldr	r0, [r4, #8]
 8003e14:	f7ff ff7c 	bl	8003d10 <std>
 8003e18:	2202      	movs	r2, #2
 8003e1a:	2112      	movs	r1, #18
 8003e1c:	68e0      	ldr	r0, [r4, #12]
 8003e1e:	f7ff ff77 	bl	8003d10 <std>
 8003e22:	2301      	movs	r3, #1
 8003e24:	61a3      	str	r3, [r4, #24]
 8003e26:	e7d1      	b.n	8003dcc <__sinit+0xc>
 8003e28:	08004e84 	.word	0x08004e84
 8003e2c:	08003d59 	.word	0x08003d59

08003e30 <__sfp>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	4607      	mov	r7, r0
 8003e34:	f7ff ffac 	bl	8003d90 <__sfp_lock_acquire>
 8003e38:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <__sfp+0x84>)
 8003e3a:	681e      	ldr	r6, [r3, #0]
 8003e3c:	69b3      	ldr	r3, [r6, #24]
 8003e3e:	b913      	cbnz	r3, 8003e46 <__sfp+0x16>
 8003e40:	4630      	mov	r0, r6
 8003e42:	f7ff ffbd 	bl	8003dc0 <__sinit>
 8003e46:	3648      	adds	r6, #72	; 0x48
 8003e48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	d503      	bpl.n	8003e58 <__sfp+0x28>
 8003e50:	6833      	ldr	r3, [r6, #0]
 8003e52:	b30b      	cbz	r3, 8003e98 <__sfp+0x68>
 8003e54:	6836      	ldr	r6, [r6, #0]
 8003e56:	e7f7      	b.n	8003e48 <__sfp+0x18>
 8003e58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e5c:	b9d5      	cbnz	r5, 8003e94 <__sfp+0x64>
 8003e5e:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <__sfp+0x88>)
 8003e60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e64:	60e3      	str	r3, [r4, #12]
 8003e66:	6665      	str	r5, [r4, #100]	; 0x64
 8003e68:	f000 f847 	bl	8003efa <__retarget_lock_init_recursive>
 8003e6c:	f7ff ff96 	bl	8003d9c <__sfp_lock_release>
 8003e70:	2208      	movs	r2, #8
 8003e72:	4629      	mov	r1, r5
 8003e74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e7c:	6025      	str	r5, [r4, #0]
 8003e7e:	61a5      	str	r5, [r4, #24]
 8003e80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e84:	f7ff fd10 	bl	80038a8 <memset>
 8003e88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e90:	4620      	mov	r0, r4
 8003e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e94:	3468      	adds	r4, #104	; 0x68
 8003e96:	e7d9      	b.n	8003e4c <__sfp+0x1c>
 8003e98:	2104      	movs	r1, #4
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	f7ff ff62 	bl	8003d64 <__sfmoreglue>
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	6030      	str	r0, [r6, #0]
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d1d5      	bne.n	8003e54 <__sfp+0x24>
 8003ea8:	f7ff ff78 	bl	8003d9c <__sfp_lock_release>
 8003eac:	230c      	movs	r3, #12
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	e7ee      	b.n	8003e90 <__sfp+0x60>
 8003eb2:	bf00      	nop
 8003eb4:	08004e84 	.word	0x08004e84
 8003eb8:	ffff0001 	.word	0xffff0001

08003ebc <_fwalk_reent>:
 8003ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ec0:	4606      	mov	r6, r0
 8003ec2:	4688      	mov	r8, r1
 8003ec4:	2700      	movs	r7, #0
 8003ec6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003eca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ece:	f1b9 0901 	subs.w	r9, r9, #1
 8003ed2:	d505      	bpl.n	8003ee0 <_fwalk_reent+0x24>
 8003ed4:	6824      	ldr	r4, [r4, #0]
 8003ed6:	2c00      	cmp	r4, #0
 8003ed8:	d1f7      	bne.n	8003eca <_fwalk_reent+0xe>
 8003eda:	4638      	mov	r0, r7
 8003edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ee0:	89ab      	ldrh	r3, [r5, #12]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d907      	bls.n	8003ef6 <_fwalk_reent+0x3a>
 8003ee6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003eea:	3301      	adds	r3, #1
 8003eec:	d003      	beq.n	8003ef6 <_fwalk_reent+0x3a>
 8003eee:	4629      	mov	r1, r5
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	47c0      	blx	r8
 8003ef4:	4307      	orrs	r7, r0
 8003ef6:	3568      	adds	r5, #104	; 0x68
 8003ef8:	e7e9      	b.n	8003ece <_fwalk_reent+0x12>

08003efa <__retarget_lock_init_recursive>:
 8003efa:	4770      	bx	lr

08003efc <__retarget_lock_acquire_recursive>:
 8003efc:	4770      	bx	lr

08003efe <__retarget_lock_release_recursive>:
 8003efe:	4770      	bx	lr

08003f00 <__swhatbuf_r>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	460e      	mov	r6, r1
 8003f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f08:	4614      	mov	r4, r2
 8003f0a:	2900      	cmp	r1, #0
 8003f0c:	461d      	mov	r5, r3
 8003f0e:	b096      	sub	sp, #88	; 0x58
 8003f10:	da08      	bge.n	8003f24 <__swhatbuf_r+0x24>
 8003f12:	2200      	movs	r2, #0
 8003f14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f18:	602a      	str	r2, [r5, #0]
 8003f1a:	061a      	lsls	r2, r3, #24
 8003f1c:	d410      	bmi.n	8003f40 <__swhatbuf_r+0x40>
 8003f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f22:	e00e      	b.n	8003f42 <__swhatbuf_r+0x42>
 8003f24:	466a      	mov	r2, sp
 8003f26:	f000 fded 	bl	8004b04 <_fstat_r>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	dbf1      	blt.n	8003f12 <__swhatbuf_r+0x12>
 8003f2e:	9a01      	ldr	r2, [sp, #4]
 8003f30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f38:	425a      	negs	r2, r3
 8003f3a:	415a      	adcs	r2, r3
 8003f3c:	602a      	str	r2, [r5, #0]
 8003f3e:	e7ee      	b.n	8003f1e <__swhatbuf_r+0x1e>
 8003f40:	2340      	movs	r3, #64	; 0x40
 8003f42:	2000      	movs	r0, #0
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	b016      	add	sp, #88	; 0x58
 8003f48:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f4c <__smakebuf_r>:
 8003f4c:	898b      	ldrh	r3, [r1, #12]
 8003f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f50:	079d      	lsls	r5, r3, #30
 8003f52:	4606      	mov	r6, r0
 8003f54:	460c      	mov	r4, r1
 8003f56:	d507      	bpl.n	8003f68 <__smakebuf_r+0x1c>
 8003f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	6123      	str	r3, [r4, #16]
 8003f60:	2301      	movs	r3, #1
 8003f62:	6163      	str	r3, [r4, #20]
 8003f64:	b002      	add	sp, #8
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	466a      	mov	r2, sp
 8003f6a:	ab01      	add	r3, sp, #4
 8003f6c:	f7ff ffc8 	bl	8003f00 <__swhatbuf_r>
 8003f70:	9900      	ldr	r1, [sp, #0]
 8003f72:	4605      	mov	r5, r0
 8003f74:	4630      	mov	r0, r6
 8003f76:	f000 f891 	bl	800409c <_malloc_r>
 8003f7a:	b948      	cbnz	r0, 8003f90 <__smakebuf_r+0x44>
 8003f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f80:	059a      	lsls	r2, r3, #22
 8003f82:	d4ef      	bmi.n	8003f64 <__smakebuf_r+0x18>
 8003f84:	f023 0303 	bic.w	r3, r3, #3
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	81a3      	strh	r3, [r4, #12]
 8003f8e:	e7e3      	b.n	8003f58 <__smakebuf_r+0xc>
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <__smakebuf_r+0x7c>)
 8003f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	6020      	str	r0, [r4, #0]
 8003f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9c:	81a3      	strh	r3, [r4, #12]
 8003f9e:	9b00      	ldr	r3, [sp, #0]
 8003fa0:	6120      	str	r0, [r4, #16]
 8003fa2:	6163      	str	r3, [r4, #20]
 8003fa4:	9b01      	ldr	r3, [sp, #4]
 8003fa6:	b15b      	cbz	r3, 8003fc0 <__smakebuf_r+0x74>
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fae:	f000 fdbb 	bl	8004b28 <_isatty_r>
 8003fb2:	b128      	cbz	r0, 8003fc0 <__smakebuf_r+0x74>
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	f023 0303 	bic.w	r3, r3, #3
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	89a0      	ldrh	r0, [r4, #12]
 8003fc2:	4305      	orrs	r5, r0
 8003fc4:	81a5      	strh	r5, [r4, #12]
 8003fc6:	e7cd      	b.n	8003f64 <__smakebuf_r+0x18>
 8003fc8:	08003d59 	.word	0x08003d59

08003fcc <_free_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4605      	mov	r5, r0
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	d040      	beq.n	8004056 <_free_r+0x8a>
 8003fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fd8:	1f0c      	subs	r4, r1, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bfb8      	it	lt
 8003fde:	18e4      	addlt	r4, r4, r3
 8003fe0:	f000 fdfa 	bl	8004bd8 <__malloc_lock>
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <_free_r+0x8c>)
 8003fe6:	6813      	ldr	r3, [r2, #0]
 8003fe8:	b933      	cbnz	r3, 8003ff8 <_free_r+0x2c>
 8003fea:	6063      	str	r3, [r4, #4]
 8003fec:	6014      	str	r4, [r2, #0]
 8003fee:	4628      	mov	r0, r5
 8003ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ff4:	f000 bdf6 	b.w	8004be4 <__malloc_unlock>
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	d908      	bls.n	800400e <_free_r+0x42>
 8003ffc:	6820      	ldr	r0, [r4, #0]
 8003ffe:	1821      	adds	r1, r4, r0
 8004000:	428b      	cmp	r3, r1
 8004002:	bf01      	itttt	eq
 8004004:	6819      	ldreq	r1, [r3, #0]
 8004006:	685b      	ldreq	r3, [r3, #4]
 8004008:	1809      	addeq	r1, r1, r0
 800400a:	6021      	streq	r1, [r4, #0]
 800400c:	e7ed      	b.n	8003fea <_free_r+0x1e>
 800400e:	461a      	mov	r2, r3
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	b10b      	cbz	r3, 8004018 <_free_r+0x4c>
 8004014:	42a3      	cmp	r3, r4
 8004016:	d9fa      	bls.n	800400e <_free_r+0x42>
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	1850      	adds	r0, r2, r1
 800401c:	42a0      	cmp	r0, r4
 800401e:	d10b      	bne.n	8004038 <_free_r+0x6c>
 8004020:	6820      	ldr	r0, [r4, #0]
 8004022:	4401      	add	r1, r0
 8004024:	1850      	adds	r0, r2, r1
 8004026:	4283      	cmp	r3, r0
 8004028:	6011      	str	r1, [r2, #0]
 800402a:	d1e0      	bne.n	8003fee <_free_r+0x22>
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4401      	add	r1, r0
 8004032:	6011      	str	r1, [r2, #0]
 8004034:	6053      	str	r3, [r2, #4]
 8004036:	e7da      	b.n	8003fee <_free_r+0x22>
 8004038:	d902      	bls.n	8004040 <_free_r+0x74>
 800403a:	230c      	movs	r3, #12
 800403c:	602b      	str	r3, [r5, #0]
 800403e:	e7d6      	b.n	8003fee <_free_r+0x22>
 8004040:	6820      	ldr	r0, [r4, #0]
 8004042:	1821      	adds	r1, r4, r0
 8004044:	428b      	cmp	r3, r1
 8004046:	bf01      	itttt	eq
 8004048:	6819      	ldreq	r1, [r3, #0]
 800404a:	685b      	ldreq	r3, [r3, #4]
 800404c:	1809      	addeq	r1, r1, r0
 800404e:	6021      	streq	r1, [r4, #0]
 8004050:	6063      	str	r3, [r4, #4]
 8004052:	6054      	str	r4, [r2, #4]
 8004054:	e7cb      	b.n	8003fee <_free_r+0x22>
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	200001c8 	.word	0x200001c8

0800405c <sbrk_aligned>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4e0e      	ldr	r6, [pc, #56]	; (8004098 <sbrk_aligned+0x3c>)
 8004060:	460c      	mov	r4, r1
 8004062:	6831      	ldr	r1, [r6, #0]
 8004064:	4605      	mov	r5, r0
 8004066:	b911      	cbnz	r1, 800406e <sbrk_aligned+0x12>
 8004068:	f000 fcd6 	bl	8004a18 <_sbrk_r>
 800406c:	6030      	str	r0, [r6, #0]
 800406e:	4621      	mov	r1, r4
 8004070:	4628      	mov	r0, r5
 8004072:	f000 fcd1 	bl	8004a18 <_sbrk_r>
 8004076:	1c43      	adds	r3, r0, #1
 8004078:	d00a      	beq.n	8004090 <sbrk_aligned+0x34>
 800407a:	1cc4      	adds	r4, r0, #3
 800407c:	f024 0403 	bic.w	r4, r4, #3
 8004080:	42a0      	cmp	r0, r4
 8004082:	d007      	beq.n	8004094 <sbrk_aligned+0x38>
 8004084:	1a21      	subs	r1, r4, r0
 8004086:	4628      	mov	r0, r5
 8004088:	f000 fcc6 	bl	8004a18 <_sbrk_r>
 800408c:	3001      	adds	r0, #1
 800408e:	d101      	bne.n	8004094 <sbrk_aligned+0x38>
 8004090:	f04f 34ff 	mov.w	r4, #4294967295
 8004094:	4620      	mov	r0, r4
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	200001cc 	.word	0x200001cc

0800409c <_malloc_r>:
 800409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a0:	1ccd      	adds	r5, r1, #3
 80040a2:	f025 0503 	bic.w	r5, r5, #3
 80040a6:	3508      	adds	r5, #8
 80040a8:	2d0c      	cmp	r5, #12
 80040aa:	bf38      	it	cc
 80040ac:	250c      	movcc	r5, #12
 80040ae:	2d00      	cmp	r5, #0
 80040b0:	4607      	mov	r7, r0
 80040b2:	db01      	blt.n	80040b8 <_malloc_r+0x1c>
 80040b4:	42a9      	cmp	r1, r5
 80040b6:	d905      	bls.n	80040c4 <_malloc_r+0x28>
 80040b8:	230c      	movs	r3, #12
 80040ba:	2600      	movs	r6, #0
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4630      	mov	r0, r6
 80040c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c4:	4e2e      	ldr	r6, [pc, #184]	; (8004180 <_malloc_r+0xe4>)
 80040c6:	f000 fd87 	bl	8004bd8 <__malloc_lock>
 80040ca:	6833      	ldr	r3, [r6, #0]
 80040cc:	461c      	mov	r4, r3
 80040ce:	bb34      	cbnz	r4, 800411e <_malloc_r+0x82>
 80040d0:	4629      	mov	r1, r5
 80040d2:	4638      	mov	r0, r7
 80040d4:	f7ff ffc2 	bl	800405c <sbrk_aligned>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	4604      	mov	r4, r0
 80040dc:	d14d      	bne.n	800417a <_malloc_r+0xde>
 80040de:	6834      	ldr	r4, [r6, #0]
 80040e0:	4626      	mov	r6, r4
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	d140      	bne.n	8004168 <_malloc_r+0xcc>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	4631      	mov	r1, r6
 80040ea:	4638      	mov	r0, r7
 80040ec:	eb04 0803 	add.w	r8, r4, r3
 80040f0:	f000 fc92 	bl	8004a18 <_sbrk_r>
 80040f4:	4580      	cmp	r8, r0
 80040f6:	d13a      	bne.n	800416e <_malloc_r+0xd2>
 80040f8:	6821      	ldr	r1, [r4, #0]
 80040fa:	3503      	adds	r5, #3
 80040fc:	1a6d      	subs	r5, r5, r1
 80040fe:	f025 0503 	bic.w	r5, r5, #3
 8004102:	3508      	adds	r5, #8
 8004104:	2d0c      	cmp	r5, #12
 8004106:	bf38      	it	cc
 8004108:	250c      	movcc	r5, #12
 800410a:	4638      	mov	r0, r7
 800410c:	4629      	mov	r1, r5
 800410e:	f7ff ffa5 	bl	800405c <sbrk_aligned>
 8004112:	3001      	adds	r0, #1
 8004114:	d02b      	beq.n	800416e <_malloc_r+0xd2>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	442b      	add	r3, r5
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	e00e      	b.n	800413c <_malloc_r+0xa0>
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	1b52      	subs	r2, r2, r5
 8004122:	d41e      	bmi.n	8004162 <_malloc_r+0xc6>
 8004124:	2a0b      	cmp	r2, #11
 8004126:	d916      	bls.n	8004156 <_malloc_r+0xba>
 8004128:	1961      	adds	r1, r4, r5
 800412a:	42a3      	cmp	r3, r4
 800412c:	6025      	str	r5, [r4, #0]
 800412e:	bf18      	it	ne
 8004130:	6059      	strne	r1, [r3, #4]
 8004132:	6863      	ldr	r3, [r4, #4]
 8004134:	bf08      	it	eq
 8004136:	6031      	streq	r1, [r6, #0]
 8004138:	5162      	str	r2, [r4, r5]
 800413a:	604b      	str	r3, [r1, #4]
 800413c:	4638      	mov	r0, r7
 800413e:	f104 060b 	add.w	r6, r4, #11
 8004142:	f000 fd4f 	bl	8004be4 <__malloc_unlock>
 8004146:	f026 0607 	bic.w	r6, r6, #7
 800414a:	1d23      	adds	r3, r4, #4
 800414c:	1af2      	subs	r2, r6, r3
 800414e:	d0b6      	beq.n	80040be <_malloc_r+0x22>
 8004150:	1b9b      	subs	r3, r3, r6
 8004152:	50a3      	str	r3, [r4, r2]
 8004154:	e7b3      	b.n	80040be <_malloc_r+0x22>
 8004156:	6862      	ldr	r2, [r4, #4]
 8004158:	42a3      	cmp	r3, r4
 800415a:	bf0c      	ite	eq
 800415c:	6032      	streq	r2, [r6, #0]
 800415e:	605a      	strne	r2, [r3, #4]
 8004160:	e7ec      	b.n	800413c <_malloc_r+0xa0>
 8004162:	4623      	mov	r3, r4
 8004164:	6864      	ldr	r4, [r4, #4]
 8004166:	e7b2      	b.n	80040ce <_malloc_r+0x32>
 8004168:	4634      	mov	r4, r6
 800416a:	6876      	ldr	r6, [r6, #4]
 800416c:	e7b9      	b.n	80040e2 <_malloc_r+0x46>
 800416e:	230c      	movs	r3, #12
 8004170:	4638      	mov	r0, r7
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	f000 fd36 	bl	8004be4 <__malloc_unlock>
 8004178:	e7a1      	b.n	80040be <_malloc_r+0x22>
 800417a:	6025      	str	r5, [r4, #0]
 800417c:	e7de      	b.n	800413c <_malloc_r+0xa0>
 800417e:	bf00      	nop
 8004180:	200001c8 	.word	0x200001c8

08004184 <__ssputs_r>:
 8004184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004188:	688e      	ldr	r6, [r1, #8]
 800418a:	4682      	mov	sl, r0
 800418c:	429e      	cmp	r6, r3
 800418e:	460c      	mov	r4, r1
 8004190:	4690      	mov	r8, r2
 8004192:	461f      	mov	r7, r3
 8004194:	d838      	bhi.n	8004208 <__ssputs_r+0x84>
 8004196:	898a      	ldrh	r2, [r1, #12]
 8004198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800419c:	d032      	beq.n	8004204 <__ssputs_r+0x80>
 800419e:	6825      	ldr	r5, [r4, #0]
 80041a0:	6909      	ldr	r1, [r1, #16]
 80041a2:	3301      	adds	r3, #1
 80041a4:	eba5 0901 	sub.w	r9, r5, r1
 80041a8:	6965      	ldr	r5, [r4, #20]
 80041aa:	444b      	add	r3, r9
 80041ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041b4:	106d      	asrs	r5, r5, #1
 80041b6:	429d      	cmp	r5, r3
 80041b8:	bf38      	it	cc
 80041ba:	461d      	movcc	r5, r3
 80041bc:	0553      	lsls	r3, r2, #21
 80041be:	d531      	bpl.n	8004224 <__ssputs_r+0xa0>
 80041c0:	4629      	mov	r1, r5
 80041c2:	f7ff ff6b 	bl	800409c <_malloc_r>
 80041c6:	4606      	mov	r6, r0
 80041c8:	b950      	cbnz	r0, 80041e0 <__ssputs_r+0x5c>
 80041ca:	230c      	movs	r3, #12
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	f8ca 3000 	str.w	r3, [sl]
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e0:	464a      	mov	r2, r9
 80041e2:	6921      	ldr	r1, [r4, #16]
 80041e4:	f000 fcd0 	bl	8004b88 <memcpy>
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f2:	81a3      	strh	r3, [r4, #12]
 80041f4:	6126      	str	r6, [r4, #16]
 80041f6:	444e      	add	r6, r9
 80041f8:	6026      	str	r6, [r4, #0]
 80041fa:	463e      	mov	r6, r7
 80041fc:	6165      	str	r5, [r4, #20]
 80041fe:	eba5 0509 	sub.w	r5, r5, r9
 8004202:	60a5      	str	r5, [r4, #8]
 8004204:	42be      	cmp	r6, r7
 8004206:	d900      	bls.n	800420a <__ssputs_r+0x86>
 8004208:	463e      	mov	r6, r7
 800420a:	4632      	mov	r2, r6
 800420c:	4641      	mov	r1, r8
 800420e:	6820      	ldr	r0, [r4, #0]
 8004210:	f000 fcc8 	bl	8004ba4 <memmove>
 8004214:	68a3      	ldr	r3, [r4, #8]
 8004216:	2000      	movs	r0, #0
 8004218:	1b9b      	subs	r3, r3, r6
 800421a:	60a3      	str	r3, [r4, #8]
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	4433      	add	r3, r6
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	e7db      	b.n	80041dc <__ssputs_r+0x58>
 8004224:	462a      	mov	r2, r5
 8004226:	f000 fce3 	bl	8004bf0 <_realloc_r>
 800422a:	4606      	mov	r6, r0
 800422c:	2800      	cmp	r0, #0
 800422e:	d1e1      	bne.n	80041f4 <__ssputs_r+0x70>
 8004230:	4650      	mov	r0, sl
 8004232:	6921      	ldr	r1, [r4, #16]
 8004234:	f7ff feca 	bl	8003fcc <_free_r>
 8004238:	e7c7      	b.n	80041ca <__ssputs_r+0x46>
	...

0800423c <_svfiprintf_r>:
 800423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004240:	4698      	mov	r8, r3
 8004242:	898b      	ldrh	r3, [r1, #12]
 8004244:	4607      	mov	r7, r0
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	460d      	mov	r5, r1
 800424a:	4614      	mov	r4, r2
 800424c:	b09d      	sub	sp, #116	; 0x74
 800424e:	d50e      	bpl.n	800426e <_svfiprintf_r+0x32>
 8004250:	690b      	ldr	r3, [r1, #16]
 8004252:	b963      	cbnz	r3, 800426e <_svfiprintf_r+0x32>
 8004254:	2140      	movs	r1, #64	; 0x40
 8004256:	f7ff ff21 	bl	800409c <_malloc_r>
 800425a:	6028      	str	r0, [r5, #0]
 800425c:	6128      	str	r0, [r5, #16]
 800425e:	b920      	cbnz	r0, 800426a <_svfiprintf_r+0x2e>
 8004260:	230c      	movs	r3, #12
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	e0d1      	b.n	800440e <_svfiprintf_r+0x1d2>
 800426a:	2340      	movs	r3, #64	; 0x40
 800426c:	616b      	str	r3, [r5, #20]
 800426e:	2300      	movs	r3, #0
 8004270:	9309      	str	r3, [sp, #36]	; 0x24
 8004272:	2320      	movs	r3, #32
 8004274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004278:	2330      	movs	r3, #48	; 0x30
 800427a:	f04f 0901 	mov.w	r9, #1
 800427e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004282:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004428 <_svfiprintf_r+0x1ec>
 8004286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800428a:	4623      	mov	r3, r4
 800428c:	469a      	mov	sl, r3
 800428e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004292:	b10a      	cbz	r2, 8004298 <_svfiprintf_r+0x5c>
 8004294:	2a25      	cmp	r2, #37	; 0x25
 8004296:	d1f9      	bne.n	800428c <_svfiprintf_r+0x50>
 8004298:	ebba 0b04 	subs.w	fp, sl, r4
 800429c:	d00b      	beq.n	80042b6 <_svfiprintf_r+0x7a>
 800429e:	465b      	mov	r3, fp
 80042a0:	4622      	mov	r2, r4
 80042a2:	4629      	mov	r1, r5
 80042a4:	4638      	mov	r0, r7
 80042a6:	f7ff ff6d 	bl	8004184 <__ssputs_r>
 80042aa:	3001      	adds	r0, #1
 80042ac:	f000 80aa 	beq.w	8004404 <_svfiprintf_r+0x1c8>
 80042b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042b2:	445a      	add	r2, fp
 80042b4:	9209      	str	r2, [sp, #36]	; 0x24
 80042b6:	f89a 3000 	ldrb.w	r3, [sl]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80a2 	beq.w	8004404 <_svfiprintf_r+0x1c8>
 80042c0:	2300      	movs	r3, #0
 80042c2:	f04f 32ff 	mov.w	r2, #4294967295
 80042c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ca:	f10a 0a01 	add.w	sl, sl, #1
 80042ce:	9304      	str	r3, [sp, #16]
 80042d0:	9307      	str	r3, [sp, #28]
 80042d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042d6:	931a      	str	r3, [sp, #104]	; 0x68
 80042d8:	4654      	mov	r4, sl
 80042da:	2205      	movs	r2, #5
 80042dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e0:	4851      	ldr	r0, [pc, #324]	; (8004428 <_svfiprintf_r+0x1ec>)
 80042e2:	f000 fc43 	bl	8004b6c <memchr>
 80042e6:	9a04      	ldr	r2, [sp, #16]
 80042e8:	b9d8      	cbnz	r0, 8004322 <_svfiprintf_r+0xe6>
 80042ea:	06d0      	lsls	r0, r2, #27
 80042ec:	bf44      	itt	mi
 80042ee:	2320      	movmi	r3, #32
 80042f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042f4:	0711      	lsls	r1, r2, #28
 80042f6:	bf44      	itt	mi
 80042f8:	232b      	movmi	r3, #43	; 0x2b
 80042fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004302:	2b2a      	cmp	r3, #42	; 0x2a
 8004304:	d015      	beq.n	8004332 <_svfiprintf_r+0xf6>
 8004306:	4654      	mov	r4, sl
 8004308:	2000      	movs	r0, #0
 800430a:	f04f 0c0a 	mov.w	ip, #10
 800430e:	9a07      	ldr	r2, [sp, #28]
 8004310:	4621      	mov	r1, r4
 8004312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004316:	3b30      	subs	r3, #48	; 0x30
 8004318:	2b09      	cmp	r3, #9
 800431a:	d94e      	bls.n	80043ba <_svfiprintf_r+0x17e>
 800431c:	b1b0      	cbz	r0, 800434c <_svfiprintf_r+0x110>
 800431e:	9207      	str	r2, [sp, #28]
 8004320:	e014      	b.n	800434c <_svfiprintf_r+0x110>
 8004322:	eba0 0308 	sub.w	r3, r0, r8
 8004326:	fa09 f303 	lsl.w	r3, r9, r3
 800432a:	4313      	orrs	r3, r2
 800432c:	46a2      	mov	sl, r4
 800432e:	9304      	str	r3, [sp, #16]
 8004330:	e7d2      	b.n	80042d8 <_svfiprintf_r+0x9c>
 8004332:	9b03      	ldr	r3, [sp, #12]
 8004334:	1d19      	adds	r1, r3, #4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	9103      	str	r1, [sp, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	bfbb      	ittet	lt
 800433e:	425b      	neglt	r3, r3
 8004340:	f042 0202 	orrlt.w	r2, r2, #2
 8004344:	9307      	strge	r3, [sp, #28]
 8004346:	9307      	strlt	r3, [sp, #28]
 8004348:	bfb8      	it	lt
 800434a:	9204      	strlt	r2, [sp, #16]
 800434c:	7823      	ldrb	r3, [r4, #0]
 800434e:	2b2e      	cmp	r3, #46	; 0x2e
 8004350:	d10c      	bne.n	800436c <_svfiprintf_r+0x130>
 8004352:	7863      	ldrb	r3, [r4, #1]
 8004354:	2b2a      	cmp	r3, #42	; 0x2a
 8004356:	d135      	bne.n	80043c4 <_svfiprintf_r+0x188>
 8004358:	9b03      	ldr	r3, [sp, #12]
 800435a:	3402      	adds	r4, #2
 800435c:	1d1a      	adds	r2, r3, #4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	9203      	str	r2, [sp, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	bfb8      	it	lt
 8004366:	f04f 33ff 	movlt.w	r3, #4294967295
 800436a:	9305      	str	r3, [sp, #20]
 800436c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800442c <_svfiprintf_r+0x1f0>
 8004370:	2203      	movs	r2, #3
 8004372:	4650      	mov	r0, sl
 8004374:	7821      	ldrb	r1, [r4, #0]
 8004376:	f000 fbf9 	bl	8004b6c <memchr>
 800437a:	b140      	cbz	r0, 800438e <_svfiprintf_r+0x152>
 800437c:	2340      	movs	r3, #64	; 0x40
 800437e:	eba0 000a 	sub.w	r0, r0, sl
 8004382:	fa03 f000 	lsl.w	r0, r3, r0
 8004386:	9b04      	ldr	r3, [sp, #16]
 8004388:	3401      	adds	r4, #1
 800438a:	4303      	orrs	r3, r0
 800438c:	9304      	str	r3, [sp, #16]
 800438e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004392:	2206      	movs	r2, #6
 8004394:	4826      	ldr	r0, [pc, #152]	; (8004430 <_svfiprintf_r+0x1f4>)
 8004396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800439a:	f000 fbe7 	bl	8004b6c <memchr>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d038      	beq.n	8004414 <_svfiprintf_r+0x1d8>
 80043a2:	4b24      	ldr	r3, [pc, #144]	; (8004434 <_svfiprintf_r+0x1f8>)
 80043a4:	bb1b      	cbnz	r3, 80043ee <_svfiprintf_r+0x1b2>
 80043a6:	9b03      	ldr	r3, [sp, #12]
 80043a8:	3307      	adds	r3, #7
 80043aa:	f023 0307 	bic.w	r3, r3, #7
 80043ae:	3308      	adds	r3, #8
 80043b0:	9303      	str	r3, [sp, #12]
 80043b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b4:	4433      	add	r3, r6
 80043b6:	9309      	str	r3, [sp, #36]	; 0x24
 80043b8:	e767      	b.n	800428a <_svfiprintf_r+0x4e>
 80043ba:	460c      	mov	r4, r1
 80043bc:	2001      	movs	r0, #1
 80043be:	fb0c 3202 	mla	r2, ip, r2, r3
 80043c2:	e7a5      	b.n	8004310 <_svfiprintf_r+0xd4>
 80043c4:	2300      	movs	r3, #0
 80043c6:	f04f 0c0a 	mov.w	ip, #10
 80043ca:	4619      	mov	r1, r3
 80043cc:	3401      	adds	r4, #1
 80043ce:	9305      	str	r3, [sp, #20]
 80043d0:	4620      	mov	r0, r4
 80043d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043d6:	3a30      	subs	r2, #48	; 0x30
 80043d8:	2a09      	cmp	r2, #9
 80043da:	d903      	bls.n	80043e4 <_svfiprintf_r+0x1a8>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0c5      	beq.n	800436c <_svfiprintf_r+0x130>
 80043e0:	9105      	str	r1, [sp, #20]
 80043e2:	e7c3      	b.n	800436c <_svfiprintf_r+0x130>
 80043e4:	4604      	mov	r4, r0
 80043e6:	2301      	movs	r3, #1
 80043e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80043ec:	e7f0      	b.n	80043d0 <_svfiprintf_r+0x194>
 80043ee:	ab03      	add	r3, sp, #12
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	462a      	mov	r2, r5
 80043f4:	4638      	mov	r0, r7
 80043f6:	4b10      	ldr	r3, [pc, #64]	; (8004438 <_svfiprintf_r+0x1fc>)
 80043f8:	a904      	add	r1, sp, #16
 80043fa:	f3af 8000 	nop.w
 80043fe:	1c42      	adds	r2, r0, #1
 8004400:	4606      	mov	r6, r0
 8004402:	d1d6      	bne.n	80043b2 <_svfiprintf_r+0x176>
 8004404:	89ab      	ldrh	r3, [r5, #12]
 8004406:	065b      	lsls	r3, r3, #25
 8004408:	f53f af2c 	bmi.w	8004264 <_svfiprintf_r+0x28>
 800440c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800440e:	b01d      	add	sp, #116	; 0x74
 8004410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004414:	ab03      	add	r3, sp, #12
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	462a      	mov	r2, r5
 800441a:	4638      	mov	r0, r7
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <_svfiprintf_r+0x1fc>)
 800441e:	a904      	add	r1, sp, #16
 8004420:	f000 f9d4 	bl	80047cc <_printf_i>
 8004424:	e7eb      	b.n	80043fe <_svfiprintf_r+0x1c2>
 8004426:	bf00      	nop
 8004428:	08004ee8 	.word	0x08004ee8
 800442c:	08004eee 	.word	0x08004eee
 8004430:	08004ef2 	.word	0x08004ef2
 8004434:	00000000 	.word	0x00000000
 8004438:	08004185 	.word	0x08004185

0800443c <__sfputc_r>:
 800443c:	6893      	ldr	r3, [r2, #8]
 800443e:	b410      	push	{r4}
 8004440:	3b01      	subs	r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	6093      	str	r3, [r2, #8]
 8004446:	da07      	bge.n	8004458 <__sfputc_r+0x1c>
 8004448:	6994      	ldr	r4, [r2, #24]
 800444a:	42a3      	cmp	r3, r4
 800444c:	db01      	blt.n	8004452 <__sfputc_r+0x16>
 800444e:	290a      	cmp	r1, #10
 8004450:	d102      	bne.n	8004458 <__sfputc_r+0x1c>
 8004452:	bc10      	pop	{r4}
 8004454:	f7ff bade 	b.w	8003a14 <__swbuf_r>
 8004458:	6813      	ldr	r3, [r2, #0]
 800445a:	1c58      	adds	r0, r3, #1
 800445c:	6010      	str	r0, [r2, #0]
 800445e:	7019      	strb	r1, [r3, #0]
 8004460:	4608      	mov	r0, r1
 8004462:	bc10      	pop	{r4}
 8004464:	4770      	bx	lr

08004466 <__sfputs_r>:
 8004466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004468:	4606      	mov	r6, r0
 800446a:	460f      	mov	r7, r1
 800446c:	4614      	mov	r4, r2
 800446e:	18d5      	adds	r5, r2, r3
 8004470:	42ac      	cmp	r4, r5
 8004472:	d101      	bne.n	8004478 <__sfputs_r+0x12>
 8004474:	2000      	movs	r0, #0
 8004476:	e007      	b.n	8004488 <__sfputs_r+0x22>
 8004478:	463a      	mov	r2, r7
 800447a:	4630      	mov	r0, r6
 800447c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004480:	f7ff ffdc 	bl	800443c <__sfputc_r>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d1f3      	bne.n	8004470 <__sfputs_r+0xa>
 8004488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800448c <_vfiprintf_r>:
 800448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004490:	460d      	mov	r5, r1
 8004492:	4614      	mov	r4, r2
 8004494:	4698      	mov	r8, r3
 8004496:	4606      	mov	r6, r0
 8004498:	b09d      	sub	sp, #116	; 0x74
 800449a:	b118      	cbz	r0, 80044a4 <_vfiprintf_r+0x18>
 800449c:	6983      	ldr	r3, [r0, #24]
 800449e:	b90b      	cbnz	r3, 80044a4 <_vfiprintf_r+0x18>
 80044a0:	f7ff fc8e 	bl	8003dc0 <__sinit>
 80044a4:	4b89      	ldr	r3, [pc, #548]	; (80046cc <_vfiprintf_r+0x240>)
 80044a6:	429d      	cmp	r5, r3
 80044a8:	d11b      	bne.n	80044e2 <_vfiprintf_r+0x56>
 80044aa:	6875      	ldr	r5, [r6, #4]
 80044ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044ae:	07d9      	lsls	r1, r3, #31
 80044b0:	d405      	bmi.n	80044be <_vfiprintf_r+0x32>
 80044b2:	89ab      	ldrh	r3, [r5, #12]
 80044b4:	059a      	lsls	r2, r3, #22
 80044b6:	d402      	bmi.n	80044be <_vfiprintf_r+0x32>
 80044b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ba:	f7ff fd1f 	bl	8003efc <__retarget_lock_acquire_recursive>
 80044be:	89ab      	ldrh	r3, [r5, #12]
 80044c0:	071b      	lsls	r3, r3, #28
 80044c2:	d501      	bpl.n	80044c8 <_vfiprintf_r+0x3c>
 80044c4:	692b      	ldr	r3, [r5, #16]
 80044c6:	b9eb      	cbnz	r3, 8004504 <_vfiprintf_r+0x78>
 80044c8:	4629      	mov	r1, r5
 80044ca:	4630      	mov	r0, r6
 80044cc:	f7ff faf4 	bl	8003ab8 <__swsetup_r>
 80044d0:	b1c0      	cbz	r0, 8004504 <_vfiprintf_r+0x78>
 80044d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044d4:	07dc      	lsls	r4, r3, #31
 80044d6:	d50e      	bpl.n	80044f6 <_vfiprintf_r+0x6a>
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	b01d      	add	sp, #116	; 0x74
 80044de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e2:	4b7b      	ldr	r3, [pc, #492]	; (80046d0 <_vfiprintf_r+0x244>)
 80044e4:	429d      	cmp	r5, r3
 80044e6:	d101      	bne.n	80044ec <_vfiprintf_r+0x60>
 80044e8:	68b5      	ldr	r5, [r6, #8]
 80044ea:	e7df      	b.n	80044ac <_vfiprintf_r+0x20>
 80044ec:	4b79      	ldr	r3, [pc, #484]	; (80046d4 <_vfiprintf_r+0x248>)
 80044ee:	429d      	cmp	r5, r3
 80044f0:	bf08      	it	eq
 80044f2:	68f5      	ldreq	r5, [r6, #12]
 80044f4:	e7da      	b.n	80044ac <_vfiprintf_r+0x20>
 80044f6:	89ab      	ldrh	r3, [r5, #12]
 80044f8:	0598      	lsls	r0, r3, #22
 80044fa:	d4ed      	bmi.n	80044d8 <_vfiprintf_r+0x4c>
 80044fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044fe:	f7ff fcfe 	bl	8003efe <__retarget_lock_release_recursive>
 8004502:	e7e9      	b.n	80044d8 <_vfiprintf_r+0x4c>
 8004504:	2300      	movs	r3, #0
 8004506:	9309      	str	r3, [sp, #36]	; 0x24
 8004508:	2320      	movs	r3, #32
 800450a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800450e:	2330      	movs	r3, #48	; 0x30
 8004510:	f04f 0901 	mov.w	r9, #1
 8004514:	f8cd 800c 	str.w	r8, [sp, #12]
 8004518:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046d8 <_vfiprintf_r+0x24c>
 800451c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004520:	4623      	mov	r3, r4
 8004522:	469a      	mov	sl, r3
 8004524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004528:	b10a      	cbz	r2, 800452e <_vfiprintf_r+0xa2>
 800452a:	2a25      	cmp	r2, #37	; 0x25
 800452c:	d1f9      	bne.n	8004522 <_vfiprintf_r+0x96>
 800452e:	ebba 0b04 	subs.w	fp, sl, r4
 8004532:	d00b      	beq.n	800454c <_vfiprintf_r+0xc0>
 8004534:	465b      	mov	r3, fp
 8004536:	4622      	mov	r2, r4
 8004538:	4629      	mov	r1, r5
 800453a:	4630      	mov	r0, r6
 800453c:	f7ff ff93 	bl	8004466 <__sfputs_r>
 8004540:	3001      	adds	r0, #1
 8004542:	f000 80aa 	beq.w	800469a <_vfiprintf_r+0x20e>
 8004546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004548:	445a      	add	r2, fp
 800454a:	9209      	str	r2, [sp, #36]	; 0x24
 800454c:	f89a 3000 	ldrb.w	r3, [sl]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80a2 	beq.w	800469a <_vfiprintf_r+0x20e>
 8004556:	2300      	movs	r3, #0
 8004558:	f04f 32ff 	mov.w	r2, #4294967295
 800455c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004560:	f10a 0a01 	add.w	sl, sl, #1
 8004564:	9304      	str	r3, [sp, #16]
 8004566:	9307      	str	r3, [sp, #28]
 8004568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800456c:	931a      	str	r3, [sp, #104]	; 0x68
 800456e:	4654      	mov	r4, sl
 8004570:	2205      	movs	r2, #5
 8004572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004576:	4858      	ldr	r0, [pc, #352]	; (80046d8 <_vfiprintf_r+0x24c>)
 8004578:	f000 faf8 	bl	8004b6c <memchr>
 800457c:	9a04      	ldr	r2, [sp, #16]
 800457e:	b9d8      	cbnz	r0, 80045b8 <_vfiprintf_r+0x12c>
 8004580:	06d1      	lsls	r1, r2, #27
 8004582:	bf44      	itt	mi
 8004584:	2320      	movmi	r3, #32
 8004586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800458a:	0713      	lsls	r3, r2, #28
 800458c:	bf44      	itt	mi
 800458e:	232b      	movmi	r3, #43	; 0x2b
 8004590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004594:	f89a 3000 	ldrb.w	r3, [sl]
 8004598:	2b2a      	cmp	r3, #42	; 0x2a
 800459a:	d015      	beq.n	80045c8 <_vfiprintf_r+0x13c>
 800459c:	4654      	mov	r4, sl
 800459e:	2000      	movs	r0, #0
 80045a0:	f04f 0c0a 	mov.w	ip, #10
 80045a4:	9a07      	ldr	r2, [sp, #28]
 80045a6:	4621      	mov	r1, r4
 80045a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ac:	3b30      	subs	r3, #48	; 0x30
 80045ae:	2b09      	cmp	r3, #9
 80045b0:	d94e      	bls.n	8004650 <_vfiprintf_r+0x1c4>
 80045b2:	b1b0      	cbz	r0, 80045e2 <_vfiprintf_r+0x156>
 80045b4:	9207      	str	r2, [sp, #28]
 80045b6:	e014      	b.n	80045e2 <_vfiprintf_r+0x156>
 80045b8:	eba0 0308 	sub.w	r3, r0, r8
 80045bc:	fa09 f303 	lsl.w	r3, r9, r3
 80045c0:	4313      	orrs	r3, r2
 80045c2:	46a2      	mov	sl, r4
 80045c4:	9304      	str	r3, [sp, #16]
 80045c6:	e7d2      	b.n	800456e <_vfiprintf_r+0xe2>
 80045c8:	9b03      	ldr	r3, [sp, #12]
 80045ca:	1d19      	adds	r1, r3, #4
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	9103      	str	r1, [sp, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bfbb      	ittet	lt
 80045d4:	425b      	neglt	r3, r3
 80045d6:	f042 0202 	orrlt.w	r2, r2, #2
 80045da:	9307      	strge	r3, [sp, #28]
 80045dc:	9307      	strlt	r3, [sp, #28]
 80045de:	bfb8      	it	lt
 80045e0:	9204      	strlt	r2, [sp, #16]
 80045e2:	7823      	ldrb	r3, [r4, #0]
 80045e4:	2b2e      	cmp	r3, #46	; 0x2e
 80045e6:	d10c      	bne.n	8004602 <_vfiprintf_r+0x176>
 80045e8:	7863      	ldrb	r3, [r4, #1]
 80045ea:	2b2a      	cmp	r3, #42	; 0x2a
 80045ec:	d135      	bne.n	800465a <_vfiprintf_r+0x1ce>
 80045ee:	9b03      	ldr	r3, [sp, #12]
 80045f0:	3402      	adds	r4, #2
 80045f2:	1d1a      	adds	r2, r3, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	9203      	str	r2, [sp, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bfb8      	it	lt
 80045fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004600:	9305      	str	r3, [sp, #20]
 8004602:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80046dc <_vfiprintf_r+0x250>
 8004606:	2203      	movs	r2, #3
 8004608:	4650      	mov	r0, sl
 800460a:	7821      	ldrb	r1, [r4, #0]
 800460c:	f000 faae 	bl	8004b6c <memchr>
 8004610:	b140      	cbz	r0, 8004624 <_vfiprintf_r+0x198>
 8004612:	2340      	movs	r3, #64	; 0x40
 8004614:	eba0 000a 	sub.w	r0, r0, sl
 8004618:	fa03 f000 	lsl.w	r0, r3, r0
 800461c:	9b04      	ldr	r3, [sp, #16]
 800461e:	3401      	adds	r4, #1
 8004620:	4303      	orrs	r3, r0
 8004622:	9304      	str	r3, [sp, #16]
 8004624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004628:	2206      	movs	r2, #6
 800462a:	482d      	ldr	r0, [pc, #180]	; (80046e0 <_vfiprintf_r+0x254>)
 800462c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004630:	f000 fa9c 	bl	8004b6c <memchr>
 8004634:	2800      	cmp	r0, #0
 8004636:	d03f      	beq.n	80046b8 <_vfiprintf_r+0x22c>
 8004638:	4b2a      	ldr	r3, [pc, #168]	; (80046e4 <_vfiprintf_r+0x258>)
 800463a:	bb1b      	cbnz	r3, 8004684 <_vfiprintf_r+0x1f8>
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	3307      	adds	r3, #7
 8004640:	f023 0307 	bic.w	r3, r3, #7
 8004644:	3308      	adds	r3, #8
 8004646:	9303      	str	r3, [sp, #12]
 8004648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800464a:	443b      	add	r3, r7
 800464c:	9309      	str	r3, [sp, #36]	; 0x24
 800464e:	e767      	b.n	8004520 <_vfiprintf_r+0x94>
 8004650:	460c      	mov	r4, r1
 8004652:	2001      	movs	r0, #1
 8004654:	fb0c 3202 	mla	r2, ip, r2, r3
 8004658:	e7a5      	b.n	80045a6 <_vfiprintf_r+0x11a>
 800465a:	2300      	movs	r3, #0
 800465c:	f04f 0c0a 	mov.w	ip, #10
 8004660:	4619      	mov	r1, r3
 8004662:	3401      	adds	r4, #1
 8004664:	9305      	str	r3, [sp, #20]
 8004666:	4620      	mov	r0, r4
 8004668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800466c:	3a30      	subs	r2, #48	; 0x30
 800466e:	2a09      	cmp	r2, #9
 8004670:	d903      	bls.n	800467a <_vfiprintf_r+0x1ee>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0c5      	beq.n	8004602 <_vfiprintf_r+0x176>
 8004676:	9105      	str	r1, [sp, #20]
 8004678:	e7c3      	b.n	8004602 <_vfiprintf_r+0x176>
 800467a:	4604      	mov	r4, r0
 800467c:	2301      	movs	r3, #1
 800467e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004682:	e7f0      	b.n	8004666 <_vfiprintf_r+0x1da>
 8004684:	ab03      	add	r3, sp, #12
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	462a      	mov	r2, r5
 800468a:	4630      	mov	r0, r6
 800468c:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <_vfiprintf_r+0x25c>)
 800468e:	a904      	add	r1, sp, #16
 8004690:	f3af 8000 	nop.w
 8004694:	4607      	mov	r7, r0
 8004696:	1c78      	adds	r0, r7, #1
 8004698:	d1d6      	bne.n	8004648 <_vfiprintf_r+0x1bc>
 800469a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800469c:	07d9      	lsls	r1, r3, #31
 800469e:	d405      	bmi.n	80046ac <_vfiprintf_r+0x220>
 80046a0:	89ab      	ldrh	r3, [r5, #12]
 80046a2:	059a      	lsls	r2, r3, #22
 80046a4:	d402      	bmi.n	80046ac <_vfiprintf_r+0x220>
 80046a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046a8:	f7ff fc29 	bl	8003efe <__retarget_lock_release_recursive>
 80046ac:	89ab      	ldrh	r3, [r5, #12]
 80046ae:	065b      	lsls	r3, r3, #25
 80046b0:	f53f af12 	bmi.w	80044d8 <_vfiprintf_r+0x4c>
 80046b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046b6:	e711      	b.n	80044dc <_vfiprintf_r+0x50>
 80046b8:	ab03      	add	r3, sp, #12
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	462a      	mov	r2, r5
 80046be:	4630      	mov	r0, r6
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <_vfiprintf_r+0x25c>)
 80046c2:	a904      	add	r1, sp, #16
 80046c4:	f000 f882 	bl	80047cc <_printf_i>
 80046c8:	e7e4      	b.n	8004694 <_vfiprintf_r+0x208>
 80046ca:	bf00      	nop
 80046cc:	08004ea8 	.word	0x08004ea8
 80046d0:	08004ec8 	.word	0x08004ec8
 80046d4:	08004e88 	.word	0x08004e88
 80046d8:	08004ee8 	.word	0x08004ee8
 80046dc:	08004eee 	.word	0x08004eee
 80046e0:	08004ef2 	.word	0x08004ef2
 80046e4:	00000000 	.word	0x00000000
 80046e8:	08004467 	.word	0x08004467

080046ec <_printf_common>:
 80046ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	4616      	mov	r6, r2
 80046f2:	4699      	mov	r9, r3
 80046f4:	688a      	ldr	r2, [r1, #8]
 80046f6:	690b      	ldr	r3, [r1, #16]
 80046f8:	4607      	mov	r7, r0
 80046fa:	4293      	cmp	r3, r2
 80046fc:	bfb8      	it	lt
 80046fe:	4613      	movlt	r3, r2
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004706:	460c      	mov	r4, r1
 8004708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800470c:	b10a      	cbz	r2, 8004712 <_printf_common+0x26>
 800470e:	3301      	adds	r3, #1
 8004710:	6033      	str	r3, [r6, #0]
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	0699      	lsls	r1, r3, #26
 8004716:	bf42      	ittt	mi
 8004718:	6833      	ldrmi	r3, [r6, #0]
 800471a:	3302      	addmi	r3, #2
 800471c:	6033      	strmi	r3, [r6, #0]
 800471e:	6825      	ldr	r5, [r4, #0]
 8004720:	f015 0506 	ands.w	r5, r5, #6
 8004724:	d106      	bne.n	8004734 <_printf_common+0x48>
 8004726:	f104 0a19 	add.w	sl, r4, #25
 800472a:	68e3      	ldr	r3, [r4, #12]
 800472c:	6832      	ldr	r2, [r6, #0]
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	42ab      	cmp	r3, r5
 8004732:	dc28      	bgt.n	8004786 <_printf_common+0x9a>
 8004734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004738:	1e13      	subs	r3, r2, #0
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	bf18      	it	ne
 800473e:	2301      	movne	r3, #1
 8004740:	0692      	lsls	r2, r2, #26
 8004742:	d42d      	bmi.n	80047a0 <_printf_common+0xb4>
 8004744:	4649      	mov	r1, r9
 8004746:	4638      	mov	r0, r7
 8004748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800474c:	47c0      	blx	r8
 800474e:	3001      	adds	r0, #1
 8004750:	d020      	beq.n	8004794 <_printf_common+0xa8>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	68e5      	ldr	r5, [r4, #12]
 8004756:	f003 0306 	and.w	r3, r3, #6
 800475a:	2b04      	cmp	r3, #4
 800475c:	bf18      	it	ne
 800475e:	2500      	movne	r5, #0
 8004760:	6832      	ldr	r2, [r6, #0]
 8004762:	f04f 0600 	mov.w	r6, #0
 8004766:	68a3      	ldr	r3, [r4, #8]
 8004768:	bf08      	it	eq
 800476a:	1aad      	subeq	r5, r5, r2
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	bf08      	it	eq
 8004770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004774:	4293      	cmp	r3, r2
 8004776:	bfc4      	itt	gt
 8004778:	1a9b      	subgt	r3, r3, r2
 800477a:	18ed      	addgt	r5, r5, r3
 800477c:	341a      	adds	r4, #26
 800477e:	42b5      	cmp	r5, r6
 8004780:	d11a      	bne.n	80047b8 <_printf_common+0xcc>
 8004782:	2000      	movs	r0, #0
 8004784:	e008      	b.n	8004798 <_printf_common+0xac>
 8004786:	2301      	movs	r3, #1
 8004788:	4652      	mov	r2, sl
 800478a:	4649      	mov	r1, r9
 800478c:	4638      	mov	r0, r7
 800478e:	47c0      	blx	r8
 8004790:	3001      	adds	r0, #1
 8004792:	d103      	bne.n	800479c <_printf_common+0xb0>
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479c:	3501      	adds	r5, #1
 800479e:	e7c4      	b.n	800472a <_printf_common+0x3e>
 80047a0:	2030      	movs	r0, #48	; 0x30
 80047a2:	18e1      	adds	r1, r4, r3
 80047a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047ae:	4422      	add	r2, r4
 80047b0:	3302      	adds	r3, #2
 80047b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047b6:	e7c5      	b.n	8004744 <_printf_common+0x58>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4622      	mov	r2, r4
 80047bc:	4649      	mov	r1, r9
 80047be:	4638      	mov	r0, r7
 80047c0:	47c0      	blx	r8
 80047c2:	3001      	adds	r0, #1
 80047c4:	d0e6      	beq.n	8004794 <_printf_common+0xa8>
 80047c6:	3601      	adds	r6, #1
 80047c8:	e7d9      	b.n	800477e <_printf_common+0x92>
	...

080047cc <_printf_i>:
 80047cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d0:	7e0f      	ldrb	r7, [r1, #24]
 80047d2:	4691      	mov	r9, r2
 80047d4:	2f78      	cmp	r7, #120	; 0x78
 80047d6:	4680      	mov	r8, r0
 80047d8:	460c      	mov	r4, r1
 80047da:	469a      	mov	sl, r3
 80047dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047e2:	d807      	bhi.n	80047f4 <_printf_i+0x28>
 80047e4:	2f62      	cmp	r7, #98	; 0x62
 80047e6:	d80a      	bhi.n	80047fe <_printf_i+0x32>
 80047e8:	2f00      	cmp	r7, #0
 80047ea:	f000 80d9 	beq.w	80049a0 <_printf_i+0x1d4>
 80047ee:	2f58      	cmp	r7, #88	; 0x58
 80047f0:	f000 80a4 	beq.w	800493c <_printf_i+0x170>
 80047f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047fc:	e03a      	b.n	8004874 <_printf_i+0xa8>
 80047fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004802:	2b15      	cmp	r3, #21
 8004804:	d8f6      	bhi.n	80047f4 <_printf_i+0x28>
 8004806:	a101      	add	r1, pc, #4	; (adr r1, 800480c <_printf_i+0x40>)
 8004808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800480c:	08004865 	.word	0x08004865
 8004810:	08004879 	.word	0x08004879
 8004814:	080047f5 	.word	0x080047f5
 8004818:	080047f5 	.word	0x080047f5
 800481c:	080047f5 	.word	0x080047f5
 8004820:	080047f5 	.word	0x080047f5
 8004824:	08004879 	.word	0x08004879
 8004828:	080047f5 	.word	0x080047f5
 800482c:	080047f5 	.word	0x080047f5
 8004830:	080047f5 	.word	0x080047f5
 8004834:	080047f5 	.word	0x080047f5
 8004838:	08004987 	.word	0x08004987
 800483c:	080048a9 	.word	0x080048a9
 8004840:	08004969 	.word	0x08004969
 8004844:	080047f5 	.word	0x080047f5
 8004848:	080047f5 	.word	0x080047f5
 800484c:	080049a9 	.word	0x080049a9
 8004850:	080047f5 	.word	0x080047f5
 8004854:	080048a9 	.word	0x080048a9
 8004858:	080047f5 	.word	0x080047f5
 800485c:	080047f5 	.word	0x080047f5
 8004860:	08004971 	.word	0x08004971
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	602a      	str	r2, [r5, #0]
 800486c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004874:	2301      	movs	r3, #1
 8004876:	e0a4      	b.n	80049c2 <_printf_i+0x1f6>
 8004878:	6820      	ldr	r0, [r4, #0]
 800487a:	6829      	ldr	r1, [r5, #0]
 800487c:	0606      	lsls	r6, r0, #24
 800487e:	f101 0304 	add.w	r3, r1, #4
 8004882:	d50a      	bpl.n	800489a <_printf_i+0xce>
 8004884:	680e      	ldr	r6, [r1, #0]
 8004886:	602b      	str	r3, [r5, #0]
 8004888:	2e00      	cmp	r6, #0
 800488a:	da03      	bge.n	8004894 <_printf_i+0xc8>
 800488c:	232d      	movs	r3, #45	; 0x2d
 800488e:	4276      	negs	r6, r6
 8004890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004894:	230a      	movs	r3, #10
 8004896:	485e      	ldr	r0, [pc, #376]	; (8004a10 <_printf_i+0x244>)
 8004898:	e019      	b.n	80048ce <_printf_i+0x102>
 800489a:	680e      	ldr	r6, [r1, #0]
 800489c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048a0:	602b      	str	r3, [r5, #0]
 80048a2:	bf18      	it	ne
 80048a4:	b236      	sxthne	r6, r6
 80048a6:	e7ef      	b.n	8004888 <_printf_i+0xbc>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	6820      	ldr	r0, [r4, #0]
 80048ac:	1d19      	adds	r1, r3, #4
 80048ae:	6029      	str	r1, [r5, #0]
 80048b0:	0601      	lsls	r1, r0, #24
 80048b2:	d501      	bpl.n	80048b8 <_printf_i+0xec>
 80048b4:	681e      	ldr	r6, [r3, #0]
 80048b6:	e002      	b.n	80048be <_printf_i+0xf2>
 80048b8:	0646      	lsls	r6, r0, #25
 80048ba:	d5fb      	bpl.n	80048b4 <_printf_i+0xe8>
 80048bc:	881e      	ldrh	r6, [r3, #0]
 80048be:	2f6f      	cmp	r7, #111	; 0x6f
 80048c0:	bf0c      	ite	eq
 80048c2:	2308      	moveq	r3, #8
 80048c4:	230a      	movne	r3, #10
 80048c6:	4852      	ldr	r0, [pc, #328]	; (8004a10 <_printf_i+0x244>)
 80048c8:	2100      	movs	r1, #0
 80048ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ce:	6865      	ldr	r5, [r4, #4]
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	bfa8      	it	ge
 80048d4:	6821      	ldrge	r1, [r4, #0]
 80048d6:	60a5      	str	r5, [r4, #8]
 80048d8:	bfa4      	itt	ge
 80048da:	f021 0104 	bicge.w	r1, r1, #4
 80048de:	6021      	strge	r1, [r4, #0]
 80048e0:	b90e      	cbnz	r6, 80048e6 <_printf_i+0x11a>
 80048e2:	2d00      	cmp	r5, #0
 80048e4:	d04d      	beq.n	8004982 <_printf_i+0x1b6>
 80048e6:	4615      	mov	r5, r2
 80048e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80048ec:	fb03 6711 	mls	r7, r3, r1, r6
 80048f0:	5dc7      	ldrb	r7, [r0, r7]
 80048f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048f6:	4637      	mov	r7, r6
 80048f8:	42bb      	cmp	r3, r7
 80048fa:	460e      	mov	r6, r1
 80048fc:	d9f4      	bls.n	80048e8 <_printf_i+0x11c>
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d10b      	bne.n	800491a <_printf_i+0x14e>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	07de      	lsls	r6, r3, #31
 8004906:	d508      	bpl.n	800491a <_printf_i+0x14e>
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	6861      	ldr	r1, [r4, #4]
 800490c:	4299      	cmp	r1, r3
 800490e:	bfde      	ittt	le
 8004910:	2330      	movle	r3, #48	; 0x30
 8004912:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004916:	f105 35ff 	addle.w	r5, r5, #4294967295
 800491a:	1b52      	subs	r2, r2, r5
 800491c:	6122      	str	r2, [r4, #16]
 800491e:	464b      	mov	r3, r9
 8004920:	4621      	mov	r1, r4
 8004922:	4640      	mov	r0, r8
 8004924:	f8cd a000 	str.w	sl, [sp]
 8004928:	aa03      	add	r2, sp, #12
 800492a:	f7ff fedf 	bl	80046ec <_printf_common>
 800492e:	3001      	adds	r0, #1
 8004930:	d14c      	bne.n	80049cc <_printf_i+0x200>
 8004932:	f04f 30ff 	mov.w	r0, #4294967295
 8004936:	b004      	add	sp, #16
 8004938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493c:	4834      	ldr	r0, [pc, #208]	; (8004a10 <_printf_i+0x244>)
 800493e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004942:	6829      	ldr	r1, [r5, #0]
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	f851 6b04 	ldr.w	r6, [r1], #4
 800494a:	6029      	str	r1, [r5, #0]
 800494c:	061d      	lsls	r5, r3, #24
 800494e:	d514      	bpl.n	800497a <_printf_i+0x1ae>
 8004950:	07df      	lsls	r7, r3, #31
 8004952:	bf44      	itt	mi
 8004954:	f043 0320 	orrmi.w	r3, r3, #32
 8004958:	6023      	strmi	r3, [r4, #0]
 800495a:	b91e      	cbnz	r6, 8004964 <_printf_i+0x198>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	f023 0320 	bic.w	r3, r3, #32
 8004962:	6023      	str	r3, [r4, #0]
 8004964:	2310      	movs	r3, #16
 8004966:	e7af      	b.n	80048c8 <_printf_i+0xfc>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	f043 0320 	orr.w	r3, r3, #32
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	2378      	movs	r3, #120	; 0x78
 8004972:	4828      	ldr	r0, [pc, #160]	; (8004a14 <_printf_i+0x248>)
 8004974:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004978:	e7e3      	b.n	8004942 <_printf_i+0x176>
 800497a:	0659      	lsls	r1, r3, #25
 800497c:	bf48      	it	mi
 800497e:	b2b6      	uxthmi	r6, r6
 8004980:	e7e6      	b.n	8004950 <_printf_i+0x184>
 8004982:	4615      	mov	r5, r2
 8004984:	e7bb      	b.n	80048fe <_printf_i+0x132>
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	6826      	ldr	r6, [r4, #0]
 800498a:	1d18      	adds	r0, r3, #4
 800498c:	6961      	ldr	r1, [r4, #20]
 800498e:	6028      	str	r0, [r5, #0]
 8004990:	0635      	lsls	r5, r6, #24
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	d501      	bpl.n	800499a <_printf_i+0x1ce>
 8004996:	6019      	str	r1, [r3, #0]
 8004998:	e002      	b.n	80049a0 <_printf_i+0x1d4>
 800499a:	0670      	lsls	r0, r6, #25
 800499c:	d5fb      	bpl.n	8004996 <_printf_i+0x1ca>
 800499e:	8019      	strh	r1, [r3, #0]
 80049a0:	2300      	movs	r3, #0
 80049a2:	4615      	mov	r5, r2
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	e7ba      	b.n	800491e <_printf_i+0x152>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	2100      	movs	r1, #0
 80049ac:	1d1a      	adds	r2, r3, #4
 80049ae:	602a      	str	r2, [r5, #0]
 80049b0:	681d      	ldr	r5, [r3, #0]
 80049b2:	6862      	ldr	r2, [r4, #4]
 80049b4:	4628      	mov	r0, r5
 80049b6:	f000 f8d9 	bl	8004b6c <memchr>
 80049ba:	b108      	cbz	r0, 80049c0 <_printf_i+0x1f4>
 80049bc:	1b40      	subs	r0, r0, r5
 80049be:	6060      	str	r0, [r4, #4]
 80049c0:	6863      	ldr	r3, [r4, #4]
 80049c2:	6123      	str	r3, [r4, #16]
 80049c4:	2300      	movs	r3, #0
 80049c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ca:	e7a8      	b.n	800491e <_printf_i+0x152>
 80049cc:	462a      	mov	r2, r5
 80049ce:	4649      	mov	r1, r9
 80049d0:	4640      	mov	r0, r8
 80049d2:	6923      	ldr	r3, [r4, #16]
 80049d4:	47d0      	blx	sl
 80049d6:	3001      	adds	r0, #1
 80049d8:	d0ab      	beq.n	8004932 <_printf_i+0x166>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	079b      	lsls	r3, r3, #30
 80049de:	d413      	bmi.n	8004a08 <_printf_i+0x23c>
 80049e0:	68e0      	ldr	r0, [r4, #12]
 80049e2:	9b03      	ldr	r3, [sp, #12]
 80049e4:	4298      	cmp	r0, r3
 80049e6:	bfb8      	it	lt
 80049e8:	4618      	movlt	r0, r3
 80049ea:	e7a4      	b.n	8004936 <_printf_i+0x16a>
 80049ec:	2301      	movs	r3, #1
 80049ee:	4632      	mov	r2, r6
 80049f0:	4649      	mov	r1, r9
 80049f2:	4640      	mov	r0, r8
 80049f4:	47d0      	blx	sl
 80049f6:	3001      	adds	r0, #1
 80049f8:	d09b      	beq.n	8004932 <_printf_i+0x166>
 80049fa:	3501      	adds	r5, #1
 80049fc:	68e3      	ldr	r3, [r4, #12]
 80049fe:	9903      	ldr	r1, [sp, #12]
 8004a00:	1a5b      	subs	r3, r3, r1
 8004a02:	42ab      	cmp	r3, r5
 8004a04:	dcf2      	bgt.n	80049ec <_printf_i+0x220>
 8004a06:	e7eb      	b.n	80049e0 <_printf_i+0x214>
 8004a08:	2500      	movs	r5, #0
 8004a0a:	f104 0619 	add.w	r6, r4, #25
 8004a0e:	e7f5      	b.n	80049fc <_printf_i+0x230>
 8004a10:	08004ef9 	.word	0x08004ef9
 8004a14:	08004f0a 	.word	0x08004f0a

08004a18 <_sbrk_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	4d05      	ldr	r5, [pc, #20]	; (8004a34 <_sbrk_r+0x1c>)
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	f7fd f87a 	bl	8001b1c <_sbrk>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_sbrk_r+0x1a>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_sbrk_r+0x1a>
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	200001d0 	.word	0x200001d0

08004a38 <__sread>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a40:	f000 f906 	bl	8004c50 <_read_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	bfab      	itete	ge
 8004a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a4c:	181b      	addge	r3, r3, r0
 8004a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a52:	bfac      	ite	ge
 8004a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a56:	81a3      	strhlt	r3, [r4, #12]
 8004a58:	bd10      	pop	{r4, pc}

08004a5a <__swrite>:
 8004a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5e:	461f      	mov	r7, r3
 8004a60:	898b      	ldrh	r3, [r1, #12]
 8004a62:	4605      	mov	r5, r0
 8004a64:	05db      	lsls	r3, r3, #23
 8004a66:	460c      	mov	r4, r1
 8004a68:	4616      	mov	r6, r2
 8004a6a:	d505      	bpl.n	8004a78 <__swrite+0x1e>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	f000 f868 	bl	8004b48 <_lseek_r>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	4632      	mov	r2, r6
 8004a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	4628      	mov	r0, r5
 8004a84:	463b      	mov	r3, r7
 8004a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	f000 b817 	b.w	8004ac0 <_write_r>

08004a92 <__sseek>:
 8004a92:	b510      	push	{r4, lr}
 8004a94:	460c      	mov	r4, r1
 8004a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9a:	f000 f855 	bl	8004b48 <_lseek_r>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	bf15      	itete	ne
 8004aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aae:	81a3      	strheq	r3, [r4, #12]
 8004ab0:	bf18      	it	ne
 8004ab2:	81a3      	strhne	r3, [r4, #12]
 8004ab4:	bd10      	pop	{r4, pc}

08004ab6 <__sclose>:
 8004ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aba:	f000 b813 	b.w	8004ae4 <_close_r>
	...

08004ac0 <_write_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4d05      	ldr	r5, [pc, #20]	; (8004ae0 <_write_r+0x20>)
 8004acc:	602a      	str	r2, [r5, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f7fc ffd8 	bl	8001a84 <_write>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_write_r+0x1e>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_write_r+0x1e>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	200001d0 	.word	0x200001d0

08004ae4 <_close_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	4d05      	ldr	r5, [pc, #20]	; (8004b00 <_close_r+0x1c>)
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	602b      	str	r3, [r5, #0]
 8004af0:	f7fc ffe4 	bl	8001abc <_close>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d102      	bne.n	8004afe <_close_r+0x1a>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	b103      	cbz	r3, 8004afe <_close_r+0x1a>
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	200001d0 	.word	0x200001d0

08004b04 <_fstat_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	2300      	movs	r3, #0
 8004b08:	4d06      	ldr	r5, [pc, #24]	; (8004b24 <_fstat_r+0x20>)
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	602b      	str	r3, [r5, #0]
 8004b12:	f7fc ffde 	bl	8001ad2 <_fstat>
 8004b16:	1c43      	adds	r3, r0, #1
 8004b18:	d102      	bne.n	8004b20 <_fstat_r+0x1c>
 8004b1a:	682b      	ldr	r3, [r5, #0]
 8004b1c:	b103      	cbz	r3, 8004b20 <_fstat_r+0x1c>
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	bd38      	pop	{r3, r4, r5, pc}
 8004b22:	bf00      	nop
 8004b24:	200001d0 	.word	0x200001d0

08004b28 <_isatty_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	4d05      	ldr	r5, [pc, #20]	; (8004b44 <_isatty_r+0x1c>)
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	602b      	str	r3, [r5, #0]
 8004b34:	f7fc ffdc 	bl	8001af0 <_isatty>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d102      	bne.n	8004b42 <_isatty_r+0x1a>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	b103      	cbz	r3, 8004b42 <_isatty_r+0x1a>
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	200001d0 	.word	0x200001d0

08004b48 <_lseek_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	2200      	movs	r2, #0
 8004b52:	4d05      	ldr	r5, [pc, #20]	; (8004b68 <_lseek_r+0x20>)
 8004b54:	602a      	str	r2, [r5, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f7fc ffd4 	bl	8001b04 <_lseek>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_lseek_r+0x1e>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_lseek_r+0x1e>
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	200001d0 	.word	0x200001d0

08004b6c <memchr>:
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	b510      	push	{r4, lr}
 8004b70:	b2c9      	uxtb	r1, r1
 8004b72:	4402      	add	r2, r0
 8004b74:	4293      	cmp	r3, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	d101      	bne.n	8004b7e <memchr+0x12>
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e003      	b.n	8004b86 <memchr+0x1a>
 8004b7e:	7804      	ldrb	r4, [r0, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	428c      	cmp	r4, r1
 8004b84:	d1f6      	bne.n	8004b74 <memchr+0x8>
 8004b86:	bd10      	pop	{r4, pc}

08004b88 <memcpy>:
 8004b88:	440a      	add	r2, r1
 8004b8a:	4291      	cmp	r1, r2
 8004b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b90:	d100      	bne.n	8004b94 <memcpy+0xc>
 8004b92:	4770      	bx	lr
 8004b94:	b510      	push	{r4, lr}
 8004b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b9a:	4291      	cmp	r1, r2
 8004b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ba0:	d1f9      	bne.n	8004b96 <memcpy+0xe>
 8004ba2:	bd10      	pop	{r4, pc}

08004ba4 <memmove>:
 8004ba4:	4288      	cmp	r0, r1
 8004ba6:	b510      	push	{r4, lr}
 8004ba8:	eb01 0402 	add.w	r4, r1, r2
 8004bac:	d902      	bls.n	8004bb4 <memmove+0x10>
 8004bae:	4284      	cmp	r4, r0
 8004bb0:	4623      	mov	r3, r4
 8004bb2:	d807      	bhi.n	8004bc4 <memmove+0x20>
 8004bb4:	1e43      	subs	r3, r0, #1
 8004bb6:	42a1      	cmp	r1, r4
 8004bb8:	d008      	beq.n	8004bcc <memmove+0x28>
 8004bba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bc2:	e7f8      	b.n	8004bb6 <memmove+0x12>
 8004bc4:	4601      	mov	r1, r0
 8004bc6:	4402      	add	r2, r0
 8004bc8:	428a      	cmp	r2, r1
 8004bca:	d100      	bne.n	8004bce <memmove+0x2a>
 8004bcc:	bd10      	pop	{r4, pc}
 8004bce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bd6:	e7f7      	b.n	8004bc8 <memmove+0x24>

08004bd8 <__malloc_lock>:
 8004bd8:	4801      	ldr	r0, [pc, #4]	; (8004be0 <__malloc_lock+0x8>)
 8004bda:	f7ff b98f 	b.w	8003efc <__retarget_lock_acquire_recursive>
 8004bde:	bf00      	nop
 8004be0:	200001c4 	.word	0x200001c4

08004be4 <__malloc_unlock>:
 8004be4:	4801      	ldr	r0, [pc, #4]	; (8004bec <__malloc_unlock+0x8>)
 8004be6:	f7ff b98a 	b.w	8003efe <__retarget_lock_release_recursive>
 8004bea:	bf00      	nop
 8004bec:	200001c4 	.word	0x200001c4

08004bf0 <_realloc_r>:
 8004bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf4:	4680      	mov	r8, r0
 8004bf6:	4614      	mov	r4, r2
 8004bf8:	460e      	mov	r6, r1
 8004bfa:	b921      	cbnz	r1, 8004c06 <_realloc_r+0x16>
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c02:	f7ff ba4b 	b.w	800409c <_malloc_r>
 8004c06:	b92a      	cbnz	r2, 8004c14 <_realloc_r+0x24>
 8004c08:	f7ff f9e0 	bl	8003fcc <_free_r>
 8004c0c:	4625      	mov	r5, r4
 8004c0e:	4628      	mov	r0, r5
 8004c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c14:	f000 f82e 	bl	8004c74 <_malloc_usable_size_r>
 8004c18:	4284      	cmp	r4, r0
 8004c1a:	4607      	mov	r7, r0
 8004c1c:	d802      	bhi.n	8004c24 <_realloc_r+0x34>
 8004c1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c22:	d812      	bhi.n	8004c4a <_realloc_r+0x5a>
 8004c24:	4621      	mov	r1, r4
 8004c26:	4640      	mov	r0, r8
 8004c28:	f7ff fa38 	bl	800409c <_malloc_r>
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d0ed      	beq.n	8004c0e <_realloc_r+0x1e>
 8004c32:	42bc      	cmp	r4, r7
 8004c34:	4622      	mov	r2, r4
 8004c36:	4631      	mov	r1, r6
 8004c38:	bf28      	it	cs
 8004c3a:	463a      	movcs	r2, r7
 8004c3c:	f7ff ffa4 	bl	8004b88 <memcpy>
 8004c40:	4631      	mov	r1, r6
 8004c42:	4640      	mov	r0, r8
 8004c44:	f7ff f9c2 	bl	8003fcc <_free_r>
 8004c48:	e7e1      	b.n	8004c0e <_realloc_r+0x1e>
 8004c4a:	4635      	mov	r5, r6
 8004c4c:	e7df      	b.n	8004c0e <_realloc_r+0x1e>
	...

08004c50 <_read_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4604      	mov	r4, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4d05      	ldr	r5, [pc, #20]	; (8004c70 <_read_r+0x20>)
 8004c5c:	602a      	str	r2, [r5, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f7fc fef3 	bl	8001a4a <_read>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_read_r+0x1e>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_read_r+0x1e>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	200001d0 	.word	0x200001d0

08004c74 <_malloc_usable_size_r>:
 8004c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c78:	1f18      	subs	r0, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bfbc      	itt	lt
 8004c7e:	580b      	ldrlt	r3, [r1, r0]
 8004c80:	18c0      	addlt	r0, r0, r3
 8004c82:	4770      	bx	lr

08004c84 <_init>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	bf00      	nop
 8004c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8a:	bc08      	pop	{r3}
 8004c8c:	469e      	mov	lr, r3
 8004c8e:	4770      	bx	lr

08004c90 <_fini>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	bf00      	nop
 8004c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c96:	bc08      	pop	{r3}
 8004c98:	469e      	mov	lr, r3
 8004c9a:	4770      	bx	lr
