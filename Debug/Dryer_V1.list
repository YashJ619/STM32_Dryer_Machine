
Dryer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d3c  08004d3c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004d3c  08004d3c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d3c  08004d3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000074  08004db8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004db8  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc65  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002410  00000000  00000000  0002bd02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  0002e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  0002eef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001950d  00000000  00000000  0002fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7bc  00000000  00000000  000490cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c128  00000000  00000000  00058889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e49b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004118  00000000  00000000  000e4a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004aa4 	.word	0x08004aa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004aa4 	.word	0x08004aa4

0800014c <input_init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void input_init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b31      	ldr	r3, [pc, #196]	; (8000218 <input_init+0xcc>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a30      	ldr	r2, [pc, #192]	; (8000218 <input_init+0xcc>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b2e      	ldr	r3, [pc, #184]	; (8000218 <input_init+0xcc>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b2b      	ldr	r3, [pc, #172]	; (8000218 <input_init+0xcc>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a2a      	ldr	r2, [pc, #168]	; (8000218 <input_init+0xcc>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b28      	ldr	r3, [pc, #160]	; (8000218 <input_init+0xcc>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000182:	4b25      	ldr	r3, [pc, #148]	; (8000218 <input_init+0xcc>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a24      	ldr	r2, [pc, #144]	; (8000218 <input_init+0xcc>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b22      	ldr	r3, [pc, #136]	; (8000218 <input_init+0xcc>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0310 	and.w	r3, r3, #16
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 800019a:	f107 0310 	add.w	r3, r7, #16
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = DOOR_SW;
 80001a8:	2301      	movs	r3, #1
 80001aa:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001ac:	4b1b      	ldr	r3, [pc, #108]	; (800021c <input_init+0xd0>)
 80001ae:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 80001b0:	2301      	movs	r3, #1
 80001b2:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001b4:	2302      	movs	r3, #2
 80001b6:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001b8:	f107 0310 	add.w	r3, r7, #16
 80001bc:	4619      	mov	r1, r3
 80001be:	4818      	ldr	r0, [pc, #96]	; (8000220 <input_init+0xd4>)
 80001c0:	f001 fe8a 	bl	8001ed8 <HAL_GPIO_Init>

	GPIOx.Pin = LIMIT_SW | HEATER_SW | SEL_ROT_SW;
 80001c4:	230e      	movs	r3, #14
 80001c6:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_INPUT;
 80001c8:	2300      	movs	r3, #0
 80001ca:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 80001cc:	2301      	movs	r3, #1
 80001ce:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001d0:	2302      	movs	r3, #2
 80001d2:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	4619      	mov	r1, r3
 80001da:	4811      	ldr	r0, [pc, #68]	; (8000220 <input_init+0xd4>)
 80001dc:	f001 fe7c 	bl	8001ed8 <HAL_GPIO_Init>

	GPIOx.Pin = LED;
 80001e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e4:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80001e6:	2301      	movs	r3, #1
 80001e8:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_NOPULL;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOC, &GPIOx);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	480a      	ldr	r0, [pc, #40]	; (8000224 <input_init+0xd8>)
 80001fa:	f001 fe6d 	bl	8001ed8 <HAL_GPIO_Init>

	//HAL_GPIO_WritePin(GPIOC, LED, LOW);

	HAL_NVIC_SetPriority(EXTI0_IRQn,0,0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2100      	movs	r1, #0
 8000202:	2006      	movs	r0, #6
 8000204:	f001 fe31 	bl	8001e6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000208:	2006      	movs	r0, #6
 800020a:	f001 fe4a 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
}
 800020e:	bf00      	nop
 8000210:	3720      	adds	r7, #32
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000
 800021c:	10310000 	.word	0x10310000
 8000220:	40010800 	.word	0x40010800
 8000224:	40011000 	.word	0x40011000

08000228 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(DOOR_SW);
 800022c:	2001      	movs	r0, #1
 800022e:	f002 f807 	bl	8002240 <HAL_GPIO_EXTI_IRQHandler>
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <keypad_init>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

void keypad_init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b086      	sub	sp, #24
 800023c:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <keypad_init+0x54>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	4a12      	ldr	r2, [pc, #72]	; (800028c <keypad_init+0x54>)
 8000244:	f043 0308 	orr.w	r3, r3, #8
 8000248:	6193      	str	r3, [r2, #24]
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <keypad_init+0x54>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	f003 0308 	and.w	r3, r3, #8
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 8000256:	f107 0308 	add.w	r3, r7, #8
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = LOW_KEY | MED_KEY | HIGH_KEY | FN_KEY;
 8000264:	f640 4303 	movw	r3, #3075	; 0xc03
 8000268:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_INPUT;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 800026e:	2301      	movs	r3, #1
 8000270:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 8000272:	2303      	movs	r3, #3
 8000274:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(KEYPAD_PORT, &GPIOx);
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	4619      	mov	r1, r3
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <keypad_init+0x58>)
 800027e:	f001 fe2b 	bl	8001ed8 <HAL_GPIO_Init>
}
 8000282:	bf00      	nop
 8000284:	3718      	adds	r7, #24
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000
 8000290:	40010c00 	.word	0x40010c00

08000294 <scan_keypad>:

uint8_t scan_keypad(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 8000298:	f000 f832 	bl	8000300 <is_low_key_pressed>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d004      	beq.n	80002ac <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 80002a2:	4813      	ldr	r0, [pc, #76]	; (80002f0 <scan_keypad+0x5c>)
 80002a4:	f003 fa9e 	bl	80037e4 <puts>
		return LOW_KEY_PRESSED;
 80002a8:	2301      	movs	r3, #1
 80002aa:	e01e      	b.n	80002ea <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 80002ac:	f000 f860 	bl	8000370 <is_med_key_pressed>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d004      	beq.n	80002c0 <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 80002b6:	480f      	ldr	r0, [pc, #60]	; (80002f4 <scan_keypad+0x60>)
 80002b8:	f003 fa94 	bl	80037e4 <puts>
		return MED_KEY_PRESSED;
 80002bc:	2302      	movs	r3, #2
 80002be:	e014      	b.n	80002ea <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 80002c0:	f000 f890 	bl	80003e4 <is_high_key_pressed>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d004      	beq.n	80002d4 <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <scan_keypad+0x64>)
 80002cc:	f003 fa8a 	bl	80037e4 <puts>
		return HIGH_KEY_PRESSED;
 80002d0:	2303      	movs	r3, #3
 80002d2:	e00a      	b.n	80002ea <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 80002d4:	f000 f8c0 	bl	8000458 <is_fn_key_pressed>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d004      	beq.n	80002e8 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 80002de:	4807      	ldr	r0, [pc, #28]	; (80002fc <scan_keypad+0x68>)
 80002e0:	f003 fa80 	bl	80037e4 <puts>
		return FN_KEY_PRESSED;
 80002e4:	2304      	movs	r3, #4
 80002e6:	e000      	b.n	80002ea <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 80002e8:	2300      	movs	r3, #0
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	08004abc 	.word	0x08004abc
 80002f4:	08004ad0 	.word	0x08004ad0
 80002f8:	08004ae4 	.word	0x08004ae4
 80002fc:	08004af8 	.word	0x08004af8

08000300 <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 8000304:	f001 fcac 	bl	8001c60 <HAL_GetTick>
 8000308:	4602      	mov	r2, r0
 800030a:	4b16      	ldr	r3, [pc, #88]	; (8000364 <is_low_key_pressed+0x64>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	1ad3      	subs	r3, r2, r3
 8000310:	2b05      	cmp	r3, #5
 8000312:	d923      	bls.n	800035c <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 8000314:	2102      	movs	r1, #2
 8000316:	4814      	ldr	r0, [pc, #80]	; (8000368 <is_low_key_pressed+0x68>)
 8000318:	f001 ff62 	bl	80021e0 <HAL_GPIO_ReadPin>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d114      	bne.n	800034c <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <is_low_key_pressed+0x6c>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b01      	cmp	r3, #1
 800032a:	d112      	bne.n	8000352 <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 800032c:	2102      	movs	r1, #2
 800032e:	480e      	ldr	r0, [pc, #56]	; (8000368 <is_low_key_pressed+0x68>)
 8000330:	f001 ff56 	bl	80021e0 <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d104      	bne.n	8000344 <is_low_key_pressed+0x44>
				{
					last_state = 0;
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <is_low_key_pressed+0x6c>)
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
					return 1;
 8000340:	2301      	movs	r3, #1
 8000342:	e00c      	b.n	800035e <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <is_low_key_pressed+0x6c>)
 8000346:	2201      	movs	r2, #1
 8000348:	701a      	strb	r2, [r3, #0]
 800034a:	e002      	b.n	8000352 <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <is_low_key_pressed+0x6c>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000352:	f001 fc85 	bl	8001c60 <HAL_GetTick>
 8000356:	4603      	mov	r3, r0
 8000358:	4a02      	ldr	r2, [pc, #8]	; (8000364 <is_low_key_pressed+0x64>)
 800035a:	6013      	str	r3, [r2, #0]
	}
	return 0;
 800035c:	2300      	movs	r3, #0
}
 800035e:	4618      	mov	r0, r3
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000090 	.word	0x20000090
 8000368:	40010c00 	.word	0x40010c00
 800036c:	20000094 	.word	0x20000094

08000370 <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 8000374:	f001 fc74 	bl	8001c60 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <is_med_key_pressed+0x68>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	2b05      	cmp	r3, #5
 8000382:	d925      	bls.n	80003d0 <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 8000384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000388:	4814      	ldr	r0, [pc, #80]	; (80003dc <is_med_key_pressed+0x6c>)
 800038a:	f001 ff29 	bl	80021e0 <HAL_GPIO_ReadPin>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d115      	bne.n	80003c0 <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <is_med_key_pressed+0x70>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b01      	cmp	r3, #1
 800039c:	d113      	bne.n	80003c6 <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 800039e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003a2:	480e      	ldr	r0, [pc, #56]	; (80003dc <is_med_key_pressed+0x6c>)
 80003a4:	f001 ff1c 	bl	80021e0 <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d104      	bne.n	80003b8 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <is_med_key_pressed+0x70>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
					return 1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	e00c      	b.n	80003d2 <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <is_med_key_pressed+0x70>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	701a      	strb	r2, [r3, #0]
 80003be:	e002      	b.n	80003c6 <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <is_med_key_pressed+0x70>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80003c6:	f001 fc4b 	bl	8001c60 <HAL_GetTick>
 80003ca:	4603      	mov	r3, r0
 80003cc:	4a02      	ldr	r2, [pc, #8]	; (80003d8 <is_med_key_pressed+0x68>)
 80003ce:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80003d0:	2300      	movs	r3, #0
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000098 	.word	0x20000098
 80003dc:	40010c00 	.word	0x40010c00
 80003e0:	2000009c 	.word	0x2000009c

080003e4 <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 80003e8:	f001 fc3a 	bl	8001c60 <HAL_GetTick>
 80003ec:	4602      	mov	r2, r0
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <is_high_key_pressed+0x68>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	1ad3      	subs	r3, r2, r3
 80003f4:	2b05      	cmp	r3, #5
 80003f6:	d925      	bls.n	8000444 <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 80003f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003fc:	4814      	ldr	r0, [pc, #80]	; (8000450 <is_high_key_pressed+0x6c>)
 80003fe:	f001 feef 	bl	80021e0 <HAL_GPIO_ReadPin>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d115      	bne.n	8000434 <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <is_high_key_pressed+0x70>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	b2db      	uxtb	r3, r3
 800040e:	2b01      	cmp	r3, #1
 8000410:	d113      	bne.n	800043a <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 8000412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000416:	480e      	ldr	r0, [pc, #56]	; (8000450 <is_high_key_pressed+0x6c>)
 8000418:	f001 fee2 	bl	80021e0 <HAL_GPIO_ReadPin>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d104      	bne.n	800042c <is_high_key_pressed+0x48>
				{
					last_state = 0;
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <is_high_key_pressed+0x70>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
					return 1;
 8000428:	2301      	movs	r3, #1
 800042a:	e00c      	b.n	8000446 <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <is_high_key_pressed+0x70>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
 8000432:	e002      	b.n	800043a <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 8000434:	4b07      	ldr	r3, [pc, #28]	; (8000454 <is_high_key_pressed+0x70>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800043a:	f001 fc11 	bl	8001c60 <HAL_GetTick>
 800043e:	4603      	mov	r3, r0
 8000440:	4a02      	ldr	r2, [pc, #8]	; (800044c <is_high_key_pressed+0x68>)
 8000442:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000444:	2300      	movs	r3, #0
}
 8000446:	4618      	mov	r0, r3
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200000a0 	.word	0x200000a0
 8000450:	40010c00 	.word	0x40010c00
 8000454:	200000a4 	.word	0x200000a4

08000458 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 800045c:	f001 fc00 	bl	8001c60 <HAL_GetTick>
 8000460:	4602      	mov	r2, r0
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <is_fn_key_pressed+0x64>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	2b05      	cmp	r3, #5
 800046a:	d923      	bls.n	80004b4 <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 800046c:	2101      	movs	r1, #1
 800046e:	4814      	ldr	r0, [pc, #80]	; (80004c0 <is_fn_key_pressed+0x68>)
 8000470:	f001 feb6 	bl	80021e0 <HAL_GPIO_ReadPin>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d114      	bne.n	80004a4 <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <is_fn_key_pressed+0x6c>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b01      	cmp	r3, #1
 8000482:	d112      	bne.n	80004aa <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8000484:	2101      	movs	r1, #1
 8000486:	480e      	ldr	r0, [pc, #56]	; (80004c0 <is_fn_key_pressed+0x68>)
 8000488:	f001 feaa 	bl	80021e0 <HAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d104      	bne.n	800049c <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <is_fn_key_pressed+0x6c>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
					return 1;
 8000498:	2301      	movs	r3, #1
 800049a:	e00c      	b.n	80004b6 <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <is_fn_key_pressed+0x6c>)
 800049e:	2201      	movs	r2, #1
 80004a0:	701a      	strb	r2, [r3, #0]
 80004a2:	e002      	b.n	80004aa <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 80004a4:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <is_fn_key_pressed+0x6c>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80004aa:	f001 fbd9 	bl	8001c60 <HAL_GetTick>
 80004ae:	4603      	mov	r3, r0
 80004b0:	4a02      	ldr	r2, [pc, #8]	; (80004bc <is_fn_key_pressed+0x64>)
 80004b2:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80004b4:	2300      	movs	r3, #0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000a8 	.word	0x200000a8
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	200000ac 	.word	0x200000ac

080004c8 <lcd_gpio_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_gpio_init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
	__HAL_RCC_AFIO_CLK_ENABLE();
 80004ce:	4b47      	ldr	r3, [pc, #284]	; (80005ec <lcd_gpio_init+0x124>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a46      	ldr	r2, [pc, #280]	; (80005ec <lcd_gpio_init+0x124>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b44      	ldr	r3, [pc, #272]	; (80005ec <lcd_gpio_init+0x124>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_AFIO_REMAP_SWJ_NONJTRST();
 80004e6:	4b42      	ldr	r3, [pc, #264]	; (80005f0 <lcd_gpio_init+0x128>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
 80004ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
 80004f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
 80004fc:	4a3c      	ldr	r2, [pc, #240]	; (80005f0 <lcd_gpio_init+0x128>)
 80004fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000500:	6053      	str	r3, [r2, #4]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b3b      	ldr	r3, [pc, #236]	; (80005f0 <lcd_gpio_init+0x128>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	623b      	str	r3, [r7, #32]
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	623b      	str	r3, [r7, #32]
 8000510:	6a3b      	ldr	r3, [r7, #32]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	623b      	str	r3, [r7, #32]
 8000518:	4a35      	ldr	r2, [pc, #212]	; (80005f0 <lcd_gpio_init+0x128>)
 800051a:	6a3b      	ldr	r3, [r7, #32]
 800051c:	6053      	str	r3, [r2, #4]

	//__HAL_AFIO_REMAP_SWJ_DISABLE();

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b33      	ldr	r3, [pc, #204]	; (80005ec <lcd_gpio_init+0x124>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a32      	ldr	r2, [pc, #200]	; (80005ec <lcd_gpio_init+0x124>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b30      	ldr	r3, [pc, #192]	; (80005ec <lcd_gpio_init+0x124>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <lcd_gpio_init+0x124>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a2c      	ldr	r2, [pc, #176]	; (80005ec <lcd_gpio_init+0x124>)
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <lcd_gpio_init+0x124>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0308 	and.w	r3, r3, #8
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000562:	4824      	ldr	r0, [pc, #144]	; (80005f4 <lcd_gpio_init+0x12c>)
 8000564:	f001 fe53 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056e:	4821      	ldr	r0, [pc, #132]	; (80005f4 <lcd_gpio_init+0x12c>)
 8000570:	f001 fe4d 	bl	800220e <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_RS | LCD_PIN_EN;
 8000574:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000578:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 800057e:	2302      	movs	r3, #2
 8000580:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2302      	movs	r3, #2
 8000584:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_CTRL, &GPIOx);
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4619      	mov	r1, r3
 800058c:	4819      	ldr	r0, [pc, #100]	; (80005f4 <lcd_gpio_init+0x12c>)
 800058e:	f001 fca3 	bl	8001ed8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	21f8      	movs	r1, #248	; 0xf8
 8000596:	4817      	ldr	r0, [pc, #92]	; (80005f4 <lcd_gpio_init+0x12c>)
 8000598:	f001 fe39 	bl	800220e <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4;
 800059c:	23f8      	movs	r3, #248	; 0xf8
 800059e:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D0_4, &GPIOx);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4810      	ldr	r0, [pc, #64]	; (80005f4 <lcd_gpio_init+0x12c>)
 80005b4:	f001 fc90 	bl	8001ed8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <lcd_gpio_init+0x130>)
 80005c0:	f001 fe25 	bl	800220e <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7;
 80005c4:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80005c8:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D5_7, &GPIOx);
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	4619      	mov	r1, r3
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <lcd_gpio_init+0x130>)
 80005de:	f001 fc7b 	bl	8001ed8 <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010000 	.word	0x40010000
 80005f4:	40010c00 	.word	0x40010c00
 80005f8:	40010800 	.word	0x40010800

080005fc <lcd_init>:

void lcd_init(uint8_t fourbitmode)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d003      	beq.n	8000614 <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <lcd_init+0x28>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 8000612:	e002      	b.n	800061a <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <lcd_init+0x28>)
 8000616:	2210      	movs	r2, #16
 8000618:	701a      	strb	r2, [r3, #0]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	200000ad 	.word	0x200000ad

08000628 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
 8000632:	460b      	mov	r3, r1
 8000634:	71bb      	strb	r3, [r7, #6]
 8000636:	4613      	mov	r3, r2
 8000638:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d906      	bls.n	800064e <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <lcd_begin+0xdc>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <lcd_begin+0xdc>)
 800064c:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 800064e:	4a2e      	ldr	r2, [pc, #184]	; (8000708 <lcd_begin+0xe0>)
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 8000654:	4b2d      	ldr	r3, [pc, #180]	; (800070c <lcd_begin+0xe4>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 800065a:	797b      	ldrb	r3, [r7, #5]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d009      	beq.n	8000674 <lcd_begin+0x4c>
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d106      	bne.n	8000674 <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <lcd_begin+0xdc>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <lcd_begin+0xdc>)
 8000672:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 8000674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000678:	f001 fafc 	bl	8001c74 <HAL_Delay>
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS | LCD_PIN_EN, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000682:	4823      	ldr	r0, [pc, #140]	; (8000710 <lcd_begin+0xe8>)
 8000684:	f001 fdc3 	bl	800220e <HAL_GPIO_WritePin>
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <lcd_begin+0xdc>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f043 0320 	orr.w	r3, r3, #32
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f902 	bl	800089c <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 8000698:	200a      	movs	r0, #10
 800069a:	f001 faeb 	bl	8001c74 <HAL_Delay>

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <lcd_begin+0xdc>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f043 0320 	orr.w	r3, r3, #32
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f8f7 	bl	800089c <lcd_send_cmd>
	    HAL_Delay(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f001 fae0 	bl	8001c74 <HAL_Delay>

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <lcd_begin+0xdc>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	f043 0320 	orr.w	r3, r3, #32
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f8ec 	bl	800089c <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <lcd_begin+0xdc>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	f043 0320 	orr.w	r3, r3, #32
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 f8e4 	bl	800089c <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <lcd_begin+0xec>)
 80006d6:	2204      	movs	r2, #4
 80006d8:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 f828 	bl	8000730 <lcd_display>

	// clear it off
	lcd_clear();
 80006e0:	f000 f8f2 	bl	80008c8 <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <lcd_begin+0xf0>)
 80006e6:	2202      	movs	r2, #2
 80006e8:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <lcd_begin+0xf0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f8d1 	bl	800089c <lcd_send_cmd>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000ad 	.word	0x200000ad
 8000708:	200000b0 	.word	0x200000b0
 800070c:	200000b1 	.word	0x200000b1
 8000710:	40010c00 	.word	0x40010c00
 8000714:	200000ae 	.word	0x200000ae
 8000718:	200000af 	.word	0x200000af

0800071c <lcd_home>:

void lcd_home(void){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
 8000720:	2002      	movs	r0, #2
 8000722:	f000 f8bb 	bl	800089c <lcd_send_cmd>
	HAL_Delay(2); // this command takes a long time!
 8000726:	2002      	movs	r0, #2
 8000728:	f001 faa4 	bl	8001c74 <HAL_Delay>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <lcd_display>:

void lcd_display(uint8_t state)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	if(state)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00f      	beq.n	8000760 <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <lcd_display+0x58>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <lcd_display+0x58>)
 800074c:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <lcd_display+0x58>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f89f 	bl	800089c <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 800075e:	e00e      	b.n	800077e <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <lcd_display+0x58>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	f023 0304 	bic.w	r3, r3, #4
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <lcd_display+0x58>)
 800076c:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <lcd_display+0x58>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f88f 	bl	800089c <lcd_send_cmd>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000ae 	.word	0x200000ae

0800078c <lcd_enable>:

void lcd_enable(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <lcd_enable+0x40>)
 8000798:	f001 fd39 	bl	800220e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f001 fa69 	bl	8001c74 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a8:	4808      	ldr	r0, [pc, #32]	; (80007cc <lcd_enable+0x40>)
 80007aa:	f001 fd30 	bl	800220e <HAL_GPIO_WritePin>
	HAL_Delay(1); // enable pulse must be >450ns
 80007ae:	2001      	movs	r0, #1
 80007b0:	f001 fa60 	bl	8001c74 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <lcd_enable+0x40>)
 80007bc:	f001 fd27 	bl	800220e <HAL_GPIO_WritePin>
	HAL_Delay(1); // commands need > 37us to settle
 80007c0:	2001      	movs	r0, #1
 80007c2:	f001 fa57 	bl	8001c74 <HAL_Delay>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <write_8bit>:

void write_8bit(uint8_t value)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D7, (value >> 7) & 0x01);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	09db      	lsrs	r3, r3, #7
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e6:	482b      	ldr	r0, [pc, #172]	; (8000894 <write_8bit+0xc4>)
 80007e8:	f001 fd11 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D6, (value >> 6) & 0x01);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	099b      	lsrs	r3, r3, #6
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fe:	4825      	ldr	r0, [pc, #148]	; (8000894 <write_8bit+0xc4>)
 8000800:	f001 fd05 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5, (value >> 5) & 0x01);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	095b      	lsrs	r3, r3, #5
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	461a      	mov	r2, r3
 8000812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000816:	481f      	ldr	r0, [pc, #124]	; (8000894 <write_8bit+0xc4>)
 8000818:	f001 fcf9 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D4, (value >> 4) & 0x01);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	091b      	lsrs	r3, r3, #4
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	461a      	mov	r2, r3
 800082a:	2108      	movs	r1, #8
 800082c:	481a      	ldr	r0, [pc, #104]	; (8000898 <write_8bit+0xc8>)
 800082e:	f001 fcee 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D3, (value >> 3) & 0x01);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	2110      	movs	r1, #16
 8000842:	4815      	ldr	r0, [pc, #84]	; (8000898 <write_8bit+0xc8>)
 8000844:	f001 fce3 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D2, (value >> 2) & 0x01);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	2120      	movs	r1, #32
 8000858:	480f      	ldr	r0, [pc, #60]	; (8000898 <write_8bit+0xc8>)
 800085a:	f001 fcd8 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D1, (value >> 1) & 0x01);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	480a      	ldr	r0, [pc, #40]	; (8000898 <write_8bit+0xc8>)
 8000870:	f001 fccd 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0, (value >> 0) & 0x01);
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <write_8bit+0xc8>)
 8000882:	f001 fcc4 	bl	800220e <HAL_GPIO_WritePin>

	lcd_enable();
 8000886:	f7ff ff81 	bl	800078c <lcd_enable>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40010800 	.word	0x40010800
 8000898:	40010c00 	.word	0x40010c00

0800089c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <lcd_send_cmd+0x28>)
 80008ae:	f001 fcae 	bl	800220e <HAL_GPIO_WritePin>
	write_8bit(cmd);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff8b 	bl	80007d0 <write_8bit>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40010c00 	.word	0x40010c00

080008c8 <lcd_clear>:

void lcd_clear(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff ffe5 	bl	800089c <lcd_send_cmd>
	HAL_Delay(2);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f001 f9ce 	bl	8001c74 <HAL_Delay>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <lcd_send_data+0x28>)
 80008ee:	f001 fc8e 	bl	800220e <HAL_GPIO_WritePin>
	write_8bit(data);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff6b 	bl	80007d0 <write_8bit>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40010c00 	.word	0x40010c00

08000908 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ffe1 	bl	80008dc <lcd_send_data>
		str++;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3301      	adds	r3, #1
 800091e:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1f3      	bne.n	8000910 <lcd_print+0x8>
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b087      	sub	sp, #28
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	460a      	mov	r2, r1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <lcd_set_cursor+0x58>)
 8000946:	f107 0408 	add.w	r4, r7, #8
 800094a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800094c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _numlines) {
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <lcd_set_cursor+0x5c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	79ba      	ldrb	r2, [r7, #6]
 8000956:	429a      	cmp	r2, r3
 8000958:	d903      	bls.n	8000962 <lcd_set_cursor+0x2e>
		row = _numlines - 1; // we count rows starting w/0
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <lcd_set_cursor+0x5c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	71bb      	strb	r3, [r7, #6]
		}
	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
 8000962:	79bb      	ldrb	r3, [r7, #6]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	3318      	adds	r3, #24
 8000968:	443b      	add	r3, r7
 800096a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	4413      	add	r3, r2
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff8d 	bl	800089c <lcd_send_cmd>
}
 8000982:	bf00      	nop
 8000984:	371c      	adds	r7, #28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd90      	pop	{r4, r7, pc}
 800098a:	bf00      	nop
 800098c:	08004b08 	.word	0x08004b08
 8000990:	200000b0 	.word	0x200000b0

08000994 <lcd_update>:
void mode_level_page(void);
void limit_sw_err_page(void);
void complete_page(void);

void lcd_update(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	switch(cur_page){
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <lcd_update+0x5c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b07      	cmp	r3, #7
 800099e:	d825      	bhi.n	80009ec <lcd_update+0x58>
 80009a0:	a201      	add	r2, pc, #4	; (adr r2, 80009a8 <lcd_update+0x14>)
 80009a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a6:	bf00      	nop
 80009a8:	080009c9 	.word	0x080009c9
 80009ac:	080009cf 	.word	0x080009cf
 80009b0:	080009cf 	.word	0x080009cf
 80009b4:	080009cf 	.word	0x080009cf
 80009b8:	080009d5 	.word	0x080009d5
 80009bc:	080009db 	.word	0x080009db
 80009c0:	080009e1 	.word	0x080009e1
 80009c4:	080009e7 	.word	0x080009e7
	case INIT_PAGE:
		welcome_page();
 80009c8:	f000 f814 	bl	80009f4 <welcome_page>
		break;
 80009cc:	e00e      	b.n	80009ec <lcd_update+0x58>
	case LOW_LEVEL_PAGE:
	case MED_LEVEL_PAGE:
	case HIGH_LEVEL_PAGE:
		mode_level_page();
 80009ce:	f000 f8eb 	bl	8000ba8 <mode_level_page>
		break;
 80009d2:	e00b      	b.n	80009ec <lcd_update+0x58>
	case COMPLETE_PAGE:
		complete_page();
 80009d4:	f000 f8be 	bl	8000b54 <complete_page>
		break;
 80009d8:	e008      	b.n	80009ec <lcd_update+0x58>
	case DOOR_OPEN_PAGE:
		door_open_page();
 80009da:	f000 f83d 	bl	8000a58 <door_open_page>
		break;
 80009de:	e005      	b.n	80009ec <lcd_update+0x58>
	case LIMIT_SW_ERR_PAGE:
		limit_sw_err_page();
 80009e0:	f000 f88e 	bl	8000b00 <limit_sw_err_page>
		break;
 80009e4:	e002      	b.n	80009ec <lcd_update+0x58>
	case HEATER_COIL_PAGE:
		heater_coil_page();
 80009e6:	f000 f861 	bl	8000aac <heater_coil_page>
		break;
 80009ea:	bf00      	nop
	}

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000011a 	.word	0x2000011a

080009f4 <welcome_page>:

void welcome_page(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <welcome_page+0x50>)
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <welcome_page+0x54>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d006      	beq.n	8000a12 <welcome_page+0x1e>
	{
		lcd_clear();
 8000a04:	f7ff ff60 	bl	80008c8 <lcd_clear>
		last_page = cur_page;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <welcome_page+0x54>)
 8000a0a:	781a      	ldrb	r2, [r3, #0]
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <welcome_page+0x50>)
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e001      	b.n	8000a16 <welcome_page+0x22>
	}
	else{
		lcd_home();
 8000a12:	f7ff fe83 	bl	800071c <lcd_home>
	}
	
	lcd_set_cursor(6, 0);
 8000a16:	2100      	movs	r1, #0
 8000a18:	2006      	movs	r0, #6
 8000a1a:	f7ff ff8b 	bl	8000934 <lcd_set_cursor>
	lcd_print("WELCOME!");
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <welcome_page+0x58>)
 8000a20:	f7ff ff72 	bl	8000908 <lcd_print>
	lcd_set_cursor(3,2);
 8000a24:	2102      	movs	r1, #2
 8000a26:	2003      	movs	r0, #3
 8000a28:	f7ff ff84 	bl	8000934 <lcd_set_cursor>
	lcd_print("Select a mode");
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <welcome_page+0x5c>)
 8000a2e:	f7ff ff6b 	bl	8000908 <lcd_print>
	lcd_set_cursor(3,3);
 8000a32:	2103      	movs	r1, #3
 8000a34:	2003      	movs	r0, #3
 8000a36:	f7ff ff7d 	bl	8000934 <lcd_set_cursor>
	lcd_print("to start dryer");
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <welcome_page+0x60>)
 8000a3c:	f7ff ff64 	bl	8000908 <lcd_print>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000011b 	.word	0x2000011b
 8000a48:	2000011a 	.word	0x2000011a
 8000a4c:	08004b18 	.word	0x08004b18
 8000a50:	08004b24 	.word	0x08004b24
 8000a54:	08004b34 	.word	0x08004b34

08000a58 <door_open_page>:

void door_open_page(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <door_open_page+0x44>)
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <door_open_page+0x48>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d006      	beq.n	8000a76 <door_open_page+0x1e>
	{
		lcd_clear();
 8000a68:	f7ff ff2e 	bl	80008c8 <lcd_clear>
		last_page = cur_page;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <door_open_page+0x48>)
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <door_open_page+0x44>)
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e001      	b.n	8000a7a <door_open_page+0x22>
	}
	else{
		lcd_home();
 8000a76:	f7ff fe51 	bl	800071c <lcd_home>
	}

	lcd_set_cursor(6, 0);
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2006      	movs	r0, #6
 8000a7e:	f7ff ff59 	bl	8000934 <lcd_set_cursor>
	lcd_print("DOOR");
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <door_open_page+0x4c>)
 8000a84:	f7ff ff40 	bl	8000908 <lcd_print>
	lcd_set_cursor(2,2);
 8000a88:	2102      	movs	r1, #2
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff ff52 	bl	8000934 <lcd_set_cursor>
	lcd_print("OPEN");
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <door_open_page+0x50>)
 8000a92:	f7ff ff39 	bl	8000908 <lcd_print>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000011b 	.word	0x2000011b
 8000aa0:	2000011a 	.word	0x2000011a
 8000aa4:	08004b44 	.word	0x08004b44
 8000aa8:	08004b4c 	.word	0x08004b4c

08000aac <heater_coil_page>:

void heater_coil_page(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <heater_coil_page+0x44>)
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <heater_coil_page+0x48>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d006      	beq.n	8000aca <heater_coil_page+0x1e>
	{
		lcd_clear();
 8000abc:	f7ff ff04 	bl	80008c8 <lcd_clear>
		last_page = cur_page;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <heater_coil_page+0x48>)
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <heater_coil_page+0x44>)
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e001      	b.n	8000ace <heater_coil_page+0x22>
	}
	else{
		lcd_home();
 8000aca:	f7ff fe27 	bl	800071c <lcd_home>
	}

	lcd_set_cursor(5, 0);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2005      	movs	r0, #5
 8000ad2:	f7ff ff2f 	bl	8000934 <lcd_set_cursor>
	lcd_print("ERROR");
 8000ad6:	4808      	ldr	r0, [pc, #32]	; (8000af8 <heater_coil_page+0x4c>)
 8000ad8:	f7ff ff16 	bl	8000908 <lcd_print>
	lcd_set_cursor(1,2);
 8000adc:	2102      	movs	r1, #2
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff ff28 	bl	8000934 <lcd_set_cursor>
	lcd_print("HEATER");
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <heater_coil_page+0x50>)
 8000ae6:	f7ff ff0f 	bl	8000908 <lcd_print>
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000011b 	.word	0x2000011b
 8000af4:	2000011a 	.word	0x2000011a
 8000af8:	08004b54 	.word	0x08004b54
 8000afc:	08004b5c 	.word	0x08004b5c

08000b00 <limit_sw_err_page>:

void limit_sw_err_page(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <limit_sw_err_page+0x44>)
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <limit_sw_err_page+0x48>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d006      	beq.n	8000b1e <limit_sw_err_page+0x1e>
	{
		lcd_clear();
 8000b10:	f7ff feda 	bl	80008c8 <lcd_clear>
		last_page = cur_page;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <limit_sw_err_page+0x48>)
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <limit_sw_err_page+0x44>)
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e001      	b.n	8000b22 <limit_sw_err_page+0x22>
	}
	else{
		lcd_home();
 8000b1e:	f7ff fdfd 	bl	800071c <lcd_home>
	}

	lcd_set_cursor(5, 0);
 8000b22:	2100      	movs	r1, #0
 8000b24:	2005      	movs	r0, #5
 8000b26:	f7ff ff05 	bl	8000934 <lcd_set_cursor>
	lcd_print("ERROR");
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <limit_sw_err_page+0x4c>)
 8000b2c:	f7ff feec 	bl	8000908 <lcd_print>
	lcd_set_cursor(2, 2);
 8000b30:	2102      	movs	r1, #2
 8000b32:	2002      	movs	r0, #2
 8000b34:	f7ff fefe 	bl	8000934 <lcd_set_cursor>
	lcd_print("AIR");
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <limit_sw_err_page+0x50>)
 8000b3a:	f7ff fee5 	bl	8000908 <lcd_print>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000011b 	.word	0x2000011b
 8000b48:	2000011a 	.word	0x2000011a
 8000b4c:	08004b54 	.word	0x08004b54
 8000b50:	08004b64 	.word	0x08004b64

08000b54 <complete_page>:

void complete_page(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <complete_page+0x44>)
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <complete_page+0x48>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d006      	beq.n	8000b72 <complete_page+0x1e>
	{
		lcd_clear();
 8000b64:	f7ff feb0 	bl	80008c8 <lcd_clear>
		last_page = cur_page;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <complete_page+0x48>)
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <complete_page+0x44>)
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e001      	b.n	8000b76 <complete_page+0x22>
	}
	else{
		lcd_home();
 8000b72:	f7ff fdd3 	bl	800071c <lcd_home>
	}

	lcd_set_cursor(4, 0);
 8000b76:	2100      	movs	r1, #0
 8000b78:	2004      	movs	r0, #4
 8000b7a:	f7ff fedb 	bl	8000934 <lcd_set_cursor>
	lcd_print("PROCESS");
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <complete_page+0x4c>)
 8000b80:	f7ff fec2 	bl	8000908 <lcd_print>
	lcd_set_cursor(0, 2);
 8000b84:	2102      	movs	r1, #2
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fed4 	bl	8000934 <lcd_set_cursor>
	lcd_print("COMPLETE");
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <complete_page+0x50>)
 8000b8e:	f7ff febb 	bl	8000908 <lcd_print>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000011b 	.word	0x2000011b
 8000b9c:	2000011a 	.word	0x2000011a
 8000ba0:	08004b68 	.word	0x08004b68
 8000ba4:	08004b70 	.word	0x08004b70

08000ba8 <mode_level_page>:

void mode_level_page(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	static uint16_t a = 0,b = 0;
	if(last_page!=cur_page)
 8000bac:	4b4c      	ldr	r3, [pc, #304]	; (8000ce0 <mode_level_page+0x138>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <mode_level_page+0x13c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d006      	beq.n	8000bc6 <mode_level_page+0x1e>
	{
		lcd_clear();
 8000bb8:	f7ff fe86 	bl	80008c8 <lcd_clear>
		last_page = cur_page;
 8000bbc:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <mode_level_page+0x13c>)
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	4b47      	ldr	r3, [pc, #284]	; (8000ce0 <mode_level_page+0x138>)
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e001      	b.n	8000bca <mode_level_page+0x22>
	}
	else lcd_home();
 8000bc6:	f7ff fda9 	bl	800071c <lcd_home>
	a = dryer.heatTime % 60;
 8000bca:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <mode_level_page+0x140>)
 8000bcc:	885a      	ldrh	r2, [r3, #2]
 8000bce:	4b47      	ldr	r3, [pc, #284]	; (8000cec <mode_level_page+0x144>)
 8000bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8000bd4:	0959      	lsrs	r1, r3, #5
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	1a5b      	subs	r3, r3, r1
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <mode_level_page+0x148>)
 8000be4:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <mode_level_page+0x140>)
 8000be8:	885b      	ldrh	r3, [r3, #2]
 8000bea:	4a40      	ldr	r2, [pc, #256]	; (8000cec <mode_level_page+0x144>)
 8000bec:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf0:	095b      	lsrs	r3, r3, #5
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <mode_level_page+0x14c>)
 8000bf6:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"h=%02d:%02d",b,a);
 8000bf8:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <mode_level_page+0x14c>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <mode_level_page+0x148>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	493d      	ldr	r1, [pc, #244]	; (8000cf8 <mode_level_page+0x150>)
 8000c04:	483d      	ldr	r0, [pc, #244]	; (8000cfc <mode_level_page+0x154>)
 8000c06:	f002 fdf5 	bl	80037f4 <siprintf>
	lcd_set_cursor(0, 0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fe91 	bl	8000934 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000c12:	483a      	ldr	r0, [pc, #232]	; (8000cfc <mode_level_page+0x154>)
 8000c14:	f7ff fe78 	bl	8000908 <lcd_print>

	a = dryer.coolTime % 60;
 8000c18:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <mode_level_page+0x140>)
 8000c1a:	889a      	ldrh	r2, [r3, #4]
 8000c1c:	4b33      	ldr	r3, [pc, #204]	; (8000cec <mode_level_page+0x144>)
 8000c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c22:	0959      	lsrs	r1, r3, #5
 8000c24:	460b      	mov	r3, r1
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <mode_level_page+0x148>)
 8000c32:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <mode_level_page+0x140>)
 8000c36:	889b      	ldrh	r3, [r3, #4]
 8000c38:	4a2c      	ldr	r2, [pc, #176]	; (8000cec <mode_level_page+0x144>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <mode_level_page+0x14c>)
 8000c44:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"c=%02d:%02d",b,a);
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <mode_level_page+0x14c>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <mode_level_page+0x148>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	492b      	ldr	r1, [pc, #172]	; (8000d00 <mode_level_page+0x158>)
 8000c52:	482a      	ldr	r0, [pc, #168]	; (8000cfc <mode_level_page+0x154>)
 8000c54:	f002 fdce 	bl	80037f4 <siprintf>
	lcd_set_cursor(13, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	200d      	movs	r0, #13
 8000c5c:	f7ff fe6a 	bl	8000934 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000c60:	4826      	ldr	r0, [pc, #152]	; (8000cfc <mode_level_page+0x154>)
 8000c62:	f7ff fe51 	bl	8000908 <lcd_print>

	if(dryer.mode == LOW_LEVEL)sprintf(lcd_buf,"LEVEL: LOW");
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <mode_level_page+0x140>)
 8000c68:	785b      	ldrb	r3, [r3, #1]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d104      	bne.n	8000c78 <mode_level_page+0xd0>
 8000c6e:	4925      	ldr	r1, [pc, #148]	; (8000d04 <mode_level_page+0x15c>)
 8000c70:	4822      	ldr	r0, [pc, #136]	; (8000cfc <mode_level_page+0x154>)
 8000c72:	f002 fdbf 	bl	80037f4 <siprintf>
 8000c76:	e010      	b.n	8000c9a <mode_level_page+0xf2>
	else if(dryer.mode == MED_LEVEL)sprintf(lcd_buf,"LEVEL: MEDIUM");
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <mode_level_page+0x140>)
 8000c7a:	785b      	ldrb	r3, [r3, #1]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d104      	bne.n	8000c8a <mode_level_page+0xe2>
 8000c80:	4921      	ldr	r1, [pc, #132]	; (8000d08 <mode_level_page+0x160>)
 8000c82:	481e      	ldr	r0, [pc, #120]	; (8000cfc <mode_level_page+0x154>)
 8000c84:	f002 fdb6 	bl	80037f4 <siprintf>
 8000c88:	e007      	b.n	8000c9a <mode_level_page+0xf2>
	else if(dryer.mode == HIGH_LEVEL)sprintf(lcd_buf,"LEVEL: HIGH");
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <mode_level_page+0x140>)
 8000c8c:	785b      	ldrb	r3, [r3, #1]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d103      	bne.n	8000c9a <mode_level_page+0xf2>
 8000c92:	491e      	ldr	r1, [pc, #120]	; (8000d0c <mode_level_page+0x164>)
 8000c94:	4819      	ldr	r0, [pc, #100]	; (8000cfc <mode_level_page+0x154>)
 8000c96:	f002 fdad 	bl	80037f4 <siprintf>
	else;

	lcd_set_cursor(5, 1);
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2005      	movs	r0, #5
 8000c9e:	f7ff fe49 	bl	8000934 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000ca2:	4816      	ldr	r0, [pc, #88]	; (8000cfc <mode_level_page+0x154>)
 8000ca4:	f7ff fe30 	bl	8000908 <lcd_print>

	sprintf(lcd_buf,"Set:%02dC",dryer.setTemp);
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <mode_level_page+0x140>)
 8000caa:	799b      	ldrb	r3, [r3, #6]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4918      	ldr	r1, [pc, #96]	; (8000d10 <mode_level_page+0x168>)
 8000cb0:	4812      	ldr	r0, [pc, #72]	; (8000cfc <mode_level_page+0x154>)
 8000cb2:	f002 fd9f 	bl	80037f4 <siprintf>
	lcd_set_cursor(0, 3);
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fe3b 	bl	8000934 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000cbe:	480f      	ldr	r0, [pc, #60]	; (8000cfc <mode_level_page+0x154>)
 8000cc0:	f7ff fe22 	bl	8000908 <lcd_print>

	sprintf(lcd_buf,"Cur:ERR");
 8000cc4:	4913      	ldr	r1, [pc, #76]	; (8000d14 <mode_level_page+0x16c>)
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <mode_level_page+0x154>)
 8000cc8:	f002 fd94 	bl	80037f4 <siprintf>
	lcd_set_cursor(13, 3);
 8000ccc:	2103      	movs	r1, #3
 8000cce:	200d      	movs	r0, #13
 8000cd0:	f7ff fe30 	bl	8000934 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <mode_level_page+0x154>)
 8000cd6:	f7ff fe17 	bl	8000908 <lcd_print>
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000011b 	.word	0x2000011b
 8000ce4:	2000011a 	.word	0x2000011a
 8000ce8:	20000108 	.word	0x20000108
 8000cec:	88888889 	.word	0x88888889
 8000cf0:	20000104 	.word	0x20000104
 8000cf4:	20000106 	.word	0x20000106
 8000cf8:	08004b7c 	.word	0x08004b7c
 8000cfc:	200000b4 	.word	0x200000b4
 8000d00:	08004b88 	.word	0x08004b88
 8000d04:	08004b94 	.word	0x08004b94
 8000d08:	08004ba0 	.word	0x08004ba0
 8000d0c:	08004bb0 	.word	0x08004bb0
 8000d10:	08004bbc 	.word	0x08004bbc
 8000d14:	08004bc8 	.word	0x08004bc8

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4906      	ldr	r1, [pc, #24]	; (8000d4c <__NVIC_EnableIRQ+0x34>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db12      	blt.n	8000d88 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	490a      	ldr	r1, [pc, #40]	; (8000d94 <__NVIC_DisableIRQ+0x44>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	3320      	adds	r3, #32
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d7c:	f3bf 8f4f 	dsb	sy
}
 8000d80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d82:	f3bf 8f6f 	isb	sy
}
 8000d86:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 8000da0:	1d39      	adds	r1, r7, #4
 8000da2:	230a      	movs	r3, #10
 8000da4:	2201      	movs	r2, #1
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <__io_putchar+0x20>)
 8000da8:	f002 faf9 	bl	800339e <HAL_UART_Transmit>
	return ch;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000016c 	.word	0x2000016c

08000dbc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dc0:	f000 fef6 	bl	8001bb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dc4:	f000 fb4e 	bl	8001464 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_USART1_UART_Init();
 8000dc8:	f000 fe56 	bl	8001a78 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	input_init();
 8000dcc:	f7ff f9be 	bl	800014c <input_init>
	output_init();
 8000dd0:	f000 fc94 	bl	80016fc <output_init>
	keypad_init();
 8000dd4:	f7ff fa30 	bl	8000238 <keypad_init>
	timer_init();
 8000dd8:	f000 fdec 	bl	80019b4 <timer_init>

	lcd_gpio_init();
 8000ddc:	f7ff fb74 	bl	80004c8 <lcd_gpio_init>
	lcd_init(0);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff fc0b 	bl	80005fc <lcd_init>
	lcd_begin(16, 4, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2104      	movs	r1, #4
 8000dea:	2010      	movs	r0, #16
 8000dec:	f7ff fc1c 	bl	8000628 <lcd_begin>

	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 8000df0:	4895      	ldr	r0, [pc, #596]	; (8001048 <main+0x28c>)
 8000df2:	f002 fcf7 	bl	80037e4 <puts>
	dryer.state = INIT;
 8000df6:	4b95      	ldr	r3, [pc, #596]	; (800104c <main+0x290>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8000dfc:	4b93      	ldr	r3, [pc, #588]	; (800104c <main+0x290>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	705a      	strb	r2, [r3, #1]
	dryer.setTemp = 40U;
 8000e02:	4b92      	ldr	r3, [pc, #584]	; (800104c <main+0x290>)
 8000e04:	2228      	movs	r2, #40	; 0x28
 8000e06:	719a      	strb	r2, [r3, #6]

	if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == HIGH) {
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4891      	ldr	r0, [pc, #580]	; (8001050 <main+0x294>)
 8000e0c:	f001 f9e8 	bl	80021e0 <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d108      	bne.n	8000e28 <main+0x6c>
		door_open_flag = 1U;
 8000e16:	4b8f      	ldr	r3, [pc, #572]	; (8001054 <main+0x298>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8000e1c:	4b8e      	ldr	r3, [pc, #568]	; (8001058 <main+0x29c>)
 8000e1e:	2205      	movs	r2, #5
 8000e20:	701a      	strb	r2, [r3, #0]
		lcd_update_flag = 1U;
 8000e22:	4b8e      	ldr	r3, [pc, #568]	; (800105c <main+0x2a0>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
	}

	lcd_update();
 8000e28:	f7ff fdb4 	bl	8000994 <lcd_update>
		/* USER CODE BEGIN 3 */

		/**********************************************************************************************************
		 **************************************** LCD SCREEN UPDATE RUTINE ****************************************
		 **********************************************************************************************************/
		if (lcd_update_flag) {
 8000e2c:	4b8b      	ldr	r3, [pc, #556]	; (800105c <main+0x2a0>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d004      	beq.n	8000e3e <main+0x82>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 8000e34:	f7ff fdae 	bl	8000994 <lcd_update>
			lcd_update_flag = 0U;
 8000e38:	4b88      	ldr	r3, [pc, #544]	; (800105c <main+0x2a0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* TIMER EVENT RUTINE ************************************************
		 ***************************************************************************************************************/
		if (timer_stop_evt) {
 8000e3e:	4b88      	ldr	r3, [pc, #544]	; (8001060 <main+0x2a4>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d006      	beq.n	8000e54 <main+0x98>
			//printf("Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 8000e46:	4887      	ldr	r0, [pc, #540]	; (8001064 <main+0x2a8>)
 8000e48:	f001 fed6 	bl	8002bf8 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 8000e4c:	4b84      	ldr	r3, [pc, #528]	; (8001060 <main+0x2a4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	e00d      	b.n	8000e70 <main+0xb4>

		} else if ((timer_start_evt) && (dryer.state == START)) {
 8000e54:	4b84      	ldr	r3, [pc, #528]	; (8001068 <main+0x2ac>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d009      	beq.n	8000e70 <main+0xb4>
 8000e5c:	4b7b      	ldr	r3, [pc, #492]	; (800104c <main+0x290>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d105      	bne.n	8000e70 <main+0xb4>
			HAL_TIM_Base_Start_IT(&htim4);
 8000e64:	487f      	ldr	r0, [pc, #508]	; (8001064 <main+0x2a8>)
 8000e66:	f001 fe75 	bl	8002b54 <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 8000e6a:	4b7f      	ldr	r3, [pc, #508]	; (8001068 <main+0x2ac>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]

		/***************************************************************************************************************
		 ********************************************* KEYBOARD SCANNING ***********************************************
		 ********************************** INCREMENT DECREMENT OF TIMER AND MODE SET **********************************
		 ***************************************************************************************************************/
		if (door_open_flag) {
 8000e70:	4b78      	ldr	r3, [pc, #480]	; (8001054 <main+0x298>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <main+0xca>
			HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7e:	487b      	ldr	r0, [pc, #492]	; (800106c <main+0x2b0>)
 8000e80:	f001 f9c5 	bl	800220e <HAL_GPIO_WritePin>
 8000e84:	e18e      	b.n	80011a4 <main+0x3e8>

		} else {

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8c:	4877      	ldr	r0, [pc, #476]	; (800106c <main+0x2b0>)
 8000e8e:	f001 f9be 	bl	800220e <HAL_GPIO_WritePin>

			if (dryer.state == START) {
 8000e92:	4b6e      	ldr	r3, [pc, #440]	; (800104c <main+0x290>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	f040 80bd 	bne.w	8001016 <main+0x25a>

				scaned_key = scan_keypad();
 8000e9c:	f7ff f9fa 	bl	8000294 <scan_keypad>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b72      	ldr	r3, [pc, #456]	; (8001070 <main+0x2b4>)
 8000ea6:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 8000ea8:	4b71      	ldr	r3, [pc, #452]	; (8001070 <main+0x2b4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	f200 80ad 	bhi.w	800100e <main+0x252>
 8000eb4:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <main+0x100>)
 8000eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eba:	bf00      	nop
 8000ebc:	08000ecd 	.word	0x08000ecd
 8000ec0:	08000f15 	.word	0x08000f15
 8000ec4:	08000f3b 	.word	0x08000f3b
 8000ec8:	08000fe3 	.word	0x08000fe3
				case LOW_KEY_PRESSED:
					lcd_update_flag = 1U;
 8000ecc:	4b63      	ldr	r3, [pc, #396]	; (800105c <main+0x2a0>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 8000ed2:	4b5e      	ldr	r3, [pc, #376]	; (800104c <main+0x290>)
 8000ed4:	7a1b      	ldrb	r3, [r3, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <main+0x124>
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d00b      	beq.n	8000ef6 <main+0x13a>
					case COOL_CYCLE:
						if (dryer.coolTime > 60U)
							dryer.coolTime -= 60U;
						break;
					}
					break;
 8000ede:	e096      	b.n	800100e <main+0x252>
						if (dryer.heatTime > 60U)
 8000ee0:	4b5a      	ldr	r3, [pc, #360]	; (800104c <main+0x290>)
 8000ee2:	885b      	ldrh	r3, [r3, #2]
 8000ee4:	2b3c      	cmp	r3, #60	; 0x3c
 8000ee6:	d911      	bls.n	8000f0c <main+0x150>
							dryer.heatTime -= 60U;
 8000ee8:	4b58      	ldr	r3, [pc, #352]	; (800104c <main+0x290>)
 8000eea:	885b      	ldrh	r3, [r3, #2]
 8000eec:	3b3c      	subs	r3, #60	; 0x3c
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b56      	ldr	r3, [pc, #344]	; (800104c <main+0x290>)
 8000ef2:	805a      	strh	r2, [r3, #2]
						break;
 8000ef4:	e00a      	b.n	8000f0c <main+0x150>
						if (dryer.coolTime > 60U)
 8000ef6:	4b55      	ldr	r3, [pc, #340]	; (800104c <main+0x290>)
 8000ef8:	889b      	ldrh	r3, [r3, #4]
 8000efa:	2b3c      	cmp	r3, #60	; 0x3c
 8000efc:	d908      	bls.n	8000f10 <main+0x154>
							dryer.coolTime -= 60U;
 8000efe:	4b53      	ldr	r3, [pc, #332]	; (800104c <main+0x290>)
 8000f00:	889b      	ldrh	r3, [r3, #4]
 8000f02:	3b3c      	subs	r3, #60	; 0x3c
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b51      	ldr	r3, [pc, #324]	; (800104c <main+0x290>)
 8000f08:	809a      	strh	r2, [r3, #4]
						break;
 8000f0a:	e001      	b.n	8000f10 <main+0x154>
						break;
 8000f0c:	bf00      	nop
 8000f0e:	e07e      	b.n	800100e <main+0x252>
						break;
 8000f10:	bf00      	nop
					break;
 8000f12:	e07c      	b.n	800100e <main+0x252>

				case MED_KEY_PRESSED:
					lcd_update_flag = 1U;
 8000f14:	4b51      	ldr	r3, [pc, #324]	; (800105c <main+0x2a0>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8000f1a:	4b4c      	ldr	r3, [pc, #304]	; (800104c <main+0x290>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8000f20:	4b4a      	ldr	r3, [pc, #296]	; (800104c <main+0x290>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 8000f26:	4b4c      	ldr	r3, [pc, #304]	; (8001058 <main+0x29c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8000f2c:	4b4b      	ldr	r3, [pc, #300]	; (800105c <main+0x2a0>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8000f32:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <main+0x2a4>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
					break;
 8000f38:	e069      	b.n	800100e <main+0x252>

				case HIGH_KEY_PRESSED:
					lcd_update_flag = 1U;
 8000f3a:	4b48      	ldr	r3, [pc, #288]	; (800105c <main+0x2a0>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 8000f40:	4b42      	ldr	r3, [pc, #264]	; (800104c <main+0x290>)
 8000f42:	7a1b      	ldrb	r3, [r3, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <main+0x192>
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d037      	beq.n	8000fbc <main+0x200>
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
 8000f4c:	e05f      	b.n	800100e <main+0x252>
						if ((dryer.heatTime < 1800U)
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	; (800104c <main+0x290>)
 8000f50:	885b      	ldrh	r3, [r3, #2]
 8000f52:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000f56:	d20a      	bcs.n	8000f6e <main+0x1b2>
								&& (dryer.mode == LOW_LEVEL))
 8000f58:	4b3c      	ldr	r3, [pc, #240]	; (800104c <main+0x290>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d106      	bne.n	8000f6e <main+0x1b2>
							dryer.heatTime += 60U;
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <main+0x290>)
 8000f62:	885b      	ldrh	r3, [r3, #2]
 8000f64:	333c      	adds	r3, #60	; 0x3c
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <main+0x290>)
 8000f6a:	805a      	strh	r2, [r3, #2]
 8000f6c:	e01f      	b.n	8000fae <main+0x1f2>
						else if ((dryer.heatTime < 2400U)
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <main+0x290>)
 8000f70:	885b      	ldrh	r3, [r3, #2]
 8000f72:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000f76:	d20a      	bcs.n	8000f8e <main+0x1d2>
								&& (dryer.mode == MED_LEVEL))
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <main+0x290>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d106      	bne.n	8000f8e <main+0x1d2>
							dryer.heatTime += 60U;
 8000f80:	4b32      	ldr	r3, [pc, #200]	; (800104c <main+0x290>)
 8000f82:	885b      	ldrh	r3, [r3, #2]
 8000f84:	333c      	adds	r3, #60	; 0x3c
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <main+0x290>)
 8000f8a:	805a      	strh	r2, [r3, #2]
 8000f8c:	e00f      	b.n	8000fae <main+0x1f2>
						else if ((dryer.heatTime < 3000U)
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <main+0x290>)
 8000f90:	885b      	ldrh	r3, [r3, #2]
 8000f92:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d809      	bhi.n	8000fae <main+0x1f2>
								&& (dryer.mode == HIGH_LEVEL))
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <main+0x290>)
 8000f9c:	785b      	ldrb	r3, [r3, #1]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d105      	bne.n	8000fae <main+0x1f2>
							dryer.heatTime += 60U;
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <main+0x290>)
 8000fa4:	885b      	ldrh	r3, [r3, #2]
 8000fa6:	333c      	adds	r3, #60	; 0x3c
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <main+0x290>)
 8000fac:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <main+0x290>)
 8000fb0:	885b      	ldrh	r3, [r3, #2]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	482f      	ldr	r0, [pc, #188]	; (8001074 <main+0x2b8>)
 8000fb6:	f002 fb8f 	bl	80036d8 <iprintf>
						break;
 8000fba:	e011      	b.n	8000fe0 <main+0x224>
						if (dryer.coolTime < 900U)
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <main+0x290>)
 8000fbe:	889b      	ldrh	r3, [r3, #4]
 8000fc0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000fc4:	d205      	bcs.n	8000fd2 <main+0x216>
							dryer.coolTime += 60U;
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <main+0x290>)
 8000fc8:	889b      	ldrh	r3, [r3, #4]
 8000fca:	333c      	adds	r3, #60	; 0x3c
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <main+0x290>)
 8000fd0:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <main+0x290>)
 8000fd4:	889b      	ldrh	r3, [r3, #4]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4827      	ldr	r0, [pc, #156]	; (8001078 <main+0x2bc>)
 8000fda:	f002 fb7d 	bl	80036d8 <iprintf>
						break;
 8000fde:	bf00      	nop
					break;
 8000fe0:	e015      	b.n	800100e <main+0x252>

				case FN_KEY_PRESSED:
					lcd_update_flag = 1U;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <main+0x2a0>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 0U;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <main+0x290>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <main+0x290>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	721a      	strb	r2, [r3, #8]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <main+0x290>)
 8000ff6:	885b      	ldrh	r3, [r3, #2]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	481e      	ldr	r0, [pc, #120]	; (8001074 <main+0x2b8>)
 8000ffc:	f002 fb6c 	bl	80036d8 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <main+0x290>)
 8001002:	889b      	ldrh	r3, [r3, #4]
 8001004:	4619      	mov	r1, r3
 8001006:	481c      	ldr	r0, [pc, #112]	; (8001078 <main+0x2bc>)
 8001008:	f002 fb66 	bl	80036d8 <iprintf>
					break;
 800100c:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <main+0x2b4>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e0c6      	b.n	80011a4 <main+0x3e8>

			} else if (dryer.state == INIT) {
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <main+0x290>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 80c2 	bne.w	80011a4 <main+0x3e8>

				scaned_key = scan_keypad();
 8001020:	f7ff f938 	bl	8000294 <scan_keypad>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <main+0x2b4>)
 800102a:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <main+0x2b4>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b03      	cmp	r3, #3
 8001032:	f000 8083 	beq.w	800113c <main+0x380>
 8001036:	2b03      	cmp	r3, #3
 8001038:	f300 80b0 	bgt.w	800119c <main+0x3e0>
 800103c:	2b01      	cmp	r3, #1
 800103e:	d01d      	beq.n	800107c <main+0x2c0>
 8001040:	2b02      	cmp	r3, #2
 8001042:	d04b      	beq.n	80010dc <main+0x320>
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
							sizeof("HIGH_LEVEL\r\n"), 10);
					break;

				default:
					break;
 8001044:	e0aa      	b.n	800119c <main+0x3e0>
 8001046:	bf00      	nop
 8001048:	08004bd0 	.word	0x08004bd0
 800104c:	20000108 	.word	0x20000108
 8001050:	40010800 	.word	0x40010800
 8001054:	20000112 	.word	0x20000112
 8001058:	2000011a 	.word	0x2000011a
 800105c:	2000011c 	.word	0x2000011c
 8001060:	20000113 	.word	0x20000113
 8001064:	20000124 	.word	0x20000124
 8001068:	20000114 	.word	0x20000114
 800106c:	40011000 	.word	0x40011000
 8001070:	20000115 	.word	0x20000115
 8001074:	08004bd8 	.word	0x08004bd8
 8001078:	08004be8 	.word	0x08004be8
					dryer.mode = LOW_LEVEL;
 800107c:	4bb1      	ldr	r3, [pc, #708]	; (8001344 <main+0x588>)
 800107e:	2201      	movs	r2, #1
 8001080:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 8001082:	4bb0      	ldr	r3, [pc, #704]	; (8001344 <main+0x588>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 8001088:	4bae      	ldr	r3, [pc, #696]	; (8001344 <main+0x588>)
 800108a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800108e:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8001090:	4bac      	ldr	r3, [pc, #688]	; (8001344 <main+0x588>)
 8001092:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001096:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8001098:	4baa      	ldr	r3, [pc, #680]	; (8001344 <main+0x588>)
 800109a:	221e      	movs	r2, #30
 800109c:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 40U;
 800109e:	4ba9      	ldr	r3, [pc, #676]	; (8001344 <main+0x588>)
 80010a0:	2228      	movs	r2, #40	; 0x28
 80010a2:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 80010a4:	4ba7      	ldr	r3, [pc, #668]	; (8001344 <main+0x588>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 80010aa:	4ba7      	ldr	r3, [pc, #668]	; (8001348 <main+0x58c>)
 80010ac:	221e      	movs	r2, #30
 80010ae:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 80010b0:	4ba6      	ldr	r3, [pc, #664]	; (800134c <main+0x590>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 80010b6:	4ba6      	ldr	r3, [pc, #664]	; (8001350 <main+0x594>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 80010bc:	4ba5      	ldr	r3, [pc, #660]	; (8001354 <main+0x598>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
					cur_page = LOW_LEVEL_PAGE;
 80010c2:	4ba5      	ldr	r3, [pc, #660]	; (8001358 <main+0x59c>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80010c8:	4ba4      	ldr	r3, [pc, #656]	; (800135c <main+0x5a0>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 80010ce:	230a      	movs	r3, #10
 80010d0:	220c      	movs	r2, #12
 80010d2:	49a3      	ldr	r1, [pc, #652]	; (8001360 <main+0x5a4>)
 80010d4:	48a3      	ldr	r0, [pc, #652]	; (8001364 <main+0x5a8>)
 80010d6:	f002 f962 	bl	800339e <HAL_UART_Transmit>
					break;
 80010da:	e060      	b.n	800119e <main+0x3e2>
					dryer.mode = MED_LEVEL;
 80010dc:	4b99      	ldr	r3, [pc, #612]	; (8001344 <main+0x588>)
 80010de:	2202      	movs	r2, #2
 80010e0:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80010e2:	4b98      	ldr	r3, [pc, #608]	; (8001344 <main+0x588>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 80010e8:	4b96      	ldr	r3, [pc, #600]	; (8001344 <main+0x588>)
 80010ea:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80010ee:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80010f0:	4b94      	ldr	r3, [pc, #592]	; (8001344 <main+0x588>)
 80010f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010f6:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80010f8:	4b92      	ldr	r3, [pc, #584]	; (8001344 <main+0x588>)
 80010fa:	221e      	movs	r2, #30
 80010fc:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 70U;
 80010fe:	4b91      	ldr	r3, [pc, #580]	; (8001344 <main+0x588>)
 8001100:	2246      	movs	r2, #70	; 0x46
 8001102:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8001104:	4b8f      	ldr	r3, [pc, #572]	; (8001344 <main+0x588>)
 8001106:	2200      	movs	r2, #0
 8001108:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 800110a:	4b8f      	ldr	r3, [pc, #572]	; (8001348 <main+0x58c>)
 800110c:	221e      	movs	r2, #30
 800110e:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8001110:	4b8e      	ldr	r3, [pc, #568]	; (800134c <main+0x590>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8001116:	4b8e      	ldr	r3, [pc, #568]	; (8001350 <main+0x594>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 800111c:	4b8d      	ldr	r3, [pc, #564]	; (8001354 <main+0x598>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
					cur_page = MED_LEVEL_PAGE;
 8001122:	4b8d      	ldr	r3, [pc, #564]	; (8001358 <main+0x59c>)
 8001124:	2202      	movs	r2, #2
 8001126:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001128:	4b8c      	ldr	r3, [pc, #560]	; (800135c <main+0x5a0>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 800112e:	230a      	movs	r3, #10
 8001130:	220c      	movs	r2, #12
 8001132:	498d      	ldr	r1, [pc, #564]	; (8001368 <main+0x5ac>)
 8001134:	488b      	ldr	r0, [pc, #556]	; (8001364 <main+0x5a8>)
 8001136:	f002 f932 	bl	800339e <HAL_UART_Transmit>
					break;
 800113a:	e030      	b.n	800119e <main+0x3e2>
					dryer.mode = HIGH_LEVEL;
 800113c:	4b81      	ldr	r3, [pc, #516]	; (8001344 <main+0x588>)
 800113e:	2203      	movs	r2, #3
 8001140:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 8001142:	4b80      	ldr	r3, [pc, #512]	; (8001344 <main+0x588>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 8001148:	4b7e      	ldr	r3, [pc, #504]	; (8001344 <main+0x588>)
 800114a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800114e:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8001150:	4b7c      	ldr	r3, [pc, #496]	; (8001344 <main+0x588>)
 8001152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001156:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8001158:	4b7a      	ldr	r3, [pc, #488]	; (8001344 <main+0x588>)
 800115a:	221e      	movs	r2, #30
 800115c:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 90U;
 800115e:	4b79      	ldr	r3, [pc, #484]	; (8001344 <main+0x588>)
 8001160:	225a      	movs	r2, #90	; 0x5a
 8001162:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8001164:	4b77      	ldr	r3, [pc, #476]	; (8001344 <main+0x588>)
 8001166:	2200      	movs	r2, #0
 8001168:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 800116a:	4b77      	ldr	r3, [pc, #476]	; (8001348 <main+0x58c>)
 800116c:	221e      	movs	r2, #30
 800116e:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8001170:	4b76      	ldr	r3, [pc, #472]	; (800134c <main+0x590>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8001176:	4b76      	ldr	r3, [pc, #472]	; (8001350 <main+0x594>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 800117c:	4b75      	ldr	r3, [pc, #468]	; (8001354 <main+0x598>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
					cur_page = HIGH_LEVEL_PAGE;
 8001182:	4b75      	ldr	r3, [pc, #468]	; (8001358 <main+0x59c>)
 8001184:	2203      	movs	r2, #3
 8001186:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001188:	4b74      	ldr	r3, [pc, #464]	; (800135c <main+0x5a0>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 800118e:	230a      	movs	r3, #10
 8001190:	220d      	movs	r2, #13
 8001192:	4976      	ldr	r1, [pc, #472]	; (800136c <main+0x5b0>)
 8001194:	4873      	ldr	r0, [pc, #460]	; (8001364 <main+0x5a8>)
 8001196:	f002 f902 	bl	800339e <HAL_UART_Transmit>
					break;
 800119a:	e000      	b.n	800119e <main+0x3e2>
					break;
 800119c:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 800119e:	4b74      	ldr	r3, [pc, #464]	; (8001370 <main+0x5b4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		 * @COMPLETE STATE
		 * 		->TURNS OFF FAN, DRUM MOTORS, HEATER
		 * 		->TRUNS ON/OFF BEEP EVERY 3s FOR 30s
		 * 		->WATCHS DOOR OPEN
		 **********************************************************************************************************/
		if (door_open_flag) {
 80011a4:	4b73      	ldr	r3, [pc, #460]	; (8001374 <main+0x5b8>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d029      	beq.n	8001200 <main+0x444>

			HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	4871      	ldr	r0, [pc, #452]	; (8001378 <main+0x5bc>)
 80011b4:	f001 f82b 	bl	800220e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011be:	486f      	ldr	r0, [pc, #444]	; (800137c <main+0x5c0>)
 80011c0:	f001 f825 	bl	800220e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ca:	486c      	ldr	r0, [pc, #432]	; (800137c <main+0x5c0>)
 80011cc:	f001 f81f 	bl	800220e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d6:	4869      	ldr	r0, [pc, #420]	; (800137c <main+0x5c0>)
 80011d8:	f001 f819 	bl	800220e <HAL_GPIO_WritePin>

			if (dryer.state == COMPLETE) {
 80011dc:	4b59      	ldr	r3, [pc, #356]	; (8001344 <main+0x588>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	f040 812d 	bne.w	8001440 <main+0x684>
				//beep off
				timer_stop_evt = 1U;
 80011e6:	4b66      	ldr	r3, [pc, #408]	; (8001380 <main+0x5c4>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
				dryer.beepTime = 0U;
 80011ec:	4b55      	ldr	r3, [pc, #340]	; (8001344 <main+0x588>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	71da      	strb	r2, [r3, #7]
				dryer.state = INIT;
 80011f2:	4b54      	ldr	r3, [pc, #336]	; (8001344 <main+0x588>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
				dryer.mode = NO_MODE;
 80011f8:	4b52      	ldr	r3, [pc, #328]	; (8001344 <main+0x588>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	705a      	strb	r2, [r3, #1]
 80011fe:	e11f      	b.n	8001440 <main+0x684>
			}

		} else {

			if (dryer.state == START) {
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <main+0x588>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	f040 80cd 	bne.w	80013a4 <main+0x5e8>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001210:	4859      	ldr	r0, [pc, #356]	; (8001378 <main+0x5bc>)
 8001212:	f000 fffc 	bl	800220e <HAL_GPIO_WritePin>

				if (otp) {
 8001216:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <main+0x5c8>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d020      	beq.n	8001260 <main+0x4a4>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 800121e:	4b49      	ldr	r3, [pc, #292]	; (8001344 <main+0x588>)
 8001220:	885b      	ldrh	r3, [r3, #2]
 8001222:	4619      	mov	r1, r3
 8001224:	4858      	ldr	r0, [pc, #352]	; (8001388 <main+0x5cc>)
 8001226:	f002 fa57 	bl	80036d8 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 800122a:	4b46      	ldr	r3, [pc, #280]	; (8001344 <main+0x588>)
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	4619      	mov	r1, r3
 8001230:	4856      	ldr	r0, [pc, #344]	; (800138c <main+0x5d0>)
 8001232:	f002 fa51 	bl	80036d8 <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <main+0x58c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4619      	mov	r1, r3
 800123c:	4854      	ldr	r0, [pc, #336]	; (8001390 <main+0x5d4>)
 800123e:	f002 fa4b 	bl	80036d8 <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 8001242:	4b43      	ldr	r3, [pc, #268]	; (8001350 <main+0x594>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	4852      	ldr	r0, [pc, #328]	; (8001394 <main+0x5d8>)
 800124a:	f002 fa45 	bl	80036d8 <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 800124e:	4b3f      	ldr	r3, [pc, #252]	; (800134c <main+0x590>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	4850      	ldr	r0, [pc, #320]	; (8001398 <main+0x5dc>)
 8001256:	f002 fa3f 	bl	80036d8 <iprintf>
					otp = 0;
 800125a:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <main+0x5c8>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
				}

				//start Flip Flop
				if (pasue_cunt > 0) {
 8001260:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <main+0x594>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d034      	beq.n	80012d2 <main+0x516>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126e:	4843      	ldr	r0, [pc, #268]	; (800137c <main+0x5c0>)
 8001270:	f000 ffcd 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127a:	4840      	ldr	r0, [pc, #256]	; (800137c <main+0x5c0>)
 800127c:	f000 ffc7 	bl	800220e <HAL_GPIO_WritePin>

					if (pasue_cunt <= 1) {
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <main+0x594>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d84b      	bhi.n	8001320 <main+0x564>

						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 8001288:	2104      	movs	r1, #4
 800128a:	483b      	ldr	r0, [pc, #236]	; (8001378 <main+0x5bc>)
 800128c:	f000 ffa8 	bl	80021e0 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b41      	ldr	r3, [pc, #260]	; (800139c <main+0x5e0>)
 8001296:	701a      	strb	r2, [r3, #0]
						SEL_ROT_SW);

						if (rot_sw_state) {
 8001298:	4b40      	ldr	r3, [pc, #256]	; (800139c <main+0x5e0>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <main+0x4f2>

							rot_left_cunt = 30U;
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <main+0x58c>)
 80012a2:	221e      	movs	r2, #30
 80012a4:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <main+0x590>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e038      	b.n	8001320 <main+0x564>

						} else {

							if (flipflop) {
 80012ae:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <main+0x5e4>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <main+0x508>

								rot_left_cunt = 0U;
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <main+0x58c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <main+0x590>)
 80012be:	221e      	movs	r2, #30
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e02d      	b.n	8001320 <main+0x564>

							} else {

								rot_left_cunt = 30U;
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <main+0x58c>)
 80012c6:	221e      	movs	r2, #30
 80012c8:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <main+0x590>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e026      	b.n	8001320 <main+0x564>

							}
						}
					}
				} else if (rot_left_cunt > 0) {
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <main+0x58c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00f      	beq.n	80012fa <main+0x53e>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e0:	4826      	ldr	r0, [pc, #152]	; (800137c <main+0x5c0>)
 80012e2:	f000 ff94 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ec:	4823      	ldr	r0, [pc, #140]	; (800137c <main+0x5c0>)
 80012ee:	f000 ff8e 	bl	800220e <HAL_GPIO_WritePin>
					flipflop = 1;
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <main+0x5e4>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	e012      	b.n	8001320 <main+0x564>

				} else if (rot_right_cunt > 0) {
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <main+0x590>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00e      	beq.n	8001320 <main+0x564>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001308:	481c      	ldr	r0, [pc, #112]	; (800137c <main+0x5c0>)
 800130a:	f000 ff80 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001314:	4819      	ldr	r0, [pc, #100]	; (800137c <main+0x5c0>)
 8001316:	f000 ff7a 	bl	800220e <HAL_GPIO_WritePin>
					flipflop = 0;
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <main+0x5e4>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]

				}

				if (dryer.cycle == HEAT_CYCLE) {
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <main+0x588>)
 8001322:	7a1b      	ldrb	r3, [r3, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d106      	bne.n	8001336 <main+0x57a>

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132e:	4813      	ldr	r0, [pc, #76]	; (800137c <main+0x5c0>)
 8001330:	f000 ff6d 	bl	800220e <HAL_GPIO_WritePin>
 8001334:	e084      	b.n	8001440 <main+0x684>

				} else {

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <main+0x5c0>)
 800133e:	f000 ff66 	bl	800220e <HAL_GPIO_WritePin>
 8001342:	e07d      	b.n	8001440 <main+0x684>
 8001344:	20000108 	.word	0x20000108
 8001348:	20000001 	.word	0x20000001
 800134c:	20000116 	.word	0x20000116
 8001350:	20000117 	.word	0x20000117
 8001354:	20000114 	.word	0x20000114
 8001358:	2000011a 	.word	0x2000011a
 800135c:	2000011c 	.word	0x2000011c
 8001360:	08004bf8 	.word	0x08004bf8
 8001364:	2000016c 	.word	0x2000016c
 8001368:	08004c04 	.word	0x08004c04
 800136c:	08004c10 	.word	0x08004c10
 8001370:	20000115 	.word	0x20000115
 8001374:	20000112 	.word	0x20000112
 8001378:	40010800 	.word	0x40010800
 800137c:	40010c00 	.word	0x40010c00
 8001380:	20000113 	.word	0x20000113
 8001384:	20000000 	.word	0x20000000
 8001388:	08004c20 	.word	0x08004c20
 800138c:	08004be8 	.word	0x08004be8
 8001390:	08004c34 	.word	0x08004c34
 8001394:	08004c44 	.word	0x08004c44
 8001398:	08004c54 	.word	0x08004c54
 800139c:	20000118 	.word	0x20000118
 80013a0:	20000119 	.word	0x20000119

				}
			} else if (dryer.state == COMPLETE) {
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <main+0x68c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d131      	bne.n	8001410 <main+0x654>

				if (dryer.beepTime == 0) {
 80013ac:	4b26      	ldr	r3, [pc, #152]	; (8001448 <main+0x68c>)
 80013ae:	79db      	ldrb	r3, [r3, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d114      	bne.n	80013de <main+0x622>
					HAL_GPIO_WritePin(GPIOC, LED, LOW);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ba:	4824      	ldr	r0, [pc, #144]	; (800144c <main+0x690>)
 80013bc:	f000 ff27 	bl	800220e <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <main+0x694>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <main+0x698>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
					//beep off
					timer_stop_evt = 1U;
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <main+0x69c>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <main+0x68c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <main+0x68c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	705a      	strb	r2, [r3, #1]
				} else if (dryer.beepTime % 3 == 0) {
					//beep toggle
				}
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e4:	481d      	ldr	r0, [pc, #116]	; (800145c <main+0x6a0>)
 80013e6:	f000 ff12 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f0:	481b      	ldr	r0, [pc, #108]	; (8001460 <main+0x6a4>)
 80013f2:	f000 ff0c 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013fc:	4818      	ldr	r0, [pc, #96]	; (8001460 <main+0x6a4>)
 80013fe:	f000 ff06 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001408:	4815      	ldr	r0, [pc, #84]	; (8001460 <main+0x6a4>)
 800140a:	f000 ff00 	bl	800220e <HAL_GPIO_WritePin>
 800140e:	e017      	b.n	8001440 <main+0x684>

			} else {
				//beep off
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001416:	4811      	ldr	r0, [pc, #68]	; (800145c <main+0x6a0>)
 8001418:	f000 fef9 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001422:	480f      	ldr	r0, [pc, #60]	; (8001460 <main+0x6a4>)
 8001424:	f000 fef3 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142e:	480c      	ldr	r0, [pc, #48]	; (8001460 <main+0x6a4>)
 8001430:	f000 feed 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <main+0x6a4>)
 800143c:	f000 fee7 	bl	800220e <HAL_GPIO_WritePin>
			}
		}
		lcd_update_flag = 1U;
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <main+0x698>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
		if (lcd_update_flag) {
 8001446:	e4f1      	b.n	8000e2c <main+0x70>
 8001448:	20000108 	.word	0x20000108
 800144c:	40011000 	.word	0x40011000
 8001450:	2000011a 	.word	0x2000011a
 8001454:	2000011c 	.word	0x2000011c
 8001458:	20000113 	.word	0x20000113
 800145c:	40010800 	.word	0x40010800
 8001460:	40010c00 	.word	0x40010c00

08001464 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b090      	sub	sp, #64	; 0x40
 8001468:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800146a:	f107 0318 	add.w	r3, r7, #24
 800146e:	2228      	movs	r2, #40	; 0x28
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f002 f928 	bl	80036c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148a:	2301      	movs	r3, #1
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148e:	2310      	movs	r3, #16
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001492:	2300      	movs	r3, #0
 8001494:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fee8 	bl	8002270 <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x46>
		Error_Handler();
 80014a6:	f000 f923 	bl	80016f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 f956 	bl	8002774 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x6e>
		Error_Handler();
 80014ce:	f000 f90f 	bl	80016f0 <Error_Handler>
	}
}
 80014d2:	bf00      	nop
 80014d4:	3740      	adds	r7, #64	; 0x40
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d157      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0xc0>
		NVIC_DisableIRQ(EXTI0_IRQn);
 80014ec:	2006      	movs	r0, #6
 80014ee:	f7ff fc2f 	bl	8000d50 <__NVIC_DisableIRQ>

		temp_pin_state = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 80014f2:	2101      	movs	r1, #1
 80014f4:	482b      	ldr	r0, [pc, #172]	; (80015a4 <HAL_GPIO_EXTI_Callback+0xc8>)
 80014f6:	f000 fe73 	bl	80021e0 <HAL_GPIO_ReadPin>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001500:	701a      	strb	r2, [r3, #0]
		//printf("Pin: %d\r\n",temp_pin_state);

		if (temp_pin_state == HIGH) {
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10f      	bne.n	800152c <HAL_GPIO_EXTI_Callback+0x50>

			door_open_flag = 1;
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_GPIO_EXTI_Callback+0xd0>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
			timer_stop_evt = 1;
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
			cur_page = DOOR_OPEN_PAGE;
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800151a:	2205      	movs	r2, #5
 800151c:	701a      	strb	r2, [r3, #0]
			lcd_update_flag = 1U;
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
			dryer.state = STOP;
 8001524:	4b25      	ldr	r3, [pc, #148]	; (80015bc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001526:	2203      	movs	r2, #3
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e034      	b.n	8001596 <HAL_GPIO_EXTI_Callback+0xba>

			//stop

		} else {
			switch (dryer.mode) {
 800152c:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_GPIO_EXTI_Callback+0xe0>)
 800152e:	785b      	ldrb	r3, [r3, #1]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d827      	bhi.n	8001584 <HAL_GPIO_EXTI_Callback+0xa8>
 8001534:	a201      	add	r2, pc, #4	; (adr r2, 800153c <HAL_GPIO_EXTI_Callback+0x60>)
 8001536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153a:	bf00      	nop
 800153c:	0800154d 	.word	0x0800154d
 8001540:	0800155b 	.word	0x0800155b
 8001544:	08001569 	.word	0x08001569
 8001548:	08001577 	.word	0x08001577
			case NO_MODE:
				cur_page = INIT_PAGE;
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
				dryer.state = INIT;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
				break;
 8001558:	e014      	b.n	8001584 <HAL_GPIO_EXTI_Callback+0xa8>
			case LOW_LEVEL:
				cur_page = LOW_LEVEL_PAGE;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
				dryer.state = START;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
				break;
 8001566:	e00d      	b.n	8001584 <HAL_GPIO_EXTI_Callback+0xa8>
			case MED_LEVEL:
				cur_page = MED_LEVEL_PAGE;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800156a:	2202      	movs	r2, #2
 800156c:	701a      	strb	r2, [r3, #0]
				dryer.state = START;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
				break;
 8001574:	e006      	b.n	8001584 <HAL_GPIO_EXTI_Callback+0xa8>
			case HIGH_LEVEL:
				cur_page = HIGH_LEVEL_PAGE;
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001578:	2203      	movs	r2, #3
 800157a:	701a      	strb	r2, [r3, #0]
				dryer.state = START;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_GPIO_EXTI_Callback+0xe0>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
				break;
 8001582:	bf00      	nop
			}
			timer_start_evt = 1;
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
			door_open_flag = 0;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_GPIO_EXTI_Callback+0xd0>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
			lcd_update_flag = 1U;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
		}
		//printf("Door page: %d\r\n",cur_page);
		//printf("LCD: %d\r\n",lcd_update_flag);
		NVIC_EnableIRQ(EXTI0_IRQn);
 8001596:	2006      	movs	r0, #6
 8001598:	f7ff fbbe 	bl	8000d18 <__NVIC_EnableIRQ>
	}
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40010800 	.word	0x40010800
 80015a8:	2000011d 	.word	0x2000011d
 80015ac:	20000112 	.word	0x20000112
 80015b0:	20000113 	.word	0x20000113
 80015b4:	2000011a 	.word	0x2000011a
 80015b8:	2000011c 	.word	0x2000011c
 80015bc:	20000108 	.word	0x20000108
 80015c0:	20000114 	.word	0x20000114

080015c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) "TIMER\r\n", sizeof("TIMER\r\n"), 10);
 80015cc:	230a      	movs	r3, #10
 80015ce:	2208      	movs	r2, #8
 80015d0:	493d      	ldr	r1, [pc, #244]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015d2:	483e      	ldr	r0, [pc, #248]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015d4:	f001 fee3 	bl	800339e <HAL_UART_Transmit>

	if (dryer.heatTime > 0) {
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015da:	885b      	ldrh	r3, [r3, #2]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x2a>

		dryer.heatTime--;
 80015e0:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015e2:	885b      	ldrh	r3, [r3, #2]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015ea:	805a      	strh	r2, [r3, #2]
 80015ec:	e014      	b.n	8001618 <HAL_TIM_PeriodElapsedCallback+0x54>

	} else if (dryer.coolTime > 0) {
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015f0:	889b      	ldrh	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <HAL_TIM_PeriodElapsedCallback+0x40>

		dryer.coolTime--;
 80015f6:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015f8:	889b      	ldrh	r3, [r3, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001600:	809a      	strh	r2, [r3, #4]
 8001602:	e009      	b.n	8001618 <HAL_TIM_PeriodElapsedCallback+0x54>

	} else if (dryer.state == COMPLETE) {
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d105      	bne.n	8001618 <HAL_TIM_PeriodElapsedCallback+0x54>
		dryer.beepTime--;
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800160e:	79db      	ldrb	r3, [r3, #7]
 8001610:	3b01      	subs	r3, #1
 8001612:	b2da      	uxtb	r2, r3
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001616:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800161a:	885b      	ldrh	r3, [r3, #2]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d107      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001622:	7a1b      	ldrb	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d103      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0x6c>

		dryer.cycle = COOL_CYCLE;
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800162a:	2201      	movs	r2, #1
 800162c:	721a      	strb	r2, [r3, #8]
 800162e:	e013      	b.n	8001658 <HAL_TIM_PeriodElapsedCallback+0x94>

	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001632:	889b      	ldrh	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10f      	bne.n	8001658 <HAL_TIM_PeriodElapsedCallback+0x94>
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800163a:	7a1b      	ldrb	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d10b      	bne.n	8001658 <HAL_TIM_PeriodElapsedCallback+0x94>

		printf("Complete\r\n");
 8001640:	4824      	ldr	r0, [pc, #144]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001642:	f002 f8cf 	bl	80037e4 <puts>
		dryer.state = COMPLETE;
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001648:	2202      	movs	r2, #2
 800164a:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800164e:	2200      	movs	r2, #0
 8001650:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001654:	2204      	movs	r2, #4
 8001656:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <HAL_TIM_PeriodElapsedCallback+0xaa>

		pasue_cunt--;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e022      	b.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0xf0>

	} else if (rot_left_cunt > 0) {
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00d      	beq.n	8001692 <HAL_TIM_PeriodElapsedCallback+0xce>

		rot_left_cunt--;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	3b01      	subs	r3, #1
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001680:	701a      	strb	r2, [r3, #0]

		if (rot_left_cunt == 0) {
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d114      	bne.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0xf0>

			pasue_cunt = 3U;
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800168c:	2203      	movs	r2, #3
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	e010      	b.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0xf0>

		}

	} else if (rot_right_cunt > 0) {
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00c      	beq.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0xf0>

		rot_right_cunt--;
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	3b01      	subs	r3, #1
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016a4:	701a      	strb	r2, [r3, #0]

		if (rot_right_cunt == 0) {
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0xf0>

			pasue_cunt = 3U;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 80016b0:	2203      	movs	r2, #3
 80016b2:	701a      	strb	r2, [r3, #0]

		}
	}
	otp = 1;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
	lcd_update_flag = 1U;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	08004c68 	.word	0x08004c68
 80016cc:	2000016c 	.word	0x2000016c
 80016d0:	20000108 	.word	0x20000108
 80016d4:	08004c70 	.word	0x08004c70
 80016d8:	2000011a 	.word	0x2000011a
 80016dc:	20000117 	.word	0x20000117
 80016e0:	20000001 	.word	0x20000001
 80016e4:	20000116 	.word	0x20000116
 80016e8:	20000000 	.word	0x20000000
 80016ec:	2000011c 	.word	0x2000011c

080016f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <output_init>:
 *  Created on: Mar 27, 2023
 *      Author: Yash
 */
#include "output.h"

void output_init(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <output_init+0xcc>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a30      	ldr	r2, [pc, #192]	; (80017c8 <output_init+0xcc>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <output_init+0xcc>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <output_init+0xcc>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a2a      	ldr	r2, [pc, #168]	; (80017c8 <output_init+0xcc>)
 8001720:	f043 0310 	orr.w	r3, r3, #16
 8001724:	6193      	str	r3, [r2, #24]
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <output_init+0xcc>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOx = { 0 };
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001746:	4821      	ldr	r0, [pc, #132]	; (80017cc <output_init+0xd0>)
 8001748:	f000 fd61 	bl	800220e <HAL_GPIO_WritePin>

	GPIOx.Pin = DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN;
 800174c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001750:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001756:	2302      	movs	r3, #2
 8001758:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2302      	movs	r3, #2
 800175c:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(OUTPUT_PORT, &GPIOx);
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	4619      	mov	r1, r3
 8001764:	4819      	ldr	r0, [pc, #100]	; (80017cc <output_init+0xd0>)
 8001766:	f000 fbb7 	bl	8001ed8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	4817      	ldr	r0, [pc, #92]	; (80017d0 <output_init+0xd4>)
 8001772:	f000 fd4c 	bl	800220e <HAL_GPIO_WritePin>

	GPIOx.Pin = FAN_PIN;
 8001776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177a:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001780:	2302      	movs	r3, #2
 8001782:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2302      	movs	r3, #2
 8001786:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(FAN_PORT, &GPIOx);
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4619      	mov	r1, r3
 800178e:	4810      	ldr	r0, [pc, #64]	; (80017d0 <output_init+0xd4>)
 8001790:	f000 fba2 	bl	8001ed8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179a:	480e      	ldr	r0, [pc, #56]	; (80017d4 <output_init+0xd8>)
 800179c:	f000 fd37 	bl	800220e <HAL_GPIO_WritePin>

	GPIOx.Pin = BUZZER_PIN;
 80017a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a4:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2302      	movs	r3, #2
 80017b0:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(BUZZER_PORT, &GPIOx);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <output_init+0xd8>)
 80017ba:	f000 fb8d 	bl	8001ed8 <HAL_GPIO_Init>

}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010c00 	.word	0x40010c00
 80017d0:	40010800 	.word	0x40010800
 80017d4:	40011000 	.word	0x40011000

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_MspInit+0x40>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_MspInit+0x40>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6193      	str	r3, [r2, #24]
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_MspInit+0x40>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_MspInit+0x40>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_MspInit+0x40>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	61d3      	str	r3, [r2, #28]
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_MspInit+0x40>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40021000 	.word	0x40021000

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <NMI_Handler+0x4>

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001862:	f000 f9eb 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e00a      	b.n	8001892 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800187c:	f3af 8000 	nop.w
 8001880:	4601      	mov	r1, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	60ba      	str	r2, [r7, #8]
 8001888:	b2ca      	uxtb	r2, r1
 800188a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3301      	adds	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	dbf0      	blt.n	800187c <_read+0x12>
  }

  return len;
 800189a:	687b      	ldr	r3, [r7, #4]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e009      	b.n	80018ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	60ba      	str	r2, [r7, #8]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fa6a 	bl	8000d98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dbf1      	blt.n	80018b6 <_write+0x12>
  }
  return len;
 80018d2:	687b      	ldr	r3, [r7, #4]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_close>:

int _close(int file)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001902:	605a      	str	r2, [r3, #4]
  return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <_isatty>:

int _isatty(int file)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f001 fe82 	bl	8003674 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20005000 	.word	0x20005000
 800199c:	00000400 	.word	0x00000400
 80019a0:	20000120 	.word	0x20000120
 80019a4:	200001c8 	.word	0x200001c8

080019a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <timer_init>:
#include "timer.h"

TIM_HandleTypeDef htim4;

void timer_init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_CLK_ENABLE();
 80019ba:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <timer_init+0xa4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <timer_init+0xa4>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <timer_init+0xa4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <timer_init+0xa8>)
 80019ec:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <timer_init+0xac>)
 80019ee:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7200;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <timer_init+0xa8>)
 80019f2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80019f6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <timer_init+0xa8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1110+1;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <timer_init+0xa8>)
 8001a00:	f240 4257 	movw	r2, #1111	; 0x457
 8001a04:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <timer_init+0xa8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <timer_init+0xa8>)
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim4);
 8001a12:	4812      	ldr	r0, [pc, #72]	; (8001a5c <timer_init+0xa8>)
 8001a14:	f001 f846 	bl	8002aa4 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	4619      	mov	r1, r3
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <timer_init+0xa8>)
 8001a26:	f001 fa1d 	bl	8002e64 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4619      	mov	r1, r3
 8001a38:	4808      	ldr	r0, [pc, #32]	; (8001a5c <timer_init+0xa8>)
 8001a3a:	f001 fbf3 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2101      	movs	r1, #1
 8001a42:	201e      	movs	r0, #30
 8001a44:	f000 fa11 	bl	8001e6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a48:	201e      	movs	r0, #30
 8001a4a:	f000 fa2a 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	20000124 	.word	0x20000124
 8001a60:	40000800 	.word	0x40000800

08001a64 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <TIM4_IRQHandler+0x10>)
 8001a6a:	f001 f8f3 	bl	8002c54 <HAL_TIM_IRQHandler>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000124 	.word	0x20000124

08001a78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_USART1_UART_Init+0x4c>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_USART1_UART_Init+0x50>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_USART1_UART_Init+0x4c>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_USART1_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_USART1_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_USART1_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_USART1_UART_Init+0x4c>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_USART1_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_USART1_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART1_UART_Init+0x4c>)
 8001ab0:	f001 fc28 	bl	8003304 <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aba:	f7ff fe19 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000016c 	.word	0x2000016c
 8001ac8:	40013800 	.word	0x40013800

08001acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <HAL_UART_MspInit+0x8c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d131      	bne.n	8001b50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a1a      	ldr	r2, [pc, #104]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_UART_MspInit+0x90>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480b      	ldr	r0, [pc, #44]	; (8001b60 <HAL_UART_MspInit+0x94>)
 8001b32:	f000 f9d1 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_UART_MspInit+0x94>)
 8001b4c:	f000 f9c4 	bl	8001ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40013800 	.word	0x40013800
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010800 	.word	0x40010800

08001b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b66:	490d      	ldr	r1, [pc, #52]	; (8001b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b8a:	f7ff ff0d 	bl	80019a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f001 fd77 	bl	8003680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b92:	f7ff f913 	bl	8000dbc <main>
  bx lr
 8001b96:	4770      	bx	lr
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ba0:	08004d44 	.word	0x08004d44
  ldr r2, =_sbss
 8001ba4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ba8:	200001c4 	.word	0x200001c4

08001bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC1_2_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_Init+0x28>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_Init+0x28>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 f947 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f000 f808 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fe04 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f95f 	bl	8001ebe <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f000 f927 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000004 	.word	0x20000004
 8001c34:	2000000c 	.word	0x2000000c
 8001c38:	20000008 	.word	0x20000008

08001c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_IncTick+0x1c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_IncTick+0x20>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a03      	ldr	r2, [pc, #12]	; (8001c5c <HAL_IncTick+0x20>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	2000000c 	.word	0x2000000c
 8001c5c:	200001b0 	.word	0x200001b0

08001c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <HAL_GetTick+0x10>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	200001b0 	.word	0x200001b0

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffe0 	bl	8001c60 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000000c 	.word	0x2000000c

08001cbc <__NVIC_SetPriorityGrouping>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4906      	ldr	r1, [pc, #24]	; (8001d54 <__NVIC_EnableIRQ+0x34>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff90 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff2d 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff42 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff90 	bl	8001dac <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff35 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b08b      	sub	sp, #44	; 0x2c
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eea:	e169      	b.n	80021c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eec:	2201      	movs	r2, #1
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 8158 	bne.w	80021ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4a9a      	ldr	r2, [pc, #616]	; (8002178 <HAL_GPIO_Init+0x2a0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d05e      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
 8001f14:	4a98      	ldr	r2, [pc, #608]	; (8002178 <HAL_GPIO_Init+0x2a0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d875      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f1a:	4a98      	ldr	r2, [pc, #608]	; (800217c <HAL_GPIO_Init+0x2a4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d058      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
 8001f20:	4a96      	ldr	r2, [pc, #600]	; (800217c <HAL_GPIO_Init+0x2a4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d86f      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f26:	4a96      	ldr	r2, [pc, #600]	; (8002180 <HAL_GPIO_Init+0x2a8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d052      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
 8001f2c:	4a94      	ldr	r2, [pc, #592]	; (8002180 <HAL_GPIO_Init+0x2a8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d869      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f32:	4a94      	ldr	r2, [pc, #592]	; (8002184 <HAL_GPIO_Init+0x2ac>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d04c      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
 8001f38:	4a92      	ldr	r2, [pc, #584]	; (8002184 <HAL_GPIO_Init+0x2ac>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d863      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f3e:	4a92      	ldr	r2, [pc, #584]	; (8002188 <HAL_GPIO_Init+0x2b0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d046      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
 8001f44:	4a90      	ldr	r2, [pc, #576]	; (8002188 <HAL_GPIO_Init+0x2b0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d85d      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f4a:	2b12      	cmp	r3, #18
 8001f4c:	d82a      	bhi.n	8001fa4 <HAL_GPIO_Init+0xcc>
 8001f4e:	2b12      	cmp	r3, #18
 8001f50:	d859      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f52:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <HAL_GPIO_Init+0x80>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001fd3 	.word	0x08001fd3
 8001f5c:	08001fad 	.word	0x08001fad
 8001f60:	08001fbf 	.word	0x08001fbf
 8001f64:	08002001 	.word	0x08002001
 8001f68:	08002007 	.word	0x08002007
 8001f6c:	08002007 	.word	0x08002007
 8001f70:	08002007 	.word	0x08002007
 8001f74:	08002007 	.word	0x08002007
 8001f78:	08002007 	.word	0x08002007
 8001f7c:	08002007 	.word	0x08002007
 8001f80:	08002007 	.word	0x08002007
 8001f84:	08002007 	.word	0x08002007
 8001f88:	08002007 	.word	0x08002007
 8001f8c:	08002007 	.word	0x08002007
 8001f90:	08002007 	.word	0x08002007
 8001f94:	08002007 	.word	0x08002007
 8001f98:	08002007 	.word	0x08002007
 8001f9c:	08001fb5 	.word	0x08001fb5
 8001fa0:	08001fc9 	.word	0x08001fc9
 8001fa4:	4a79      	ldr	r2, [pc, #484]	; (800218c <HAL_GPIO_Init+0x2b4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001faa:	e02c      	b.n	8002006 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	623b      	str	r3, [r7, #32]
          break;
 8001fb2:	e029      	b.n	8002008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	623b      	str	r3, [r7, #32]
          break;
 8001fbc:	e024      	b.n	8002008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	3308      	adds	r3, #8
 8001fc4:	623b      	str	r3, [r7, #32]
          break;
 8001fc6:	e01f      	b.n	8002008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	330c      	adds	r3, #12
 8001fce:	623b      	str	r3, [r7, #32]
          break;
 8001fd0:	e01a      	b.n	8002008 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e013      	b.n	8002008 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	611a      	str	r2, [r3, #16]
          break;
 8001ff2:	e009      	b.n	8002008 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	615a      	str	r2, [r3, #20]
          break;
 8001ffe:	e003      	b.n	8002008 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
          break;
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x130>
          break;
 8002006:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2bff      	cmp	r3, #255	; 0xff
 800200c:	d801      	bhi.n	8002012 <HAL_GPIO_Init+0x13a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	e001      	b.n	8002016 <HAL_GPIO_Init+0x13e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2bff      	cmp	r3, #255	; 0xff
 800201c:	d802      	bhi.n	8002024 <HAL_GPIO_Init+0x14c>
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x152>
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	3b08      	subs	r3, #8
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	210f      	movs	r1, #15
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	401a      	ands	r2, r3
 800203c:	6a39      	ldr	r1, [r7, #32]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	431a      	orrs	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80b1 	beq.w	80021ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002058:	4b4d      	ldr	r3, [pc, #308]	; (8002190 <HAL_GPIO_Init+0x2b8>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a4c      	ldr	r2, [pc, #304]	; (8002190 <HAL_GPIO_Init+0x2b8>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <HAL_GPIO_Init+0x2b8>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002070:	4a48      	ldr	r2, [pc, #288]	; (8002194 <HAL_GPIO_Init+0x2bc>)
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	220f      	movs	r2, #15
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a40      	ldr	r2, [pc, #256]	; (8002198 <HAL_GPIO_Init+0x2c0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d013      	beq.n	80020c4 <HAL_GPIO_Init+0x1ec>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3f      	ldr	r2, [pc, #252]	; (800219c <HAL_GPIO_Init+0x2c4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00d      	beq.n	80020c0 <HAL_GPIO_Init+0x1e8>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a3e      	ldr	r2, [pc, #248]	; (80021a0 <HAL_GPIO_Init+0x2c8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d007      	beq.n	80020bc <HAL_GPIO_Init+0x1e4>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a3d      	ldr	r2, [pc, #244]	; (80021a4 <HAL_GPIO_Init+0x2cc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_GPIO_Init+0x1e0>
 80020b4:	2303      	movs	r3, #3
 80020b6:	e006      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020b8:	2304      	movs	r3, #4
 80020ba:	e004      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020bc:	2302      	movs	r3, #2
 80020be:	e002      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020c4:	2300      	movs	r3, #0
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	f002 0203 	and.w	r2, r2, #3
 80020cc:	0092      	lsls	r2, r2, #2
 80020ce:	4093      	lsls	r3, r2
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020d6:	492f      	ldr	r1, [pc, #188]	; (8002194 <HAL_GPIO_Init+0x2bc>)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	492c      	ldr	r1, [pc, #176]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020fe:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	43db      	mvns	r3, r3
 8002106:	4928      	ldr	r1, [pc, #160]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002108:	4013      	ands	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4922      	ldr	r1, [pc, #136]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	43db      	mvns	r3, r3
 800212e:	491e      	ldr	r1, [pc, #120]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002130:	4013      	ands	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	4918      	ldr	r1, [pc, #96]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]
 800214c:	e006      	b.n	800215c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	43db      	mvns	r3, r3
 8002156:	4914      	ldr	r1, [pc, #80]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002158:	4013      	ands	r3, r2
 800215a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d021      	beq.n	80021ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	490e      	ldr	r1, [pc, #56]	; (80021a8 <HAL_GPIO_Init+0x2d0>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	60cb      	str	r3, [r1, #12]
 8002174:	e021      	b.n	80021ba <HAL_GPIO_Init+0x2e2>
 8002176:	bf00      	nop
 8002178:	10320000 	.word	0x10320000
 800217c:	10310000 	.word	0x10310000
 8002180:	10220000 	.word	0x10220000
 8002184:	10210000 	.word	0x10210000
 8002188:	10120000 	.word	0x10120000
 800218c:	10110000 	.word	0x10110000
 8002190:	40021000 	.word	0x40021000
 8002194:	40010000 	.word	0x40010000
 8002198:	40010800 	.word	0x40010800
 800219c:	40010c00 	.word	0x40010c00
 80021a0:	40011000 	.word	0x40011000
 80021a4:	40011400 	.word	0x40011400
 80021a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_GPIO_Init+0x304>)
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	4909      	ldr	r1, [pc, #36]	; (80021dc <HAL_GPIO_Init+0x304>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	3301      	adds	r3, #1
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f47f ae8e 	bne.w	8001eec <HAL_GPIO_Init+0x14>
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	372c      	adds	r7, #44	; 0x2c
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e001      	b.n	8002202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	807b      	strh	r3, [r7, #2]
 800221a:	4613      	mov	r3, r2
 800221c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800221e:	787b      	ldrb	r3, [r7, #1]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002224:	887a      	ldrh	r2, [r7, #2]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800222a:	e003      	b.n	8002234 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	041a      	lsls	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	611a      	str	r2, [r3, #16]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
	...

08002240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f93c 	bl	80014dc <HAL_GPIO_EXTI_Callback>
  }
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e272      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8087 	beq.w	800239e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002290:	4b92      	ldr	r3, [pc, #584]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b04      	cmp	r3, #4
 800229a:	d00c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800229c:	4b8f      	ldr	r3, [pc, #572]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d112      	bne.n	80022ce <HAL_RCC_OscConfig+0x5e>
 80022a8:	4b8c      	ldr	r3, [pc, #560]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d10b      	bne.n	80022ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d06c      	beq.n	800239c <HAL_RCC_OscConfig+0x12c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d168      	bne.n	800239c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e24c      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x76>
 80022d8:	4b80      	ldr	r3, [pc, #512]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a7f      	ldr	r2, [pc, #508]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e02e      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x98>
 80022ee:	4b7b      	ldr	r3, [pc, #492]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7a      	ldr	r2, [pc, #488]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b78      	ldr	r3, [pc, #480]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a77      	ldr	r2, [pc, #476]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e01d      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0xbc>
 8002312:	4b72      	ldr	r3, [pc, #456]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a71      	ldr	r2, [pc, #452]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6e      	ldr	r2, [pc, #440]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 800232c:	4b6b      	ldr	r3, [pc, #428]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6a      	ldr	r2, [pc, #424]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b68      	ldr	r3, [pc, #416]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a67      	ldr	r2, [pc, #412]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fc88 	bl	8001c60 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fc84 	bl	8001c60 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e200      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0xe4>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fc74 	bl	8001c60 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff fc70 	bl	8001c60 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1ec      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x10c>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d063      	beq.n	8002472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023aa:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023b6:	4b49      	ldr	r3, [pc, #292]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d11c      	bne.n	80023fc <HAL_RCC_OscConfig+0x18c>
 80023c2:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x176>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e1c0      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4939      	ldr	r1, [pc, #228]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	e03a      	b.n	8002472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002404:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff fc29 	bl	8001c60 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002412:	f7ff fc25 	bl	8001c60 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e1a1      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4927      	ldr	r1, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
 8002444:	e015      	b.n	8002472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7ff fc08 	bl	8001c60 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002454:	f7ff fc04 	bl	8001c60 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e180      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d03a      	beq.n	80024f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d019      	beq.n	80024ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7ff fbe8 	bl	8001c60 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002494:	f7ff fbe4 	bl	8001c60 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e160      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f000 fad8 	bl	8002a68 <RCC_Delay>
 80024b8:	e01c      	b.n	80024f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_RCC_OscConfig+0x274>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7ff fbce 	bl	8001c60 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c6:	e00f      	b.n	80024e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c8:	f7ff fbca 	bl	8001c60 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d908      	bls.n	80024e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e146      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	42420000 	.word	0x42420000
 80024e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	4b92      	ldr	r3, [pc, #584]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e9      	bne.n	80024c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80a6 	beq.w	800264e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002506:	4b8b      	ldr	r3, [pc, #556]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a87      	ldr	r2, [pc, #540]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]
 800251e:	4b85      	ldr	r3, [pc, #532]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b82      	ldr	r3, [pc, #520]	; (8002738 <HAL_RCC_OscConfig+0x4c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d118      	bne.n	800256c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253a:	4b7f      	ldr	r3, [pc, #508]	; (8002738 <HAL_RCC_OscConfig+0x4c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7e      	ldr	r2, [pc, #504]	; (8002738 <HAL_RCC_OscConfig+0x4c8>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002546:	f7ff fb8b 	bl	8001c60 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254e:	f7ff fb87 	bl	8001c60 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b64      	cmp	r3, #100	; 0x64
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e103      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	4b75      	ldr	r3, [pc, #468]	; (8002738 <HAL_RCC_OscConfig+0x4c8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x312>
 8002574:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	e02d      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x334>
 800258a:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a69      	ldr	r2, [pc, #420]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b67      	ldr	r3, [pc, #412]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a66      	ldr	r2, [pc, #408]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	e01c      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCC_OscConfig+0x356>
 80025ac:	4b61      	ldr	r3, [pc, #388]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a60      	ldr	r2, [pc, #384]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	4b5e      	ldr	r3, [pc, #376]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a5d      	ldr	r2, [pc, #372]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	e00b      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 80025c6:	4b5b      	ldr	r3, [pc, #364]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a5a      	ldr	r2, [pc, #360]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6213      	str	r3, [r2, #32]
 80025d2:	4b58      	ldr	r3, [pc, #352]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a57      	ldr	r2, [pc, #348]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d015      	beq.n	8002612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7ff fb3b 	bl	8001c60 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7ff fb37 	bl	8001c60 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0b1      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ee      	beq.n	80025ee <HAL_RCC_OscConfig+0x37e>
 8002610:	e014      	b.n	800263c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7ff fb25 	bl	8001c60 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7ff fb21 	bl	8001c60 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e09b      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	4b40      	ldr	r3, [pc, #256]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ee      	bne.n	800261a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d105      	bne.n	800264e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002642:	4b3c      	ldr	r3, [pc, #240]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4a3b      	ldr	r2, [pc, #236]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8087 	beq.w	8002766 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002658:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d061      	beq.n	8002728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d146      	bne.n	80026fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266c:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff faf5 	bl	8001c60 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7ff faf1 	bl	8001c60 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e06d      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d108      	bne.n	80026b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4921      	ldr	r1, [pc, #132]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a19      	ldr	r1, [r3, #32]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	430b      	orrs	r3, r1
 80026c6:	491b      	ldr	r1, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7ff fac5 	bl	8001c60 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026da:	f7ff fac1 	bl	8001c60 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e03d      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x46a>
 80026f8:	e035      	b.n	8002766 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff faae 	bl	8001c60 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7ff faaa 	bl	8001c60 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e026      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x498>
 8002726:	e01e      	b.n	8002766 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e019      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
 800273c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_OscConfig+0x500>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	429a      	cmp	r2, r3
 8002752:	d106      	bne.n	8002762 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d001      	beq.n	8002766 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000

08002774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0d0      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d910      	bls.n	80027b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b67      	ldr	r3, [pc, #412]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	4965      	ldr	r1, [pc, #404]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b63      	ldr	r3, [pc, #396]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0b8      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d020      	beq.n	8002806 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d0:	4b59      	ldr	r3, [pc, #356]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a58      	ldr	r2, [pc, #352]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e8:	4b53      	ldr	r3, [pc, #332]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a52      	ldr	r2, [pc, #328]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	494d      	ldr	r1, [pc, #308]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d040      	beq.n	8002894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d115      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e07f      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002832:	4b41      	ldr	r3, [pc, #260]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e073      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e06b      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002852:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f023 0203 	bic.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4936      	ldr	r1, [pc, #216]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002864:	f7ff f9fc 	bl	8001c60 <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	e00a      	b.n	8002882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7ff f9f8 	bl	8001c60 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e053      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 020c 	and.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	429a      	cmp	r2, r3
 8002892:	d1eb      	bne.n	800286c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002894:	4b27      	ldr	r3, [pc, #156]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d210      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0207 	bic.w	r2, r3, #7
 80028aa:	4922      	ldr	r1, [pc, #136]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e032      	b.n	800292a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4916      	ldr	r1, [pc, #88]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	490e      	ldr	r1, [pc, #56]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002902:	f000 f821 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8002906:	4602      	mov	r2, r0
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	490a      	ldr	r1, [pc, #40]	; (800293c <HAL_RCC_ClockConfig+0x1c8>)
 8002914:	5ccb      	ldrb	r3, [r1, r3]
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	4a09      	ldr	r2, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1cc>)
 800291c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1d0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f95a 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40022000 	.word	0x40022000
 8002938:	40021000 	.word	0x40021000
 800293c:	08004c8c 	.word	0x08004c8c
 8002940:	20000004 	.word	0x20000004
 8002944:	20000008 	.word	0x20000008

08002948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002948:	b490      	push	{r4, r7}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800294e:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002950:	1d3c      	adds	r4, r7, #4
 8002952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002958:	f240 2301 	movw	r3, #513	; 0x201
 800295c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b04      	cmp	r3, #4
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x40>
 8002982:	2b08      	cmp	r3, #8
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x46>
 8002986:	e02b      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002988:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800298a:	623b      	str	r3, [r7, #32]
      break;
 800298c:	e02b      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	0c9b      	lsrs	r3, r3, #18
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3328      	adds	r3, #40	; 0x28
 8002998:	443b      	add	r3, r7
 800299a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800299e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d012      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0c5b      	lsrs	r3, r3, #17
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	3328      	adds	r3, #40	; 0x28
 80029b6:	443b      	add	r3, r7
 80029b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80029c2:	fb03 f202 	mul.w	r2, r3, r2
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	e004      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	623b      	str	r3, [r7, #32]
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80029e2:	623b      	str	r3, [r7, #32]
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	6a3b      	ldr	r3, [r7, #32]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3728      	adds	r7, #40	; 0x28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc90      	pop	{r4, r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	08004c7c 	.word	0x08004c7c
 80029f8:	40021000 	.word	0x40021000
 80029fc:	007a1200 	.word	0x007a1200
 8002a00:	003d0900 	.word	0x003d0900

08002a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a08:	4b02      	ldr	r3, [pc, #8]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000004 	.word	0x20000004

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a1c:	f7ff fff2 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08004c9c 	.word	0x08004c9c

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a44:	f7ff ffde 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	0adb      	lsrs	r3, r3, #11
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08004c9c 	.word	0x08004c9c

08002a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <RCC_Delay+0x34>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <RCC_Delay+0x38>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0a5b      	lsrs	r3, r3, #9
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a84:	bf00      	nop
  }
  while (Delay --);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e5a      	subs	r2, r3, #1
 8002a8a:	60fa      	str	r2, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f9      	bne.n	8002a84 <RCC_Delay+0x1c>
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000004 	.word	0x20000004
 8002aa0:	10624dd3 	.word	0x10624dd3

08002aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e041      	b.n	8002b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f839 	bl	8002b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 faa6 	bl	8003034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d001      	beq.n	8002b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e03a      	b.n	8002be2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_TIM_Base_Start_IT+0x98>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x58>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b96:	d009      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x58>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x58>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d111      	bne.n	8002bd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d010      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0201 	orr.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bce:	e007      	b.n	8002be0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800

08002bf8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a1a      	ldr	r2, [r3, #32]
 8002c16:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <HAL_TIM_Base_Stop_IT+0x48>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	f240 4344 	movw	r3, #1092	; 0x444
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_Base_Stop_IT+0x48>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0202 	mvn.w	r2, #2
 8002c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f9b1 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f9a4 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f9b3 	bl	8003010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d122      	bne.n	8002d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d11b      	bne.n	8002d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0204 	mvn.w	r2, #4
 8002cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f987 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f97a 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f989 	bl	8003010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d122      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d11b      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0208 	mvn.w	r2, #8
 8002d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f95d 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f950 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f95f 	bl	8003010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d122      	bne.n	8002dac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d11b      	bne.n	8002dac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0210 	mvn.w	r2, #16
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2208      	movs	r2, #8
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f933 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f926 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f935 	bl	8003010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d10e      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d107      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0201 	mvn.w	r2, #1
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe fbf6 	bl	80015c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b80      	cmp	r3, #128	; 0x80
 8002de4:	d10e      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b80      	cmp	r3, #128	; 0x80
 8002df2:	d107      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa77 	bl	80032f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b40      	cmp	r3, #64	; 0x40
 8002e10:	d10e      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d107      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8f9 	bl	8003022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d10e      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d107      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0220 	mvn.w	r2, #32
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fa42 	bl	80032e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_TIM_ConfigClockSource+0x18>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0b3      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x180>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb4:	d03e      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0xd0>
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eba:	f200 8087 	bhi.w	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	f000 8085 	beq.w	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	d87f      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002ecc:	2b70      	cmp	r3, #112	; 0x70
 8002ece:	d01a      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xa2>
 8002ed0:	2b70      	cmp	r3, #112	; 0x70
 8002ed2:	d87b      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d050      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x116>
 8002ed8:	2b60      	cmp	r3, #96	; 0x60
 8002eda:	d877      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002edc:	2b50      	cmp	r3, #80	; 0x50
 8002ede:	d03c      	beq.n	8002f5a <HAL_TIM_ConfigClockSource+0xf6>
 8002ee0:	2b50      	cmp	r3, #80	; 0x50
 8002ee2:	d873      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d058      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x136>
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d86f      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d064      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x156>
 8002ef0:	2b30      	cmp	r3, #48	; 0x30
 8002ef2:	d86b      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d060      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x156>
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d867      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05c      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x156>
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d05a      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f04:	e062      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6899      	ldr	r1, [r3, #8]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f000 f966 	bl	80031e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	609a      	str	r2, [r3, #8]
      break;
 8002f32:	e04e      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6899      	ldr	r1, [r3, #8]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f000 f94f 	bl	80031e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f56:	609a      	str	r2, [r3, #8]
      break;
 8002f58:	e03b      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6859      	ldr	r1, [r3, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f000 f8c6 	bl	80030f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2150      	movs	r1, #80	; 0x50
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f91d 	bl	80031b2 <TIM_ITRx_SetConfig>
      break;
 8002f78:	e02b      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f000 f8e4 	bl	8003154 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2160      	movs	r1, #96	; 0x60
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f90d 	bl	80031b2 <TIM_ITRx_SetConfig>
      break;
 8002f98:	e01b      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f000 f8a6 	bl	80030f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2140      	movs	r1, #64	; 0x40
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f8fd 	bl	80031b2 <TIM_ITRx_SetConfig>
      break;
 8002fb8:	e00b      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f000 f8f4 	bl	80031b2 <TIM_ITRx_SetConfig>
        break;
 8002fca:	e002      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a29      	ldr	r2, [pc, #164]	; (80030ec <TIM_Base_SetConfig+0xb8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00b      	beq.n	8003064 <TIM_Base_SetConfig+0x30>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003052:	d007      	beq.n	8003064 <TIM_Base_SetConfig+0x30>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <TIM_Base_SetConfig+0xbc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_Base_SetConfig+0x30>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <TIM_Base_SetConfig+0xc0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d108      	bne.n	8003076 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <TIM_Base_SetConfig+0xb8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00b      	beq.n	8003096 <TIM_Base_SetConfig+0x62>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d007      	beq.n	8003096 <TIM_Base_SetConfig+0x62>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <TIM_Base_SetConfig+0xbc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0x62>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <TIM_Base_SetConfig+0xc0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a07      	ldr	r2, [pc, #28]	; (80030ec <TIM_Base_SetConfig+0xb8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d103      	bne.n	80030dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	615a      	str	r2, [r3, #20]
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40000800 	.word	0x40000800

080030f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0201 	bic.w	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 030a 	bic.w	r3, r3, #10
 8003134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f023 0210 	bic.w	r2, r3, #16
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800317e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	031b      	lsls	r3, r3, #12
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003190:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	621a      	str	r2, [r3, #32]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f043 0307 	orr.w	r3, r3, #7
 80031d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	609a      	str	r2, [r3, #8]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003200:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	021a      	lsls	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	431a      	orrs	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	609a      	str	r2, [r3, #8]
}
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e046      	b.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d009      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a10      	ldr	r2, [pc, #64]	; (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10c      	bne.n	80032b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800

080032e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e03f      	b.n	8003396 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe fbce 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	; 0x24
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f905 	bl	8003558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800335c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800336c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800337c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b08a      	sub	sp, #40	; 0x28
 80033a2:	af02      	add	r7, sp, #8
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d17c      	bne.n	80034b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_UART_Transmit+0x2c>
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e075      	b.n	80034ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_UART_Transmit+0x3e>
 80033d8:	2302      	movs	r3, #2
 80033da:	e06e      	b.n	80034ba <HAL_UART_Transmit+0x11c>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2221      	movs	r2, #33	; 0x21
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f2:	f7fe fc35 	bl	8001c60 <HAL_GetTick>
 80033f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	88fa      	ldrh	r2, [r7, #6]
 80033fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340c:	d108      	bne.n	8003420 <HAL_UART_Transmit+0x82>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e003      	b.n	8003428 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003430:	e02a      	b.n	8003488 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f840 	bl	80034c2 <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e036      	b.n	80034ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003460:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	3302      	adds	r3, #2
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e007      	b.n	800347a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	3301      	adds	r3, #1
 8003478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1cf      	bne.n	8003432 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2200      	movs	r2, #0
 800349a:	2140      	movs	r1, #64	; 0x40
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f810 	bl	80034c2 <UART_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e006      	b.n	80034ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4613      	mov	r3, r2
 80034d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d2:	e02c      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d028      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80034e2:	f7fe fbbd 	bl	8001c60 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d21d      	bcs.n	800352e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003500:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e00f      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	429a      	cmp	r2, r3
 800354a:	d0c3      	beq.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003592:	f023 030c 	bic.w	r3, r3, #12
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	430b      	orrs	r3, r1
 800359e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2c      	ldr	r2, [pc, #176]	; (800366c <UART_SetConfig+0x114>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d103      	bne.n	80035c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035c0:	f7ff fa3e 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	e002      	b.n	80035ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035c8:	f7ff fa26 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 80035cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	009a      	lsls	r2, r3, #2
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	4a22      	ldr	r2, [pc, #136]	; (8003670 <UART_SetConfig+0x118>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	0119      	lsls	r1, r3, #4
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009a      	lsls	r2, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fbb2 f2f3 	udiv	r2, r2, r3
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <UART_SetConfig+0x118>)
 8003606:	fba3 0302 	umull	r0, r3, r3, r2
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	2064      	movs	r0, #100	; 0x64
 800360e:	fb00 f303 	mul.w	r3, r0, r3
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	3332      	adds	r3, #50	; 0x32
 8003618:	4a15      	ldr	r2, [pc, #84]	; (8003670 <UART_SetConfig+0x118>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003624:	4419      	add	r1, r3
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	009a      	lsls	r2, r3, #2
 8003630:	441a      	add	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	fbb2 f2f3 	udiv	r2, r2, r3
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <UART_SetConfig+0x118>)
 800363e:	fba3 0302 	umull	r0, r3, r3, r2
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	2064      	movs	r0, #100	; 0x64
 8003646:	fb00 f303 	mul.w	r3, r0, r3
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	3332      	adds	r3, #50	; 0x32
 8003650:	4a07      	ldr	r2, [pc, #28]	; (8003670 <UART_SetConfig+0x118>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	440a      	add	r2, r1
 8003662:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40013800 	.word	0x40013800
 8003670:	51eb851f 	.word	0x51eb851f

08003674 <__errno>:
 8003674:	4b01      	ldr	r3, [pc, #4]	; (800367c <__errno+0x8>)
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000010 	.word	0x20000010

08003680 <__libc_init_array>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	2600      	movs	r6, #0
 8003684:	4d0c      	ldr	r5, [pc, #48]	; (80036b8 <__libc_init_array+0x38>)
 8003686:	4c0d      	ldr	r4, [pc, #52]	; (80036bc <__libc_init_array+0x3c>)
 8003688:	1b64      	subs	r4, r4, r5
 800368a:	10a4      	asrs	r4, r4, #2
 800368c:	42a6      	cmp	r6, r4
 800368e:	d109      	bne.n	80036a4 <__libc_init_array+0x24>
 8003690:	f001 fa08 	bl	8004aa4 <_init>
 8003694:	2600      	movs	r6, #0
 8003696:	4d0a      	ldr	r5, [pc, #40]	; (80036c0 <__libc_init_array+0x40>)
 8003698:	4c0a      	ldr	r4, [pc, #40]	; (80036c4 <__libc_init_array+0x44>)
 800369a:	1b64      	subs	r4, r4, r5
 800369c:	10a4      	asrs	r4, r4, #2
 800369e:	42a6      	cmp	r6, r4
 80036a0:	d105      	bne.n	80036ae <__libc_init_array+0x2e>
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a8:	4798      	blx	r3
 80036aa:	3601      	adds	r6, #1
 80036ac:	e7ee      	b.n	800368c <__libc_init_array+0xc>
 80036ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b2:	4798      	blx	r3
 80036b4:	3601      	adds	r6, #1
 80036b6:	e7f2      	b.n	800369e <__libc_init_array+0x1e>
 80036b8:	08004d3c 	.word	0x08004d3c
 80036bc:	08004d3c 	.word	0x08004d3c
 80036c0:	08004d3c 	.word	0x08004d3c
 80036c4:	08004d40 	.word	0x08004d40

080036c8 <memset>:
 80036c8:	4603      	mov	r3, r0
 80036ca:	4402      	add	r2, r0
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d100      	bne.n	80036d2 <memset+0xa>
 80036d0:	4770      	bx	lr
 80036d2:	f803 1b01 	strb.w	r1, [r3], #1
 80036d6:	e7f9      	b.n	80036cc <memset+0x4>

080036d8 <iprintf>:
 80036d8:	b40f      	push	{r0, r1, r2, r3}
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <iprintf+0x2c>)
 80036dc:	b513      	push	{r0, r1, r4, lr}
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	b124      	cbz	r4, 80036ec <iprintf+0x14>
 80036e2:	69a3      	ldr	r3, [r4, #24]
 80036e4:	b913      	cbnz	r3, 80036ec <iprintf+0x14>
 80036e6:	4620      	mov	r0, r4
 80036e8:	f000 fa7a 	bl	8003be0 <__sinit>
 80036ec:	ab05      	add	r3, sp, #20
 80036ee:	4620      	mov	r0, r4
 80036f0:	9a04      	ldr	r2, [sp, #16]
 80036f2:	68a1      	ldr	r1, [r4, #8]
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	f000 fdd9 	bl	80042ac <_vfiprintf_r>
 80036fa:	b002      	add	sp, #8
 80036fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003700:	b004      	add	sp, #16
 8003702:	4770      	bx	lr
 8003704:	20000010 	.word	0x20000010

08003708 <_puts_r>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	460e      	mov	r6, r1
 800370c:	4605      	mov	r5, r0
 800370e:	b118      	cbz	r0, 8003718 <_puts_r+0x10>
 8003710:	6983      	ldr	r3, [r0, #24]
 8003712:	b90b      	cbnz	r3, 8003718 <_puts_r+0x10>
 8003714:	f000 fa64 	bl	8003be0 <__sinit>
 8003718:	69ab      	ldr	r3, [r5, #24]
 800371a:	68ac      	ldr	r4, [r5, #8]
 800371c:	b913      	cbnz	r3, 8003724 <_puts_r+0x1c>
 800371e:	4628      	mov	r0, r5
 8003720:	f000 fa5e 	bl	8003be0 <__sinit>
 8003724:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <_puts_r+0xd0>)
 8003726:	429c      	cmp	r4, r3
 8003728:	d120      	bne.n	800376c <_puts_r+0x64>
 800372a:	686c      	ldr	r4, [r5, #4]
 800372c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800372e:	07db      	lsls	r3, r3, #31
 8003730:	d405      	bmi.n	800373e <_puts_r+0x36>
 8003732:	89a3      	ldrh	r3, [r4, #12]
 8003734:	0598      	lsls	r0, r3, #22
 8003736:	d402      	bmi.n	800373e <_puts_r+0x36>
 8003738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800373a:	f000 faef 	bl	8003d1c <__retarget_lock_acquire_recursive>
 800373e:	89a3      	ldrh	r3, [r4, #12]
 8003740:	0719      	lsls	r1, r3, #28
 8003742:	d51d      	bpl.n	8003780 <_puts_r+0x78>
 8003744:	6923      	ldr	r3, [r4, #16]
 8003746:	b1db      	cbz	r3, 8003780 <_puts_r+0x78>
 8003748:	3e01      	subs	r6, #1
 800374a:	68a3      	ldr	r3, [r4, #8]
 800374c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003750:	3b01      	subs	r3, #1
 8003752:	60a3      	str	r3, [r4, #8]
 8003754:	bb39      	cbnz	r1, 80037a6 <_puts_r+0x9e>
 8003756:	2b00      	cmp	r3, #0
 8003758:	da38      	bge.n	80037cc <_puts_r+0xc4>
 800375a:	4622      	mov	r2, r4
 800375c:	210a      	movs	r1, #10
 800375e:	4628      	mov	r0, r5
 8003760:	f000 f868 	bl	8003834 <__swbuf_r>
 8003764:	3001      	adds	r0, #1
 8003766:	d011      	beq.n	800378c <_puts_r+0x84>
 8003768:	250a      	movs	r5, #10
 800376a:	e011      	b.n	8003790 <_puts_r+0x88>
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <_puts_r+0xd4>)
 800376e:	429c      	cmp	r4, r3
 8003770:	d101      	bne.n	8003776 <_puts_r+0x6e>
 8003772:	68ac      	ldr	r4, [r5, #8]
 8003774:	e7da      	b.n	800372c <_puts_r+0x24>
 8003776:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <_puts_r+0xd8>)
 8003778:	429c      	cmp	r4, r3
 800377a:	bf08      	it	eq
 800377c:	68ec      	ldreq	r4, [r5, #12]
 800377e:	e7d5      	b.n	800372c <_puts_r+0x24>
 8003780:	4621      	mov	r1, r4
 8003782:	4628      	mov	r0, r5
 8003784:	f000 f8a8 	bl	80038d8 <__swsetup_r>
 8003788:	2800      	cmp	r0, #0
 800378a:	d0dd      	beq.n	8003748 <_puts_r+0x40>
 800378c:	f04f 35ff 	mov.w	r5, #4294967295
 8003790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003792:	07da      	lsls	r2, r3, #31
 8003794:	d405      	bmi.n	80037a2 <_puts_r+0x9a>
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	059b      	lsls	r3, r3, #22
 800379a:	d402      	bmi.n	80037a2 <_puts_r+0x9a>
 800379c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800379e:	f000 fabe 	bl	8003d1e <__retarget_lock_release_recursive>
 80037a2:	4628      	mov	r0, r5
 80037a4:	bd70      	pop	{r4, r5, r6, pc}
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	da04      	bge.n	80037b4 <_puts_r+0xac>
 80037aa:	69a2      	ldr	r2, [r4, #24]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	dc06      	bgt.n	80037be <_puts_r+0xb6>
 80037b0:	290a      	cmp	r1, #10
 80037b2:	d004      	beq.n	80037be <_puts_r+0xb6>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	6022      	str	r2, [r4, #0]
 80037ba:	7019      	strb	r1, [r3, #0]
 80037bc:	e7c5      	b.n	800374a <_puts_r+0x42>
 80037be:	4622      	mov	r2, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 f837 	bl	8003834 <__swbuf_r>
 80037c6:	3001      	adds	r0, #1
 80037c8:	d1bf      	bne.n	800374a <_puts_r+0x42>
 80037ca:	e7df      	b.n	800378c <_puts_r+0x84>
 80037cc:	250a      	movs	r5, #10
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	6022      	str	r2, [r4, #0]
 80037d4:	701d      	strb	r5, [r3, #0]
 80037d6:	e7db      	b.n	8003790 <_puts_r+0x88>
 80037d8:	08004cc8 	.word	0x08004cc8
 80037dc:	08004ce8 	.word	0x08004ce8
 80037e0:	08004ca8 	.word	0x08004ca8

080037e4 <puts>:
 80037e4:	4b02      	ldr	r3, [pc, #8]	; (80037f0 <puts+0xc>)
 80037e6:	4601      	mov	r1, r0
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	f7ff bf8d 	b.w	8003708 <_puts_r>
 80037ee:	bf00      	nop
 80037f0:	20000010 	.word	0x20000010

080037f4 <siprintf>:
 80037f4:	b40e      	push	{r1, r2, r3}
 80037f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037fa:	b500      	push	{lr}
 80037fc:	b09c      	sub	sp, #112	; 0x70
 80037fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003800:	9002      	str	r0, [sp, #8]
 8003802:	9006      	str	r0, [sp, #24]
 8003804:	9107      	str	r1, [sp, #28]
 8003806:	9104      	str	r1, [sp, #16]
 8003808:	4808      	ldr	r0, [pc, #32]	; (800382c <siprintf+0x38>)
 800380a:	4909      	ldr	r1, [pc, #36]	; (8003830 <siprintf+0x3c>)
 800380c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003810:	9105      	str	r1, [sp, #20]
 8003812:	6800      	ldr	r0, [r0, #0]
 8003814:	a902      	add	r1, sp, #8
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	f000 fc20 	bl	800405c <_svfiprintf_r>
 800381c:	2200      	movs	r2, #0
 800381e:	9b02      	ldr	r3, [sp, #8]
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	b01c      	add	sp, #112	; 0x70
 8003824:	f85d eb04 	ldr.w	lr, [sp], #4
 8003828:	b003      	add	sp, #12
 800382a:	4770      	bx	lr
 800382c:	20000010 	.word	0x20000010
 8003830:	ffff0208 	.word	0xffff0208

08003834 <__swbuf_r>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	460e      	mov	r6, r1
 8003838:	4614      	mov	r4, r2
 800383a:	4605      	mov	r5, r0
 800383c:	b118      	cbz	r0, 8003846 <__swbuf_r+0x12>
 800383e:	6983      	ldr	r3, [r0, #24]
 8003840:	b90b      	cbnz	r3, 8003846 <__swbuf_r+0x12>
 8003842:	f000 f9cd 	bl	8003be0 <__sinit>
 8003846:	4b21      	ldr	r3, [pc, #132]	; (80038cc <__swbuf_r+0x98>)
 8003848:	429c      	cmp	r4, r3
 800384a:	d12b      	bne.n	80038a4 <__swbuf_r+0x70>
 800384c:	686c      	ldr	r4, [r5, #4]
 800384e:	69a3      	ldr	r3, [r4, #24]
 8003850:	60a3      	str	r3, [r4, #8]
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	071a      	lsls	r2, r3, #28
 8003856:	d52f      	bpl.n	80038b8 <__swbuf_r+0x84>
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	b36b      	cbz	r3, 80038b8 <__swbuf_r+0x84>
 800385c:	6923      	ldr	r3, [r4, #16]
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	b2f6      	uxtb	r6, r6
 8003862:	1ac0      	subs	r0, r0, r3
 8003864:	6963      	ldr	r3, [r4, #20]
 8003866:	4637      	mov	r7, r6
 8003868:	4283      	cmp	r3, r0
 800386a:	dc04      	bgt.n	8003876 <__swbuf_r+0x42>
 800386c:	4621      	mov	r1, r4
 800386e:	4628      	mov	r0, r5
 8003870:	f000 f922 	bl	8003ab8 <_fflush_r>
 8003874:	bb30      	cbnz	r0, 80038c4 <__swbuf_r+0x90>
 8003876:	68a3      	ldr	r3, [r4, #8]
 8003878:	3001      	adds	r0, #1
 800387a:	3b01      	subs	r3, #1
 800387c:	60a3      	str	r3, [r4, #8]
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	6022      	str	r2, [r4, #0]
 8003884:	701e      	strb	r6, [r3, #0]
 8003886:	6963      	ldr	r3, [r4, #20]
 8003888:	4283      	cmp	r3, r0
 800388a:	d004      	beq.n	8003896 <__swbuf_r+0x62>
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	07db      	lsls	r3, r3, #31
 8003890:	d506      	bpl.n	80038a0 <__swbuf_r+0x6c>
 8003892:	2e0a      	cmp	r6, #10
 8003894:	d104      	bne.n	80038a0 <__swbuf_r+0x6c>
 8003896:	4621      	mov	r1, r4
 8003898:	4628      	mov	r0, r5
 800389a:	f000 f90d 	bl	8003ab8 <_fflush_r>
 800389e:	b988      	cbnz	r0, 80038c4 <__swbuf_r+0x90>
 80038a0:	4638      	mov	r0, r7
 80038a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <__swbuf_r+0x9c>)
 80038a6:	429c      	cmp	r4, r3
 80038a8:	d101      	bne.n	80038ae <__swbuf_r+0x7a>
 80038aa:	68ac      	ldr	r4, [r5, #8]
 80038ac:	e7cf      	b.n	800384e <__swbuf_r+0x1a>
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <__swbuf_r+0xa0>)
 80038b0:	429c      	cmp	r4, r3
 80038b2:	bf08      	it	eq
 80038b4:	68ec      	ldreq	r4, [r5, #12]
 80038b6:	e7ca      	b.n	800384e <__swbuf_r+0x1a>
 80038b8:	4621      	mov	r1, r4
 80038ba:	4628      	mov	r0, r5
 80038bc:	f000 f80c 	bl	80038d8 <__swsetup_r>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d0cb      	beq.n	800385c <__swbuf_r+0x28>
 80038c4:	f04f 37ff 	mov.w	r7, #4294967295
 80038c8:	e7ea      	b.n	80038a0 <__swbuf_r+0x6c>
 80038ca:	bf00      	nop
 80038cc:	08004cc8 	.word	0x08004cc8
 80038d0:	08004ce8 	.word	0x08004ce8
 80038d4:	08004ca8 	.word	0x08004ca8

080038d8 <__swsetup_r>:
 80038d8:	4b32      	ldr	r3, [pc, #200]	; (80039a4 <__swsetup_r+0xcc>)
 80038da:	b570      	push	{r4, r5, r6, lr}
 80038dc:	681d      	ldr	r5, [r3, #0]
 80038de:	4606      	mov	r6, r0
 80038e0:	460c      	mov	r4, r1
 80038e2:	b125      	cbz	r5, 80038ee <__swsetup_r+0x16>
 80038e4:	69ab      	ldr	r3, [r5, #24]
 80038e6:	b913      	cbnz	r3, 80038ee <__swsetup_r+0x16>
 80038e8:	4628      	mov	r0, r5
 80038ea:	f000 f979 	bl	8003be0 <__sinit>
 80038ee:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <__swsetup_r+0xd0>)
 80038f0:	429c      	cmp	r4, r3
 80038f2:	d10f      	bne.n	8003914 <__swsetup_r+0x3c>
 80038f4:	686c      	ldr	r4, [r5, #4]
 80038f6:	89a3      	ldrh	r3, [r4, #12]
 80038f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038fc:	0719      	lsls	r1, r3, #28
 80038fe:	d42c      	bmi.n	800395a <__swsetup_r+0x82>
 8003900:	06dd      	lsls	r5, r3, #27
 8003902:	d411      	bmi.n	8003928 <__swsetup_r+0x50>
 8003904:	2309      	movs	r3, #9
 8003906:	6033      	str	r3, [r6, #0]
 8003908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	81a3      	strh	r3, [r4, #12]
 8003912:	e03e      	b.n	8003992 <__swsetup_r+0xba>
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <__swsetup_r+0xd4>)
 8003916:	429c      	cmp	r4, r3
 8003918:	d101      	bne.n	800391e <__swsetup_r+0x46>
 800391a:	68ac      	ldr	r4, [r5, #8]
 800391c:	e7eb      	b.n	80038f6 <__swsetup_r+0x1e>
 800391e:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <__swsetup_r+0xd8>)
 8003920:	429c      	cmp	r4, r3
 8003922:	bf08      	it	eq
 8003924:	68ec      	ldreq	r4, [r5, #12]
 8003926:	e7e6      	b.n	80038f6 <__swsetup_r+0x1e>
 8003928:	0758      	lsls	r0, r3, #29
 800392a:	d512      	bpl.n	8003952 <__swsetup_r+0x7a>
 800392c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800392e:	b141      	cbz	r1, 8003942 <__swsetup_r+0x6a>
 8003930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003934:	4299      	cmp	r1, r3
 8003936:	d002      	beq.n	800393e <__swsetup_r+0x66>
 8003938:	4630      	mov	r0, r6
 800393a:	f000 fa57 	bl	8003dec <_free_r>
 800393e:	2300      	movs	r3, #0
 8003940:	6363      	str	r3, [r4, #52]	; 0x34
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003948:	81a3      	strh	r3, [r4, #12]
 800394a:	2300      	movs	r3, #0
 800394c:	6063      	str	r3, [r4, #4]
 800394e:	6923      	ldr	r3, [r4, #16]
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	89a3      	ldrh	r3, [r4, #12]
 8003954:	f043 0308 	orr.w	r3, r3, #8
 8003958:	81a3      	strh	r3, [r4, #12]
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	b94b      	cbnz	r3, 8003972 <__swsetup_r+0x9a>
 800395e:	89a3      	ldrh	r3, [r4, #12]
 8003960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003968:	d003      	beq.n	8003972 <__swsetup_r+0x9a>
 800396a:	4621      	mov	r1, r4
 800396c:	4630      	mov	r0, r6
 800396e:	f000 f9fd 	bl	8003d6c <__smakebuf_r>
 8003972:	89a0      	ldrh	r0, [r4, #12]
 8003974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003978:	f010 0301 	ands.w	r3, r0, #1
 800397c:	d00a      	beq.n	8003994 <__swsetup_r+0xbc>
 800397e:	2300      	movs	r3, #0
 8003980:	60a3      	str	r3, [r4, #8]
 8003982:	6963      	ldr	r3, [r4, #20]
 8003984:	425b      	negs	r3, r3
 8003986:	61a3      	str	r3, [r4, #24]
 8003988:	6923      	ldr	r3, [r4, #16]
 800398a:	b943      	cbnz	r3, 800399e <__swsetup_r+0xc6>
 800398c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003990:	d1ba      	bne.n	8003908 <__swsetup_r+0x30>
 8003992:	bd70      	pop	{r4, r5, r6, pc}
 8003994:	0781      	lsls	r1, r0, #30
 8003996:	bf58      	it	pl
 8003998:	6963      	ldrpl	r3, [r4, #20]
 800399a:	60a3      	str	r3, [r4, #8]
 800399c:	e7f4      	b.n	8003988 <__swsetup_r+0xb0>
 800399e:	2000      	movs	r0, #0
 80039a0:	e7f7      	b.n	8003992 <__swsetup_r+0xba>
 80039a2:	bf00      	nop
 80039a4:	20000010 	.word	0x20000010
 80039a8:	08004cc8 	.word	0x08004cc8
 80039ac:	08004ce8 	.word	0x08004ce8
 80039b0:	08004ca8 	.word	0x08004ca8

080039b4 <__sflush_r>:
 80039b4:	898a      	ldrh	r2, [r1, #12]
 80039b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b8:	4605      	mov	r5, r0
 80039ba:	0710      	lsls	r0, r2, #28
 80039bc:	460c      	mov	r4, r1
 80039be:	d457      	bmi.n	8003a70 <__sflush_r+0xbc>
 80039c0:	684b      	ldr	r3, [r1, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dc04      	bgt.n	80039d0 <__sflush_r+0x1c>
 80039c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	dc01      	bgt.n	80039d0 <__sflush_r+0x1c>
 80039cc:	2000      	movs	r0, #0
 80039ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039d2:	2e00      	cmp	r6, #0
 80039d4:	d0fa      	beq.n	80039cc <__sflush_r+0x18>
 80039d6:	2300      	movs	r3, #0
 80039d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039dc:	682f      	ldr	r7, [r5, #0]
 80039de:	602b      	str	r3, [r5, #0]
 80039e0:	d032      	beq.n	8003a48 <__sflush_r+0x94>
 80039e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039e4:	89a3      	ldrh	r3, [r4, #12]
 80039e6:	075a      	lsls	r2, r3, #29
 80039e8:	d505      	bpl.n	80039f6 <__sflush_r+0x42>
 80039ea:	6863      	ldr	r3, [r4, #4]
 80039ec:	1ac0      	subs	r0, r0, r3
 80039ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039f0:	b10b      	cbz	r3, 80039f6 <__sflush_r+0x42>
 80039f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039f4:	1ac0      	subs	r0, r0, r3
 80039f6:	2300      	movs	r3, #0
 80039f8:	4602      	mov	r2, r0
 80039fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039fc:	4628      	mov	r0, r5
 80039fe:	6a21      	ldr	r1, [r4, #32]
 8003a00:	47b0      	blx	r6
 8003a02:	1c43      	adds	r3, r0, #1
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	d106      	bne.n	8003a16 <__sflush_r+0x62>
 8003a08:	6829      	ldr	r1, [r5, #0]
 8003a0a:	291d      	cmp	r1, #29
 8003a0c:	d82c      	bhi.n	8003a68 <__sflush_r+0xb4>
 8003a0e:	4a29      	ldr	r2, [pc, #164]	; (8003ab4 <__sflush_r+0x100>)
 8003a10:	40ca      	lsrs	r2, r1
 8003a12:	07d6      	lsls	r6, r2, #31
 8003a14:	d528      	bpl.n	8003a68 <__sflush_r+0xb4>
 8003a16:	2200      	movs	r2, #0
 8003a18:	6062      	str	r2, [r4, #4]
 8003a1a:	6922      	ldr	r2, [r4, #16]
 8003a1c:	04d9      	lsls	r1, r3, #19
 8003a1e:	6022      	str	r2, [r4, #0]
 8003a20:	d504      	bpl.n	8003a2c <__sflush_r+0x78>
 8003a22:	1c42      	adds	r2, r0, #1
 8003a24:	d101      	bne.n	8003a2a <__sflush_r+0x76>
 8003a26:	682b      	ldr	r3, [r5, #0]
 8003a28:	b903      	cbnz	r3, 8003a2c <__sflush_r+0x78>
 8003a2a:	6560      	str	r0, [r4, #84]	; 0x54
 8003a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a2e:	602f      	str	r7, [r5, #0]
 8003a30:	2900      	cmp	r1, #0
 8003a32:	d0cb      	beq.n	80039cc <__sflush_r+0x18>
 8003a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a38:	4299      	cmp	r1, r3
 8003a3a:	d002      	beq.n	8003a42 <__sflush_r+0x8e>
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f000 f9d5 	bl	8003dec <_free_r>
 8003a42:	2000      	movs	r0, #0
 8003a44:	6360      	str	r0, [r4, #52]	; 0x34
 8003a46:	e7c2      	b.n	80039ce <__sflush_r+0x1a>
 8003a48:	6a21      	ldr	r1, [r4, #32]
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	47b0      	blx	r6
 8003a50:	1c41      	adds	r1, r0, #1
 8003a52:	d1c7      	bne.n	80039e4 <__sflush_r+0x30>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0c4      	beq.n	80039e4 <__sflush_r+0x30>
 8003a5a:	2b1d      	cmp	r3, #29
 8003a5c:	d001      	beq.n	8003a62 <__sflush_r+0xae>
 8003a5e:	2b16      	cmp	r3, #22
 8003a60:	d101      	bne.n	8003a66 <__sflush_r+0xb2>
 8003a62:	602f      	str	r7, [r5, #0]
 8003a64:	e7b2      	b.n	80039cc <__sflush_r+0x18>
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	e7ae      	b.n	80039ce <__sflush_r+0x1a>
 8003a70:	690f      	ldr	r7, [r1, #16]
 8003a72:	2f00      	cmp	r7, #0
 8003a74:	d0aa      	beq.n	80039cc <__sflush_r+0x18>
 8003a76:	0793      	lsls	r3, r2, #30
 8003a78:	bf18      	it	ne
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	680e      	ldr	r6, [r1, #0]
 8003a7e:	bf08      	it	eq
 8003a80:	694b      	ldreq	r3, [r1, #20]
 8003a82:	1bf6      	subs	r6, r6, r7
 8003a84:	600f      	str	r7, [r1, #0]
 8003a86:	608b      	str	r3, [r1, #8]
 8003a88:	2e00      	cmp	r6, #0
 8003a8a:	dd9f      	ble.n	80039cc <__sflush_r+0x18>
 8003a8c:	4633      	mov	r3, r6
 8003a8e:	463a      	mov	r2, r7
 8003a90:	4628      	mov	r0, r5
 8003a92:	6a21      	ldr	r1, [r4, #32]
 8003a94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003a98:	47e0      	blx	ip
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	dc06      	bgt.n	8003aac <__sflush_r+0xf8>
 8003a9e:	89a3      	ldrh	r3, [r4, #12]
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa8:	81a3      	strh	r3, [r4, #12]
 8003aaa:	e790      	b.n	80039ce <__sflush_r+0x1a>
 8003aac:	4407      	add	r7, r0
 8003aae:	1a36      	subs	r6, r6, r0
 8003ab0:	e7ea      	b.n	8003a88 <__sflush_r+0xd4>
 8003ab2:	bf00      	nop
 8003ab4:	20400001 	.word	0x20400001

08003ab8 <_fflush_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	690b      	ldr	r3, [r1, #16]
 8003abc:	4605      	mov	r5, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	b913      	cbnz	r3, 8003ac8 <_fflush_r+0x10>
 8003ac2:	2500      	movs	r5, #0
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	b118      	cbz	r0, 8003ad2 <_fflush_r+0x1a>
 8003aca:	6983      	ldr	r3, [r0, #24]
 8003acc:	b90b      	cbnz	r3, 8003ad2 <_fflush_r+0x1a>
 8003ace:	f000 f887 	bl	8003be0 <__sinit>
 8003ad2:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <_fflush_r+0x6c>)
 8003ad4:	429c      	cmp	r4, r3
 8003ad6:	d11b      	bne.n	8003b10 <_fflush_r+0x58>
 8003ad8:	686c      	ldr	r4, [r5, #4]
 8003ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ef      	beq.n	8003ac2 <_fflush_r+0xa>
 8003ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ae4:	07d0      	lsls	r0, r2, #31
 8003ae6:	d404      	bmi.n	8003af2 <_fflush_r+0x3a>
 8003ae8:	0599      	lsls	r1, r3, #22
 8003aea:	d402      	bmi.n	8003af2 <_fflush_r+0x3a>
 8003aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aee:	f000 f915 	bl	8003d1c <__retarget_lock_acquire_recursive>
 8003af2:	4628      	mov	r0, r5
 8003af4:	4621      	mov	r1, r4
 8003af6:	f7ff ff5d 	bl	80039b4 <__sflush_r>
 8003afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003afc:	4605      	mov	r5, r0
 8003afe:	07da      	lsls	r2, r3, #31
 8003b00:	d4e0      	bmi.n	8003ac4 <_fflush_r+0xc>
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	059b      	lsls	r3, r3, #22
 8003b06:	d4dd      	bmi.n	8003ac4 <_fflush_r+0xc>
 8003b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b0a:	f000 f908 	bl	8003d1e <__retarget_lock_release_recursive>
 8003b0e:	e7d9      	b.n	8003ac4 <_fflush_r+0xc>
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <_fflush_r+0x70>)
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d101      	bne.n	8003b1a <_fflush_r+0x62>
 8003b16:	68ac      	ldr	r4, [r5, #8]
 8003b18:	e7df      	b.n	8003ada <_fflush_r+0x22>
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <_fflush_r+0x74>)
 8003b1c:	429c      	cmp	r4, r3
 8003b1e:	bf08      	it	eq
 8003b20:	68ec      	ldreq	r4, [r5, #12]
 8003b22:	e7da      	b.n	8003ada <_fflush_r+0x22>
 8003b24:	08004cc8 	.word	0x08004cc8
 8003b28:	08004ce8 	.word	0x08004ce8
 8003b2c:	08004ca8 	.word	0x08004ca8

08003b30 <std>:
 8003b30:	2300      	movs	r3, #0
 8003b32:	b510      	push	{r4, lr}
 8003b34:	4604      	mov	r4, r0
 8003b36:	e9c0 3300 	strd	r3, r3, [r0]
 8003b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b3e:	6083      	str	r3, [r0, #8]
 8003b40:	8181      	strh	r1, [r0, #12]
 8003b42:	6643      	str	r3, [r0, #100]	; 0x64
 8003b44:	81c2      	strh	r2, [r0, #14]
 8003b46:	6183      	str	r3, [r0, #24]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	305c      	adds	r0, #92	; 0x5c
 8003b4e:	f7ff fdbb 	bl	80036c8 <memset>
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <std+0x38>)
 8003b54:	6224      	str	r4, [r4, #32]
 8003b56:	6263      	str	r3, [r4, #36]	; 0x24
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <std+0x3c>)
 8003b5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <std+0x40>)
 8003b5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <std+0x44>)
 8003b62:	6323      	str	r3, [r4, #48]	; 0x30
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	bf00      	nop
 8003b68:	08004859 	.word	0x08004859
 8003b6c:	0800487b 	.word	0x0800487b
 8003b70:	080048b3 	.word	0x080048b3
 8003b74:	080048d7 	.word	0x080048d7

08003b78 <_cleanup_r>:
 8003b78:	4901      	ldr	r1, [pc, #4]	; (8003b80 <_cleanup_r+0x8>)
 8003b7a:	f000 b8af 	b.w	8003cdc <_fwalk_reent>
 8003b7e:	bf00      	nop
 8003b80:	08003ab9 	.word	0x08003ab9

08003b84 <__sfmoreglue>:
 8003b84:	2268      	movs	r2, #104	; 0x68
 8003b86:	b570      	push	{r4, r5, r6, lr}
 8003b88:	1e4d      	subs	r5, r1, #1
 8003b8a:	4355      	muls	r5, r2
 8003b8c:	460e      	mov	r6, r1
 8003b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b92:	f000 f993 	bl	8003ebc <_malloc_r>
 8003b96:	4604      	mov	r4, r0
 8003b98:	b140      	cbz	r0, 8003bac <__sfmoreglue+0x28>
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8003ba0:	300c      	adds	r0, #12
 8003ba2:	60a0      	str	r0, [r4, #8]
 8003ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ba8:	f7ff fd8e 	bl	80036c8 <memset>
 8003bac:	4620      	mov	r0, r4
 8003bae:	bd70      	pop	{r4, r5, r6, pc}

08003bb0 <__sfp_lock_acquire>:
 8003bb0:	4801      	ldr	r0, [pc, #4]	; (8003bb8 <__sfp_lock_acquire+0x8>)
 8003bb2:	f000 b8b3 	b.w	8003d1c <__retarget_lock_acquire_recursive>
 8003bb6:	bf00      	nop
 8003bb8:	200001b5 	.word	0x200001b5

08003bbc <__sfp_lock_release>:
 8003bbc:	4801      	ldr	r0, [pc, #4]	; (8003bc4 <__sfp_lock_release+0x8>)
 8003bbe:	f000 b8ae 	b.w	8003d1e <__retarget_lock_release_recursive>
 8003bc2:	bf00      	nop
 8003bc4:	200001b5 	.word	0x200001b5

08003bc8 <__sinit_lock_acquire>:
 8003bc8:	4801      	ldr	r0, [pc, #4]	; (8003bd0 <__sinit_lock_acquire+0x8>)
 8003bca:	f000 b8a7 	b.w	8003d1c <__retarget_lock_acquire_recursive>
 8003bce:	bf00      	nop
 8003bd0:	200001b6 	.word	0x200001b6

08003bd4 <__sinit_lock_release>:
 8003bd4:	4801      	ldr	r0, [pc, #4]	; (8003bdc <__sinit_lock_release+0x8>)
 8003bd6:	f000 b8a2 	b.w	8003d1e <__retarget_lock_release_recursive>
 8003bda:	bf00      	nop
 8003bdc:	200001b6 	.word	0x200001b6

08003be0 <__sinit>:
 8003be0:	b510      	push	{r4, lr}
 8003be2:	4604      	mov	r4, r0
 8003be4:	f7ff fff0 	bl	8003bc8 <__sinit_lock_acquire>
 8003be8:	69a3      	ldr	r3, [r4, #24]
 8003bea:	b11b      	cbz	r3, 8003bf4 <__sinit+0x14>
 8003bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf0:	f7ff bff0 	b.w	8003bd4 <__sinit_lock_release>
 8003bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <__sinit+0x68>)
 8003bfc:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <__sinit+0x6c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	bf08      	it	eq
 8003c06:	2301      	moveq	r3, #1
 8003c08:	4620      	mov	r0, r4
 8003c0a:	bf08      	it	eq
 8003c0c:	61a3      	streq	r3, [r4, #24]
 8003c0e:	f000 f81f 	bl	8003c50 <__sfp>
 8003c12:	6060      	str	r0, [r4, #4]
 8003c14:	4620      	mov	r0, r4
 8003c16:	f000 f81b 	bl	8003c50 <__sfp>
 8003c1a:	60a0      	str	r0, [r4, #8]
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f000 f817 	bl	8003c50 <__sfp>
 8003c22:	2200      	movs	r2, #0
 8003c24:	2104      	movs	r1, #4
 8003c26:	60e0      	str	r0, [r4, #12]
 8003c28:	6860      	ldr	r0, [r4, #4]
 8003c2a:	f7ff ff81 	bl	8003b30 <std>
 8003c2e:	2201      	movs	r2, #1
 8003c30:	2109      	movs	r1, #9
 8003c32:	68a0      	ldr	r0, [r4, #8]
 8003c34:	f7ff ff7c 	bl	8003b30 <std>
 8003c38:	2202      	movs	r2, #2
 8003c3a:	2112      	movs	r1, #18
 8003c3c:	68e0      	ldr	r0, [r4, #12]
 8003c3e:	f7ff ff77 	bl	8003b30 <std>
 8003c42:	2301      	movs	r3, #1
 8003c44:	61a3      	str	r3, [r4, #24]
 8003c46:	e7d1      	b.n	8003bec <__sinit+0xc>
 8003c48:	08004ca4 	.word	0x08004ca4
 8003c4c:	08003b79 	.word	0x08003b79

08003c50 <__sfp>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	4607      	mov	r7, r0
 8003c54:	f7ff ffac 	bl	8003bb0 <__sfp_lock_acquire>
 8003c58:	4b1e      	ldr	r3, [pc, #120]	; (8003cd4 <__sfp+0x84>)
 8003c5a:	681e      	ldr	r6, [r3, #0]
 8003c5c:	69b3      	ldr	r3, [r6, #24]
 8003c5e:	b913      	cbnz	r3, 8003c66 <__sfp+0x16>
 8003c60:	4630      	mov	r0, r6
 8003c62:	f7ff ffbd 	bl	8003be0 <__sinit>
 8003c66:	3648      	adds	r6, #72	; 0x48
 8003c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	d503      	bpl.n	8003c78 <__sfp+0x28>
 8003c70:	6833      	ldr	r3, [r6, #0]
 8003c72:	b30b      	cbz	r3, 8003cb8 <__sfp+0x68>
 8003c74:	6836      	ldr	r6, [r6, #0]
 8003c76:	e7f7      	b.n	8003c68 <__sfp+0x18>
 8003c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c7c:	b9d5      	cbnz	r5, 8003cb4 <__sfp+0x64>
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <__sfp+0x88>)
 8003c80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c84:	60e3      	str	r3, [r4, #12]
 8003c86:	6665      	str	r5, [r4, #100]	; 0x64
 8003c88:	f000 f847 	bl	8003d1a <__retarget_lock_init_recursive>
 8003c8c:	f7ff ff96 	bl	8003bbc <__sfp_lock_release>
 8003c90:	2208      	movs	r2, #8
 8003c92:	4629      	mov	r1, r5
 8003c94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c9c:	6025      	str	r5, [r4, #0]
 8003c9e:	61a5      	str	r5, [r4, #24]
 8003ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ca4:	f7ff fd10 	bl	80036c8 <memset>
 8003ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb4:	3468      	adds	r4, #104	; 0x68
 8003cb6:	e7d9      	b.n	8003c6c <__sfp+0x1c>
 8003cb8:	2104      	movs	r1, #4
 8003cba:	4638      	mov	r0, r7
 8003cbc:	f7ff ff62 	bl	8003b84 <__sfmoreglue>
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	6030      	str	r0, [r6, #0]
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d1d5      	bne.n	8003c74 <__sfp+0x24>
 8003cc8:	f7ff ff78 	bl	8003bbc <__sfp_lock_release>
 8003ccc:	230c      	movs	r3, #12
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	e7ee      	b.n	8003cb0 <__sfp+0x60>
 8003cd2:	bf00      	nop
 8003cd4:	08004ca4 	.word	0x08004ca4
 8003cd8:	ffff0001 	.word	0xffff0001

08003cdc <_fwalk_reent>:
 8003cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	4688      	mov	r8, r1
 8003ce4:	2700      	movs	r7, #0
 8003ce6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cee:	f1b9 0901 	subs.w	r9, r9, #1
 8003cf2:	d505      	bpl.n	8003d00 <_fwalk_reent+0x24>
 8003cf4:	6824      	ldr	r4, [r4, #0]
 8003cf6:	2c00      	cmp	r4, #0
 8003cf8:	d1f7      	bne.n	8003cea <_fwalk_reent+0xe>
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d00:	89ab      	ldrh	r3, [r5, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d907      	bls.n	8003d16 <_fwalk_reent+0x3a>
 8003d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	d003      	beq.n	8003d16 <_fwalk_reent+0x3a>
 8003d0e:	4629      	mov	r1, r5
 8003d10:	4630      	mov	r0, r6
 8003d12:	47c0      	blx	r8
 8003d14:	4307      	orrs	r7, r0
 8003d16:	3568      	adds	r5, #104	; 0x68
 8003d18:	e7e9      	b.n	8003cee <_fwalk_reent+0x12>

08003d1a <__retarget_lock_init_recursive>:
 8003d1a:	4770      	bx	lr

08003d1c <__retarget_lock_acquire_recursive>:
 8003d1c:	4770      	bx	lr

08003d1e <__retarget_lock_release_recursive>:
 8003d1e:	4770      	bx	lr

08003d20 <__swhatbuf_r>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	460e      	mov	r6, r1
 8003d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d28:	4614      	mov	r4, r2
 8003d2a:	2900      	cmp	r1, #0
 8003d2c:	461d      	mov	r5, r3
 8003d2e:	b096      	sub	sp, #88	; 0x58
 8003d30:	da08      	bge.n	8003d44 <__swhatbuf_r+0x24>
 8003d32:	2200      	movs	r2, #0
 8003d34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003d38:	602a      	str	r2, [r5, #0]
 8003d3a:	061a      	lsls	r2, r3, #24
 8003d3c:	d410      	bmi.n	8003d60 <__swhatbuf_r+0x40>
 8003d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d42:	e00e      	b.n	8003d62 <__swhatbuf_r+0x42>
 8003d44:	466a      	mov	r2, sp
 8003d46:	f000 fded 	bl	8004924 <_fstat_r>
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	dbf1      	blt.n	8003d32 <__swhatbuf_r+0x12>
 8003d4e:	9a01      	ldr	r2, [sp, #4]
 8003d50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d58:	425a      	negs	r2, r3
 8003d5a:	415a      	adcs	r2, r3
 8003d5c:	602a      	str	r2, [r5, #0]
 8003d5e:	e7ee      	b.n	8003d3e <__swhatbuf_r+0x1e>
 8003d60:	2340      	movs	r3, #64	; 0x40
 8003d62:	2000      	movs	r0, #0
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	b016      	add	sp, #88	; 0x58
 8003d68:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d6c <__smakebuf_r>:
 8003d6c:	898b      	ldrh	r3, [r1, #12]
 8003d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d70:	079d      	lsls	r5, r3, #30
 8003d72:	4606      	mov	r6, r0
 8003d74:	460c      	mov	r4, r1
 8003d76:	d507      	bpl.n	8003d88 <__smakebuf_r+0x1c>
 8003d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	6123      	str	r3, [r4, #16]
 8003d80:	2301      	movs	r3, #1
 8003d82:	6163      	str	r3, [r4, #20]
 8003d84:	b002      	add	sp, #8
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	466a      	mov	r2, sp
 8003d8a:	ab01      	add	r3, sp, #4
 8003d8c:	f7ff ffc8 	bl	8003d20 <__swhatbuf_r>
 8003d90:	9900      	ldr	r1, [sp, #0]
 8003d92:	4605      	mov	r5, r0
 8003d94:	4630      	mov	r0, r6
 8003d96:	f000 f891 	bl	8003ebc <_malloc_r>
 8003d9a:	b948      	cbnz	r0, 8003db0 <__smakebuf_r+0x44>
 8003d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da0:	059a      	lsls	r2, r3, #22
 8003da2:	d4ef      	bmi.n	8003d84 <__smakebuf_r+0x18>
 8003da4:	f023 0303 	bic.w	r3, r3, #3
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	81a3      	strh	r3, [r4, #12]
 8003dae:	e7e3      	b.n	8003d78 <__smakebuf_r+0xc>
 8003db0:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <__smakebuf_r+0x7c>)
 8003db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	6020      	str	r0, [r4, #0]
 8003db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbc:	81a3      	strh	r3, [r4, #12]
 8003dbe:	9b00      	ldr	r3, [sp, #0]
 8003dc0:	6120      	str	r0, [r4, #16]
 8003dc2:	6163      	str	r3, [r4, #20]
 8003dc4:	9b01      	ldr	r3, [sp, #4]
 8003dc6:	b15b      	cbz	r3, 8003de0 <__smakebuf_r+0x74>
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dce:	f000 fdbb 	bl	8004948 <_isatty_r>
 8003dd2:	b128      	cbz	r0, 8003de0 <__smakebuf_r+0x74>
 8003dd4:	89a3      	ldrh	r3, [r4, #12]
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	81a3      	strh	r3, [r4, #12]
 8003de0:	89a0      	ldrh	r0, [r4, #12]
 8003de2:	4305      	orrs	r5, r0
 8003de4:	81a5      	strh	r5, [r4, #12]
 8003de6:	e7cd      	b.n	8003d84 <__smakebuf_r+0x18>
 8003de8:	08003b79 	.word	0x08003b79

08003dec <_free_r>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	4605      	mov	r5, r0
 8003df0:	2900      	cmp	r1, #0
 8003df2:	d040      	beq.n	8003e76 <_free_r+0x8a>
 8003df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003df8:	1f0c      	subs	r4, r1, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bfb8      	it	lt
 8003dfe:	18e4      	addlt	r4, r4, r3
 8003e00:	f000 fdfa 	bl	80049f8 <__malloc_lock>
 8003e04:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <_free_r+0x8c>)
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	b933      	cbnz	r3, 8003e18 <_free_r+0x2c>
 8003e0a:	6063      	str	r3, [r4, #4]
 8003e0c:	6014      	str	r4, [r2, #0]
 8003e0e:	4628      	mov	r0, r5
 8003e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e14:	f000 bdf6 	b.w	8004a04 <__malloc_unlock>
 8003e18:	42a3      	cmp	r3, r4
 8003e1a:	d908      	bls.n	8003e2e <_free_r+0x42>
 8003e1c:	6820      	ldr	r0, [r4, #0]
 8003e1e:	1821      	adds	r1, r4, r0
 8003e20:	428b      	cmp	r3, r1
 8003e22:	bf01      	itttt	eq
 8003e24:	6819      	ldreq	r1, [r3, #0]
 8003e26:	685b      	ldreq	r3, [r3, #4]
 8003e28:	1809      	addeq	r1, r1, r0
 8003e2a:	6021      	streq	r1, [r4, #0]
 8003e2c:	e7ed      	b.n	8003e0a <_free_r+0x1e>
 8003e2e:	461a      	mov	r2, r3
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	b10b      	cbz	r3, 8003e38 <_free_r+0x4c>
 8003e34:	42a3      	cmp	r3, r4
 8003e36:	d9fa      	bls.n	8003e2e <_free_r+0x42>
 8003e38:	6811      	ldr	r1, [r2, #0]
 8003e3a:	1850      	adds	r0, r2, r1
 8003e3c:	42a0      	cmp	r0, r4
 8003e3e:	d10b      	bne.n	8003e58 <_free_r+0x6c>
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	4401      	add	r1, r0
 8003e44:	1850      	adds	r0, r2, r1
 8003e46:	4283      	cmp	r3, r0
 8003e48:	6011      	str	r1, [r2, #0]
 8003e4a:	d1e0      	bne.n	8003e0e <_free_r+0x22>
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4401      	add	r1, r0
 8003e52:	6011      	str	r1, [r2, #0]
 8003e54:	6053      	str	r3, [r2, #4]
 8003e56:	e7da      	b.n	8003e0e <_free_r+0x22>
 8003e58:	d902      	bls.n	8003e60 <_free_r+0x74>
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	602b      	str	r3, [r5, #0]
 8003e5e:	e7d6      	b.n	8003e0e <_free_r+0x22>
 8003e60:	6820      	ldr	r0, [r4, #0]
 8003e62:	1821      	adds	r1, r4, r0
 8003e64:	428b      	cmp	r3, r1
 8003e66:	bf01      	itttt	eq
 8003e68:	6819      	ldreq	r1, [r3, #0]
 8003e6a:	685b      	ldreq	r3, [r3, #4]
 8003e6c:	1809      	addeq	r1, r1, r0
 8003e6e:	6021      	streq	r1, [r4, #0]
 8003e70:	6063      	str	r3, [r4, #4]
 8003e72:	6054      	str	r4, [r2, #4]
 8003e74:	e7cb      	b.n	8003e0e <_free_r+0x22>
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	200001b8 	.word	0x200001b8

08003e7c <sbrk_aligned>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	4e0e      	ldr	r6, [pc, #56]	; (8003eb8 <sbrk_aligned+0x3c>)
 8003e80:	460c      	mov	r4, r1
 8003e82:	6831      	ldr	r1, [r6, #0]
 8003e84:	4605      	mov	r5, r0
 8003e86:	b911      	cbnz	r1, 8003e8e <sbrk_aligned+0x12>
 8003e88:	f000 fcd6 	bl	8004838 <_sbrk_r>
 8003e8c:	6030      	str	r0, [r6, #0]
 8003e8e:	4621      	mov	r1, r4
 8003e90:	4628      	mov	r0, r5
 8003e92:	f000 fcd1 	bl	8004838 <_sbrk_r>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d00a      	beq.n	8003eb0 <sbrk_aligned+0x34>
 8003e9a:	1cc4      	adds	r4, r0, #3
 8003e9c:	f024 0403 	bic.w	r4, r4, #3
 8003ea0:	42a0      	cmp	r0, r4
 8003ea2:	d007      	beq.n	8003eb4 <sbrk_aligned+0x38>
 8003ea4:	1a21      	subs	r1, r4, r0
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f000 fcc6 	bl	8004838 <_sbrk_r>
 8003eac:	3001      	adds	r0, #1
 8003eae:	d101      	bne.n	8003eb4 <sbrk_aligned+0x38>
 8003eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	200001bc 	.word	0x200001bc

08003ebc <_malloc_r>:
 8003ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec0:	1ccd      	adds	r5, r1, #3
 8003ec2:	f025 0503 	bic.w	r5, r5, #3
 8003ec6:	3508      	adds	r5, #8
 8003ec8:	2d0c      	cmp	r5, #12
 8003eca:	bf38      	it	cc
 8003ecc:	250c      	movcc	r5, #12
 8003ece:	2d00      	cmp	r5, #0
 8003ed0:	4607      	mov	r7, r0
 8003ed2:	db01      	blt.n	8003ed8 <_malloc_r+0x1c>
 8003ed4:	42a9      	cmp	r1, r5
 8003ed6:	d905      	bls.n	8003ee4 <_malloc_r+0x28>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	2600      	movs	r6, #0
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	4630      	mov	r0, r6
 8003ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee4:	4e2e      	ldr	r6, [pc, #184]	; (8003fa0 <_malloc_r+0xe4>)
 8003ee6:	f000 fd87 	bl	80049f8 <__malloc_lock>
 8003eea:	6833      	ldr	r3, [r6, #0]
 8003eec:	461c      	mov	r4, r3
 8003eee:	bb34      	cbnz	r4, 8003f3e <_malloc_r+0x82>
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	f7ff ffc2 	bl	8003e7c <sbrk_aligned>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	4604      	mov	r4, r0
 8003efc:	d14d      	bne.n	8003f9a <_malloc_r+0xde>
 8003efe:	6834      	ldr	r4, [r6, #0]
 8003f00:	4626      	mov	r6, r4
 8003f02:	2e00      	cmp	r6, #0
 8003f04:	d140      	bne.n	8003f88 <_malloc_r+0xcc>
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	4631      	mov	r1, r6
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	eb04 0803 	add.w	r8, r4, r3
 8003f10:	f000 fc92 	bl	8004838 <_sbrk_r>
 8003f14:	4580      	cmp	r8, r0
 8003f16:	d13a      	bne.n	8003f8e <_malloc_r+0xd2>
 8003f18:	6821      	ldr	r1, [r4, #0]
 8003f1a:	3503      	adds	r5, #3
 8003f1c:	1a6d      	subs	r5, r5, r1
 8003f1e:	f025 0503 	bic.w	r5, r5, #3
 8003f22:	3508      	adds	r5, #8
 8003f24:	2d0c      	cmp	r5, #12
 8003f26:	bf38      	it	cc
 8003f28:	250c      	movcc	r5, #12
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	f7ff ffa5 	bl	8003e7c <sbrk_aligned>
 8003f32:	3001      	adds	r0, #1
 8003f34:	d02b      	beq.n	8003f8e <_malloc_r+0xd2>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	442b      	add	r3, r5
 8003f3a:	6023      	str	r3, [r4, #0]
 8003f3c:	e00e      	b.n	8003f5c <_malloc_r+0xa0>
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	1b52      	subs	r2, r2, r5
 8003f42:	d41e      	bmi.n	8003f82 <_malloc_r+0xc6>
 8003f44:	2a0b      	cmp	r2, #11
 8003f46:	d916      	bls.n	8003f76 <_malloc_r+0xba>
 8003f48:	1961      	adds	r1, r4, r5
 8003f4a:	42a3      	cmp	r3, r4
 8003f4c:	6025      	str	r5, [r4, #0]
 8003f4e:	bf18      	it	ne
 8003f50:	6059      	strne	r1, [r3, #4]
 8003f52:	6863      	ldr	r3, [r4, #4]
 8003f54:	bf08      	it	eq
 8003f56:	6031      	streq	r1, [r6, #0]
 8003f58:	5162      	str	r2, [r4, r5]
 8003f5a:	604b      	str	r3, [r1, #4]
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	f104 060b 	add.w	r6, r4, #11
 8003f62:	f000 fd4f 	bl	8004a04 <__malloc_unlock>
 8003f66:	f026 0607 	bic.w	r6, r6, #7
 8003f6a:	1d23      	adds	r3, r4, #4
 8003f6c:	1af2      	subs	r2, r6, r3
 8003f6e:	d0b6      	beq.n	8003ede <_malloc_r+0x22>
 8003f70:	1b9b      	subs	r3, r3, r6
 8003f72:	50a3      	str	r3, [r4, r2]
 8003f74:	e7b3      	b.n	8003ede <_malloc_r+0x22>
 8003f76:	6862      	ldr	r2, [r4, #4]
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	bf0c      	ite	eq
 8003f7c:	6032      	streq	r2, [r6, #0]
 8003f7e:	605a      	strne	r2, [r3, #4]
 8003f80:	e7ec      	b.n	8003f5c <_malloc_r+0xa0>
 8003f82:	4623      	mov	r3, r4
 8003f84:	6864      	ldr	r4, [r4, #4]
 8003f86:	e7b2      	b.n	8003eee <_malloc_r+0x32>
 8003f88:	4634      	mov	r4, r6
 8003f8a:	6876      	ldr	r6, [r6, #4]
 8003f8c:	e7b9      	b.n	8003f02 <_malloc_r+0x46>
 8003f8e:	230c      	movs	r3, #12
 8003f90:	4638      	mov	r0, r7
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	f000 fd36 	bl	8004a04 <__malloc_unlock>
 8003f98:	e7a1      	b.n	8003ede <_malloc_r+0x22>
 8003f9a:	6025      	str	r5, [r4, #0]
 8003f9c:	e7de      	b.n	8003f5c <_malloc_r+0xa0>
 8003f9e:	bf00      	nop
 8003fa0:	200001b8 	.word	0x200001b8

08003fa4 <__ssputs_r>:
 8003fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	688e      	ldr	r6, [r1, #8]
 8003faa:	4682      	mov	sl, r0
 8003fac:	429e      	cmp	r6, r3
 8003fae:	460c      	mov	r4, r1
 8003fb0:	4690      	mov	r8, r2
 8003fb2:	461f      	mov	r7, r3
 8003fb4:	d838      	bhi.n	8004028 <__ssputs_r+0x84>
 8003fb6:	898a      	ldrh	r2, [r1, #12]
 8003fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fbc:	d032      	beq.n	8004024 <__ssputs_r+0x80>
 8003fbe:	6825      	ldr	r5, [r4, #0]
 8003fc0:	6909      	ldr	r1, [r1, #16]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	eba5 0901 	sub.w	r9, r5, r1
 8003fc8:	6965      	ldr	r5, [r4, #20]
 8003fca:	444b      	add	r3, r9
 8003fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fd4:	106d      	asrs	r5, r5, #1
 8003fd6:	429d      	cmp	r5, r3
 8003fd8:	bf38      	it	cc
 8003fda:	461d      	movcc	r5, r3
 8003fdc:	0553      	lsls	r3, r2, #21
 8003fde:	d531      	bpl.n	8004044 <__ssputs_r+0xa0>
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	f7ff ff6b 	bl	8003ebc <_malloc_r>
 8003fe6:	4606      	mov	r6, r0
 8003fe8:	b950      	cbnz	r0, 8004000 <__ssputs_r+0x5c>
 8003fea:	230c      	movs	r3, #12
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	f8ca 3000 	str.w	r3, [sl]
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004000:	464a      	mov	r2, r9
 8004002:	6921      	ldr	r1, [r4, #16]
 8004004:	f000 fcd0 	bl	80049a8 <memcpy>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800400e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	6126      	str	r6, [r4, #16]
 8004016:	444e      	add	r6, r9
 8004018:	6026      	str	r6, [r4, #0]
 800401a:	463e      	mov	r6, r7
 800401c:	6165      	str	r5, [r4, #20]
 800401e:	eba5 0509 	sub.w	r5, r5, r9
 8004022:	60a5      	str	r5, [r4, #8]
 8004024:	42be      	cmp	r6, r7
 8004026:	d900      	bls.n	800402a <__ssputs_r+0x86>
 8004028:	463e      	mov	r6, r7
 800402a:	4632      	mov	r2, r6
 800402c:	4641      	mov	r1, r8
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	f000 fcc8 	bl	80049c4 <memmove>
 8004034:	68a3      	ldr	r3, [r4, #8]
 8004036:	2000      	movs	r0, #0
 8004038:	1b9b      	subs	r3, r3, r6
 800403a:	60a3      	str	r3, [r4, #8]
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	4433      	add	r3, r6
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	e7db      	b.n	8003ffc <__ssputs_r+0x58>
 8004044:	462a      	mov	r2, r5
 8004046:	f000 fce3 	bl	8004a10 <_realloc_r>
 800404a:	4606      	mov	r6, r0
 800404c:	2800      	cmp	r0, #0
 800404e:	d1e1      	bne.n	8004014 <__ssputs_r+0x70>
 8004050:	4650      	mov	r0, sl
 8004052:	6921      	ldr	r1, [r4, #16]
 8004054:	f7ff feca 	bl	8003dec <_free_r>
 8004058:	e7c7      	b.n	8003fea <__ssputs_r+0x46>
	...

0800405c <_svfiprintf_r>:
 800405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	4698      	mov	r8, r3
 8004062:	898b      	ldrh	r3, [r1, #12]
 8004064:	4607      	mov	r7, r0
 8004066:	061b      	lsls	r3, r3, #24
 8004068:	460d      	mov	r5, r1
 800406a:	4614      	mov	r4, r2
 800406c:	b09d      	sub	sp, #116	; 0x74
 800406e:	d50e      	bpl.n	800408e <_svfiprintf_r+0x32>
 8004070:	690b      	ldr	r3, [r1, #16]
 8004072:	b963      	cbnz	r3, 800408e <_svfiprintf_r+0x32>
 8004074:	2140      	movs	r1, #64	; 0x40
 8004076:	f7ff ff21 	bl	8003ebc <_malloc_r>
 800407a:	6028      	str	r0, [r5, #0]
 800407c:	6128      	str	r0, [r5, #16]
 800407e:	b920      	cbnz	r0, 800408a <_svfiprintf_r+0x2e>
 8004080:	230c      	movs	r3, #12
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	e0d1      	b.n	800422e <_svfiprintf_r+0x1d2>
 800408a:	2340      	movs	r3, #64	; 0x40
 800408c:	616b      	str	r3, [r5, #20]
 800408e:	2300      	movs	r3, #0
 8004090:	9309      	str	r3, [sp, #36]	; 0x24
 8004092:	2320      	movs	r3, #32
 8004094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004098:	2330      	movs	r3, #48	; 0x30
 800409a:	f04f 0901 	mov.w	r9, #1
 800409e:	f8cd 800c 	str.w	r8, [sp, #12]
 80040a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004248 <_svfiprintf_r+0x1ec>
 80040a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040aa:	4623      	mov	r3, r4
 80040ac:	469a      	mov	sl, r3
 80040ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040b2:	b10a      	cbz	r2, 80040b8 <_svfiprintf_r+0x5c>
 80040b4:	2a25      	cmp	r2, #37	; 0x25
 80040b6:	d1f9      	bne.n	80040ac <_svfiprintf_r+0x50>
 80040b8:	ebba 0b04 	subs.w	fp, sl, r4
 80040bc:	d00b      	beq.n	80040d6 <_svfiprintf_r+0x7a>
 80040be:	465b      	mov	r3, fp
 80040c0:	4622      	mov	r2, r4
 80040c2:	4629      	mov	r1, r5
 80040c4:	4638      	mov	r0, r7
 80040c6:	f7ff ff6d 	bl	8003fa4 <__ssputs_r>
 80040ca:	3001      	adds	r0, #1
 80040cc:	f000 80aa 	beq.w	8004224 <_svfiprintf_r+0x1c8>
 80040d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040d2:	445a      	add	r2, fp
 80040d4:	9209      	str	r2, [sp, #36]	; 0x24
 80040d6:	f89a 3000 	ldrb.w	r3, [sl]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80a2 	beq.w	8004224 <_svfiprintf_r+0x1c8>
 80040e0:	2300      	movs	r3, #0
 80040e2:	f04f 32ff 	mov.w	r2, #4294967295
 80040e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ea:	f10a 0a01 	add.w	sl, sl, #1
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	9307      	str	r3, [sp, #28]
 80040f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040f6:	931a      	str	r3, [sp, #104]	; 0x68
 80040f8:	4654      	mov	r4, sl
 80040fa:	2205      	movs	r2, #5
 80040fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004100:	4851      	ldr	r0, [pc, #324]	; (8004248 <_svfiprintf_r+0x1ec>)
 8004102:	f000 fc43 	bl	800498c <memchr>
 8004106:	9a04      	ldr	r2, [sp, #16]
 8004108:	b9d8      	cbnz	r0, 8004142 <_svfiprintf_r+0xe6>
 800410a:	06d0      	lsls	r0, r2, #27
 800410c:	bf44      	itt	mi
 800410e:	2320      	movmi	r3, #32
 8004110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004114:	0711      	lsls	r1, r2, #28
 8004116:	bf44      	itt	mi
 8004118:	232b      	movmi	r3, #43	; 0x2b
 800411a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800411e:	f89a 3000 	ldrb.w	r3, [sl]
 8004122:	2b2a      	cmp	r3, #42	; 0x2a
 8004124:	d015      	beq.n	8004152 <_svfiprintf_r+0xf6>
 8004126:	4654      	mov	r4, sl
 8004128:	2000      	movs	r0, #0
 800412a:	f04f 0c0a 	mov.w	ip, #10
 800412e:	9a07      	ldr	r2, [sp, #28]
 8004130:	4621      	mov	r1, r4
 8004132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004136:	3b30      	subs	r3, #48	; 0x30
 8004138:	2b09      	cmp	r3, #9
 800413a:	d94e      	bls.n	80041da <_svfiprintf_r+0x17e>
 800413c:	b1b0      	cbz	r0, 800416c <_svfiprintf_r+0x110>
 800413e:	9207      	str	r2, [sp, #28]
 8004140:	e014      	b.n	800416c <_svfiprintf_r+0x110>
 8004142:	eba0 0308 	sub.w	r3, r0, r8
 8004146:	fa09 f303 	lsl.w	r3, r9, r3
 800414a:	4313      	orrs	r3, r2
 800414c:	46a2      	mov	sl, r4
 800414e:	9304      	str	r3, [sp, #16]
 8004150:	e7d2      	b.n	80040f8 <_svfiprintf_r+0x9c>
 8004152:	9b03      	ldr	r3, [sp, #12]
 8004154:	1d19      	adds	r1, r3, #4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	9103      	str	r1, [sp, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	bfbb      	ittet	lt
 800415e:	425b      	neglt	r3, r3
 8004160:	f042 0202 	orrlt.w	r2, r2, #2
 8004164:	9307      	strge	r3, [sp, #28]
 8004166:	9307      	strlt	r3, [sp, #28]
 8004168:	bfb8      	it	lt
 800416a:	9204      	strlt	r2, [sp, #16]
 800416c:	7823      	ldrb	r3, [r4, #0]
 800416e:	2b2e      	cmp	r3, #46	; 0x2e
 8004170:	d10c      	bne.n	800418c <_svfiprintf_r+0x130>
 8004172:	7863      	ldrb	r3, [r4, #1]
 8004174:	2b2a      	cmp	r3, #42	; 0x2a
 8004176:	d135      	bne.n	80041e4 <_svfiprintf_r+0x188>
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	3402      	adds	r4, #2
 800417c:	1d1a      	adds	r2, r3, #4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	9203      	str	r2, [sp, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	bfb8      	it	lt
 8004186:	f04f 33ff 	movlt.w	r3, #4294967295
 800418a:	9305      	str	r3, [sp, #20]
 800418c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800424c <_svfiprintf_r+0x1f0>
 8004190:	2203      	movs	r2, #3
 8004192:	4650      	mov	r0, sl
 8004194:	7821      	ldrb	r1, [r4, #0]
 8004196:	f000 fbf9 	bl	800498c <memchr>
 800419a:	b140      	cbz	r0, 80041ae <_svfiprintf_r+0x152>
 800419c:	2340      	movs	r3, #64	; 0x40
 800419e:	eba0 000a 	sub.w	r0, r0, sl
 80041a2:	fa03 f000 	lsl.w	r0, r3, r0
 80041a6:	9b04      	ldr	r3, [sp, #16]
 80041a8:	3401      	adds	r4, #1
 80041aa:	4303      	orrs	r3, r0
 80041ac:	9304      	str	r3, [sp, #16]
 80041ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b2:	2206      	movs	r2, #6
 80041b4:	4826      	ldr	r0, [pc, #152]	; (8004250 <_svfiprintf_r+0x1f4>)
 80041b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041ba:	f000 fbe7 	bl	800498c <memchr>
 80041be:	2800      	cmp	r0, #0
 80041c0:	d038      	beq.n	8004234 <_svfiprintf_r+0x1d8>
 80041c2:	4b24      	ldr	r3, [pc, #144]	; (8004254 <_svfiprintf_r+0x1f8>)
 80041c4:	bb1b      	cbnz	r3, 800420e <_svfiprintf_r+0x1b2>
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	3307      	adds	r3, #7
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	3308      	adds	r3, #8
 80041d0:	9303      	str	r3, [sp, #12]
 80041d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d4:	4433      	add	r3, r6
 80041d6:	9309      	str	r3, [sp, #36]	; 0x24
 80041d8:	e767      	b.n	80040aa <_svfiprintf_r+0x4e>
 80041da:	460c      	mov	r4, r1
 80041dc:	2001      	movs	r0, #1
 80041de:	fb0c 3202 	mla	r2, ip, r2, r3
 80041e2:	e7a5      	b.n	8004130 <_svfiprintf_r+0xd4>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f04f 0c0a 	mov.w	ip, #10
 80041ea:	4619      	mov	r1, r3
 80041ec:	3401      	adds	r4, #1
 80041ee:	9305      	str	r3, [sp, #20]
 80041f0:	4620      	mov	r0, r4
 80041f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041f6:	3a30      	subs	r2, #48	; 0x30
 80041f8:	2a09      	cmp	r2, #9
 80041fa:	d903      	bls.n	8004204 <_svfiprintf_r+0x1a8>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0c5      	beq.n	800418c <_svfiprintf_r+0x130>
 8004200:	9105      	str	r1, [sp, #20]
 8004202:	e7c3      	b.n	800418c <_svfiprintf_r+0x130>
 8004204:	4604      	mov	r4, r0
 8004206:	2301      	movs	r3, #1
 8004208:	fb0c 2101 	mla	r1, ip, r1, r2
 800420c:	e7f0      	b.n	80041f0 <_svfiprintf_r+0x194>
 800420e:	ab03      	add	r3, sp, #12
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	462a      	mov	r2, r5
 8004214:	4638      	mov	r0, r7
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <_svfiprintf_r+0x1fc>)
 8004218:	a904      	add	r1, sp, #16
 800421a:	f3af 8000 	nop.w
 800421e:	1c42      	adds	r2, r0, #1
 8004220:	4606      	mov	r6, r0
 8004222:	d1d6      	bne.n	80041d2 <_svfiprintf_r+0x176>
 8004224:	89ab      	ldrh	r3, [r5, #12]
 8004226:	065b      	lsls	r3, r3, #25
 8004228:	f53f af2c 	bmi.w	8004084 <_svfiprintf_r+0x28>
 800422c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800422e:	b01d      	add	sp, #116	; 0x74
 8004230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004234:	ab03      	add	r3, sp, #12
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	462a      	mov	r2, r5
 800423a:	4638      	mov	r0, r7
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <_svfiprintf_r+0x1fc>)
 800423e:	a904      	add	r1, sp, #16
 8004240:	f000 f9d4 	bl	80045ec <_printf_i>
 8004244:	e7eb      	b.n	800421e <_svfiprintf_r+0x1c2>
 8004246:	bf00      	nop
 8004248:	08004d08 	.word	0x08004d08
 800424c:	08004d0e 	.word	0x08004d0e
 8004250:	08004d12 	.word	0x08004d12
 8004254:	00000000 	.word	0x00000000
 8004258:	08003fa5 	.word	0x08003fa5

0800425c <__sfputc_r>:
 800425c:	6893      	ldr	r3, [r2, #8]
 800425e:	b410      	push	{r4}
 8004260:	3b01      	subs	r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	6093      	str	r3, [r2, #8]
 8004266:	da07      	bge.n	8004278 <__sfputc_r+0x1c>
 8004268:	6994      	ldr	r4, [r2, #24]
 800426a:	42a3      	cmp	r3, r4
 800426c:	db01      	blt.n	8004272 <__sfputc_r+0x16>
 800426e:	290a      	cmp	r1, #10
 8004270:	d102      	bne.n	8004278 <__sfputc_r+0x1c>
 8004272:	bc10      	pop	{r4}
 8004274:	f7ff bade 	b.w	8003834 <__swbuf_r>
 8004278:	6813      	ldr	r3, [r2, #0]
 800427a:	1c58      	adds	r0, r3, #1
 800427c:	6010      	str	r0, [r2, #0]
 800427e:	7019      	strb	r1, [r3, #0]
 8004280:	4608      	mov	r0, r1
 8004282:	bc10      	pop	{r4}
 8004284:	4770      	bx	lr

08004286 <__sfputs_r>:
 8004286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004288:	4606      	mov	r6, r0
 800428a:	460f      	mov	r7, r1
 800428c:	4614      	mov	r4, r2
 800428e:	18d5      	adds	r5, r2, r3
 8004290:	42ac      	cmp	r4, r5
 8004292:	d101      	bne.n	8004298 <__sfputs_r+0x12>
 8004294:	2000      	movs	r0, #0
 8004296:	e007      	b.n	80042a8 <__sfputs_r+0x22>
 8004298:	463a      	mov	r2, r7
 800429a:	4630      	mov	r0, r6
 800429c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a0:	f7ff ffdc 	bl	800425c <__sfputc_r>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	d1f3      	bne.n	8004290 <__sfputs_r+0xa>
 80042a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042ac <_vfiprintf_r>:
 80042ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b0:	460d      	mov	r5, r1
 80042b2:	4614      	mov	r4, r2
 80042b4:	4698      	mov	r8, r3
 80042b6:	4606      	mov	r6, r0
 80042b8:	b09d      	sub	sp, #116	; 0x74
 80042ba:	b118      	cbz	r0, 80042c4 <_vfiprintf_r+0x18>
 80042bc:	6983      	ldr	r3, [r0, #24]
 80042be:	b90b      	cbnz	r3, 80042c4 <_vfiprintf_r+0x18>
 80042c0:	f7ff fc8e 	bl	8003be0 <__sinit>
 80042c4:	4b89      	ldr	r3, [pc, #548]	; (80044ec <_vfiprintf_r+0x240>)
 80042c6:	429d      	cmp	r5, r3
 80042c8:	d11b      	bne.n	8004302 <_vfiprintf_r+0x56>
 80042ca:	6875      	ldr	r5, [r6, #4]
 80042cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042ce:	07d9      	lsls	r1, r3, #31
 80042d0:	d405      	bmi.n	80042de <_vfiprintf_r+0x32>
 80042d2:	89ab      	ldrh	r3, [r5, #12]
 80042d4:	059a      	lsls	r2, r3, #22
 80042d6:	d402      	bmi.n	80042de <_vfiprintf_r+0x32>
 80042d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042da:	f7ff fd1f 	bl	8003d1c <__retarget_lock_acquire_recursive>
 80042de:	89ab      	ldrh	r3, [r5, #12]
 80042e0:	071b      	lsls	r3, r3, #28
 80042e2:	d501      	bpl.n	80042e8 <_vfiprintf_r+0x3c>
 80042e4:	692b      	ldr	r3, [r5, #16]
 80042e6:	b9eb      	cbnz	r3, 8004324 <_vfiprintf_r+0x78>
 80042e8:	4629      	mov	r1, r5
 80042ea:	4630      	mov	r0, r6
 80042ec:	f7ff faf4 	bl	80038d8 <__swsetup_r>
 80042f0:	b1c0      	cbz	r0, 8004324 <_vfiprintf_r+0x78>
 80042f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042f4:	07dc      	lsls	r4, r3, #31
 80042f6:	d50e      	bpl.n	8004316 <_vfiprintf_r+0x6a>
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	b01d      	add	sp, #116	; 0x74
 80042fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004302:	4b7b      	ldr	r3, [pc, #492]	; (80044f0 <_vfiprintf_r+0x244>)
 8004304:	429d      	cmp	r5, r3
 8004306:	d101      	bne.n	800430c <_vfiprintf_r+0x60>
 8004308:	68b5      	ldr	r5, [r6, #8]
 800430a:	e7df      	b.n	80042cc <_vfiprintf_r+0x20>
 800430c:	4b79      	ldr	r3, [pc, #484]	; (80044f4 <_vfiprintf_r+0x248>)
 800430e:	429d      	cmp	r5, r3
 8004310:	bf08      	it	eq
 8004312:	68f5      	ldreq	r5, [r6, #12]
 8004314:	e7da      	b.n	80042cc <_vfiprintf_r+0x20>
 8004316:	89ab      	ldrh	r3, [r5, #12]
 8004318:	0598      	lsls	r0, r3, #22
 800431a:	d4ed      	bmi.n	80042f8 <_vfiprintf_r+0x4c>
 800431c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800431e:	f7ff fcfe 	bl	8003d1e <__retarget_lock_release_recursive>
 8004322:	e7e9      	b.n	80042f8 <_vfiprintf_r+0x4c>
 8004324:	2300      	movs	r3, #0
 8004326:	9309      	str	r3, [sp, #36]	; 0x24
 8004328:	2320      	movs	r3, #32
 800432a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800432e:	2330      	movs	r3, #48	; 0x30
 8004330:	f04f 0901 	mov.w	r9, #1
 8004334:	f8cd 800c 	str.w	r8, [sp, #12]
 8004338:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80044f8 <_vfiprintf_r+0x24c>
 800433c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004340:	4623      	mov	r3, r4
 8004342:	469a      	mov	sl, r3
 8004344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004348:	b10a      	cbz	r2, 800434e <_vfiprintf_r+0xa2>
 800434a:	2a25      	cmp	r2, #37	; 0x25
 800434c:	d1f9      	bne.n	8004342 <_vfiprintf_r+0x96>
 800434e:	ebba 0b04 	subs.w	fp, sl, r4
 8004352:	d00b      	beq.n	800436c <_vfiprintf_r+0xc0>
 8004354:	465b      	mov	r3, fp
 8004356:	4622      	mov	r2, r4
 8004358:	4629      	mov	r1, r5
 800435a:	4630      	mov	r0, r6
 800435c:	f7ff ff93 	bl	8004286 <__sfputs_r>
 8004360:	3001      	adds	r0, #1
 8004362:	f000 80aa 	beq.w	80044ba <_vfiprintf_r+0x20e>
 8004366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004368:	445a      	add	r2, fp
 800436a:	9209      	str	r2, [sp, #36]	; 0x24
 800436c:	f89a 3000 	ldrb.w	r3, [sl]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80a2 	beq.w	80044ba <_vfiprintf_r+0x20e>
 8004376:	2300      	movs	r3, #0
 8004378:	f04f 32ff 	mov.w	r2, #4294967295
 800437c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004380:	f10a 0a01 	add.w	sl, sl, #1
 8004384:	9304      	str	r3, [sp, #16]
 8004386:	9307      	str	r3, [sp, #28]
 8004388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800438c:	931a      	str	r3, [sp, #104]	; 0x68
 800438e:	4654      	mov	r4, sl
 8004390:	2205      	movs	r2, #5
 8004392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004396:	4858      	ldr	r0, [pc, #352]	; (80044f8 <_vfiprintf_r+0x24c>)
 8004398:	f000 faf8 	bl	800498c <memchr>
 800439c:	9a04      	ldr	r2, [sp, #16]
 800439e:	b9d8      	cbnz	r0, 80043d8 <_vfiprintf_r+0x12c>
 80043a0:	06d1      	lsls	r1, r2, #27
 80043a2:	bf44      	itt	mi
 80043a4:	2320      	movmi	r3, #32
 80043a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043aa:	0713      	lsls	r3, r2, #28
 80043ac:	bf44      	itt	mi
 80043ae:	232b      	movmi	r3, #43	; 0x2b
 80043b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b4:	f89a 3000 	ldrb.w	r3, [sl]
 80043b8:	2b2a      	cmp	r3, #42	; 0x2a
 80043ba:	d015      	beq.n	80043e8 <_vfiprintf_r+0x13c>
 80043bc:	4654      	mov	r4, sl
 80043be:	2000      	movs	r0, #0
 80043c0:	f04f 0c0a 	mov.w	ip, #10
 80043c4:	9a07      	ldr	r2, [sp, #28]
 80043c6:	4621      	mov	r1, r4
 80043c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043cc:	3b30      	subs	r3, #48	; 0x30
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	d94e      	bls.n	8004470 <_vfiprintf_r+0x1c4>
 80043d2:	b1b0      	cbz	r0, 8004402 <_vfiprintf_r+0x156>
 80043d4:	9207      	str	r2, [sp, #28]
 80043d6:	e014      	b.n	8004402 <_vfiprintf_r+0x156>
 80043d8:	eba0 0308 	sub.w	r3, r0, r8
 80043dc:	fa09 f303 	lsl.w	r3, r9, r3
 80043e0:	4313      	orrs	r3, r2
 80043e2:	46a2      	mov	sl, r4
 80043e4:	9304      	str	r3, [sp, #16]
 80043e6:	e7d2      	b.n	800438e <_vfiprintf_r+0xe2>
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	1d19      	adds	r1, r3, #4
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	9103      	str	r1, [sp, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bfbb      	ittet	lt
 80043f4:	425b      	neglt	r3, r3
 80043f6:	f042 0202 	orrlt.w	r2, r2, #2
 80043fa:	9307      	strge	r3, [sp, #28]
 80043fc:	9307      	strlt	r3, [sp, #28]
 80043fe:	bfb8      	it	lt
 8004400:	9204      	strlt	r2, [sp, #16]
 8004402:	7823      	ldrb	r3, [r4, #0]
 8004404:	2b2e      	cmp	r3, #46	; 0x2e
 8004406:	d10c      	bne.n	8004422 <_vfiprintf_r+0x176>
 8004408:	7863      	ldrb	r3, [r4, #1]
 800440a:	2b2a      	cmp	r3, #42	; 0x2a
 800440c:	d135      	bne.n	800447a <_vfiprintf_r+0x1ce>
 800440e:	9b03      	ldr	r3, [sp, #12]
 8004410:	3402      	adds	r4, #2
 8004412:	1d1a      	adds	r2, r3, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	9203      	str	r2, [sp, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	bfb8      	it	lt
 800441c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004420:	9305      	str	r3, [sp, #20]
 8004422:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80044fc <_vfiprintf_r+0x250>
 8004426:	2203      	movs	r2, #3
 8004428:	4650      	mov	r0, sl
 800442a:	7821      	ldrb	r1, [r4, #0]
 800442c:	f000 faae 	bl	800498c <memchr>
 8004430:	b140      	cbz	r0, 8004444 <_vfiprintf_r+0x198>
 8004432:	2340      	movs	r3, #64	; 0x40
 8004434:	eba0 000a 	sub.w	r0, r0, sl
 8004438:	fa03 f000 	lsl.w	r0, r3, r0
 800443c:	9b04      	ldr	r3, [sp, #16]
 800443e:	3401      	adds	r4, #1
 8004440:	4303      	orrs	r3, r0
 8004442:	9304      	str	r3, [sp, #16]
 8004444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004448:	2206      	movs	r2, #6
 800444a:	482d      	ldr	r0, [pc, #180]	; (8004500 <_vfiprintf_r+0x254>)
 800444c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004450:	f000 fa9c 	bl	800498c <memchr>
 8004454:	2800      	cmp	r0, #0
 8004456:	d03f      	beq.n	80044d8 <_vfiprintf_r+0x22c>
 8004458:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <_vfiprintf_r+0x258>)
 800445a:	bb1b      	cbnz	r3, 80044a4 <_vfiprintf_r+0x1f8>
 800445c:	9b03      	ldr	r3, [sp, #12]
 800445e:	3307      	adds	r3, #7
 8004460:	f023 0307 	bic.w	r3, r3, #7
 8004464:	3308      	adds	r3, #8
 8004466:	9303      	str	r3, [sp, #12]
 8004468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800446a:	443b      	add	r3, r7
 800446c:	9309      	str	r3, [sp, #36]	; 0x24
 800446e:	e767      	b.n	8004340 <_vfiprintf_r+0x94>
 8004470:	460c      	mov	r4, r1
 8004472:	2001      	movs	r0, #1
 8004474:	fb0c 3202 	mla	r2, ip, r2, r3
 8004478:	e7a5      	b.n	80043c6 <_vfiprintf_r+0x11a>
 800447a:	2300      	movs	r3, #0
 800447c:	f04f 0c0a 	mov.w	ip, #10
 8004480:	4619      	mov	r1, r3
 8004482:	3401      	adds	r4, #1
 8004484:	9305      	str	r3, [sp, #20]
 8004486:	4620      	mov	r0, r4
 8004488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800448c:	3a30      	subs	r2, #48	; 0x30
 800448e:	2a09      	cmp	r2, #9
 8004490:	d903      	bls.n	800449a <_vfiprintf_r+0x1ee>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0c5      	beq.n	8004422 <_vfiprintf_r+0x176>
 8004496:	9105      	str	r1, [sp, #20]
 8004498:	e7c3      	b.n	8004422 <_vfiprintf_r+0x176>
 800449a:	4604      	mov	r4, r0
 800449c:	2301      	movs	r3, #1
 800449e:	fb0c 2101 	mla	r1, ip, r1, r2
 80044a2:	e7f0      	b.n	8004486 <_vfiprintf_r+0x1da>
 80044a4:	ab03      	add	r3, sp, #12
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	462a      	mov	r2, r5
 80044aa:	4630      	mov	r0, r6
 80044ac:	4b16      	ldr	r3, [pc, #88]	; (8004508 <_vfiprintf_r+0x25c>)
 80044ae:	a904      	add	r1, sp, #16
 80044b0:	f3af 8000 	nop.w
 80044b4:	4607      	mov	r7, r0
 80044b6:	1c78      	adds	r0, r7, #1
 80044b8:	d1d6      	bne.n	8004468 <_vfiprintf_r+0x1bc>
 80044ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044bc:	07d9      	lsls	r1, r3, #31
 80044be:	d405      	bmi.n	80044cc <_vfiprintf_r+0x220>
 80044c0:	89ab      	ldrh	r3, [r5, #12]
 80044c2:	059a      	lsls	r2, r3, #22
 80044c4:	d402      	bmi.n	80044cc <_vfiprintf_r+0x220>
 80044c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044c8:	f7ff fc29 	bl	8003d1e <__retarget_lock_release_recursive>
 80044cc:	89ab      	ldrh	r3, [r5, #12]
 80044ce:	065b      	lsls	r3, r3, #25
 80044d0:	f53f af12 	bmi.w	80042f8 <_vfiprintf_r+0x4c>
 80044d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044d6:	e711      	b.n	80042fc <_vfiprintf_r+0x50>
 80044d8:	ab03      	add	r3, sp, #12
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	462a      	mov	r2, r5
 80044de:	4630      	mov	r0, r6
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <_vfiprintf_r+0x25c>)
 80044e2:	a904      	add	r1, sp, #16
 80044e4:	f000 f882 	bl	80045ec <_printf_i>
 80044e8:	e7e4      	b.n	80044b4 <_vfiprintf_r+0x208>
 80044ea:	bf00      	nop
 80044ec:	08004cc8 	.word	0x08004cc8
 80044f0:	08004ce8 	.word	0x08004ce8
 80044f4:	08004ca8 	.word	0x08004ca8
 80044f8:	08004d08 	.word	0x08004d08
 80044fc:	08004d0e 	.word	0x08004d0e
 8004500:	08004d12 	.word	0x08004d12
 8004504:	00000000 	.word	0x00000000
 8004508:	08004287 	.word	0x08004287

0800450c <_printf_common>:
 800450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004510:	4616      	mov	r6, r2
 8004512:	4699      	mov	r9, r3
 8004514:	688a      	ldr	r2, [r1, #8]
 8004516:	690b      	ldr	r3, [r1, #16]
 8004518:	4607      	mov	r7, r0
 800451a:	4293      	cmp	r3, r2
 800451c:	bfb8      	it	lt
 800451e:	4613      	movlt	r3, r2
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004526:	460c      	mov	r4, r1
 8004528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800452c:	b10a      	cbz	r2, 8004532 <_printf_common+0x26>
 800452e:	3301      	adds	r3, #1
 8004530:	6033      	str	r3, [r6, #0]
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	0699      	lsls	r1, r3, #26
 8004536:	bf42      	ittt	mi
 8004538:	6833      	ldrmi	r3, [r6, #0]
 800453a:	3302      	addmi	r3, #2
 800453c:	6033      	strmi	r3, [r6, #0]
 800453e:	6825      	ldr	r5, [r4, #0]
 8004540:	f015 0506 	ands.w	r5, r5, #6
 8004544:	d106      	bne.n	8004554 <_printf_common+0x48>
 8004546:	f104 0a19 	add.w	sl, r4, #25
 800454a:	68e3      	ldr	r3, [r4, #12]
 800454c:	6832      	ldr	r2, [r6, #0]
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	42ab      	cmp	r3, r5
 8004552:	dc28      	bgt.n	80045a6 <_printf_common+0x9a>
 8004554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004558:	1e13      	subs	r3, r2, #0
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	bf18      	it	ne
 800455e:	2301      	movne	r3, #1
 8004560:	0692      	lsls	r2, r2, #26
 8004562:	d42d      	bmi.n	80045c0 <_printf_common+0xb4>
 8004564:	4649      	mov	r1, r9
 8004566:	4638      	mov	r0, r7
 8004568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800456c:	47c0      	blx	r8
 800456e:	3001      	adds	r0, #1
 8004570:	d020      	beq.n	80045b4 <_printf_common+0xa8>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	68e5      	ldr	r5, [r4, #12]
 8004576:	f003 0306 	and.w	r3, r3, #6
 800457a:	2b04      	cmp	r3, #4
 800457c:	bf18      	it	ne
 800457e:	2500      	movne	r5, #0
 8004580:	6832      	ldr	r2, [r6, #0]
 8004582:	f04f 0600 	mov.w	r6, #0
 8004586:	68a3      	ldr	r3, [r4, #8]
 8004588:	bf08      	it	eq
 800458a:	1aad      	subeq	r5, r5, r2
 800458c:	6922      	ldr	r2, [r4, #16]
 800458e:	bf08      	it	eq
 8004590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004594:	4293      	cmp	r3, r2
 8004596:	bfc4      	itt	gt
 8004598:	1a9b      	subgt	r3, r3, r2
 800459a:	18ed      	addgt	r5, r5, r3
 800459c:	341a      	adds	r4, #26
 800459e:	42b5      	cmp	r5, r6
 80045a0:	d11a      	bne.n	80045d8 <_printf_common+0xcc>
 80045a2:	2000      	movs	r0, #0
 80045a4:	e008      	b.n	80045b8 <_printf_common+0xac>
 80045a6:	2301      	movs	r3, #1
 80045a8:	4652      	mov	r2, sl
 80045aa:	4649      	mov	r1, r9
 80045ac:	4638      	mov	r0, r7
 80045ae:	47c0      	blx	r8
 80045b0:	3001      	adds	r0, #1
 80045b2:	d103      	bne.n	80045bc <_printf_common+0xb0>
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045bc:	3501      	adds	r5, #1
 80045be:	e7c4      	b.n	800454a <_printf_common+0x3e>
 80045c0:	2030      	movs	r0, #48	; 0x30
 80045c2:	18e1      	adds	r1, r4, r3
 80045c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045ce:	4422      	add	r2, r4
 80045d0:	3302      	adds	r3, #2
 80045d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045d6:	e7c5      	b.n	8004564 <_printf_common+0x58>
 80045d8:	2301      	movs	r3, #1
 80045da:	4622      	mov	r2, r4
 80045dc:	4649      	mov	r1, r9
 80045de:	4638      	mov	r0, r7
 80045e0:	47c0      	blx	r8
 80045e2:	3001      	adds	r0, #1
 80045e4:	d0e6      	beq.n	80045b4 <_printf_common+0xa8>
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7d9      	b.n	800459e <_printf_common+0x92>
	...

080045ec <_printf_i>:
 80045ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045f0:	7e0f      	ldrb	r7, [r1, #24]
 80045f2:	4691      	mov	r9, r2
 80045f4:	2f78      	cmp	r7, #120	; 0x78
 80045f6:	4680      	mov	r8, r0
 80045f8:	460c      	mov	r4, r1
 80045fa:	469a      	mov	sl, r3
 80045fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004602:	d807      	bhi.n	8004614 <_printf_i+0x28>
 8004604:	2f62      	cmp	r7, #98	; 0x62
 8004606:	d80a      	bhi.n	800461e <_printf_i+0x32>
 8004608:	2f00      	cmp	r7, #0
 800460a:	f000 80d9 	beq.w	80047c0 <_printf_i+0x1d4>
 800460e:	2f58      	cmp	r7, #88	; 0x58
 8004610:	f000 80a4 	beq.w	800475c <_printf_i+0x170>
 8004614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800461c:	e03a      	b.n	8004694 <_printf_i+0xa8>
 800461e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004622:	2b15      	cmp	r3, #21
 8004624:	d8f6      	bhi.n	8004614 <_printf_i+0x28>
 8004626:	a101      	add	r1, pc, #4	; (adr r1, 800462c <_printf_i+0x40>)
 8004628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800462c:	08004685 	.word	0x08004685
 8004630:	08004699 	.word	0x08004699
 8004634:	08004615 	.word	0x08004615
 8004638:	08004615 	.word	0x08004615
 800463c:	08004615 	.word	0x08004615
 8004640:	08004615 	.word	0x08004615
 8004644:	08004699 	.word	0x08004699
 8004648:	08004615 	.word	0x08004615
 800464c:	08004615 	.word	0x08004615
 8004650:	08004615 	.word	0x08004615
 8004654:	08004615 	.word	0x08004615
 8004658:	080047a7 	.word	0x080047a7
 800465c:	080046c9 	.word	0x080046c9
 8004660:	08004789 	.word	0x08004789
 8004664:	08004615 	.word	0x08004615
 8004668:	08004615 	.word	0x08004615
 800466c:	080047c9 	.word	0x080047c9
 8004670:	08004615 	.word	0x08004615
 8004674:	080046c9 	.word	0x080046c9
 8004678:	08004615 	.word	0x08004615
 800467c:	08004615 	.word	0x08004615
 8004680:	08004791 	.word	0x08004791
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	1d1a      	adds	r2, r3, #4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	602a      	str	r2, [r5, #0]
 800468c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004694:	2301      	movs	r3, #1
 8004696:	e0a4      	b.n	80047e2 <_printf_i+0x1f6>
 8004698:	6820      	ldr	r0, [r4, #0]
 800469a:	6829      	ldr	r1, [r5, #0]
 800469c:	0606      	lsls	r6, r0, #24
 800469e:	f101 0304 	add.w	r3, r1, #4
 80046a2:	d50a      	bpl.n	80046ba <_printf_i+0xce>
 80046a4:	680e      	ldr	r6, [r1, #0]
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	2e00      	cmp	r6, #0
 80046aa:	da03      	bge.n	80046b4 <_printf_i+0xc8>
 80046ac:	232d      	movs	r3, #45	; 0x2d
 80046ae:	4276      	negs	r6, r6
 80046b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b4:	230a      	movs	r3, #10
 80046b6:	485e      	ldr	r0, [pc, #376]	; (8004830 <_printf_i+0x244>)
 80046b8:	e019      	b.n	80046ee <_printf_i+0x102>
 80046ba:	680e      	ldr	r6, [r1, #0]
 80046bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046c0:	602b      	str	r3, [r5, #0]
 80046c2:	bf18      	it	ne
 80046c4:	b236      	sxthne	r6, r6
 80046c6:	e7ef      	b.n	80046a8 <_printf_i+0xbc>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	6820      	ldr	r0, [r4, #0]
 80046cc:	1d19      	adds	r1, r3, #4
 80046ce:	6029      	str	r1, [r5, #0]
 80046d0:	0601      	lsls	r1, r0, #24
 80046d2:	d501      	bpl.n	80046d8 <_printf_i+0xec>
 80046d4:	681e      	ldr	r6, [r3, #0]
 80046d6:	e002      	b.n	80046de <_printf_i+0xf2>
 80046d8:	0646      	lsls	r6, r0, #25
 80046da:	d5fb      	bpl.n	80046d4 <_printf_i+0xe8>
 80046dc:	881e      	ldrh	r6, [r3, #0]
 80046de:	2f6f      	cmp	r7, #111	; 0x6f
 80046e0:	bf0c      	ite	eq
 80046e2:	2308      	moveq	r3, #8
 80046e4:	230a      	movne	r3, #10
 80046e6:	4852      	ldr	r0, [pc, #328]	; (8004830 <_printf_i+0x244>)
 80046e8:	2100      	movs	r1, #0
 80046ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ee:	6865      	ldr	r5, [r4, #4]
 80046f0:	2d00      	cmp	r5, #0
 80046f2:	bfa8      	it	ge
 80046f4:	6821      	ldrge	r1, [r4, #0]
 80046f6:	60a5      	str	r5, [r4, #8]
 80046f8:	bfa4      	itt	ge
 80046fa:	f021 0104 	bicge.w	r1, r1, #4
 80046fe:	6021      	strge	r1, [r4, #0]
 8004700:	b90e      	cbnz	r6, 8004706 <_printf_i+0x11a>
 8004702:	2d00      	cmp	r5, #0
 8004704:	d04d      	beq.n	80047a2 <_printf_i+0x1b6>
 8004706:	4615      	mov	r5, r2
 8004708:	fbb6 f1f3 	udiv	r1, r6, r3
 800470c:	fb03 6711 	mls	r7, r3, r1, r6
 8004710:	5dc7      	ldrb	r7, [r0, r7]
 8004712:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004716:	4637      	mov	r7, r6
 8004718:	42bb      	cmp	r3, r7
 800471a:	460e      	mov	r6, r1
 800471c:	d9f4      	bls.n	8004708 <_printf_i+0x11c>
 800471e:	2b08      	cmp	r3, #8
 8004720:	d10b      	bne.n	800473a <_printf_i+0x14e>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	07de      	lsls	r6, r3, #31
 8004726:	d508      	bpl.n	800473a <_printf_i+0x14e>
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	6861      	ldr	r1, [r4, #4]
 800472c:	4299      	cmp	r1, r3
 800472e:	bfde      	ittt	le
 8004730:	2330      	movle	r3, #48	; 0x30
 8004732:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004736:	f105 35ff 	addle.w	r5, r5, #4294967295
 800473a:	1b52      	subs	r2, r2, r5
 800473c:	6122      	str	r2, [r4, #16]
 800473e:	464b      	mov	r3, r9
 8004740:	4621      	mov	r1, r4
 8004742:	4640      	mov	r0, r8
 8004744:	f8cd a000 	str.w	sl, [sp]
 8004748:	aa03      	add	r2, sp, #12
 800474a:	f7ff fedf 	bl	800450c <_printf_common>
 800474e:	3001      	adds	r0, #1
 8004750:	d14c      	bne.n	80047ec <_printf_i+0x200>
 8004752:	f04f 30ff 	mov.w	r0, #4294967295
 8004756:	b004      	add	sp, #16
 8004758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475c:	4834      	ldr	r0, [pc, #208]	; (8004830 <_printf_i+0x244>)
 800475e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004762:	6829      	ldr	r1, [r5, #0]
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	f851 6b04 	ldr.w	r6, [r1], #4
 800476a:	6029      	str	r1, [r5, #0]
 800476c:	061d      	lsls	r5, r3, #24
 800476e:	d514      	bpl.n	800479a <_printf_i+0x1ae>
 8004770:	07df      	lsls	r7, r3, #31
 8004772:	bf44      	itt	mi
 8004774:	f043 0320 	orrmi.w	r3, r3, #32
 8004778:	6023      	strmi	r3, [r4, #0]
 800477a:	b91e      	cbnz	r6, 8004784 <_printf_i+0x198>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	f023 0320 	bic.w	r3, r3, #32
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	2310      	movs	r3, #16
 8004786:	e7af      	b.n	80046e8 <_printf_i+0xfc>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	f043 0320 	orr.w	r3, r3, #32
 800478e:	6023      	str	r3, [r4, #0]
 8004790:	2378      	movs	r3, #120	; 0x78
 8004792:	4828      	ldr	r0, [pc, #160]	; (8004834 <_printf_i+0x248>)
 8004794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004798:	e7e3      	b.n	8004762 <_printf_i+0x176>
 800479a:	0659      	lsls	r1, r3, #25
 800479c:	bf48      	it	mi
 800479e:	b2b6      	uxthmi	r6, r6
 80047a0:	e7e6      	b.n	8004770 <_printf_i+0x184>
 80047a2:	4615      	mov	r5, r2
 80047a4:	e7bb      	b.n	800471e <_printf_i+0x132>
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	6826      	ldr	r6, [r4, #0]
 80047aa:	1d18      	adds	r0, r3, #4
 80047ac:	6961      	ldr	r1, [r4, #20]
 80047ae:	6028      	str	r0, [r5, #0]
 80047b0:	0635      	lsls	r5, r6, #24
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	d501      	bpl.n	80047ba <_printf_i+0x1ce>
 80047b6:	6019      	str	r1, [r3, #0]
 80047b8:	e002      	b.n	80047c0 <_printf_i+0x1d4>
 80047ba:	0670      	lsls	r0, r6, #25
 80047bc:	d5fb      	bpl.n	80047b6 <_printf_i+0x1ca>
 80047be:	8019      	strh	r1, [r3, #0]
 80047c0:	2300      	movs	r3, #0
 80047c2:	4615      	mov	r5, r2
 80047c4:	6123      	str	r3, [r4, #16]
 80047c6:	e7ba      	b.n	800473e <_printf_i+0x152>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	2100      	movs	r1, #0
 80047cc:	1d1a      	adds	r2, r3, #4
 80047ce:	602a      	str	r2, [r5, #0]
 80047d0:	681d      	ldr	r5, [r3, #0]
 80047d2:	6862      	ldr	r2, [r4, #4]
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 f8d9 	bl	800498c <memchr>
 80047da:	b108      	cbz	r0, 80047e0 <_printf_i+0x1f4>
 80047dc:	1b40      	subs	r0, r0, r5
 80047de:	6060      	str	r0, [r4, #4]
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	6123      	str	r3, [r4, #16]
 80047e4:	2300      	movs	r3, #0
 80047e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ea:	e7a8      	b.n	800473e <_printf_i+0x152>
 80047ec:	462a      	mov	r2, r5
 80047ee:	4649      	mov	r1, r9
 80047f0:	4640      	mov	r0, r8
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	47d0      	blx	sl
 80047f6:	3001      	adds	r0, #1
 80047f8:	d0ab      	beq.n	8004752 <_printf_i+0x166>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	079b      	lsls	r3, r3, #30
 80047fe:	d413      	bmi.n	8004828 <_printf_i+0x23c>
 8004800:	68e0      	ldr	r0, [r4, #12]
 8004802:	9b03      	ldr	r3, [sp, #12]
 8004804:	4298      	cmp	r0, r3
 8004806:	bfb8      	it	lt
 8004808:	4618      	movlt	r0, r3
 800480a:	e7a4      	b.n	8004756 <_printf_i+0x16a>
 800480c:	2301      	movs	r3, #1
 800480e:	4632      	mov	r2, r6
 8004810:	4649      	mov	r1, r9
 8004812:	4640      	mov	r0, r8
 8004814:	47d0      	blx	sl
 8004816:	3001      	adds	r0, #1
 8004818:	d09b      	beq.n	8004752 <_printf_i+0x166>
 800481a:	3501      	adds	r5, #1
 800481c:	68e3      	ldr	r3, [r4, #12]
 800481e:	9903      	ldr	r1, [sp, #12]
 8004820:	1a5b      	subs	r3, r3, r1
 8004822:	42ab      	cmp	r3, r5
 8004824:	dcf2      	bgt.n	800480c <_printf_i+0x220>
 8004826:	e7eb      	b.n	8004800 <_printf_i+0x214>
 8004828:	2500      	movs	r5, #0
 800482a:	f104 0619 	add.w	r6, r4, #25
 800482e:	e7f5      	b.n	800481c <_printf_i+0x230>
 8004830:	08004d19 	.word	0x08004d19
 8004834:	08004d2a 	.word	0x08004d2a

08004838 <_sbrk_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	2300      	movs	r3, #0
 800483c:	4d05      	ldr	r5, [pc, #20]	; (8004854 <_sbrk_r+0x1c>)
 800483e:	4604      	mov	r4, r0
 8004840:	4608      	mov	r0, r1
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	f7fd f87a 	bl	800193c <_sbrk>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d102      	bne.n	8004852 <_sbrk_r+0x1a>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	b103      	cbz	r3, 8004852 <_sbrk_r+0x1a>
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	bd38      	pop	{r3, r4, r5, pc}
 8004854:	200001c0 	.word	0x200001c0

08004858 <__sread>:
 8004858:	b510      	push	{r4, lr}
 800485a:	460c      	mov	r4, r1
 800485c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004860:	f000 f906 	bl	8004a70 <_read_r>
 8004864:	2800      	cmp	r0, #0
 8004866:	bfab      	itete	ge
 8004868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800486a:	89a3      	ldrhlt	r3, [r4, #12]
 800486c:	181b      	addge	r3, r3, r0
 800486e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004872:	bfac      	ite	ge
 8004874:	6563      	strge	r3, [r4, #84]	; 0x54
 8004876:	81a3      	strhlt	r3, [r4, #12]
 8004878:	bd10      	pop	{r4, pc}

0800487a <__swrite>:
 800487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	461f      	mov	r7, r3
 8004880:	898b      	ldrh	r3, [r1, #12]
 8004882:	4605      	mov	r5, r0
 8004884:	05db      	lsls	r3, r3, #23
 8004886:	460c      	mov	r4, r1
 8004888:	4616      	mov	r6, r2
 800488a:	d505      	bpl.n	8004898 <__swrite+0x1e>
 800488c:	2302      	movs	r3, #2
 800488e:	2200      	movs	r2, #0
 8004890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004894:	f000 f868 	bl	8004968 <_lseek_r>
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	4632      	mov	r2, r6
 800489c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048a0:	81a3      	strh	r3, [r4, #12]
 80048a2:	4628      	mov	r0, r5
 80048a4:	463b      	mov	r3, r7
 80048a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048ae:	f000 b817 	b.w	80048e0 <_write_r>

080048b2 <__sseek>:
 80048b2:	b510      	push	{r4, lr}
 80048b4:	460c      	mov	r4, r1
 80048b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ba:	f000 f855 	bl	8004968 <_lseek_r>
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	bf15      	itete	ne
 80048c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80048c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048ce:	81a3      	strheq	r3, [r4, #12]
 80048d0:	bf18      	it	ne
 80048d2:	81a3      	strhne	r3, [r4, #12]
 80048d4:	bd10      	pop	{r4, pc}

080048d6 <__sclose>:
 80048d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048da:	f000 b813 	b.w	8004904 <_close_r>
	...

080048e0 <_write_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	2200      	movs	r2, #0
 80048ea:	4d05      	ldr	r5, [pc, #20]	; (8004900 <_write_r+0x20>)
 80048ec:	602a      	str	r2, [r5, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f7fc ffd8 	bl	80018a4 <_write>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_write_r+0x1e>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_write_r+0x1e>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	200001c0 	.word	0x200001c0

08004904 <_close_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	2300      	movs	r3, #0
 8004908:	4d05      	ldr	r5, [pc, #20]	; (8004920 <_close_r+0x1c>)
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	602b      	str	r3, [r5, #0]
 8004910:	f7fc ffe4 	bl	80018dc <_close>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d102      	bne.n	800491e <_close_r+0x1a>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b103      	cbz	r3, 800491e <_close_r+0x1a>
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	bd38      	pop	{r3, r4, r5, pc}
 8004920:	200001c0 	.word	0x200001c0

08004924 <_fstat_r>:
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	2300      	movs	r3, #0
 8004928:	4d06      	ldr	r5, [pc, #24]	; (8004944 <_fstat_r+0x20>)
 800492a:	4604      	mov	r4, r0
 800492c:	4608      	mov	r0, r1
 800492e:	4611      	mov	r1, r2
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	f7fc ffde 	bl	80018f2 <_fstat>
 8004936:	1c43      	adds	r3, r0, #1
 8004938:	d102      	bne.n	8004940 <_fstat_r+0x1c>
 800493a:	682b      	ldr	r3, [r5, #0]
 800493c:	b103      	cbz	r3, 8004940 <_fstat_r+0x1c>
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	bd38      	pop	{r3, r4, r5, pc}
 8004942:	bf00      	nop
 8004944:	200001c0 	.word	0x200001c0

08004948 <_isatty_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	2300      	movs	r3, #0
 800494c:	4d05      	ldr	r5, [pc, #20]	; (8004964 <_isatty_r+0x1c>)
 800494e:	4604      	mov	r4, r0
 8004950:	4608      	mov	r0, r1
 8004952:	602b      	str	r3, [r5, #0]
 8004954:	f7fc ffdc 	bl	8001910 <_isatty>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_isatty_r+0x1a>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_isatty_r+0x1a>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	200001c0 	.word	0x200001c0

08004968 <_lseek_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4604      	mov	r4, r0
 800496c:	4608      	mov	r0, r1
 800496e:	4611      	mov	r1, r2
 8004970:	2200      	movs	r2, #0
 8004972:	4d05      	ldr	r5, [pc, #20]	; (8004988 <_lseek_r+0x20>)
 8004974:	602a      	str	r2, [r5, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	f7fc ffd4 	bl	8001924 <_lseek>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d102      	bne.n	8004986 <_lseek_r+0x1e>
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	b103      	cbz	r3, 8004986 <_lseek_r+0x1e>
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	200001c0 	.word	0x200001c0

0800498c <memchr>:
 800498c:	4603      	mov	r3, r0
 800498e:	b510      	push	{r4, lr}
 8004990:	b2c9      	uxtb	r1, r1
 8004992:	4402      	add	r2, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	4618      	mov	r0, r3
 8004998:	d101      	bne.n	800499e <memchr+0x12>
 800499a:	2000      	movs	r0, #0
 800499c:	e003      	b.n	80049a6 <memchr+0x1a>
 800499e:	7804      	ldrb	r4, [r0, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	428c      	cmp	r4, r1
 80049a4:	d1f6      	bne.n	8004994 <memchr+0x8>
 80049a6:	bd10      	pop	{r4, pc}

080049a8 <memcpy>:
 80049a8:	440a      	add	r2, r1
 80049aa:	4291      	cmp	r1, r2
 80049ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80049b0:	d100      	bne.n	80049b4 <memcpy+0xc>
 80049b2:	4770      	bx	lr
 80049b4:	b510      	push	{r4, lr}
 80049b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ba:	4291      	cmp	r1, r2
 80049bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049c0:	d1f9      	bne.n	80049b6 <memcpy+0xe>
 80049c2:	bd10      	pop	{r4, pc}

080049c4 <memmove>:
 80049c4:	4288      	cmp	r0, r1
 80049c6:	b510      	push	{r4, lr}
 80049c8:	eb01 0402 	add.w	r4, r1, r2
 80049cc:	d902      	bls.n	80049d4 <memmove+0x10>
 80049ce:	4284      	cmp	r4, r0
 80049d0:	4623      	mov	r3, r4
 80049d2:	d807      	bhi.n	80049e4 <memmove+0x20>
 80049d4:	1e43      	subs	r3, r0, #1
 80049d6:	42a1      	cmp	r1, r4
 80049d8:	d008      	beq.n	80049ec <memmove+0x28>
 80049da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049e2:	e7f8      	b.n	80049d6 <memmove+0x12>
 80049e4:	4601      	mov	r1, r0
 80049e6:	4402      	add	r2, r0
 80049e8:	428a      	cmp	r2, r1
 80049ea:	d100      	bne.n	80049ee <memmove+0x2a>
 80049ec:	bd10      	pop	{r4, pc}
 80049ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049f6:	e7f7      	b.n	80049e8 <memmove+0x24>

080049f8 <__malloc_lock>:
 80049f8:	4801      	ldr	r0, [pc, #4]	; (8004a00 <__malloc_lock+0x8>)
 80049fa:	f7ff b98f 	b.w	8003d1c <__retarget_lock_acquire_recursive>
 80049fe:	bf00      	nop
 8004a00:	200001b4 	.word	0x200001b4

08004a04 <__malloc_unlock>:
 8004a04:	4801      	ldr	r0, [pc, #4]	; (8004a0c <__malloc_unlock+0x8>)
 8004a06:	f7ff b98a 	b.w	8003d1e <__retarget_lock_release_recursive>
 8004a0a:	bf00      	nop
 8004a0c:	200001b4 	.word	0x200001b4

08004a10 <_realloc_r>:
 8004a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	4680      	mov	r8, r0
 8004a16:	4614      	mov	r4, r2
 8004a18:	460e      	mov	r6, r1
 8004a1a:	b921      	cbnz	r1, 8004a26 <_realloc_r+0x16>
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a22:	f7ff ba4b 	b.w	8003ebc <_malloc_r>
 8004a26:	b92a      	cbnz	r2, 8004a34 <_realloc_r+0x24>
 8004a28:	f7ff f9e0 	bl	8003dec <_free_r>
 8004a2c:	4625      	mov	r5, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a34:	f000 f82e 	bl	8004a94 <_malloc_usable_size_r>
 8004a38:	4284      	cmp	r4, r0
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	d802      	bhi.n	8004a44 <_realloc_r+0x34>
 8004a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a42:	d812      	bhi.n	8004a6a <_realloc_r+0x5a>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4640      	mov	r0, r8
 8004a48:	f7ff fa38 	bl	8003ebc <_malloc_r>
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d0ed      	beq.n	8004a2e <_realloc_r+0x1e>
 8004a52:	42bc      	cmp	r4, r7
 8004a54:	4622      	mov	r2, r4
 8004a56:	4631      	mov	r1, r6
 8004a58:	bf28      	it	cs
 8004a5a:	463a      	movcs	r2, r7
 8004a5c:	f7ff ffa4 	bl	80049a8 <memcpy>
 8004a60:	4631      	mov	r1, r6
 8004a62:	4640      	mov	r0, r8
 8004a64:	f7ff f9c2 	bl	8003dec <_free_r>
 8004a68:	e7e1      	b.n	8004a2e <_realloc_r+0x1e>
 8004a6a:	4635      	mov	r5, r6
 8004a6c:	e7df      	b.n	8004a2e <_realloc_r+0x1e>
	...

08004a70 <_read_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4604      	mov	r4, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	4611      	mov	r1, r2
 8004a78:	2200      	movs	r2, #0
 8004a7a:	4d05      	ldr	r5, [pc, #20]	; (8004a90 <_read_r+0x20>)
 8004a7c:	602a      	str	r2, [r5, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f7fc fef3 	bl	800186a <_read>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d102      	bne.n	8004a8e <_read_r+0x1e>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	b103      	cbz	r3, 8004a8e <_read_r+0x1e>
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
 8004a90:	200001c0 	.word	0x200001c0

08004a94 <_malloc_usable_size_r>:
 8004a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a98:	1f18      	subs	r0, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfbc      	itt	lt
 8004a9e:	580b      	ldrlt	r3, [r1, r0]
 8004aa0:	18c0      	addlt	r0, r0, r3
 8004aa2:	4770      	bx	lr

08004aa4 <_init>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr

08004ab0 <_fini>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr
