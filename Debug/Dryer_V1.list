
Dryer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031ec  080031ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080031ec  080031ec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031ec  080031ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080031f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000074  08003268  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003268  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005cc8  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166b  00000000  00000000  00025d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  000273d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  00027b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018117  00000000  00000000  000281d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f0b  00000000  00000000  000402ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008374e  00000000  00000000  000491fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000cc948  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002334  00000000  00000000  000cc994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003030 	.word	0x08003030

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003030 	.word	0x08003030

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0310 	and.w	r3, r3, #16
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]
}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <gpio_init>:

/* USER CODE BEGIN 2 */
void gpio_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIOx = {0};
 80001ae:	463b      	mov	r3, r7
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = DOOR_SW;
 80001ba:	2301      	movs	r3, #1
 80001bc:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001be:	4b19      	ldr	r3, [pc, #100]	; (8000224 <gpio_init+0x7c>)
 80001c0:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_PULLUP;
 80001c2:	2301      	movs	r3, #1
 80001c4:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001c6:	2302      	movs	r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001ca:	463b      	mov	r3, r7
 80001cc:	4619      	mov	r1, r3
 80001ce:	4816      	ldr	r0, [pc, #88]	; (8000228 <gpio_init+0x80>)
 80001d0:	f000 ff54 	bl	800107c <HAL_GPIO_Init>

	GPIOx.Pin = LIMIT_SW | HEATER_SW | SEL_ROT_SW;
 80001d4:	230e      	movs	r3, #14
 80001d6:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_INPUT;
 80001d8:	2300      	movs	r3, #0
 80001da:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_PULLUP;
 80001dc:	2301      	movs	r3, #1
 80001de:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001e0:	2302      	movs	r3, #2
 80001e2:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001e4:	463b      	mov	r3, r7
 80001e6:	4619      	mov	r1, r3
 80001e8:	480f      	ldr	r0, [pc, #60]	; (8000228 <gpio_init+0x80>)
 80001ea:	f000 ff47 	bl	800107c <HAL_GPIO_Init>

	GPIOx.Pin = LED;
 80001ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f2:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2301      	movs	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOC, &GPIOx);
 8000200:	463b      	mov	r3, r7
 8000202:	4619      	mov	r1, r3
 8000204:	4809      	ldr	r0, [pc, #36]	; (800022c <gpio_init+0x84>)
 8000206:	f000 ff39 	bl	800107c <HAL_GPIO_Init>

	//HAL_GPIO_WritePin(GPIOC, LED, LOW);

	HAL_NVIC_SetPriority(EXTI0_IRQn,0,0);
 800020a:	2200      	movs	r2, #0
 800020c:	2100      	movs	r1, #0
 800020e:	2006      	movs	r0, #6
 8000210:	f000 fefd 	bl	800100e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000214:	2006      	movs	r0, #6
 8000216:	f000 ff16 	bl	8001046 <HAL_NVIC_EnableIRQ>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	10310000 	.word	0x10310000
 8000228:	40010800 	.word	0x40010800
 800022c:	40011000 	.word	0x40011000

08000230 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(DOOR_SW);
 8000234:	2001      	movs	r0, #1
 8000236:	f001 f8d5 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <keypad_init>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

void keypad_init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <keypad_init+0x54>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <keypad_init+0x54>)
 800024c:	f043 0308 	orr.w	r3, r3, #8
 8000250:	6193      	str	r3, [r2, #24]
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <keypad_init+0x54>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	f003 0308 	and.w	r3, r3, #8
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 800025e:	f107 0308 	add.w	r3, r7, #8
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = LOW_KEY | MED_KEY | HIGH_KEY | FN_KEY;
 800026c:	f640 4303 	movw	r3, #3075	; 0xc03
 8000270:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_INPUT;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 8000276:	2301      	movs	r3, #1
 8000278:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 800027a:	2303      	movs	r3, #3
 800027c:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(KEYPAD_PORT, &GPIOx);
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	4619      	mov	r1, r3
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <keypad_init+0x58>)
 8000286:	f000 fef9 	bl	800107c <HAL_GPIO_Init>
}
 800028a:	bf00      	nop
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	40010c00 	.word	0x40010c00

0800029c <scan_keypad>:

uint8_t scan_keypad(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 80002a0:	f000 f832 	bl	8000308 <is_low_key_pressed>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d004      	beq.n	80002b4 <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 80002aa:	4813      	ldr	r0, [pc, #76]	; (80002f8 <scan_keypad+0x5c>)
 80002ac:	f001 ff3c 	bl	8002128 <puts>
		return LOW_KEY_PRESSED;
 80002b0:	2301      	movs	r3, #1
 80002b2:	e01e      	b.n	80002f2 <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 80002b4:	f000 f860 	bl	8000378 <is_med_key_pressed>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d004      	beq.n	80002c8 <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 80002be:	480f      	ldr	r0, [pc, #60]	; (80002fc <scan_keypad+0x60>)
 80002c0:	f001 ff32 	bl	8002128 <puts>
		return MED_KEY_PRESSED;
 80002c4:	2302      	movs	r3, #2
 80002c6:	e014      	b.n	80002f2 <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 80002c8:	f000 f890 	bl	80003ec <is_high_key_pressed>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d004      	beq.n	80002dc <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 80002d2:	480b      	ldr	r0, [pc, #44]	; (8000300 <scan_keypad+0x64>)
 80002d4:	f001 ff28 	bl	8002128 <puts>
		return HIGH_KEY_PRESSED;
 80002d8:	2303      	movs	r3, #3
 80002da:	e00a      	b.n	80002f2 <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 80002dc:	f000 f8c0 	bl	8000460 <is_fn_key_pressed>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d004      	beq.n	80002f0 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 80002e6:	4807      	ldr	r0, [pc, #28]	; (8000304 <scan_keypad+0x68>)
 80002e8:	f001 ff1e 	bl	8002128 <puts>
		return FN_KEY_PRESSED;
 80002ec:	2304      	movs	r3, #4
 80002ee:	e000      	b.n	80002f2 <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	08003048 	.word	0x08003048
 80002fc:	0800305c 	.word	0x0800305c
 8000300:	08003070 	.word	0x08003070
 8000304:	08003084 	.word	0x08003084

08000308 <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 800030c:	f000 fd9e 	bl	8000e4c <HAL_GetTick>
 8000310:	4602      	mov	r2, r0
 8000312:	4b16      	ldr	r3, [pc, #88]	; (800036c <is_low_key_pressed+0x64>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	1ad3      	subs	r3, r2, r3
 8000318:	2b0a      	cmp	r3, #10
 800031a:	d923      	bls.n	8000364 <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 800031c:	2102      	movs	r1, #2
 800031e:	4814      	ldr	r0, [pc, #80]	; (8000370 <is_low_key_pressed+0x68>)
 8000320:	f001 f830 	bl	8001384 <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d114      	bne.n	8000354 <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <is_low_key_pressed+0x6c>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b01      	cmp	r3, #1
 8000332:	d112      	bne.n	800035a <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 8000334:	2102      	movs	r1, #2
 8000336:	480e      	ldr	r0, [pc, #56]	; (8000370 <is_low_key_pressed+0x68>)
 8000338:	f001 f824 	bl	8001384 <HAL_GPIO_ReadPin>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d104      	bne.n	800034c <is_low_key_pressed+0x44>
				{
					last_state = 0;
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <is_low_key_pressed+0x6c>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
					return 1;
 8000348:	2301      	movs	r3, #1
 800034a:	e00c      	b.n	8000366 <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <is_low_key_pressed+0x6c>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
 8000352:	e002      	b.n	800035a <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <is_low_key_pressed+0x6c>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800035a:	f000 fd77 	bl	8000e4c <HAL_GetTick>
 800035e:	4603      	mov	r3, r0
 8000360:	4a02      	ldr	r2, [pc, #8]	; (800036c <is_low_key_pressed+0x64>)
 8000362:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000364:	2300      	movs	r3, #0
}
 8000366:	4618      	mov	r0, r3
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000090 	.word	0x20000090
 8000370:	40010c00 	.word	0x40010c00
 8000374:	20000094 	.word	0x20000094

08000378 <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 800037c:	f000 fd66 	bl	8000e4c <HAL_GetTick>
 8000380:	4602      	mov	r2, r0
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <is_med_key_pressed+0x68>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	2b0a      	cmp	r3, #10
 800038a:	d925      	bls.n	80003d8 <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 800038c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000390:	4814      	ldr	r0, [pc, #80]	; (80003e4 <is_med_key_pressed+0x6c>)
 8000392:	f000 fff7 	bl	8001384 <HAL_GPIO_ReadPin>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d115      	bne.n	80003c8 <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <is_med_key_pressed+0x70>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d113      	bne.n	80003ce <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 80003a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003aa:	480e      	ldr	r0, [pc, #56]	; (80003e4 <is_med_key_pressed+0x6c>)
 80003ac:	f000 ffea 	bl	8001384 <HAL_GPIO_ReadPin>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d104      	bne.n	80003c0 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <is_med_key_pressed+0x70>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
					return 1;
 80003bc:	2301      	movs	r3, #1
 80003be:	e00c      	b.n	80003da <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <is_med_key_pressed+0x70>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
 80003c6:	e002      	b.n	80003ce <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <is_med_key_pressed+0x70>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80003ce:	f000 fd3d 	bl	8000e4c <HAL_GetTick>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a02      	ldr	r2, [pc, #8]	; (80003e0 <is_med_key_pressed+0x68>)
 80003d6:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80003d8:	2300      	movs	r3, #0
}
 80003da:	4618      	mov	r0, r3
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000098 	.word	0x20000098
 80003e4:	40010c00 	.word	0x40010c00
 80003e8:	2000009c 	.word	0x2000009c

080003ec <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 80003f0:	f000 fd2c 	bl	8000e4c <HAL_GetTick>
 80003f4:	4602      	mov	r2, r0
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <is_high_key_pressed+0x68>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	1ad3      	subs	r3, r2, r3
 80003fc:	2b0a      	cmp	r3, #10
 80003fe:	d925      	bls.n	800044c <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4814      	ldr	r0, [pc, #80]	; (8000458 <is_high_key_pressed+0x6c>)
 8000406:	f000 ffbd 	bl	8001384 <HAL_GPIO_ReadPin>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d115      	bne.n	800043c <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <is_high_key_pressed+0x70>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b01      	cmp	r3, #1
 8000418:	d113      	bne.n	8000442 <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	480e      	ldr	r0, [pc, #56]	; (8000458 <is_high_key_pressed+0x6c>)
 8000420:	f000 ffb0 	bl	8001384 <HAL_GPIO_ReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d104      	bne.n	8000434 <is_high_key_pressed+0x48>
				{
					last_state = 0;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <is_high_key_pressed+0x70>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
					return 1;
 8000430:	2301      	movs	r3, #1
 8000432:	e00c      	b.n	800044e <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <is_high_key_pressed+0x70>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
 800043a:	e002      	b.n	8000442 <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <is_high_key_pressed+0x70>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000442:	f000 fd03 	bl	8000e4c <HAL_GetTick>
 8000446:	4603      	mov	r3, r0
 8000448:	4a02      	ldr	r2, [pc, #8]	; (8000454 <is_high_key_pressed+0x68>)
 800044a:	6013      	str	r3, [r2, #0]
	}
	return 0;
 800044c:	2300      	movs	r3, #0
}
 800044e:	4618      	mov	r0, r3
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a0 	.word	0x200000a0
 8000458:	40010c00 	.word	0x40010c00
 800045c:	200000a4 	.word	0x200000a4

08000460 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 8000464:	f000 fcf2 	bl	8000e4c <HAL_GetTick>
 8000468:	4602      	mov	r2, r0
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <is_fn_key_pressed+0x64>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	2b0a      	cmp	r3, #10
 8000472:	d923      	bls.n	80004bc <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8000474:	2101      	movs	r1, #1
 8000476:	4814      	ldr	r0, [pc, #80]	; (80004c8 <is_fn_key_pressed+0x68>)
 8000478:	f000 ff84 	bl	8001384 <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d114      	bne.n	80004ac <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <is_fn_key_pressed+0x6c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	2b01      	cmp	r3, #1
 800048a:	d112      	bne.n	80004b2 <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 800048c:	2101      	movs	r1, #1
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <is_fn_key_pressed+0x68>)
 8000490:	f000 ff78 	bl	8001384 <HAL_GPIO_ReadPin>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d104      	bne.n	80004a4 <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <is_fn_key_pressed+0x6c>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
					return 1;
 80004a0:	2301      	movs	r3, #1
 80004a2:	e00c      	b.n	80004be <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <is_fn_key_pressed+0x6c>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e002      	b.n	80004b2 <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 80004ac:	4b07      	ldr	r3, [pc, #28]	; (80004cc <is_fn_key_pressed+0x6c>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80004b2:	f000 fccb 	bl	8000e4c <HAL_GetTick>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a02      	ldr	r2, [pc, #8]	; (80004c4 <is_fn_key_pressed+0x64>)
 80004ba:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000a8 	.word	0x200000a8
 80004c8:	40010c00 	.word	0x40010c00
 80004cc:	200000ac 	.word	0x200000ac

080004d0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 80004d8:	1d39      	adds	r1, r7, #4
 80004da:	230a      	movs	r3, #10
 80004dc:	2201      	movs	r2, #1
 80004de:	4804      	ldr	r0, [pc, #16]	; (80004f0 <__io_putchar+0x20>)
 80004e0:	f001 fbff 	bl	8001ce2 <HAL_UART_Transmit>
	return ch;
 80004e4:	687b      	ldr	r3, [r7, #4]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200000c4 	.word	0x200000c4

080004f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f8:	f000 fc50 	bl	8000d9c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004fc:	f000 fa62 	bl	80009c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000500:	f7ff fe24 	bl	800014c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000504:	f000 fbae 	bl	8000c64 <MX_USART1_UART_Init>

	/* USER CODE BEGIN 2 */
	gpio_init();
 8000508:	f7ff fe4e 	bl	80001a8 <gpio_init>
	keypad_init();
 800050c:	f7ff fe98 	bl	8000240 <keypad_init>

	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 8000510:	4893      	ldr	r0, [pc, #588]	; (8000760 <main+0x26c>)
 8000512:	f001 fe09 	bl	8002128 <puts>
	dryer.state = INIT;
 8000516:	4b93      	ldr	r3, [pc, #588]	; (8000764 <main+0x270>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 800051c:	4b91      	ldr	r3, [pc, #580]	; (8000764 <main+0x270>)
 800051e:	2200      	movs	r2, #0
 8000520:	705a      	strb	r2, [r3, #1]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */

		if (door_open_flag) {
 8000522:	4b91      	ldr	r3, [pc, #580]	; (8000768 <main+0x274>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d006      	beq.n	8000538 <main+0x44>

			//printf("Door Open\r\n");
			HAL_GPIO_WritePin(GPIOC, LED, LOW);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000530:	488e      	ldr	r0, [pc, #568]	; (800076c <main+0x278>)
 8000532:	f000 ff3e 	bl	80013b2 <HAL_GPIO_WritePin>
 8000536:	e175      	b.n	8000824 <main+0x330>

		} else {

			//printf("Door Close\r\n");

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	488b      	ldr	r0, [pc, #556]	; (800076c <main+0x278>)
 8000540:	f000 ff37 	bl	80013b2 <HAL_GPIO_WritePin>
			//scaned_key = scan_keypad();

			if (dryer.state == START) {
 8000544:	4b87      	ldr	r3, [pc, #540]	; (8000764 <main+0x270>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	f040 80f3 	bne.w	8000734 <main+0x240>
				scaned_key = scan_keypad();
 800054e:	f7ff fea5 	bl	800029c <scan_keypad>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	4b86      	ldr	r3, [pc, #536]	; (8000770 <main+0x27c>)
 8000558:	701a      	strb	r2, [r3, #0]
				switch (scaned_key) {
 800055a:	4b85      	ldr	r3, [pc, #532]	; (8000770 <main+0x27c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	3b01      	subs	r3, #1
 8000560:	2b03      	cmp	r3, #3
 8000562:	f200 80e3 	bhi.w	800072c <main+0x238>
 8000566:	a201      	add	r2, pc, #4	; (adr r2, 800056c <main+0x78>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	0800057d 	.word	0x0800057d
 8000570:	080005d1 	.word	0x080005d1
 8000574:	080005d9 	.word	0x080005d9
 8000578:	0800067b 	.word	0x0800067b
				case LOW_KEY_PRESSED:
					switch (dryer.cycle) {
 800057c:	4b79      	ldr	r3, [pc, #484]	; (8000764 <main+0x270>)
 800057e:	799b      	ldrb	r3, [r3, #6]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <main+0x96>
 8000584:	2b01      	cmp	r3, #1
 8000586:	d011      	beq.n	80005ac <main+0xb8>
						if (dryer.coolTime > 60U)
							dryer.coolTime -= 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
 8000588:	e0d0      	b.n	800072c <main+0x238>
						if (dryer.heatTime > 60U)
 800058a:	4b76      	ldr	r3, [pc, #472]	; (8000764 <main+0x270>)
 800058c:	885b      	ldrh	r3, [r3, #2]
 800058e:	2b3c      	cmp	r3, #60	; 0x3c
 8000590:	d905      	bls.n	800059e <main+0xaa>
							dryer.heatTime -= 60U;
 8000592:	4b74      	ldr	r3, [pc, #464]	; (8000764 <main+0x270>)
 8000594:	885b      	ldrh	r3, [r3, #2]
 8000596:	3b3c      	subs	r3, #60	; 0x3c
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b72      	ldr	r3, [pc, #456]	; (8000764 <main+0x270>)
 800059c:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 800059e:	4b71      	ldr	r3, [pc, #452]	; (8000764 <main+0x270>)
 80005a0:	885b      	ldrh	r3, [r3, #2]
 80005a2:	4619      	mov	r1, r3
 80005a4:	4873      	ldr	r0, [pc, #460]	; (8000774 <main+0x280>)
 80005a6:	f001 fd39 	bl	800201c <iprintf>
						break;
 80005aa:	e010      	b.n	80005ce <main+0xda>
						if (dryer.coolTime > 60U)
 80005ac:	4b6d      	ldr	r3, [pc, #436]	; (8000764 <main+0x270>)
 80005ae:	889b      	ldrh	r3, [r3, #4]
 80005b0:	2b3c      	cmp	r3, #60	; 0x3c
 80005b2:	d905      	bls.n	80005c0 <main+0xcc>
							dryer.coolTime -= 60U;
 80005b4:	4b6b      	ldr	r3, [pc, #428]	; (8000764 <main+0x270>)
 80005b6:	889b      	ldrh	r3, [r3, #4]
 80005b8:	3b3c      	subs	r3, #60	; 0x3c
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	4b69      	ldr	r3, [pc, #420]	; (8000764 <main+0x270>)
 80005be:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 80005c0:	4b68      	ldr	r3, [pc, #416]	; (8000764 <main+0x270>)
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	486c      	ldr	r0, [pc, #432]	; (8000778 <main+0x284>)
 80005c8:	f001 fd28 	bl	800201c <iprintf>
						break;
 80005cc:	bf00      	nop
					break;
 80005ce:	e0ad      	b.n	800072c <main+0x238>
				case MED_KEY_PRESSED:
					dryer.state = INIT;
 80005d0:	4b64      	ldr	r3, [pc, #400]	; (8000764 <main+0x270>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
					break;
 80005d6:	e0a9      	b.n	800072c <main+0x238>
				case HIGH_KEY_PRESSED:
					switch (dryer.cycle) {
 80005d8:	4b62      	ldr	r3, [pc, #392]	; (8000764 <main+0x270>)
 80005da:	799b      	ldrb	r3, [r3, #6]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <main+0xf2>
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d037      	beq.n	8000654 <main+0x160>
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
 80005e4:	e0a2      	b.n	800072c <main+0x238>
						if ((dryer.heatTime < 1800U)
 80005e6:	4b5f      	ldr	r3, [pc, #380]	; (8000764 <main+0x270>)
 80005e8:	885b      	ldrh	r3, [r3, #2]
 80005ea:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80005ee:	d20a      	bcs.n	8000606 <main+0x112>
								&& (dryer.mode == LOW_LEVEL))
 80005f0:	4b5c      	ldr	r3, [pc, #368]	; (8000764 <main+0x270>)
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d106      	bne.n	8000606 <main+0x112>
							dryer.heatTime += 60U;
 80005f8:	4b5a      	ldr	r3, [pc, #360]	; (8000764 <main+0x270>)
 80005fa:	885b      	ldrh	r3, [r3, #2]
 80005fc:	333c      	adds	r3, #60	; 0x3c
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b58      	ldr	r3, [pc, #352]	; (8000764 <main+0x270>)
 8000602:	805a      	strh	r2, [r3, #2]
 8000604:	e01f      	b.n	8000646 <main+0x152>
						else if ((dryer.heatTime < 2400U)
 8000606:	4b57      	ldr	r3, [pc, #348]	; (8000764 <main+0x270>)
 8000608:	885b      	ldrh	r3, [r3, #2]
 800060a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800060e:	d20a      	bcs.n	8000626 <main+0x132>
								&& (dryer.mode == MED_LEVEL))
 8000610:	4b54      	ldr	r3, [pc, #336]	; (8000764 <main+0x270>)
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d106      	bne.n	8000626 <main+0x132>
							dryer.heatTime += 60U;
 8000618:	4b52      	ldr	r3, [pc, #328]	; (8000764 <main+0x270>)
 800061a:	885b      	ldrh	r3, [r3, #2]
 800061c:	333c      	adds	r3, #60	; 0x3c
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b50      	ldr	r3, [pc, #320]	; (8000764 <main+0x270>)
 8000622:	805a      	strh	r2, [r3, #2]
 8000624:	e00f      	b.n	8000646 <main+0x152>
						else if ((dryer.heatTime < 3000U)
 8000626:	4b4f      	ldr	r3, [pc, #316]	; (8000764 <main+0x270>)
 8000628:	885b      	ldrh	r3, [r3, #2]
 800062a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800062e:	4293      	cmp	r3, r2
 8000630:	d809      	bhi.n	8000646 <main+0x152>
								&& (dryer.mode == HIGH_LEVEL))
 8000632:	4b4c      	ldr	r3, [pc, #304]	; (8000764 <main+0x270>)
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d105      	bne.n	8000646 <main+0x152>
							dryer.heatTime += 60U;
 800063a:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <main+0x270>)
 800063c:	885b      	ldrh	r3, [r3, #2]
 800063e:	333c      	adds	r3, #60	; 0x3c
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b48      	ldr	r3, [pc, #288]	; (8000764 <main+0x270>)
 8000644:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 8000646:	4b47      	ldr	r3, [pc, #284]	; (8000764 <main+0x270>)
 8000648:	885b      	ldrh	r3, [r3, #2]
 800064a:	4619      	mov	r1, r3
 800064c:	4849      	ldr	r0, [pc, #292]	; (8000774 <main+0x280>)
 800064e:	f001 fce5 	bl	800201c <iprintf>
						break;
 8000652:	e011      	b.n	8000678 <main+0x184>
						if (dryer.coolTime < 900U)
 8000654:	4b43      	ldr	r3, [pc, #268]	; (8000764 <main+0x270>)
 8000656:	889b      	ldrh	r3, [r3, #4]
 8000658:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800065c:	d205      	bcs.n	800066a <main+0x176>
							dryer.coolTime += 60U;
 800065e:	4b41      	ldr	r3, [pc, #260]	; (8000764 <main+0x270>)
 8000660:	889b      	ldrh	r3, [r3, #4]
 8000662:	333c      	adds	r3, #60	; 0x3c
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b3f      	ldr	r3, [pc, #252]	; (8000764 <main+0x270>)
 8000668:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 800066a:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <main+0x270>)
 800066c:	889b      	ldrh	r3, [r3, #4]
 800066e:	4619      	mov	r1, r3
 8000670:	4841      	ldr	r0, [pc, #260]	; (8000778 <main+0x284>)
 8000672:	f001 fcd3 	bl	800201c <iprintf>
						break;
 8000676:	bf00      	nop
					break;
 8000678:	e058      	b.n	800072c <main+0x238>
				case FN_KEY_PRESSED:
					if (dryer.heatTime > 0) {
 800067a:	4b3a      	ldr	r3, [pc, #232]	; (8000764 <main+0x270>)
 800067c:	885b      	ldrh	r3, [r3, #2]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d006      	beq.n	8000690 <main+0x19c>
						dryer.heatTime--;
 8000682:	4b38      	ldr	r3, [pc, #224]	; (8000764 <main+0x270>)
 8000684:	885b      	ldrh	r3, [r3, #2]
 8000686:	3b01      	subs	r3, #1
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <main+0x270>)
 800068c:	805a      	strh	r2, [r3, #2]
 800068e:	e005      	b.n	800069c <main+0x1a8>
					} else {
						dryer.coolTime--;
 8000690:	4b34      	ldr	r3, [pc, #208]	; (8000764 <main+0x270>)
 8000692:	889b      	ldrh	r3, [r3, #4]
 8000694:	3b01      	subs	r3, #1
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b32      	ldr	r3, [pc, #200]	; (8000764 <main+0x270>)
 800069a:	809a      	strh	r2, [r3, #4]
					}

					if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 800069c:	4b31      	ldr	r3, [pc, #196]	; (8000764 <main+0x270>)
 800069e:	885b      	ldrh	r3, [r3, #2]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d106      	bne.n	80006b2 <main+0x1be>
 80006a4:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <main+0x270>)
 80006a6:	799b      	ldrb	r3, [r3, #6]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d102      	bne.n	80006b2 <main+0x1be>
						dryer.cycle = COOL_CYCLE;
 80006ac:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <main+0x270>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	719a      	strb	r2, [r3, #6]
					}
					if((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE))
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <main+0x270>)
 80006b4:	889b      	ldrh	r3, [r3, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d106      	bne.n	80006c8 <main+0x1d4>
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <main+0x270>)
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d102      	bne.n	80006c8 <main+0x1d4>
					{
						dryer.state = STOP;
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <main+0x270>)
 80006c4:	2202      	movs	r2, #2
 80006c6:	701a      	strb	r2, [r3, #0]
					}

					if (pasue_cunt > 0) {
 80006c8:	4b2c      	ldr	r3, [pc, #176]	; (800077c <main+0x288>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d006      	beq.n	80006de <main+0x1ea>
						pasue_cunt--;
 80006d0:	4b2a      	ldr	r3, [pc, #168]	; (800077c <main+0x288>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <main+0x288>)
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	e022      	b.n	8000724 <main+0x230>
					} else if (rot_left_cunt > 0) {
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <main+0x28c>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00d      	beq.n	8000702 <main+0x20e>
						rot_left_cunt--;
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <main+0x28c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <main+0x28c>)
 80006f0:	701a      	strb	r2, [r3, #0]
						if (rot_left_cunt == 0) {
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <main+0x28c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d114      	bne.n	8000724 <main+0x230>
							pasue_cunt = 3U;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <main+0x288>)
 80006fc:	2203      	movs	r2, #3
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	e010      	b.n	8000724 <main+0x230>
						}
					} else if (rot_right_cunt > 0) {
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <main+0x290>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00c      	beq.n	8000724 <main+0x230>
						rot_right_cunt--;
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <main+0x290>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	3b01      	subs	r3, #1
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <main+0x290>)
 8000714:	701a      	strb	r2, [r3, #0]
						if (rot_right_cunt == 0) {
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <main+0x290>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d102      	bne.n	8000724 <main+0x230>
							pasue_cunt = 3U;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <main+0x288>)
 8000720:	2203      	movs	r2, #3
 8000722:	701a      	strb	r2, [r3, #0]
						}
					}
					otp = 1;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <main+0x294>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
//					dryer.heatTime = 0U;
//					dryer.cycle = COOL_CYCLE;
//					printf("HeatTime = %d\r\n", dryer.heatTime);
//					printf("CoolTime = %d\r\n", dryer.coolTime);
					break;
 800072a:	bf00      	nop
				}
				scaned_key = NO_KEY_PRESSED;
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <main+0x27c>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e077      	b.n	8000824 <main+0x330>
			} else if (dryer.state == INIT) {
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <main+0x270>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d173      	bne.n	8000824 <main+0x330>
				scaned_key = scan_keypad();
 800073c:	f7ff fdae 	bl	800029c <scan_keypad>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <main+0x27c>)
 8000746:	701a      	strb	r2, [r3, #0]
				switch (scaned_key) {
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <main+0x27c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d04d      	beq.n	80007ec <main+0x2f8>
 8000750:	2b03      	cmp	r3, #3
 8000752:	dc63      	bgt.n	800081c <main+0x328>
 8000754:	2b01      	cmp	r3, #1
 8000756:	d019      	beq.n	800078c <main+0x298>
 8000758:	2b02      	cmp	r3, #2
 800075a:	d02f      	beq.n	80007bc <main+0x2c8>
					dryer.cycle = HEAT_CYCLE;
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
							sizeof("HIGH_LEVEL\r\n"), 10);
					break;
				default:
					break;
 800075c:	e05e      	b.n	800081c <main+0x328>
 800075e:	bf00      	nop
 8000760:	08003094 	.word	0x08003094
 8000764:	200000b0 	.word	0x200000b0
 8000768:	200000b8 	.word	0x200000b8
 800076c:	40011000 	.word	0x40011000
 8000770:	200000b9 	.word	0x200000b9
 8000774:	0800309c 	.word	0x0800309c
 8000778:	080030ac 	.word	0x080030ac
 800077c:	200000bb 	.word	0x200000bb
 8000780:	20000001 	.word	0x20000001
 8000784:	200000ba 	.word	0x200000ba
 8000788:	20000000 	.word	0x20000000
					dryer.mode = LOW_LEVEL;
 800078c:	4b79      	ldr	r3, [pc, #484]	; (8000974 <main+0x480>)
 800078e:	2201      	movs	r2, #1
 8000790:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 8000792:	4b78      	ldr	r3, [pc, #480]	; (8000974 <main+0x480>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 8000798:	4b76      	ldr	r3, [pc, #472]	; (8000974 <main+0x480>)
 800079a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800079e:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80007a0:	4b74      	ldr	r3, [pc, #464]	; (8000974 <main+0x480>)
 80007a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007a6:	809a      	strh	r2, [r3, #4]
					dryer.cycle = HEAT_CYCLE;
 80007a8:	4b72      	ldr	r3, [pc, #456]	; (8000974 <main+0x480>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	719a      	strb	r2, [r3, #6]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 80007ae:	230a      	movs	r3, #10
 80007b0:	220c      	movs	r2, #12
 80007b2:	4971      	ldr	r1, [pc, #452]	; (8000978 <main+0x484>)
 80007b4:	4871      	ldr	r0, [pc, #452]	; (800097c <main+0x488>)
 80007b6:	f001 fa94 	bl	8001ce2 <HAL_UART_Transmit>
					break;
 80007ba:	e030      	b.n	800081e <main+0x32a>
					dryer.mode = MED_LEVEL;
 80007bc:	4b6d      	ldr	r3, [pc, #436]	; (8000974 <main+0x480>)
 80007be:	2202      	movs	r2, #2
 80007c0:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80007c2:	4b6c      	ldr	r3, [pc, #432]	; (8000974 <main+0x480>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 80007c8:	4b6a      	ldr	r3, [pc, #424]	; (8000974 <main+0x480>)
 80007ca:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80007ce:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80007d0:	4b68      	ldr	r3, [pc, #416]	; (8000974 <main+0x480>)
 80007d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007d6:	809a      	strh	r2, [r3, #4]
					dryer.cycle = HEAT_CYCLE;
 80007d8:	4b66      	ldr	r3, [pc, #408]	; (8000974 <main+0x480>)
 80007da:	2200      	movs	r2, #0
 80007dc:	719a      	strb	r2, [r3, #6]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 80007de:	230a      	movs	r3, #10
 80007e0:	220c      	movs	r2, #12
 80007e2:	4967      	ldr	r1, [pc, #412]	; (8000980 <main+0x48c>)
 80007e4:	4865      	ldr	r0, [pc, #404]	; (800097c <main+0x488>)
 80007e6:	f001 fa7c 	bl	8001ce2 <HAL_UART_Transmit>
					break;
 80007ea:	e018      	b.n	800081e <main+0x32a>
					dryer.mode = HIGH_LEVEL;
 80007ec:	4b61      	ldr	r3, [pc, #388]	; (8000974 <main+0x480>)
 80007ee:	2203      	movs	r2, #3
 80007f0:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80007f2:	4b60      	ldr	r3, [pc, #384]	; (8000974 <main+0x480>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 80007f8:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <main+0x480>)
 80007fa:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80007fe:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8000800:	4b5c      	ldr	r3, [pc, #368]	; (8000974 <main+0x480>)
 8000802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000806:	809a      	strh	r2, [r3, #4]
					dryer.cycle = HEAT_CYCLE;
 8000808:	4b5a      	ldr	r3, [pc, #360]	; (8000974 <main+0x480>)
 800080a:	2200      	movs	r2, #0
 800080c:	719a      	strb	r2, [r3, #6]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 800080e:	230a      	movs	r3, #10
 8000810:	220d      	movs	r2, #13
 8000812:	495c      	ldr	r1, [pc, #368]	; (8000984 <main+0x490>)
 8000814:	4859      	ldr	r0, [pc, #356]	; (800097c <main+0x488>)
 8000816:	f001 fa64 	bl	8001ce2 <HAL_UART_Transmit>
					break;
 800081a:	e000      	b.n	800081e <main+0x32a>
					break;
 800081c:	bf00      	nop
				}
				scaned_key = NO_KEY_PRESSED;
 800081e:	4b5a      	ldr	r3, [pc, #360]	; (8000988 <main+0x494>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
			} //else if ends
		} //else ends

		if (door_open_flag) {
 8000824:	4b59      	ldr	r3, [pc, #356]	; (800098c <main+0x498>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	f47f ae7a 	bne.w	8000522 <main+0x2e>

		} else {
			if (dryer.mode != NO_MODE) {
 800082e:	4b51      	ldr	r3, [pc, #324]	; (8000974 <main+0x480>)
 8000830:	785b      	ldrb	r3, [r3, #1]
 8000832:	2b00      	cmp	r3, #0
 8000834:	f43f ae75 	beq.w	8000522 <main+0x2e>
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083e:	4854      	ldr	r0, [pc, #336]	; (8000990 <main+0x49c>)
 8000840:	f000 fdb7 	bl	80013b2 <HAL_GPIO_WritePin>
				if (otp) {
 8000844:	4b53      	ldr	r3, [pc, #332]	; (8000994 <main+0x4a0>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d020      	beq.n	800088e <main+0x39a>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 800084c:	4b49      	ldr	r3, [pc, #292]	; (8000974 <main+0x480>)
 800084e:	885b      	ldrh	r3, [r3, #2]
 8000850:	4619      	mov	r1, r3
 8000852:	4851      	ldr	r0, [pc, #324]	; (8000998 <main+0x4a4>)
 8000854:	f001 fbe2 	bl	800201c <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8000858:	4b46      	ldr	r3, [pc, #280]	; (8000974 <main+0x480>)
 800085a:	889b      	ldrh	r3, [r3, #4]
 800085c:	4619      	mov	r1, r3
 800085e:	484f      	ldr	r0, [pc, #316]	; (800099c <main+0x4a8>)
 8000860:	f001 fbdc 	bl	800201c <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 8000864:	4b4e      	ldr	r3, [pc, #312]	; (80009a0 <main+0x4ac>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	484e      	ldr	r0, [pc, #312]	; (80009a4 <main+0x4b0>)
 800086c:	f001 fbd6 	bl	800201c <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 8000870:	4b4d      	ldr	r3, [pc, #308]	; (80009a8 <main+0x4b4>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	484d      	ldr	r0, [pc, #308]	; (80009ac <main+0x4b8>)
 8000878:	f001 fbd0 	bl	800201c <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 800087c:	4b4c      	ldr	r3, [pc, #304]	; (80009b0 <main+0x4bc>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	484c      	ldr	r0, [pc, #304]	; (80009b4 <main+0x4c0>)
 8000884:	f001 fbca 	bl	800201c <iprintf>
					otp = 0;
 8000888:	4b42      	ldr	r3, [pc, #264]	; (8000994 <main+0x4a0>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
				}

				//start Flip Flop
				if (pasue_cunt > 0) {
 800088e:	4b46      	ldr	r3, [pc, #280]	; (80009a8 <main+0x4b4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d034      	beq.n	8000900 <main+0x40c>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4846      	ldr	r0, [pc, #280]	; (80009b8 <main+0x4c4>)
 800089e:	f000 fd88 	bl	80013b2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a8:	4843      	ldr	r0, [pc, #268]	; (80009b8 <main+0x4c4>)
 80008aa:	f000 fd82 	bl	80013b2 <HAL_GPIO_WritePin>
					if (pasue_cunt <= 1) {
 80008ae:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <main+0x4b4>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d84b      	bhi.n	800094e <main+0x45a>
						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 80008b6:	2104      	movs	r1, #4
 80008b8:	4835      	ldr	r0, [pc, #212]	; (8000990 <main+0x49c>)
 80008ba:	f000 fd63 	bl	8001384 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <main+0x4c8>)
 80008c4:	701a      	strb	r2, [r3, #0]
						SEL_ROT_SW);
						//printf("Coming %d\r\n",rot_sw_state);
						if (rot_sw_state) {
 80008c6:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <main+0x4c8>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d006      	beq.n	80008dc <main+0x3e8>
							rot_left_cunt = 30U;
 80008ce:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <main+0x4ac>)
 80008d0:	221e      	movs	r2, #30
 80008d2:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <main+0x4bc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e038      	b.n	800094e <main+0x45a>
						} else {
							if (flipflop) {
 80008dc:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <main+0x4cc>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d006      	beq.n	80008f2 <main+0x3fe>
								rot_left_cunt = 0U;
 80008e4:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <main+0x4ac>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <main+0x4bc>)
 80008ec:	221e      	movs	r2, #30
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e02d      	b.n	800094e <main+0x45a>
							} else {
								rot_left_cunt = 30U;
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <main+0x4ac>)
 80008f4:	221e      	movs	r2, #30
 80008f6:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 80008f8:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <main+0x4bc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	e026      	b.n	800094e <main+0x45a>
							}
						}
					}
				} else if (rot_left_cunt > 0) {
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <main+0x4ac>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00f      	beq.n	8000928 <main+0x434>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090e:	482a      	ldr	r0, [pc, #168]	; (80009b8 <main+0x4c4>)
 8000910:	f000 fd4f 	bl	80013b2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091a:	4827      	ldr	r0, [pc, #156]	; (80009b8 <main+0x4c4>)
 800091c:	f000 fd49 	bl	80013b2 <HAL_GPIO_WritePin>
					flipflop = 1;
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <main+0x4cc>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e012      	b.n	800094e <main+0x45a>
				} else if (rot_right_cunt > 0) {
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <main+0x4bc>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00e      	beq.n	800094e <main+0x45a>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000936:	4820      	ldr	r0, [pc, #128]	; (80009b8 <main+0x4c4>)
 8000938:	f000 fd3b 	bl	80013b2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000942:	481d      	ldr	r0, [pc, #116]	; (80009b8 <main+0x4c4>)
 8000944:	f000 fd35 	bl	80013b2 <HAL_GPIO_WritePin>
					flipflop = 0;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <main+0x4cc>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
				}
				if (dryer.cycle == HEAT_CYCLE) {
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <main+0x480>)
 8000950:	799b      	ldrb	r3, [r3, #6]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d106      	bne.n	8000964 <main+0x470>
					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095c:	4816      	ldr	r0, [pc, #88]	; (80009b8 <main+0x4c4>)
 800095e:	f000 fd28 	bl	80013b2 <HAL_GPIO_WritePin>
 8000962:	e5de      	b.n	8000522 <main+0x2e>
				} else {
					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096a:	4813      	ldr	r0, [pc, #76]	; (80009b8 <main+0x4c4>)
 800096c:	f000 fd21 	bl	80013b2 <HAL_GPIO_WritePin>
		if (door_open_flag) {
 8000970:	e5d7      	b.n	8000522 <main+0x2e>
 8000972:	bf00      	nop
 8000974:	200000b0 	.word	0x200000b0
 8000978:	080030bc 	.word	0x080030bc
 800097c:	200000c4 	.word	0x200000c4
 8000980:	080030c8 	.word	0x080030c8
 8000984:	080030d4 	.word	0x080030d4
 8000988:	200000b9 	.word	0x200000b9
 800098c:	200000b8 	.word	0x200000b8
 8000990:	40010800 	.word	0x40010800
 8000994:	20000000 	.word	0x20000000
 8000998:	080030e4 	.word	0x080030e4
 800099c:	080030ac 	.word	0x080030ac
 80009a0:	20000001 	.word	0x20000001
 80009a4:	080030f8 	.word	0x080030f8
 80009a8:	200000bb 	.word	0x200000bb
 80009ac:	08003108 	.word	0x08003108
 80009b0:	200000ba 	.word	0x200000ba
 80009b4:	08003118 	.word	0x08003118
 80009b8:	40010c00 	.word	0x40010c00
 80009bc:	200000bc 	.word	0x200000bc
 80009c0:	200000bd 	.word	0x200000bd

080009c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b090      	sub	sp, #64	; 0x40
 80009c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	2228      	movs	r2, #40	; 0x28
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fb1a 	bl	800200c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ea:	2301      	movs	r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ee:	2310      	movs	r3, #16
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fd0a 	bl	8001414 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x46>
		Error_Handler();
 8000a06:	f000 f839 	bl	8000a7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 ff78 	bl	8001918 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x6e>
		Error_Handler();
 8000a2e:	f000 f825 	bl	8000a7c <Error_Handler>
	}

}
 8000a32:	bf00      	nop
 8000a34:	3740      	adds	r7, #64	; 0x40
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d10f      	bne.n	8000a6c <HAL_GPIO_EXTI_Callback+0x30>
		uint8_t temp = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a50:	f000 fc98 	bl	8001384 <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	73fb      	strb	r3, [r7, #15]

		if (temp == HIGH)
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d103      	bne.n	8000a66 <HAL_GPIO_EXTI_Callback+0x2a>
			door_open_flag = 1;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
		else
			door_open_flag = 0;
	}
}
 8000a64:	e002      	b.n	8000a6c <HAL_GPIO_EXTI_Callback+0x30>
			door_open_flag = 0;
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40010800 	.word	0x40010800
 8000a78:	200000b8 	.word	0x200000b8

08000a7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_MspInit+0x40>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <HAL_MspInit+0x40>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_MspInit+0x40>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_MspInit+0x40>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_MspInit+0x40>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	61d3      	str	r3, [r2, #28]
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_MspInit+0x40>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b12:	f000 f989 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e00a      	b.n	8000b42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b2c:	f3af 8000 	nop.w
 8000b30:	4601      	mov	r1, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	60ba      	str	r2, [r7, #8]
 8000b38:	b2ca      	uxtb	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbf0      	blt.n	8000b2c <_read+0x12>
  }

  return len;
 8000b4a:	687b      	ldr	r3, [r7, #4]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	e009      	b.n	8000b7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	60ba      	str	r2, [r7, #8]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fcae 	bl	80004d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3301      	adds	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	dbf1      	blt.n	8000b66 <_write+0x12>
  }
  return len;
 8000b82:	687b      	ldr	r3, [r7, #4]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_close>:

int _close(int file)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <_isatty>:

int _isatty(int file)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc8:	2301      	movs	r3, #1
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f001 f9cc 	bl	8001fb8 <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20005000 	.word	0x20005000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	200000c0 	.word	0x200000c0
 8000c54:	20000120 	.word	0x20000120

08000c58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_USART1_UART_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c9c:	f000 ffd4 	bl	8001c48 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f7ff fee9 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000c4 	.word	0x200000c4
 8000cb4:	40013800 	.word	0x40013800

08000cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <HAL_UART_MspInit+0x8c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d131      	bne.n	8000d3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <HAL_UART_MspInit+0x94>)
 8000d1e:	f000 f9ad 	bl	800107c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_UART_MspInit+0x94>)
 8000d38:	f000 f9a0 	bl	800107c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40013800 	.word	0x40013800
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800

08000d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	; (8000d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	; (8000d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d76:	f7ff ff6f 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f001 f923 	bl	8001fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff fbb9 	bl	80004f4 <main>
  bx lr
 8000d82:	4770      	bx	lr
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d8c:	080031f4 	.word	0x080031f4
  ldr r2, =_sbss
 8000d90:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d94:	2000011c 	.word	0x2000011c

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x28>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x28>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f923 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fe66 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f93b 	bl	8001062 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f903 	bl	800100e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000004 	.word	0x20000004
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	20000008 	.word	0x20000008

08000e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_IncTick+0x1c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_IncTick+0x20>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <HAL_IncTick+0x20>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	20000108 	.word	0x20000108

08000e4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <HAL_GetTick+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000108 	.word	0x20000108

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4906      	ldr	r1, [pc, #24]	; (8000ef8 <__NVIC_EnableIRQ+0x34>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f7ff ff90 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff2d 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff42 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff90 	bl	8000f50 <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5f 	bl	8000efc <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff35 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffa2 	bl	8000fb4 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b08b      	sub	sp, #44	; 0x2c
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	e169      	b.n	8001364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001090:	2201      	movs	r2, #1
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8158 	bne.w	800135e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a9a      	ldr	r2, [pc, #616]	; (800131c <HAL_GPIO_Init+0x2a0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d05e      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010b8:	4a98      	ldr	r2, [pc, #608]	; (800131c <HAL_GPIO_Init+0x2a0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d875      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010be:	4a98      	ldr	r2, [pc, #608]	; (8001320 <HAL_GPIO_Init+0x2a4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d058      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010c4:	4a96      	ldr	r2, [pc, #600]	; (8001320 <HAL_GPIO_Init+0x2a4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d86f      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010ca:	4a96      	ldr	r2, [pc, #600]	; (8001324 <HAL_GPIO_Init+0x2a8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d052      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010d0:	4a94      	ldr	r2, [pc, #592]	; (8001324 <HAL_GPIO_Init+0x2a8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d869      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010d6:	4a94      	ldr	r2, [pc, #592]	; (8001328 <HAL_GPIO_Init+0x2ac>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d04c      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010dc:	4a92      	ldr	r2, [pc, #584]	; (8001328 <HAL_GPIO_Init+0x2ac>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d863      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010e2:	4a92      	ldr	r2, [pc, #584]	; (800132c <HAL_GPIO_Init+0x2b0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d046      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010e8:	4a90      	ldr	r2, [pc, #576]	; (800132c <HAL_GPIO_Init+0x2b0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d85d      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d82a      	bhi.n	8001148 <HAL_GPIO_Init+0xcc>
 80010f2:	2b12      	cmp	r3, #18
 80010f4:	d859      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010f6:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <HAL_GPIO_Init+0x80>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	08001177 	.word	0x08001177
 8001100:	08001151 	.word	0x08001151
 8001104:	08001163 	.word	0x08001163
 8001108:	080011a5 	.word	0x080011a5
 800110c:	080011ab 	.word	0x080011ab
 8001110:	080011ab 	.word	0x080011ab
 8001114:	080011ab 	.word	0x080011ab
 8001118:	080011ab 	.word	0x080011ab
 800111c:	080011ab 	.word	0x080011ab
 8001120:	080011ab 	.word	0x080011ab
 8001124:	080011ab 	.word	0x080011ab
 8001128:	080011ab 	.word	0x080011ab
 800112c:	080011ab 	.word	0x080011ab
 8001130:	080011ab 	.word	0x080011ab
 8001134:	080011ab 	.word	0x080011ab
 8001138:	080011ab 	.word	0x080011ab
 800113c:	080011ab 	.word	0x080011ab
 8001140:	08001159 	.word	0x08001159
 8001144:	0800116d 	.word	0x0800116d
 8001148:	4a79      	ldr	r2, [pc, #484]	; (8001330 <HAL_GPIO_Init+0x2b4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114e:	e02c      	b.n	80011aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e029      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	3304      	adds	r3, #4
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e024      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	3308      	adds	r3, #8
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e01f      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	330c      	adds	r3, #12
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e01a      	b.n	80011ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117e:	2304      	movs	r3, #4
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e013      	b.n	80011ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d105      	bne.n	8001198 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	611a      	str	r2, [r3, #16]
          break;
 8001196:	e009      	b.n	80011ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001198:	2308      	movs	r3, #8
 800119a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	615a      	str	r2, [r3, #20]
          break;
 80011a2:	e003      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
          break;
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x130>
          break;
 80011aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2bff      	cmp	r3, #255	; 0xff
 80011b0:	d801      	bhi.n	80011b6 <HAL_GPIO_Init+0x13a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	e001      	b.n	80011ba <HAL_GPIO_Init+0x13e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3304      	adds	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2bff      	cmp	r3, #255	; 0xff
 80011c0:	d802      	bhi.n	80011c8 <HAL_GPIO_Init+0x14c>
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	e002      	b.n	80011ce <HAL_GPIO_Init+0x152>
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	3b08      	subs	r3, #8
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	210f      	movs	r1, #15
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	6a39      	ldr	r1, [r7, #32]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	431a      	orrs	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80b1 	beq.w	800135e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011fc:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001214:	4a48      	ldr	r2, [pc, #288]	; (8001338 <HAL_GPIO_Init+0x2bc>)
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a40      	ldr	r2, [pc, #256]	; (800133c <HAL_GPIO_Init+0x2c0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d013      	beq.n	8001268 <HAL_GPIO_Init+0x1ec>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3f      	ldr	r2, [pc, #252]	; (8001340 <HAL_GPIO_Init+0x2c4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00d      	beq.n	8001264 <HAL_GPIO_Init+0x1e8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3e      	ldr	r2, [pc, #248]	; (8001344 <HAL_GPIO_Init+0x2c8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d007      	beq.n	8001260 <HAL_GPIO_Init+0x1e4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a3d      	ldr	r2, [pc, #244]	; (8001348 <HAL_GPIO_Init+0x2cc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d101      	bne.n	800125c <HAL_GPIO_Init+0x1e0>
 8001258:	2303      	movs	r3, #3
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 800125c:	2304      	movs	r3, #4
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001260:	2302      	movs	r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001268:	2300      	movs	r3, #0
 800126a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800127a:	492f      	ldr	r1, [pc, #188]	; (8001338 <HAL_GPIO_Init+0x2bc>)
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_GPIO_Init+0x2d0>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	492c      	ldr	r1, [pc, #176]	; (800134c <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4928      	ldr	r1, [pc, #160]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4922      	ldr	r1, [pc, #136]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	491e      	ldr	r1, [pc, #120]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	4918      	ldr	r1, [pc, #96]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	608b      	str	r3, [r1, #8]
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4914      	ldr	r1, [pc, #80]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d021      	beq.n	8001350 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_GPIO_Init+0x2d0>)
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	490e      	ldr	r1, [pc, #56]	; (800134c <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	60cb      	str	r3, [r1, #12]
 8001318:	e021      	b.n	800135e <HAL_GPIO_Init+0x2e2>
 800131a:	bf00      	nop
 800131c:	10320000 	.word	0x10320000
 8001320:	10310000 	.word	0x10310000
 8001324:	10220000 	.word	0x10220000
 8001328:	10210000 	.word	0x10210000
 800132c:	10120000 	.word	0x10120000
 8001330:	10110000 	.word	0x10110000
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40011000 	.word	0x40011000
 8001348:	40011400 	.word	0x40011400
 800134c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	43db      	mvns	r3, r3
 8001358:	4909      	ldr	r1, [pc, #36]	; (8001380 <HAL_GPIO_Init+0x304>)
 800135a:	4013      	ands	r3, r2
 800135c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	3301      	adds	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	f47f ae8e 	bne.w	8001090 <HAL_GPIO_Init+0x14>
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	372c      	adds	r7, #44	; 0x2c
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40010400 	.word	0x40010400

08001384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e001      	b.n	80013a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	807b      	strh	r3, [r7, #2]
 80013be:	4613      	mov	r3, r2
 80013c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c2:	787b      	ldrb	r3, [r7, #1]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ce:	e003      	b.n	80013d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	041a      	lsls	r2, r3, #16
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	611a      	str	r2, [r3, #16]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fb1a 	bl	8000a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e272      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8087 	beq.w	8001542 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001434:	4b92      	ldr	r3, [pc, #584]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b04      	cmp	r3, #4
 800143e:	d00c      	beq.n	800145a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001440:	4b8f      	ldr	r3, [pc, #572]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d112      	bne.n	8001472 <HAL_RCC_OscConfig+0x5e>
 800144c:	4b8c      	ldr	r3, [pc, #560]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d10b      	bne.n	8001472 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145a:	4b89      	ldr	r3, [pc, #548]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d06c      	beq.n	8001540 <HAL_RCC_OscConfig+0x12c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d168      	bne.n	8001540 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e24c      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x76>
 800147c:	4b80      	ldr	r3, [pc, #512]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a7f      	ldr	r2, [pc, #508]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e02e      	b.n	80014e8 <HAL_RCC_OscConfig+0xd4>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x98>
 8001492:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7a      	ldr	r2, [pc, #488]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b78      	ldr	r3, [pc, #480]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a77      	ldr	r2, [pc, #476]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e01d      	b.n	80014e8 <HAL_RCC_OscConfig+0xd4>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0xbc>
 80014b6:	4b72      	ldr	r3, [pc, #456]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a71      	ldr	r2, [pc, #452]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0xd4>
 80014d0:	4b6b      	ldr	r3, [pc, #428]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a6a      	ldr	r2, [pc, #424]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b68      	ldr	r3, [pc, #416]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a67      	ldr	r2, [pc, #412]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fcac 	bl	8000e4c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fca8 	bl	8000e4c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e200      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b5d      	ldr	r3, [pc, #372]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0xe4>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fc98 	bl	8000e4c <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fc94 	bl	8000e4c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1ec      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	4b53      	ldr	r3, [pc, #332]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x10c>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d063      	beq.n	8001616 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800154e:	4b4c      	ldr	r3, [pc, #304]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800155a:	4b49      	ldr	r3, [pc, #292]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b08      	cmp	r3, #8
 8001564:	d11c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x18c>
 8001566:	4b46      	ldr	r3, [pc, #280]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d116      	bne.n	80015a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	4b43      	ldr	r3, [pc, #268]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x176>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e1c0      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4939      	ldr	r1, [pc, #228]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	e03a      	b.n	8001616 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_RCC_OscConfig+0x270>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fc4d 	bl	8000e4c <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc49 	bl	8000e4c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1a1      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4927      	ldr	r1, [pc, #156]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
 80015e8:	e015      	b.n	8001616 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_RCC_OscConfig+0x270>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc2c 	bl	8000e4c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc28 	bl	8000e4c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e180      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d03a      	beq.n	8001698 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d019      	beq.n	800165e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_RCC_OscConfig+0x274>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fc0c 	bl	8000e4c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fc08 	bl	8000e4c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e160      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_RCC_OscConfig+0x26c>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f000 fad8 	bl	8001c0c <RCC_Delay>
 800165c:	e01c      	b.n	8001698 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_RCC_OscConfig+0x274>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001664:	f7ff fbf2 	bl	8000e4c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166a:	e00f      	b.n	800168c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166c:	f7ff fbee 	bl	8000e4c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d908      	bls.n	800168c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e146      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	42420000 	.word	0x42420000
 8001688:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	4b92      	ldr	r3, [pc, #584]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1e9      	bne.n	800166c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80a6 	beq.w	80017f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b8b      	ldr	r3, [pc, #556]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10d      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b88      	ldr	r3, [pc, #544]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a87      	ldr	r2, [pc, #540]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b85      	ldr	r3, [pc, #532]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b82      	ldr	r3, [pc, #520]	; (80018dc <HAL_RCC_OscConfig+0x4c8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d118      	bne.n	8001710 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016de:	4b7f      	ldr	r3, [pc, #508]	; (80018dc <HAL_RCC_OscConfig+0x4c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a7e      	ldr	r2, [pc, #504]	; (80018dc <HAL_RCC_OscConfig+0x4c8>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fbaf 	bl	8000e4c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fbab 	bl	8000e4c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b64      	cmp	r3, #100	; 0x64
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e103      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	4b75      	ldr	r3, [pc, #468]	; (80018dc <HAL_RCC_OscConfig+0x4c8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x312>
 8001718:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	4a6e      	ldr	r2, [pc, #440]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6213      	str	r3, [r2, #32]
 8001724:	e02d      	b.n	8001782 <HAL_RCC_OscConfig+0x36e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x334>
 800172e:	4b6a      	ldr	r3, [pc, #424]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a69      	ldr	r2, [pc, #420]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6213      	str	r3, [r2, #32]
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4a66      	ldr	r2, [pc, #408]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	6213      	str	r3, [r2, #32]
 8001746:	e01c      	b.n	8001782 <HAL_RCC_OscConfig+0x36e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b05      	cmp	r3, #5
 800174e:	d10c      	bne.n	800176a <HAL_RCC_OscConfig+0x356>
 8001750:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a60      	ldr	r2, [pc, #384]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6213      	str	r3, [r2, #32]
 800175c:	4b5e      	ldr	r3, [pc, #376]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4a5d      	ldr	r2, [pc, #372]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6213      	str	r3, [r2, #32]
 8001768:	e00b      	b.n	8001782 <HAL_RCC_OscConfig+0x36e>
 800176a:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a5a      	ldr	r2, [pc, #360]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a57      	ldr	r2, [pc, #348]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d015      	beq.n	80017b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fb5f 	bl	8000e4c <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fb5b 	bl	8000e4c <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0b1      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	4b4b      	ldr	r3, [pc, #300]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ee      	beq.n	8001792 <HAL_RCC_OscConfig+0x37e>
 80017b4:	e014      	b.n	80017e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fb49 	bl	8000e4c <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff fb45 	bl	8000e4c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e09b      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d4:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ee      	bne.n	80017be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d105      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e6:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a3b      	ldr	r2, [pc, #236]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8087 	beq.w	800190a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b08      	cmp	r3, #8
 8001806:	d061      	beq.n	80018cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d146      	bne.n	800189e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_RCC_OscConfig+0x4cc>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff fb19 	bl	8000e4c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff fb15 	bl	8000e4c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e06d      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f0      	bne.n	800181e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001844:	d108      	bne.n	8001858 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	4921      	ldr	r1, [pc, #132]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a19      	ldr	r1, [r3, #32]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	430b      	orrs	r3, r1
 800186a:	491b      	ldr	r1, [pc, #108]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x4cc>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fae9 	bl	8000e4c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff fae5 	bl	8000e4c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e03d      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x46a>
 800189c:	e035      	b.n	800190a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_RCC_OscConfig+0x4cc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fad2 	bl	8000e4c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff face 	bl	8000e4c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e026      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x498>
 80018ca:	e01e      	b.n	800190a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d107      	bne.n	80018e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e019      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40007000 	.word	0x40007000
 80018e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_OscConfig+0x500>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0d0      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d910      	bls.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0207 	bic.w	r2, r3, #7
 8001942:	4965      	ldr	r1, [pc, #404]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800197e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001996:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d040      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d115      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b41      	ldr	r3, [pc, #260]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e073      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06b      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b39      	ldr	r3, [pc, #228]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff fa20 	bl	8000e4c <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff fa1c 	bl	8000e4c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e053      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d210      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4922      	ldr	r1, [pc, #136]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f821 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f97e 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	0800313c 	.word	0x0800313c
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	20000008 	.word	0x20000008

08001aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b490      	push	{r4, r7}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xac>)
 8001af4:	1d3c      	adds	r4, r7, #4
 8001af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001afc:	f240 2301 	movw	r3, #513	; 0x201
 8001b00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d002      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x40>
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x46>
 8001b2a:	e02b      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b2e:	623b      	str	r3, [r7, #32]
      break;
 8001b30:	e02b      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	0c9b      	lsrs	r3, r3, #18
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3328      	adds	r3, #40	; 0x28
 8001b3c:	443b      	add	r3, r7
 8001b3e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b42:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d012      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0c5b      	lsrs	r3, r3, #17
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	3328      	adds	r3, #40	; 0x28
 8001b5a:	443b      	add	r3, r7
 8001b5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b66:	fb03 f202 	mul.w	r2, r3, r2
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
 8001b72:	e004      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b78:	fb02 f303 	mul.w	r3, r2, r3
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	623b      	str	r3, [r7, #32]
      break;
 8001b82:	e002      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b86:	623b      	str	r3, [r7, #32]
      break;
 8001b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc90      	pop	{r4, r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	0800312c 	.word	0x0800312c
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	007a1200 	.word	0x007a1200
 8001ba4:	003d0900 	.word	0x003d0900

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc0:	f7ff fff2 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	0800314c 	.word	0x0800314c

08001be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001be8:	f7ff ffde 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	0adb      	lsrs	r3, r3, #11
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	0800314c 	.word	0x0800314c

08001c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <RCC_Delay+0x34>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <RCC_Delay+0x38>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	0a5b      	lsrs	r3, r3, #9
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c28:	bf00      	nop
  }
  while (Delay --);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	60fa      	str	r2, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f9      	bne.n	8001c28 <RCC_Delay+0x1c>
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	20000004 	.word	0x20000004
 8001c44:	10624dd3 	.word	0x10624dd3

08001c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e03f      	b.n	8001cda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff f822 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	; 0x24
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f905 	bl	8001e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b08a      	sub	sp, #40	; 0x28
 8001ce6:	af02      	add	r7, sp, #8
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d17c      	bne.n	8001dfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_UART_Transmit+0x2c>
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e075      	b.n	8001dfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_UART_Transmit+0x3e>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e06e      	b.n	8001dfe <HAL_UART_Transmit+0x11c>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2221      	movs	r2, #33	; 0x21
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d36:	f7ff f889 	bl	8000e4c <HAL_GetTick>
 8001d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	88fa      	ldrh	r2, [r7, #6]
 8001d40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	88fa      	ldrh	r2, [r7, #6]
 8001d46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d50:	d108      	bne.n	8001d64 <HAL_UART_Transmit+0x82>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d104      	bne.n	8001d64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	e003      	b.n	8001d6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d74:	e02a      	b.n	8001dcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f840 	bl	8001e06 <UART_WaitOnFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e036      	b.n	8001dfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10b      	bne.n	8001dae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	3302      	adds	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	e007      	b.n	8001dbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1cf      	bne.n	8001d76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f810 	bl	8001e06 <UART_WaitOnFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e006      	b.n	8001dfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001dfc:	2302      	movs	r3, #2
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4613      	mov	r3, r2
 8001e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e16:	e02c      	b.n	8001e72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d028      	beq.n	8001e72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e26:	f7ff f811 	bl	8000e4c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d21d      	bcs.n	8001e72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e00f      	b.n	8001e92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d0c3      	beq.n	8001e18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ed6:	f023 030c 	bic.w	r3, r3, #12
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2c      	ldr	r2, [pc, #176]	; (8001fb0 <UART_SetConfig+0x114>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d103      	bne.n	8001f0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f04:	f7ff fe6e 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	e002      	b.n	8001f12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f0c:	f7ff fe56 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8001f10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	009a      	lsls	r2, r3, #2
 8001f1c:	441a      	add	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <UART_SetConfig+0x118>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	0119      	lsls	r1, r3, #4
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009a      	lsls	r2, r3, #2
 8001f3c:	441a      	add	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <UART_SetConfig+0x118>)
 8001f4a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2064      	movs	r0, #100	; 0x64
 8001f52:	fb00 f303 	mul.w	r3, r0, r3
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	3332      	adds	r3, #50	; 0x32
 8001f5c:	4a15      	ldr	r2, [pc, #84]	; (8001fb4 <UART_SetConfig+0x118>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f68:	4419      	add	r1, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009a      	lsls	r2, r3, #2
 8001f74:	441a      	add	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <UART_SetConfig+0x118>)
 8001f82:	fba3 0302 	umull	r0, r3, r3, r2
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2064      	movs	r0, #100	; 0x64
 8001f8a:	fb00 f303 	mul.w	r3, r0, r3
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	3332      	adds	r3, #50	; 0x32
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <UART_SetConfig+0x118>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	440a      	add	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	51eb851f 	.word	0x51eb851f

08001fb8 <__errno>:
 8001fb8:	4b01      	ldr	r3, [pc, #4]	; (8001fc0 <__errno+0x8>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000010 	.word	0x20000010

08001fc4 <__libc_init_array>:
 8001fc4:	b570      	push	{r4, r5, r6, lr}
 8001fc6:	2600      	movs	r6, #0
 8001fc8:	4d0c      	ldr	r5, [pc, #48]	; (8001ffc <__libc_init_array+0x38>)
 8001fca:	4c0d      	ldr	r4, [pc, #52]	; (8002000 <__libc_init_array+0x3c>)
 8001fcc:	1b64      	subs	r4, r4, r5
 8001fce:	10a4      	asrs	r4, r4, #2
 8001fd0:	42a6      	cmp	r6, r4
 8001fd2:	d109      	bne.n	8001fe8 <__libc_init_array+0x24>
 8001fd4:	f001 f82c 	bl	8003030 <_init>
 8001fd8:	2600      	movs	r6, #0
 8001fda:	4d0a      	ldr	r5, [pc, #40]	; (8002004 <__libc_init_array+0x40>)
 8001fdc:	4c0a      	ldr	r4, [pc, #40]	; (8002008 <__libc_init_array+0x44>)
 8001fde:	1b64      	subs	r4, r4, r5
 8001fe0:	10a4      	asrs	r4, r4, #2
 8001fe2:	42a6      	cmp	r6, r4
 8001fe4:	d105      	bne.n	8001ff2 <__libc_init_array+0x2e>
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}
 8001fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fec:	4798      	blx	r3
 8001fee:	3601      	adds	r6, #1
 8001ff0:	e7ee      	b.n	8001fd0 <__libc_init_array+0xc>
 8001ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff6:	4798      	blx	r3
 8001ff8:	3601      	adds	r6, #1
 8001ffa:	e7f2      	b.n	8001fe2 <__libc_init_array+0x1e>
 8001ffc:	080031ec 	.word	0x080031ec
 8002000:	080031ec 	.word	0x080031ec
 8002004:	080031ec 	.word	0x080031ec
 8002008:	080031f0 	.word	0x080031f0

0800200c <memset>:
 800200c:	4603      	mov	r3, r0
 800200e:	4402      	add	r2, r0
 8002010:	4293      	cmp	r3, r2
 8002012:	d100      	bne.n	8002016 <memset+0xa>
 8002014:	4770      	bx	lr
 8002016:	f803 1b01 	strb.w	r1, [r3], #1
 800201a:	e7f9      	b.n	8002010 <memset+0x4>

0800201c <iprintf>:
 800201c:	b40f      	push	{r0, r1, r2, r3}
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <iprintf+0x2c>)
 8002020:	b513      	push	{r0, r1, r4, lr}
 8002022:	681c      	ldr	r4, [r3, #0]
 8002024:	b124      	cbz	r4, 8002030 <iprintf+0x14>
 8002026:	69a3      	ldr	r3, [r4, #24]
 8002028:	b913      	cbnz	r3, 8002030 <iprintf+0x14>
 800202a:	4620      	mov	r0, r4
 800202c:	f000 fa5a 	bl	80024e4 <__sinit>
 8002030:	ab05      	add	r3, sp, #20
 8002032:	4620      	mov	r0, r4
 8002034:	9a04      	ldr	r2, [sp, #16]
 8002036:	68a1      	ldr	r1, [r4, #8]
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	f000 fc5d 	bl	80028f8 <_vfiprintf_r>
 800203e:	b002      	add	sp, #8
 8002040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002044:	b004      	add	sp, #16
 8002046:	4770      	bx	lr
 8002048:	20000010 	.word	0x20000010

0800204c <_puts_r>:
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	460e      	mov	r6, r1
 8002050:	4605      	mov	r5, r0
 8002052:	b118      	cbz	r0, 800205c <_puts_r+0x10>
 8002054:	6983      	ldr	r3, [r0, #24]
 8002056:	b90b      	cbnz	r3, 800205c <_puts_r+0x10>
 8002058:	f000 fa44 	bl	80024e4 <__sinit>
 800205c:	69ab      	ldr	r3, [r5, #24]
 800205e:	68ac      	ldr	r4, [r5, #8]
 8002060:	b913      	cbnz	r3, 8002068 <_puts_r+0x1c>
 8002062:	4628      	mov	r0, r5
 8002064:	f000 fa3e 	bl	80024e4 <__sinit>
 8002068:	4b2c      	ldr	r3, [pc, #176]	; (800211c <_puts_r+0xd0>)
 800206a:	429c      	cmp	r4, r3
 800206c:	d120      	bne.n	80020b0 <_puts_r+0x64>
 800206e:	686c      	ldr	r4, [r5, #4]
 8002070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002072:	07db      	lsls	r3, r3, #31
 8002074:	d405      	bmi.n	8002082 <_puts_r+0x36>
 8002076:	89a3      	ldrh	r3, [r4, #12]
 8002078:	0598      	lsls	r0, r3, #22
 800207a:	d402      	bmi.n	8002082 <_puts_r+0x36>
 800207c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800207e:	f000 facf 	bl	8002620 <__retarget_lock_acquire_recursive>
 8002082:	89a3      	ldrh	r3, [r4, #12]
 8002084:	0719      	lsls	r1, r3, #28
 8002086:	d51d      	bpl.n	80020c4 <_puts_r+0x78>
 8002088:	6923      	ldr	r3, [r4, #16]
 800208a:	b1db      	cbz	r3, 80020c4 <_puts_r+0x78>
 800208c:	3e01      	subs	r6, #1
 800208e:	68a3      	ldr	r3, [r4, #8]
 8002090:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002094:	3b01      	subs	r3, #1
 8002096:	60a3      	str	r3, [r4, #8]
 8002098:	bb39      	cbnz	r1, 80020ea <_puts_r+0x9e>
 800209a:	2b00      	cmp	r3, #0
 800209c:	da38      	bge.n	8002110 <_puts_r+0xc4>
 800209e:	4622      	mov	r2, r4
 80020a0:	210a      	movs	r1, #10
 80020a2:	4628      	mov	r0, r5
 80020a4:	f000 f848 	bl	8002138 <__swbuf_r>
 80020a8:	3001      	adds	r0, #1
 80020aa:	d011      	beq.n	80020d0 <_puts_r+0x84>
 80020ac:	250a      	movs	r5, #10
 80020ae:	e011      	b.n	80020d4 <_puts_r+0x88>
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <_puts_r+0xd4>)
 80020b2:	429c      	cmp	r4, r3
 80020b4:	d101      	bne.n	80020ba <_puts_r+0x6e>
 80020b6:	68ac      	ldr	r4, [r5, #8]
 80020b8:	e7da      	b.n	8002070 <_puts_r+0x24>
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <_puts_r+0xd8>)
 80020bc:	429c      	cmp	r4, r3
 80020be:	bf08      	it	eq
 80020c0:	68ec      	ldreq	r4, [r5, #12]
 80020c2:	e7d5      	b.n	8002070 <_puts_r+0x24>
 80020c4:	4621      	mov	r1, r4
 80020c6:	4628      	mov	r0, r5
 80020c8:	f000 f888 	bl	80021dc <__swsetup_r>
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d0dd      	beq.n	800208c <_puts_r+0x40>
 80020d0:	f04f 35ff 	mov.w	r5, #4294967295
 80020d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020d6:	07da      	lsls	r2, r3, #31
 80020d8:	d405      	bmi.n	80020e6 <_puts_r+0x9a>
 80020da:	89a3      	ldrh	r3, [r4, #12]
 80020dc:	059b      	lsls	r3, r3, #22
 80020de:	d402      	bmi.n	80020e6 <_puts_r+0x9a>
 80020e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020e2:	f000 fa9e 	bl	8002622 <__retarget_lock_release_recursive>
 80020e6:	4628      	mov	r0, r5
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	da04      	bge.n	80020f8 <_puts_r+0xac>
 80020ee:	69a2      	ldr	r2, [r4, #24]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dc06      	bgt.n	8002102 <_puts_r+0xb6>
 80020f4:	290a      	cmp	r1, #10
 80020f6:	d004      	beq.n	8002102 <_puts_r+0xb6>
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	6022      	str	r2, [r4, #0]
 80020fe:	7019      	strb	r1, [r3, #0]
 8002100:	e7c5      	b.n	800208e <_puts_r+0x42>
 8002102:	4622      	mov	r2, r4
 8002104:	4628      	mov	r0, r5
 8002106:	f000 f817 	bl	8002138 <__swbuf_r>
 800210a:	3001      	adds	r0, #1
 800210c:	d1bf      	bne.n	800208e <_puts_r+0x42>
 800210e:	e7df      	b.n	80020d0 <_puts_r+0x84>
 8002110:	250a      	movs	r5, #10
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	6022      	str	r2, [r4, #0]
 8002118:	701d      	strb	r5, [r3, #0]
 800211a:	e7db      	b.n	80020d4 <_puts_r+0x88>
 800211c:	08003178 	.word	0x08003178
 8002120:	08003198 	.word	0x08003198
 8002124:	08003158 	.word	0x08003158

08002128 <puts>:
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <puts+0xc>)
 800212a:	4601      	mov	r1, r0
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	f7ff bf8d 	b.w	800204c <_puts_r>
 8002132:	bf00      	nop
 8002134:	20000010 	.word	0x20000010

08002138 <__swbuf_r>:
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	460e      	mov	r6, r1
 800213c:	4614      	mov	r4, r2
 800213e:	4605      	mov	r5, r0
 8002140:	b118      	cbz	r0, 800214a <__swbuf_r+0x12>
 8002142:	6983      	ldr	r3, [r0, #24]
 8002144:	b90b      	cbnz	r3, 800214a <__swbuf_r+0x12>
 8002146:	f000 f9cd 	bl	80024e4 <__sinit>
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <__swbuf_r+0x98>)
 800214c:	429c      	cmp	r4, r3
 800214e:	d12b      	bne.n	80021a8 <__swbuf_r+0x70>
 8002150:	686c      	ldr	r4, [r5, #4]
 8002152:	69a3      	ldr	r3, [r4, #24]
 8002154:	60a3      	str	r3, [r4, #8]
 8002156:	89a3      	ldrh	r3, [r4, #12]
 8002158:	071a      	lsls	r2, r3, #28
 800215a:	d52f      	bpl.n	80021bc <__swbuf_r+0x84>
 800215c:	6923      	ldr	r3, [r4, #16]
 800215e:	b36b      	cbz	r3, 80021bc <__swbuf_r+0x84>
 8002160:	6923      	ldr	r3, [r4, #16]
 8002162:	6820      	ldr	r0, [r4, #0]
 8002164:	b2f6      	uxtb	r6, r6
 8002166:	1ac0      	subs	r0, r0, r3
 8002168:	6963      	ldr	r3, [r4, #20]
 800216a:	4637      	mov	r7, r6
 800216c:	4283      	cmp	r3, r0
 800216e:	dc04      	bgt.n	800217a <__swbuf_r+0x42>
 8002170:	4621      	mov	r1, r4
 8002172:	4628      	mov	r0, r5
 8002174:	f000 f922 	bl	80023bc <_fflush_r>
 8002178:	bb30      	cbnz	r0, 80021c8 <__swbuf_r+0x90>
 800217a:	68a3      	ldr	r3, [r4, #8]
 800217c:	3001      	adds	r0, #1
 800217e:	3b01      	subs	r3, #1
 8002180:	60a3      	str	r3, [r4, #8]
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	6022      	str	r2, [r4, #0]
 8002188:	701e      	strb	r6, [r3, #0]
 800218a:	6963      	ldr	r3, [r4, #20]
 800218c:	4283      	cmp	r3, r0
 800218e:	d004      	beq.n	800219a <__swbuf_r+0x62>
 8002190:	89a3      	ldrh	r3, [r4, #12]
 8002192:	07db      	lsls	r3, r3, #31
 8002194:	d506      	bpl.n	80021a4 <__swbuf_r+0x6c>
 8002196:	2e0a      	cmp	r6, #10
 8002198:	d104      	bne.n	80021a4 <__swbuf_r+0x6c>
 800219a:	4621      	mov	r1, r4
 800219c:	4628      	mov	r0, r5
 800219e:	f000 f90d 	bl	80023bc <_fflush_r>
 80021a2:	b988      	cbnz	r0, 80021c8 <__swbuf_r+0x90>
 80021a4:	4638      	mov	r0, r7
 80021a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <__swbuf_r+0x9c>)
 80021aa:	429c      	cmp	r4, r3
 80021ac:	d101      	bne.n	80021b2 <__swbuf_r+0x7a>
 80021ae:	68ac      	ldr	r4, [r5, #8]
 80021b0:	e7cf      	b.n	8002152 <__swbuf_r+0x1a>
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <__swbuf_r+0xa0>)
 80021b4:	429c      	cmp	r4, r3
 80021b6:	bf08      	it	eq
 80021b8:	68ec      	ldreq	r4, [r5, #12]
 80021ba:	e7ca      	b.n	8002152 <__swbuf_r+0x1a>
 80021bc:	4621      	mov	r1, r4
 80021be:	4628      	mov	r0, r5
 80021c0:	f000 f80c 	bl	80021dc <__swsetup_r>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d0cb      	beq.n	8002160 <__swbuf_r+0x28>
 80021c8:	f04f 37ff 	mov.w	r7, #4294967295
 80021cc:	e7ea      	b.n	80021a4 <__swbuf_r+0x6c>
 80021ce:	bf00      	nop
 80021d0:	08003178 	.word	0x08003178
 80021d4:	08003198 	.word	0x08003198
 80021d8:	08003158 	.word	0x08003158

080021dc <__swsetup_r>:
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <__swsetup_r+0xcc>)
 80021de:	b570      	push	{r4, r5, r6, lr}
 80021e0:	681d      	ldr	r5, [r3, #0]
 80021e2:	4606      	mov	r6, r0
 80021e4:	460c      	mov	r4, r1
 80021e6:	b125      	cbz	r5, 80021f2 <__swsetup_r+0x16>
 80021e8:	69ab      	ldr	r3, [r5, #24]
 80021ea:	b913      	cbnz	r3, 80021f2 <__swsetup_r+0x16>
 80021ec:	4628      	mov	r0, r5
 80021ee:	f000 f979 	bl	80024e4 <__sinit>
 80021f2:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <__swsetup_r+0xd0>)
 80021f4:	429c      	cmp	r4, r3
 80021f6:	d10f      	bne.n	8002218 <__swsetup_r+0x3c>
 80021f8:	686c      	ldr	r4, [r5, #4]
 80021fa:	89a3      	ldrh	r3, [r4, #12]
 80021fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002200:	0719      	lsls	r1, r3, #28
 8002202:	d42c      	bmi.n	800225e <__swsetup_r+0x82>
 8002204:	06dd      	lsls	r5, r3, #27
 8002206:	d411      	bmi.n	800222c <__swsetup_r+0x50>
 8002208:	2309      	movs	r3, #9
 800220a:	6033      	str	r3, [r6, #0]
 800220c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	81a3      	strh	r3, [r4, #12]
 8002216:	e03e      	b.n	8002296 <__swsetup_r+0xba>
 8002218:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <__swsetup_r+0xd4>)
 800221a:	429c      	cmp	r4, r3
 800221c:	d101      	bne.n	8002222 <__swsetup_r+0x46>
 800221e:	68ac      	ldr	r4, [r5, #8]
 8002220:	e7eb      	b.n	80021fa <__swsetup_r+0x1e>
 8002222:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <__swsetup_r+0xd8>)
 8002224:	429c      	cmp	r4, r3
 8002226:	bf08      	it	eq
 8002228:	68ec      	ldreq	r4, [r5, #12]
 800222a:	e7e6      	b.n	80021fa <__swsetup_r+0x1e>
 800222c:	0758      	lsls	r0, r3, #29
 800222e:	d512      	bpl.n	8002256 <__swsetup_r+0x7a>
 8002230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002232:	b141      	cbz	r1, 8002246 <__swsetup_r+0x6a>
 8002234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002238:	4299      	cmp	r1, r3
 800223a:	d002      	beq.n	8002242 <__swsetup_r+0x66>
 800223c:	4630      	mov	r0, r6
 800223e:	f000 fa57 	bl	80026f0 <_free_r>
 8002242:	2300      	movs	r3, #0
 8002244:	6363      	str	r3, [r4, #52]	; 0x34
 8002246:	89a3      	ldrh	r3, [r4, #12]
 8002248:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800224c:	81a3      	strh	r3, [r4, #12]
 800224e:	2300      	movs	r3, #0
 8002250:	6063      	str	r3, [r4, #4]
 8002252:	6923      	ldr	r3, [r4, #16]
 8002254:	6023      	str	r3, [r4, #0]
 8002256:	89a3      	ldrh	r3, [r4, #12]
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	81a3      	strh	r3, [r4, #12]
 800225e:	6923      	ldr	r3, [r4, #16]
 8002260:	b94b      	cbnz	r3, 8002276 <__swsetup_r+0x9a>
 8002262:	89a3      	ldrh	r3, [r4, #12]
 8002264:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226c:	d003      	beq.n	8002276 <__swsetup_r+0x9a>
 800226e:	4621      	mov	r1, r4
 8002270:	4630      	mov	r0, r6
 8002272:	f000 f9fd 	bl	8002670 <__smakebuf_r>
 8002276:	89a0      	ldrh	r0, [r4, #12]
 8002278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800227c:	f010 0301 	ands.w	r3, r0, #1
 8002280:	d00a      	beq.n	8002298 <__swsetup_r+0xbc>
 8002282:	2300      	movs	r3, #0
 8002284:	60a3      	str	r3, [r4, #8]
 8002286:	6963      	ldr	r3, [r4, #20]
 8002288:	425b      	negs	r3, r3
 800228a:	61a3      	str	r3, [r4, #24]
 800228c:	6923      	ldr	r3, [r4, #16]
 800228e:	b943      	cbnz	r3, 80022a2 <__swsetup_r+0xc6>
 8002290:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002294:	d1ba      	bne.n	800220c <__swsetup_r+0x30>
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	0781      	lsls	r1, r0, #30
 800229a:	bf58      	it	pl
 800229c:	6963      	ldrpl	r3, [r4, #20]
 800229e:	60a3      	str	r3, [r4, #8]
 80022a0:	e7f4      	b.n	800228c <__swsetup_r+0xb0>
 80022a2:	2000      	movs	r0, #0
 80022a4:	e7f7      	b.n	8002296 <__swsetup_r+0xba>
 80022a6:	bf00      	nop
 80022a8:	20000010 	.word	0x20000010
 80022ac:	08003178 	.word	0x08003178
 80022b0:	08003198 	.word	0x08003198
 80022b4:	08003158 	.word	0x08003158

080022b8 <__sflush_r>:
 80022b8:	898a      	ldrh	r2, [r1, #12]
 80022ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022bc:	4605      	mov	r5, r0
 80022be:	0710      	lsls	r0, r2, #28
 80022c0:	460c      	mov	r4, r1
 80022c2:	d457      	bmi.n	8002374 <__sflush_r+0xbc>
 80022c4:	684b      	ldr	r3, [r1, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	dc04      	bgt.n	80022d4 <__sflush_r+0x1c>
 80022ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	dc01      	bgt.n	80022d4 <__sflush_r+0x1c>
 80022d0:	2000      	movs	r0, #0
 80022d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022d6:	2e00      	cmp	r6, #0
 80022d8:	d0fa      	beq.n	80022d0 <__sflush_r+0x18>
 80022da:	2300      	movs	r3, #0
 80022dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80022e0:	682f      	ldr	r7, [r5, #0]
 80022e2:	602b      	str	r3, [r5, #0]
 80022e4:	d032      	beq.n	800234c <__sflush_r+0x94>
 80022e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022e8:	89a3      	ldrh	r3, [r4, #12]
 80022ea:	075a      	lsls	r2, r3, #29
 80022ec:	d505      	bpl.n	80022fa <__sflush_r+0x42>
 80022ee:	6863      	ldr	r3, [r4, #4]
 80022f0:	1ac0      	subs	r0, r0, r3
 80022f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022f4:	b10b      	cbz	r3, 80022fa <__sflush_r+0x42>
 80022f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022f8:	1ac0      	subs	r0, r0, r3
 80022fa:	2300      	movs	r3, #0
 80022fc:	4602      	mov	r2, r0
 80022fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002300:	4628      	mov	r0, r5
 8002302:	6a21      	ldr	r1, [r4, #32]
 8002304:	47b0      	blx	r6
 8002306:	1c43      	adds	r3, r0, #1
 8002308:	89a3      	ldrh	r3, [r4, #12]
 800230a:	d106      	bne.n	800231a <__sflush_r+0x62>
 800230c:	6829      	ldr	r1, [r5, #0]
 800230e:	291d      	cmp	r1, #29
 8002310:	d82c      	bhi.n	800236c <__sflush_r+0xb4>
 8002312:	4a29      	ldr	r2, [pc, #164]	; (80023b8 <__sflush_r+0x100>)
 8002314:	40ca      	lsrs	r2, r1
 8002316:	07d6      	lsls	r6, r2, #31
 8002318:	d528      	bpl.n	800236c <__sflush_r+0xb4>
 800231a:	2200      	movs	r2, #0
 800231c:	6062      	str	r2, [r4, #4]
 800231e:	6922      	ldr	r2, [r4, #16]
 8002320:	04d9      	lsls	r1, r3, #19
 8002322:	6022      	str	r2, [r4, #0]
 8002324:	d504      	bpl.n	8002330 <__sflush_r+0x78>
 8002326:	1c42      	adds	r2, r0, #1
 8002328:	d101      	bne.n	800232e <__sflush_r+0x76>
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	b903      	cbnz	r3, 8002330 <__sflush_r+0x78>
 800232e:	6560      	str	r0, [r4, #84]	; 0x54
 8002330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002332:	602f      	str	r7, [r5, #0]
 8002334:	2900      	cmp	r1, #0
 8002336:	d0cb      	beq.n	80022d0 <__sflush_r+0x18>
 8002338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800233c:	4299      	cmp	r1, r3
 800233e:	d002      	beq.n	8002346 <__sflush_r+0x8e>
 8002340:	4628      	mov	r0, r5
 8002342:	f000 f9d5 	bl	80026f0 <_free_r>
 8002346:	2000      	movs	r0, #0
 8002348:	6360      	str	r0, [r4, #52]	; 0x34
 800234a:	e7c2      	b.n	80022d2 <__sflush_r+0x1a>
 800234c:	6a21      	ldr	r1, [r4, #32]
 800234e:	2301      	movs	r3, #1
 8002350:	4628      	mov	r0, r5
 8002352:	47b0      	blx	r6
 8002354:	1c41      	adds	r1, r0, #1
 8002356:	d1c7      	bne.n	80022e8 <__sflush_r+0x30>
 8002358:	682b      	ldr	r3, [r5, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0c4      	beq.n	80022e8 <__sflush_r+0x30>
 800235e:	2b1d      	cmp	r3, #29
 8002360:	d001      	beq.n	8002366 <__sflush_r+0xae>
 8002362:	2b16      	cmp	r3, #22
 8002364:	d101      	bne.n	800236a <__sflush_r+0xb2>
 8002366:	602f      	str	r7, [r5, #0]
 8002368:	e7b2      	b.n	80022d0 <__sflush_r+0x18>
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002370:	81a3      	strh	r3, [r4, #12]
 8002372:	e7ae      	b.n	80022d2 <__sflush_r+0x1a>
 8002374:	690f      	ldr	r7, [r1, #16]
 8002376:	2f00      	cmp	r7, #0
 8002378:	d0aa      	beq.n	80022d0 <__sflush_r+0x18>
 800237a:	0793      	lsls	r3, r2, #30
 800237c:	bf18      	it	ne
 800237e:	2300      	movne	r3, #0
 8002380:	680e      	ldr	r6, [r1, #0]
 8002382:	bf08      	it	eq
 8002384:	694b      	ldreq	r3, [r1, #20]
 8002386:	1bf6      	subs	r6, r6, r7
 8002388:	600f      	str	r7, [r1, #0]
 800238a:	608b      	str	r3, [r1, #8]
 800238c:	2e00      	cmp	r6, #0
 800238e:	dd9f      	ble.n	80022d0 <__sflush_r+0x18>
 8002390:	4633      	mov	r3, r6
 8002392:	463a      	mov	r2, r7
 8002394:	4628      	mov	r0, r5
 8002396:	6a21      	ldr	r1, [r4, #32]
 8002398:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800239c:	47e0      	blx	ip
 800239e:	2800      	cmp	r0, #0
 80023a0:	dc06      	bgt.n	80023b0 <__sflush_r+0xf8>
 80023a2:	89a3      	ldrh	r3, [r4, #12]
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ac:	81a3      	strh	r3, [r4, #12]
 80023ae:	e790      	b.n	80022d2 <__sflush_r+0x1a>
 80023b0:	4407      	add	r7, r0
 80023b2:	1a36      	subs	r6, r6, r0
 80023b4:	e7ea      	b.n	800238c <__sflush_r+0xd4>
 80023b6:	bf00      	nop
 80023b8:	20400001 	.word	0x20400001

080023bc <_fflush_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	690b      	ldr	r3, [r1, #16]
 80023c0:	4605      	mov	r5, r0
 80023c2:	460c      	mov	r4, r1
 80023c4:	b913      	cbnz	r3, 80023cc <_fflush_r+0x10>
 80023c6:	2500      	movs	r5, #0
 80023c8:	4628      	mov	r0, r5
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	b118      	cbz	r0, 80023d6 <_fflush_r+0x1a>
 80023ce:	6983      	ldr	r3, [r0, #24]
 80023d0:	b90b      	cbnz	r3, 80023d6 <_fflush_r+0x1a>
 80023d2:	f000 f887 	bl	80024e4 <__sinit>
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <_fflush_r+0x6c>)
 80023d8:	429c      	cmp	r4, r3
 80023da:	d11b      	bne.n	8002414 <_fflush_r+0x58>
 80023dc:	686c      	ldr	r4, [r5, #4]
 80023de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0ef      	beq.n	80023c6 <_fflush_r+0xa>
 80023e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80023e8:	07d0      	lsls	r0, r2, #31
 80023ea:	d404      	bmi.n	80023f6 <_fflush_r+0x3a>
 80023ec:	0599      	lsls	r1, r3, #22
 80023ee:	d402      	bmi.n	80023f6 <_fflush_r+0x3a>
 80023f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023f2:	f000 f915 	bl	8002620 <__retarget_lock_acquire_recursive>
 80023f6:	4628      	mov	r0, r5
 80023f8:	4621      	mov	r1, r4
 80023fa:	f7ff ff5d 	bl	80022b8 <__sflush_r>
 80023fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002400:	4605      	mov	r5, r0
 8002402:	07da      	lsls	r2, r3, #31
 8002404:	d4e0      	bmi.n	80023c8 <_fflush_r+0xc>
 8002406:	89a3      	ldrh	r3, [r4, #12]
 8002408:	059b      	lsls	r3, r3, #22
 800240a:	d4dd      	bmi.n	80023c8 <_fflush_r+0xc>
 800240c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800240e:	f000 f908 	bl	8002622 <__retarget_lock_release_recursive>
 8002412:	e7d9      	b.n	80023c8 <_fflush_r+0xc>
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <_fflush_r+0x70>)
 8002416:	429c      	cmp	r4, r3
 8002418:	d101      	bne.n	800241e <_fflush_r+0x62>
 800241a:	68ac      	ldr	r4, [r5, #8]
 800241c:	e7df      	b.n	80023de <_fflush_r+0x22>
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <_fflush_r+0x74>)
 8002420:	429c      	cmp	r4, r3
 8002422:	bf08      	it	eq
 8002424:	68ec      	ldreq	r4, [r5, #12]
 8002426:	e7da      	b.n	80023de <_fflush_r+0x22>
 8002428:	08003178 	.word	0x08003178
 800242c:	08003198 	.word	0x08003198
 8002430:	08003158 	.word	0x08003158

08002434 <std>:
 8002434:	2300      	movs	r3, #0
 8002436:	b510      	push	{r4, lr}
 8002438:	4604      	mov	r4, r0
 800243a:	e9c0 3300 	strd	r3, r3, [r0]
 800243e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002442:	6083      	str	r3, [r0, #8]
 8002444:	8181      	strh	r1, [r0, #12]
 8002446:	6643      	str	r3, [r0, #100]	; 0x64
 8002448:	81c2      	strh	r2, [r0, #14]
 800244a:	6183      	str	r3, [r0, #24]
 800244c:	4619      	mov	r1, r3
 800244e:	2208      	movs	r2, #8
 8002450:	305c      	adds	r0, #92	; 0x5c
 8002452:	f7ff fddb 	bl	800200c <memset>
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <std+0x38>)
 8002458:	6224      	str	r4, [r4, #32]
 800245a:	6263      	str	r3, [r4, #36]	; 0x24
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <std+0x3c>)
 800245e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <std+0x40>)
 8002462:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <std+0x44>)
 8002466:	6323      	str	r3, [r4, #48]	; 0x30
 8002468:	bd10      	pop	{r4, pc}
 800246a:	bf00      	nop
 800246c:	08002ea5 	.word	0x08002ea5
 8002470:	08002ec7 	.word	0x08002ec7
 8002474:	08002eff 	.word	0x08002eff
 8002478:	08002f23 	.word	0x08002f23

0800247c <_cleanup_r>:
 800247c:	4901      	ldr	r1, [pc, #4]	; (8002484 <_cleanup_r+0x8>)
 800247e:	f000 b8af 	b.w	80025e0 <_fwalk_reent>
 8002482:	bf00      	nop
 8002484:	080023bd 	.word	0x080023bd

08002488 <__sfmoreglue>:
 8002488:	2268      	movs	r2, #104	; 0x68
 800248a:	b570      	push	{r4, r5, r6, lr}
 800248c:	1e4d      	subs	r5, r1, #1
 800248e:	4355      	muls	r5, r2
 8002490:	460e      	mov	r6, r1
 8002492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002496:	f000 f993 	bl	80027c0 <_malloc_r>
 800249a:	4604      	mov	r4, r0
 800249c:	b140      	cbz	r0, 80024b0 <__sfmoreglue+0x28>
 800249e:	2100      	movs	r1, #0
 80024a0:	e9c0 1600 	strd	r1, r6, [r0]
 80024a4:	300c      	adds	r0, #12
 80024a6:	60a0      	str	r0, [r4, #8]
 80024a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80024ac:	f7ff fdae 	bl	800200c <memset>
 80024b0:	4620      	mov	r0, r4
 80024b2:	bd70      	pop	{r4, r5, r6, pc}

080024b4 <__sfp_lock_acquire>:
 80024b4:	4801      	ldr	r0, [pc, #4]	; (80024bc <__sfp_lock_acquire+0x8>)
 80024b6:	f000 b8b3 	b.w	8002620 <__retarget_lock_acquire_recursive>
 80024ba:	bf00      	nop
 80024bc:	2000010d 	.word	0x2000010d

080024c0 <__sfp_lock_release>:
 80024c0:	4801      	ldr	r0, [pc, #4]	; (80024c8 <__sfp_lock_release+0x8>)
 80024c2:	f000 b8ae 	b.w	8002622 <__retarget_lock_release_recursive>
 80024c6:	bf00      	nop
 80024c8:	2000010d 	.word	0x2000010d

080024cc <__sinit_lock_acquire>:
 80024cc:	4801      	ldr	r0, [pc, #4]	; (80024d4 <__sinit_lock_acquire+0x8>)
 80024ce:	f000 b8a7 	b.w	8002620 <__retarget_lock_acquire_recursive>
 80024d2:	bf00      	nop
 80024d4:	2000010e 	.word	0x2000010e

080024d8 <__sinit_lock_release>:
 80024d8:	4801      	ldr	r0, [pc, #4]	; (80024e0 <__sinit_lock_release+0x8>)
 80024da:	f000 b8a2 	b.w	8002622 <__retarget_lock_release_recursive>
 80024de:	bf00      	nop
 80024e0:	2000010e 	.word	0x2000010e

080024e4 <__sinit>:
 80024e4:	b510      	push	{r4, lr}
 80024e6:	4604      	mov	r4, r0
 80024e8:	f7ff fff0 	bl	80024cc <__sinit_lock_acquire>
 80024ec:	69a3      	ldr	r3, [r4, #24]
 80024ee:	b11b      	cbz	r3, 80024f8 <__sinit+0x14>
 80024f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024f4:	f7ff bff0 	b.w	80024d8 <__sinit_lock_release>
 80024f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80024fc:	6523      	str	r3, [r4, #80]	; 0x50
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <__sinit+0x68>)
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <__sinit+0x6c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	62a2      	str	r2, [r4, #40]	; 0x28
 8002506:	42a3      	cmp	r3, r4
 8002508:	bf08      	it	eq
 800250a:	2301      	moveq	r3, #1
 800250c:	4620      	mov	r0, r4
 800250e:	bf08      	it	eq
 8002510:	61a3      	streq	r3, [r4, #24]
 8002512:	f000 f81f 	bl	8002554 <__sfp>
 8002516:	6060      	str	r0, [r4, #4]
 8002518:	4620      	mov	r0, r4
 800251a:	f000 f81b 	bl	8002554 <__sfp>
 800251e:	60a0      	str	r0, [r4, #8]
 8002520:	4620      	mov	r0, r4
 8002522:	f000 f817 	bl	8002554 <__sfp>
 8002526:	2200      	movs	r2, #0
 8002528:	2104      	movs	r1, #4
 800252a:	60e0      	str	r0, [r4, #12]
 800252c:	6860      	ldr	r0, [r4, #4]
 800252e:	f7ff ff81 	bl	8002434 <std>
 8002532:	2201      	movs	r2, #1
 8002534:	2109      	movs	r1, #9
 8002536:	68a0      	ldr	r0, [r4, #8]
 8002538:	f7ff ff7c 	bl	8002434 <std>
 800253c:	2202      	movs	r2, #2
 800253e:	2112      	movs	r1, #18
 8002540:	68e0      	ldr	r0, [r4, #12]
 8002542:	f7ff ff77 	bl	8002434 <std>
 8002546:	2301      	movs	r3, #1
 8002548:	61a3      	str	r3, [r4, #24]
 800254a:	e7d1      	b.n	80024f0 <__sinit+0xc>
 800254c:	08003154 	.word	0x08003154
 8002550:	0800247d 	.word	0x0800247d

08002554 <__sfp>:
 8002554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002556:	4607      	mov	r7, r0
 8002558:	f7ff ffac 	bl	80024b4 <__sfp_lock_acquire>
 800255c:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <__sfp+0x84>)
 800255e:	681e      	ldr	r6, [r3, #0]
 8002560:	69b3      	ldr	r3, [r6, #24]
 8002562:	b913      	cbnz	r3, 800256a <__sfp+0x16>
 8002564:	4630      	mov	r0, r6
 8002566:	f7ff ffbd 	bl	80024e4 <__sinit>
 800256a:	3648      	adds	r6, #72	; 0x48
 800256c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002570:	3b01      	subs	r3, #1
 8002572:	d503      	bpl.n	800257c <__sfp+0x28>
 8002574:	6833      	ldr	r3, [r6, #0]
 8002576:	b30b      	cbz	r3, 80025bc <__sfp+0x68>
 8002578:	6836      	ldr	r6, [r6, #0]
 800257a:	e7f7      	b.n	800256c <__sfp+0x18>
 800257c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002580:	b9d5      	cbnz	r5, 80025b8 <__sfp+0x64>
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <__sfp+0x88>)
 8002584:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002588:	60e3      	str	r3, [r4, #12]
 800258a:	6665      	str	r5, [r4, #100]	; 0x64
 800258c:	f000 f847 	bl	800261e <__retarget_lock_init_recursive>
 8002590:	f7ff ff96 	bl	80024c0 <__sfp_lock_release>
 8002594:	2208      	movs	r2, #8
 8002596:	4629      	mov	r1, r5
 8002598:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800259c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80025a0:	6025      	str	r5, [r4, #0]
 80025a2:	61a5      	str	r5, [r4, #24]
 80025a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80025a8:	f7ff fd30 	bl	800200c <memset>
 80025ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80025b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80025b4:	4620      	mov	r0, r4
 80025b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b8:	3468      	adds	r4, #104	; 0x68
 80025ba:	e7d9      	b.n	8002570 <__sfp+0x1c>
 80025bc:	2104      	movs	r1, #4
 80025be:	4638      	mov	r0, r7
 80025c0:	f7ff ff62 	bl	8002488 <__sfmoreglue>
 80025c4:	4604      	mov	r4, r0
 80025c6:	6030      	str	r0, [r6, #0]
 80025c8:	2800      	cmp	r0, #0
 80025ca:	d1d5      	bne.n	8002578 <__sfp+0x24>
 80025cc:	f7ff ff78 	bl	80024c0 <__sfp_lock_release>
 80025d0:	230c      	movs	r3, #12
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	e7ee      	b.n	80025b4 <__sfp+0x60>
 80025d6:	bf00      	nop
 80025d8:	08003154 	.word	0x08003154
 80025dc:	ffff0001 	.word	0xffff0001

080025e0 <_fwalk_reent>:
 80025e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025e4:	4606      	mov	r6, r0
 80025e6:	4688      	mov	r8, r1
 80025e8:	2700      	movs	r7, #0
 80025ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80025ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80025f2:	f1b9 0901 	subs.w	r9, r9, #1
 80025f6:	d505      	bpl.n	8002604 <_fwalk_reent+0x24>
 80025f8:	6824      	ldr	r4, [r4, #0]
 80025fa:	2c00      	cmp	r4, #0
 80025fc:	d1f7      	bne.n	80025ee <_fwalk_reent+0xe>
 80025fe:	4638      	mov	r0, r7
 8002600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002604:	89ab      	ldrh	r3, [r5, #12]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d907      	bls.n	800261a <_fwalk_reent+0x3a>
 800260a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800260e:	3301      	adds	r3, #1
 8002610:	d003      	beq.n	800261a <_fwalk_reent+0x3a>
 8002612:	4629      	mov	r1, r5
 8002614:	4630      	mov	r0, r6
 8002616:	47c0      	blx	r8
 8002618:	4307      	orrs	r7, r0
 800261a:	3568      	adds	r5, #104	; 0x68
 800261c:	e7e9      	b.n	80025f2 <_fwalk_reent+0x12>

0800261e <__retarget_lock_init_recursive>:
 800261e:	4770      	bx	lr

08002620 <__retarget_lock_acquire_recursive>:
 8002620:	4770      	bx	lr

08002622 <__retarget_lock_release_recursive>:
 8002622:	4770      	bx	lr

08002624 <__swhatbuf_r>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	460e      	mov	r6, r1
 8002628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800262c:	4614      	mov	r4, r2
 800262e:	2900      	cmp	r1, #0
 8002630:	461d      	mov	r5, r3
 8002632:	b096      	sub	sp, #88	; 0x58
 8002634:	da08      	bge.n	8002648 <__swhatbuf_r+0x24>
 8002636:	2200      	movs	r2, #0
 8002638:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800263c:	602a      	str	r2, [r5, #0]
 800263e:	061a      	lsls	r2, r3, #24
 8002640:	d410      	bmi.n	8002664 <__swhatbuf_r+0x40>
 8002642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002646:	e00e      	b.n	8002666 <__swhatbuf_r+0x42>
 8002648:	466a      	mov	r2, sp
 800264a:	f000 fc91 	bl	8002f70 <_fstat_r>
 800264e:	2800      	cmp	r0, #0
 8002650:	dbf1      	blt.n	8002636 <__swhatbuf_r+0x12>
 8002652:	9a01      	ldr	r2, [sp, #4]
 8002654:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002658:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800265c:	425a      	negs	r2, r3
 800265e:	415a      	adcs	r2, r3
 8002660:	602a      	str	r2, [r5, #0]
 8002662:	e7ee      	b.n	8002642 <__swhatbuf_r+0x1e>
 8002664:	2340      	movs	r3, #64	; 0x40
 8002666:	2000      	movs	r0, #0
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	b016      	add	sp, #88	; 0x58
 800266c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002670 <__smakebuf_r>:
 8002670:	898b      	ldrh	r3, [r1, #12]
 8002672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002674:	079d      	lsls	r5, r3, #30
 8002676:	4606      	mov	r6, r0
 8002678:	460c      	mov	r4, r1
 800267a:	d507      	bpl.n	800268c <__smakebuf_r+0x1c>
 800267c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	6123      	str	r3, [r4, #16]
 8002684:	2301      	movs	r3, #1
 8002686:	6163      	str	r3, [r4, #20]
 8002688:	b002      	add	sp, #8
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	466a      	mov	r2, sp
 800268e:	ab01      	add	r3, sp, #4
 8002690:	f7ff ffc8 	bl	8002624 <__swhatbuf_r>
 8002694:	9900      	ldr	r1, [sp, #0]
 8002696:	4605      	mov	r5, r0
 8002698:	4630      	mov	r0, r6
 800269a:	f000 f891 	bl	80027c0 <_malloc_r>
 800269e:	b948      	cbnz	r0, 80026b4 <__smakebuf_r+0x44>
 80026a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026a4:	059a      	lsls	r2, r3, #22
 80026a6:	d4ef      	bmi.n	8002688 <__smakebuf_r+0x18>
 80026a8:	f023 0303 	bic.w	r3, r3, #3
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	81a3      	strh	r3, [r4, #12]
 80026b2:	e7e3      	b.n	800267c <__smakebuf_r+0xc>
 80026b4:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <__smakebuf_r+0x7c>)
 80026b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80026b8:	89a3      	ldrh	r3, [r4, #12]
 80026ba:	6020      	str	r0, [r4, #0]
 80026bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c0:	81a3      	strh	r3, [r4, #12]
 80026c2:	9b00      	ldr	r3, [sp, #0]
 80026c4:	6120      	str	r0, [r4, #16]
 80026c6:	6163      	str	r3, [r4, #20]
 80026c8:	9b01      	ldr	r3, [sp, #4]
 80026ca:	b15b      	cbz	r3, 80026e4 <__smakebuf_r+0x74>
 80026cc:	4630      	mov	r0, r6
 80026ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026d2:	f000 fc5f 	bl	8002f94 <_isatty_r>
 80026d6:	b128      	cbz	r0, 80026e4 <__smakebuf_r+0x74>
 80026d8:	89a3      	ldrh	r3, [r4, #12]
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	81a3      	strh	r3, [r4, #12]
 80026e4:	89a0      	ldrh	r0, [r4, #12]
 80026e6:	4305      	orrs	r5, r0
 80026e8:	81a5      	strh	r5, [r4, #12]
 80026ea:	e7cd      	b.n	8002688 <__smakebuf_r+0x18>
 80026ec:	0800247d 	.word	0x0800247d

080026f0 <_free_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4605      	mov	r5, r0
 80026f4:	2900      	cmp	r1, #0
 80026f6:	d040      	beq.n	800277a <_free_r+0x8a>
 80026f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026fc:	1f0c      	subs	r4, r1, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bfb8      	it	lt
 8002702:	18e4      	addlt	r4, r4, r3
 8002704:	f000 fc76 	bl	8002ff4 <__malloc_lock>
 8002708:	4a1c      	ldr	r2, [pc, #112]	; (800277c <_free_r+0x8c>)
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	b933      	cbnz	r3, 800271c <_free_r+0x2c>
 800270e:	6063      	str	r3, [r4, #4]
 8002710:	6014      	str	r4, [r2, #0]
 8002712:	4628      	mov	r0, r5
 8002714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002718:	f000 bc72 	b.w	8003000 <__malloc_unlock>
 800271c:	42a3      	cmp	r3, r4
 800271e:	d908      	bls.n	8002732 <_free_r+0x42>
 8002720:	6820      	ldr	r0, [r4, #0]
 8002722:	1821      	adds	r1, r4, r0
 8002724:	428b      	cmp	r3, r1
 8002726:	bf01      	itttt	eq
 8002728:	6819      	ldreq	r1, [r3, #0]
 800272a:	685b      	ldreq	r3, [r3, #4]
 800272c:	1809      	addeq	r1, r1, r0
 800272e:	6021      	streq	r1, [r4, #0]
 8002730:	e7ed      	b.n	800270e <_free_r+0x1e>
 8002732:	461a      	mov	r2, r3
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b10b      	cbz	r3, 800273c <_free_r+0x4c>
 8002738:	42a3      	cmp	r3, r4
 800273a:	d9fa      	bls.n	8002732 <_free_r+0x42>
 800273c:	6811      	ldr	r1, [r2, #0]
 800273e:	1850      	adds	r0, r2, r1
 8002740:	42a0      	cmp	r0, r4
 8002742:	d10b      	bne.n	800275c <_free_r+0x6c>
 8002744:	6820      	ldr	r0, [r4, #0]
 8002746:	4401      	add	r1, r0
 8002748:	1850      	adds	r0, r2, r1
 800274a:	4283      	cmp	r3, r0
 800274c:	6011      	str	r1, [r2, #0]
 800274e:	d1e0      	bne.n	8002712 <_free_r+0x22>
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4401      	add	r1, r0
 8002756:	6011      	str	r1, [r2, #0]
 8002758:	6053      	str	r3, [r2, #4]
 800275a:	e7da      	b.n	8002712 <_free_r+0x22>
 800275c:	d902      	bls.n	8002764 <_free_r+0x74>
 800275e:	230c      	movs	r3, #12
 8002760:	602b      	str	r3, [r5, #0]
 8002762:	e7d6      	b.n	8002712 <_free_r+0x22>
 8002764:	6820      	ldr	r0, [r4, #0]
 8002766:	1821      	adds	r1, r4, r0
 8002768:	428b      	cmp	r3, r1
 800276a:	bf01      	itttt	eq
 800276c:	6819      	ldreq	r1, [r3, #0]
 800276e:	685b      	ldreq	r3, [r3, #4]
 8002770:	1809      	addeq	r1, r1, r0
 8002772:	6021      	streq	r1, [r4, #0]
 8002774:	6063      	str	r3, [r4, #4]
 8002776:	6054      	str	r4, [r2, #4]
 8002778:	e7cb      	b.n	8002712 <_free_r+0x22>
 800277a:	bd38      	pop	{r3, r4, r5, pc}
 800277c:	20000110 	.word	0x20000110

08002780 <sbrk_aligned>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	4e0e      	ldr	r6, [pc, #56]	; (80027bc <sbrk_aligned+0x3c>)
 8002784:	460c      	mov	r4, r1
 8002786:	6831      	ldr	r1, [r6, #0]
 8002788:	4605      	mov	r5, r0
 800278a:	b911      	cbnz	r1, 8002792 <sbrk_aligned+0x12>
 800278c:	f000 fb7a 	bl	8002e84 <_sbrk_r>
 8002790:	6030      	str	r0, [r6, #0]
 8002792:	4621      	mov	r1, r4
 8002794:	4628      	mov	r0, r5
 8002796:	f000 fb75 	bl	8002e84 <_sbrk_r>
 800279a:	1c43      	adds	r3, r0, #1
 800279c:	d00a      	beq.n	80027b4 <sbrk_aligned+0x34>
 800279e:	1cc4      	adds	r4, r0, #3
 80027a0:	f024 0403 	bic.w	r4, r4, #3
 80027a4:	42a0      	cmp	r0, r4
 80027a6:	d007      	beq.n	80027b8 <sbrk_aligned+0x38>
 80027a8:	1a21      	subs	r1, r4, r0
 80027aa:	4628      	mov	r0, r5
 80027ac:	f000 fb6a 	bl	8002e84 <_sbrk_r>
 80027b0:	3001      	adds	r0, #1
 80027b2:	d101      	bne.n	80027b8 <sbrk_aligned+0x38>
 80027b4:	f04f 34ff 	mov.w	r4, #4294967295
 80027b8:	4620      	mov	r0, r4
 80027ba:	bd70      	pop	{r4, r5, r6, pc}
 80027bc:	20000114 	.word	0x20000114

080027c0 <_malloc_r>:
 80027c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027c4:	1ccd      	adds	r5, r1, #3
 80027c6:	f025 0503 	bic.w	r5, r5, #3
 80027ca:	3508      	adds	r5, #8
 80027cc:	2d0c      	cmp	r5, #12
 80027ce:	bf38      	it	cc
 80027d0:	250c      	movcc	r5, #12
 80027d2:	2d00      	cmp	r5, #0
 80027d4:	4607      	mov	r7, r0
 80027d6:	db01      	blt.n	80027dc <_malloc_r+0x1c>
 80027d8:	42a9      	cmp	r1, r5
 80027da:	d905      	bls.n	80027e8 <_malloc_r+0x28>
 80027dc:	230c      	movs	r3, #12
 80027de:	2600      	movs	r6, #0
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4630      	mov	r0, r6
 80027e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027e8:	4e2e      	ldr	r6, [pc, #184]	; (80028a4 <_malloc_r+0xe4>)
 80027ea:	f000 fc03 	bl	8002ff4 <__malloc_lock>
 80027ee:	6833      	ldr	r3, [r6, #0]
 80027f0:	461c      	mov	r4, r3
 80027f2:	bb34      	cbnz	r4, 8002842 <_malloc_r+0x82>
 80027f4:	4629      	mov	r1, r5
 80027f6:	4638      	mov	r0, r7
 80027f8:	f7ff ffc2 	bl	8002780 <sbrk_aligned>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	4604      	mov	r4, r0
 8002800:	d14d      	bne.n	800289e <_malloc_r+0xde>
 8002802:	6834      	ldr	r4, [r6, #0]
 8002804:	4626      	mov	r6, r4
 8002806:	2e00      	cmp	r6, #0
 8002808:	d140      	bne.n	800288c <_malloc_r+0xcc>
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	4631      	mov	r1, r6
 800280e:	4638      	mov	r0, r7
 8002810:	eb04 0803 	add.w	r8, r4, r3
 8002814:	f000 fb36 	bl	8002e84 <_sbrk_r>
 8002818:	4580      	cmp	r8, r0
 800281a:	d13a      	bne.n	8002892 <_malloc_r+0xd2>
 800281c:	6821      	ldr	r1, [r4, #0]
 800281e:	3503      	adds	r5, #3
 8002820:	1a6d      	subs	r5, r5, r1
 8002822:	f025 0503 	bic.w	r5, r5, #3
 8002826:	3508      	adds	r5, #8
 8002828:	2d0c      	cmp	r5, #12
 800282a:	bf38      	it	cc
 800282c:	250c      	movcc	r5, #12
 800282e:	4638      	mov	r0, r7
 8002830:	4629      	mov	r1, r5
 8002832:	f7ff ffa5 	bl	8002780 <sbrk_aligned>
 8002836:	3001      	adds	r0, #1
 8002838:	d02b      	beq.n	8002892 <_malloc_r+0xd2>
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	442b      	add	r3, r5
 800283e:	6023      	str	r3, [r4, #0]
 8002840:	e00e      	b.n	8002860 <_malloc_r+0xa0>
 8002842:	6822      	ldr	r2, [r4, #0]
 8002844:	1b52      	subs	r2, r2, r5
 8002846:	d41e      	bmi.n	8002886 <_malloc_r+0xc6>
 8002848:	2a0b      	cmp	r2, #11
 800284a:	d916      	bls.n	800287a <_malloc_r+0xba>
 800284c:	1961      	adds	r1, r4, r5
 800284e:	42a3      	cmp	r3, r4
 8002850:	6025      	str	r5, [r4, #0]
 8002852:	bf18      	it	ne
 8002854:	6059      	strne	r1, [r3, #4]
 8002856:	6863      	ldr	r3, [r4, #4]
 8002858:	bf08      	it	eq
 800285a:	6031      	streq	r1, [r6, #0]
 800285c:	5162      	str	r2, [r4, r5]
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	4638      	mov	r0, r7
 8002862:	f104 060b 	add.w	r6, r4, #11
 8002866:	f000 fbcb 	bl	8003000 <__malloc_unlock>
 800286a:	f026 0607 	bic.w	r6, r6, #7
 800286e:	1d23      	adds	r3, r4, #4
 8002870:	1af2      	subs	r2, r6, r3
 8002872:	d0b6      	beq.n	80027e2 <_malloc_r+0x22>
 8002874:	1b9b      	subs	r3, r3, r6
 8002876:	50a3      	str	r3, [r4, r2]
 8002878:	e7b3      	b.n	80027e2 <_malloc_r+0x22>
 800287a:	6862      	ldr	r2, [r4, #4]
 800287c:	42a3      	cmp	r3, r4
 800287e:	bf0c      	ite	eq
 8002880:	6032      	streq	r2, [r6, #0]
 8002882:	605a      	strne	r2, [r3, #4]
 8002884:	e7ec      	b.n	8002860 <_malloc_r+0xa0>
 8002886:	4623      	mov	r3, r4
 8002888:	6864      	ldr	r4, [r4, #4]
 800288a:	e7b2      	b.n	80027f2 <_malloc_r+0x32>
 800288c:	4634      	mov	r4, r6
 800288e:	6876      	ldr	r6, [r6, #4]
 8002890:	e7b9      	b.n	8002806 <_malloc_r+0x46>
 8002892:	230c      	movs	r3, #12
 8002894:	4638      	mov	r0, r7
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	f000 fbb2 	bl	8003000 <__malloc_unlock>
 800289c:	e7a1      	b.n	80027e2 <_malloc_r+0x22>
 800289e:	6025      	str	r5, [r4, #0]
 80028a0:	e7de      	b.n	8002860 <_malloc_r+0xa0>
 80028a2:	bf00      	nop
 80028a4:	20000110 	.word	0x20000110

080028a8 <__sfputc_r>:
 80028a8:	6893      	ldr	r3, [r2, #8]
 80028aa:	b410      	push	{r4}
 80028ac:	3b01      	subs	r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	6093      	str	r3, [r2, #8]
 80028b2:	da07      	bge.n	80028c4 <__sfputc_r+0x1c>
 80028b4:	6994      	ldr	r4, [r2, #24]
 80028b6:	42a3      	cmp	r3, r4
 80028b8:	db01      	blt.n	80028be <__sfputc_r+0x16>
 80028ba:	290a      	cmp	r1, #10
 80028bc:	d102      	bne.n	80028c4 <__sfputc_r+0x1c>
 80028be:	bc10      	pop	{r4}
 80028c0:	f7ff bc3a 	b.w	8002138 <__swbuf_r>
 80028c4:	6813      	ldr	r3, [r2, #0]
 80028c6:	1c58      	adds	r0, r3, #1
 80028c8:	6010      	str	r0, [r2, #0]
 80028ca:	7019      	strb	r1, [r3, #0]
 80028cc:	4608      	mov	r0, r1
 80028ce:	bc10      	pop	{r4}
 80028d0:	4770      	bx	lr

080028d2 <__sfputs_r>:
 80028d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d4:	4606      	mov	r6, r0
 80028d6:	460f      	mov	r7, r1
 80028d8:	4614      	mov	r4, r2
 80028da:	18d5      	adds	r5, r2, r3
 80028dc:	42ac      	cmp	r4, r5
 80028de:	d101      	bne.n	80028e4 <__sfputs_r+0x12>
 80028e0:	2000      	movs	r0, #0
 80028e2:	e007      	b.n	80028f4 <__sfputs_r+0x22>
 80028e4:	463a      	mov	r2, r7
 80028e6:	4630      	mov	r0, r6
 80028e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028ec:	f7ff ffdc 	bl	80028a8 <__sfputc_r>
 80028f0:	1c43      	adds	r3, r0, #1
 80028f2:	d1f3      	bne.n	80028dc <__sfputs_r+0xa>
 80028f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028f8 <_vfiprintf_r>:
 80028f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028fc:	460d      	mov	r5, r1
 80028fe:	4614      	mov	r4, r2
 8002900:	4698      	mov	r8, r3
 8002902:	4606      	mov	r6, r0
 8002904:	b09d      	sub	sp, #116	; 0x74
 8002906:	b118      	cbz	r0, 8002910 <_vfiprintf_r+0x18>
 8002908:	6983      	ldr	r3, [r0, #24]
 800290a:	b90b      	cbnz	r3, 8002910 <_vfiprintf_r+0x18>
 800290c:	f7ff fdea 	bl	80024e4 <__sinit>
 8002910:	4b89      	ldr	r3, [pc, #548]	; (8002b38 <_vfiprintf_r+0x240>)
 8002912:	429d      	cmp	r5, r3
 8002914:	d11b      	bne.n	800294e <_vfiprintf_r+0x56>
 8002916:	6875      	ldr	r5, [r6, #4]
 8002918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800291a:	07d9      	lsls	r1, r3, #31
 800291c:	d405      	bmi.n	800292a <_vfiprintf_r+0x32>
 800291e:	89ab      	ldrh	r3, [r5, #12]
 8002920:	059a      	lsls	r2, r3, #22
 8002922:	d402      	bmi.n	800292a <_vfiprintf_r+0x32>
 8002924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002926:	f7ff fe7b 	bl	8002620 <__retarget_lock_acquire_recursive>
 800292a:	89ab      	ldrh	r3, [r5, #12]
 800292c:	071b      	lsls	r3, r3, #28
 800292e:	d501      	bpl.n	8002934 <_vfiprintf_r+0x3c>
 8002930:	692b      	ldr	r3, [r5, #16]
 8002932:	b9eb      	cbnz	r3, 8002970 <_vfiprintf_r+0x78>
 8002934:	4629      	mov	r1, r5
 8002936:	4630      	mov	r0, r6
 8002938:	f7ff fc50 	bl	80021dc <__swsetup_r>
 800293c:	b1c0      	cbz	r0, 8002970 <_vfiprintf_r+0x78>
 800293e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002940:	07dc      	lsls	r4, r3, #31
 8002942:	d50e      	bpl.n	8002962 <_vfiprintf_r+0x6a>
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	b01d      	add	sp, #116	; 0x74
 800294a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800294e:	4b7b      	ldr	r3, [pc, #492]	; (8002b3c <_vfiprintf_r+0x244>)
 8002950:	429d      	cmp	r5, r3
 8002952:	d101      	bne.n	8002958 <_vfiprintf_r+0x60>
 8002954:	68b5      	ldr	r5, [r6, #8]
 8002956:	e7df      	b.n	8002918 <_vfiprintf_r+0x20>
 8002958:	4b79      	ldr	r3, [pc, #484]	; (8002b40 <_vfiprintf_r+0x248>)
 800295a:	429d      	cmp	r5, r3
 800295c:	bf08      	it	eq
 800295e:	68f5      	ldreq	r5, [r6, #12]
 8002960:	e7da      	b.n	8002918 <_vfiprintf_r+0x20>
 8002962:	89ab      	ldrh	r3, [r5, #12]
 8002964:	0598      	lsls	r0, r3, #22
 8002966:	d4ed      	bmi.n	8002944 <_vfiprintf_r+0x4c>
 8002968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800296a:	f7ff fe5a 	bl	8002622 <__retarget_lock_release_recursive>
 800296e:	e7e9      	b.n	8002944 <_vfiprintf_r+0x4c>
 8002970:	2300      	movs	r3, #0
 8002972:	9309      	str	r3, [sp, #36]	; 0x24
 8002974:	2320      	movs	r3, #32
 8002976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800297a:	2330      	movs	r3, #48	; 0x30
 800297c:	f04f 0901 	mov.w	r9, #1
 8002980:	f8cd 800c 	str.w	r8, [sp, #12]
 8002984:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002b44 <_vfiprintf_r+0x24c>
 8002988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800298c:	4623      	mov	r3, r4
 800298e:	469a      	mov	sl, r3
 8002990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002994:	b10a      	cbz	r2, 800299a <_vfiprintf_r+0xa2>
 8002996:	2a25      	cmp	r2, #37	; 0x25
 8002998:	d1f9      	bne.n	800298e <_vfiprintf_r+0x96>
 800299a:	ebba 0b04 	subs.w	fp, sl, r4
 800299e:	d00b      	beq.n	80029b8 <_vfiprintf_r+0xc0>
 80029a0:	465b      	mov	r3, fp
 80029a2:	4622      	mov	r2, r4
 80029a4:	4629      	mov	r1, r5
 80029a6:	4630      	mov	r0, r6
 80029a8:	f7ff ff93 	bl	80028d2 <__sfputs_r>
 80029ac:	3001      	adds	r0, #1
 80029ae:	f000 80aa 	beq.w	8002b06 <_vfiprintf_r+0x20e>
 80029b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029b4:	445a      	add	r2, fp
 80029b6:	9209      	str	r2, [sp, #36]	; 0x24
 80029b8:	f89a 3000 	ldrb.w	r3, [sl]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80a2 	beq.w	8002b06 <_vfiprintf_r+0x20e>
 80029c2:	2300      	movs	r3, #0
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029cc:	f10a 0a01 	add.w	sl, sl, #1
 80029d0:	9304      	str	r3, [sp, #16]
 80029d2:	9307      	str	r3, [sp, #28]
 80029d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029d8:	931a      	str	r3, [sp, #104]	; 0x68
 80029da:	4654      	mov	r4, sl
 80029dc:	2205      	movs	r2, #5
 80029de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029e2:	4858      	ldr	r0, [pc, #352]	; (8002b44 <_vfiprintf_r+0x24c>)
 80029e4:	f000 faf8 	bl	8002fd8 <memchr>
 80029e8:	9a04      	ldr	r2, [sp, #16]
 80029ea:	b9d8      	cbnz	r0, 8002a24 <_vfiprintf_r+0x12c>
 80029ec:	06d1      	lsls	r1, r2, #27
 80029ee:	bf44      	itt	mi
 80029f0:	2320      	movmi	r3, #32
 80029f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029f6:	0713      	lsls	r3, r2, #28
 80029f8:	bf44      	itt	mi
 80029fa:	232b      	movmi	r3, #43	; 0x2b
 80029fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a00:	f89a 3000 	ldrb.w	r3, [sl]
 8002a04:	2b2a      	cmp	r3, #42	; 0x2a
 8002a06:	d015      	beq.n	8002a34 <_vfiprintf_r+0x13c>
 8002a08:	4654      	mov	r4, sl
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f04f 0c0a 	mov.w	ip, #10
 8002a10:	9a07      	ldr	r2, [sp, #28]
 8002a12:	4621      	mov	r1, r4
 8002a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a18:	3b30      	subs	r3, #48	; 0x30
 8002a1a:	2b09      	cmp	r3, #9
 8002a1c:	d94e      	bls.n	8002abc <_vfiprintf_r+0x1c4>
 8002a1e:	b1b0      	cbz	r0, 8002a4e <_vfiprintf_r+0x156>
 8002a20:	9207      	str	r2, [sp, #28]
 8002a22:	e014      	b.n	8002a4e <_vfiprintf_r+0x156>
 8002a24:	eba0 0308 	sub.w	r3, r0, r8
 8002a28:	fa09 f303 	lsl.w	r3, r9, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	46a2      	mov	sl, r4
 8002a30:	9304      	str	r3, [sp, #16]
 8002a32:	e7d2      	b.n	80029da <_vfiprintf_r+0xe2>
 8002a34:	9b03      	ldr	r3, [sp, #12]
 8002a36:	1d19      	adds	r1, r3, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	9103      	str	r1, [sp, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bfbb      	ittet	lt
 8002a40:	425b      	neglt	r3, r3
 8002a42:	f042 0202 	orrlt.w	r2, r2, #2
 8002a46:	9307      	strge	r3, [sp, #28]
 8002a48:	9307      	strlt	r3, [sp, #28]
 8002a4a:	bfb8      	it	lt
 8002a4c:	9204      	strlt	r2, [sp, #16]
 8002a4e:	7823      	ldrb	r3, [r4, #0]
 8002a50:	2b2e      	cmp	r3, #46	; 0x2e
 8002a52:	d10c      	bne.n	8002a6e <_vfiprintf_r+0x176>
 8002a54:	7863      	ldrb	r3, [r4, #1]
 8002a56:	2b2a      	cmp	r3, #42	; 0x2a
 8002a58:	d135      	bne.n	8002ac6 <_vfiprintf_r+0x1ce>
 8002a5a:	9b03      	ldr	r3, [sp, #12]
 8002a5c:	3402      	adds	r4, #2
 8002a5e:	1d1a      	adds	r2, r3, #4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	9203      	str	r2, [sp, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bfb8      	it	lt
 8002a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a6c:	9305      	str	r3, [sp, #20]
 8002a6e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002b48 <_vfiprintf_r+0x250>
 8002a72:	2203      	movs	r2, #3
 8002a74:	4650      	mov	r0, sl
 8002a76:	7821      	ldrb	r1, [r4, #0]
 8002a78:	f000 faae 	bl	8002fd8 <memchr>
 8002a7c:	b140      	cbz	r0, 8002a90 <_vfiprintf_r+0x198>
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	eba0 000a 	sub.w	r0, r0, sl
 8002a84:	fa03 f000 	lsl.w	r0, r3, r0
 8002a88:	9b04      	ldr	r3, [sp, #16]
 8002a8a:	3401      	adds	r4, #1
 8002a8c:	4303      	orrs	r3, r0
 8002a8e:	9304      	str	r3, [sp, #16]
 8002a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a94:	2206      	movs	r2, #6
 8002a96:	482d      	ldr	r0, [pc, #180]	; (8002b4c <_vfiprintf_r+0x254>)
 8002a98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a9c:	f000 fa9c 	bl	8002fd8 <memchr>
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d03f      	beq.n	8002b24 <_vfiprintf_r+0x22c>
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <_vfiprintf_r+0x258>)
 8002aa6:	bb1b      	cbnz	r3, 8002af0 <_vfiprintf_r+0x1f8>
 8002aa8:	9b03      	ldr	r3, [sp, #12]
 8002aaa:	3307      	adds	r3, #7
 8002aac:	f023 0307 	bic.w	r3, r3, #7
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	9303      	str	r3, [sp, #12]
 8002ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ab6:	443b      	add	r3, r7
 8002ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8002aba:	e767      	b.n	800298c <_vfiprintf_r+0x94>
 8002abc:	460c      	mov	r4, r1
 8002abe:	2001      	movs	r0, #1
 8002ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ac4:	e7a5      	b.n	8002a12 <_vfiprintf_r+0x11a>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f04f 0c0a 	mov.w	ip, #10
 8002acc:	4619      	mov	r1, r3
 8002ace:	3401      	adds	r4, #1
 8002ad0:	9305      	str	r3, [sp, #20]
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ad8:	3a30      	subs	r2, #48	; 0x30
 8002ada:	2a09      	cmp	r2, #9
 8002adc:	d903      	bls.n	8002ae6 <_vfiprintf_r+0x1ee>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0c5      	beq.n	8002a6e <_vfiprintf_r+0x176>
 8002ae2:	9105      	str	r1, [sp, #20]
 8002ae4:	e7c3      	b.n	8002a6e <_vfiprintf_r+0x176>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	2301      	movs	r3, #1
 8002aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8002aee:	e7f0      	b.n	8002ad2 <_vfiprintf_r+0x1da>
 8002af0:	ab03      	add	r3, sp, #12
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	462a      	mov	r2, r5
 8002af6:	4630      	mov	r0, r6
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <_vfiprintf_r+0x25c>)
 8002afa:	a904      	add	r1, sp, #16
 8002afc:	f3af 8000 	nop.w
 8002b00:	4607      	mov	r7, r0
 8002b02:	1c78      	adds	r0, r7, #1
 8002b04:	d1d6      	bne.n	8002ab4 <_vfiprintf_r+0x1bc>
 8002b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b08:	07d9      	lsls	r1, r3, #31
 8002b0a:	d405      	bmi.n	8002b18 <_vfiprintf_r+0x220>
 8002b0c:	89ab      	ldrh	r3, [r5, #12]
 8002b0e:	059a      	lsls	r2, r3, #22
 8002b10:	d402      	bmi.n	8002b18 <_vfiprintf_r+0x220>
 8002b12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b14:	f7ff fd85 	bl	8002622 <__retarget_lock_release_recursive>
 8002b18:	89ab      	ldrh	r3, [r5, #12]
 8002b1a:	065b      	lsls	r3, r3, #25
 8002b1c:	f53f af12 	bmi.w	8002944 <_vfiprintf_r+0x4c>
 8002b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b22:	e711      	b.n	8002948 <_vfiprintf_r+0x50>
 8002b24:	ab03      	add	r3, sp, #12
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	462a      	mov	r2, r5
 8002b2a:	4630      	mov	r0, r6
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <_vfiprintf_r+0x25c>)
 8002b2e:	a904      	add	r1, sp, #16
 8002b30:	f000 f882 	bl	8002c38 <_printf_i>
 8002b34:	e7e4      	b.n	8002b00 <_vfiprintf_r+0x208>
 8002b36:	bf00      	nop
 8002b38:	08003178 	.word	0x08003178
 8002b3c:	08003198 	.word	0x08003198
 8002b40:	08003158 	.word	0x08003158
 8002b44:	080031b8 	.word	0x080031b8
 8002b48:	080031be 	.word	0x080031be
 8002b4c:	080031c2 	.word	0x080031c2
 8002b50:	00000000 	.word	0x00000000
 8002b54:	080028d3 	.word	0x080028d3

08002b58 <_printf_common>:
 8002b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b5c:	4616      	mov	r6, r2
 8002b5e:	4699      	mov	r9, r3
 8002b60:	688a      	ldr	r2, [r1, #8]
 8002b62:	690b      	ldr	r3, [r1, #16]
 8002b64:	4607      	mov	r7, r0
 8002b66:	4293      	cmp	r3, r2
 8002b68:	bfb8      	it	lt
 8002b6a:	4613      	movlt	r3, r2
 8002b6c:	6033      	str	r3, [r6, #0]
 8002b6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b72:	460c      	mov	r4, r1
 8002b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b78:	b10a      	cbz	r2, 8002b7e <_printf_common+0x26>
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	6033      	str	r3, [r6, #0]
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	0699      	lsls	r1, r3, #26
 8002b82:	bf42      	ittt	mi
 8002b84:	6833      	ldrmi	r3, [r6, #0]
 8002b86:	3302      	addmi	r3, #2
 8002b88:	6033      	strmi	r3, [r6, #0]
 8002b8a:	6825      	ldr	r5, [r4, #0]
 8002b8c:	f015 0506 	ands.w	r5, r5, #6
 8002b90:	d106      	bne.n	8002ba0 <_printf_common+0x48>
 8002b92:	f104 0a19 	add.w	sl, r4, #25
 8002b96:	68e3      	ldr	r3, [r4, #12]
 8002b98:	6832      	ldr	r2, [r6, #0]
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	42ab      	cmp	r3, r5
 8002b9e:	dc28      	bgt.n	8002bf2 <_printf_common+0x9a>
 8002ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ba4:	1e13      	subs	r3, r2, #0
 8002ba6:	6822      	ldr	r2, [r4, #0]
 8002ba8:	bf18      	it	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	0692      	lsls	r2, r2, #26
 8002bae:	d42d      	bmi.n	8002c0c <_printf_common+0xb4>
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	4638      	mov	r0, r7
 8002bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bb8:	47c0      	blx	r8
 8002bba:	3001      	adds	r0, #1
 8002bbc:	d020      	beq.n	8002c00 <_printf_common+0xa8>
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	68e5      	ldr	r5, [r4, #12]
 8002bc2:	f003 0306 	and.w	r3, r3, #6
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf18      	it	ne
 8002bca:	2500      	movne	r5, #0
 8002bcc:	6832      	ldr	r2, [r6, #0]
 8002bce:	f04f 0600 	mov.w	r6, #0
 8002bd2:	68a3      	ldr	r3, [r4, #8]
 8002bd4:	bf08      	it	eq
 8002bd6:	1aad      	subeq	r5, r5, r2
 8002bd8:	6922      	ldr	r2, [r4, #16]
 8002bda:	bf08      	it	eq
 8002bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002be0:	4293      	cmp	r3, r2
 8002be2:	bfc4      	itt	gt
 8002be4:	1a9b      	subgt	r3, r3, r2
 8002be6:	18ed      	addgt	r5, r5, r3
 8002be8:	341a      	adds	r4, #26
 8002bea:	42b5      	cmp	r5, r6
 8002bec:	d11a      	bne.n	8002c24 <_printf_common+0xcc>
 8002bee:	2000      	movs	r0, #0
 8002bf0:	e008      	b.n	8002c04 <_printf_common+0xac>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	4652      	mov	r2, sl
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	4638      	mov	r0, r7
 8002bfa:	47c0      	blx	r8
 8002bfc:	3001      	adds	r0, #1
 8002bfe:	d103      	bne.n	8002c08 <_printf_common+0xb0>
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c08:	3501      	adds	r5, #1
 8002c0a:	e7c4      	b.n	8002b96 <_printf_common+0x3e>
 8002c0c:	2030      	movs	r0, #48	; 0x30
 8002c0e:	18e1      	adds	r1, r4, r3
 8002c10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c1a:	4422      	add	r2, r4
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c22:	e7c5      	b.n	8002bb0 <_printf_common+0x58>
 8002c24:	2301      	movs	r3, #1
 8002c26:	4622      	mov	r2, r4
 8002c28:	4649      	mov	r1, r9
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	47c0      	blx	r8
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d0e6      	beq.n	8002c00 <_printf_common+0xa8>
 8002c32:	3601      	adds	r6, #1
 8002c34:	e7d9      	b.n	8002bea <_printf_common+0x92>
	...

08002c38 <_printf_i>:
 8002c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c3c:	7e0f      	ldrb	r7, [r1, #24]
 8002c3e:	4691      	mov	r9, r2
 8002c40:	2f78      	cmp	r7, #120	; 0x78
 8002c42:	4680      	mov	r8, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	469a      	mov	sl, r3
 8002c48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c4e:	d807      	bhi.n	8002c60 <_printf_i+0x28>
 8002c50:	2f62      	cmp	r7, #98	; 0x62
 8002c52:	d80a      	bhi.n	8002c6a <_printf_i+0x32>
 8002c54:	2f00      	cmp	r7, #0
 8002c56:	f000 80d9 	beq.w	8002e0c <_printf_i+0x1d4>
 8002c5a:	2f58      	cmp	r7, #88	; 0x58
 8002c5c:	f000 80a4 	beq.w	8002da8 <_printf_i+0x170>
 8002c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c68:	e03a      	b.n	8002ce0 <_printf_i+0xa8>
 8002c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c6e:	2b15      	cmp	r3, #21
 8002c70:	d8f6      	bhi.n	8002c60 <_printf_i+0x28>
 8002c72:	a101      	add	r1, pc, #4	; (adr r1, 8002c78 <_printf_i+0x40>)
 8002c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c78:	08002cd1 	.word	0x08002cd1
 8002c7c:	08002ce5 	.word	0x08002ce5
 8002c80:	08002c61 	.word	0x08002c61
 8002c84:	08002c61 	.word	0x08002c61
 8002c88:	08002c61 	.word	0x08002c61
 8002c8c:	08002c61 	.word	0x08002c61
 8002c90:	08002ce5 	.word	0x08002ce5
 8002c94:	08002c61 	.word	0x08002c61
 8002c98:	08002c61 	.word	0x08002c61
 8002c9c:	08002c61 	.word	0x08002c61
 8002ca0:	08002c61 	.word	0x08002c61
 8002ca4:	08002df3 	.word	0x08002df3
 8002ca8:	08002d15 	.word	0x08002d15
 8002cac:	08002dd5 	.word	0x08002dd5
 8002cb0:	08002c61 	.word	0x08002c61
 8002cb4:	08002c61 	.word	0x08002c61
 8002cb8:	08002e15 	.word	0x08002e15
 8002cbc:	08002c61 	.word	0x08002c61
 8002cc0:	08002d15 	.word	0x08002d15
 8002cc4:	08002c61 	.word	0x08002c61
 8002cc8:	08002c61 	.word	0x08002c61
 8002ccc:	08002ddd 	.word	0x08002ddd
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	1d1a      	adds	r2, r3, #4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	602a      	str	r2, [r5, #0]
 8002cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0a4      	b.n	8002e2e <_printf_i+0x1f6>
 8002ce4:	6820      	ldr	r0, [r4, #0]
 8002ce6:	6829      	ldr	r1, [r5, #0]
 8002ce8:	0606      	lsls	r6, r0, #24
 8002cea:	f101 0304 	add.w	r3, r1, #4
 8002cee:	d50a      	bpl.n	8002d06 <_printf_i+0xce>
 8002cf0:	680e      	ldr	r6, [r1, #0]
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	2e00      	cmp	r6, #0
 8002cf6:	da03      	bge.n	8002d00 <_printf_i+0xc8>
 8002cf8:	232d      	movs	r3, #45	; 0x2d
 8002cfa:	4276      	negs	r6, r6
 8002cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d00:	230a      	movs	r3, #10
 8002d02:	485e      	ldr	r0, [pc, #376]	; (8002e7c <_printf_i+0x244>)
 8002d04:	e019      	b.n	8002d3a <_printf_i+0x102>
 8002d06:	680e      	ldr	r6, [r1, #0]
 8002d08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d0c:	602b      	str	r3, [r5, #0]
 8002d0e:	bf18      	it	ne
 8002d10:	b236      	sxthne	r6, r6
 8002d12:	e7ef      	b.n	8002cf4 <_printf_i+0xbc>
 8002d14:	682b      	ldr	r3, [r5, #0]
 8002d16:	6820      	ldr	r0, [r4, #0]
 8002d18:	1d19      	adds	r1, r3, #4
 8002d1a:	6029      	str	r1, [r5, #0]
 8002d1c:	0601      	lsls	r1, r0, #24
 8002d1e:	d501      	bpl.n	8002d24 <_printf_i+0xec>
 8002d20:	681e      	ldr	r6, [r3, #0]
 8002d22:	e002      	b.n	8002d2a <_printf_i+0xf2>
 8002d24:	0646      	lsls	r6, r0, #25
 8002d26:	d5fb      	bpl.n	8002d20 <_printf_i+0xe8>
 8002d28:	881e      	ldrh	r6, [r3, #0]
 8002d2a:	2f6f      	cmp	r7, #111	; 0x6f
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2308      	moveq	r3, #8
 8002d30:	230a      	movne	r3, #10
 8002d32:	4852      	ldr	r0, [pc, #328]	; (8002e7c <_printf_i+0x244>)
 8002d34:	2100      	movs	r1, #0
 8002d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d3a:	6865      	ldr	r5, [r4, #4]
 8002d3c:	2d00      	cmp	r5, #0
 8002d3e:	bfa8      	it	ge
 8002d40:	6821      	ldrge	r1, [r4, #0]
 8002d42:	60a5      	str	r5, [r4, #8]
 8002d44:	bfa4      	itt	ge
 8002d46:	f021 0104 	bicge.w	r1, r1, #4
 8002d4a:	6021      	strge	r1, [r4, #0]
 8002d4c:	b90e      	cbnz	r6, 8002d52 <_printf_i+0x11a>
 8002d4e:	2d00      	cmp	r5, #0
 8002d50:	d04d      	beq.n	8002dee <_printf_i+0x1b6>
 8002d52:	4615      	mov	r5, r2
 8002d54:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d58:	fb03 6711 	mls	r7, r3, r1, r6
 8002d5c:	5dc7      	ldrb	r7, [r0, r7]
 8002d5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d62:	4637      	mov	r7, r6
 8002d64:	42bb      	cmp	r3, r7
 8002d66:	460e      	mov	r6, r1
 8002d68:	d9f4      	bls.n	8002d54 <_printf_i+0x11c>
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d10b      	bne.n	8002d86 <_printf_i+0x14e>
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	07de      	lsls	r6, r3, #31
 8002d72:	d508      	bpl.n	8002d86 <_printf_i+0x14e>
 8002d74:	6923      	ldr	r3, [r4, #16]
 8002d76:	6861      	ldr	r1, [r4, #4]
 8002d78:	4299      	cmp	r1, r3
 8002d7a:	bfde      	ittt	le
 8002d7c:	2330      	movle	r3, #48	; 0x30
 8002d7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d86:	1b52      	subs	r2, r2, r5
 8002d88:	6122      	str	r2, [r4, #16]
 8002d8a:	464b      	mov	r3, r9
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	4640      	mov	r0, r8
 8002d90:	f8cd a000 	str.w	sl, [sp]
 8002d94:	aa03      	add	r2, sp, #12
 8002d96:	f7ff fedf 	bl	8002b58 <_printf_common>
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	d14c      	bne.n	8002e38 <_printf_i+0x200>
 8002d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002da2:	b004      	add	sp, #16
 8002da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da8:	4834      	ldr	r0, [pc, #208]	; (8002e7c <_printf_i+0x244>)
 8002daa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002dae:	6829      	ldr	r1, [r5, #0]
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	f851 6b04 	ldr.w	r6, [r1], #4
 8002db6:	6029      	str	r1, [r5, #0]
 8002db8:	061d      	lsls	r5, r3, #24
 8002dba:	d514      	bpl.n	8002de6 <_printf_i+0x1ae>
 8002dbc:	07df      	lsls	r7, r3, #31
 8002dbe:	bf44      	itt	mi
 8002dc0:	f043 0320 	orrmi.w	r3, r3, #32
 8002dc4:	6023      	strmi	r3, [r4, #0]
 8002dc6:	b91e      	cbnz	r6, 8002dd0 <_printf_i+0x198>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	f023 0320 	bic.w	r3, r3, #32
 8002dce:	6023      	str	r3, [r4, #0]
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	e7af      	b.n	8002d34 <_printf_i+0xfc>
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	f043 0320 	orr.w	r3, r3, #32
 8002dda:	6023      	str	r3, [r4, #0]
 8002ddc:	2378      	movs	r3, #120	; 0x78
 8002dde:	4828      	ldr	r0, [pc, #160]	; (8002e80 <_printf_i+0x248>)
 8002de0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002de4:	e7e3      	b.n	8002dae <_printf_i+0x176>
 8002de6:	0659      	lsls	r1, r3, #25
 8002de8:	bf48      	it	mi
 8002dea:	b2b6      	uxthmi	r6, r6
 8002dec:	e7e6      	b.n	8002dbc <_printf_i+0x184>
 8002dee:	4615      	mov	r5, r2
 8002df0:	e7bb      	b.n	8002d6a <_printf_i+0x132>
 8002df2:	682b      	ldr	r3, [r5, #0]
 8002df4:	6826      	ldr	r6, [r4, #0]
 8002df6:	1d18      	adds	r0, r3, #4
 8002df8:	6961      	ldr	r1, [r4, #20]
 8002dfa:	6028      	str	r0, [r5, #0]
 8002dfc:	0635      	lsls	r5, r6, #24
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	d501      	bpl.n	8002e06 <_printf_i+0x1ce>
 8002e02:	6019      	str	r1, [r3, #0]
 8002e04:	e002      	b.n	8002e0c <_printf_i+0x1d4>
 8002e06:	0670      	lsls	r0, r6, #25
 8002e08:	d5fb      	bpl.n	8002e02 <_printf_i+0x1ca>
 8002e0a:	8019      	strh	r1, [r3, #0]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	4615      	mov	r5, r2
 8002e10:	6123      	str	r3, [r4, #16]
 8002e12:	e7ba      	b.n	8002d8a <_printf_i+0x152>
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	2100      	movs	r1, #0
 8002e18:	1d1a      	adds	r2, r3, #4
 8002e1a:	602a      	str	r2, [r5, #0]
 8002e1c:	681d      	ldr	r5, [r3, #0]
 8002e1e:	6862      	ldr	r2, [r4, #4]
 8002e20:	4628      	mov	r0, r5
 8002e22:	f000 f8d9 	bl	8002fd8 <memchr>
 8002e26:	b108      	cbz	r0, 8002e2c <_printf_i+0x1f4>
 8002e28:	1b40      	subs	r0, r0, r5
 8002e2a:	6060      	str	r0, [r4, #4]
 8002e2c:	6863      	ldr	r3, [r4, #4]
 8002e2e:	6123      	str	r3, [r4, #16]
 8002e30:	2300      	movs	r3, #0
 8002e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e36:	e7a8      	b.n	8002d8a <_printf_i+0x152>
 8002e38:	462a      	mov	r2, r5
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	4640      	mov	r0, r8
 8002e3e:	6923      	ldr	r3, [r4, #16]
 8002e40:	47d0      	blx	sl
 8002e42:	3001      	adds	r0, #1
 8002e44:	d0ab      	beq.n	8002d9e <_printf_i+0x166>
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	079b      	lsls	r3, r3, #30
 8002e4a:	d413      	bmi.n	8002e74 <_printf_i+0x23c>
 8002e4c:	68e0      	ldr	r0, [r4, #12]
 8002e4e:	9b03      	ldr	r3, [sp, #12]
 8002e50:	4298      	cmp	r0, r3
 8002e52:	bfb8      	it	lt
 8002e54:	4618      	movlt	r0, r3
 8002e56:	e7a4      	b.n	8002da2 <_printf_i+0x16a>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	4632      	mov	r2, r6
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	4640      	mov	r0, r8
 8002e60:	47d0      	blx	sl
 8002e62:	3001      	adds	r0, #1
 8002e64:	d09b      	beq.n	8002d9e <_printf_i+0x166>
 8002e66:	3501      	adds	r5, #1
 8002e68:	68e3      	ldr	r3, [r4, #12]
 8002e6a:	9903      	ldr	r1, [sp, #12]
 8002e6c:	1a5b      	subs	r3, r3, r1
 8002e6e:	42ab      	cmp	r3, r5
 8002e70:	dcf2      	bgt.n	8002e58 <_printf_i+0x220>
 8002e72:	e7eb      	b.n	8002e4c <_printf_i+0x214>
 8002e74:	2500      	movs	r5, #0
 8002e76:	f104 0619 	add.w	r6, r4, #25
 8002e7a:	e7f5      	b.n	8002e68 <_printf_i+0x230>
 8002e7c:	080031c9 	.word	0x080031c9
 8002e80:	080031da 	.word	0x080031da

08002e84 <_sbrk_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	2300      	movs	r3, #0
 8002e88:	4d05      	ldr	r5, [pc, #20]	; (8002ea0 <_sbrk_r+0x1c>)
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	602b      	str	r3, [r5, #0]
 8002e90:	f7fd feac 	bl	8000bec <_sbrk>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d102      	bne.n	8002e9e <_sbrk_r+0x1a>
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	b103      	cbz	r3, 8002e9e <_sbrk_r+0x1a>
 8002e9c:	6023      	str	r3, [r4, #0]
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ea0:	20000118 	.word	0x20000118

08002ea4 <__sread>:
 8002ea4:	b510      	push	{r4, lr}
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eac:	f000 f8ae 	bl	800300c <_read_r>
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	bfab      	itete	ge
 8002eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8002eb8:	181b      	addge	r3, r3, r0
 8002eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ebe:	bfac      	ite	ge
 8002ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ec2:	81a3      	strhlt	r3, [r4, #12]
 8002ec4:	bd10      	pop	{r4, pc}

08002ec6 <__swrite>:
 8002ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eca:	461f      	mov	r7, r3
 8002ecc:	898b      	ldrh	r3, [r1, #12]
 8002ece:	4605      	mov	r5, r0
 8002ed0:	05db      	lsls	r3, r3, #23
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	4616      	mov	r6, r2
 8002ed6:	d505      	bpl.n	8002ee4 <__swrite+0x1e>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	2200      	movs	r2, #0
 8002edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee0:	f000 f868 	bl	8002fb4 <_lseek_r>
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	4632      	mov	r2, r6
 8002ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eec:	81a3      	strh	r3, [r4, #12]
 8002eee:	4628      	mov	r0, r5
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002efa:	f000 b817 	b.w	8002f2c <_write_r>

08002efe <__sseek>:
 8002efe:	b510      	push	{r4, lr}
 8002f00:	460c      	mov	r4, r1
 8002f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f06:	f000 f855 	bl	8002fb4 <_lseek_r>
 8002f0a:	1c43      	adds	r3, r0, #1
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	bf15      	itete	ne
 8002f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f1a:	81a3      	strheq	r3, [r4, #12]
 8002f1c:	bf18      	it	ne
 8002f1e:	81a3      	strhne	r3, [r4, #12]
 8002f20:	bd10      	pop	{r4, pc}

08002f22 <__sclose>:
 8002f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f26:	f000 b813 	b.w	8002f50 <_close_r>
	...

08002f2c <_write_r>:
 8002f2c:	b538      	push	{r3, r4, r5, lr}
 8002f2e:	4604      	mov	r4, r0
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	2200      	movs	r2, #0
 8002f36:	4d05      	ldr	r5, [pc, #20]	; (8002f4c <_write_r+0x20>)
 8002f38:	602a      	str	r2, [r5, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f7fd fe0a 	bl	8000b54 <_write>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	d102      	bne.n	8002f4a <_write_r+0x1e>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	b103      	cbz	r3, 8002f4a <_write_r+0x1e>
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	20000118 	.word	0x20000118

08002f50 <_close_r>:
 8002f50:	b538      	push	{r3, r4, r5, lr}
 8002f52:	2300      	movs	r3, #0
 8002f54:	4d05      	ldr	r5, [pc, #20]	; (8002f6c <_close_r+0x1c>)
 8002f56:	4604      	mov	r4, r0
 8002f58:	4608      	mov	r0, r1
 8002f5a:	602b      	str	r3, [r5, #0]
 8002f5c:	f7fd fe16 	bl	8000b8c <_close>
 8002f60:	1c43      	adds	r3, r0, #1
 8002f62:	d102      	bne.n	8002f6a <_close_r+0x1a>
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	b103      	cbz	r3, 8002f6a <_close_r+0x1a>
 8002f68:	6023      	str	r3, [r4, #0]
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
 8002f6c:	20000118 	.word	0x20000118

08002f70 <_fstat_r>:
 8002f70:	b538      	push	{r3, r4, r5, lr}
 8002f72:	2300      	movs	r3, #0
 8002f74:	4d06      	ldr	r5, [pc, #24]	; (8002f90 <_fstat_r+0x20>)
 8002f76:	4604      	mov	r4, r0
 8002f78:	4608      	mov	r0, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	602b      	str	r3, [r5, #0]
 8002f7e:	f7fd fe10 	bl	8000ba2 <_fstat>
 8002f82:	1c43      	adds	r3, r0, #1
 8002f84:	d102      	bne.n	8002f8c <_fstat_r+0x1c>
 8002f86:	682b      	ldr	r3, [r5, #0]
 8002f88:	b103      	cbz	r3, 8002f8c <_fstat_r+0x1c>
 8002f8a:	6023      	str	r3, [r4, #0]
 8002f8c:	bd38      	pop	{r3, r4, r5, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000118 	.word	0x20000118

08002f94 <_isatty_r>:
 8002f94:	b538      	push	{r3, r4, r5, lr}
 8002f96:	2300      	movs	r3, #0
 8002f98:	4d05      	ldr	r5, [pc, #20]	; (8002fb0 <_isatty_r+0x1c>)
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	602b      	str	r3, [r5, #0]
 8002fa0:	f7fd fe0e 	bl	8000bc0 <_isatty>
 8002fa4:	1c43      	adds	r3, r0, #1
 8002fa6:	d102      	bne.n	8002fae <_isatty_r+0x1a>
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	b103      	cbz	r3, 8002fae <_isatty_r+0x1a>
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
 8002fb0:	20000118 	.word	0x20000118

08002fb4 <_lseek_r>:
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4d05      	ldr	r5, [pc, #20]	; (8002fd4 <_lseek_r+0x20>)
 8002fc0:	602a      	str	r2, [r5, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f7fd fe06 	bl	8000bd4 <_lseek>
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	d102      	bne.n	8002fd2 <_lseek_r+0x1e>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	b103      	cbz	r3, 8002fd2 <_lseek_r+0x1e>
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
 8002fd4:	20000118 	.word	0x20000118

08002fd8 <memchr>:
 8002fd8:	4603      	mov	r3, r0
 8002fda:	b510      	push	{r4, lr}
 8002fdc:	b2c9      	uxtb	r1, r1
 8002fde:	4402      	add	r2, r0
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	d101      	bne.n	8002fea <memchr+0x12>
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	e003      	b.n	8002ff2 <memchr+0x1a>
 8002fea:	7804      	ldrb	r4, [r0, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	428c      	cmp	r4, r1
 8002ff0:	d1f6      	bne.n	8002fe0 <memchr+0x8>
 8002ff2:	bd10      	pop	{r4, pc}

08002ff4 <__malloc_lock>:
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <__malloc_lock+0x8>)
 8002ff6:	f7ff bb13 	b.w	8002620 <__retarget_lock_acquire_recursive>
 8002ffa:	bf00      	nop
 8002ffc:	2000010c 	.word	0x2000010c

08003000 <__malloc_unlock>:
 8003000:	4801      	ldr	r0, [pc, #4]	; (8003008 <__malloc_unlock+0x8>)
 8003002:	f7ff bb0e 	b.w	8002622 <__retarget_lock_release_recursive>
 8003006:	bf00      	nop
 8003008:	2000010c 	.word	0x2000010c

0800300c <_read_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	2200      	movs	r2, #0
 8003016:	4d05      	ldr	r5, [pc, #20]	; (800302c <_read_r+0x20>)
 8003018:	602a      	str	r2, [r5, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	f7fd fd7d 	bl	8000b1a <_read>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d102      	bne.n	800302a <_read_r+0x1e>
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	b103      	cbz	r3, 800302a <_read_r+0x1e>
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	20000118 	.word	0x20000118

08003030 <_init>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr

0800303c <_fini>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr
