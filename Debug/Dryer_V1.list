
Dryer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f3c  08004f3c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004f3c  08004f3c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f3c  08004f3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000074  08004fb8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08004fb8  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdab  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002447  00000000  00000000  0002be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  0002e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  0002f080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001950d  00000000  00000000  0002fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8d0  00000000  00000000  00049265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c167  00000000  00000000  00058b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4c9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  000e4cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ca4 	.word	0x08004ca4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004ca4 	.word	0x08004ca4

0800014c <input_init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void input_init(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b31      	ldr	r3, [pc, #196]	; (8000218 <input_init+0xcc>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a30      	ldr	r2, [pc, #192]	; (8000218 <input_init+0xcc>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b2e      	ldr	r3, [pc, #184]	; (8000218 <input_init+0xcc>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b2b      	ldr	r3, [pc, #172]	; (8000218 <input_init+0xcc>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a2a      	ldr	r2, [pc, #168]	; (8000218 <input_init+0xcc>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b28      	ldr	r3, [pc, #160]	; (8000218 <input_init+0xcc>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000182:	4b25      	ldr	r3, [pc, #148]	; (8000218 <input_init+0xcc>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a24      	ldr	r2, [pc, #144]	; (8000218 <input_init+0xcc>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b22      	ldr	r3, [pc, #136]	; (8000218 <input_init+0xcc>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0310 	and.w	r3, r3, #16
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = { 0 };
 800019a:	f107 0310 	add.w	r3, r7, #16
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = DOOR_SW;
 80001a8:	2301      	movs	r3, #1
 80001aa:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001ac:	4b1b      	ldr	r3, [pc, #108]	; (800021c <input_init+0xd0>)
 80001ae:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 80001b0:	2301      	movs	r3, #1
 80001b2:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001b4:	2302      	movs	r3, #2
 80001b6:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001b8:	f107 0310 	add.w	r3, r7, #16
 80001bc:	4619      	mov	r1, r3
 80001be:	4818      	ldr	r0, [pc, #96]	; (8000220 <input_init+0xd4>)
 80001c0:	f001 ff8a 	bl	80020d8 <HAL_GPIO_Init>

	GPIOx.Pin = LIMIT_SW | HEATER_SW | SEL_ROT_SW;
 80001c4:	230e      	movs	r3, #14
 80001c6:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_INPUT;
 80001c8:	2300      	movs	r3, #0
 80001ca:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 80001cc:	2301      	movs	r3, #1
 80001ce:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001d0:	2302      	movs	r3, #2
 80001d2:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	4619      	mov	r1, r3
 80001da:	4811      	ldr	r0, [pc, #68]	; (8000220 <input_init+0xd4>)
 80001dc:	f001 ff7c 	bl	80020d8 <HAL_GPIO_Init>

	GPIOx.Pin = LED;
 80001e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e4:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80001e6:	2301      	movs	r3, #1
 80001e8:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_NOPULL;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOC, &GPIOx);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	480a      	ldr	r0, [pc, #40]	; (8000224 <input_init+0xd8>)
 80001fa:	f001 ff6d 	bl	80020d8 <HAL_GPIO_Init>

	//HAL_GPIO_WritePin(GPIOC, LED, LOW);

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2100      	movs	r1, #0
 8000202:	2006      	movs	r0, #6
 8000204:	f001 ff31 	bl	800206a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000208:	2006      	movs	r0, #6
 800020a:	f001 ff4a 	bl	80020a2 <HAL_NVIC_EnableIRQ>
}
 800020e:	bf00      	nop
 8000210:	3720      	adds	r7, #32
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000
 800021c:	10310000 	.word	0x10310000
 8000220:	40010800 	.word	0x40010800
 8000224:	40011000 	.word	0x40011000

08000228 <is_door_open>:

uint8_t is_door_open(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 800022c:	f001 fe18 	bl	8001e60 <HAL_GetTick>
 8000230:	4602      	mov	r2, r0
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <is_door_open+0x64>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	2b05      	cmp	r3, #5
 800023a:	d923      	bls.n	8000284 <is_door_open+0x5c>
		if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == GPIO_PIN_RESET) {
 800023c:	2101      	movs	r1, #1
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <is_door_open+0x68>)
 8000240:	f002 f8ce 	bl	80023e0 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d114      	bne.n	8000274 <is_door_open+0x4c>
			if (last_state == 1) {
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <is_door_open+0x6c>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2b01      	cmp	r3, #1
 8000252:	d112      	bne.n	800027a <is_door_open+0x52>
				if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == GPIO_PIN_RESET) {
 8000254:	2101      	movs	r1, #1
 8000256:	480e      	ldr	r0, [pc, #56]	; (8000290 <is_door_open+0x68>)
 8000258:	f002 f8c2 	bl	80023e0 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d104      	bne.n	800026c <is_door_open+0x44>
					last_state = 0;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <is_door_open+0x6c>)
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
					return 1;
 8000268:	2301      	movs	r3, #1
 800026a:	e00c      	b.n	8000286 <is_door_open+0x5e>
				} else {
					last_state = 1;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <is_door_open+0x6c>)
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
 8000272:	e002      	b.n	800027a <is_door_open+0x52>
				}
			}
		} else {
			last_state = 1;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <is_door_open+0x6c>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800027a:	f001 fdf1 	bl	8001e60 <HAL_GetTick>
 800027e:	4603      	mov	r3, r0
 8000280:	4a02      	ldr	r2, [pc, #8]	; (800028c <is_door_open+0x64>)
 8000282:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000284:	2300      	movs	r3, #0
}
 8000286:	4618      	mov	r0, r3
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000090 	.word	0x20000090
 8000290:	40010800 	.word	0x40010800
 8000294:	20000094 	.word	0x20000094

08000298 <is_coil_open>:

uint8_t is_coil_open(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 800029c:	f001 fde0 	bl	8001e60 <HAL_GetTick>
 80002a0:	4602      	mov	r2, r0
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <is_coil_open+0x44>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	2b05      	cmp	r3, #5
 80002aa:	d912      	bls.n	80002d2 <is_coil_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, HEATER_SW) == GPIO_PIN_RESET) {
 80002ac:	2108      	movs	r1, #8
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <is_coil_open+0x48>)
 80002b0:	f002 f896 	bl	80023e0 <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d103      	bne.n	80002c2 <is_coil_open+0x2a>
			last_state = 0;
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <is_coil_open+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	e002      	b.n	80002c8 <is_coil_open+0x30>
		} else {
			last_state = 1;
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <is_coil_open+0x4c>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80002c8:	f001 fdca 	bl	8001e60 <HAL_GetTick>
 80002cc:	4603      	mov	r3, r0
 80002ce:	4a03      	ldr	r2, [pc, #12]	; (80002dc <is_coil_open+0x44>)
 80002d0:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <is_coil_open+0x4c>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	b2db      	uxtb	r3, r3
}
 80002d8:	4618      	mov	r0, r3
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000098 	.word	0x20000098
 80002e0:	40010800 	.word	0x40010800
 80002e4:	2000009c 	.word	0x2000009c

080002e8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(DOOR_SW);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f002 f8a7 	bl	8002440 <HAL_GPIO_EXTI_IRQHandler>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <keypad_init>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

void keypad_init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <keypad_init+0x54>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a12      	ldr	r2, [pc, #72]	; (800034c <keypad_init+0x54>)
 8000304:	f043 0308 	orr.w	r3, r3, #8
 8000308:	6193      	str	r3, [r2, #24]
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <keypad_init+0x54>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	f003 0308 	and.w	r3, r3, #8
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = LOW_KEY | MED_KEY | HIGH_KEY | FN_KEY;
 8000324:	f640 4303 	movw	r3, #3075	; 0xc03
 8000328:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_INPUT;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 800032e:	2301      	movs	r3, #1
 8000330:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 8000332:	2303      	movs	r3, #3
 8000334:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(KEYPAD_PORT, &GPIOx);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <keypad_init+0x58>)
 800033e:	f001 fecb 	bl	80020d8 <HAL_GPIO_Init>
}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	40010c00 	.word	0x40010c00

08000354 <scan_keypad>:

uint8_t scan_keypad(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 8000358:	f000 f832 	bl	80003c0 <is_low_key_pressed>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d004      	beq.n	800036c <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 8000362:	4813      	ldr	r0, [pc, #76]	; (80003b0 <scan_keypad+0x5c>)
 8000364:	f003 fb3e 	bl	80039e4 <puts>
		return LOW_KEY_PRESSED;
 8000368:	2301      	movs	r3, #1
 800036a:	e01e      	b.n	80003aa <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 800036c:	f000 f860 	bl	8000430 <is_med_key_pressed>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d004      	beq.n	8000380 <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 8000376:	480f      	ldr	r0, [pc, #60]	; (80003b4 <scan_keypad+0x60>)
 8000378:	f003 fb34 	bl	80039e4 <puts>
		return MED_KEY_PRESSED;
 800037c:	2302      	movs	r3, #2
 800037e:	e014      	b.n	80003aa <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 8000380:	f000 f890 	bl	80004a4 <is_high_key_pressed>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d004      	beq.n	8000394 <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 800038a:	480b      	ldr	r0, [pc, #44]	; (80003b8 <scan_keypad+0x64>)
 800038c:	f003 fb2a 	bl	80039e4 <puts>
		return HIGH_KEY_PRESSED;
 8000390:	2303      	movs	r3, #3
 8000392:	e00a      	b.n	80003aa <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 8000394:	f000 f8c0 	bl	8000518 <is_fn_key_pressed>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d004      	beq.n	80003a8 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 800039e:	4807      	ldr	r0, [pc, #28]	; (80003bc <scan_keypad+0x68>)
 80003a0:	f003 fb20 	bl	80039e4 <puts>
		return FN_KEY_PRESSED;
 80003a4:	2304      	movs	r3, #4
 80003a6:	e000      	b.n	80003aa <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	08004cbc 	.word	0x08004cbc
 80003b4:	08004cd0 	.word	0x08004cd0
 80003b8:	08004ce4 	.word	0x08004ce4
 80003bc:	08004cf8 	.word	0x08004cf8

080003c0 <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 80003c4:	f001 fd4c 	bl	8001e60 <HAL_GetTick>
 80003c8:	4602      	mov	r2, r0
 80003ca:	4b16      	ldr	r3, [pc, #88]	; (8000424 <is_low_key_pressed+0x64>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	2b05      	cmp	r3, #5
 80003d2:	d923      	bls.n	800041c <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 80003d4:	2102      	movs	r1, #2
 80003d6:	4814      	ldr	r0, [pc, #80]	; (8000428 <is_low_key_pressed+0x68>)
 80003d8:	f002 f802 	bl	80023e0 <HAL_GPIO_ReadPin>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d114      	bne.n	800040c <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <is_low_key_pressed+0x6c>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d112      	bne.n	8000412 <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 80003ec:	2102      	movs	r1, #2
 80003ee:	480e      	ldr	r0, [pc, #56]	; (8000428 <is_low_key_pressed+0x68>)
 80003f0:	f001 fff6 	bl	80023e0 <HAL_GPIO_ReadPin>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d104      	bne.n	8000404 <is_low_key_pressed+0x44>
				{
					last_state = 0;
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <is_low_key_pressed+0x6c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
					return 1;
 8000400:	2301      	movs	r3, #1
 8000402:	e00c      	b.n	800041e <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <is_low_key_pressed+0x6c>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
 800040a:	e002      	b.n	8000412 <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <is_low_key_pressed+0x6c>)
 800040e:	2201      	movs	r2, #1
 8000410:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000412:	f001 fd25 	bl	8001e60 <HAL_GetTick>
 8000416:	4603      	mov	r3, r0
 8000418:	4a02      	ldr	r2, [pc, #8]	; (8000424 <is_low_key_pressed+0x64>)
 800041a:	6013      	str	r3, [r2, #0]
	}
	return 0;
 800041c:	2300      	movs	r3, #0
}
 800041e:	4618      	mov	r0, r3
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200000a0 	.word	0x200000a0
 8000428:	40010c00 	.word	0x40010c00
 800042c:	200000a4 	.word	0x200000a4

08000430 <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 8000434:	f001 fd14 	bl	8001e60 <HAL_GetTick>
 8000438:	4602      	mov	r2, r0
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <is_med_key_pressed+0x68>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	2b05      	cmp	r3, #5
 8000442:	d925      	bls.n	8000490 <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 8000444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000448:	4814      	ldr	r0, [pc, #80]	; (800049c <is_med_key_pressed+0x6c>)
 800044a:	f001 ffc9 	bl	80023e0 <HAL_GPIO_ReadPin>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d115      	bne.n	8000480 <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <is_med_key_pressed+0x70>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	2b01      	cmp	r3, #1
 800045c:	d113      	bne.n	8000486 <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 800045e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000462:	480e      	ldr	r0, [pc, #56]	; (800049c <is_med_key_pressed+0x6c>)
 8000464:	f001 ffbc 	bl	80023e0 <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d104      	bne.n	8000478 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <is_med_key_pressed+0x70>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
					return 1;
 8000474:	2301      	movs	r3, #1
 8000476:	e00c      	b.n	8000492 <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <is_med_key_pressed+0x70>)
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	e002      	b.n	8000486 <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 8000480:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <is_med_key_pressed+0x70>)
 8000482:	2201      	movs	r2, #1
 8000484:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000486:	f001 fceb 	bl	8001e60 <HAL_GetTick>
 800048a:	4603      	mov	r3, r0
 800048c:	4a02      	ldr	r2, [pc, #8]	; (8000498 <is_med_key_pressed+0x68>)
 800048e:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000a8 	.word	0x200000a8
 800049c:	40010c00 	.word	0x40010c00
 80004a0:	200000ac 	.word	0x200000ac

080004a4 <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 80004a8:	f001 fcda 	bl	8001e60 <HAL_GetTick>
 80004ac:	4602      	mov	r2, r0
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <is_high_key_pressed+0x68>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	2b05      	cmp	r3, #5
 80004b6:	d925      	bls.n	8000504 <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 80004b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004bc:	4814      	ldr	r0, [pc, #80]	; (8000510 <is_high_key_pressed+0x6c>)
 80004be:	f001 ff8f 	bl	80023e0 <HAL_GPIO_ReadPin>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d115      	bne.n	80004f4 <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <is_high_key_pressed+0x70>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d113      	bne.n	80004fa <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 80004d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d6:	480e      	ldr	r0, [pc, #56]	; (8000510 <is_high_key_pressed+0x6c>)
 80004d8:	f001 ff82 	bl	80023e0 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d104      	bne.n	80004ec <is_high_key_pressed+0x48>
				{
					last_state = 0;
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <is_high_key_pressed+0x70>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
					return 1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	e00c      	b.n	8000506 <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <is_high_key_pressed+0x70>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	701a      	strb	r2, [r3, #0]
 80004f2:	e002      	b.n	80004fa <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <is_high_key_pressed+0x70>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80004fa:	f001 fcb1 	bl	8001e60 <HAL_GetTick>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a02      	ldr	r2, [pc, #8]	; (800050c <is_high_key_pressed+0x68>)
 8000502:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200000b0 	.word	0x200000b0
 8000510:	40010c00 	.word	0x40010c00
 8000514:	200000b4 	.word	0x200000b4

08000518 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 800051c:	f001 fca0 	bl	8001e60 <HAL_GetTick>
 8000520:	4602      	mov	r2, r0
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <is_fn_key_pressed+0x64>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	2b05      	cmp	r3, #5
 800052a:	d923      	bls.n	8000574 <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 800052c:	2101      	movs	r1, #1
 800052e:	4814      	ldr	r0, [pc, #80]	; (8000580 <is_fn_key_pressed+0x68>)
 8000530:	f001 ff56 	bl	80023e0 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d114      	bne.n	8000564 <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <is_fn_key_pressed+0x6c>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b01      	cmp	r3, #1
 8000542:	d112      	bne.n	800056a <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8000544:	2101      	movs	r1, #1
 8000546:	480e      	ldr	r0, [pc, #56]	; (8000580 <is_fn_key_pressed+0x68>)
 8000548:	f001 ff4a 	bl	80023e0 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d104      	bne.n	800055c <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <is_fn_key_pressed+0x6c>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
					return 1;
 8000558:	2301      	movs	r3, #1
 800055a:	e00c      	b.n	8000576 <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <is_fn_key_pressed+0x6c>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e002      	b.n	800056a <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <is_fn_key_pressed+0x6c>)
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800056a:	f001 fc79 	bl	8001e60 <HAL_GetTick>
 800056e:	4603      	mov	r3, r0
 8000570:	4a02      	ldr	r2, [pc, #8]	; (800057c <is_fn_key_pressed+0x64>)
 8000572:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200000b8 	.word	0x200000b8
 8000580:	40010c00 	.word	0x40010c00
 8000584:	200000bc 	.word	0x200000bc

08000588 <lcd_gpio_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_gpio_init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
	__HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	4b47      	ldr	r3, [pc, #284]	; (80006ac <lcd_gpio_init+0x124>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a46      	ldr	r2, [pc, #280]	; (80006ac <lcd_gpio_init+0x124>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b44      	ldr	r3, [pc, #272]	; (80006ac <lcd_gpio_init+0x124>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_AFIO_REMAP_SWJ_NONJTRST();
 80005a6:	4b42      	ldr	r3, [pc, #264]	; (80006b0 <lcd_gpio_init+0x128>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
 80005ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
 80005b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
 80005bc:	4a3c      	ldr	r2, [pc, #240]	; (80006b0 <lcd_gpio_init+0x128>)
 80005be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c0:	6053      	str	r3, [r2, #4]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005c2:	4b3b      	ldr	r3, [pc, #236]	; (80006b0 <lcd_gpio_init+0x128>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	623b      	str	r3, [r7, #32]
 80005c8:	6a3b      	ldr	r3, [r7, #32]
 80005ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ce:	623b      	str	r3, [r7, #32]
 80005d0:	6a3b      	ldr	r3, [r7, #32]
 80005d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d6:	623b      	str	r3, [r7, #32]
 80005d8:	4a35      	ldr	r2, [pc, #212]	; (80006b0 <lcd_gpio_init+0x128>)
 80005da:	6a3b      	ldr	r3, [r7, #32]
 80005dc:	6053      	str	r3, [r2, #4]

	//__HAL_AFIO_REMAP_SWJ_DISABLE();

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b33      	ldr	r3, [pc, #204]	; (80006ac <lcd_gpio_init+0x124>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a32      	ldr	r2, [pc, #200]	; (80006ac <lcd_gpio_init+0x124>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b30      	ldr	r3, [pc, #192]	; (80006ac <lcd_gpio_init+0x124>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <lcd_gpio_init+0x124>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a2c      	ldr	r2, [pc, #176]	; (80006ac <lcd_gpio_init+0x124>)
 80005fc:	f043 0308 	orr.w	r3, r3, #8
 8000600:	6193      	str	r3, [r2, #24]
 8000602:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <lcd_gpio_init+0x124>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 0308 	and.w	r3, r3, #8
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000622:	4824      	ldr	r0, [pc, #144]	; (80006b4 <lcd_gpio_init+0x12c>)
 8000624:	f001 fef3 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062e:	4821      	ldr	r0, [pc, #132]	; (80006b4 <lcd_gpio_init+0x12c>)
 8000630:	f001 feed 	bl	800240e <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_RS | LCD_PIN_EN;
 8000634:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000638:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2302      	movs	r3, #2
 8000644:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_CTRL, &GPIOx);
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	4619      	mov	r1, r3
 800064c:	4819      	ldr	r0, [pc, #100]	; (80006b4 <lcd_gpio_init+0x12c>)
 800064e:	f001 fd43 	bl	80020d8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	21f8      	movs	r1, #248	; 0xf8
 8000656:	4817      	ldr	r0, [pc, #92]	; (80006b4 <lcd_gpio_init+0x12c>)
 8000658:	f001 fed9 	bl	800240e <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4;
 800065c:	23f8      	movs	r3, #248	; 0xf8
 800065e:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 8000664:	2302      	movs	r3, #2
 8000666:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2302      	movs	r3, #2
 800066a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D0_4, &GPIOx);
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	4619      	mov	r1, r3
 8000672:	4810      	ldr	r0, [pc, #64]	; (80006b4 <lcd_gpio_init+0x12c>)
 8000674:	f001 fd30 	bl	80020d8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800067e:	480e      	ldr	r0, [pc, #56]	; (80006b8 <lcd_gpio_init+0x130>)
 8000680:	f001 fec5 	bl	800240e <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7;
 8000684:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8000688:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 800068e:	2302      	movs	r3, #2
 8000690:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2302      	movs	r3, #2
 8000694:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D5_7, &GPIOx);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <lcd_gpio_init+0x130>)
 800069e:	f001 fd1b 	bl	80020d8 <HAL_GPIO_Init>

}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010000 	.word	0x40010000
 80006b4:	40010c00 	.word	0x40010c00
 80006b8:	40010800 	.word	0x40010800

080006bc <lcd_init>:

void lcd_init(uint8_t fourbitmode)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d003      	beq.n	80006d4 <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <lcd_init+0x28>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 80006d2:	e002      	b.n	80006da <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <lcd_init+0x28>)
 80006d6:	2210      	movs	r2, #16
 80006d8:	701a      	strb	r2, [r3, #0]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	200000bd 	.word	0x200000bd

080006e8 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	460b      	mov	r3, r1
 80006f4:	71bb      	strb	r3, [r7, #6]
 80006f6:	4613      	mov	r3, r2
 80006f8:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 80006fa:	79bb      	ldrb	r3, [r7, #6]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d906      	bls.n	800070e <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <lcd_begin+0xdc>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <lcd_begin+0xdc>)
 800070c:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 800070e:	4a2e      	ldr	r2, [pc, #184]	; (80007c8 <lcd_begin+0xe0>)
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <lcd_begin+0xe4>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 800071a:	797b      	ldrb	r3, [r7, #5]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d009      	beq.n	8000734 <lcd_begin+0x4c>
 8000720:	79bb      	ldrb	r3, [r7, #6]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d106      	bne.n	8000734 <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <lcd_begin+0xdc>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <lcd_begin+0xdc>)
 8000732:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000738:	f001 fb9c 	bl	8001e74 <HAL_Delay>
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS | LCD_PIN_EN, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000742:	4823      	ldr	r0, [pc, #140]	; (80007d0 <lcd_begin+0xe8>)
 8000744:	f001 fe63 	bl	800240e <HAL_GPIO_WritePin>
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <lcd_begin+0xdc>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f902 	bl	800095c <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 8000758:	200a      	movs	r0, #10
 800075a:	f001 fb8b 	bl	8001e74 <HAL_Delay>

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <lcd_begin+0xdc>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f8f7 	bl	800095c <lcd_send_cmd>
	    HAL_Delay(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f001 fb80 	bl	8001e74 <HAL_Delay>

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <lcd_begin+0xdc>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f043 0320 	orr.w	r3, r3, #32
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f8ec 	bl	800095c <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <lcd_begin+0xdc>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f043 0320 	orr.w	r3, r3, #32
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f8e4 	bl	800095c <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <lcd_begin+0xec>)
 8000796:	2204      	movs	r2, #4
 8000798:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 800079a:	2001      	movs	r0, #1
 800079c:	f000 f828 	bl	80007f0 <lcd_display>

	// clear it off
	lcd_clear();
 80007a0:	f000 f8f2 	bl	8000988 <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <lcd_begin+0xf0>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <lcd_begin+0xf0>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f8d1 	bl	800095c <lcd_send_cmd>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000bd 	.word	0x200000bd
 80007c8:	200000c0 	.word	0x200000c0
 80007cc:	200000c1 	.word	0x200000c1
 80007d0:	40010c00 	.word	0x40010c00
 80007d4:	200000be 	.word	0x200000be
 80007d8:	200000bf 	.word	0x200000bf

080007dc <lcd_home>:

void lcd_home(void){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 f8bb 	bl	800095c <lcd_send_cmd>
	HAL_Delay(2); // this command takes a long time!
 80007e6:	2002      	movs	r0, #2
 80007e8:	f001 fb44 	bl	8001e74 <HAL_Delay>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <lcd_display>:

void lcd_display(uint8_t state)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	if(state)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00f      	beq.n	8000820 <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <lcd_display+0x58>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <lcd_display+0x58>)
 800080c:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <lcd_display+0x58>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f89f 	bl	800095c <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 800081e:	e00e      	b.n	800083e <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <lcd_display+0x58>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	f023 0304 	bic.w	r3, r3, #4
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <lcd_display+0x58>)
 800082c:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <lcd_display+0x58>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	f043 0308 	orr.w	r3, r3, #8
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f88f 	bl	800095c <lcd_send_cmd>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000be 	.word	0x200000be

0800084c <lcd_enable>:

void lcd_enable(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <lcd_enable+0x40>)
 8000858:	f001 fdd9 	bl	800240e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f001 fb09 	bl	8001e74 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <lcd_enable+0x40>)
 800086a:	f001 fdd0 	bl	800240e <HAL_GPIO_WritePin>
	HAL_Delay(1); // enable pulse must be >450ns
 800086e:	2001      	movs	r0, #1
 8000870:	f001 fb00 	bl	8001e74 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <lcd_enable+0x40>)
 800087c:	f001 fdc7 	bl	800240e <HAL_GPIO_WritePin>
	HAL_Delay(1); // commands need > 37us to settle
 8000880:	2001      	movs	r0, #1
 8000882:	f001 faf7 	bl	8001e74 <HAL_Delay>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40010c00 	.word	0x40010c00

08000890 <write_8bit>:

void write_8bit(uint8_t value)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D7, (value >> 7) & 0x01);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	09db      	lsrs	r3, r3, #7
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a6:	482b      	ldr	r0, [pc, #172]	; (8000954 <write_8bit+0xc4>)
 80008a8:	f001 fdb1 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D6, (value >> 6) & 0x01);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	099b      	lsrs	r3, r3, #6
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	461a      	mov	r2, r3
 80008ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008be:	4825      	ldr	r0, [pc, #148]	; (8000954 <write_8bit+0xc4>)
 80008c0:	f001 fda5 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5, (value >> 5) & 0x01);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d6:	481f      	ldr	r0, [pc, #124]	; (8000954 <write_8bit+0xc4>)
 80008d8:	f001 fd99 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D4, (value >> 4) & 0x01);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	091b      	lsrs	r3, r3, #4
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	2108      	movs	r1, #8
 80008ec:	481a      	ldr	r0, [pc, #104]	; (8000958 <write_8bit+0xc8>)
 80008ee:	f001 fd8e 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D3, (value >> 3) & 0x01);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	2110      	movs	r1, #16
 8000902:	4815      	ldr	r0, [pc, #84]	; (8000958 <write_8bit+0xc8>)
 8000904:	f001 fd83 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D2, (value >> 2) & 0x01);
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	2120      	movs	r1, #32
 8000918:	480f      	ldr	r0, [pc, #60]	; (8000958 <write_8bit+0xc8>)
 800091a:	f001 fd78 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D1, (value >> 1) & 0x01);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	2140      	movs	r1, #64	; 0x40
 800092e:	480a      	ldr	r0, [pc, #40]	; (8000958 <write_8bit+0xc8>)
 8000930:	f001 fd6d 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0, (value >> 0) & 0x01);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	2180      	movs	r1, #128	; 0x80
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <write_8bit+0xc8>)
 8000942:	f001 fd64 	bl	800240e <HAL_GPIO_WritePin>

	lcd_enable();
 8000946:	f7ff ff81 	bl	800084c <lcd_enable>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40010800 	.word	0x40010800
 8000958:	40010c00 	.word	0x40010c00

0800095c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <lcd_send_cmd+0x28>)
 800096e:	f001 fd4e 	bl	800240e <HAL_GPIO_WritePin>
	write_8bit(cmd);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff8b 	bl	8000890 <write_8bit>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40010c00 	.word	0x40010c00

08000988 <lcd_clear>:

void lcd_clear(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff ffe5 	bl	800095c <lcd_send_cmd>
	HAL_Delay(2);
 8000992:	2002      	movs	r0, #2
 8000994:	f001 fa6e 	bl	8001e74 <HAL_Delay>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <lcd_send_data+0x28>)
 80009ae:	f001 fd2e 	bl	800240e <HAL_GPIO_WritePin>
	write_8bit(data);
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff6b 	bl	8000890 <write_8bit>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ffe1 	bl	800099c <lcd_send_data>
		str++;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3301      	adds	r3, #1
 80009de:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f3      	bne.n	80009d0 <lcd_print+0x8>
}
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	460a      	mov	r2, r1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <lcd_set_cursor+0x58>)
 8000a06:	f107 0408 	add.w	r4, r7, #8
 8000a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _numlines) {
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <lcd_set_cursor+0x5c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	79ba      	ldrb	r2, [r7, #6]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d903      	bls.n	8000a22 <lcd_set_cursor+0x2e>
		row = _numlines - 1; // we count rows starting w/0
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <lcd_set_cursor+0x5c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	71bb      	strb	r3, [r7, #6]
		}
	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
 8000a22:	79bb      	ldrb	r3, [r7, #6]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	3318      	adds	r3, #24
 8000a28:	443b      	add	r3, r7
 8000a2a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4413      	add	r3, r2
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff8d 	bl	800095c <lcd_send_cmd>
}
 8000a42:	bf00      	nop
 8000a44:	371c      	adds	r7, #28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd90      	pop	{r4, r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08004d08 	.word	0x08004d08
 8000a50:	200000c0 	.word	0x200000c0

08000a54 <lcd_update>:
void mode_level_page(void);
void limit_sw_err_page(void);
void complete_page(void);

void lcd_update(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(cur_page){
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <lcd_update+0x5c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	d825      	bhi.n	8000aac <lcd_update+0x58>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <lcd_update+0x14>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a89 	.word	0x08000a89
 8000a6c:	08000a8f 	.word	0x08000a8f
 8000a70:	08000a8f 	.word	0x08000a8f
 8000a74:	08000a8f 	.word	0x08000a8f
 8000a78:	08000a95 	.word	0x08000a95
 8000a7c:	08000a9b 	.word	0x08000a9b
 8000a80:	08000aa1 	.word	0x08000aa1
 8000a84:	08000aa7 	.word	0x08000aa7
	case INIT_PAGE:
		welcome_page();
 8000a88:	f000 f814 	bl	8000ab4 <welcome_page>
		break;
 8000a8c:	e00e      	b.n	8000aac <lcd_update+0x58>
	case LOW_LEVEL_PAGE:
	case MED_LEVEL_PAGE:
	case HIGH_LEVEL_PAGE:
		mode_level_page();
 8000a8e:	f000 f8eb 	bl	8000c68 <mode_level_page>
		break;
 8000a92:	e00b      	b.n	8000aac <lcd_update+0x58>
	case COMPLETE_PAGE:
		complete_page();
 8000a94:	f000 f8be 	bl	8000c14 <complete_page>
		break;
 8000a98:	e008      	b.n	8000aac <lcd_update+0x58>
	case DOOR_OPEN_PAGE:
		door_open_page();
 8000a9a:	f000 f83d 	bl	8000b18 <door_open_page>
		break;
 8000a9e:	e005      	b.n	8000aac <lcd_update+0x58>
	case LIMIT_SW_ERR_PAGE:
		limit_sw_err_page();
 8000aa0:	f000 f88e 	bl	8000bc0 <limit_sw_err_page>
		break;
 8000aa4:	e002      	b.n	8000aac <lcd_update+0x58>
	case HEATER_COIL_PAGE:
		heater_coil_page();
 8000aa6:	f000 f861 	bl	8000b6c <heater_coil_page>
		break;
 8000aaa:	bf00      	nop
	}

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000012c 	.word	0x2000012c

08000ab4 <welcome_page>:

void welcome_page(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <welcome_page+0x50>)
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <welcome_page+0x54>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d006      	beq.n	8000ad2 <welcome_page+0x1e>
	{
		lcd_clear();
 8000ac4:	f7ff ff60 	bl	8000988 <lcd_clear>
		last_page = cur_page;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <welcome_page+0x54>)
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <welcome_page+0x50>)
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e001      	b.n	8000ad6 <welcome_page+0x22>
	}
	else{
		lcd_home();
 8000ad2:	f7ff fe83 	bl	80007dc <lcd_home>
	}
	
	lcd_set_cursor(6, 0);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2006      	movs	r0, #6
 8000ada:	f7ff ff8b 	bl	80009f4 <lcd_set_cursor>
	lcd_print("WELCOME!");
 8000ade:	480b      	ldr	r0, [pc, #44]	; (8000b0c <welcome_page+0x58>)
 8000ae0:	f7ff ff72 	bl	80009c8 <lcd_print>
	lcd_set_cursor(3,2);
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	f7ff ff84 	bl	80009f4 <lcd_set_cursor>
	lcd_print("Select a mode");
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <welcome_page+0x5c>)
 8000aee:	f7ff ff6b 	bl	80009c8 <lcd_print>
	lcd_set_cursor(3,3);
 8000af2:	2103      	movs	r1, #3
 8000af4:	2003      	movs	r0, #3
 8000af6:	f7ff ff7d 	bl	80009f4 <lcd_set_cursor>
	lcd_print("to start dryer");
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <welcome_page+0x60>)
 8000afc:	f7ff ff64 	bl	80009c8 <lcd_print>
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000012d 	.word	0x2000012d
 8000b08:	2000012c 	.word	0x2000012c
 8000b0c:	08004d18 	.word	0x08004d18
 8000b10:	08004d24 	.word	0x08004d24
 8000b14:	08004d34 	.word	0x08004d34

08000b18 <door_open_page>:

void door_open_page(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <door_open_page+0x44>)
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <door_open_page+0x48>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d006      	beq.n	8000b36 <door_open_page+0x1e>
	{
		lcd_clear();
 8000b28:	f7ff ff2e 	bl	8000988 <lcd_clear>
		last_page = cur_page;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <door_open_page+0x48>)
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <door_open_page+0x44>)
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	e001      	b.n	8000b3a <door_open_page+0x22>
	}
	else{
		lcd_home();
 8000b36:	f7ff fe51 	bl	80007dc <lcd_home>
	}

	lcd_set_cursor(6, 1);
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	2006      	movs	r0, #6
 8000b3e:	f7ff ff59 	bl	80009f4 <lcd_set_cursor>
	lcd_print("DOOR");
 8000b42:	4808      	ldr	r0, [pc, #32]	; (8000b64 <door_open_page+0x4c>)
 8000b44:	f7ff ff40 	bl	80009c8 <lcd_print>
	lcd_set_cursor(6,2);
 8000b48:	2102      	movs	r1, #2
 8000b4a:	2006      	movs	r0, #6
 8000b4c:	f7ff ff52 	bl	80009f4 <lcd_set_cursor>
	lcd_print("OPEN");
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <door_open_page+0x50>)
 8000b52:	f7ff ff39 	bl	80009c8 <lcd_print>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000012d 	.word	0x2000012d
 8000b60:	2000012c 	.word	0x2000012c
 8000b64:	08004d44 	.word	0x08004d44
 8000b68:	08004d4c 	.word	0x08004d4c

08000b6c <heater_coil_page>:

void heater_coil_page(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <heater_coil_page+0x44>)
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <heater_coil_page+0x48>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d006      	beq.n	8000b8a <heater_coil_page+0x1e>
	{
		lcd_clear();
 8000b7c:	f7ff ff04 	bl	8000988 <lcd_clear>
		last_page = cur_page;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <heater_coil_page+0x48>)
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <heater_coil_page+0x44>)
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e001      	b.n	8000b8e <heater_coil_page+0x22>
	}
	else{
		lcd_home();
 8000b8a:	f7ff fe27 	bl	80007dc <lcd_home>
	}

	lcd_set_cursor(5, 1);
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2005      	movs	r0, #5
 8000b92:	f7ff ff2f 	bl	80009f4 <lcd_set_cursor>
	lcd_print("HEATER");
 8000b96:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <heater_coil_page+0x4c>)
 8000b98:	f7ff ff16 	bl	80009c8 <lcd_print>
	lcd_set_cursor(5,2);
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	2005      	movs	r0, #5
 8000ba0:	f7ff ff28 	bl	80009f4 <lcd_set_cursor>
	lcd_print("ERROR");
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <heater_coil_page+0x50>)
 8000ba6:	f7ff ff0f 	bl	80009c8 <lcd_print>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000012d 	.word	0x2000012d
 8000bb4:	2000012c 	.word	0x2000012c
 8000bb8:	08004d54 	.word	0x08004d54
 8000bbc:	08004d5c 	.word	0x08004d5c

08000bc0 <limit_sw_err_page>:

void limit_sw_err_page(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <limit_sw_err_page+0x44>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <limit_sw_err_page+0x48>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d006      	beq.n	8000bde <limit_sw_err_page+0x1e>
	{
		lcd_clear();
 8000bd0:	f7ff feda 	bl	8000988 <lcd_clear>
		last_page = cur_page;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <limit_sw_err_page+0x48>)
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <limit_sw_err_page+0x44>)
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e001      	b.n	8000be2 <limit_sw_err_page+0x22>
	}
	else{
		lcd_home();
 8000bde:	f7ff fdfd 	bl	80007dc <lcd_home>
	}

	lcd_set_cursor(5, 0);
 8000be2:	2100      	movs	r1, #0
 8000be4:	2005      	movs	r0, #5
 8000be6:	f7ff ff05 	bl	80009f4 <lcd_set_cursor>
	lcd_print("ERROR");
 8000bea:	4808      	ldr	r0, [pc, #32]	; (8000c0c <limit_sw_err_page+0x4c>)
 8000bec:	f7ff feec 	bl	80009c8 <lcd_print>
	lcd_set_cursor(2, 2);
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	f7ff fefe 	bl	80009f4 <lcd_set_cursor>
	lcd_print("AIR");
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <limit_sw_err_page+0x50>)
 8000bfa:	f7ff fee5 	bl	80009c8 <lcd_print>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000012d 	.word	0x2000012d
 8000c08:	2000012c 	.word	0x2000012c
 8000c0c:	08004d5c 	.word	0x08004d5c
 8000c10:	08004d64 	.word	0x08004d64

08000c14 <complete_page>:

void complete_page(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <complete_page+0x44>)
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <complete_page+0x48>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d006      	beq.n	8000c32 <complete_page+0x1e>
	{
		lcd_clear();
 8000c24:	f7ff feb0 	bl	8000988 <lcd_clear>
		last_page = cur_page;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <complete_page+0x48>)
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <complete_page+0x44>)
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e001      	b.n	8000c36 <complete_page+0x22>
	}
	else{
		lcd_home();
 8000c32:	f7ff fdd3 	bl	80007dc <lcd_home>
	}

	lcd_set_cursor(4, 0);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2004      	movs	r0, #4
 8000c3a:	f7ff fedb 	bl	80009f4 <lcd_set_cursor>
	lcd_print("PROCESS");
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <complete_page+0x4c>)
 8000c40:	f7ff fec2 	bl	80009c8 <lcd_print>
	lcd_set_cursor(0, 2);
 8000c44:	2102      	movs	r1, #2
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff fed4 	bl	80009f4 <lcd_set_cursor>
	lcd_print("COMPLETE");
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <complete_page+0x50>)
 8000c4e:	f7ff febb 	bl	80009c8 <lcd_print>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000012d 	.word	0x2000012d
 8000c5c:	2000012c 	.word	0x2000012c
 8000c60:	08004d68 	.word	0x08004d68
 8000c64:	08004d70 	.word	0x08004d70

08000c68 <mode_level_page>:

void mode_level_page(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	static uint16_t a = 0,b = 0;
	if(last_page!=cur_page)
 8000c6c:	4b4c      	ldr	r3, [pc, #304]	; (8000da0 <mode_level_page+0x138>)
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <mode_level_page+0x13c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d006      	beq.n	8000c86 <mode_level_page+0x1e>
	{
		lcd_clear();
 8000c78:	f7ff fe86 	bl	8000988 <lcd_clear>
		last_page = cur_page;
 8000c7c:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <mode_level_page+0x13c>)
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b47      	ldr	r3, [pc, #284]	; (8000da0 <mode_level_page+0x138>)
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e001      	b.n	8000c8a <mode_level_page+0x22>
	}
	else lcd_home();
 8000c86:	f7ff fda9 	bl	80007dc <lcd_home>
	a = dryer.heatTime % 60;
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <mode_level_page+0x140>)
 8000c8c:	885a      	ldrh	r2, [r3, #2]
 8000c8e:	4b47      	ldr	r3, [pc, #284]	; (8000dac <mode_level_page+0x144>)
 8000c90:	fba3 1302 	umull	r1, r3, r3, r2
 8000c94:	0959      	lsrs	r1, r3, #5
 8000c96:	460b      	mov	r3, r1
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	1a5b      	subs	r3, r3, r1
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <mode_level_page+0x148>)
 8000ca4:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 8000ca6:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <mode_level_page+0x140>)
 8000ca8:	885b      	ldrh	r3, [r3, #2]
 8000caa:	4a40      	ldr	r2, [pc, #256]	; (8000dac <mode_level_page+0x144>)
 8000cac:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb0:	095b      	lsrs	r3, r3, #5
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <mode_level_page+0x14c>)
 8000cb6:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"h=%02d:%02d",b,a);
 8000cb8:	4b3e      	ldr	r3, [pc, #248]	; (8000db4 <mode_level_page+0x14c>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b3c      	ldr	r3, [pc, #240]	; (8000db0 <mode_level_page+0x148>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	493d      	ldr	r1, [pc, #244]	; (8000db8 <mode_level_page+0x150>)
 8000cc4:	483d      	ldr	r0, [pc, #244]	; (8000dbc <mode_level_page+0x154>)
 8000cc6:	f002 fe95 	bl	80039f4 <siprintf>
	lcd_set_cursor(0, 0);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fe91 	bl	80009f4 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000cd2:	483a      	ldr	r0, [pc, #232]	; (8000dbc <mode_level_page+0x154>)
 8000cd4:	f7ff fe78 	bl	80009c8 <lcd_print>

	a = dryer.coolTime % 60;
 8000cd8:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <mode_level_page+0x140>)
 8000cda:	889a      	ldrh	r2, [r3, #4]
 8000cdc:	4b33      	ldr	r3, [pc, #204]	; (8000dac <mode_level_page+0x144>)
 8000cde:	fba3 1302 	umull	r1, r3, r3, r2
 8000ce2:	0959      	lsrs	r1, r3, #5
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <mode_level_page+0x148>)
 8000cf2:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <mode_level_page+0x140>)
 8000cf6:	889b      	ldrh	r3, [r3, #4]
 8000cf8:	4a2c      	ldr	r2, [pc, #176]	; (8000dac <mode_level_page+0x144>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <mode_level_page+0x14c>)
 8000d04:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"c=%02d:%02d",b,a);
 8000d06:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <mode_level_page+0x14c>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <mode_level_page+0x148>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	492b      	ldr	r1, [pc, #172]	; (8000dc0 <mode_level_page+0x158>)
 8000d12:	482a      	ldr	r0, [pc, #168]	; (8000dbc <mode_level_page+0x154>)
 8000d14:	f002 fe6e 	bl	80039f4 <siprintf>
	lcd_set_cursor(13, 0);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	200d      	movs	r0, #13
 8000d1c:	f7ff fe6a 	bl	80009f4 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d20:	4826      	ldr	r0, [pc, #152]	; (8000dbc <mode_level_page+0x154>)
 8000d22:	f7ff fe51 	bl	80009c8 <lcd_print>

	if(dryer.mode == LOW_LEVEL)sprintf(lcd_buf,"LEVEL: LOW");
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <mode_level_page+0x140>)
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d104      	bne.n	8000d38 <mode_level_page+0xd0>
 8000d2e:	4925      	ldr	r1, [pc, #148]	; (8000dc4 <mode_level_page+0x15c>)
 8000d30:	4822      	ldr	r0, [pc, #136]	; (8000dbc <mode_level_page+0x154>)
 8000d32:	f002 fe5f 	bl	80039f4 <siprintf>
 8000d36:	e010      	b.n	8000d5a <mode_level_page+0xf2>
	else if(dryer.mode == MED_LEVEL)sprintf(lcd_buf,"LEVEL: MEDIUM");
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <mode_level_page+0x140>)
 8000d3a:	785b      	ldrb	r3, [r3, #1]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d104      	bne.n	8000d4a <mode_level_page+0xe2>
 8000d40:	4921      	ldr	r1, [pc, #132]	; (8000dc8 <mode_level_page+0x160>)
 8000d42:	481e      	ldr	r0, [pc, #120]	; (8000dbc <mode_level_page+0x154>)
 8000d44:	f002 fe56 	bl	80039f4 <siprintf>
 8000d48:	e007      	b.n	8000d5a <mode_level_page+0xf2>
	else if(dryer.mode == HIGH_LEVEL)sprintf(lcd_buf,"LEVEL: HIGH");
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <mode_level_page+0x140>)
 8000d4c:	785b      	ldrb	r3, [r3, #1]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d103      	bne.n	8000d5a <mode_level_page+0xf2>
 8000d52:	491e      	ldr	r1, [pc, #120]	; (8000dcc <mode_level_page+0x164>)
 8000d54:	4819      	ldr	r0, [pc, #100]	; (8000dbc <mode_level_page+0x154>)
 8000d56:	f002 fe4d 	bl	80039f4 <siprintf>
	else;

	lcd_set_cursor(5, 1);
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	2005      	movs	r0, #5
 8000d5e:	f7ff fe49 	bl	80009f4 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d62:	4816      	ldr	r0, [pc, #88]	; (8000dbc <mode_level_page+0x154>)
 8000d64:	f7ff fe30 	bl	80009c8 <lcd_print>

	sprintf(lcd_buf,"Set:%02dC",dryer.setTemp);
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <mode_level_page+0x140>)
 8000d6a:	799b      	ldrb	r3, [r3, #6]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4918      	ldr	r1, [pc, #96]	; (8000dd0 <mode_level_page+0x168>)
 8000d70:	4812      	ldr	r0, [pc, #72]	; (8000dbc <mode_level_page+0x154>)
 8000d72:	f002 fe3f 	bl	80039f4 <siprintf>
	lcd_set_cursor(0, 3);
 8000d76:	2103      	movs	r1, #3
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fe3b 	bl	80009f4 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <mode_level_page+0x154>)
 8000d80:	f7ff fe22 	bl	80009c8 <lcd_print>

	sprintf(lcd_buf,"Cur:ERR");
 8000d84:	4913      	ldr	r1, [pc, #76]	; (8000dd4 <mode_level_page+0x16c>)
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <mode_level_page+0x154>)
 8000d88:	f002 fe34 	bl	80039f4 <siprintf>
	lcd_set_cursor(13, 3);
 8000d8c:	2103      	movs	r1, #3
 8000d8e:	200d      	movs	r0, #13
 8000d90:	f7ff fe30 	bl	80009f4 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <mode_level_page+0x154>)
 8000d96:	f7ff fe17 	bl	80009c8 <lcd_print>
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000012d 	.word	0x2000012d
 8000da4:	2000012c 	.word	0x2000012c
 8000da8:	20000118 	.word	0x20000118
 8000dac:	88888889 	.word	0x88888889
 8000db0:	20000114 	.word	0x20000114
 8000db4:	20000116 	.word	0x20000116
 8000db8:	08004d7c 	.word	0x08004d7c
 8000dbc:	200000c4 	.word	0x200000c4
 8000dc0:	08004d88 	.word	0x08004d88
 8000dc4:	08004d94 	.word	0x08004d94
 8000dc8:	08004da0 	.word	0x08004da0
 8000dcc:	08004db0 	.word	0x08004db0
 8000dd0:	08004dbc 	.word	0x08004dbc
 8000dd4:	08004dc8 	.word	0x08004dc8

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4906      	ldr	r1, [pc, #24]	; (8000e0c <__NVIC_EnableIRQ+0x34>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db12      	blt.n	8000e48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	490a      	ldr	r1, [pc, #40]	; (8000e54 <__NVIC_DisableIRQ+0x44>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	3320      	adds	r3, #32
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e3c:	f3bf 8f4f 	dsb	sy
}
 8000e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e42:	f3bf 8f6f 	isb	sy
}
 8000e46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 8000e60:	1d39      	adds	r1, r7, #4
 8000e62:	230a      	movs	r3, #10
 8000e64:	2201      	movs	r2, #1
 8000e66:	4804      	ldr	r0, [pc, #16]	; (8000e78 <__io_putchar+0x20>)
 8000e68:	f002 fb99 	bl	800359e <HAL_UART_Transmit>
	return ch;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000017c 	.word	0x2000017c

08000e7c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e80:	f000 ff96 	bl	8001db0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e84:	f000 fc46 	bl	8001714 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_USART1_UART_Init();
 8000e88:	f000 fef6 	bl	8001c78 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	input_init();
 8000e8c:	f7ff f95e 	bl	800014c <input_init>
	output_init();
 8000e90:	f000 fd34 	bl	80018fc <output_init>
	keypad_init();
 8000e94:	f7ff fa30 	bl	80002f8 <keypad_init>
	timer_init();
 8000e98:	f000 fe8c 	bl	8001bb4 <timer_init>

	lcd_gpio_init();
 8000e9c:	f7ff fb74 	bl	8000588 <lcd_gpio_init>
	lcd_init(0);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff fc0b 	bl	80006bc <lcd_init>
	lcd_begin(16, 4, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	2010      	movs	r0, #16
 8000eac:	f7ff fc1c 	bl	80006e8 <lcd_begin>

	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 8000eb0:	489b      	ldr	r0, [pc, #620]	; (8001120 <main+0x2a4>)
 8000eb2:	f002 fd97 	bl	80039e4 <puts>
	dryer.state = INIT;
 8000eb6:	4b9b      	ldr	r3, [pc, #620]	; (8001124 <main+0x2a8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8000ebc:	4b99      	ldr	r3, [pc, #612]	; (8001124 <main+0x2a8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	705a      	strb	r2, [r3, #1]
	dryer.setTemp = 40U;
 8000ec2:	4b98      	ldr	r3, [pc, #608]	; (8001124 <main+0x2a8>)
 8000ec4:	2228      	movs	r2, #40	; 0x28
 8000ec6:	719a      	strb	r2, [r3, #6]

	if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == HIGH) {
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4897      	ldr	r0, [pc, #604]	; (8001128 <main+0x2ac>)
 8000ecc:	f001 fa88 	bl	80023e0 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d108      	bne.n	8000ee8 <main+0x6c>
		door_open_flag = 1U;
 8000ed6:	4b95      	ldr	r3, [pc, #596]	; (800112c <main+0x2b0>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8000edc:	4b94      	ldr	r3, [pc, #592]	; (8001130 <main+0x2b4>)
 8000ede:	2205      	movs	r2, #5
 8000ee0:	701a      	strb	r2, [r3, #0]
		lcd_update_flag = 1U;
 8000ee2:	4b94      	ldr	r3, [pc, #592]	; (8001134 <main+0x2b8>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
	}

	lcd_update();
 8000ee8:	f7ff fdb4 	bl	8000a54 <lcd_update>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		if (is_door_open() && (!door_open_flag)) {
 8000eec:	f7ff f99c 	bl	8000228 <is_door_open>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d009      	beq.n	8000f0a <main+0x8e>
 8000ef6:	4b8d      	ldr	r3, [pc, #564]	; (800112c <main+0x2b0>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d105      	bne.n	8000f0a <main+0x8e>
			door_open_evt = 1U;
 8000efe:	4b8e      	ldr	r3, [pc, #568]	; (8001138 <main+0x2bc>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
			door_open_flag = 1U;
 8000f04:	4b89      	ldr	r3, [pc, #548]	; (800112c <main+0x2b0>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
		}

		if (door_open_evt) {
 8000f0a:	4b8b      	ldr	r3, [pc, #556]	; (8001138 <main+0x2bc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8082 	beq.w	8001018 <main+0x19c>
			static volatile uint8_t temp_pin_state = 0U;

			temp_pin_state = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 8000f14:	2101      	movs	r1, #1
 8000f16:	4884      	ldr	r0, [pc, #528]	; (8001128 <main+0x2ac>)
 8000f18:	f001 fa62 	bl	80023e0 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b86      	ldr	r3, [pc, #536]	; (800113c <main+0x2c0>)
 8000f22:	701a      	strb	r2, [r3, #0]
			//printf("Pin: %d\r\n",temp_pin_state);

			if (temp_pin_state == HIGH) {
 8000f24:	4b85      	ldr	r3, [pc, #532]	; (800113c <main+0x2c0>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d13d      	bne.n	8000faa <main+0x12e>

				door_open_flag = 1U;
 8000f2e:	4b7f      	ldr	r3, [pc, #508]	; (800112c <main+0x2b0>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8000f34:	4b82      	ldr	r3, [pc, #520]	; (8001140 <main+0x2c4>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
				cur_page = DOOR_OPEN_PAGE;
 8000f3a:	4b7d      	ldr	r3, [pc, #500]	; (8001130 <main+0x2b4>)
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8000f40:	4b7c      	ldr	r3, [pc, #496]	; (8001134 <main+0x2b8>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8000f46:	4b77      	ldr	r3, [pc, #476]	; (8001124 <main+0x2a8>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f52:	487c      	ldr	r0, [pc, #496]	; (8001144 <main+0x2c8>)
 8000f54:	f001 fa5b 	bl	800240e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	4872      	ldr	r0, [pc, #456]	; (8001128 <main+0x2ac>)
 8000f60:	f001 fa55 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6a:	4877      	ldr	r0, [pc, #476]	; (8001148 <main+0x2cc>)
 8000f6c:	f001 fa4f 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f76:	4874      	ldr	r0, [pc, #464]	; (8001148 <main+0x2cc>)
 8000f78:	f001 fa49 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f82:	4871      	ldr	r0, [pc, #452]	; (8001148 <main+0x2cc>)
 8000f84:	f001 fa43 	bl	800240e <HAL_GPIO_WritePin>

				if (dryer.state == COMPLETE) {
 8000f88:	4b66      	ldr	r3, [pc, #408]	; (8001124 <main+0x2a8>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d140      	bne.n	8001012 <main+0x196>
					//beep off
					timer_stop_evt = 1U;
 8000f90:	4b6b      	ldr	r3, [pc, #428]	; (8001140 <main+0x2c4>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
					dryer.beepTime = 0U;
 8000f96:	4b63      	ldr	r3, [pc, #396]	; (8001124 <main+0x2a8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	71da      	strb	r2, [r3, #7]
					dryer.state = INIT;
 8000f9c:	4b61      	ldr	r3, [pc, #388]	; (8001124 <main+0x2a8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8000fa2:	4b60      	ldr	r3, [pc, #384]	; (8001124 <main+0x2a8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	705a      	strb	r2, [r3, #1]
 8000fa8:	e033      	b.n	8001012 <main+0x196>
				}

				//stop

			} else {
				switch (dryer.mode) {
 8000faa:	4b5e      	ldr	r3, [pc, #376]	; (8001124 <main+0x2a8>)
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d826      	bhi.n	8001000 <main+0x184>
 8000fb2:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <main+0x13c>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	08000fc9 	.word	0x08000fc9
 8000fbc:	08000fd7 	.word	0x08000fd7
 8000fc0:	08000fe5 	.word	0x08000fe5
 8000fc4:	08000ff3 	.word	0x08000ff3
				case NO_MODE:
					cur_page = INIT_PAGE;
 8000fc8:	4b59      	ldr	r3, [pc, #356]	; (8001130 <main+0x2b4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8000fce:	4b55      	ldr	r3, [pc, #340]	; (8001124 <main+0x2a8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
					break;
 8000fd4:	e014      	b.n	8001000 <main+0x184>
				case LOW_LEVEL:
					cur_page = LOW_LEVEL_PAGE;
 8000fd6:	4b56      	ldr	r3, [pc, #344]	; (8001130 <main+0x2b4>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8000fdc:	4b51      	ldr	r3, [pc, #324]	; (8001124 <main+0x2a8>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
					break;
 8000fe2:	e00d      	b.n	8001000 <main+0x184>
				case MED_LEVEL:
					cur_page = MED_LEVEL_PAGE;
 8000fe4:	4b52      	ldr	r3, [pc, #328]	; (8001130 <main+0x2b4>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8000fea:	4b4e      	ldr	r3, [pc, #312]	; (8001124 <main+0x2a8>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
					break;
 8000ff0:	e006      	b.n	8001000 <main+0x184>
				case HIGH_LEVEL:
					cur_page = HIGH_LEVEL_PAGE;
 8000ff2:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <main+0x2b4>)
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8000ff8:	4b4a      	ldr	r3, [pc, #296]	; (8001124 <main+0x2a8>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
					break;
 8000ffe:	bf00      	nop
				}
				timer_start_evt = 1U;
 8001000:	4b52      	ldr	r3, [pc, #328]	; (800114c <main+0x2d0>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001006:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <main+0x2b8>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
				door_open_flag = 0U;
 800100c:	4b47      	ldr	r3, [pc, #284]	; (800112c <main+0x2b0>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
			}
			door_open_evt = 0U;
 8001012:	4b49      	ldr	r3, [pc, #292]	; (8001138 <main+0x2bc>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
		}

		if (!door_open_flag && dryer.state != COMPLETE) {
 8001018:	4b44      	ldr	r3, [pc, #272]	; (800112c <main+0x2b0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d16a      	bne.n	80010f6 <main+0x27a>
 8001020:	4b40      	ldr	r3, [pc, #256]	; (8001124 <main+0x2a8>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d066      	beq.n	80010f6 <main+0x27a>
			//static volatile uint8_t temp_pin_state = 0U;

			//temp_pin_state = HAL_GPIO_ReadPin(INPUT_PORT, HEATER_SW);
			//printf("Pin: %d\r\n",temp_pin_state);

			if (is_coil_open()) {
 8001028:	f7ff f936 	bl	8000298 <is_coil_open>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d02d      	beq.n	800108e <main+0x212>

				coil_open_flag = 1U;
 8001032:	4b47      	ldr	r3, [pc, #284]	; (8001150 <main+0x2d4>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001038:	4b41      	ldr	r3, [pc, #260]	; (8001140 <main+0x2c4>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
				cur_page = HEATER_COIL_PAGE;
 800103e:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <main+0x2b4>)
 8001040:	2207      	movs	r2, #7
 8001042:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001044:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <main+0x2b8>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <main+0x2a8>)
 800104c:	2203      	movs	r2, #3
 800104e:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001056:	483b      	ldr	r0, [pc, #236]	; (8001144 <main+0x2c8>)
 8001058:	f001 f9d9 	bl	800240e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001062:	4831      	ldr	r0, [pc, #196]	; (8001128 <main+0x2ac>)
 8001064:	f001 f9d3 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106e:	4836      	ldr	r0, [pc, #216]	; (8001148 <main+0x2cc>)
 8001070:	f001 f9cd 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107a:	4833      	ldr	r0, [pc, #204]	; (8001148 <main+0x2cc>)
 800107c:	f001 f9c7 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001086:	4830      	ldr	r0, [pc, #192]	; (8001148 <main+0x2cc>)
 8001088:	f001 f9c1 	bl	800240e <HAL_GPIO_WritePin>
 800108c:	e033      	b.n	80010f6 <main+0x27a>

				//stop

			} else {
				switch (dryer.mode) {
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <main+0x2a8>)
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	2b03      	cmp	r3, #3
 8001094:	d826      	bhi.n	80010e4 <main+0x268>
 8001096:	a201      	add	r2, pc, #4	; (adr r2, 800109c <main+0x220>)
 8001098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109c:	080010ad 	.word	0x080010ad
 80010a0:	080010bb 	.word	0x080010bb
 80010a4:	080010c9 	.word	0x080010c9
 80010a8:	080010d7 	.word	0x080010d7
				case NO_MODE:
					cur_page = INIT_PAGE;
 80010ac:	4b20      	ldr	r3, [pc, #128]	; (8001130 <main+0x2b4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <main+0x2a8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
					break;
 80010b8:	e014      	b.n	80010e4 <main+0x268>
				case LOW_LEVEL:
					cur_page = LOW_LEVEL_PAGE;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <main+0x2b4>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <main+0x2a8>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
					break;
 80010c6:	e00d      	b.n	80010e4 <main+0x268>
				case MED_LEVEL:
					cur_page = MED_LEVEL_PAGE;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <main+0x2b4>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <main+0x2a8>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
					break;
 80010d4:	e006      	b.n	80010e4 <main+0x268>
				case HIGH_LEVEL:
					cur_page = HIGH_LEVEL_PAGE;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <main+0x2b4>)
 80010d8:	2203      	movs	r2, #3
 80010da:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <main+0x2a8>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
					break;
 80010e2:	bf00      	nop
				}
				timer_start_evt = 1U;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <main+0x2d0>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <main+0x2b8>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
				coil_open_flag = 0U;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <main+0x2d4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
		}

		/**********************************************************************************************************
		 **************************************** LCD SCREEN UPDATE RUTINE ****************************************
		 **********************************************************************************************************/
		if (lcd_update_flag) {
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <main+0x2b8>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <main+0x28c>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 80010fe:	f7ff fca9 	bl	8000a54 <lcd_update>
			lcd_update_flag = 0U;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <main+0x2b8>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* TIMER EVENT RUTINE ************************************************
		 ***************************************************************************************************************/
		if (timer_stop_evt) {
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <main+0x2c4>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d023      	beq.n	8001158 <main+0x2dc>
			//printf("Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 8001110:	4810      	ldr	r0, [pc, #64]	; (8001154 <main+0x2d8>)
 8001112:	f001 fe71 	bl	8002df8 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <main+0x2c4>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e02a      	b.n	8001174 <main+0x2f8>
 800111e:	bf00      	nop
 8001120:	08004dd0 	.word	0x08004dd0
 8001124:	20000118 	.word	0x20000118
 8001128:	40010800 	.word	0x40010800
 800112c:	20000122 	.word	0x20000122
 8001130:	2000012c 	.word	0x2000012c
 8001134:	2000012e 	.word	0x2000012e
 8001138:	20000123 	.word	0x20000123
 800113c:	2000012f 	.word	0x2000012f
 8001140:	20000125 	.word	0x20000125
 8001144:	40011000 	.word	0x40011000
 8001148:	40010c00 	.word	0x40010c00
 800114c:	20000126 	.word	0x20000126
 8001150:	20000124 	.word	0x20000124
 8001154:	20000134 	.word	0x20000134

		} else if ((timer_start_evt) && (dryer.state == START)) {
 8001158:	4b93      	ldr	r3, [pc, #588]	; (80013a8 <main+0x52c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d009      	beq.n	8001174 <main+0x2f8>
 8001160:	4b92      	ldr	r3, [pc, #584]	; (80013ac <main+0x530>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d105      	bne.n	8001174 <main+0x2f8>
			HAL_TIM_Base_Start_IT(&htim4);
 8001168:	4891      	ldr	r0, [pc, #580]	; (80013b0 <main+0x534>)
 800116a:	f001 fdf3 	bl	8002d54 <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 800116e:	4b8e      	ldr	r3, [pc, #568]	; (80013a8 <main+0x52c>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]

		/***************************************************************************************************************
		 ********************************************* KEYBOARD SCANNING ***********************************************
		 ********************************** INCREMENT DECREMENT OF TIMER AND MODE SET **********************************
		 ***************************************************************************************************************/
		if (!door_open_flag && !coil_open_flag) {
 8001174:	4b8f      	ldr	r3, [pc, #572]	; (80013b4 <main+0x538>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	f040 819b 	bne.w	80014b4 <main+0x638>
 800117e:	4b8e      	ldr	r3, [pc, #568]	; (80013b8 <main+0x53c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f040 8196 	bne.w	80014b4 <main+0x638>
//			HAL_GPIO_WritePin(GPIOC, LED, LOW);
//
//		} else {

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118e:	488b      	ldr	r0, [pc, #556]	; (80013bc <main+0x540>)
 8001190:	f001 f93d 	bl	800240e <HAL_GPIO_WritePin>

			if (dryer.state == START) {
 8001194:	4b85      	ldr	r3, [pc, #532]	; (80013ac <main+0x530>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	f040 80bc 	bne.w	8001316 <main+0x49a>

				scaned_key = scan_keypad();
 800119e:	f7ff f8d9 	bl	8000354 <scan_keypad>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b86      	ldr	r3, [pc, #536]	; (80013c0 <main+0x544>)
 80011a8:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 80011aa:	4b85      	ldr	r3, [pc, #532]	; (80013c0 <main+0x544>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	f200 80ac 	bhi.w	800130e <main+0x492>
 80011b6:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <main+0x340>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	080011cd 	.word	0x080011cd
 80011c0:	08001215 	.word	0x08001215
 80011c4:	0800123b 	.word	0x0800123b
 80011c8:	080012e3 	.word	0x080012e3
				case LOW_KEY_PRESSED:
					lcd_update_flag = 1U;
 80011cc:	4b7d      	ldr	r3, [pc, #500]	; (80013c4 <main+0x548>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 80011d2:	4b76      	ldr	r3, [pc, #472]	; (80013ac <main+0x530>)
 80011d4:	7a1b      	ldrb	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <main+0x364>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d00b      	beq.n	80011f6 <main+0x37a>
					case COOL_CYCLE:
						if (dryer.coolTime > 60U)
							dryer.coolTime -= 60U;
						break;
					}
					break;
 80011de:	e096      	b.n	800130e <main+0x492>
						if (dryer.heatTime > 60U)
 80011e0:	4b72      	ldr	r3, [pc, #456]	; (80013ac <main+0x530>)
 80011e2:	885b      	ldrh	r3, [r3, #2]
 80011e4:	2b3c      	cmp	r3, #60	; 0x3c
 80011e6:	d911      	bls.n	800120c <main+0x390>
							dryer.heatTime -= 60U;
 80011e8:	4b70      	ldr	r3, [pc, #448]	; (80013ac <main+0x530>)
 80011ea:	885b      	ldrh	r3, [r3, #2]
 80011ec:	3b3c      	subs	r3, #60	; 0x3c
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <main+0x530>)
 80011f2:	805a      	strh	r2, [r3, #2]
						break;
 80011f4:	e00a      	b.n	800120c <main+0x390>
						if (dryer.coolTime > 60U)
 80011f6:	4b6d      	ldr	r3, [pc, #436]	; (80013ac <main+0x530>)
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	2b3c      	cmp	r3, #60	; 0x3c
 80011fc:	d908      	bls.n	8001210 <main+0x394>
							dryer.coolTime -= 60U;
 80011fe:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <main+0x530>)
 8001200:	889b      	ldrh	r3, [r3, #4]
 8001202:	3b3c      	subs	r3, #60	; 0x3c
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b69      	ldr	r3, [pc, #420]	; (80013ac <main+0x530>)
 8001208:	809a      	strh	r2, [r3, #4]
						break;
 800120a:	e001      	b.n	8001210 <main+0x394>
						break;
 800120c:	bf00      	nop
 800120e:	e07e      	b.n	800130e <main+0x492>
						break;
 8001210:	bf00      	nop
					break;
 8001212:	e07c      	b.n	800130e <main+0x492>

				case MED_KEY_PRESSED:
					lcd_update_flag = 1U;
 8001214:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <main+0x548>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 800121a:	4b64      	ldr	r3, [pc, #400]	; (80013ac <main+0x530>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001220:	4b62      	ldr	r3, [pc, #392]	; (80013ac <main+0x530>)
 8001222:	2200      	movs	r2, #0
 8001224:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 8001226:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <main+0x54c>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 800122c:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <main+0x548>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <main+0x550>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
					break;
 8001238:	e069      	b.n	800130e <main+0x492>

				case HIGH_KEY_PRESSED:
					lcd_update_flag = 1U;
 800123a:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <main+0x548>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 8001240:	4b5a      	ldr	r3, [pc, #360]	; (80013ac <main+0x530>)
 8001242:	7a1b      	ldrb	r3, [r3, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <main+0x3d2>
 8001248:	2b01      	cmp	r3, #1
 800124a:	d037      	beq.n	80012bc <main+0x440>
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
 800124c:	e05f      	b.n	800130e <main+0x492>
						if ((dryer.heatTime < 1800U)
 800124e:	4b57      	ldr	r3, [pc, #348]	; (80013ac <main+0x530>)
 8001250:	885b      	ldrh	r3, [r3, #2]
 8001252:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001256:	d20a      	bcs.n	800126e <main+0x3f2>
								&& (dryer.mode == LOW_LEVEL))
 8001258:	4b54      	ldr	r3, [pc, #336]	; (80013ac <main+0x530>)
 800125a:	785b      	ldrb	r3, [r3, #1]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d106      	bne.n	800126e <main+0x3f2>
							dryer.heatTime += 60U;
 8001260:	4b52      	ldr	r3, [pc, #328]	; (80013ac <main+0x530>)
 8001262:	885b      	ldrh	r3, [r3, #2]
 8001264:	333c      	adds	r3, #60	; 0x3c
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b50      	ldr	r3, [pc, #320]	; (80013ac <main+0x530>)
 800126a:	805a      	strh	r2, [r3, #2]
 800126c:	e01f      	b.n	80012ae <main+0x432>
						else if ((dryer.heatTime < 2400U)
 800126e:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <main+0x530>)
 8001270:	885b      	ldrh	r3, [r3, #2]
 8001272:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001276:	d20a      	bcs.n	800128e <main+0x412>
								&& (dryer.mode == MED_LEVEL))
 8001278:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <main+0x530>)
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d106      	bne.n	800128e <main+0x412>
							dryer.heatTime += 60U;
 8001280:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <main+0x530>)
 8001282:	885b      	ldrh	r3, [r3, #2]
 8001284:	333c      	adds	r3, #60	; 0x3c
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b48      	ldr	r3, [pc, #288]	; (80013ac <main+0x530>)
 800128a:	805a      	strh	r2, [r3, #2]
 800128c:	e00f      	b.n	80012ae <main+0x432>
						else if ((dryer.heatTime < 3000U)
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <main+0x530>)
 8001290:	885b      	ldrh	r3, [r3, #2]
 8001292:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001296:	4293      	cmp	r3, r2
 8001298:	d809      	bhi.n	80012ae <main+0x432>
								&& (dryer.mode == HIGH_LEVEL))
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <main+0x530>)
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d105      	bne.n	80012ae <main+0x432>
							dryer.heatTime += 60U;
 80012a2:	4b42      	ldr	r3, [pc, #264]	; (80013ac <main+0x530>)
 80012a4:	885b      	ldrh	r3, [r3, #2]
 80012a6:	333c      	adds	r3, #60	; 0x3c
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b40      	ldr	r3, [pc, #256]	; (80013ac <main+0x530>)
 80012ac:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 80012ae:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <main+0x530>)
 80012b0:	885b      	ldrh	r3, [r3, #2]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4846      	ldr	r0, [pc, #280]	; (80013d0 <main+0x554>)
 80012b6:	f002 fb0f 	bl	80038d8 <iprintf>
						break;
 80012ba:	e011      	b.n	80012e0 <main+0x464>
						if (dryer.coolTime < 900U)
 80012bc:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <main+0x530>)
 80012be:	889b      	ldrh	r3, [r3, #4]
 80012c0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80012c4:	d205      	bcs.n	80012d2 <main+0x456>
							dryer.coolTime += 60U;
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <main+0x530>)
 80012c8:	889b      	ldrh	r3, [r3, #4]
 80012ca:	333c      	adds	r3, #60	; 0x3c
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <main+0x530>)
 80012d0:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 80012d2:	4b36      	ldr	r3, [pc, #216]	; (80013ac <main+0x530>)
 80012d4:	889b      	ldrh	r3, [r3, #4]
 80012d6:	4619      	mov	r1, r3
 80012d8:	483e      	ldr	r0, [pc, #248]	; (80013d4 <main+0x558>)
 80012da:	f002 fafd 	bl	80038d8 <iprintf>
						break;
 80012de:	bf00      	nop
					break;
 80012e0:	e015      	b.n	800130e <main+0x492>

				case FN_KEY_PRESSED:
					lcd_update_flag = 1U;
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <main+0x548>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 0U;
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <main+0x530>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 80012ee:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <main+0x530>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	721a      	strb	r2, [r3, #8]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <main+0x530>)
 80012f6:	885b      	ldrh	r3, [r3, #2]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4835      	ldr	r0, [pc, #212]	; (80013d0 <main+0x554>)
 80012fc:	f002 faec 	bl	80038d8 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <main+0x530>)
 8001302:	889b      	ldrh	r3, [r3, #4]
 8001304:	4619      	mov	r1, r3
 8001306:	4833      	ldr	r0, [pc, #204]	; (80013d4 <main+0x558>)
 8001308:	f002 fae6 	bl	80038d8 <iprintf>
					break;
 800130c:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <main+0x544>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
 8001314:	e0ce      	b.n	80014b4 <main+0x638>

			} else if (dryer.state == INIT) {
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <main+0x530>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f040 80ca 	bne.w	80014b4 <main+0x638>

				scaned_key = scan_keypad();
 8001320:	f7ff f818 	bl	8000354 <scan_keypad>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <main+0x544>)
 800132a:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <main+0x544>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b03      	cmp	r3, #3
 8001332:	f000 808b 	beq.w	800144c <main+0x5d0>
 8001336:	2b03      	cmp	r3, #3
 8001338:	f300 80b8 	bgt.w	80014ac <main+0x630>
 800133c:	2b01      	cmp	r3, #1
 800133e:	d002      	beq.n	8001346 <main+0x4ca>
 8001340:	2b02      	cmp	r3, #2
 8001342:	d053      	beq.n	80013ec <main+0x570>
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
							sizeof("HIGH_LEVEL\r\n"), 10);
					break;

				default:
					break;
 8001344:	e0b2      	b.n	80014ac <main+0x630>
					dryer.mode = LOW_LEVEL;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <main+0x530>)
 8001348:	2201      	movs	r2, #1
 800134a:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <main+0x530>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <main+0x530>)
 8001354:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001358:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <main+0x530>)
 800135c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001360:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <main+0x530>)
 8001364:	221e      	movs	r2, #30
 8001366:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 40U;
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <main+0x530>)
 800136a:	2228      	movs	r2, #40	; 0x28
 800136c:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <main+0x530>)
 8001370:	2200      	movs	r2, #0
 8001372:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <main+0x55c>)
 8001376:	221e      	movs	r2, #30
 8001378:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <main+0x560>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <main+0x564>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <main+0x52c>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
					cur_page = LOW_LEVEL_PAGE;
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <main+0x54c>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <main+0x548>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 8001398:	230a      	movs	r3, #10
 800139a:	220c      	movs	r2, #12
 800139c:	4911      	ldr	r1, [pc, #68]	; (80013e4 <main+0x568>)
 800139e:	4812      	ldr	r0, [pc, #72]	; (80013e8 <main+0x56c>)
 80013a0:	f002 f8fd 	bl	800359e <HAL_UART_Transmit>
					break;
 80013a4:	e083      	b.n	80014ae <main+0x632>
 80013a6:	bf00      	nop
 80013a8:	20000126 	.word	0x20000126
 80013ac:	20000118 	.word	0x20000118
 80013b0:	20000134 	.word	0x20000134
 80013b4:	20000122 	.word	0x20000122
 80013b8:	20000124 	.word	0x20000124
 80013bc:	40011000 	.word	0x40011000
 80013c0:	20000127 	.word	0x20000127
 80013c4:	2000012e 	.word	0x2000012e
 80013c8:	2000012c 	.word	0x2000012c
 80013cc:	20000125 	.word	0x20000125
 80013d0:	08004dd8 	.word	0x08004dd8
 80013d4:	08004de8 	.word	0x08004de8
 80013d8:	20000001 	.word	0x20000001
 80013dc:	20000128 	.word	0x20000128
 80013e0:	20000129 	.word	0x20000129
 80013e4:	08004df8 	.word	0x08004df8
 80013e8:	2000017c 	.word	0x2000017c
					dryer.mode = MED_LEVEL;
 80013ec:	4bb0      	ldr	r3, [pc, #704]	; (80016b0 <main+0x834>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80013f2:	4baf      	ldr	r3, [pc, #700]	; (80016b0 <main+0x834>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 80013f8:	4bad      	ldr	r3, [pc, #692]	; (80016b0 <main+0x834>)
 80013fa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80013fe:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8001400:	4bab      	ldr	r3, [pc, #684]	; (80016b0 <main+0x834>)
 8001402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001406:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8001408:	4ba9      	ldr	r3, [pc, #676]	; (80016b0 <main+0x834>)
 800140a:	221e      	movs	r2, #30
 800140c:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 70U;
 800140e:	4ba8      	ldr	r3, [pc, #672]	; (80016b0 <main+0x834>)
 8001410:	2246      	movs	r2, #70	; 0x46
 8001412:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8001414:	4ba6      	ldr	r3, [pc, #664]	; (80016b0 <main+0x834>)
 8001416:	2200      	movs	r2, #0
 8001418:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 800141a:	4ba6      	ldr	r3, [pc, #664]	; (80016b4 <main+0x838>)
 800141c:	221e      	movs	r2, #30
 800141e:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8001420:	4ba5      	ldr	r3, [pc, #660]	; (80016b8 <main+0x83c>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8001426:	4ba5      	ldr	r3, [pc, #660]	; (80016bc <main+0x840>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 800142c:	4ba4      	ldr	r3, [pc, #656]	; (80016c0 <main+0x844>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
					cur_page = MED_LEVEL_PAGE;
 8001432:	4ba4      	ldr	r3, [pc, #656]	; (80016c4 <main+0x848>)
 8001434:	2202      	movs	r2, #2
 8001436:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001438:	4ba3      	ldr	r3, [pc, #652]	; (80016c8 <main+0x84c>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 800143e:	230a      	movs	r3, #10
 8001440:	220c      	movs	r2, #12
 8001442:	49a2      	ldr	r1, [pc, #648]	; (80016cc <main+0x850>)
 8001444:	48a2      	ldr	r0, [pc, #648]	; (80016d0 <main+0x854>)
 8001446:	f002 f8aa 	bl	800359e <HAL_UART_Transmit>
					break;
 800144a:	e030      	b.n	80014ae <main+0x632>
					dryer.mode = HIGH_LEVEL;
 800144c:	4b98      	ldr	r3, [pc, #608]	; (80016b0 <main+0x834>)
 800144e:	2203      	movs	r2, #3
 8001450:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 8001452:	4b97      	ldr	r3, [pc, #604]	; (80016b0 <main+0x834>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 8001458:	4b95      	ldr	r3, [pc, #596]	; (80016b0 <main+0x834>)
 800145a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800145e:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8001460:	4b93      	ldr	r3, [pc, #588]	; (80016b0 <main+0x834>)
 8001462:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001466:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8001468:	4b91      	ldr	r3, [pc, #580]	; (80016b0 <main+0x834>)
 800146a:	221e      	movs	r2, #30
 800146c:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 90U;
 800146e:	4b90      	ldr	r3, [pc, #576]	; (80016b0 <main+0x834>)
 8001470:	225a      	movs	r2, #90	; 0x5a
 8001472:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8001474:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <main+0x834>)
 8001476:	2200      	movs	r2, #0
 8001478:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 800147a:	4b8e      	ldr	r3, [pc, #568]	; (80016b4 <main+0x838>)
 800147c:	221e      	movs	r2, #30
 800147e:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8001480:	4b8d      	ldr	r3, [pc, #564]	; (80016b8 <main+0x83c>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8001486:	4b8d      	ldr	r3, [pc, #564]	; (80016bc <main+0x840>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 800148c:	4b8c      	ldr	r3, [pc, #560]	; (80016c0 <main+0x844>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
					cur_page = HIGH_LEVEL_PAGE;
 8001492:	4b8c      	ldr	r3, [pc, #560]	; (80016c4 <main+0x848>)
 8001494:	2203      	movs	r2, #3
 8001496:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001498:	4b8b      	ldr	r3, [pc, #556]	; (80016c8 <main+0x84c>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 800149e:	230a      	movs	r3, #10
 80014a0:	220d      	movs	r2, #13
 80014a2:	498c      	ldr	r1, [pc, #560]	; (80016d4 <main+0x858>)
 80014a4:	488a      	ldr	r0, [pc, #552]	; (80016d0 <main+0x854>)
 80014a6:	f002 f87a 	bl	800359e <HAL_UART_Transmit>
					break;
 80014aa:	e000      	b.n	80014ae <main+0x632>
					break;
 80014ac:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 80014ae:	4b8a      	ldr	r3, [pc, #552]	; (80016d8 <main+0x85c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
		 * @COMPLETE STATE
		 * 		->TURNS OFF FAN, DRUM MOTORS, HEATER
		 * 		->TRUNS ON/OFF BEEP EVERY 3s FOR 30s
		 * 		->WATCHS DOOR OPEN
		 **********************************************************************************************************/
		if (!door_open_flag && !coil_open_flag) {
 80014b4:	4b89      	ldr	r3, [pc, #548]	; (80016dc <main+0x860>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f040 80f5 	bne.w	80016a8 <main+0x82c>
 80014be:	4b88      	ldr	r3, [pc, #544]	; (80016e0 <main+0x864>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 80f0 	bne.w	80016a8 <main+0x82c>

			if (dryer.state == START) {
 80014c8:	4b79      	ldr	r3, [pc, #484]	; (80016b0 <main+0x834>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	f040 809d 	bne.w	800160c <main+0x790>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d8:	4882      	ldr	r0, [pc, #520]	; (80016e4 <main+0x868>)
 80014da:	f000 ff98 	bl	800240e <HAL_GPIO_WritePin>

				if (otp) {
 80014de:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <main+0x86c>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d020      	beq.n	8001528 <main+0x6ac>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 80014e6:	4b72      	ldr	r3, [pc, #456]	; (80016b0 <main+0x834>)
 80014e8:	885b      	ldrh	r3, [r3, #2]
 80014ea:	4619      	mov	r1, r3
 80014ec:	487f      	ldr	r0, [pc, #508]	; (80016ec <main+0x870>)
 80014ee:	f002 f9f3 	bl	80038d8 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 80014f2:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <main+0x834>)
 80014f4:	889b      	ldrh	r3, [r3, #4]
 80014f6:	4619      	mov	r1, r3
 80014f8:	487d      	ldr	r0, [pc, #500]	; (80016f0 <main+0x874>)
 80014fa:	f002 f9ed 	bl	80038d8 <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 80014fe:	4b6d      	ldr	r3, [pc, #436]	; (80016b4 <main+0x838>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	487b      	ldr	r0, [pc, #492]	; (80016f4 <main+0x878>)
 8001506:	f002 f9e7 	bl	80038d8 <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 800150a:	4b6c      	ldr	r3, [pc, #432]	; (80016bc <main+0x840>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	4879      	ldr	r0, [pc, #484]	; (80016f8 <main+0x87c>)
 8001512:	f002 f9e1 	bl	80038d8 <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 8001516:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <main+0x83c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	4877      	ldr	r0, [pc, #476]	; (80016fc <main+0x880>)
 800151e:	f002 f9db 	bl	80038d8 <iprintf>
					otp = 0;
 8001522:	4b71      	ldr	r3, [pc, #452]	; (80016e8 <main+0x86c>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
				}

				//start Flip Flop
				if (pasue_cunt > 0) {
 8001528:	4b64      	ldr	r3, [pc, #400]	; (80016bc <main+0x840>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d034      	beq.n	800159a <main+0x71e>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001536:	4872      	ldr	r0, [pc, #456]	; (8001700 <main+0x884>)
 8001538:	f000 ff69 	bl	800240e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001542:	486f      	ldr	r0, [pc, #444]	; (8001700 <main+0x884>)
 8001544:	f000 ff63 	bl	800240e <HAL_GPIO_WritePin>

					if (pasue_cunt <= 1) {
 8001548:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <main+0x840>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d84b      	bhi.n	80015e8 <main+0x76c>

						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 8001550:	2104      	movs	r1, #4
 8001552:	4864      	ldr	r0, [pc, #400]	; (80016e4 <main+0x868>)
 8001554:	f000 ff44 	bl	80023e0 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	4b69      	ldr	r3, [pc, #420]	; (8001704 <main+0x888>)
 800155e:	701a      	strb	r2, [r3, #0]
						SEL_ROT_SW);

						if (rot_sw_state) {
 8001560:	4b68      	ldr	r3, [pc, #416]	; (8001704 <main+0x888>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <main+0x6fa>

							rot_left_cunt = 30U;
 8001568:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <main+0x838>)
 800156a:	221e      	movs	r2, #30
 800156c:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 800156e:	4b52      	ldr	r3, [pc, #328]	; (80016b8 <main+0x83c>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e038      	b.n	80015e8 <main+0x76c>

						} else {

							if (flipflop) {
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <main+0x88c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <main+0x710>

								rot_left_cunt = 0U;
 800157e:	4b4d      	ldr	r3, [pc, #308]	; (80016b4 <main+0x838>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <main+0x83c>)
 8001586:	221e      	movs	r2, #30
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e02d      	b.n	80015e8 <main+0x76c>

							} else {

								rot_left_cunt = 30U;
 800158c:	4b49      	ldr	r3, [pc, #292]	; (80016b4 <main+0x838>)
 800158e:	221e      	movs	r2, #30
 8001590:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 8001592:	4b49      	ldr	r3, [pc, #292]	; (80016b8 <main+0x83c>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	e026      	b.n	80015e8 <main+0x76c>

							}
						}
					}
				} else if (rot_left_cunt > 0) {
 800159a:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <main+0x838>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00f      	beq.n	80015c2 <main+0x746>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a8:	4855      	ldr	r0, [pc, #340]	; (8001700 <main+0x884>)
 80015aa:	f000 ff30 	bl	800240e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b4:	4852      	ldr	r0, [pc, #328]	; (8001700 <main+0x884>)
 80015b6:	f000 ff2a 	bl	800240e <HAL_GPIO_WritePin>
					flipflop = 1;
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <main+0x88c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	e012      	b.n	80015e8 <main+0x76c>

				} else if (rot_right_cunt > 0) {
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <main+0x83c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00e      	beq.n	80015e8 <main+0x76c>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d0:	484b      	ldr	r0, [pc, #300]	; (8001700 <main+0x884>)
 80015d2:	f000 ff1c 	bl	800240e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015dc:	4848      	ldr	r0, [pc, #288]	; (8001700 <main+0x884>)
 80015de:	f000 ff16 	bl	800240e <HAL_GPIO_WritePin>
					flipflop = 0;
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <main+0x88c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]

				}

				if (dryer.cycle == HEAT_CYCLE) {
 80015e8:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <main+0x834>)
 80015ea:	7a1b      	ldrb	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d106      	bne.n	80015fe <main+0x782>

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 80015f0:	2201      	movs	r2, #1
 80015f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f6:	4842      	ldr	r0, [pc, #264]	; (8001700 <main+0x884>)
 80015f8:	f000 ff09 	bl	800240e <HAL_GPIO_WritePin>
 80015fc:	e054      	b.n	80016a8 <main+0x82c>

				} else {

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001604:	483e      	ldr	r0, [pc, #248]	; (8001700 <main+0x884>)
 8001606:	f000 ff02 	bl	800240e <HAL_GPIO_WritePin>
 800160a:	e04d      	b.n	80016a8 <main+0x82c>

				}
			} else if (dryer.state == COMPLETE) {
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <main+0x834>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d131      	bne.n	8001678 <main+0x7fc>

				if (dryer.beepTime == 0) {
 8001614:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <main+0x834>)
 8001616:	79db      	ldrb	r3, [r3, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d114      	bne.n	8001646 <main+0x7ca>
					HAL_GPIO_WritePin(GPIOC, LED, LOW);
 800161c:	2200      	movs	r2, #0
 800161e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001622:	483a      	ldr	r0, [pc, #232]	; (800170c <main+0x890>)
 8001624:	f000 fef3 	bl	800240e <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <main+0x848>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <main+0x84c>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
					//beep off
					timer_stop_evt = 1U;
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <main+0x894>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <main+0x834>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <main+0x834>)
 8001642:	2200      	movs	r2, #0
 8001644:	705a      	strb	r2, [r3, #1]
				} else if (dryer.beepTime % 3 == 0) {
					//beep toggle
				}
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164c:	4825      	ldr	r0, [pc, #148]	; (80016e4 <main+0x868>)
 800164e:	f000 fede 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001658:	4829      	ldr	r0, [pc, #164]	; (8001700 <main+0x884>)
 800165a:	f000 fed8 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001664:	4826      	ldr	r0, [pc, #152]	; (8001700 <main+0x884>)
 8001666:	f000 fed2 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001670:	4823      	ldr	r0, [pc, #140]	; (8001700 <main+0x884>)
 8001672:	f000 fecc 	bl	800240e <HAL_GPIO_WritePin>
 8001676:	e017      	b.n	80016a8 <main+0x82c>

			} else {
				//beep off
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167e:	4819      	ldr	r0, [pc, #100]	; (80016e4 <main+0x868>)
 8001680:	f000 fec5 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168a:	481d      	ldr	r0, [pc, #116]	; (8001700 <main+0x884>)
 800168c:	f000 febf 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001696:	481a      	ldr	r0, [pc, #104]	; (8001700 <main+0x884>)
 8001698:	f000 feb9 	bl	800240e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a2:	4817      	ldr	r0, [pc, #92]	; (8001700 <main+0x884>)
 80016a4:	f000 feb3 	bl	800240e <HAL_GPIO_WritePin>
			}
		}
		lcd_update_flag = 1U;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <main+0x84c>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
		if (is_door_open() && (!door_open_flag)) {
 80016ae:	e41d      	b.n	8000eec <main+0x70>
 80016b0:	20000118 	.word	0x20000118
 80016b4:	20000001 	.word	0x20000001
 80016b8:	20000128 	.word	0x20000128
 80016bc:	20000129 	.word	0x20000129
 80016c0:	20000126 	.word	0x20000126
 80016c4:	2000012c 	.word	0x2000012c
 80016c8:	2000012e 	.word	0x2000012e
 80016cc:	08004e04 	.word	0x08004e04
 80016d0:	2000017c 	.word	0x2000017c
 80016d4:	08004e10 	.word	0x08004e10
 80016d8:	20000127 	.word	0x20000127
 80016dc:	20000122 	.word	0x20000122
 80016e0:	20000124 	.word	0x20000124
 80016e4:	40010800 	.word	0x40010800
 80016e8:	20000000 	.word	0x20000000
 80016ec:	08004e20 	.word	0x08004e20
 80016f0:	08004de8 	.word	0x08004de8
 80016f4:	08004e34 	.word	0x08004e34
 80016f8:	08004e44 	.word	0x08004e44
 80016fc:	08004e54 	.word	0x08004e54
 8001700:	40010c00 	.word	0x40010c00
 8001704:	2000012a 	.word	0x2000012a
 8001708:	2000012b 	.word	0x2000012b
 800170c:	40011000 	.word	0x40011000
 8001710:	20000125 	.word	0x20000125

08001714 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b090      	sub	sp, #64	; 0x40
 8001718:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800171a:	f107 0318 	add.w	r3, r7, #24
 800171e:	2228      	movs	r2, #40	; 0x28
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f002 f8d0 	bl	80038c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800173a:	2301      	movs	r3, #1
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800173e:	2310      	movs	r3, #16
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001742:	2300      	movs	r3, #0
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fe90 	bl	8002470 <HAL_RCC_OscConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0x46>
		Error_Handler();
 8001756:	f000 f8cb 	bl	80018f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800175a:	230f      	movs	r3, #15
 800175c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f001 f8fe 	bl	8002974 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0x6e>
		Error_Handler();
 800177e:	f000 f8b7 	bl	80018f0 <Error_Handler>
	}
}
 8001782:	bf00      	nop
 8001784:	3740      	adds	r7, #64	; 0x40
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
//	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10b      	bne.n	80017b4 <HAL_GPIO_EXTI_Callback+0x28>
		NVIC_DisableIRQ(EXTI0_IRQn);
 800179c:	2006      	movs	r0, #6
 800179e:	f7ff fb37 	bl	8000e10 <__NVIC_DisableIRQ>

		door_open_flag = 1U;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_GPIO_EXTI_Callback+0x30>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
		door_open_evt = 1U;
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x34>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]

		NVIC_EnableIRQ(EXTI0_IRQn);
 80017ae:	2006      	movs	r0, #6
 80017b0:	f7ff fb12 	bl	8000dd8 <__NVIC_EnableIRQ>
	}
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000122 	.word	0x20000122
 80017c0:	20000123 	.word	0x20000123

080017c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) "TIMER\r\n", sizeof("TIMER\r\n"), 10);
 80017cc:	230a      	movs	r3, #10
 80017ce:	2208      	movs	r2, #8
 80017d0:	493d      	ldr	r1, [pc, #244]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80017d2:	483e      	ldr	r0, [pc, #248]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x108>)
 80017d4:	f001 fee3 	bl	800359e <HAL_UART_Transmit>

	if (dryer.heatTime > 0) {
 80017d8:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017da:	885b      	ldrh	r3, [r3, #2]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_TIM_PeriodElapsedCallback+0x2a>

		dryer.heatTime--;
 80017e0:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017e2:	885b      	ldrh	r3, [r3, #2]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017ea:	805a      	strh	r2, [r3, #2]
 80017ec:	e014      	b.n	8001818 <HAL_TIM_PeriodElapsedCallback+0x54>

	} else if (dryer.coolTime > 0) {
 80017ee:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017f0:	889b      	ldrh	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d006      	beq.n	8001804 <HAL_TIM_PeriodElapsedCallback+0x40>

		dryer.coolTime--;
 80017f6:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017f8:	889b      	ldrh	r3, [r3, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001800:	809a      	strh	r2, [r3, #4]
 8001802:	e009      	b.n	8001818 <HAL_TIM_PeriodElapsedCallback+0x54>

	} else if (dryer.state == COMPLETE) {
 8001804:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d105      	bne.n	8001818 <HAL_TIM_PeriodElapsedCallback+0x54>
		dryer.beepTime--;
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800180e:	79db      	ldrb	r3, [r3, #7]
 8001810:	3b01      	subs	r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001816:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800181a:	885b      	ldrh	r3, [r3, #2]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d107      	bne.n	8001830 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001822:	7a1b      	ldrb	r3, [r3, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d103      	bne.n	8001830 <HAL_TIM_PeriodElapsedCallback+0x6c>

		dryer.cycle = COOL_CYCLE;
 8001828:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800182a:	2201      	movs	r2, #1
 800182c:	721a      	strb	r2, [r3, #8]
 800182e:	e013      	b.n	8001858 <HAL_TIM_PeriodElapsedCallback+0x94>

	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001832:	889b      	ldrh	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10f      	bne.n	8001858 <HAL_TIM_PeriodElapsedCallback+0x94>
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800183a:	7a1b      	ldrb	r3, [r3, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10b      	bne.n	8001858 <HAL_TIM_PeriodElapsedCallback+0x94>

		printf("Complete\r\n");
 8001840:	4824      	ldr	r0, [pc, #144]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001842:	f002 f8cf 	bl	80039e4 <puts>
		dryer.state = COMPLETE;
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001848:	2202      	movs	r2, #2
 800184a:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800184e:	2200      	movs	r2, #0
 8001850:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001854:	2204      	movs	r2, #4
 8001856:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_TIM_PeriodElapsedCallback+0xaa>

		pasue_cunt--;
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e022      	b.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0xf0>

	} else if (rot_left_cunt > 0) {
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00d      	beq.n	8001892 <HAL_TIM_PeriodElapsedCallback+0xce>

		rot_left_cunt--;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3b01      	subs	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001880:	701a      	strb	r2, [r3, #0]

		if (rot_left_cunt == 0) {
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d114      	bne.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0xf0>

			pasue_cunt = 3U;
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800188c:	2203      	movs	r2, #3
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e010      	b.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0xf0>

		}

	} else if (rot_right_cunt > 0) {
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0xf0>

		rot_right_cunt--;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3b01      	subs	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80018a4:	701a      	strb	r2, [r3, #0]

		if (rot_right_cunt == 0) {
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0xf0>

			pasue_cunt = 3U;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018b0:	2203      	movs	r2, #3
 80018b2:	701a      	strb	r2, [r3, #0]

		}
	}
	otp = 1;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
	lcd_update_flag = 1U;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x128>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	08004e68 	.word	0x08004e68
 80018cc:	2000017c 	.word	0x2000017c
 80018d0:	20000118 	.word	0x20000118
 80018d4:	08004e70 	.word	0x08004e70
 80018d8:	2000012c 	.word	0x2000012c
 80018dc:	20000129 	.word	0x20000129
 80018e0:	20000001 	.word	0x20000001
 80018e4:	20000128 	.word	0x20000128
 80018e8:	20000000 	.word	0x20000000
 80018ec:	2000012e 	.word	0x2000012e

080018f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>
	...

080018fc <output_init>:
 *  Created on: Mar 27, 2023
 *      Author: Yash
 */
#include "output.h"

void output_init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <output_init+0xcc>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <output_init+0xcc>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <output_init+0xcc>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <output_init+0xcc>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	4a2a      	ldr	r2, [pc, #168]	; (80019c8 <output_init+0xcc>)
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	6193      	str	r3, [r2, #24]
 8001926:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <output_init+0xcc>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOx = { 0 };
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001946:	4821      	ldr	r0, [pc, #132]	; (80019cc <output_init+0xd0>)
 8001948:	f000 fd61 	bl	800240e <HAL_GPIO_WritePin>

	GPIOx.Pin = DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN;
 800194c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001950:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001956:	2302      	movs	r3, #2
 8001958:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2302      	movs	r3, #2
 800195c:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(OUTPUT_PORT, &GPIOx);
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	4619      	mov	r1, r3
 8001964:	4819      	ldr	r0, [pc, #100]	; (80019cc <output_init+0xd0>)
 8001966:	f000 fbb7 	bl	80020d8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001970:	4817      	ldr	r0, [pc, #92]	; (80019d0 <output_init+0xd4>)
 8001972:	f000 fd4c 	bl	800240e <HAL_GPIO_WritePin>

	GPIOx.Pin = FAN_PIN;
 8001976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800197a:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001980:	2302      	movs	r3, #2
 8001982:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2302      	movs	r3, #2
 8001986:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(FAN_PORT, &GPIOx);
 8001988:	f107 0308 	add.w	r3, r7, #8
 800198c:	4619      	mov	r1, r3
 800198e:	4810      	ldr	r0, [pc, #64]	; (80019d0 <output_init+0xd4>)
 8001990:	f000 fba2 	bl	80020d8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	480e      	ldr	r0, [pc, #56]	; (80019d4 <output_init+0xd8>)
 800199c:	f000 fd37 	bl	800240e <HAL_GPIO_WritePin>

	GPIOx.Pin = BUZZER_PIN;
 80019a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019a4:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 80019aa:	2302      	movs	r3, #2
 80019ac:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2302      	movs	r3, #2
 80019b0:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(BUZZER_PORT, &GPIOx);
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	4619      	mov	r1, r3
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <output_init+0xd8>)
 80019ba:	f000 fb8d 	bl	80020d8 <HAL_GPIO_Init>

}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010c00 	.word	0x40010c00
 80019d0:	40010800 	.word	0x40010800
 80019d4:	40011000 	.word	0x40011000

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_MspInit+0x40>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <HAL_MspInit+0x40>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_MspInit+0x40>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_MspInit+0x40>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_MspInit+0x40>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_MspInit+0x40>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler+0x4>

08001a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler+0x4>

08001a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a62:	f000 f9eb 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e00a      	b.n	8001a92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a7c:	f3af 8000 	nop.w
 8001a80:	4601      	mov	r1, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60ba      	str	r2, [r7, #8]
 8001a88:	b2ca      	uxtb	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dbf0      	blt.n	8001a7c <_read+0x12>
  }

  return len;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e009      	b.n	8001aca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	60ba      	str	r2, [r7, #8]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f9ca 	bl	8000e58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbf1      	blt.n	8001ab6 <_write+0x12>
  }
  return len;
 8001ad2:	687b      	ldr	r3, [r7, #4]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_close>:

int _close(int file)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b02:	605a      	str	r2, [r3, #4]
  return 0;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <_isatty>:

int _isatty(int file)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b18:	2301      	movs	r3, #1
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f001 fe82 	bl	8003874 <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20005000 	.word	0x20005000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	20000130 	.word	0x20000130
 8001ba4:	200001d8 	.word	0x200001d8

08001ba8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <timer_init>:
#include "timer.h"

TIM_HandleTypeDef htim4;

void timer_init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_CLK_ENABLE();
 8001bba:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <timer_init+0xa4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <timer_init+0xa4>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <timer_init+0xa4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <timer_init+0xa8>)
 8001bec:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <timer_init+0xac>)
 8001bee:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7200;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <timer_init+0xa8>)
 8001bf2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001bf6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <timer_init+0xa8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1110+1;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <timer_init+0xa8>)
 8001c00:	f240 4257 	movw	r2, #1111	; 0x457
 8001c04:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <timer_init+0xa8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <timer_init+0xa8>)
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim4);
 8001c12:	4812      	ldr	r0, [pc, #72]	; (8001c5c <timer_init+0xa8>)
 8001c14:	f001 f846 	bl	8002ca4 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1c:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4619      	mov	r1, r3
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <timer_init+0xa8>)
 8001c26:	f001 fa1d 	bl	8003064 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	4619      	mov	r1, r3
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <timer_init+0xa8>)
 8001c3a:	f001 fbf3 	bl	8003424 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2101      	movs	r1, #1
 8001c42:	201e      	movs	r0, #30
 8001c44:	f000 fa11 	bl	800206a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c48:	201e      	movs	r0, #30
 8001c4a:	f000 fa2a 	bl	80020a2 <HAL_NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	20000134 	.word	0x20000134
 8001c60:	40000800 	.word	0x40000800

08001c64 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM4_IRQHandler+0x10>)
 8001c6a:	f001 f8f3 	bl	8002e54 <HAL_TIM_IRQHandler>
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000134 	.word	0x20000134

08001c78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <MX_USART1_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001cb0:	f001 fc28 	bl	8003504 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f7ff fe19 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000017c 	.word	0x2000017c
 8001cc8:	40013800 	.word	0x40013800

08001ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <HAL_UART_MspInit+0x8c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d131      	bne.n	8001d50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_UART_MspInit+0x90>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	; (8001d5c <HAL_UART_MspInit+0x90>)
 8001cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_UART_MspInit+0x90>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_UART_MspInit+0x90>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_UART_MspInit+0x90>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_UART_MspInit+0x90>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <HAL_UART_MspInit+0x94>)
 8001d32:	f000 f9d1 	bl	80020d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <HAL_UART_MspInit+0x94>)
 8001d4c:	f000 f9c4 	bl	80020d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010800 	.word	0x40010800

08001d64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d64:	480c      	ldr	r0, [pc, #48]	; (8001d98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d66:	490d      	ldr	r1, [pc, #52]	; (8001d9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d7c:	4c0a      	ldr	r4, [pc, #40]	; (8001da8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d8a:	f7ff ff0d 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f001 fd77 	bl	8003880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d92:	f7ff f873 	bl	8000e7c <main>
  bx lr
 8001d96:	4770      	bx	lr
  ldr r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d9c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001da0:	08004f44 	.word	0x08004f44
  ldr r2, =_sbss
 8001da4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001da8:	200001d4 	.word	0x200001d4

08001dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC1_2_IRQHandler>
	...

08001db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_Init+0x28>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_Init+0x28>)
 8001dba:	f043 0310 	orr.w	r3, r3, #16
 8001dbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f000 f947 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f000 f808 	bl	8001ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dcc:	f7ff fe04 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40022000 	.word	0x40022000

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_InitTick+0x54>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_InitTick+0x58>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f95f 	bl	80020be <HAL_SYSTICK_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00e      	b.n	8001e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b0f      	cmp	r3, #15
 8001e0e:	d80a      	bhi.n	8001e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e10:	2200      	movs	r2, #0
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f000 f927 	bl	800206a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <HAL_InitTick+0x5c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000004 	.word	0x20000004
 8001e34:	2000000c 	.word	0x2000000c
 8001e38:	20000008 	.word	0x20000008

08001e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_IncTick+0x1c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_IncTick+0x20>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <HAL_IncTick+0x20>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	2000000c 	.word	0x2000000c
 8001e5c:	200001c0 	.word	0x200001c0

08001e60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <HAL_GetTick+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	200001c0 	.word	0x200001c0

08001e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff fff0 	bl	8001e60 <HAL_GetTick>
 8001e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d005      	beq.n	8001e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_Delay+0x44>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9a:	bf00      	nop
 8001e9c:	f7ff ffe0 	bl	8001e60 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8f7      	bhi.n	8001e9c <HAL_Delay+0x28>
  {
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000000c 	.word	0x2000000c

08001ebc <__NVIC_SetPriorityGrouping>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4906      	ldr	r1, [pc, #24]	; (8001f54 <__NVIC_EnableIRQ+0x34>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002020:	d301      	bcc.n	8002026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <SysTick_Config+0x40>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202e:	210f      	movs	r1, #15
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f7ff ff90 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <SysTick_Config+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <SysTick_Config+0x40>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff2d 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff42 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ff90 	bl	8001fac <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff5f 	bl	8001f58 <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff35 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffa2 	bl	8002010 <SysTick_Config>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b08b      	sub	sp, #44	; 0x2c
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ea:	e169      	b.n	80023c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020ec:	2201      	movs	r2, #1
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	429a      	cmp	r2, r3
 8002106:	f040 8158 	bne.w	80023ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a9a      	ldr	r2, [pc, #616]	; (8002378 <HAL_GPIO_Init+0x2a0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d05e      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002114:	4a98      	ldr	r2, [pc, #608]	; (8002378 <HAL_GPIO_Init+0x2a0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d875      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 800211a:	4a98      	ldr	r2, [pc, #608]	; (800237c <HAL_GPIO_Init+0x2a4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d058      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002120:	4a96      	ldr	r2, [pc, #600]	; (800237c <HAL_GPIO_Init+0x2a4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d86f      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 8002126:	4a96      	ldr	r2, [pc, #600]	; (8002380 <HAL_GPIO_Init+0x2a8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d052      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 800212c:	4a94      	ldr	r2, [pc, #592]	; (8002380 <HAL_GPIO_Init+0x2a8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d869      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 8002132:	4a94      	ldr	r2, [pc, #592]	; (8002384 <HAL_GPIO_Init+0x2ac>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d04c      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002138:	4a92      	ldr	r2, [pc, #584]	; (8002384 <HAL_GPIO_Init+0x2ac>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d863      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 800213e:	4a92      	ldr	r2, [pc, #584]	; (8002388 <HAL_GPIO_Init+0x2b0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d046      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002144:	4a90      	ldr	r2, [pc, #576]	; (8002388 <HAL_GPIO_Init+0x2b0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d85d      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 800214a:	2b12      	cmp	r3, #18
 800214c:	d82a      	bhi.n	80021a4 <HAL_GPIO_Init+0xcc>
 800214e:	2b12      	cmp	r3, #18
 8002150:	d859      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 8002152:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <HAL_GPIO_Init+0x80>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	080021d3 	.word	0x080021d3
 800215c:	080021ad 	.word	0x080021ad
 8002160:	080021bf 	.word	0x080021bf
 8002164:	08002201 	.word	0x08002201
 8002168:	08002207 	.word	0x08002207
 800216c:	08002207 	.word	0x08002207
 8002170:	08002207 	.word	0x08002207
 8002174:	08002207 	.word	0x08002207
 8002178:	08002207 	.word	0x08002207
 800217c:	08002207 	.word	0x08002207
 8002180:	08002207 	.word	0x08002207
 8002184:	08002207 	.word	0x08002207
 8002188:	08002207 	.word	0x08002207
 800218c:	08002207 	.word	0x08002207
 8002190:	08002207 	.word	0x08002207
 8002194:	08002207 	.word	0x08002207
 8002198:	08002207 	.word	0x08002207
 800219c:	080021b5 	.word	0x080021b5
 80021a0:	080021c9 	.word	0x080021c9
 80021a4:	4a79      	ldr	r2, [pc, #484]	; (800238c <HAL_GPIO_Init+0x2b4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021aa:	e02c      	b.n	8002206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	623b      	str	r3, [r7, #32]
          break;
 80021b2:	e029      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	3304      	adds	r3, #4
 80021ba:	623b      	str	r3, [r7, #32]
          break;
 80021bc:	e024      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	3308      	adds	r3, #8
 80021c4:	623b      	str	r3, [r7, #32]
          break;
 80021c6:	e01f      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	330c      	adds	r3, #12
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e01a      	b.n	8002208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021da:	2304      	movs	r3, #4
 80021dc:	623b      	str	r3, [r7, #32]
          break;
 80021de:	e013      	b.n	8002208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e8:	2308      	movs	r3, #8
 80021ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	611a      	str	r2, [r3, #16]
          break;
 80021f2:	e009      	b.n	8002208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021f4:	2308      	movs	r3, #8
 80021f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	615a      	str	r2, [r3, #20]
          break;
 80021fe:	e003      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
          break;
 8002204:	e000      	b.n	8002208 <HAL_GPIO_Init+0x130>
          break;
 8002206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2bff      	cmp	r3, #255	; 0xff
 800220c:	d801      	bhi.n	8002212 <HAL_GPIO_Init+0x13a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	e001      	b.n	8002216 <HAL_GPIO_Init+0x13e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3304      	adds	r3, #4
 8002216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2bff      	cmp	r3, #255	; 0xff
 800221c:	d802      	bhi.n	8002224 <HAL_GPIO_Init+0x14c>
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	e002      	b.n	800222a <HAL_GPIO_Init+0x152>
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	3b08      	subs	r3, #8
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	210f      	movs	r1, #15
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	401a      	ands	r2, r3
 800223c:	6a39      	ldr	r1, [r7, #32]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	431a      	orrs	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80b1 	beq.w	80023ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002258:	4b4d      	ldr	r3, [pc, #308]	; (8002390 <HAL_GPIO_Init+0x2b8>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <HAL_GPIO_Init+0x2b8>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6193      	str	r3, [r2, #24]
 8002264:	4b4a      	ldr	r3, [pc, #296]	; (8002390 <HAL_GPIO_Init+0x2b8>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002270:	4a48      	ldr	r2, [pc, #288]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a40      	ldr	r2, [pc, #256]	; (8002398 <HAL_GPIO_Init+0x2c0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d013      	beq.n	80022c4 <HAL_GPIO_Init+0x1ec>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3f      	ldr	r2, [pc, #252]	; (800239c <HAL_GPIO_Init+0x2c4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00d      	beq.n	80022c0 <HAL_GPIO_Init+0x1e8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3e      	ldr	r2, [pc, #248]	; (80023a0 <HAL_GPIO_Init+0x2c8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <HAL_GPIO_Init+0x1e4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a3d      	ldr	r2, [pc, #244]	; (80023a4 <HAL_GPIO_Init+0x2cc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_GPIO_Init+0x1e0>
 80022b4:	2303      	movs	r3, #3
 80022b6:	e006      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022b8:	2304      	movs	r3, #4
 80022ba:	e004      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022bc:	2302      	movs	r3, #2
 80022be:	e002      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022c4:	2300      	movs	r3, #0
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	f002 0203 	and.w	r2, r2, #3
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	4093      	lsls	r3, r2
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022d6:	492f      	ldr	r1, [pc, #188]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	492c      	ldr	r1, [pc, #176]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	43db      	mvns	r3, r3
 8002306:	4928      	ldr	r1, [pc, #160]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002308:	4013      	ands	r3, r2
 800230a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4922      	ldr	r1, [pc, #136]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	43db      	mvns	r3, r3
 800232e:	491e      	ldr	r1, [pc, #120]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002330:	4013      	ands	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	4918      	ldr	r1, [pc, #96]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	4914      	ldr	r1, [pc, #80]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d021      	beq.n	80023ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	60cb      	str	r3, [r1, #12]
 8002374:	e021      	b.n	80023ba <HAL_GPIO_Init+0x2e2>
 8002376:	bf00      	nop
 8002378:	10320000 	.word	0x10320000
 800237c:	10310000 	.word	0x10310000
 8002380:	10220000 	.word	0x10220000
 8002384:	10210000 	.word	0x10210000
 8002388:	10120000 	.word	0x10120000
 800238c:	10110000 	.word	0x10110000
 8002390:	40021000 	.word	0x40021000
 8002394:	40010000 	.word	0x40010000
 8002398:	40010800 	.word	0x40010800
 800239c:	40010c00 	.word	0x40010c00
 80023a0:	40011000 	.word	0x40011000
 80023a4:	40011400 	.word	0x40011400
 80023a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_GPIO_Init+0x304>)
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	4909      	ldr	r1, [pc, #36]	; (80023dc <HAL_GPIO_Init+0x304>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	3301      	adds	r3, #1
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f47f ae8e 	bne.w	80020ec <HAL_GPIO_Init+0x14>
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	372c      	adds	r7, #44	; 0x2c
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40010400 	.word	0x40010400

080023e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	e001      	b.n	8002402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	807b      	strh	r3, [r7, #2]
 800241a:	4613      	mov	r3, r2
 800241c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800241e:	787b      	ldrb	r3, [r7, #1]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800242a:	e003      	b.n	8002434 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	041a      	lsls	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	611a      	str	r2, [r3, #16]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
	...

08002440 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff f994 	bl	800178c <HAL_GPIO_EXTI_Callback>
  }
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40010400 	.word	0x40010400

08002470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e272      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002490:	4b92      	ldr	r3, [pc, #584]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b04      	cmp	r3, #4
 800249a:	d00c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800249c:	4b8f      	ldr	r3, [pc, #572]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d112      	bne.n	80024ce <HAL_RCC_OscConfig+0x5e>
 80024a8:	4b8c      	ldr	r3, [pc, #560]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d10b      	bne.n	80024ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b6:	4b89      	ldr	r3, [pc, #548]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d06c      	beq.n	800259c <HAL_RCC_OscConfig+0x12c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d168      	bne.n	800259c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e24c      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x76>
 80024d8:	4b80      	ldr	r3, [pc, #512]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a7f      	ldr	r2, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e02e      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x98>
 80024ee:	4b7b      	ldr	r3, [pc, #492]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7a      	ldr	r2, [pc, #488]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b78      	ldr	r3, [pc, #480]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a77      	ldr	r2, [pc, #476]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0xbc>
 8002512:	4b72      	ldr	r3, [pc, #456]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a71      	ldr	r2, [pc, #452]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b6f      	ldr	r3, [pc, #444]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6e      	ldr	r2, [pc, #440]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 800252c:	4b6b      	ldr	r3, [pc, #428]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6a      	ldr	r2, [pc, #424]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b68      	ldr	r3, [pc, #416]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a67      	ldr	r2, [pc, #412]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fc88 	bl	8001e60 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff fc84 	bl	8001e60 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e200      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b5d      	ldr	r3, [pc, #372]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xe4>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fc74 	bl	8001e60 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff fc70 	bl	8001e60 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1ec      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x10c>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	4b4c      	ldr	r3, [pc, #304]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025b6:	4b49      	ldr	r3, [pc, #292]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x18c>
 80025c2:	4b46      	ldr	r3, [pc, #280]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x176>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1c0      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4939      	ldr	r1, [pc, #228]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7ff fc29 	bl	8001e60 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002612:	f7ff fc25 	bl	8001e60 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1a1      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4927      	ldr	r1, [pc, #156]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff fc08 	bl	8001e60 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002654:	f7ff fc04 	bl	8001e60 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e180      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d03a      	beq.n	80026f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d019      	beq.n	80026ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <HAL_RCC_OscConfig+0x274>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268c:	f7ff fbe8 	bl	8001e60 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7ff fbe4 	bl	8001e60 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e160      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f000 fad8 	bl	8002c68 <RCC_Delay>
 80026b8:	e01c      	b.n	80026f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_OscConfig+0x274>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7ff fbce 	bl	8001e60 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c6:	e00f      	b.n	80026e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7ff fbca 	bl	8001e60 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d908      	bls.n	80026e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e146      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	42420000 	.word	0x42420000
 80026e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b92      	ldr	r3, [pc, #584]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1e9      	bne.n	80026c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a6 	beq.w	800284e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b8b      	ldr	r3, [pc, #556]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	4b88      	ldr	r3, [pc, #544]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a87      	ldr	r2, [pc, #540]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	61d3      	str	r3, [r2, #28]
 800271e:	4b85      	ldr	r3, [pc, #532]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b82      	ldr	r3, [pc, #520]	; (8002938 <HAL_RCC_OscConfig+0x4c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b7f      	ldr	r3, [pc, #508]	; (8002938 <HAL_RCC_OscConfig+0x4c8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7e      	ldr	r2, [pc, #504]	; (8002938 <HAL_RCC_OscConfig+0x4c8>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7ff fb8b 	bl	8001e60 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7ff fb87 	bl	8001e60 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e103      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b75      	ldr	r3, [pc, #468]	; (8002938 <HAL_RCC_OscConfig+0x4c8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x312>
 8002774:	4b6f      	ldr	r3, [pc, #444]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4a6e      	ldr	r2, [pc, #440]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6213      	str	r3, [r2, #32]
 8002780:	e02d      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x334>
 800278a:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4a69      	ldr	r2, [pc, #420]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6213      	str	r3, [r2, #32]
 8002796:	4b67      	ldr	r3, [pc, #412]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a66      	ldr	r2, [pc, #408]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0304 	bic.w	r3, r3, #4
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	e01c      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x356>
 80027ac:	4b61      	ldr	r3, [pc, #388]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a60      	ldr	r2, [pc, #384]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	4b5e      	ldr	r3, [pc, #376]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a5d      	ldr	r2, [pc, #372]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 80027c6:	4b5b      	ldr	r3, [pc, #364]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a5a      	ldr	r2, [pc, #360]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	4b58      	ldr	r3, [pc, #352]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a57      	ldr	r2, [pc, #348]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e6:	f7ff fb3b 	bl	8001e60 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7ff fb37 	bl	8001e60 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0b1      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ee      	beq.n	80027ee <HAL_RCC_OscConfig+0x37e>
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7ff fb25 	bl	8001e60 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7ff fb21 	bl	8001e60 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e09b      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	4b40      	ldr	r3, [pc, #256]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ee      	bne.n	800281a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b3c      	ldr	r3, [pc, #240]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a3b      	ldr	r2, [pc, #236]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8087 	beq.w	8002966 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002858:	4b36      	ldr	r3, [pc, #216]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d061      	beq.n	8002928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d146      	bne.n	80028fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286c:	4b33      	ldr	r3, [pc, #204]	; (800293c <HAL_RCC_OscConfig+0x4cc>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7ff faf5 	bl	8001e60 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7ff faf1 	bl	8001e60 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e06d      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288c:	4b29      	ldr	r3, [pc, #164]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	d108      	bne.n	80028b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	4921      	ldr	r1, [pc, #132]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b4:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a19      	ldr	r1, [r3, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	430b      	orrs	r3, r1
 80028c6:	491b      	ldr	r1, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7ff fac5 	bl	8001e60 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7ff fac1 	bl	8001e60 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e03d      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x46a>
 80028f8:	e035      	b.n	8002966 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_RCC_OscConfig+0x4cc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff faae 	bl	8001e60 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7ff faaa 	bl	8001e60 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e026      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x498>
 8002926:	e01e      	b.n	8002966 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d107      	bne.n	8002940 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e019      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
 800293c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_OscConfig+0x500>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	429a      	cmp	r2, r3
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0d0      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b6a      	ldr	r3, [pc, #424]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d910      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b67      	ldr	r3, [pc, #412]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	4965      	ldr	r1, [pc, #404]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b63      	ldr	r3, [pc, #396]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0b8      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d0:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e8:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a52      	ldr	r2, [pc, #328]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b50      	ldr	r3, [pc, #320]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	494d      	ldr	r1, [pc, #308]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d040      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d115      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e07f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e073      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e06b      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4936      	ldr	r1, [pc, #216]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a64:	f7ff f9fc 	bl	8001e60 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7ff f9f8 	bl	8001e60 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e053      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 020c 	and.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1eb      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d210      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 0207 	bic.w	r2, r3, #7
 8002aaa:	4922      	ldr	r1, [pc, #136]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e032      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4916      	ldr	r1, [pc, #88]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	490e      	ldr	r1, [pc, #56]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b02:	f000 f821 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8002b06:	4602      	mov	r2, r0
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	490a      	ldr	r1, [pc, #40]	; (8002b3c <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	5ccb      	ldrb	r3, [r1, r3]
 8002b16:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1a:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_RCC_ClockConfig+0x1cc>)
 8002b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_RCC_ClockConfig+0x1d0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff f95a 	bl	8001ddc <HAL_InitTick>

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40022000 	.word	0x40022000
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08004e8c 	.word	0x08004e8c
 8002b40:	20000004 	.word	0x20000004
 8002b44:	20000008 	.word	0x20000008

08002b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b48:	b490      	push	{r4, r7}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b4e:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002b50:	1d3c      	adds	r4, r7, #4
 8002b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b58:	f240 2301 	movw	r3, #513	; 0x201
 8002b5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x40>
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x46>
 8002b86:	e02b      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b8a:	623b      	str	r3, [r7, #32]
      break;
 8002b8c:	e02b      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	0c9b      	lsrs	r3, r3, #18
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3328      	adds	r3, #40	; 0x28
 8002b98:	443b      	add	r3, r7
 8002b9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b9e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	0c5b      	lsrs	r3, r3, #17
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	3328      	adds	r3, #40	; 0x28
 8002bb6:	443b      	add	r3, r7
 8002bb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc2:	fb03 f202 	mul.w	r2, r3, r2
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	e004      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	623b      	str	r3, [r7, #32]
      break;
 8002bde:	e002      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002be2:	623b      	str	r3, [r7, #32]
      break;
 8002be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3728      	adds	r7, #40	; 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc90      	pop	{r4, r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	08004e7c 	.word	0x08004e7c
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	007a1200 	.word	0x007a1200
 8002c00:	003d0900 	.word	0x003d0900

08002c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000004 	.word	0x20000004

08002c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c1c:	f7ff fff2 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4903      	ldr	r1, [pc, #12]	; (8002c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	08004e9c 	.word	0x08004e9c

08002c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c44:	f7ff ffde 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0adb      	lsrs	r3, r3, #11
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	08004e9c 	.word	0x08004e9c

08002c68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <RCC_Delay+0x34>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <RCC_Delay+0x38>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	0a5b      	lsrs	r3, r3, #9
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c84:	bf00      	nop
  }
  while (Delay --);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1e5a      	subs	r2, r3, #1
 8002c8a:	60fa      	str	r2, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f9      	bne.n	8002c84 <RCC_Delay+0x1c>
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	10624dd3 	.word	0x10624dd3

08002ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e041      	b.n	8002d3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f839 	bl	8002d42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	f000 faa6 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e03a      	b.n	8002de2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_TIM_Base_Start_IT+0x98>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00e      	beq.n	8002dac <HAL_TIM_Base_Start_IT+0x58>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d009      	beq.n	8002dac <HAL_TIM_Base_Start_IT+0x58>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_TIM_Base_Start_IT+0x58>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d111      	bne.n	8002dd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d010      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	e007      	b.n	8002de0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800

08002df8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10f      	bne.n	8002e40 <HAL_TIM_Base_Stop_IT+0x48>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	f240 4344 	movw	r3, #1092	; 0x444
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_TIM_Base_Stop_IT+0x48>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d122      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d11b      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0202 	mvn.w	r2, #2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9b1 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f9a4 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f9b3 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0204 	mvn.w	r2, #4
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f987 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f97a 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f989 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0208 	mvn.w	r2, #8
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f95d 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f950 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f95f 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f933 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f926 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f935 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0201 	mvn.w	r2, #1
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fbf6 	bl	80017c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa77 	bl	80034f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8f9 	bl	8003222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b20      	cmp	r3, #32
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b20      	cmp	r3, #32
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0220 	mvn.w	r2, #32
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fa42 	bl	80034e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_TIM_ConfigClockSource+0x18>
 8003078:	2302      	movs	r3, #2
 800307a:	e0b3      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x180>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800309a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b4:	d03e      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0xd0>
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ba:	f200 8087 	bhi.w	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c2:	f000 8085 	beq.w	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ca:	d87f      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030cc:	2b70      	cmp	r3, #112	; 0x70
 80030ce:	d01a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0xa2>
 80030d0:	2b70      	cmp	r3, #112	; 0x70
 80030d2:	d87b      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030d4:	2b60      	cmp	r3, #96	; 0x60
 80030d6:	d050      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x116>
 80030d8:	2b60      	cmp	r3, #96	; 0x60
 80030da:	d877      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030dc:	2b50      	cmp	r3, #80	; 0x50
 80030de:	d03c      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xf6>
 80030e0:	2b50      	cmp	r3, #80	; 0x50
 80030e2:	d873      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d058      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x136>
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d86f      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030ec:	2b30      	cmp	r3, #48	; 0x30
 80030ee:	d064      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x156>
 80030f0:	2b30      	cmp	r3, #48	; 0x30
 80030f2:	d86b      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d060      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x156>
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d867      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d05c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x156>
 8003100:	2b10      	cmp	r3, #16
 8003102:	d05a      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003104:	e062      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6899      	ldr	r1, [r3, #8]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f000 f966 	bl	80033e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003128:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	609a      	str	r2, [r3, #8]
      break;
 8003132:	e04e      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f000 f94f 	bl	80033e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003156:	609a      	str	r2, [r3, #8]
      break;
 8003158:	e03b      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	461a      	mov	r2, r3
 8003168:	f000 f8c6 	bl	80032f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2150      	movs	r1, #80	; 0x50
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f91d 	bl	80033b2 <TIM_ITRx_SetConfig>
      break;
 8003178:	e02b      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	461a      	mov	r2, r3
 8003188:	f000 f8e4 	bl	8003354 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2160      	movs	r1, #96	; 0x60
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f90d 	bl	80033b2 <TIM_ITRx_SetConfig>
      break;
 8003198:	e01b      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f000 f8a6 	bl	80032f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2140      	movs	r1, #64	; 0x40
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f8fd 	bl	80033b2 <TIM_ITRx_SetConfig>
      break;
 80031b8:	e00b      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	4610      	mov	r0, r2
 80031c6:	f000 f8f4 	bl	80033b2 <TIM_ITRx_SetConfig>
        break;
 80031ca:	e002      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031cc:	bf00      	nop
 80031ce:	e000      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a29      	ldr	r2, [pc, #164]	; (80032ec <TIM_Base_SetConfig+0xb8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00b      	beq.n	8003264 <TIM_Base_SetConfig+0x30>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d007      	beq.n	8003264 <TIM_Base_SetConfig+0x30>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <TIM_Base_SetConfig+0xbc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_Base_SetConfig+0x30>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <TIM_Base_SetConfig+0xc0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <TIM_Base_SetConfig+0xb8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00b      	beq.n	8003296 <TIM_Base_SetConfig+0x62>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d007      	beq.n	8003296 <TIM_Base_SetConfig+0x62>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <TIM_Base_SetConfig+0xbc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_Base_SetConfig+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <TIM_Base_SetConfig+0xc0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <TIM_Base_SetConfig+0xb8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d103      	bne.n	80032dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	615a      	str	r2, [r3, #20]
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800

080032f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0201 	bic.w	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f023 030a 	bic.w	r3, r3, #10
 8003334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f023 0210 	bic.w	r2, r3, #16
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800337e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	031b      	lsls	r3, r3, #12
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	621a      	str	r2, [r3, #32]
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f043 0307 	orr.w	r3, r3, #7
 80033d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b087      	sub	sp, #28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003400:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	431a      	orrs	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4313      	orrs	r3, r2
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	609a      	str	r2, [r3, #8]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003438:	2302      	movs	r3, #2
 800343a:	e046      	b.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00e      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003488:	d009      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a10      	ldr	r2, [pc, #64]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10c      	bne.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800

080034e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e03f      	b.n	8003596 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe fbce 	bl	8001ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f905 	bl	8003758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800355c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800356c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800357c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b08a      	sub	sp, #40	; 0x28
 80035a2:	af02      	add	r7, sp, #8
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d17c      	bne.n	80036b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_UART_Transmit+0x2c>
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e075      	b.n	80036ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_UART_Transmit+0x3e>
 80035d8:	2302      	movs	r3, #2
 80035da:	e06e      	b.n	80036ba <HAL_UART_Transmit+0x11c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2221      	movs	r2, #33	; 0x21
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f2:	f7fe fc35 	bl	8001e60 <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d108      	bne.n	8003620 <HAL_UART_Transmit+0x82>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	e003      	b.n	8003628 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003630:	e02a      	b.n	8003688 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f840 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e036      	b.n	80036ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	3302      	adds	r3, #2
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	e007      	b.n	800367a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3301      	adds	r3, #1
 8003678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1cf      	bne.n	8003632 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	2140      	movs	r1, #64	; 0x40
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f810 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e006      	b.n	80036ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
  }
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	e02c      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	d028      	beq.n	800372e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e2:	f7fe fbbd 	bl	8001e60 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d21d      	bcs.n	800372e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003700:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e00f      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	429a      	cmp	r2, r3
 800374a:	d0c3      	beq.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003792:	f023 030c 	bic.w	r3, r3, #12
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	430b      	orrs	r3, r1
 800379e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2c      	ldr	r2, [pc, #176]	; (800386c <UART_SetConfig+0x114>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d103      	bne.n	80037c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7ff fa3e 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	e002      	b.n	80037ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037c8:	f7ff fa26 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 80037cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	4a22      	ldr	r2, [pc, #136]	; (8003870 <UART_SetConfig+0x118>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	0119      	lsls	r1, r3, #4
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fbb2 f2f3 	udiv	r2, r2, r3
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <UART_SetConfig+0x118>)
 8003806:	fba3 0302 	umull	r0, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2064      	movs	r0, #100	; 0x64
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a15      	ldr	r2, [pc, #84]	; (8003870 <UART_SetConfig+0x118>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003824:	4419      	add	r1, r3
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fbb2 f2f3 	udiv	r2, r2, r3
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <UART_SetConfig+0x118>)
 800383e:	fba3 0302 	umull	r0, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2064      	movs	r0, #100	; 0x64
 8003846:	fb00 f303 	mul.w	r3, r0, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	3332      	adds	r3, #50	; 0x32
 8003850:	4a07      	ldr	r2, [pc, #28]	; (8003870 <UART_SetConfig+0x118>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	440a      	add	r2, r1
 8003862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40013800 	.word	0x40013800
 8003870:	51eb851f 	.word	0x51eb851f

08003874 <__errno>:
 8003874:	4b01      	ldr	r3, [pc, #4]	; (800387c <__errno+0x8>)
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000010 	.word	0x20000010

08003880 <__libc_init_array>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	2600      	movs	r6, #0
 8003884:	4d0c      	ldr	r5, [pc, #48]	; (80038b8 <__libc_init_array+0x38>)
 8003886:	4c0d      	ldr	r4, [pc, #52]	; (80038bc <__libc_init_array+0x3c>)
 8003888:	1b64      	subs	r4, r4, r5
 800388a:	10a4      	asrs	r4, r4, #2
 800388c:	42a6      	cmp	r6, r4
 800388e:	d109      	bne.n	80038a4 <__libc_init_array+0x24>
 8003890:	f001 fa08 	bl	8004ca4 <_init>
 8003894:	2600      	movs	r6, #0
 8003896:	4d0a      	ldr	r5, [pc, #40]	; (80038c0 <__libc_init_array+0x40>)
 8003898:	4c0a      	ldr	r4, [pc, #40]	; (80038c4 <__libc_init_array+0x44>)
 800389a:	1b64      	subs	r4, r4, r5
 800389c:	10a4      	asrs	r4, r4, #2
 800389e:	42a6      	cmp	r6, r4
 80038a0:	d105      	bne.n	80038ae <__libc_init_array+0x2e>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a8:	4798      	blx	r3
 80038aa:	3601      	adds	r6, #1
 80038ac:	e7ee      	b.n	800388c <__libc_init_array+0xc>
 80038ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b2:	4798      	blx	r3
 80038b4:	3601      	adds	r6, #1
 80038b6:	e7f2      	b.n	800389e <__libc_init_array+0x1e>
 80038b8:	08004f3c 	.word	0x08004f3c
 80038bc:	08004f3c 	.word	0x08004f3c
 80038c0:	08004f3c 	.word	0x08004f3c
 80038c4:	08004f40 	.word	0x08004f40

080038c8 <memset>:
 80038c8:	4603      	mov	r3, r0
 80038ca:	4402      	add	r2, r0
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d100      	bne.n	80038d2 <memset+0xa>
 80038d0:	4770      	bx	lr
 80038d2:	f803 1b01 	strb.w	r1, [r3], #1
 80038d6:	e7f9      	b.n	80038cc <memset+0x4>

080038d8 <iprintf>:
 80038d8:	b40f      	push	{r0, r1, r2, r3}
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <iprintf+0x2c>)
 80038dc:	b513      	push	{r0, r1, r4, lr}
 80038de:	681c      	ldr	r4, [r3, #0]
 80038e0:	b124      	cbz	r4, 80038ec <iprintf+0x14>
 80038e2:	69a3      	ldr	r3, [r4, #24]
 80038e4:	b913      	cbnz	r3, 80038ec <iprintf+0x14>
 80038e6:	4620      	mov	r0, r4
 80038e8:	f000 fa7a 	bl	8003de0 <__sinit>
 80038ec:	ab05      	add	r3, sp, #20
 80038ee:	4620      	mov	r0, r4
 80038f0:	9a04      	ldr	r2, [sp, #16]
 80038f2:	68a1      	ldr	r1, [r4, #8]
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	f000 fdd9 	bl	80044ac <_vfiprintf_r>
 80038fa:	b002      	add	sp, #8
 80038fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003900:	b004      	add	sp, #16
 8003902:	4770      	bx	lr
 8003904:	20000010 	.word	0x20000010

08003908 <_puts_r>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	460e      	mov	r6, r1
 800390c:	4605      	mov	r5, r0
 800390e:	b118      	cbz	r0, 8003918 <_puts_r+0x10>
 8003910:	6983      	ldr	r3, [r0, #24]
 8003912:	b90b      	cbnz	r3, 8003918 <_puts_r+0x10>
 8003914:	f000 fa64 	bl	8003de0 <__sinit>
 8003918:	69ab      	ldr	r3, [r5, #24]
 800391a:	68ac      	ldr	r4, [r5, #8]
 800391c:	b913      	cbnz	r3, 8003924 <_puts_r+0x1c>
 800391e:	4628      	mov	r0, r5
 8003920:	f000 fa5e 	bl	8003de0 <__sinit>
 8003924:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <_puts_r+0xd0>)
 8003926:	429c      	cmp	r4, r3
 8003928:	d120      	bne.n	800396c <_puts_r+0x64>
 800392a:	686c      	ldr	r4, [r5, #4]
 800392c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800392e:	07db      	lsls	r3, r3, #31
 8003930:	d405      	bmi.n	800393e <_puts_r+0x36>
 8003932:	89a3      	ldrh	r3, [r4, #12]
 8003934:	0598      	lsls	r0, r3, #22
 8003936:	d402      	bmi.n	800393e <_puts_r+0x36>
 8003938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800393a:	f000 faef 	bl	8003f1c <__retarget_lock_acquire_recursive>
 800393e:	89a3      	ldrh	r3, [r4, #12]
 8003940:	0719      	lsls	r1, r3, #28
 8003942:	d51d      	bpl.n	8003980 <_puts_r+0x78>
 8003944:	6923      	ldr	r3, [r4, #16]
 8003946:	b1db      	cbz	r3, 8003980 <_puts_r+0x78>
 8003948:	3e01      	subs	r6, #1
 800394a:	68a3      	ldr	r3, [r4, #8]
 800394c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003950:	3b01      	subs	r3, #1
 8003952:	60a3      	str	r3, [r4, #8]
 8003954:	bb39      	cbnz	r1, 80039a6 <_puts_r+0x9e>
 8003956:	2b00      	cmp	r3, #0
 8003958:	da38      	bge.n	80039cc <_puts_r+0xc4>
 800395a:	4622      	mov	r2, r4
 800395c:	210a      	movs	r1, #10
 800395e:	4628      	mov	r0, r5
 8003960:	f000 f868 	bl	8003a34 <__swbuf_r>
 8003964:	3001      	adds	r0, #1
 8003966:	d011      	beq.n	800398c <_puts_r+0x84>
 8003968:	250a      	movs	r5, #10
 800396a:	e011      	b.n	8003990 <_puts_r+0x88>
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <_puts_r+0xd4>)
 800396e:	429c      	cmp	r4, r3
 8003970:	d101      	bne.n	8003976 <_puts_r+0x6e>
 8003972:	68ac      	ldr	r4, [r5, #8]
 8003974:	e7da      	b.n	800392c <_puts_r+0x24>
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <_puts_r+0xd8>)
 8003978:	429c      	cmp	r4, r3
 800397a:	bf08      	it	eq
 800397c:	68ec      	ldreq	r4, [r5, #12]
 800397e:	e7d5      	b.n	800392c <_puts_r+0x24>
 8003980:	4621      	mov	r1, r4
 8003982:	4628      	mov	r0, r5
 8003984:	f000 f8a8 	bl	8003ad8 <__swsetup_r>
 8003988:	2800      	cmp	r0, #0
 800398a:	d0dd      	beq.n	8003948 <_puts_r+0x40>
 800398c:	f04f 35ff 	mov.w	r5, #4294967295
 8003990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003992:	07da      	lsls	r2, r3, #31
 8003994:	d405      	bmi.n	80039a2 <_puts_r+0x9a>
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	059b      	lsls	r3, r3, #22
 800399a:	d402      	bmi.n	80039a2 <_puts_r+0x9a>
 800399c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800399e:	f000 fabe 	bl	8003f1e <__retarget_lock_release_recursive>
 80039a2:	4628      	mov	r0, r5
 80039a4:	bd70      	pop	{r4, r5, r6, pc}
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da04      	bge.n	80039b4 <_puts_r+0xac>
 80039aa:	69a2      	ldr	r2, [r4, #24]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	dc06      	bgt.n	80039be <_puts_r+0xb6>
 80039b0:	290a      	cmp	r1, #10
 80039b2:	d004      	beq.n	80039be <_puts_r+0xb6>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	6022      	str	r2, [r4, #0]
 80039ba:	7019      	strb	r1, [r3, #0]
 80039bc:	e7c5      	b.n	800394a <_puts_r+0x42>
 80039be:	4622      	mov	r2, r4
 80039c0:	4628      	mov	r0, r5
 80039c2:	f000 f837 	bl	8003a34 <__swbuf_r>
 80039c6:	3001      	adds	r0, #1
 80039c8:	d1bf      	bne.n	800394a <_puts_r+0x42>
 80039ca:	e7df      	b.n	800398c <_puts_r+0x84>
 80039cc:	250a      	movs	r5, #10
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	6022      	str	r2, [r4, #0]
 80039d4:	701d      	strb	r5, [r3, #0]
 80039d6:	e7db      	b.n	8003990 <_puts_r+0x88>
 80039d8:	08004ec8 	.word	0x08004ec8
 80039dc:	08004ee8 	.word	0x08004ee8
 80039e0:	08004ea8 	.word	0x08004ea8

080039e4 <puts>:
 80039e4:	4b02      	ldr	r3, [pc, #8]	; (80039f0 <puts+0xc>)
 80039e6:	4601      	mov	r1, r0
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	f7ff bf8d 	b.w	8003908 <_puts_r>
 80039ee:	bf00      	nop
 80039f0:	20000010 	.word	0x20000010

080039f4 <siprintf>:
 80039f4:	b40e      	push	{r1, r2, r3}
 80039f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039fa:	b500      	push	{lr}
 80039fc:	b09c      	sub	sp, #112	; 0x70
 80039fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003a00:	9002      	str	r0, [sp, #8]
 8003a02:	9006      	str	r0, [sp, #24]
 8003a04:	9107      	str	r1, [sp, #28]
 8003a06:	9104      	str	r1, [sp, #16]
 8003a08:	4808      	ldr	r0, [pc, #32]	; (8003a2c <siprintf+0x38>)
 8003a0a:	4909      	ldr	r1, [pc, #36]	; (8003a30 <siprintf+0x3c>)
 8003a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a10:	9105      	str	r1, [sp, #20]
 8003a12:	6800      	ldr	r0, [r0, #0]
 8003a14:	a902      	add	r1, sp, #8
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	f000 fc20 	bl	800425c <_svfiprintf_r>
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	9b02      	ldr	r3, [sp, #8]
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	b01c      	add	sp, #112	; 0x70
 8003a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a28:	b003      	add	sp, #12
 8003a2a:	4770      	bx	lr
 8003a2c:	20000010 	.word	0x20000010
 8003a30:	ffff0208 	.word	0xffff0208

08003a34 <__swbuf_r>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	460e      	mov	r6, r1
 8003a38:	4614      	mov	r4, r2
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	b118      	cbz	r0, 8003a46 <__swbuf_r+0x12>
 8003a3e:	6983      	ldr	r3, [r0, #24]
 8003a40:	b90b      	cbnz	r3, 8003a46 <__swbuf_r+0x12>
 8003a42:	f000 f9cd 	bl	8003de0 <__sinit>
 8003a46:	4b21      	ldr	r3, [pc, #132]	; (8003acc <__swbuf_r+0x98>)
 8003a48:	429c      	cmp	r4, r3
 8003a4a:	d12b      	bne.n	8003aa4 <__swbuf_r+0x70>
 8003a4c:	686c      	ldr	r4, [r5, #4]
 8003a4e:	69a3      	ldr	r3, [r4, #24]
 8003a50:	60a3      	str	r3, [r4, #8]
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	071a      	lsls	r2, r3, #28
 8003a56:	d52f      	bpl.n	8003ab8 <__swbuf_r+0x84>
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	b36b      	cbz	r3, 8003ab8 <__swbuf_r+0x84>
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	6820      	ldr	r0, [r4, #0]
 8003a60:	b2f6      	uxtb	r6, r6
 8003a62:	1ac0      	subs	r0, r0, r3
 8003a64:	6963      	ldr	r3, [r4, #20]
 8003a66:	4637      	mov	r7, r6
 8003a68:	4283      	cmp	r3, r0
 8003a6a:	dc04      	bgt.n	8003a76 <__swbuf_r+0x42>
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f000 f922 	bl	8003cb8 <_fflush_r>
 8003a74:	bb30      	cbnz	r0, 8003ac4 <__swbuf_r+0x90>
 8003a76:	68a3      	ldr	r3, [r4, #8]
 8003a78:	3001      	adds	r0, #1
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	60a3      	str	r3, [r4, #8]
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	6022      	str	r2, [r4, #0]
 8003a84:	701e      	strb	r6, [r3, #0]
 8003a86:	6963      	ldr	r3, [r4, #20]
 8003a88:	4283      	cmp	r3, r0
 8003a8a:	d004      	beq.n	8003a96 <__swbuf_r+0x62>
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	07db      	lsls	r3, r3, #31
 8003a90:	d506      	bpl.n	8003aa0 <__swbuf_r+0x6c>
 8003a92:	2e0a      	cmp	r6, #10
 8003a94:	d104      	bne.n	8003aa0 <__swbuf_r+0x6c>
 8003a96:	4621      	mov	r1, r4
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 f90d 	bl	8003cb8 <_fflush_r>
 8003a9e:	b988      	cbnz	r0, 8003ac4 <__swbuf_r+0x90>
 8003aa0:	4638      	mov	r0, r7
 8003aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <__swbuf_r+0x9c>)
 8003aa6:	429c      	cmp	r4, r3
 8003aa8:	d101      	bne.n	8003aae <__swbuf_r+0x7a>
 8003aaa:	68ac      	ldr	r4, [r5, #8]
 8003aac:	e7cf      	b.n	8003a4e <__swbuf_r+0x1a>
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <__swbuf_r+0xa0>)
 8003ab0:	429c      	cmp	r4, r3
 8003ab2:	bf08      	it	eq
 8003ab4:	68ec      	ldreq	r4, [r5, #12]
 8003ab6:	e7ca      	b.n	8003a4e <__swbuf_r+0x1a>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4628      	mov	r0, r5
 8003abc:	f000 f80c 	bl	8003ad8 <__swsetup_r>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d0cb      	beq.n	8003a5c <__swbuf_r+0x28>
 8003ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ac8:	e7ea      	b.n	8003aa0 <__swbuf_r+0x6c>
 8003aca:	bf00      	nop
 8003acc:	08004ec8 	.word	0x08004ec8
 8003ad0:	08004ee8 	.word	0x08004ee8
 8003ad4:	08004ea8 	.word	0x08004ea8

08003ad8 <__swsetup_r>:
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <__swsetup_r+0xcc>)
 8003ada:	b570      	push	{r4, r5, r6, lr}
 8003adc:	681d      	ldr	r5, [r3, #0]
 8003ade:	4606      	mov	r6, r0
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	b125      	cbz	r5, 8003aee <__swsetup_r+0x16>
 8003ae4:	69ab      	ldr	r3, [r5, #24]
 8003ae6:	b913      	cbnz	r3, 8003aee <__swsetup_r+0x16>
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f000 f979 	bl	8003de0 <__sinit>
 8003aee:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <__swsetup_r+0xd0>)
 8003af0:	429c      	cmp	r4, r3
 8003af2:	d10f      	bne.n	8003b14 <__swsetup_r+0x3c>
 8003af4:	686c      	ldr	r4, [r5, #4]
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003afc:	0719      	lsls	r1, r3, #28
 8003afe:	d42c      	bmi.n	8003b5a <__swsetup_r+0x82>
 8003b00:	06dd      	lsls	r5, r3, #27
 8003b02:	d411      	bmi.n	8003b28 <__swsetup_r+0x50>
 8003b04:	2309      	movs	r3, #9
 8003b06:	6033      	str	r3, [r6, #0]
 8003b08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	81a3      	strh	r3, [r4, #12]
 8003b12:	e03e      	b.n	8003b92 <__swsetup_r+0xba>
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <__swsetup_r+0xd4>)
 8003b16:	429c      	cmp	r4, r3
 8003b18:	d101      	bne.n	8003b1e <__swsetup_r+0x46>
 8003b1a:	68ac      	ldr	r4, [r5, #8]
 8003b1c:	e7eb      	b.n	8003af6 <__swsetup_r+0x1e>
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <__swsetup_r+0xd8>)
 8003b20:	429c      	cmp	r4, r3
 8003b22:	bf08      	it	eq
 8003b24:	68ec      	ldreq	r4, [r5, #12]
 8003b26:	e7e6      	b.n	8003af6 <__swsetup_r+0x1e>
 8003b28:	0758      	lsls	r0, r3, #29
 8003b2a:	d512      	bpl.n	8003b52 <__swsetup_r+0x7a>
 8003b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b2e:	b141      	cbz	r1, 8003b42 <__swsetup_r+0x6a>
 8003b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b34:	4299      	cmp	r1, r3
 8003b36:	d002      	beq.n	8003b3e <__swsetup_r+0x66>
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f000 fa57 	bl	8003fec <_free_r>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	6363      	str	r3, [r4, #52]	; 0x34
 8003b42:	89a3      	ldrh	r3, [r4, #12]
 8003b44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6063      	str	r3, [r4, #4]
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	89a3      	ldrh	r3, [r4, #12]
 8003b54:	f043 0308 	orr.w	r3, r3, #8
 8003b58:	81a3      	strh	r3, [r4, #12]
 8003b5a:	6923      	ldr	r3, [r4, #16]
 8003b5c:	b94b      	cbnz	r3, 8003b72 <__swsetup_r+0x9a>
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b68:	d003      	beq.n	8003b72 <__swsetup_r+0x9a>
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f000 f9fd 	bl	8003f6c <__smakebuf_r>
 8003b72:	89a0      	ldrh	r0, [r4, #12]
 8003b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b78:	f010 0301 	ands.w	r3, r0, #1
 8003b7c:	d00a      	beq.n	8003b94 <__swsetup_r+0xbc>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60a3      	str	r3, [r4, #8]
 8003b82:	6963      	ldr	r3, [r4, #20]
 8003b84:	425b      	negs	r3, r3
 8003b86:	61a3      	str	r3, [r4, #24]
 8003b88:	6923      	ldr	r3, [r4, #16]
 8003b8a:	b943      	cbnz	r3, 8003b9e <__swsetup_r+0xc6>
 8003b8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b90:	d1ba      	bne.n	8003b08 <__swsetup_r+0x30>
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	0781      	lsls	r1, r0, #30
 8003b96:	bf58      	it	pl
 8003b98:	6963      	ldrpl	r3, [r4, #20]
 8003b9a:	60a3      	str	r3, [r4, #8]
 8003b9c:	e7f4      	b.n	8003b88 <__swsetup_r+0xb0>
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e7f7      	b.n	8003b92 <__swsetup_r+0xba>
 8003ba2:	bf00      	nop
 8003ba4:	20000010 	.word	0x20000010
 8003ba8:	08004ec8 	.word	0x08004ec8
 8003bac:	08004ee8 	.word	0x08004ee8
 8003bb0:	08004ea8 	.word	0x08004ea8

08003bb4 <__sflush_r>:
 8003bb4:	898a      	ldrh	r2, [r1, #12]
 8003bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb8:	4605      	mov	r5, r0
 8003bba:	0710      	lsls	r0, r2, #28
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	d457      	bmi.n	8003c70 <__sflush_r+0xbc>
 8003bc0:	684b      	ldr	r3, [r1, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	dc04      	bgt.n	8003bd0 <__sflush_r+0x1c>
 8003bc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	dc01      	bgt.n	8003bd0 <__sflush_r+0x1c>
 8003bcc:	2000      	movs	r0, #0
 8003bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bd2:	2e00      	cmp	r6, #0
 8003bd4:	d0fa      	beq.n	8003bcc <__sflush_r+0x18>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bdc:	682f      	ldr	r7, [r5, #0]
 8003bde:	602b      	str	r3, [r5, #0]
 8003be0:	d032      	beq.n	8003c48 <__sflush_r+0x94>
 8003be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	075a      	lsls	r2, r3, #29
 8003be8:	d505      	bpl.n	8003bf6 <__sflush_r+0x42>
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	1ac0      	subs	r0, r0, r3
 8003bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bf0:	b10b      	cbz	r3, 8003bf6 <__sflush_r+0x42>
 8003bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bf4:	1ac0      	subs	r0, r0, r3
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	6a21      	ldr	r1, [r4, #32]
 8003c00:	47b0      	blx	r6
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	89a3      	ldrh	r3, [r4, #12]
 8003c06:	d106      	bne.n	8003c16 <__sflush_r+0x62>
 8003c08:	6829      	ldr	r1, [r5, #0]
 8003c0a:	291d      	cmp	r1, #29
 8003c0c:	d82c      	bhi.n	8003c68 <__sflush_r+0xb4>
 8003c0e:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <__sflush_r+0x100>)
 8003c10:	40ca      	lsrs	r2, r1
 8003c12:	07d6      	lsls	r6, r2, #31
 8003c14:	d528      	bpl.n	8003c68 <__sflush_r+0xb4>
 8003c16:	2200      	movs	r2, #0
 8003c18:	6062      	str	r2, [r4, #4]
 8003c1a:	6922      	ldr	r2, [r4, #16]
 8003c1c:	04d9      	lsls	r1, r3, #19
 8003c1e:	6022      	str	r2, [r4, #0]
 8003c20:	d504      	bpl.n	8003c2c <__sflush_r+0x78>
 8003c22:	1c42      	adds	r2, r0, #1
 8003c24:	d101      	bne.n	8003c2a <__sflush_r+0x76>
 8003c26:	682b      	ldr	r3, [r5, #0]
 8003c28:	b903      	cbnz	r3, 8003c2c <__sflush_r+0x78>
 8003c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8003c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c2e:	602f      	str	r7, [r5, #0]
 8003c30:	2900      	cmp	r1, #0
 8003c32:	d0cb      	beq.n	8003bcc <__sflush_r+0x18>
 8003c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c38:	4299      	cmp	r1, r3
 8003c3a:	d002      	beq.n	8003c42 <__sflush_r+0x8e>
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f000 f9d5 	bl	8003fec <_free_r>
 8003c42:	2000      	movs	r0, #0
 8003c44:	6360      	str	r0, [r4, #52]	; 0x34
 8003c46:	e7c2      	b.n	8003bce <__sflush_r+0x1a>
 8003c48:	6a21      	ldr	r1, [r4, #32]
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	47b0      	blx	r6
 8003c50:	1c41      	adds	r1, r0, #1
 8003c52:	d1c7      	bne.n	8003be4 <__sflush_r+0x30>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0c4      	beq.n	8003be4 <__sflush_r+0x30>
 8003c5a:	2b1d      	cmp	r3, #29
 8003c5c:	d001      	beq.n	8003c62 <__sflush_r+0xae>
 8003c5e:	2b16      	cmp	r3, #22
 8003c60:	d101      	bne.n	8003c66 <__sflush_r+0xb2>
 8003c62:	602f      	str	r7, [r5, #0]
 8003c64:	e7b2      	b.n	8003bcc <__sflush_r+0x18>
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c6c:	81a3      	strh	r3, [r4, #12]
 8003c6e:	e7ae      	b.n	8003bce <__sflush_r+0x1a>
 8003c70:	690f      	ldr	r7, [r1, #16]
 8003c72:	2f00      	cmp	r7, #0
 8003c74:	d0aa      	beq.n	8003bcc <__sflush_r+0x18>
 8003c76:	0793      	lsls	r3, r2, #30
 8003c78:	bf18      	it	ne
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	680e      	ldr	r6, [r1, #0]
 8003c7e:	bf08      	it	eq
 8003c80:	694b      	ldreq	r3, [r1, #20]
 8003c82:	1bf6      	subs	r6, r6, r7
 8003c84:	600f      	str	r7, [r1, #0]
 8003c86:	608b      	str	r3, [r1, #8]
 8003c88:	2e00      	cmp	r6, #0
 8003c8a:	dd9f      	ble.n	8003bcc <__sflush_r+0x18>
 8003c8c:	4633      	mov	r3, r6
 8003c8e:	463a      	mov	r2, r7
 8003c90:	4628      	mov	r0, r5
 8003c92:	6a21      	ldr	r1, [r4, #32]
 8003c94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003c98:	47e0      	blx	ip
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	dc06      	bgt.n	8003cac <__sflush_r+0xf8>
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	e790      	b.n	8003bce <__sflush_r+0x1a>
 8003cac:	4407      	add	r7, r0
 8003cae:	1a36      	subs	r6, r6, r0
 8003cb0:	e7ea      	b.n	8003c88 <__sflush_r+0xd4>
 8003cb2:	bf00      	nop
 8003cb4:	20400001 	.word	0x20400001

08003cb8 <_fflush_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	690b      	ldr	r3, [r1, #16]
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	b913      	cbnz	r3, 8003cc8 <_fflush_r+0x10>
 8003cc2:	2500      	movs	r5, #0
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	bd38      	pop	{r3, r4, r5, pc}
 8003cc8:	b118      	cbz	r0, 8003cd2 <_fflush_r+0x1a>
 8003cca:	6983      	ldr	r3, [r0, #24]
 8003ccc:	b90b      	cbnz	r3, 8003cd2 <_fflush_r+0x1a>
 8003cce:	f000 f887 	bl	8003de0 <__sinit>
 8003cd2:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <_fflush_r+0x6c>)
 8003cd4:	429c      	cmp	r4, r3
 8003cd6:	d11b      	bne.n	8003d10 <_fflush_r+0x58>
 8003cd8:	686c      	ldr	r4, [r5, #4]
 8003cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ef      	beq.n	8003cc2 <_fflush_r+0xa>
 8003ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ce4:	07d0      	lsls	r0, r2, #31
 8003ce6:	d404      	bmi.n	8003cf2 <_fflush_r+0x3a>
 8003ce8:	0599      	lsls	r1, r3, #22
 8003cea:	d402      	bmi.n	8003cf2 <_fflush_r+0x3a>
 8003cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cee:	f000 f915 	bl	8003f1c <__retarget_lock_acquire_recursive>
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	f7ff ff5d 	bl	8003bb4 <__sflush_r>
 8003cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cfc:	4605      	mov	r5, r0
 8003cfe:	07da      	lsls	r2, r3, #31
 8003d00:	d4e0      	bmi.n	8003cc4 <_fflush_r+0xc>
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	059b      	lsls	r3, r3, #22
 8003d06:	d4dd      	bmi.n	8003cc4 <_fflush_r+0xc>
 8003d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d0a:	f000 f908 	bl	8003f1e <__retarget_lock_release_recursive>
 8003d0e:	e7d9      	b.n	8003cc4 <_fflush_r+0xc>
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <_fflush_r+0x70>)
 8003d12:	429c      	cmp	r4, r3
 8003d14:	d101      	bne.n	8003d1a <_fflush_r+0x62>
 8003d16:	68ac      	ldr	r4, [r5, #8]
 8003d18:	e7df      	b.n	8003cda <_fflush_r+0x22>
 8003d1a:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <_fflush_r+0x74>)
 8003d1c:	429c      	cmp	r4, r3
 8003d1e:	bf08      	it	eq
 8003d20:	68ec      	ldreq	r4, [r5, #12]
 8003d22:	e7da      	b.n	8003cda <_fflush_r+0x22>
 8003d24:	08004ec8 	.word	0x08004ec8
 8003d28:	08004ee8 	.word	0x08004ee8
 8003d2c:	08004ea8 	.word	0x08004ea8

08003d30 <std>:
 8003d30:	2300      	movs	r3, #0
 8003d32:	b510      	push	{r4, lr}
 8003d34:	4604      	mov	r4, r0
 8003d36:	e9c0 3300 	strd	r3, r3, [r0]
 8003d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d3e:	6083      	str	r3, [r0, #8]
 8003d40:	8181      	strh	r1, [r0, #12]
 8003d42:	6643      	str	r3, [r0, #100]	; 0x64
 8003d44:	81c2      	strh	r2, [r0, #14]
 8003d46:	6183      	str	r3, [r0, #24]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	305c      	adds	r0, #92	; 0x5c
 8003d4e:	f7ff fdbb 	bl	80038c8 <memset>
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <std+0x38>)
 8003d54:	6224      	str	r4, [r4, #32]
 8003d56:	6263      	str	r3, [r4, #36]	; 0x24
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <std+0x3c>)
 8003d5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <std+0x40>)
 8003d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <std+0x44>)
 8003d62:	6323      	str	r3, [r4, #48]	; 0x30
 8003d64:	bd10      	pop	{r4, pc}
 8003d66:	bf00      	nop
 8003d68:	08004a59 	.word	0x08004a59
 8003d6c:	08004a7b 	.word	0x08004a7b
 8003d70:	08004ab3 	.word	0x08004ab3
 8003d74:	08004ad7 	.word	0x08004ad7

08003d78 <_cleanup_r>:
 8003d78:	4901      	ldr	r1, [pc, #4]	; (8003d80 <_cleanup_r+0x8>)
 8003d7a:	f000 b8af 	b.w	8003edc <_fwalk_reent>
 8003d7e:	bf00      	nop
 8003d80:	08003cb9 	.word	0x08003cb9

08003d84 <__sfmoreglue>:
 8003d84:	2268      	movs	r2, #104	; 0x68
 8003d86:	b570      	push	{r4, r5, r6, lr}
 8003d88:	1e4d      	subs	r5, r1, #1
 8003d8a:	4355      	muls	r5, r2
 8003d8c:	460e      	mov	r6, r1
 8003d8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d92:	f000 f993 	bl	80040bc <_malloc_r>
 8003d96:	4604      	mov	r4, r0
 8003d98:	b140      	cbz	r0, 8003dac <__sfmoreglue+0x28>
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	e9c0 1600 	strd	r1, r6, [r0]
 8003da0:	300c      	adds	r0, #12
 8003da2:	60a0      	str	r0, [r4, #8]
 8003da4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003da8:	f7ff fd8e 	bl	80038c8 <memset>
 8003dac:	4620      	mov	r0, r4
 8003dae:	bd70      	pop	{r4, r5, r6, pc}

08003db0 <__sfp_lock_acquire>:
 8003db0:	4801      	ldr	r0, [pc, #4]	; (8003db8 <__sfp_lock_acquire+0x8>)
 8003db2:	f000 b8b3 	b.w	8003f1c <__retarget_lock_acquire_recursive>
 8003db6:	bf00      	nop
 8003db8:	200001c5 	.word	0x200001c5

08003dbc <__sfp_lock_release>:
 8003dbc:	4801      	ldr	r0, [pc, #4]	; (8003dc4 <__sfp_lock_release+0x8>)
 8003dbe:	f000 b8ae 	b.w	8003f1e <__retarget_lock_release_recursive>
 8003dc2:	bf00      	nop
 8003dc4:	200001c5 	.word	0x200001c5

08003dc8 <__sinit_lock_acquire>:
 8003dc8:	4801      	ldr	r0, [pc, #4]	; (8003dd0 <__sinit_lock_acquire+0x8>)
 8003dca:	f000 b8a7 	b.w	8003f1c <__retarget_lock_acquire_recursive>
 8003dce:	bf00      	nop
 8003dd0:	200001c6 	.word	0x200001c6

08003dd4 <__sinit_lock_release>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <__sinit_lock_release+0x8>)
 8003dd6:	f000 b8a2 	b.w	8003f1e <__retarget_lock_release_recursive>
 8003dda:	bf00      	nop
 8003ddc:	200001c6 	.word	0x200001c6

08003de0 <__sinit>:
 8003de0:	b510      	push	{r4, lr}
 8003de2:	4604      	mov	r4, r0
 8003de4:	f7ff fff0 	bl	8003dc8 <__sinit_lock_acquire>
 8003de8:	69a3      	ldr	r3, [r4, #24]
 8003dea:	b11b      	cbz	r3, 8003df4 <__sinit+0x14>
 8003dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003df0:	f7ff bff0 	b.w	8003dd4 <__sinit_lock_release>
 8003df4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003df8:	6523      	str	r3, [r4, #80]	; 0x50
 8003dfa:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <__sinit+0x68>)
 8003dfc:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <__sinit+0x6c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	bf08      	it	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	4620      	mov	r0, r4
 8003e0a:	bf08      	it	eq
 8003e0c:	61a3      	streq	r3, [r4, #24]
 8003e0e:	f000 f81f 	bl	8003e50 <__sfp>
 8003e12:	6060      	str	r0, [r4, #4]
 8003e14:	4620      	mov	r0, r4
 8003e16:	f000 f81b 	bl	8003e50 <__sfp>
 8003e1a:	60a0      	str	r0, [r4, #8]
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f000 f817 	bl	8003e50 <__sfp>
 8003e22:	2200      	movs	r2, #0
 8003e24:	2104      	movs	r1, #4
 8003e26:	60e0      	str	r0, [r4, #12]
 8003e28:	6860      	ldr	r0, [r4, #4]
 8003e2a:	f7ff ff81 	bl	8003d30 <std>
 8003e2e:	2201      	movs	r2, #1
 8003e30:	2109      	movs	r1, #9
 8003e32:	68a0      	ldr	r0, [r4, #8]
 8003e34:	f7ff ff7c 	bl	8003d30 <std>
 8003e38:	2202      	movs	r2, #2
 8003e3a:	2112      	movs	r1, #18
 8003e3c:	68e0      	ldr	r0, [r4, #12]
 8003e3e:	f7ff ff77 	bl	8003d30 <std>
 8003e42:	2301      	movs	r3, #1
 8003e44:	61a3      	str	r3, [r4, #24]
 8003e46:	e7d1      	b.n	8003dec <__sinit+0xc>
 8003e48:	08004ea4 	.word	0x08004ea4
 8003e4c:	08003d79 	.word	0x08003d79

08003e50 <__sfp>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	4607      	mov	r7, r0
 8003e54:	f7ff ffac 	bl	8003db0 <__sfp_lock_acquire>
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <__sfp+0x84>)
 8003e5a:	681e      	ldr	r6, [r3, #0]
 8003e5c:	69b3      	ldr	r3, [r6, #24]
 8003e5e:	b913      	cbnz	r3, 8003e66 <__sfp+0x16>
 8003e60:	4630      	mov	r0, r6
 8003e62:	f7ff ffbd 	bl	8003de0 <__sinit>
 8003e66:	3648      	adds	r6, #72	; 0x48
 8003e68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	d503      	bpl.n	8003e78 <__sfp+0x28>
 8003e70:	6833      	ldr	r3, [r6, #0]
 8003e72:	b30b      	cbz	r3, 8003eb8 <__sfp+0x68>
 8003e74:	6836      	ldr	r6, [r6, #0]
 8003e76:	e7f7      	b.n	8003e68 <__sfp+0x18>
 8003e78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e7c:	b9d5      	cbnz	r5, 8003eb4 <__sfp+0x64>
 8003e7e:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <__sfp+0x88>)
 8003e80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e84:	60e3      	str	r3, [r4, #12]
 8003e86:	6665      	str	r5, [r4, #100]	; 0x64
 8003e88:	f000 f847 	bl	8003f1a <__retarget_lock_init_recursive>
 8003e8c:	f7ff ff96 	bl	8003dbc <__sfp_lock_release>
 8003e90:	2208      	movs	r2, #8
 8003e92:	4629      	mov	r1, r5
 8003e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e9c:	6025      	str	r5, [r4, #0]
 8003e9e:	61a5      	str	r5, [r4, #24]
 8003ea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ea4:	f7ff fd10 	bl	80038c8 <memset>
 8003ea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003eac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eb4:	3468      	adds	r4, #104	; 0x68
 8003eb6:	e7d9      	b.n	8003e6c <__sfp+0x1c>
 8003eb8:	2104      	movs	r1, #4
 8003eba:	4638      	mov	r0, r7
 8003ebc:	f7ff ff62 	bl	8003d84 <__sfmoreglue>
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	6030      	str	r0, [r6, #0]
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d1d5      	bne.n	8003e74 <__sfp+0x24>
 8003ec8:	f7ff ff78 	bl	8003dbc <__sfp_lock_release>
 8003ecc:	230c      	movs	r3, #12
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	e7ee      	b.n	8003eb0 <__sfp+0x60>
 8003ed2:	bf00      	nop
 8003ed4:	08004ea4 	.word	0x08004ea4
 8003ed8:	ffff0001 	.word	0xffff0001

08003edc <_fwalk_reent>:
 8003edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee0:	4606      	mov	r6, r0
 8003ee2:	4688      	mov	r8, r1
 8003ee4:	2700      	movs	r7, #0
 8003ee6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003eea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003eee:	f1b9 0901 	subs.w	r9, r9, #1
 8003ef2:	d505      	bpl.n	8003f00 <_fwalk_reent+0x24>
 8003ef4:	6824      	ldr	r4, [r4, #0]
 8003ef6:	2c00      	cmp	r4, #0
 8003ef8:	d1f7      	bne.n	8003eea <_fwalk_reent+0xe>
 8003efa:	4638      	mov	r0, r7
 8003efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f00:	89ab      	ldrh	r3, [r5, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d907      	bls.n	8003f16 <_fwalk_reent+0x3a>
 8003f06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	d003      	beq.n	8003f16 <_fwalk_reent+0x3a>
 8003f0e:	4629      	mov	r1, r5
 8003f10:	4630      	mov	r0, r6
 8003f12:	47c0      	blx	r8
 8003f14:	4307      	orrs	r7, r0
 8003f16:	3568      	adds	r5, #104	; 0x68
 8003f18:	e7e9      	b.n	8003eee <_fwalk_reent+0x12>

08003f1a <__retarget_lock_init_recursive>:
 8003f1a:	4770      	bx	lr

08003f1c <__retarget_lock_acquire_recursive>:
 8003f1c:	4770      	bx	lr

08003f1e <__retarget_lock_release_recursive>:
 8003f1e:	4770      	bx	lr

08003f20 <__swhatbuf_r>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	460e      	mov	r6, r1
 8003f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f28:	4614      	mov	r4, r2
 8003f2a:	2900      	cmp	r1, #0
 8003f2c:	461d      	mov	r5, r3
 8003f2e:	b096      	sub	sp, #88	; 0x58
 8003f30:	da08      	bge.n	8003f44 <__swhatbuf_r+0x24>
 8003f32:	2200      	movs	r2, #0
 8003f34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f38:	602a      	str	r2, [r5, #0]
 8003f3a:	061a      	lsls	r2, r3, #24
 8003f3c:	d410      	bmi.n	8003f60 <__swhatbuf_r+0x40>
 8003f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f42:	e00e      	b.n	8003f62 <__swhatbuf_r+0x42>
 8003f44:	466a      	mov	r2, sp
 8003f46:	f000 fded 	bl	8004b24 <_fstat_r>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	dbf1      	blt.n	8003f32 <__swhatbuf_r+0x12>
 8003f4e:	9a01      	ldr	r2, [sp, #4]
 8003f50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f58:	425a      	negs	r2, r3
 8003f5a:	415a      	adcs	r2, r3
 8003f5c:	602a      	str	r2, [r5, #0]
 8003f5e:	e7ee      	b.n	8003f3e <__swhatbuf_r+0x1e>
 8003f60:	2340      	movs	r3, #64	; 0x40
 8003f62:	2000      	movs	r0, #0
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	b016      	add	sp, #88	; 0x58
 8003f68:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f6c <__smakebuf_r>:
 8003f6c:	898b      	ldrh	r3, [r1, #12]
 8003f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f70:	079d      	lsls	r5, r3, #30
 8003f72:	4606      	mov	r6, r0
 8003f74:	460c      	mov	r4, r1
 8003f76:	d507      	bpl.n	8003f88 <__smakebuf_r+0x1c>
 8003f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	6123      	str	r3, [r4, #16]
 8003f80:	2301      	movs	r3, #1
 8003f82:	6163      	str	r3, [r4, #20]
 8003f84:	b002      	add	sp, #8
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	466a      	mov	r2, sp
 8003f8a:	ab01      	add	r3, sp, #4
 8003f8c:	f7ff ffc8 	bl	8003f20 <__swhatbuf_r>
 8003f90:	9900      	ldr	r1, [sp, #0]
 8003f92:	4605      	mov	r5, r0
 8003f94:	4630      	mov	r0, r6
 8003f96:	f000 f891 	bl	80040bc <_malloc_r>
 8003f9a:	b948      	cbnz	r0, 8003fb0 <__smakebuf_r+0x44>
 8003f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa0:	059a      	lsls	r2, r3, #22
 8003fa2:	d4ef      	bmi.n	8003f84 <__smakebuf_r+0x18>
 8003fa4:	f023 0303 	bic.w	r3, r3, #3
 8003fa8:	f043 0302 	orr.w	r3, r3, #2
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	e7e3      	b.n	8003f78 <__smakebuf_r+0xc>
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <__smakebuf_r+0x7c>)
 8003fb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	6020      	str	r0, [r4, #0]
 8003fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fbc:	81a3      	strh	r3, [r4, #12]
 8003fbe:	9b00      	ldr	r3, [sp, #0]
 8003fc0:	6120      	str	r0, [r4, #16]
 8003fc2:	6163      	str	r3, [r4, #20]
 8003fc4:	9b01      	ldr	r3, [sp, #4]
 8003fc6:	b15b      	cbz	r3, 8003fe0 <__smakebuf_r+0x74>
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fce:	f000 fdbb 	bl	8004b48 <_isatty_r>
 8003fd2:	b128      	cbz	r0, 8003fe0 <__smakebuf_r+0x74>
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	f023 0303 	bic.w	r3, r3, #3
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	81a3      	strh	r3, [r4, #12]
 8003fe0:	89a0      	ldrh	r0, [r4, #12]
 8003fe2:	4305      	orrs	r5, r0
 8003fe4:	81a5      	strh	r5, [r4, #12]
 8003fe6:	e7cd      	b.n	8003f84 <__smakebuf_r+0x18>
 8003fe8:	08003d79 	.word	0x08003d79

08003fec <_free_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4605      	mov	r5, r0
 8003ff0:	2900      	cmp	r1, #0
 8003ff2:	d040      	beq.n	8004076 <_free_r+0x8a>
 8003ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ff8:	1f0c      	subs	r4, r1, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bfb8      	it	lt
 8003ffe:	18e4      	addlt	r4, r4, r3
 8004000:	f000 fdfa 	bl	8004bf8 <__malloc_lock>
 8004004:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <_free_r+0x8c>)
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	b933      	cbnz	r3, 8004018 <_free_r+0x2c>
 800400a:	6063      	str	r3, [r4, #4]
 800400c:	6014      	str	r4, [r2, #0]
 800400e:	4628      	mov	r0, r5
 8004010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004014:	f000 bdf6 	b.w	8004c04 <__malloc_unlock>
 8004018:	42a3      	cmp	r3, r4
 800401a:	d908      	bls.n	800402e <_free_r+0x42>
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	1821      	adds	r1, r4, r0
 8004020:	428b      	cmp	r3, r1
 8004022:	bf01      	itttt	eq
 8004024:	6819      	ldreq	r1, [r3, #0]
 8004026:	685b      	ldreq	r3, [r3, #4]
 8004028:	1809      	addeq	r1, r1, r0
 800402a:	6021      	streq	r1, [r4, #0]
 800402c:	e7ed      	b.n	800400a <_free_r+0x1e>
 800402e:	461a      	mov	r2, r3
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	b10b      	cbz	r3, 8004038 <_free_r+0x4c>
 8004034:	42a3      	cmp	r3, r4
 8004036:	d9fa      	bls.n	800402e <_free_r+0x42>
 8004038:	6811      	ldr	r1, [r2, #0]
 800403a:	1850      	adds	r0, r2, r1
 800403c:	42a0      	cmp	r0, r4
 800403e:	d10b      	bne.n	8004058 <_free_r+0x6c>
 8004040:	6820      	ldr	r0, [r4, #0]
 8004042:	4401      	add	r1, r0
 8004044:	1850      	adds	r0, r2, r1
 8004046:	4283      	cmp	r3, r0
 8004048:	6011      	str	r1, [r2, #0]
 800404a:	d1e0      	bne.n	800400e <_free_r+0x22>
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4401      	add	r1, r0
 8004052:	6011      	str	r1, [r2, #0]
 8004054:	6053      	str	r3, [r2, #4]
 8004056:	e7da      	b.n	800400e <_free_r+0x22>
 8004058:	d902      	bls.n	8004060 <_free_r+0x74>
 800405a:	230c      	movs	r3, #12
 800405c:	602b      	str	r3, [r5, #0]
 800405e:	e7d6      	b.n	800400e <_free_r+0x22>
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	1821      	adds	r1, r4, r0
 8004064:	428b      	cmp	r3, r1
 8004066:	bf01      	itttt	eq
 8004068:	6819      	ldreq	r1, [r3, #0]
 800406a:	685b      	ldreq	r3, [r3, #4]
 800406c:	1809      	addeq	r1, r1, r0
 800406e:	6021      	streq	r1, [r4, #0]
 8004070:	6063      	str	r3, [r4, #4]
 8004072:	6054      	str	r4, [r2, #4]
 8004074:	e7cb      	b.n	800400e <_free_r+0x22>
 8004076:	bd38      	pop	{r3, r4, r5, pc}
 8004078:	200001c8 	.word	0x200001c8

0800407c <sbrk_aligned>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	4e0e      	ldr	r6, [pc, #56]	; (80040b8 <sbrk_aligned+0x3c>)
 8004080:	460c      	mov	r4, r1
 8004082:	6831      	ldr	r1, [r6, #0]
 8004084:	4605      	mov	r5, r0
 8004086:	b911      	cbnz	r1, 800408e <sbrk_aligned+0x12>
 8004088:	f000 fcd6 	bl	8004a38 <_sbrk_r>
 800408c:	6030      	str	r0, [r6, #0]
 800408e:	4621      	mov	r1, r4
 8004090:	4628      	mov	r0, r5
 8004092:	f000 fcd1 	bl	8004a38 <_sbrk_r>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	d00a      	beq.n	80040b0 <sbrk_aligned+0x34>
 800409a:	1cc4      	adds	r4, r0, #3
 800409c:	f024 0403 	bic.w	r4, r4, #3
 80040a0:	42a0      	cmp	r0, r4
 80040a2:	d007      	beq.n	80040b4 <sbrk_aligned+0x38>
 80040a4:	1a21      	subs	r1, r4, r0
 80040a6:	4628      	mov	r0, r5
 80040a8:	f000 fcc6 	bl	8004a38 <_sbrk_r>
 80040ac:	3001      	adds	r0, #1
 80040ae:	d101      	bne.n	80040b4 <sbrk_aligned+0x38>
 80040b0:	f04f 34ff 	mov.w	r4, #4294967295
 80040b4:	4620      	mov	r0, r4
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	200001cc 	.word	0x200001cc

080040bc <_malloc_r>:
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	1ccd      	adds	r5, r1, #3
 80040c2:	f025 0503 	bic.w	r5, r5, #3
 80040c6:	3508      	adds	r5, #8
 80040c8:	2d0c      	cmp	r5, #12
 80040ca:	bf38      	it	cc
 80040cc:	250c      	movcc	r5, #12
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	4607      	mov	r7, r0
 80040d2:	db01      	blt.n	80040d8 <_malloc_r+0x1c>
 80040d4:	42a9      	cmp	r1, r5
 80040d6:	d905      	bls.n	80040e4 <_malloc_r+0x28>
 80040d8:	230c      	movs	r3, #12
 80040da:	2600      	movs	r6, #0
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	4630      	mov	r0, r6
 80040e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e4:	4e2e      	ldr	r6, [pc, #184]	; (80041a0 <_malloc_r+0xe4>)
 80040e6:	f000 fd87 	bl	8004bf8 <__malloc_lock>
 80040ea:	6833      	ldr	r3, [r6, #0]
 80040ec:	461c      	mov	r4, r3
 80040ee:	bb34      	cbnz	r4, 800413e <_malloc_r+0x82>
 80040f0:	4629      	mov	r1, r5
 80040f2:	4638      	mov	r0, r7
 80040f4:	f7ff ffc2 	bl	800407c <sbrk_aligned>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	4604      	mov	r4, r0
 80040fc:	d14d      	bne.n	800419a <_malloc_r+0xde>
 80040fe:	6834      	ldr	r4, [r6, #0]
 8004100:	4626      	mov	r6, r4
 8004102:	2e00      	cmp	r6, #0
 8004104:	d140      	bne.n	8004188 <_malloc_r+0xcc>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	4631      	mov	r1, r6
 800410a:	4638      	mov	r0, r7
 800410c:	eb04 0803 	add.w	r8, r4, r3
 8004110:	f000 fc92 	bl	8004a38 <_sbrk_r>
 8004114:	4580      	cmp	r8, r0
 8004116:	d13a      	bne.n	800418e <_malloc_r+0xd2>
 8004118:	6821      	ldr	r1, [r4, #0]
 800411a:	3503      	adds	r5, #3
 800411c:	1a6d      	subs	r5, r5, r1
 800411e:	f025 0503 	bic.w	r5, r5, #3
 8004122:	3508      	adds	r5, #8
 8004124:	2d0c      	cmp	r5, #12
 8004126:	bf38      	it	cc
 8004128:	250c      	movcc	r5, #12
 800412a:	4638      	mov	r0, r7
 800412c:	4629      	mov	r1, r5
 800412e:	f7ff ffa5 	bl	800407c <sbrk_aligned>
 8004132:	3001      	adds	r0, #1
 8004134:	d02b      	beq.n	800418e <_malloc_r+0xd2>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	442b      	add	r3, r5
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	e00e      	b.n	800415c <_malloc_r+0xa0>
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	1b52      	subs	r2, r2, r5
 8004142:	d41e      	bmi.n	8004182 <_malloc_r+0xc6>
 8004144:	2a0b      	cmp	r2, #11
 8004146:	d916      	bls.n	8004176 <_malloc_r+0xba>
 8004148:	1961      	adds	r1, r4, r5
 800414a:	42a3      	cmp	r3, r4
 800414c:	6025      	str	r5, [r4, #0]
 800414e:	bf18      	it	ne
 8004150:	6059      	strne	r1, [r3, #4]
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	bf08      	it	eq
 8004156:	6031      	streq	r1, [r6, #0]
 8004158:	5162      	str	r2, [r4, r5]
 800415a:	604b      	str	r3, [r1, #4]
 800415c:	4638      	mov	r0, r7
 800415e:	f104 060b 	add.w	r6, r4, #11
 8004162:	f000 fd4f 	bl	8004c04 <__malloc_unlock>
 8004166:	f026 0607 	bic.w	r6, r6, #7
 800416a:	1d23      	adds	r3, r4, #4
 800416c:	1af2      	subs	r2, r6, r3
 800416e:	d0b6      	beq.n	80040de <_malloc_r+0x22>
 8004170:	1b9b      	subs	r3, r3, r6
 8004172:	50a3      	str	r3, [r4, r2]
 8004174:	e7b3      	b.n	80040de <_malloc_r+0x22>
 8004176:	6862      	ldr	r2, [r4, #4]
 8004178:	42a3      	cmp	r3, r4
 800417a:	bf0c      	ite	eq
 800417c:	6032      	streq	r2, [r6, #0]
 800417e:	605a      	strne	r2, [r3, #4]
 8004180:	e7ec      	b.n	800415c <_malloc_r+0xa0>
 8004182:	4623      	mov	r3, r4
 8004184:	6864      	ldr	r4, [r4, #4]
 8004186:	e7b2      	b.n	80040ee <_malloc_r+0x32>
 8004188:	4634      	mov	r4, r6
 800418a:	6876      	ldr	r6, [r6, #4]
 800418c:	e7b9      	b.n	8004102 <_malloc_r+0x46>
 800418e:	230c      	movs	r3, #12
 8004190:	4638      	mov	r0, r7
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	f000 fd36 	bl	8004c04 <__malloc_unlock>
 8004198:	e7a1      	b.n	80040de <_malloc_r+0x22>
 800419a:	6025      	str	r5, [r4, #0]
 800419c:	e7de      	b.n	800415c <_malloc_r+0xa0>
 800419e:	bf00      	nop
 80041a0:	200001c8 	.word	0x200001c8

080041a4 <__ssputs_r>:
 80041a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a8:	688e      	ldr	r6, [r1, #8]
 80041aa:	4682      	mov	sl, r0
 80041ac:	429e      	cmp	r6, r3
 80041ae:	460c      	mov	r4, r1
 80041b0:	4690      	mov	r8, r2
 80041b2:	461f      	mov	r7, r3
 80041b4:	d838      	bhi.n	8004228 <__ssputs_r+0x84>
 80041b6:	898a      	ldrh	r2, [r1, #12]
 80041b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041bc:	d032      	beq.n	8004224 <__ssputs_r+0x80>
 80041be:	6825      	ldr	r5, [r4, #0]
 80041c0:	6909      	ldr	r1, [r1, #16]
 80041c2:	3301      	adds	r3, #1
 80041c4:	eba5 0901 	sub.w	r9, r5, r1
 80041c8:	6965      	ldr	r5, [r4, #20]
 80041ca:	444b      	add	r3, r9
 80041cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041d4:	106d      	asrs	r5, r5, #1
 80041d6:	429d      	cmp	r5, r3
 80041d8:	bf38      	it	cc
 80041da:	461d      	movcc	r5, r3
 80041dc:	0553      	lsls	r3, r2, #21
 80041de:	d531      	bpl.n	8004244 <__ssputs_r+0xa0>
 80041e0:	4629      	mov	r1, r5
 80041e2:	f7ff ff6b 	bl	80040bc <_malloc_r>
 80041e6:	4606      	mov	r6, r0
 80041e8:	b950      	cbnz	r0, 8004200 <__ssputs_r+0x5c>
 80041ea:	230c      	movs	r3, #12
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	f8ca 3000 	str.w	r3, [sl]
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004200:	464a      	mov	r2, r9
 8004202:	6921      	ldr	r1, [r4, #16]
 8004204:	f000 fcd0 	bl	8004ba8 <memcpy>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800420e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004212:	81a3      	strh	r3, [r4, #12]
 8004214:	6126      	str	r6, [r4, #16]
 8004216:	444e      	add	r6, r9
 8004218:	6026      	str	r6, [r4, #0]
 800421a:	463e      	mov	r6, r7
 800421c:	6165      	str	r5, [r4, #20]
 800421e:	eba5 0509 	sub.w	r5, r5, r9
 8004222:	60a5      	str	r5, [r4, #8]
 8004224:	42be      	cmp	r6, r7
 8004226:	d900      	bls.n	800422a <__ssputs_r+0x86>
 8004228:	463e      	mov	r6, r7
 800422a:	4632      	mov	r2, r6
 800422c:	4641      	mov	r1, r8
 800422e:	6820      	ldr	r0, [r4, #0]
 8004230:	f000 fcc8 	bl	8004bc4 <memmove>
 8004234:	68a3      	ldr	r3, [r4, #8]
 8004236:	2000      	movs	r0, #0
 8004238:	1b9b      	subs	r3, r3, r6
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	4433      	add	r3, r6
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	e7db      	b.n	80041fc <__ssputs_r+0x58>
 8004244:	462a      	mov	r2, r5
 8004246:	f000 fce3 	bl	8004c10 <_realloc_r>
 800424a:	4606      	mov	r6, r0
 800424c:	2800      	cmp	r0, #0
 800424e:	d1e1      	bne.n	8004214 <__ssputs_r+0x70>
 8004250:	4650      	mov	r0, sl
 8004252:	6921      	ldr	r1, [r4, #16]
 8004254:	f7ff feca 	bl	8003fec <_free_r>
 8004258:	e7c7      	b.n	80041ea <__ssputs_r+0x46>
	...

0800425c <_svfiprintf_r>:
 800425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004260:	4698      	mov	r8, r3
 8004262:	898b      	ldrh	r3, [r1, #12]
 8004264:	4607      	mov	r7, r0
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	460d      	mov	r5, r1
 800426a:	4614      	mov	r4, r2
 800426c:	b09d      	sub	sp, #116	; 0x74
 800426e:	d50e      	bpl.n	800428e <_svfiprintf_r+0x32>
 8004270:	690b      	ldr	r3, [r1, #16]
 8004272:	b963      	cbnz	r3, 800428e <_svfiprintf_r+0x32>
 8004274:	2140      	movs	r1, #64	; 0x40
 8004276:	f7ff ff21 	bl	80040bc <_malloc_r>
 800427a:	6028      	str	r0, [r5, #0]
 800427c:	6128      	str	r0, [r5, #16]
 800427e:	b920      	cbnz	r0, 800428a <_svfiprintf_r+0x2e>
 8004280:	230c      	movs	r3, #12
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295
 8004288:	e0d1      	b.n	800442e <_svfiprintf_r+0x1d2>
 800428a:	2340      	movs	r3, #64	; 0x40
 800428c:	616b      	str	r3, [r5, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	9309      	str	r3, [sp, #36]	; 0x24
 8004292:	2320      	movs	r3, #32
 8004294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004298:	2330      	movs	r3, #48	; 0x30
 800429a:	f04f 0901 	mov.w	r9, #1
 800429e:	f8cd 800c 	str.w	r8, [sp, #12]
 80042a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004448 <_svfiprintf_r+0x1ec>
 80042a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042aa:	4623      	mov	r3, r4
 80042ac:	469a      	mov	sl, r3
 80042ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042b2:	b10a      	cbz	r2, 80042b8 <_svfiprintf_r+0x5c>
 80042b4:	2a25      	cmp	r2, #37	; 0x25
 80042b6:	d1f9      	bne.n	80042ac <_svfiprintf_r+0x50>
 80042b8:	ebba 0b04 	subs.w	fp, sl, r4
 80042bc:	d00b      	beq.n	80042d6 <_svfiprintf_r+0x7a>
 80042be:	465b      	mov	r3, fp
 80042c0:	4622      	mov	r2, r4
 80042c2:	4629      	mov	r1, r5
 80042c4:	4638      	mov	r0, r7
 80042c6:	f7ff ff6d 	bl	80041a4 <__ssputs_r>
 80042ca:	3001      	adds	r0, #1
 80042cc:	f000 80aa 	beq.w	8004424 <_svfiprintf_r+0x1c8>
 80042d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042d2:	445a      	add	r2, fp
 80042d4:	9209      	str	r2, [sp, #36]	; 0x24
 80042d6:	f89a 3000 	ldrb.w	r3, [sl]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80a2 	beq.w	8004424 <_svfiprintf_r+0x1c8>
 80042e0:	2300      	movs	r3, #0
 80042e2:	f04f 32ff 	mov.w	r2, #4294967295
 80042e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ea:	f10a 0a01 	add.w	sl, sl, #1
 80042ee:	9304      	str	r3, [sp, #16]
 80042f0:	9307      	str	r3, [sp, #28]
 80042f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042f6:	931a      	str	r3, [sp, #104]	; 0x68
 80042f8:	4654      	mov	r4, sl
 80042fa:	2205      	movs	r2, #5
 80042fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004300:	4851      	ldr	r0, [pc, #324]	; (8004448 <_svfiprintf_r+0x1ec>)
 8004302:	f000 fc43 	bl	8004b8c <memchr>
 8004306:	9a04      	ldr	r2, [sp, #16]
 8004308:	b9d8      	cbnz	r0, 8004342 <_svfiprintf_r+0xe6>
 800430a:	06d0      	lsls	r0, r2, #27
 800430c:	bf44      	itt	mi
 800430e:	2320      	movmi	r3, #32
 8004310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004314:	0711      	lsls	r1, r2, #28
 8004316:	bf44      	itt	mi
 8004318:	232b      	movmi	r3, #43	; 0x2b
 800431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800431e:	f89a 3000 	ldrb.w	r3, [sl]
 8004322:	2b2a      	cmp	r3, #42	; 0x2a
 8004324:	d015      	beq.n	8004352 <_svfiprintf_r+0xf6>
 8004326:	4654      	mov	r4, sl
 8004328:	2000      	movs	r0, #0
 800432a:	f04f 0c0a 	mov.w	ip, #10
 800432e:	9a07      	ldr	r2, [sp, #28]
 8004330:	4621      	mov	r1, r4
 8004332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004336:	3b30      	subs	r3, #48	; 0x30
 8004338:	2b09      	cmp	r3, #9
 800433a:	d94e      	bls.n	80043da <_svfiprintf_r+0x17e>
 800433c:	b1b0      	cbz	r0, 800436c <_svfiprintf_r+0x110>
 800433e:	9207      	str	r2, [sp, #28]
 8004340:	e014      	b.n	800436c <_svfiprintf_r+0x110>
 8004342:	eba0 0308 	sub.w	r3, r0, r8
 8004346:	fa09 f303 	lsl.w	r3, r9, r3
 800434a:	4313      	orrs	r3, r2
 800434c:	46a2      	mov	sl, r4
 800434e:	9304      	str	r3, [sp, #16]
 8004350:	e7d2      	b.n	80042f8 <_svfiprintf_r+0x9c>
 8004352:	9b03      	ldr	r3, [sp, #12]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	9103      	str	r1, [sp, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfbb      	ittet	lt
 800435e:	425b      	neglt	r3, r3
 8004360:	f042 0202 	orrlt.w	r2, r2, #2
 8004364:	9307      	strge	r3, [sp, #28]
 8004366:	9307      	strlt	r3, [sp, #28]
 8004368:	bfb8      	it	lt
 800436a:	9204      	strlt	r2, [sp, #16]
 800436c:	7823      	ldrb	r3, [r4, #0]
 800436e:	2b2e      	cmp	r3, #46	; 0x2e
 8004370:	d10c      	bne.n	800438c <_svfiprintf_r+0x130>
 8004372:	7863      	ldrb	r3, [r4, #1]
 8004374:	2b2a      	cmp	r3, #42	; 0x2a
 8004376:	d135      	bne.n	80043e4 <_svfiprintf_r+0x188>
 8004378:	9b03      	ldr	r3, [sp, #12]
 800437a:	3402      	adds	r4, #2
 800437c:	1d1a      	adds	r2, r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	9203      	str	r2, [sp, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	bfb8      	it	lt
 8004386:	f04f 33ff 	movlt.w	r3, #4294967295
 800438a:	9305      	str	r3, [sp, #20]
 800438c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800444c <_svfiprintf_r+0x1f0>
 8004390:	2203      	movs	r2, #3
 8004392:	4650      	mov	r0, sl
 8004394:	7821      	ldrb	r1, [r4, #0]
 8004396:	f000 fbf9 	bl	8004b8c <memchr>
 800439a:	b140      	cbz	r0, 80043ae <_svfiprintf_r+0x152>
 800439c:	2340      	movs	r3, #64	; 0x40
 800439e:	eba0 000a 	sub.w	r0, r0, sl
 80043a2:	fa03 f000 	lsl.w	r0, r3, r0
 80043a6:	9b04      	ldr	r3, [sp, #16]
 80043a8:	3401      	adds	r4, #1
 80043aa:	4303      	orrs	r3, r0
 80043ac:	9304      	str	r3, [sp, #16]
 80043ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b2:	2206      	movs	r2, #6
 80043b4:	4826      	ldr	r0, [pc, #152]	; (8004450 <_svfiprintf_r+0x1f4>)
 80043b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043ba:	f000 fbe7 	bl	8004b8c <memchr>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d038      	beq.n	8004434 <_svfiprintf_r+0x1d8>
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <_svfiprintf_r+0x1f8>)
 80043c4:	bb1b      	cbnz	r3, 800440e <_svfiprintf_r+0x1b2>
 80043c6:	9b03      	ldr	r3, [sp, #12]
 80043c8:	3307      	adds	r3, #7
 80043ca:	f023 0307 	bic.w	r3, r3, #7
 80043ce:	3308      	adds	r3, #8
 80043d0:	9303      	str	r3, [sp, #12]
 80043d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d4:	4433      	add	r3, r6
 80043d6:	9309      	str	r3, [sp, #36]	; 0x24
 80043d8:	e767      	b.n	80042aa <_svfiprintf_r+0x4e>
 80043da:	460c      	mov	r4, r1
 80043dc:	2001      	movs	r0, #1
 80043de:	fb0c 3202 	mla	r2, ip, r2, r3
 80043e2:	e7a5      	b.n	8004330 <_svfiprintf_r+0xd4>
 80043e4:	2300      	movs	r3, #0
 80043e6:	f04f 0c0a 	mov.w	ip, #10
 80043ea:	4619      	mov	r1, r3
 80043ec:	3401      	adds	r4, #1
 80043ee:	9305      	str	r3, [sp, #20]
 80043f0:	4620      	mov	r0, r4
 80043f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043f6:	3a30      	subs	r2, #48	; 0x30
 80043f8:	2a09      	cmp	r2, #9
 80043fa:	d903      	bls.n	8004404 <_svfiprintf_r+0x1a8>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0c5      	beq.n	800438c <_svfiprintf_r+0x130>
 8004400:	9105      	str	r1, [sp, #20]
 8004402:	e7c3      	b.n	800438c <_svfiprintf_r+0x130>
 8004404:	4604      	mov	r4, r0
 8004406:	2301      	movs	r3, #1
 8004408:	fb0c 2101 	mla	r1, ip, r1, r2
 800440c:	e7f0      	b.n	80043f0 <_svfiprintf_r+0x194>
 800440e:	ab03      	add	r3, sp, #12
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	462a      	mov	r2, r5
 8004414:	4638      	mov	r0, r7
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <_svfiprintf_r+0x1fc>)
 8004418:	a904      	add	r1, sp, #16
 800441a:	f3af 8000 	nop.w
 800441e:	1c42      	adds	r2, r0, #1
 8004420:	4606      	mov	r6, r0
 8004422:	d1d6      	bne.n	80043d2 <_svfiprintf_r+0x176>
 8004424:	89ab      	ldrh	r3, [r5, #12]
 8004426:	065b      	lsls	r3, r3, #25
 8004428:	f53f af2c 	bmi.w	8004284 <_svfiprintf_r+0x28>
 800442c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800442e:	b01d      	add	sp, #116	; 0x74
 8004430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004434:	ab03      	add	r3, sp, #12
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	462a      	mov	r2, r5
 800443a:	4638      	mov	r0, r7
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <_svfiprintf_r+0x1fc>)
 800443e:	a904      	add	r1, sp, #16
 8004440:	f000 f9d4 	bl	80047ec <_printf_i>
 8004444:	e7eb      	b.n	800441e <_svfiprintf_r+0x1c2>
 8004446:	bf00      	nop
 8004448:	08004f08 	.word	0x08004f08
 800444c:	08004f0e 	.word	0x08004f0e
 8004450:	08004f12 	.word	0x08004f12
 8004454:	00000000 	.word	0x00000000
 8004458:	080041a5 	.word	0x080041a5

0800445c <__sfputc_r>:
 800445c:	6893      	ldr	r3, [r2, #8]
 800445e:	b410      	push	{r4}
 8004460:	3b01      	subs	r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	6093      	str	r3, [r2, #8]
 8004466:	da07      	bge.n	8004478 <__sfputc_r+0x1c>
 8004468:	6994      	ldr	r4, [r2, #24]
 800446a:	42a3      	cmp	r3, r4
 800446c:	db01      	blt.n	8004472 <__sfputc_r+0x16>
 800446e:	290a      	cmp	r1, #10
 8004470:	d102      	bne.n	8004478 <__sfputc_r+0x1c>
 8004472:	bc10      	pop	{r4}
 8004474:	f7ff bade 	b.w	8003a34 <__swbuf_r>
 8004478:	6813      	ldr	r3, [r2, #0]
 800447a:	1c58      	adds	r0, r3, #1
 800447c:	6010      	str	r0, [r2, #0]
 800447e:	7019      	strb	r1, [r3, #0]
 8004480:	4608      	mov	r0, r1
 8004482:	bc10      	pop	{r4}
 8004484:	4770      	bx	lr

08004486 <__sfputs_r>:
 8004486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004488:	4606      	mov	r6, r0
 800448a:	460f      	mov	r7, r1
 800448c:	4614      	mov	r4, r2
 800448e:	18d5      	adds	r5, r2, r3
 8004490:	42ac      	cmp	r4, r5
 8004492:	d101      	bne.n	8004498 <__sfputs_r+0x12>
 8004494:	2000      	movs	r0, #0
 8004496:	e007      	b.n	80044a8 <__sfputs_r+0x22>
 8004498:	463a      	mov	r2, r7
 800449a:	4630      	mov	r0, r6
 800449c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a0:	f7ff ffdc 	bl	800445c <__sfputc_r>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d1f3      	bne.n	8004490 <__sfputs_r+0xa>
 80044a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044ac <_vfiprintf_r>:
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	460d      	mov	r5, r1
 80044b2:	4614      	mov	r4, r2
 80044b4:	4698      	mov	r8, r3
 80044b6:	4606      	mov	r6, r0
 80044b8:	b09d      	sub	sp, #116	; 0x74
 80044ba:	b118      	cbz	r0, 80044c4 <_vfiprintf_r+0x18>
 80044bc:	6983      	ldr	r3, [r0, #24]
 80044be:	b90b      	cbnz	r3, 80044c4 <_vfiprintf_r+0x18>
 80044c0:	f7ff fc8e 	bl	8003de0 <__sinit>
 80044c4:	4b89      	ldr	r3, [pc, #548]	; (80046ec <_vfiprintf_r+0x240>)
 80044c6:	429d      	cmp	r5, r3
 80044c8:	d11b      	bne.n	8004502 <_vfiprintf_r+0x56>
 80044ca:	6875      	ldr	r5, [r6, #4]
 80044cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044ce:	07d9      	lsls	r1, r3, #31
 80044d0:	d405      	bmi.n	80044de <_vfiprintf_r+0x32>
 80044d2:	89ab      	ldrh	r3, [r5, #12]
 80044d4:	059a      	lsls	r2, r3, #22
 80044d6:	d402      	bmi.n	80044de <_vfiprintf_r+0x32>
 80044d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044da:	f7ff fd1f 	bl	8003f1c <__retarget_lock_acquire_recursive>
 80044de:	89ab      	ldrh	r3, [r5, #12]
 80044e0:	071b      	lsls	r3, r3, #28
 80044e2:	d501      	bpl.n	80044e8 <_vfiprintf_r+0x3c>
 80044e4:	692b      	ldr	r3, [r5, #16]
 80044e6:	b9eb      	cbnz	r3, 8004524 <_vfiprintf_r+0x78>
 80044e8:	4629      	mov	r1, r5
 80044ea:	4630      	mov	r0, r6
 80044ec:	f7ff faf4 	bl	8003ad8 <__swsetup_r>
 80044f0:	b1c0      	cbz	r0, 8004524 <_vfiprintf_r+0x78>
 80044f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044f4:	07dc      	lsls	r4, r3, #31
 80044f6:	d50e      	bpl.n	8004516 <_vfiprintf_r+0x6a>
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	b01d      	add	sp, #116	; 0x74
 80044fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004502:	4b7b      	ldr	r3, [pc, #492]	; (80046f0 <_vfiprintf_r+0x244>)
 8004504:	429d      	cmp	r5, r3
 8004506:	d101      	bne.n	800450c <_vfiprintf_r+0x60>
 8004508:	68b5      	ldr	r5, [r6, #8]
 800450a:	e7df      	b.n	80044cc <_vfiprintf_r+0x20>
 800450c:	4b79      	ldr	r3, [pc, #484]	; (80046f4 <_vfiprintf_r+0x248>)
 800450e:	429d      	cmp	r5, r3
 8004510:	bf08      	it	eq
 8004512:	68f5      	ldreq	r5, [r6, #12]
 8004514:	e7da      	b.n	80044cc <_vfiprintf_r+0x20>
 8004516:	89ab      	ldrh	r3, [r5, #12]
 8004518:	0598      	lsls	r0, r3, #22
 800451a:	d4ed      	bmi.n	80044f8 <_vfiprintf_r+0x4c>
 800451c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800451e:	f7ff fcfe 	bl	8003f1e <__retarget_lock_release_recursive>
 8004522:	e7e9      	b.n	80044f8 <_vfiprintf_r+0x4c>
 8004524:	2300      	movs	r3, #0
 8004526:	9309      	str	r3, [sp, #36]	; 0x24
 8004528:	2320      	movs	r3, #32
 800452a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800452e:	2330      	movs	r3, #48	; 0x30
 8004530:	f04f 0901 	mov.w	r9, #1
 8004534:	f8cd 800c 	str.w	r8, [sp, #12]
 8004538:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046f8 <_vfiprintf_r+0x24c>
 800453c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004540:	4623      	mov	r3, r4
 8004542:	469a      	mov	sl, r3
 8004544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004548:	b10a      	cbz	r2, 800454e <_vfiprintf_r+0xa2>
 800454a:	2a25      	cmp	r2, #37	; 0x25
 800454c:	d1f9      	bne.n	8004542 <_vfiprintf_r+0x96>
 800454e:	ebba 0b04 	subs.w	fp, sl, r4
 8004552:	d00b      	beq.n	800456c <_vfiprintf_r+0xc0>
 8004554:	465b      	mov	r3, fp
 8004556:	4622      	mov	r2, r4
 8004558:	4629      	mov	r1, r5
 800455a:	4630      	mov	r0, r6
 800455c:	f7ff ff93 	bl	8004486 <__sfputs_r>
 8004560:	3001      	adds	r0, #1
 8004562:	f000 80aa 	beq.w	80046ba <_vfiprintf_r+0x20e>
 8004566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004568:	445a      	add	r2, fp
 800456a:	9209      	str	r2, [sp, #36]	; 0x24
 800456c:	f89a 3000 	ldrb.w	r3, [sl]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a2 	beq.w	80046ba <_vfiprintf_r+0x20e>
 8004576:	2300      	movs	r3, #0
 8004578:	f04f 32ff 	mov.w	r2, #4294967295
 800457c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004580:	f10a 0a01 	add.w	sl, sl, #1
 8004584:	9304      	str	r3, [sp, #16]
 8004586:	9307      	str	r3, [sp, #28]
 8004588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800458c:	931a      	str	r3, [sp, #104]	; 0x68
 800458e:	4654      	mov	r4, sl
 8004590:	2205      	movs	r2, #5
 8004592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004596:	4858      	ldr	r0, [pc, #352]	; (80046f8 <_vfiprintf_r+0x24c>)
 8004598:	f000 faf8 	bl	8004b8c <memchr>
 800459c:	9a04      	ldr	r2, [sp, #16]
 800459e:	b9d8      	cbnz	r0, 80045d8 <_vfiprintf_r+0x12c>
 80045a0:	06d1      	lsls	r1, r2, #27
 80045a2:	bf44      	itt	mi
 80045a4:	2320      	movmi	r3, #32
 80045a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045aa:	0713      	lsls	r3, r2, #28
 80045ac:	bf44      	itt	mi
 80045ae:	232b      	movmi	r3, #43	; 0x2b
 80045b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045b4:	f89a 3000 	ldrb.w	r3, [sl]
 80045b8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ba:	d015      	beq.n	80045e8 <_vfiprintf_r+0x13c>
 80045bc:	4654      	mov	r4, sl
 80045be:	2000      	movs	r0, #0
 80045c0:	f04f 0c0a 	mov.w	ip, #10
 80045c4:	9a07      	ldr	r2, [sp, #28]
 80045c6:	4621      	mov	r1, r4
 80045c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045cc:	3b30      	subs	r3, #48	; 0x30
 80045ce:	2b09      	cmp	r3, #9
 80045d0:	d94e      	bls.n	8004670 <_vfiprintf_r+0x1c4>
 80045d2:	b1b0      	cbz	r0, 8004602 <_vfiprintf_r+0x156>
 80045d4:	9207      	str	r2, [sp, #28]
 80045d6:	e014      	b.n	8004602 <_vfiprintf_r+0x156>
 80045d8:	eba0 0308 	sub.w	r3, r0, r8
 80045dc:	fa09 f303 	lsl.w	r3, r9, r3
 80045e0:	4313      	orrs	r3, r2
 80045e2:	46a2      	mov	sl, r4
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	e7d2      	b.n	800458e <_vfiprintf_r+0xe2>
 80045e8:	9b03      	ldr	r3, [sp, #12]
 80045ea:	1d19      	adds	r1, r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	9103      	str	r1, [sp, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bfbb      	ittet	lt
 80045f4:	425b      	neglt	r3, r3
 80045f6:	f042 0202 	orrlt.w	r2, r2, #2
 80045fa:	9307      	strge	r3, [sp, #28]
 80045fc:	9307      	strlt	r3, [sp, #28]
 80045fe:	bfb8      	it	lt
 8004600:	9204      	strlt	r2, [sp, #16]
 8004602:	7823      	ldrb	r3, [r4, #0]
 8004604:	2b2e      	cmp	r3, #46	; 0x2e
 8004606:	d10c      	bne.n	8004622 <_vfiprintf_r+0x176>
 8004608:	7863      	ldrb	r3, [r4, #1]
 800460a:	2b2a      	cmp	r3, #42	; 0x2a
 800460c:	d135      	bne.n	800467a <_vfiprintf_r+0x1ce>
 800460e:	9b03      	ldr	r3, [sp, #12]
 8004610:	3402      	adds	r4, #2
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	9203      	str	r2, [sp, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	bfb8      	it	lt
 800461c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004620:	9305      	str	r3, [sp, #20]
 8004622:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80046fc <_vfiprintf_r+0x250>
 8004626:	2203      	movs	r2, #3
 8004628:	4650      	mov	r0, sl
 800462a:	7821      	ldrb	r1, [r4, #0]
 800462c:	f000 faae 	bl	8004b8c <memchr>
 8004630:	b140      	cbz	r0, 8004644 <_vfiprintf_r+0x198>
 8004632:	2340      	movs	r3, #64	; 0x40
 8004634:	eba0 000a 	sub.w	r0, r0, sl
 8004638:	fa03 f000 	lsl.w	r0, r3, r0
 800463c:	9b04      	ldr	r3, [sp, #16]
 800463e:	3401      	adds	r4, #1
 8004640:	4303      	orrs	r3, r0
 8004642:	9304      	str	r3, [sp, #16]
 8004644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004648:	2206      	movs	r2, #6
 800464a:	482d      	ldr	r0, [pc, #180]	; (8004700 <_vfiprintf_r+0x254>)
 800464c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004650:	f000 fa9c 	bl	8004b8c <memchr>
 8004654:	2800      	cmp	r0, #0
 8004656:	d03f      	beq.n	80046d8 <_vfiprintf_r+0x22c>
 8004658:	4b2a      	ldr	r3, [pc, #168]	; (8004704 <_vfiprintf_r+0x258>)
 800465a:	bb1b      	cbnz	r3, 80046a4 <_vfiprintf_r+0x1f8>
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	3307      	adds	r3, #7
 8004660:	f023 0307 	bic.w	r3, r3, #7
 8004664:	3308      	adds	r3, #8
 8004666:	9303      	str	r3, [sp, #12]
 8004668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800466a:	443b      	add	r3, r7
 800466c:	9309      	str	r3, [sp, #36]	; 0x24
 800466e:	e767      	b.n	8004540 <_vfiprintf_r+0x94>
 8004670:	460c      	mov	r4, r1
 8004672:	2001      	movs	r0, #1
 8004674:	fb0c 3202 	mla	r2, ip, r2, r3
 8004678:	e7a5      	b.n	80045c6 <_vfiprintf_r+0x11a>
 800467a:	2300      	movs	r3, #0
 800467c:	f04f 0c0a 	mov.w	ip, #10
 8004680:	4619      	mov	r1, r3
 8004682:	3401      	adds	r4, #1
 8004684:	9305      	str	r3, [sp, #20]
 8004686:	4620      	mov	r0, r4
 8004688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800468c:	3a30      	subs	r2, #48	; 0x30
 800468e:	2a09      	cmp	r2, #9
 8004690:	d903      	bls.n	800469a <_vfiprintf_r+0x1ee>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0c5      	beq.n	8004622 <_vfiprintf_r+0x176>
 8004696:	9105      	str	r1, [sp, #20]
 8004698:	e7c3      	b.n	8004622 <_vfiprintf_r+0x176>
 800469a:	4604      	mov	r4, r0
 800469c:	2301      	movs	r3, #1
 800469e:	fb0c 2101 	mla	r1, ip, r1, r2
 80046a2:	e7f0      	b.n	8004686 <_vfiprintf_r+0x1da>
 80046a4:	ab03      	add	r3, sp, #12
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	462a      	mov	r2, r5
 80046aa:	4630      	mov	r0, r6
 80046ac:	4b16      	ldr	r3, [pc, #88]	; (8004708 <_vfiprintf_r+0x25c>)
 80046ae:	a904      	add	r1, sp, #16
 80046b0:	f3af 8000 	nop.w
 80046b4:	4607      	mov	r7, r0
 80046b6:	1c78      	adds	r0, r7, #1
 80046b8:	d1d6      	bne.n	8004668 <_vfiprintf_r+0x1bc>
 80046ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046bc:	07d9      	lsls	r1, r3, #31
 80046be:	d405      	bmi.n	80046cc <_vfiprintf_r+0x220>
 80046c0:	89ab      	ldrh	r3, [r5, #12]
 80046c2:	059a      	lsls	r2, r3, #22
 80046c4:	d402      	bmi.n	80046cc <_vfiprintf_r+0x220>
 80046c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046c8:	f7ff fc29 	bl	8003f1e <__retarget_lock_release_recursive>
 80046cc:	89ab      	ldrh	r3, [r5, #12]
 80046ce:	065b      	lsls	r3, r3, #25
 80046d0:	f53f af12 	bmi.w	80044f8 <_vfiprintf_r+0x4c>
 80046d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046d6:	e711      	b.n	80044fc <_vfiprintf_r+0x50>
 80046d8:	ab03      	add	r3, sp, #12
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	462a      	mov	r2, r5
 80046de:	4630      	mov	r0, r6
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <_vfiprintf_r+0x25c>)
 80046e2:	a904      	add	r1, sp, #16
 80046e4:	f000 f882 	bl	80047ec <_printf_i>
 80046e8:	e7e4      	b.n	80046b4 <_vfiprintf_r+0x208>
 80046ea:	bf00      	nop
 80046ec:	08004ec8 	.word	0x08004ec8
 80046f0:	08004ee8 	.word	0x08004ee8
 80046f4:	08004ea8 	.word	0x08004ea8
 80046f8:	08004f08 	.word	0x08004f08
 80046fc:	08004f0e 	.word	0x08004f0e
 8004700:	08004f12 	.word	0x08004f12
 8004704:	00000000 	.word	0x00000000
 8004708:	08004487 	.word	0x08004487

0800470c <_printf_common>:
 800470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004710:	4616      	mov	r6, r2
 8004712:	4699      	mov	r9, r3
 8004714:	688a      	ldr	r2, [r1, #8]
 8004716:	690b      	ldr	r3, [r1, #16]
 8004718:	4607      	mov	r7, r0
 800471a:	4293      	cmp	r3, r2
 800471c:	bfb8      	it	lt
 800471e:	4613      	movlt	r3, r2
 8004720:	6033      	str	r3, [r6, #0]
 8004722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004726:	460c      	mov	r4, r1
 8004728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800472c:	b10a      	cbz	r2, 8004732 <_printf_common+0x26>
 800472e:	3301      	adds	r3, #1
 8004730:	6033      	str	r3, [r6, #0]
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	0699      	lsls	r1, r3, #26
 8004736:	bf42      	ittt	mi
 8004738:	6833      	ldrmi	r3, [r6, #0]
 800473a:	3302      	addmi	r3, #2
 800473c:	6033      	strmi	r3, [r6, #0]
 800473e:	6825      	ldr	r5, [r4, #0]
 8004740:	f015 0506 	ands.w	r5, r5, #6
 8004744:	d106      	bne.n	8004754 <_printf_common+0x48>
 8004746:	f104 0a19 	add.w	sl, r4, #25
 800474a:	68e3      	ldr	r3, [r4, #12]
 800474c:	6832      	ldr	r2, [r6, #0]
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	42ab      	cmp	r3, r5
 8004752:	dc28      	bgt.n	80047a6 <_printf_common+0x9a>
 8004754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004758:	1e13      	subs	r3, r2, #0
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	bf18      	it	ne
 800475e:	2301      	movne	r3, #1
 8004760:	0692      	lsls	r2, r2, #26
 8004762:	d42d      	bmi.n	80047c0 <_printf_common+0xb4>
 8004764:	4649      	mov	r1, r9
 8004766:	4638      	mov	r0, r7
 8004768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800476c:	47c0      	blx	r8
 800476e:	3001      	adds	r0, #1
 8004770:	d020      	beq.n	80047b4 <_printf_common+0xa8>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	68e5      	ldr	r5, [r4, #12]
 8004776:	f003 0306 	and.w	r3, r3, #6
 800477a:	2b04      	cmp	r3, #4
 800477c:	bf18      	it	ne
 800477e:	2500      	movne	r5, #0
 8004780:	6832      	ldr	r2, [r6, #0]
 8004782:	f04f 0600 	mov.w	r6, #0
 8004786:	68a3      	ldr	r3, [r4, #8]
 8004788:	bf08      	it	eq
 800478a:	1aad      	subeq	r5, r5, r2
 800478c:	6922      	ldr	r2, [r4, #16]
 800478e:	bf08      	it	eq
 8004790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004794:	4293      	cmp	r3, r2
 8004796:	bfc4      	itt	gt
 8004798:	1a9b      	subgt	r3, r3, r2
 800479a:	18ed      	addgt	r5, r5, r3
 800479c:	341a      	adds	r4, #26
 800479e:	42b5      	cmp	r5, r6
 80047a0:	d11a      	bne.n	80047d8 <_printf_common+0xcc>
 80047a2:	2000      	movs	r0, #0
 80047a4:	e008      	b.n	80047b8 <_printf_common+0xac>
 80047a6:	2301      	movs	r3, #1
 80047a8:	4652      	mov	r2, sl
 80047aa:	4649      	mov	r1, r9
 80047ac:	4638      	mov	r0, r7
 80047ae:	47c0      	blx	r8
 80047b0:	3001      	adds	r0, #1
 80047b2:	d103      	bne.n	80047bc <_printf_common+0xb0>
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047bc:	3501      	adds	r5, #1
 80047be:	e7c4      	b.n	800474a <_printf_common+0x3e>
 80047c0:	2030      	movs	r0, #48	; 0x30
 80047c2:	18e1      	adds	r1, r4, r3
 80047c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047ce:	4422      	add	r2, r4
 80047d0:	3302      	adds	r3, #2
 80047d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047d6:	e7c5      	b.n	8004764 <_printf_common+0x58>
 80047d8:	2301      	movs	r3, #1
 80047da:	4622      	mov	r2, r4
 80047dc:	4649      	mov	r1, r9
 80047de:	4638      	mov	r0, r7
 80047e0:	47c0      	blx	r8
 80047e2:	3001      	adds	r0, #1
 80047e4:	d0e6      	beq.n	80047b4 <_printf_common+0xa8>
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7d9      	b.n	800479e <_printf_common+0x92>
	...

080047ec <_printf_i>:
 80047ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047f0:	7e0f      	ldrb	r7, [r1, #24]
 80047f2:	4691      	mov	r9, r2
 80047f4:	2f78      	cmp	r7, #120	; 0x78
 80047f6:	4680      	mov	r8, r0
 80047f8:	460c      	mov	r4, r1
 80047fa:	469a      	mov	sl, r3
 80047fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004802:	d807      	bhi.n	8004814 <_printf_i+0x28>
 8004804:	2f62      	cmp	r7, #98	; 0x62
 8004806:	d80a      	bhi.n	800481e <_printf_i+0x32>
 8004808:	2f00      	cmp	r7, #0
 800480a:	f000 80d9 	beq.w	80049c0 <_printf_i+0x1d4>
 800480e:	2f58      	cmp	r7, #88	; 0x58
 8004810:	f000 80a4 	beq.w	800495c <_printf_i+0x170>
 8004814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800481c:	e03a      	b.n	8004894 <_printf_i+0xa8>
 800481e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004822:	2b15      	cmp	r3, #21
 8004824:	d8f6      	bhi.n	8004814 <_printf_i+0x28>
 8004826:	a101      	add	r1, pc, #4	; (adr r1, 800482c <_printf_i+0x40>)
 8004828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800482c:	08004885 	.word	0x08004885
 8004830:	08004899 	.word	0x08004899
 8004834:	08004815 	.word	0x08004815
 8004838:	08004815 	.word	0x08004815
 800483c:	08004815 	.word	0x08004815
 8004840:	08004815 	.word	0x08004815
 8004844:	08004899 	.word	0x08004899
 8004848:	08004815 	.word	0x08004815
 800484c:	08004815 	.word	0x08004815
 8004850:	08004815 	.word	0x08004815
 8004854:	08004815 	.word	0x08004815
 8004858:	080049a7 	.word	0x080049a7
 800485c:	080048c9 	.word	0x080048c9
 8004860:	08004989 	.word	0x08004989
 8004864:	08004815 	.word	0x08004815
 8004868:	08004815 	.word	0x08004815
 800486c:	080049c9 	.word	0x080049c9
 8004870:	08004815 	.word	0x08004815
 8004874:	080048c9 	.word	0x080048c9
 8004878:	08004815 	.word	0x08004815
 800487c:	08004815 	.word	0x08004815
 8004880:	08004991 	.word	0x08004991
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	1d1a      	adds	r2, r3, #4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	602a      	str	r2, [r5, #0]
 800488c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004894:	2301      	movs	r3, #1
 8004896:	e0a4      	b.n	80049e2 <_printf_i+0x1f6>
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	6829      	ldr	r1, [r5, #0]
 800489c:	0606      	lsls	r6, r0, #24
 800489e:	f101 0304 	add.w	r3, r1, #4
 80048a2:	d50a      	bpl.n	80048ba <_printf_i+0xce>
 80048a4:	680e      	ldr	r6, [r1, #0]
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	2e00      	cmp	r6, #0
 80048aa:	da03      	bge.n	80048b4 <_printf_i+0xc8>
 80048ac:	232d      	movs	r3, #45	; 0x2d
 80048ae:	4276      	negs	r6, r6
 80048b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b4:	230a      	movs	r3, #10
 80048b6:	485e      	ldr	r0, [pc, #376]	; (8004a30 <_printf_i+0x244>)
 80048b8:	e019      	b.n	80048ee <_printf_i+0x102>
 80048ba:	680e      	ldr	r6, [r1, #0]
 80048bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048c0:	602b      	str	r3, [r5, #0]
 80048c2:	bf18      	it	ne
 80048c4:	b236      	sxthne	r6, r6
 80048c6:	e7ef      	b.n	80048a8 <_printf_i+0xbc>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	6820      	ldr	r0, [r4, #0]
 80048cc:	1d19      	adds	r1, r3, #4
 80048ce:	6029      	str	r1, [r5, #0]
 80048d0:	0601      	lsls	r1, r0, #24
 80048d2:	d501      	bpl.n	80048d8 <_printf_i+0xec>
 80048d4:	681e      	ldr	r6, [r3, #0]
 80048d6:	e002      	b.n	80048de <_printf_i+0xf2>
 80048d8:	0646      	lsls	r6, r0, #25
 80048da:	d5fb      	bpl.n	80048d4 <_printf_i+0xe8>
 80048dc:	881e      	ldrh	r6, [r3, #0]
 80048de:	2f6f      	cmp	r7, #111	; 0x6f
 80048e0:	bf0c      	ite	eq
 80048e2:	2308      	moveq	r3, #8
 80048e4:	230a      	movne	r3, #10
 80048e6:	4852      	ldr	r0, [pc, #328]	; (8004a30 <_printf_i+0x244>)
 80048e8:	2100      	movs	r1, #0
 80048ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ee:	6865      	ldr	r5, [r4, #4]
 80048f0:	2d00      	cmp	r5, #0
 80048f2:	bfa8      	it	ge
 80048f4:	6821      	ldrge	r1, [r4, #0]
 80048f6:	60a5      	str	r5, [r4, #8]
 80048f8:	bfa4      	itt	ge
 80048fa:	f021 0104 	bicge.w	r1, r1, #4
 80048fe:	6021      	strge	r1, [r4, #0]
 8004900:	b90e      	cbnz	r6, 8004906 <_printf_i+0x11a>
 8004902:	2d00      	cmp	r5, #0
 8004904:	d04d      	beq.n	80049a2 <_printf_i+0x1b6>
 8004906:	4615      	mov	r5, r2
 8004908:	fbb6 f1f3 	udiv	r1, r6, r3
 800490c:	fb03 6711 	mls	r7, r3, r1, r6
 8004910:	5dc7      	ldrb	r7, [r0, r7]
 8004912:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004916:	4637      	mov	r7, r6
 8004918:	42bb      	cmp	r3, r7
 800491a:	460e      	mov	r6, r1
 800491c:	d9f4      	bls.n	8004908 <_printf_i+0x11c>
 800491e:	2b08      	cmp	r3, #8
 8004920:	d10b      	bne.n	800493a <_printf_i+0x14e>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	07de      	lsls	r6, r3, #31
 8004926:	d508      	bpl.n	800493a <_printf_i+0x14e>
 8004928:	6923      	ldr	r3, [r4, #16]
 800492a:	6861      	ldr	r1, [r4, #4]
 800492c:	4299      	cmp	r1, r3
 800492e:	bfde      	ittt	le
 8004930:	2330      	movle	r3, #48	; 0x30
 8004932:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004936:	f105 35ff 	addle.w	r5, r5, #4294967295
 800493a:	1b52      	subs	r2, r2, r5
 800493c:	6122      	str	r2, [r4, #16]
 800493e:	464b      	mov	r3, r9
 8004940:	4621      	mov	r1, r4
 8004942:	4640      	mov	r0, r8
 8004944:	f8cd a000 	str.w	sl, [sp]
 8004948:	aa03      	add	r2, sp, #12
 800494a:	f7ff fedf 	bl	800470c <_printf_common>
 800494e:	3001      	adds	r0, #1
 8004950:	d14c      	bne.n	80049ec <_printf_i+0x200>
 8004952:	f04f 30ff 	mov.w	r0, #4294967295
 8004956:	b004      	add	sp, #16
 8004958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495c:	4834      	ldr	r0, [pc, #208]	; (8004a30 <_printf_i+0x244>)
 800495e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004962:	6829      	ldr	r1, [r5, #0]
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	f851 6b04 	ldr.w	r6, [r1], #4
 800496a:	6029      	str	r1, [r5, #0]
 800496c:	061d      	lsls	r5, r3, #24
 800496e:	d514      	bpl.n	800499a <_printf_i+0x1ae>
 8004970:	07df      	lsls	r7, r3, #31
 8004972:	bf44      	itt	mi
 8004974:	f043 0320 	orrmi.w	r3, r3, #32
 8004978:	6023      	strmi	r3, [r4, #0]
 800497a:	b91e      	cbnz	r6, 8004984 <_printf_i+0x198>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	f023 0320 	bic.w	r3, r3, #32
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	2310      	movs	r3, #16
 8004986:	e7af      	b.n	80048e8 <_printf_i+0xfc>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	f043 0320 	orr.w	r3, r3, #32
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	2378      	movs	r3, #120	; 0x78
 8004992:	4828      	ldr	r0, [pc, #160]	; (8004a34 <_printf_i+0x248>)
 8004994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004998:	e7e3      	b.n	8004962 <_printf_i+0x176>
 800499a:	0659      	lsls	r1, r3, #25
 800499c:	bf48      	it	mi
 800499e:	b2b6      	uxthmi	r6, r6
 80049a0:	e7e6      	b.n	8004970 <_printf_i+0x184>
 80049a2:	4615      	mov	r5, r2
 80049a4:	e7bb      	b.n	800491e <_printf_i+0x132>
 80049a6:	682b      	ldr	r3, [r5, #0]
 80049a8:	6826      	ldr	r6, [r4, #0]
 80049aa:	1d18      	adds	r0, r3, #4
 80049ac:	6961      	ldr	r1, [r4, #20]
 80049ae:	6028      	str	r0, [r5, #0]
 80049b0:	0635      	lsls	r5, r6, #24
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	d501      	bpl.n	80049ba <_printf_i+0x1ce>
 80049b6:	6019      	str	r1, [r3, #0]
 80049b8:	e002      	b.n	80049c0 <_printf_i+0x1d4>
 80049ba:	0670      	lsls	r0, r6, #25
 80049bc:	d5fb      	bpl.n	80049b6 <_printf_i+0x1ca>
 80049be:	8019      	strh	r1, [r3, #0]
 80049c0:	2300      	movs	r3, #0
 80049c2:	4615      	mov	r5, r2
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	e7ba      	b.n	800493e <_printf_i+0x152>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	2100      	movs	r1, #0
 80049cc:	1d1a      	adds	r2, r3, #4
 80049ce:	602a      	str	r2, [r5, #0]
 80049d0:	681d      	ldr	r5, [r3, #0]
 80049d2:	6862      	ldr	r2, [r4, #4]
 80049d4:	4628      	mov	r0, r5
 80049d6:	f000 f8d9 	bl	8004b8c <memchr>
 80049da:	b108      	cbz	r0, 80049e0 <_printf_i+0x1f4>
 80049dc:	1b40      	subs	r0, r0, r5
 80049de:	6060      	str	r0, [r4, #4]
 80049e0:	6863      	ldr	r3, [r4, #4]
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	2300      	movs	r3, #0
 80049e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ea:	e7a8      	b.n	800493e <_printf_i+0x152>
 80049ec:	462a      	mov	r2, r5
 80049ee:	4649      	mov	r1, r9
 80049f0:	4640      	mov	r0, r8
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	47d0      	blx	sl
 80049f6:	3001      	adds	r0, #1
 80049f8:	d0ab      	beq.n	8004952 <_printf_i+0x166>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	079b      	lsls	r3, r3, #30
 80049fe:	d413      	bmi.n	8004a28 <_printf_i+0x23c>
 8004a00:	68e0      	ldr	r0, [r4, #12]
 8004a02:	9b03      	ldr	r3, [sp, #12]
 8004a04:	4298      	cmp	r0, r3
 8004a06:	bfb8      	it	lt
 8004a08:	4618      	movlt	r0, r3
 8004a0a:	e7a4      	b.n	8004956 <_printf_i+0x16a>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4632      	mov	r2, r6
 8004a10:	4649      	mov	r1, r9
 8004a12:	4640      	mov	r0, r8
 8004a14:	47d0      	blx	sl
 8004a16:	3001      	adds	r0, #1
 8004a18:	d09b      	beq.n	8004952 <_printf_i+0x166>
 8004a1a:	3501      	adds	r5, #1
 8004a1c:	68e3      	ldr	r3, [r4, #12]
 8004a1e:	9903      	ldr	r1, [sp, #12]
 8004a20:	1a5b      	subs	r3, r3, r1
 8004a22:	42ab      	cmp	r3, r5
 8004a24:	dcf2      	bgt.n	8004a0c <_printf_i+0x220>
 8004a26:	e7eb      	b.n	8004a00 <_printf_i+0x214>
 8004a28:	2500      	movs	r5, #0
 8004a2a:	f104 0619 	add.w	r6, r4, #25
 8004a2e:	e7f5      	b.n	8004a1c <_printf_i+0x230>
 8004a30:	08004f19 	.word	0x08004f19
 8004a34:	08004f2a 	.word	0x08004f2a

08004a38 <_sbrk_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4d05      	ldr	r5, [pc, #20]	; (8004a54 <_sbrk_r+0x1c>)
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	f7fd f87a 	bl	8001b3c <_sbrk>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_sbrk_r+0x1a>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_sbrk_r+0x1a>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	200001d0 	.word	0x200001d0

08004a58 <__sread>:
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a60:	f000 f906 	bl	8004c70 <_read_r>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	bfab      	itete	ge
 8004a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a6c:	181b      	addge	r3, r3, r0
 8004a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a72:	bfac      	ite	ge
 8004a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a76:	81a3      	strhlt	r3, [r4, #12]
 8004a78:	bd10      	pop	{r4, pc}

08004a7a <__swrite>:
 8004a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7e:	461f      	mov	r7, r3
 8004a80:	898b      	ldrh	r3, [r1, #12]
 8004a82:	4605      	mov	r5, r0
 8004a84:	05db      	lsls	r3, r3, #23
 8004a86:	460c      	mov	r4, r1
 8004a88:	4616      	mov	r6, r2
 8004a8a:	d505      	bpl.n	8004a98 <__swrite+0x1e>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a94:	f000 f868 	bl	8004b68 <_lseek_r>
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	4632      	mov	r2, r6
 8004a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa0:	81a3      	strh	r3, [r4, #12]
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aae:	f000 b817 	b.w	8004ae0 <_write_r>

08004ab2 <__sseek>:
 8004ab2:	b510      	push	{r4, lr}
 8004ab4:	460c      	mov	r4, r1
 8004ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aba:	f000 f855 	bl	8004b68 <_lseek_r>
 8004abe:	1c43      	adds	r3, r0, #1
 8004ac0:	89a3      	ldrh	r3, [r4, #12]
 8004ac2:	bf15      	itete	ne
 8004ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ace:	81a3      	strheq	r3, [r4, #12]
 8004ad0:	bf18      	it	ne
 8004ad2:	81a3      	strhne	r3, [r4, #12]
 8004ad4:	bd10      	pop	{r4, pc}

08004ad6 <__sclose>:
 8004ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ada:	f000 b813 	b.w	8004b04 <_close_r>
	...

08004ae0 <_write_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4d05      	ldr	r5, [pc, #20]	; (8004b00 <_write_r+0x20>)
 8004aec:	602a      	str	r2, [r5, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	f7fc ffd8 	bl	8001aa4 <_write>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d102      	bne.n	8004afe <_write_r+0x1e>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	b103      	cbz	r3, 8004afe <_write_r+0x1e>
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	200001d0 	.word	0x200001d0

08004b04 <_close_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	2300      	movs	r3, #0
 8004b08:	4d05      	ldr	r5, [pc, #20]	; (8004b20 <_close_r+0x1c>)
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	602b      	str	r3, [r5, #0]
 8004b10:	f7fc ffe4 	bl	8001adc <_close>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_close_r+0x1a>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_close_r+0x1a>
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	200001d0 	.word	0x200001d0

08004b24 <_fstat_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	2300      	movs	r3, #0
 8004b28:	4d06      	ldr	r5, [pc, #24]	; (8004b44 <_fstat_r+0x20>)
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	602b      	str	r3, [r5, #0]
 8004b32:	f7fc ffde 	bl	8001af2 <_fstat>
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	d102      	bne.n	8004b40 <_fstat_r+0x1c>
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	b103      	cbz	r3, 8004b40 <_fstat_r+0x1c>
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	bd38      	pop	{r3, r4, r5, pc}
 8004b42:	bf00      	nop
 8004b44:	200001d0 	.word	0x200001d0

08004b48 <_isatty_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	4d05      	ldr	r5, [pc, #20]	; (8004b64 <_isatty_r+0x1c>)
 8004b4e:	4604      	mov	r4, r0
 8004b50:	4608      	mov	r0, r1
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	f7fc ffdc 	bl	8001b10 <_isatty>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d102      	bne.n	8004b62 <_isatty_r+0x1a>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	b103      	cbz	r3, 8004b62 <_isatty_r+0x1a>
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	200001d0 	.word	0x200001d0

08004b68 <_lseek_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	2200      	movs	r2, #0
 8004b72:	4d05      	ldr	r5, [pc, #20]	; (8004b88 <_lseek_r+0x20>)
 8004b74:	602a      	str	r2, [r5, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	f7fc ffd4 	bl	8001b24 <_lseek>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d102      	bne.n	8004b86 <_lseek_r+0x1e>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	b103      	cbz	r3, 8004b86 <_lseek_r+0x1e>
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	200001d0 	.word	0x200001d0

08004b8c <memchr>:
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	b2c9      	uxtb	r1, r1
 8004b92:	4402      	add	r2, r0
 8004b94:	4293      	cmp	r3, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	d101      	bne.n	8004b9e <memchr+0x12>
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	e003      	b.n	8004ba6 <memchr+0x1a>
 8004b9e:	7804      	ldrb	r4, [r0, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	428c      	cmp	r4, r1
 8004ba4:	d1f6      	bne.n	8004b94 <memchr+0x8>
 8004ba6:	bd10      	pop	{r4, pc}

08004ba8 <memcpy>:
 8004ba8:	440a      	add	r2, r1
 8004baa:	4291      	cmp	r1, r2
 8004bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bb0:	d100      	bne.n	8004bb4 <memcpy+0xc>
 8004bb2:	4770      	bx	lr
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bba:	4291      	cmp	r1, r2
 8004bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bc0:	d1f9      	bne.n	8004bb6 <memcpy+0xe>
 8004bc2:	bd10      	pop	{r4, pc}

08004bc4 <memmove>:
 8004bc4:	4288      	cmp	r0, r1
 8004bc6:	b510      	push	{r4, lr}
 8004bc8:	eb01 0402 	add.w	r4, r1, r2
 8004bcc:	d902      	bls.n	8004bd4 <memmove+0x10>
 8004bce:	4284      	cmp	r4, r0
 8004bd0:	4623      	mov	r3, r4
 8004bd2:	d807      	bhi.n	8004be4 <memmove+0x20>
 8004bd4:	1e43      	subs	r3, r0, #1
 8004bd6:	42a1      	cmp	r1, r4
 8004bd8:	d008      	beq.n	8004bec <memmove+0x28>
 8004bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004be2:	e7f8      	b.n	8004bd6 <memmove+0x12>
 8004be4:	4601      	mov	r1, r0
 8004be6:	4402      	add	r2, r0
 8004be8:	428a      	cmp	r2, r1
 8004bea:	d100      	bne.n	8004bee <memmove+0x2a>
 8004bec:	bd10      	pop	{r4, pc}
 8004bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bf6:	e7f7      	b.n	8004be8 <memmove+0x24>

08004bf8 <__malloc_lock>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <__malloc_lock+0x8>)
 8004bfa:	f7ff b98f 	b.w	8003f1c <__retarget_lock_acquire_recursive>
 8004bfe:	bf00      	nop
 8004c00:	200001c4 	.word	0x200001c4

08004c04 <__malloc_unlock>:
 8004c04:	4801      	ldr	r0, [pc, #4]	; (8004c0c <__malloc_unlock+0x8>)
 8004c06:	f7ff b98a 	b.w	8003f1e <__retarget_lock_release_recursive>
 8004c0a:	bf00      	nop
 8004c0c:	200001c4 	.word	0x200001c4

08004c10 <_realloc_r>:
 8004c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c14:	4680      	mov	r8, r0
 8004c16:	4614      	mov	r4, r2
 8004c18:	460e      	mov	r6, r1
 8004c1a:	b921      	cbnz	r1, 8004c26 <_realloc_r+0x16>
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c22:	f7ff ba4b 	b.w	80040bc <_malloc_r>
 8004c26:	b92a      	cbnz	r2, 8004c34 <_realloc_r+0x24>
 8004c28:	f7ff f9e0 	bl	8003fec <_free_r>
 8004c2c:	4625      	mov	r5, r4
 8004c2e:	4628      	mov	r0, r5
 8004c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c34:	f000 f82e 	bl	8004c94 <_malloc_usable_size_r>
 8004c38:	4284      	cmp	r4, r0
 8004c3a:	4607      	mov	r7, r0
 8004c3c:	d802      	bhi.n	8004c44 <_realloc_r+0x34>
 8004c3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c42:	d812      	bhi.n	8004c6a <_realloc_r+0x5a>
 8004c44:	4621      	mov	r1, r4
 8004c46:	4640      	mov	r0, r8
 8004c48:	f7ff fa38 	bl	80040bc <_malloc_r>
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d0ed      	beq.n	8004c2e <_realloc_r+0x1e>
 8004c52:	42bc      	cmp	r4, r7
 8004c54:	4622      	mov	r2, r4
 8004c56:	4631      	mov	r1, r6
 8004c58:	bf28      	it	cs
 8004c5a:	463a      	movcs	r2, r7
 8004c5c:	f7ff ffa4 	bl	8004ba8 <memcpy>
 8004c60:	4631      	mov	r1, r6
 8004c62:	4640      	mov	r0, r8
 8004c64:	f7ff f9c2 	bl	8003fec <_free_r>
 8004c68:	e7e1      	b.n	8004c2e <_realloc_r+0x1e>
 8004c6a:	4635      	mov	r5, r6
 8004c6c:	e7df      	b.n	8004c2e <_realloc_r+0x1e>
	...

08004c70 <_read_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4604      	mov	r4, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	2200      	movs	r2, #0
 8004c7a:	4d05      	ldr	r5, [pc, #20]	; (8004c90 <_read_r+0x20>)
 8004c7c:	602a      	str	r2, [r5, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f7fc fef3 	bl	8001a6a <_read>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_read_r+0x1e>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_read_r+0x1e>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	200001d0 	.word	0x200001d0

08004c94 <_malloc_usable_size_r>:
 8004c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c98:	1f18      	subs	r0, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bfbc      	itt	lt
 8004c9e:	580b      	ldrlt	r3, [r1, r0]
 8004ca0:	18c0      	addlt	r0, r0, r3
 8004ca2:	4770      	bx	lr

08004ca4 <_init>:
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	bf00      	nop
 8004ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004caa:	bc08      	pop	{r3}
 8004cac:	469e      	mov	lr, r3
 8004cae:	4770      	bx	lr

08004cb0 <_fini>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr
