
Dryer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008040  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08008150  08008150  00018150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800873c  0800873c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800873c  0800873c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800873c  0800873c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800873c  0800873c  0001873c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008740  08008740  00018740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001e0  08008924  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08008924  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e581  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b27  00000000  00000000  0002e78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000312b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  000322f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e1b  00000000  00000000  000331d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bd1  00000000  00000000  0004cfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd67  00000000  00000000  0005fbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a0  00000000  00000000  000ed974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008138 	.word	0x08008138

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008138 	.word	0x08008138

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2iz>:
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e14:	d30f      	bcc.n	8000e36 <__aeabi_f2iz+0x2a>
 8000e16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d90d      	bls.n	8000e3c <__aeabi_f2iz+0x30>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e28:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e30:	bf18      	it	ne
 8000e32:	4240      	negne	r0, r0
 8000e34:	4770      	bx	lr
 8000e36:	f04f 0000 	mov.w	r0, #0
 8000e3a:	4770      	bx	lr
 8000e3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e40:	d101      	bne.n	8000e46 <__aeabi_f2iz+0x3a>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d105      	bne.n	8000e52 <__aeabi_f2iz+0x46>
 8000e46:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e4a:	bf08      	it	eq
 8000e4c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr

08000e58 <Max6675_Read_Temp>:
// ------------------- Variables ----------------
_Bool TCF = 0;                       // Thermocouple Connection acknowledge Flag
uint8_t DATARX[2];                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max6675_Read_Temp(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	float Temp = 0;                                      // Temperature Variable
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8000e64:	2200      	movs	r2, #0
 8000e66:	2110      	movs	r1, #16
 8000e68:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <Max6675_Read_Temp+0x98>)
 8000e6a:	f002 fb6a 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, DATARX, 2, 50);                  // DATA Transfer
 8000e6e:	2332      	movs	r3, #50	; 0x32
 8000e70:	2202      	movs	r2, #2
 8000e72:	4920      	ldr	r1, [pc, #128]	; (8000ef4 <Max6675_Read_Temp+0x9c>)
 8000e74:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <Max6675_Read_Temp+0xa0>)
 8000e76:	f003 f833 	bl	8003ee0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	481c      	ldr	r0, [pc, #112]	; (8000ef0 <Max6675_Read_Temp+0x98>)
 8000e80:	f002 fb5f 	bl	8003542 <HAL_GPIO_WritePin>
//printf("Mix = %x\r\n",((DATARX[0] << 8)|DATARX[1]));
//printf("MSB = %x\r\n",DATARX[1]);

//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2) & 0x0001);        // State of Connecting
	TCF = ((((DATARX[0] << 8) | DATARX[1]) >> 2) & 0x0001);
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <Max6675_Read_Temp+0x9c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <Max6675_Read_Temp+0x9c>)
 8000e8c:	7852      	ldrb	r2, [r2, #1]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	109b      	asrs	r3, r3, #2
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <Max6675_Read_Temp+0xa4>)
 8000ea2:	701a      	strb	r2, [r3, #0]
//printf("TCF = %d\r\n",TCF);

//Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
	if (TCF == 0) {
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <Max6675_Read_Temp+0xa4>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	f083 0301 	eor.w	r3, r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d013      	beq.n	8000eda <Max6675_Read_Temp+0x82>
		Temp = (((DATARX[0] << 8) | DATARX[1]) >> 3);
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <Max6675_Read_Temp+0x9c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <Max6675_Read_Temp+0x9c>)
 8000eba:	7852      	ldrb	r2, [r2, #1]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	10db      	asrs	r3, r3, #3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff4f 	bl	8000d64 <__aeabi_i2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	607b      	str	r3, [r7, #4]
		Temp *= 0.25;                         // Data to Centigrade Conversation
 8000eca:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff f946 	bl	8000160 <__aeabi_fmul>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	e001      	b.n	8000ede <Max6675_Read_Temp+0x86>
	} else
		Temp = -1;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <Max6675_Read_Temp+0xa8>)
 8000edc:	607b      	str	r3, [r7, #4]
	HAL_Delay(250); // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 8000ede:	20fa      	movs	r0, #250	; 0xfa
 8000ee0:	f002 f862 	bl	8002fa8 <HAL_Delay>
	return Temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	20000200 	.word	0x20000200
 8000ef8:	200002b0 	.word	0x200002b0
 8000efc:	200001fc 	.word	0x200001fc
 8000f00:	bf800000 	.word	0xbf800000

08000f04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 0320 	and.w	r3, r3, #32
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6193      	str	r3, [r2, #24]
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000

08000f48 <input_init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void input_init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <input_init+0xcc>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a30      	ldr	r2, [pc, #192]	; (8001014 <input_init+0xcc>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <input_init+0xcc>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <input_init+0xcc>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a2a      	ldr	r2, [pc, #168]	; (8001014 <input_init+0xcc>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <input_init+0xcc>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <input_init+0xcc>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a24      	ldr	r2, [pc, #144]	; (8001014 <input_init+0xcc>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <input_init+0xcc>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = { 0 };
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = DOOR_SW;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <input_init+0xd0>)
 8000faa:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <input_init+0xd4>)
 8000fbc:	f002 f926 	bl	800320c <HAL_GPIO_Init>

	GPIOx.Pin = LIMIT_SW | HEATER_SW | SEL_ROT_SW;
 8000fc0:	230e      	movs	r3, #14
 8000fc2:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4811      	ldr	r0, [pc, #68]	; (800101c <input_init+0xd4>)
 8000fd8:	f002 f918 	bl	800320c <HAL_GPIO_Init>

	GPIOx.Pin = LED;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe0:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOC, &GPIOx);
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <input_init+0xd8>)
 8000ff6:	f002 f909 	bl	800320c <HAL_GPIO_Init>

	//HAL_GPIO_WritePin(GPIOC, LED, LOW);

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2006      	movs	r0, #6
 8001000:	f002 f8cd 	bl	800319e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001004:	2006      	movs	r0, #6
 8001006:	f002 f8e6 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	10310000 	.word	0x10310000
 800101c:	40010800 	.word	0x40010800
 8001020:	40011000 	.word	0x40011000

08001024 <is_door_open>:

uint8_t is_door_open(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 8001028:	f001 ffb4 	bl	8002f94 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <is_door_open+0x44>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b05      	cmp	r3, #5
 8001036:	d912      	bls.n	800105e <is_door_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == GPIO_PIN_RESET) {
 8001038:	2101      	movs	r1, #1
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <is_door_open+0x48>)
 800103c:	f002 fa6a 	bl	8003514 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d103      	bne.n	800104e <is_door_open+0x2a>
			last_state = 0;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <is_door_open+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e002      	b.n	8001054 <is_door_open+0x30>
		} else {
			last_state = 1;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <is_door_open+0x4c>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8001054:	f001 ff9e 	bl	8002f94 <HAL_GetTick>
 8001058:	4603      	mov	r3, r0
 800105a:	4a03      	ldr	r2, [pc, #12]	; (8001068 <is_door_open+0x44>)
 800105c:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <is_door_open+0x4c>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000204 	.word	0x20000204
 800106c:	40010800 	.word	0x40010800
 8001070:	20000208 	.word	0x20000208

08001074 <is_coil_open>:

uint8_t is_coil_open(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 8001078:	f001 ff8c 	bl	8002f94 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <is_coil_open+0x44>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b05      	cmp	r3, #5
 8001086:	d912      	bls.n	80010ae <is_coil_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, HEATER_SW) == GPIO_PIN_RESET) {
 8001088:	2108      	movs	r1, #8
 800108a:	480c      	ldr	r0, [pc, #48]	; (80010bc <is_coil_open+0x48>)
 800108c:	f002 fa42 	bl	8003514 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <is_coil_open+0x2a>
			last_state = 0;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <is_coil_open+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e002      	b.n	80010a4 <is_coil_open+0x30>
		} else {
			last_state = 1;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <is_coil_open+0x4c>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80010a4:	f001 ff76 	bl	8002f94 <HAL_GetTick>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <is_coil_open+0x44>)
 80010ac:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <is_coil_open+0x4c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000020c 	.word	0x2000020c
 80010bc:	40010800 	.word	0x40010800
 80010c0:	20000210 	.word	0x20000210

080010c4 <limit_sw_open>:

uint8_t limit_sw_open(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 80010c8:	f001 ff64 	bl	8002f94 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <limit_sw_open+0x44>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d912      	bls.n	80010fe <limit_sw_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, LIMIT_SW) == GPIO_PIN_RESET) {
 80010d8:	2102      	movs	r1, #2
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <limit_sw_open+0x48>)
 80010dc:	f002 fa1a 	bl	8003514 <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d103      	bne.n	80010ee <limit_sw_open+0x2a>
			last_state = 0;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <limit_sw_open+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e002      	b.n	80010f4 <limit_sw_open+0x30>
		} else {
			last_state = 1;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <limit_sw_open+0x4c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80010f4:	f001 ff4e 	bl	8002f94 <HAL_GetTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a03      	ldr	r2, [pc, #12]	; (8001108 <limit_sw_open+0x44>)
 80010fc:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <limit_sw_open+0x4c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000214 	.word	0x20000214
 800110c:	40010800 	.word	0x40010800
 8001110:	20000218 	.word	0x20000218

08001114 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(DOOR_SW);
 8001118:	2001      	movs	r0, #1
 800111a:	f002 fa2b 	bl	8003574 <HAL_GPIO_EXTI_IRQHandler>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <keypad_init>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

void keypad_init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <keypad_init+0x54>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <keypad_init+0x54>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <keypad_init+0x54>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = LOW_KEY | MED_KEY | HIGH_KEY | FN_KEY;
 8001150:	f640 4303 	movw	r3, #3075	; 0xc03
 8001154:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(KEYPAD_PORT, &GPIOx);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4619      	mov	r1, r3
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <keypad_init+0x58>)
 800116a:	f002 f84f 	bl	800320c <HAL_GPIO_Init>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	40010c00 	.word	0x40010c00

08001180 <scan_keypad>:

uint8_t scan_keypad(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 8001184:	f000 f832 	bl	80011ec <is_low_key_pressed>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 800118e:	4813      	ldr	r0, [pc, #76]	; (80011dc <scan_keypad+0x5c>)
 8001190:	f004 fd52 	bl	8005c38 <puts>
		return LOW_KEY_PRESSED;
 8001194:	2301      	movs	r3, #1
 8001196:	e01e      	b.n	80011d6 <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 8001198:	f000 f860 	bl	800125c <is_med_key_pressed>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <scan_keypad+0x60>)
 80011a4:	f004 fd48 	bl	8005c38 <puts>
		return MED_KEY_PRESSED;
 80011a8:	2302      	movs	r3, #2
 80011aa:	e014      	b.n	80011d6 <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 80011ac:	f000 f890 	bl	80012d0 <is_high_key_pressed>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <scan_keypad+0x64>)
 80011b8:	f004 fd3e 	bl	8005c38 <puts>
		return HIGH_KEY_PRESSED;
 80011bc:	2303      	movs	r3, #3
 80011be:	e00a      	b.n	80011d6 <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 80011c0:	f000 f8c0 	bl	8001344 <is_fn_key_pressed>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <scan_keypad+0x68>)
 80011cc:	f004 fd34 	bl	8005c38 <puts>
		return FN_KEY_PRESSED;
 80011d0:	2304      	movs	r3, #4
 80011d2:	e000      	b.n	80011d6 <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	08008150 	.word	0x08008150
 80011e0:	08008164 	.word	0x08008164
 80011e4:	08008178 	.word	0x08008178
 80011e8:	0800818c 	.word	0x0800818c

080011ec <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 80011f0:	f001 fed0 	bl	8002f94 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <is_low_key_pressed+0x64>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d923      	bls.n	8001248 <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 8001200:	2102      	movs	r1, #2
 8001202:	4814      	ldr	r0, [pc, #80]	; (8001254 <is_low_key_pressed+0x68>)
 8001204:	f002 f986 	bl	8003514 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d114      	bne.n	8001238 <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <is_low_key_pressed+0x6c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d112      	bne.n	800123e <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 8001218:	2102      	movs	r1, #2
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <is_low_key_pressed+0x68>)
 800121c:	f002 f97a 	bl	8003514 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d104      	bne.n	8001230 <is_low_key_pressed+0x44>
				{
					last_state = 0;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <is_low_key_pressed+0x6c>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
					return 1;
 800122c:	2301      	movs	r3, #1
 800122e:	e00c      	b.n	800124a <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <is_low_key_pressed+0x6c>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e002      	b.n	800123e <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <is_low_key_pressed+0x6c>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800123e:	f001 fea9 	bl	8002f94 <HAL_GetTick>
 8001242:	4603      	mov	r3, r0
 8001244:	4a02      	ldr	r2, [pc, #8]	; (8001250 <is_low_key_pressed+0x64>)
 8001246:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000021c 	.word	0x2000021c
 8001254:	40010c00 	.word	0x40010c00
 8001258:	20000220 	.word	0x20000220

0800125c <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 8001260:	f001 fe98 	bl	8002f94 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <is_med_key_pressed+0x68>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b05      	cmp	r3, #5
 800126e:	d925      	bls.n	80012bc <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 8001270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001274:	4814      	ldr	r0, [pc, #80]	; (80012c8 <is_med_key_pressed+0x6c>)
 8001276:	f002 f94d 	bl	8003514 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d115      	bne.n	80012ac <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <is_med_key_pressed+0x70>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d113      	bne.n	80012b2 <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 800128a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <is_med_key_pressed+0x6c>)
 8001290:	f002 f940 	bl	8003514 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d104      	bne.n	80012a4 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <is_med_key_pressed+0x70>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
					return 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e00c      	b.n	80012be <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <is_med_key_pressed+0x70>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e002      	b.n	80012b2 <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <is_med_key_pressed+0x70>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80012b2:	f001 fe6f 	bl	8002f94 <HAL_GetTick>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a02      	ldr	r2, [pc, #8]	; (80012c4 <is_med_key_pressed+0x68>)
 80012ba:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000224 	.word	0x20000224
 80012c8:	40010c00 	.word	0x40010c00
 80012cc:	20000228 	.word	0x20000228

080012d0 <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 80012d4:	f001 fe5e 	bl	8002f94 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <is_high_key_pressed+0x68>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b05      	cmp	r3, #5
 80012e2:	d925      	bls.n	8001330 <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 80012e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e8:	4814      	ldr	r0, [pc, #80]	; (800133c <is_high_key_pressed+0x6c>)
 80012ea:	f002 f913 	bl	8003514 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d115      	bne.n	8001320 <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <is_high_key_pressed+0x70>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d113      	bne.n	8001326 <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 80012fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001302:	480e      	ldr	r0, [pc, #56]	; (800133c <is_high_key_pressed+0x6c>)
 8001304:	f002 f906 	bl	8003514 <HAL_GPIO_ReadPin>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d104      	bne.n	8001318 <is_high_key_pressed+0x48>
				{
					last_state = 0;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <is_high_key_pressed+0x70>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
					return 1;
 8001314:	2301      	movs	r3, #1
 8001316:	e00c      	b.n	8001332 <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <is_high_key_pressed+0x70>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	e002      	b.n	8001326 <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <is_high_key_pressed+0x70>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8001326:	f001 fe35 	bl	8002f94 <HAL_GetTick>
 800132a:	4603      	mov	r3, r0
 800132c:	4a02      	ldr	r2, [pc, #8]	; (8001338 <is_high_key_pressed+0x68>)
 800132e:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000022c 	.word	0x2000022c
 800133c:	40010c00 	.word	0x40010c00
 8001340:	20000230 	.word	0x20000230

08001344 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 8001348:	f001 fe24 	bl	8002f94 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <is_fn_key_pressed+0x64>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b05      	cmp	r3, #5
 8001356:	d923      	bls.n	80013a0 <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8001358:	2101      	movs	r1, #1
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <is_fn_key_pressed+0x68>)
 800135c:	f002 f8da 	bl	8003514 <HAL_GPIO_ReadPin>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d114      	bne.n	8001390 <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <is_fn_key_pressed+0x6c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d112      	bne.n	8001396 <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8001370:	2101      	movs	r1, #1
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <is_fn_key_pressed+0x68>)
 8001374:	f002 f8ce 	bl	8003514 <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d104      	bne.n	8001388 <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <is_fn_key_pressed+0x6c>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
					return 1;
 8001384:	2301      	movs	r3, #1
 8001386:	e00c      	b.n	80013a2 <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <is_fn_key_pressed+0x6c>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e002      	b.n	8001396 <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <is_fn_key_pressed+0x6c>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8001396:	f001 fdfd 	bl	8002f94 <HAL_GetTick>
 800139a:	4603      	mov	r3, r0
 800139c:	4a02      	ldr	r2, [pc, #8]	; (80013a8 <is_fn_key_pressed+0x64>)
 800139e:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000234 	.word	0x20000234
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	20000238 	.word	0x20000238

080013b4 <lcd_gpio_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_gpio_init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
	__HAL_RCC_AFIO_CLK_ENABLE();
 80013ba:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <lcd_gpio_init+0x124>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a46      	ldr	r2, [pc, #280]	; (80014d8 <lcd_gpio_init+0x124>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <lcd_gpio_init+0x124>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_AFIO_REMAP_SWJ_NONJTRST();
 80013d2:	4b42      	ldr	r3, [pc, #264]	; (80014dc <lcd_gpio_init+0x128>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
 80013e8:	4a3c      	ldr	r2, [pc, #240]	; (80014dc <lcd_gpio_init+0x128>)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	6053      	str	r3, [r2, #4]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <lcd_gpio_init+0x128>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013fa:	623b      	str	r3, [r7, #32]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	4a35      	ldr	r2, [pc, #212]	; (80014dc <lcd_gpio_init+0x128>)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	6053      	str	r3, [r2, #4]

	//__HAL_AFIO_REMAP_SWJ_DISABLE();

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <lcd_gpio_init+0x124>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a32      	ldr	r2, [pc, #200]	; (80014d8 <lcd_gpio_init+0x124>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <lcd_gpio_init+0x124>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <lcd_gpio_init+0x124>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a2c      	ldr	r2, [pc, #176]	; (80014d8 <lcd_gpio_init+0x124>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <lcd_gpio_init+0x124>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144e:	4824      	ldr	r0, [pc, #144]	; (80014e0 <lcd_gpio_init+0x12c>)
 8001450:	f002 f877 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145a:	4821      	ldr	r0, [pc, #132]	; (80014e0 <lcd_gpio_init+0x12c>)
 800145c:	f002 f871 	bl	8003542 <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_RS | LCD_PIN_EN;
 8001460:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001464:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_CTRL, &GPIOx);
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	4819      	ldr	r0, [pc, #100]	; (80014e0 <lcd_gpio_init+0x12c>)
 800147a:	f001 fec7 	bl	800320c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	21f8      	movs	r1, #248	; 0xf8
 8001482:	4817      	ldr	r0, [pc, #92]	; (80014e0 <lcd_gpio_init+0x12c>)
 8001484:	f002 f85d 	bl	8003542 <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4;
 8001488:	23f8      	movs	r3, #248	; 0xf8
 800148a:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2302      	movs	r3, #2
 8001496:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D0_4, &GPIOx);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	4810      	ldr	r0, [pc, #64]	; (80014e0 <lcd_gpio_init+0x12c>)
 80014a0:	f001 feb4 	bl	800320c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <lcd_gpio_init+0x130>)
 80014ac:	f002 f849 	bl	8003542 <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7;
 80014b0:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80014b4:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D5_7, &GPIOx);
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4619      	mov	r1, r3
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <lcd_gpio_init+0x130>)
 80014ca:	f001 fe9f 	bl	800320c <HAL_GPIO_Init>

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010c00 	.word	0x40010c00
 80014e4:	40010800 	.word	0x40010800

080014e8 <lcd_init>:

void lcd_init(uint8_t fourbitmode)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <lcd_init+0x28>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 80014fe:	e002      	b.n	8001506 <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <lcd_init+0x28>)
 8001502:	2210      	movs	r2, #16
 8001504:	701a      	strb	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000239 	.word	0x20000239

08001514 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	460b      	mov	r3, r1
 8001520:	71bb      	strb	r3, [r7, #6]
 8001522:	4613      	mov	r3, r2
 8001524:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d906      	bls.n	800153a <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <lcd_begin+0xdc>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <lcd_begin+0xdc>)
 8001538:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 800153a:	4a2e      	ldr	r2, [pc, #184]	; (80015f4 <lcd_begin+0xe0>)
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <lcd_begin+0xe4>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 8001546:	797b      	ldrb	r3, [r7, #5]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d009      	beq.n	8001560 <lcd_begin+0x4c>
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d106      	bne.n	8001560 <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <lcd_begin+0xdc>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <lcd_begin+0xdc>)
 800155e:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 8001560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001564:	f001 fd20 	bl	8002fa8 <HAL_Delay>
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS | LCD_PIN_EN, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800156e:	4823      	ldr	r0, [pc, #140]	; (80015fc <lcd_begin+0xe8>)
 8001570:	f001 ffe7 	bl	8003542 <HAL_GPIO_WritePin>
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <lcd_begin+0xdc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f043 0320 	orr.w	r3, r3, #32
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f902 	bl	8001788 <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 8001584:	200a      	movs	r0, #10
 8001586:	f001 fd0f 	bl	8002fa8 <HAL_Delay>

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <lcd_begin+0xdc>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	f043 0320 	orr.w	r3, r3, #32
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f8f7 	bl	8001788 <lcd_send_cmd>
	    HAL_Delay(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f001 fd04 	bl	8002fa8 <HAL_Delay>

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <lcd_begin+0xdc>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	f043 0320 	orr.w	r3, r3, #32
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f8ec 	bl	8001788 <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <lcd_begin+0xdc>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f043 0320 	orr.w	r3, r3, #32
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f8e4 	bl	8001788 <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <lcd_begin+0xec>)
 80015c2:	2204      	movs	r2, #4
 80015c4:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 f828 	bl	800161c <lcd_display>

	// clear it off
	lcd_clear();
 80015cc:	f000 f8f2 	bl	80017b4 <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <lcd_begin+0xf0>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <lcd_begin+0xf0>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f8d1 	bl	8001788 <lcd_send_cmd>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000239 	.word	0x20000239
 80015f4:	2000023c 	.word	0x2000023c
 80015f8:	2000023d 	.word	0x2000023d
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	2000023a 	.word	0x2000023a
 8001604:	2000023b 	.word	0x2000023b

08001608 <lcd_home>:

void lcd_home(void){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
 800160c:	2002      	movs	r0, #2
 800160e:	f000 f8bb 	bl	8001788 <lcd_send_cmd>
	HAL_Delay(2); // this command takes a long time!
 8001612:	2002      	movs	r0, #2
 8001614:	f001 fcc8 	bl	8002fa8 <HAL_Delay>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <lcd_display>:

void lcd_display(uint8_t state)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	if(state)
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00f      	beq.n	800164c <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <lcd_display+0x58>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <lcd_display+0x58>)
 8001638:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <lcd_display+0x58>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f89f 	bl	8001788 <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 800164a:	e00e      	b.n	800166a <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <lcd_display+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <lcd_display+0x58>)
 8001658:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <lcd_display+0x58>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f88f 	bl	8001788 <lcd_send_cmd>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000023a 	.word	0x2000023a

08001678 <lcd_enable>:

void lcd_enable(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <lcd_enable+0x40>)
 8001684:	f001 ff5d 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001688:	2001      	movs	r0, #1
 800168a:	f001 fc8d 	bl	8002fa8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <lcd_enable+0x40>)
 8001696:	f001 ff54 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_Delay(1); // enable pulse must be >450ns
 800169a:	2001      	movs	r0, #1
 800169c:	f001 fc84 	bl	8002fa8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	4804      	ldr	r0, [pc, #16]	; (80016b8 <lcd_enable+0x40>)
 80016a8:	f001 ff4b 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_Delay(1); // commands need > 37us to settle
 80016ac:	2001      	movs	r0, #1
 80016ae:	f001 fc7b 	bl	8002fa8 <HAL_Delay>
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40010c00 	.word	0x40010c00

080016bc <write_8bit>:

void write_8bit(uint8_t value)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D7, (value >> 7) & 0x01);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	09db      	lsrs	r3, r3, #7
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d2:	482b      	ldr	r0, [pc, #172]	; (8001780 <write_8bit+0xc4>)
 80016d4:	f001 ff35 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D6, (value >> 6) & 0x01);
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ea:	4825      	ldr	r0, [pc, #148]	; (8001780 <write_8bit+0xc4>)
 80016ec:	f001 ff29 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5, (value >> 5) & 0x01);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001702:	481f      	ldr	r0, [pc, #124]	; (8001780 <write_8bit+0xc4>)
 8001704:	f001 ff1d 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D4, (value >> 4) & 0x01);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	2108      	movs	r1, #8
 8001718:	481a      	ldr	r0, [pc, #104]	; (8001784 <write_8bit+0xc8>)
 800171a:	f001 ff12 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D3, (value >> 3) & 0x01);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	2110      	movs	r1, #16
 800172e:	4815      	ldr	r0, [pc, #84]	; (8001784 <write_8bit+0xc8>)
 8001730:	f001 ff07 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D2, (value >> 2) & 0x01);
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	2120      	movs	r1, #32
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <write_8bit+0xc8>)
 8001746:	f001 fefc 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D1, (value >> 1) & 0x01);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	480a      	ldr	r0, [pc, #40]	; (8001784 <write_8bit+0xc8>)
 800175c:	f001 fef1 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0, (value >> 0) & 0x01);
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <write_8bit+0xc8>)
 800176e:	f001 fee8 	bl	8003542 <HAL_GPIO_WritePin>

	lcd_enable();
 8001772:	f7ff ff81 	bl	8001678 <lcd_enable>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40010800 	.word	0x40010800
 8001784:	40010c00 	.word	0x40010c00

08001788 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <lcd_send_cmd+0x28>)
 800179a:	f001 fed2 	bl	8003542 <HAL_GPIO_WritePin>
	write_8bit(cmd);
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff8b 	bl	80016bc <write_8bit>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40010c00 	.word	0x40010c00

080017b4 <lcd_clear>:

void lcd_clear(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff ffe5 	bl	8001788 <lcd_send_cmd>
	HAL_Delay(2);
 80017be:	2002      	movs	r0, #2
 80017c0:	f001 fbf2 	bl	8002fa8 <HAL_Delay>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <lcd_send_data+0x28>)
 80017da:	f001 feb2 	bl	8003542 <HAL_GPIO_WritePin>
	write_8bit(data);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff6b 	bl	80016bc <write_8bit>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40010c00 	.word	0x40010c00

080017f4 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ffe1 	bl	80017c8 <lcd_send_data>
		str++;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3301      	adds	r3, #1
 800180a:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f3      	bne.n	80017fc <lcd_print+0x8>
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	460a      	mov	r2, r1
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	4613      	mov	r3, r2
 800182e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <lcd_set_cursor+0x58>)
 8001832:	f107 0408 	add.w	r4, r7, #8
 8001836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _numlines) {
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <lcd_set_cursor+0x5c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	79ba      	ldrb	r2, [r7, #6]
 8001842:	429a      	cmp	r2, r3
 8001844:	d903      	bls.n	800184e <lcd_set_cursor+0x2e>
		row = _numlines - 1; // we count rows starting w/0
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <lcd_set_cursor+0x5c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	3b01      	subs	r3, #1
 800184c:	71bb      	strb	r3, [r7, #6]
		}
	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
 800184e:	79bb      	ldrb	r3, [r7, #6]
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	3318      	adds	r3, #24
 8001854:	443b      	add	r3, r7
 8001856:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	4413      	add	r3, r2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff8d 	bl	8001788 <lcd_send_cmd>
}
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	bf00      	nop
 8001878:	0800819c 	.word	0x0800819c
 800187c:	2000023c 	.word	0x2000023c

08001880 <lcd_update>:
void mode_level_page(void);
void limit_sw_err_page(void);
void complete_page(void);

void lcd_update(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	switch(cur_page){
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <lcd_update+0x5c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b07      	cmp	r3, #7
 800188a:	d825      	bhi.n	80018d8 <lcd_update+0x58>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <lcd_update+0x14>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018b5 	.word	0x080018b5
 8001898:	080018bb 	.word	0x080018bb
 800189c:	080018bb 	.word	0x080018bb
 80018a0:	080018bb 	.word	0x080018bb
 80018a4:	080018c1 	.word	0x080018c1
 80018a8:	080018c7 	.word	0x080018c7
 80018ac:	080018cd 	.word	0x080018cd
 80018b0:	080018d3 	.word	0x080018d3
	case INIT_PAGE:
		welcome_page();
 80018b4:	f000 f814 	bl	80018e0 <welcome_page>
		break;
 80018b8:	e00e      	b.n	80018d8 <lcd_update+0x58>
	case LOW_LEVEL_PAGE:
	case MED_LEVEL_PAGE:
	case HIGH_LEVEL_PAGE:
		mode_level_page();
 80018ba:	f000 f8eb 	bl	8001a94 <mode_level_page>
		break;
 80018be:	e00b      	b.n	80018d8 <lcd_update+0x58>
	case COMPLETE_PAGE:
		complete_page();
 80018c0:	f000 f8be 	bl	8001a40 <complete_page>
		break;
 80018c4:	e008      	b.n	80018d8 <lcd_update+0x58>
	case DOOR_OPEN_PAGE:
		door_open_page();
 80018c6:	f000 f83d 	bl	8001944 <door_open_page>
		break;
 80018ca:	e005      	b.n	80018d8 <lcd_update+0x58>
	case LIMIT_SW_ERR_PAGE:
		limit_sw_err_page();
 80018cc:	f000 f88e 	bl	80019ec <limit_sw_err_page>
		break;
 80018d0:	e002      	b.n	80018d8 <lcd_update+0x58>
	case HEATER_COIL_PAGE:
		heater_coil_page();
 80018d2:	f000 f861 	bl	8001998 <heater_coil_page>
		break;
 80018d6:	bf00      	nop
	}

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200002a9 	.word	0x200002a9

080018e0 <welcome_page>:

void welcome_page(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <welcome_page+0x50>)
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <welcome_page+0x54>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d006      	beq.n	80018fe <welcome_page+0x1e>
	{
		lcd_clear();
 80018f0:	f7ff ff60 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <welcome_page+0x54>)
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <welcome_page+0x50>)
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e001      	b.n	8001902 <welcome_page+0x22>
	}
	else{
		lcd_home();
 80018fe:	f7ff fe83 	bl	8001608 <lcd_home>
	}
	
	lcd_set_cursor(6, 0);
 8001902:	2100      	movs	r1, #0
 8001904:	2006      	movs	r0, #6
 8001906:	f7ff ff8b 	bl	8001820 <lcd_set_cursor>
	lcd_print("WELCOME!");
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <welcome_page+0x58>)
 800190c:	f7ff ff72 	bl	80017f4 <lcd_print>
	lcd_set_cursor(3,2);
 8001910:	2102      	movs	r1, #2
 8001912:	2003      	movs	r0, #3
 8001914:	f7ff ff84 	bl	8001820 <lcd_set_cursor>
	lcd_print("Select a mode");
 8001918:	4808      	ldr	r0, [pc, #32]	; (800193c <welcome_page+0x5c>)
 800191a:	f7ff ff6b 	bl	80017f4 <lcd_print>
	lcd_set_cursor(3,3);
 800191e:	2103      	movs	r1, #3
 8001920:	2003      	movs	r0, #3
 8001922:	f7ff ff7d 	bl	8001820 <lcd_set_cursor>
	lcd_print("to start dryer");
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <welcome_page+0x60>)
 8001928:	f7ff ff64 	bl	80017f4 <lcd_print>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200002aa 	.word	0x200002aa
 8001934:	200002a9 	.word	0x200002a9
 8001938:	080081ac 	.word	0x080081ac
 800193c:	080081b8 	.word	0x080081b8
 8001940:	080081c8 	.word	0x080081c8

08001944 <door_open_page>:

void door_open_page(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <door_open_page+0x44>)
 800194a:	781a      	ldrb	r2, [r3, #0]
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <door_open_page+0x48>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d006      	beq.n	8001962 <door_open_page+0x1e>
	{
		lcd_clear();
 8001954:	f7ff ff2e 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <door_open_page+0x48>)
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <door_open_page+0x44>)
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	e001      	b.n	8001966 <door_open_page+0x22>
	}
	else{
		lcd_home();
 8001962:	f7ff fe51 	bl	8001608 <lcd_home>
	}

	lcd_set_cursor(6, 1);
 8001966:	2101      	movs	r1, #1
 8001968:	2006      	movs	r0, #6
 800196a:	f7ff ff59 	bl	8001820 <lcd_set_cursor>
	lcd_print("DOOR");
 800196e:	4808      	ldr	r0, [pc, #32]	; (8001990 <door_open_page+0x4c>)
 8001970:	f7ff ff40 	bl	80017f4 <lcd_print>
	lcd_set_cursor(6,2);
 8001974:	2102      	movs	r1, #2
 8001976:	2006      	movs	r0, #6
 8001978:	f7ff ff52 	bl	8001820 <lcd_set_cursor>
	lcd_print("OPEN");
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <door_open_page+0x50>)
 800197e:	f7ff ff39 	bl	80017f4 <lcd_print>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200002aa 	.word	0x200002aa
 800198c:	200002a9 	.word	0x200002a9
 8001990:	080081d8 	.word	0x080081d8
 8001994:	080081e0 	.word	0x080081e0

08001998 <heater_coil_page>:

void heater_coil_page(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <heater_coil_page+0x44>)
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <heater_coil_page+0x48>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d006      	beq.n	80019b6 <heater_coil_page+0x1e>
	{
		lcd_clear();
 80019a8:	f7ff ff04 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <heater_coil_page+0x48>)
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <heater_coil_page+0x44>)
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	e001      	b.n	80019ba <heater_coil_page+0x22>
	}
	else{
		lcd_home();
 80019b6:	f7ff fe27 	bl	8001608 <lcd_home>
	}

	lcd_set_cursor(5, 1);
 80019ba:	2101      	movs	r1, #1
 80019bc:	2005      	movs	r0, #5
 80019be:	f7ff ff2f 	bl	8001820 <lcd_set_cursor>
	lcd_print("HEATER");
 80019c2:	4808      	ldr	r0, [pc, #32]	; (80019e4 <heater_coil_page+0x4c>)
 80019c4:	f7ff ff16 	bl	80017f4 <lcd_print>
	lcd_set_cursor(5,2);
 80019c8:	2102      	movs	r1, #2
 80019ca:	2005      	movs	r0, #5
 80019cc:	f7ff ff28 	bl	8001820 <lcd_set_cursor>
	lcd_print("ERROR");
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <heater_coil_page+0x50>)
 80019d2:	f7ff ff0f 	bl	80017f4 <lcd_print>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200002aa 	.word	0x200002aa
 80019e0:	200002a9 	.word	0x200002a9
 80019e4:	080081e8 	.word	0x080081e8
 80019e8:	080081f0 	.word	0x080081f0

080019ec <limit_sw_err_page>:

void limit_sw_err_page(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <limit_sw_err_page+0x44>)
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <limit_sw_err_page+0x48>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d006      	beq.n	8001a0a <limit_sw_err_page+0x1e>
	{
		lcd_clear();
 80019fc:	f7ff feda 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <limit_sw_err_page+0x48>)
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <limit_sw_err_page+0x44>)
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e001      	b.n	8001a0e <limit_sw_err_page+0x22>
	}
	else{
		lcd_home();
 8001a0a:	f7ff fdfd 	bl	8001608 <lcd_home>
	}

	lcd_set_cursor(5, 0);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2005      	movs	r0, #5
 8001a12:	f7ff ff05 	bl	8001820 <lcd_set_cursor>
	lcd_print("Limit");
 8001a16:	4808      	ldr	r0, [pc, #32]	; (8001a38 <limit_sw_err_page+0x4c>)
 8001a18:	f7ff feec 	bl	80017f4 <lcd_print>
	lcd_set_cursor(2, 2);
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f7ff fefe 	bl	8001820 <lcd_set_cursor>
	lcd_print("Err");
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <limit_sw_err_page+0x50>)
 8001a26:	f7ff fee5 	bl	80017f4 <lcd_print>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200002aa 	.word	0x200002aa
 8001a34:	200002a9 	.word	0x200002a9
 8001a38:	080081f8 	.word	0x080081f8
 8001a3c:	08008200 	.word	0x08008200

08001a40 <complete_page>:

void complete_page(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <complete_page+0x44>)
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <complete_page+0x48>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d006      	beq.n	8001a5e <complete_page+0x1e>
	{
		lcd_clear();
 8001a50:	f7ff feb0 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <complete_page+0x48>)
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <complete_page+0x44>)
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e001      	b.n	8001a62 <complete_page+0x22>
	}
	else{
		lcd_home();
 8001a5e:	f7ff fdd3 	bl	8001608 <lcd_home>
	}

	lcd_set_cursor(4, 0);
 8001a62:	2100      	movs	r1, #0
 8001a64:	2004      	movs	r0, #4
 8001a66:	f7ff fedb 	bl	8001820 <lcd_set_cursor>
	lcd_print("PROCESS");
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <complete_page+0x4c>)
 8001a6c:	f7ff fec2 	bl	80017f4 <lcd_print>
	lcd_set_cursor(0, 2);
 8001a70:	2102      	movs	r1, #2
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fed4 	bl	8001820 <lcd_set_cursor>
	lcd_print("COMPLETE");
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <complete_page+0x50>)
 8001a7a:	f7ff febb 	bl	80017f4 <lcd_print>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200002aa 	.word	0x200002aa
 8001a88:	200002a9 	.word	0x200002a9
 8001a8c:	08008204 	.word	0x08008204
 8001a90:	0800820c 	.word	0x0800820c

08001a94 <mode_level_page>:

void mode_level_page(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
	static uint16_t a = 0,b = 0;
	if(last_page!=cur_page)
 8001a9a:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <mode_level_page+0x160>)
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <mode_level_page+0x164>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d006      	beq.n	8001ab4 <mode_level_page+0x20>
	{
		lcd_clear();
 8001aa6:	f7ff fe85 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 8001aaa:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <mode_level_page+0x164>)
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	4b51      	ldr	r3, [pc, #324]	; (8001bf4 <mode_level_page+0x160>)
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e001      	b.n	8001ab8 <mode_level_page+0x24>
	}
	else lcd_home();
 8001ab4:	f7ff fda8 	bl	8001608 <lcd_home>

	a = dryer.heatTime % 60;
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <mode_level_page+0x168>)
 8001aba:	885a      	ldrh	r2, [r3, #2]
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <mode_level_page+0x16c>)
 8001abe:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac2:	0959      	lsrs	r1, r3, #5
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	1a5b      	subs	r3, r3, r1
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <mode_level_page+0x170>)
 8001ad2:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 8001ad4:	4b49      	ldr	r3, [pc, #292]	; (8001bfc <mode_level_page+0x168>)
 8001ad6:	885b      	ldrh	r3, [r3, #2]
 8001ad8:	4a49      	ldr	r2, [pc, #292]	; (8001c00 <mode_level_page+0x16c>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <mode_level_page+0x174>)
 8001ae4:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"h=%02d:%02d",b,a);
 8001ae6:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <mode_level_page+0x174>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b45      	ldr	r3, [pc, #276]	; (8001c04 <mode_level_page+0x170>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	4946      	ldr	r1, [pc, #280]	; (8001c0c <mode_level_page+0x178>)
 8001af2:	4847      	ldr	r0, [pc, #284]	; (8001c10 <mode_level_page+0x17c>)
 8001af4:	f004 f8a8 	bl	8005c48 <siprintf>
	lcd_set_cursor(0, 0);
 8001af8:	2100      	movs	r1, #0
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fe90 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001b00:	4843      	ldr	r0, [pc, #268]	; (8001c10 <mode_level_page+0x17c>)
 8001b02:	f7ff fe77 	bl	80017f4 <lcd_print>

	a = dryer.coolTime % 60;
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <mode_level_page+0x168>)
 8001b08:	889a      	ldrh	r2, [r3, #4]
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <mode_level_page+0x16c>)
 8001b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b10:	0959      	lsrs	r1, r3, #5
 8001b12:	460b      	mov	r3, r1
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a5b      	subs	r3, r3, r1
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <mode_level_page+0x170>)
 8001b20:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <mode_level_page+0x168>)
 8001b24:	889b      	ldrh	r3, [r3, #4]
 8001b26:	4a36      	ldr	r2, [pc, #216]	; (8001c00 <mode_level_page+0x16c>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <mode_level_page+0x174>)
 8001b32:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"c=%02d:%02d",b,a);
 8001b34:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <mode_level_page+0x174>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <mode_level_page+0x170>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	4935      	ldr	r1, [pc, #212]	; (8001c14 <mode_level_page+0x180>)
 8001b40:	4833      	ldr	r0, [pc, #204]	; (8001c10 <mode_level_page+0x17c>)
 8001b42:	f004 f881 	bl	8005c48 <siprintf>
	lcd_set_cursor(9, 0);
 8001b46:	2100      	movs	r1, #0
 8001b48:	2009      	movs	r0, #9
 8001b4a:	f7ff fe69 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001b4e:	4830      	ldr	r0, [pc, #192]	; (8001c10 <mode_level_page+0x17c>)
 8001b50:	f7ff fe50 	bl	80017f4 <lcd_print>

	if(dryer.mode == LOW_LEVEL)sprintf(lcd_buf,"LEVEL: LOW");
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <mode_level_page+0x168>)
 8001b56:	785b      	ldrb	r3, [r3, #1]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d104      	bne.n	8001b66 <mode_level_page+0xd2>
 8001b5c:	492e      	ldr	r1, [pc, #184]	; (8001c18 <mode_level_page+0x184>)
 8001b5e:	482c      	ldr	r0, [pc, #176]	; (8001c10 <mode_level_page+0x17c>)
 8001b60:	f004 f872 	bl	8005c48 <siprintf>
 8001b64:	e010      	b.n	8001b88 <mode_level_page+0xf4>
	else if(dryer.mode == MED_LEVEL)sprintf(lcd_buf,"LEVEL: MEDIUM");
 8001b66:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <mode_level_page+0x168>)
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d104      	bne.n	8001b78 <mode_level_page+0xe4>
 8001b6e:	492b      	ldr	r1, [pc, #172]	; (8001c1c <mode_level_page+0x188>)
 8001b70:	4827      	ldr	r0, [pc, #156]	; (8001c10 <mode_level_page+0x17c>)
 8001b72:	f004 f869 	bl	8005c48 <siprintf>
 8001b76:	e007      	b.n	8001b88 <mode_level_page+0xf4>
	else if(dryer.mode == HIGH_LEVEL)sprintf(lcd_buf,"LEVEL: HIGH");
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <mode_level_page+0x168>)
 8001b7a:	785b      	ldrb	r3, [r3, #1]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d103      	bne.n	8001b88 <mode_level_page+0xf4>
 8001b80:	4927      	ldr	r1, [pc, #156]	; (8001c20 <mode_level_page+0x18c>)
 8001b82:	4823      	ldr	r0, [pc, #140]	; (8001c10 <mode_level_page+0x17c>)
 8001b84:	f004 f860 	bl	8005c48 <siprintf>
	else;

	lcd_set_cursor(2, 1);
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f7ff fe48 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001b90:	481f      	ldr	r0, [pc, #124]	; (8001c10 <mode_level_page+0x17c>)
 8001b92:	f7ff fe2f 	bl	80017f4 <lcd_print>

	sprintf(lcd_buf,"Set Temp : %02dC",dryer.setTemp);
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <mode_level_page+0x168>)
 8001b98:	799b      	ldrb	r3, [r3, #6]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4921      	ldr	r1, [pc, #132]	; (8001c24 <mode_level_page+0x190>)
 8001b9e:	481c      	ldr	r0, [pc, #112]	; (8001c10 <mode_level_page+0x17c>)
 8001ba0:	f004 f852 	bl	8005c48 <siprintf>
	lcd_set_cursor(0, 2);
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fe3a 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001bac:	4818      	ldr	r0, [pc, #96]	; (8001c10 <mode_level_page+0x17c>)
 8001bae:	f7ff fe21 	bl	80017f4 <lcd_print>

	int temp = (int)Max6675_Read_Temp();
 8001bb2:	f7ff f951 	bl	8000e58 <Max6675_Read_Temp>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f927 	bl	8000e0c <__aeabi_f2iz>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	607b      	str	r3, [r7, #4]

	if(temp == -1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d104      	bne.n	8001bd4 <mode_level_page+0x140>
	{
		sprintf(lcd_buf,"Cur Temp : ERR");
 8001bca:	4917      	ldr	r1, [pc, #92]	; (8001c28 <mode_level_page+0x194>)
 8001bcc:	4810      	ldr	r0, [pc, #64]	; (8001c10 <mode_level_page+0x17c>)
 8001bce:	f004 f83b 	bl	8005c48 <siprintf>
 8001bd2:	e004      	b.n	8001bde <mode_level_page+0x14a>
	}
	else
	{
		sprintf(lcd_buf,"Cur Temp : %dC ",temp);
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4915      	ldr	r1, [pc, #84]	; (8001c2c <mode_level_page+0x198>)
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <mode_level_page+0x17c>)
 8001bda:	f004 f835 	bl	8005c48 <siprintf>
	}
	lcd_set_cursor(0, 3);
 8001bde:	2103      	movs	r1, #3
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff fe1d 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001be6:	480a      	ldr	r0, [pc, #40]	; (8001c10 <mode_level_page+0x17c>)
 8001be8:	f7ff fe04 	bl	80017f4 <lcd_print>

}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200002aa 	.word	0x200002aa
 8001bf8:	200002a9 	.word	0x200002a9
 8001bfc:	20000294 	.word	0x20000294
 8001c00:	88888889 	.word	0x88888889
 8001c04:	20000290 	.word	0x20000290
 8001c08:	20000292 	.word	0x20000292
 8001c0c:	08008218 	.word	0x08008218
 8001c10:	20000240 	.word	0x20000240
 8001c14:	08008224 	.word	0x08008224
 8001c18:	08008230 	.word	0x08008230
 8001c1c:	0800823c 	.word	0x0800823c
 8001c20:	0800824c 	.word	0x0800824c
 8001c24:	08008258 	.word	0x08008258
 8001c28:	0800826c 	.word	0x0800826c
 8001c2c:	0800827c 	.word	0x0800827c

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4906      	ldr	r1, [pc, #24]	; (8001c64 <__NVIC_EnableIRQ+0x34>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db12      	blt.n	8001ca0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	490a      	ldr	r1, [pc, #40]	; (8001cac <__NVIC_DisableIRQ+0x44>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	3320      	adds	r3, #32
 8001c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c94:	f3bf 8f4f 	dsb	sy
}
 8001c98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c9a:	f3bf 8f6f 	isb	sy
}
 8001c9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 8001cb8:	1d39      	adds	r1, r7, #4
 8001cba:	230a      	movs	r3, #10
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <__io_putchar+0x20>)
 8001cc0:	f003 f937 	bl	8004f32 <HAL_UART_Transmit>
	return ch;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000354 	.word	0x20000354

08001cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd8:	f001 f904 	bl	8002ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cdc:	f000 fce6 	bl	80026ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce0:	f7ff f910 	bl	8000f04 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001ce4:	f001 f862 	bl	8002dac <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001ce8:	f000 fe6e 	bl	80029c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	input_init();
 8001cec:	f7ff f92c 	bl	8000f48 <input_init>
	output_init();
 8001cf0:	f000 fdea 	bl	80028c8 <output_init>
	keypad_init();
 8001cf4:	f7ff fa16 	bl	8001124 <keypad_init>
	timer_init();
 8001cf8:	f000 fff6 	bl	8002ce8 <timer_init>

	lcd_gpio_init();
 8001cfc:	f7ff fb5a 	bl	80013b4 <lcd_gpio_init>
	lcd_init(0);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff fbf1 	bl	80014e8 <lcd_init>
	lcd_begin(16, 4, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2104      	movs	r1, #4
 8001d0a:	2010      	movs	r0, #16
 8001d0c:	f7ff fc02 	bl	8001514 <lcd_begin>

	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 8001d10:	48a4      	ldr	r0, [pc, #656]	; (8001fa4 <main+0x2d0>)
 8001d12:	f003 ff91 	bl	8005c38 <puts>
	dryer.state = INIT;
 8001d16:	4ba4      	ldr	r3, [pc, #656]	; (8001fa8 <main+0x2d4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8001d1c:	4ba2      	ldr	r3, [pc, #648]	; (8001fa8 <main+0x2d4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	705a      	strb	r2, [r3, #1]
	dryer.setTemp = 40U;
 8001d22:	4ba1      	ldr	r3, [pc, #644]	; (8001fa8 <main+0x2d4>)
 8001d24:	2228      	movs	r2, #40	; 0x28
 8001d26:	719a      	strb	r2, [r3, #6]

	if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == HIGH) {
 8001d28:	2101      	movs	r1, #1
 8001d2a:	48a0      	ldr	r0, [pc, #640]	; (8001fac <main+0x2d8>)
 8001d2c:	f001 fbf2 	bl	8003514 <HAL_GPIO_ReadPin>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d108      	bne.n	8001d48 <main+0x74>
		door_open_flag = 1U;
 8001d36:	4b9e      	ldr	r3, [pc, #632]	; (8001fb0 <main+0x2dc>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8001d3c:	4b9d      	ldr	r3, [pc, #628]	; (8001fb4 <main+0x2e0>)
 8001d3e:	2205      	movs	r2, #5
 8001d40:	701a      	strb	r2, [r3, #0]
		lcd_update_flag = 1U;
 8001d42:	4b9d      	ldr	r3, [pc, #628]	; (8001fb8 <main+0x2e4>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
	}

	lcd_update();
 8001d48:	f7ff fd9a 	bl	8001880 <lcd_update>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (is_door_open() && (!door_open_flag)) {
 8001d4c:	f7ff f96a 	bl	8001024 <is_door_open>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <main+0x96>
 8001d56:	4b96      	ldr	r3, [pc, #600]	; (8001fb0 <main+0x2dc>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d105      	bne.n	8001d6a <main+0x96>
			door_open_evt = 1U;
 8001d5e:	4b97      	ldr	r3, [pc, #604]	; (8001fbc <main+0x2e8>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
			door_open_flag = 1U;
 8001d64:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <main+0x2dc>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
		}

		if (door_open_evt) {
 8001d6a:	4b94      	ldr	r3, [pc, #592]	; (8001fbc <main+0x2e8>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 808f 	beq.w	8001e92 <main+0x1be>
			static volatile uint8_t temp_pin_state = 0U;

			temp_pin_state = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 8001d74:	2101      	movs	r1, #1
 8001d76:	488d      	ldr	r0, [pc, #564]	; (8001fac <main+0x2d8>)
 8001d78:	f001 fbcc 	bl	8003514 <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b8f      	ldr	r3, [pc, #572]	; (8001fc0 <main+0x2ec>)
 8001d82:	701a      	strb	r2, [r3, #0]
			//printf("Pin: %d\r\n",temp_pin_state);

			if (temp_pin_state == HIGH) {
 8001d84:	4b8e      	ldr	r3, [pc, #568]	; (8001fc0 <main+0x2ec>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d13d      	bne.n	8001e0a <main+0x136>

				door_open_flag = 1U;
 8001d8e:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <main+0x2dc>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001d94:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <main+0x2f0>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
				cur_page = DOOR_OPEN_PAGE;
 8001d9a:	4b86      	ldr	r3, [pc, #536]	; (8001fb4 <main+0x2e0>)
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001da0:	4b85      	ldr	r3, [pc, #532]	; (8001fb8 <main+0x2e4>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8001da6:	4b80      	ldr	r3, [pc, #512]	; (8001fa8 <main+0x2d4>)
 8001da8:	2203      	movs	r2, #3
 8001daa:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8001dac:	2200      	movs	r2, #0
 8001dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db2:	4885      	ldr	r0, [pc, #532]	; (8001fc8 <main+0x2f4>)
 8001db4:	f001 fbc5 	bl	8003542 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dbe:	487b      	ldr	r0, [pc, #492]	; (8001fac <main+0x2d8>)
 8001dc0:	f001 fbbf 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dca:	4880      	ldr	r0, [pc, #512]	; (8001fcc <main+0x2f8>)
 8001dcc:	f001 fbb9 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dd6:	487d      	ldr	r0, [pc, #500]	; (8001fcc <main+0x2f8>)
 8001dd8:	f001 fbb3 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001de2:	487a      	ldr	r0, [pc, #488]	; (8001fcc <main+0x2f8>)
 8001de4:	f001 fbad 	bl	8003542 <HAL_GPIO_WritePin>

				if (dryer.state == COMPLETE) {
 8001de8:	4b6f      	ldr	r3, [pc, #444]	; (8001fa8 <main+0x2d4>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d14d      	bne.n	8001e8c <main+0x1b8>
					//beep off
					timer_stop_evt = 1U;
 8001df0:	4b74      	ldr	r3, [pc, #464]	; (8001fc4 <main+0x2f0>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
					dryer.beepTime = 0U;
 8001df6:	4b6c      	ldr	r3, [pc, #432]	; (8001fa8 <main+0x2d4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	71da      	strb	r2, [r3, #7]
					dryer.state = INIT;
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <main+0x2d4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001e02:	4b69      	ldr	r3, [pc, #420]	; (8001fa8 <main+0x2d4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	705a      	strb	r2, [r3, #1]
 8001e08:	e040      	b.n	8001e8c <main+0x1b8>
				}

				//stop

			} else {
				if (!limit_timeout_flag) {
 8001e0a:	4b71      	ldr	r3, [pc, #452]	; (8001fd0 <main+0x2fc>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d133      	bne.n	8001e7a <main+0x1a6>
					switch (dryer.mode) {
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <main+0x2d4>)
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d832      	bhi.n	8001e80 <main+0x1ac>
 8001e1a:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <main+0x14c>)
 8001e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e20:	08001e31 	.word	0x08001e31
 8001e24:	08001e3f 	.word	0x08001e3f
 8001e28:	08001e53 	.word	0x08001e53
 8001e2c:	08001e67 	.word	0x08001e67
					case NO_MODE:
						cur_page = INIT_PAGE;
 8001e30:	4b60      	ldr	r3, [pc, #384]	; (8001fb4 <main+0x2e0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <main+0x2d4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
						break;
 8001e3c:	e020      	b.n	8001e80 <main+0x1ac>
					case LOW_LEVEL:
						cur_page = LOW_LEVEL_PAGE;
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <main+0x2e0>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001e44:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <main+0x2d4>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001e4a:	4b62      	ldr	r3, [pc, #392]	; (8001fd4 <main+0x300>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
						break;
 8001e50:	e016      	b.n	8001e80 <main+0x1ac>
					case MED_LEVEL:
						cur_page = MED_LEVEL_PAGE;
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <main+0x2e0>)
 8001e54:	2202      	movs	r2, #2
 8001e56:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <main+0x2d4>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001e5e:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <main+0x300>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
						break;
 8001e64:	e00c      	b.n	8001e80 <main+0x1ac>
					case HIGH_LEVEL:
						cur_page = HIGH_LEVEL_PAGE;
 8001e66:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <main+0x2e0>)
 8001e68:	2203      	movs	r2, #3
 8001e6a:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001e6c:	4b4e      	ldr	r3, [pc, #312]	; (8001fa8 <main+0x2d4>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001e72:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <main+0x300>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
						break;
 8001e78:	e002      	b.n	8001e80 <main+0x1ac>
					}
				} else
					cur_page = LIMIT_SW_ERR_PAGE;
 8001e7a:	4b4e      	ldr	r3, [pc, #312]	; (8001fb4 <main+0x2e0>)
 8001e7c:	2206      	movs	r2, #6
 8001e7e:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001e80:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <main+0x2e4>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
				door_open_flag = 0U;
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <main+0x2dc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
			}
			door_open_evt = 0U;
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <main+0x2e8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
		}

		/*************************************************************************************************************
		 *************************************************HERTER COIL CHECK*******************************************
		 *************************************************************************************************************/
		if (!door_open_flag && !limit_timeout_flag && dryer.state != COMPLETE) {
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <main+0x2dc>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d16f      	bne.n	8001f7a <main+0x2a6>
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <main+0x2fc>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d16b      	bne.n	8001f7a <main+0x2a6>
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <main+0x2d4>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d067      	beq.n	8001f7a <main+0x2a6>

			if (is_coil_open()) {
 8001eaa:	f7ff f8e3 	bl	8001074 <is_coil_open>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d02d      	beq.n	8001f10 <main+0x23c>

				coil_open_flag = 1U;
 8001eb4:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <main+0x304>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001eba:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <main+0x2f0>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
				cur_page = HEATER_COIL_PAGE;
 8001ec0:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <main+0x2e0>)
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <main+0x2e4>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8001ecc:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <main+0x2d4>)
 8001ece:	2203      	movs	r2, #3
 8001ed0:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed8:	483b      	ldr	r0, [pc, #236]	; (8001fc8 <main+0x2f4>)
 8001eda:	f001 fb32 	bl	8003542 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee4:	4831      	ldr	r0, [pc, #196]	; (8001fac <main+0x2d8>)
 8001ee6:	f001 fb2c 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef0:	4836      	ldr	r0, [pc, #216]	; (8001fcc <main+0x2f8>)
 8001ef2:	f001 fb26 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001efc:	4833      	ldr	r0, [pc, #204]	; (8001fcc <main+0x2f8>)
 8001efe:	f001 fb20 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f08:	4830      	ldr	r0, [pc, #192]	; (8001fcc <main+0x2f8>)
 8001f0a:	f001 fb1a 	bl	8003542 <HAL_GPIO_WritePin>
 8001f0e:	e034      	b.n	8001f7a <main+0x2a6>

				//stop

			} else {
				switch (dryer.mode) {
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <main+0x2d4>)
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d827      	bhi.n	8001f68 <main+0x294>
 8001f18:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <main+0x24c>)
 8001f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1e:	bf00      	nop
 8001f20:	08001f31 	.word	0x08001f31
 8001f24:	08001f3f 	.word	0x08001f3f
 8001f28:	08001f4d 	.word	0x08001f4d
 8001f2c:	08001f5b 	.word	0x08001f5b
				case NO_MODE:
					cur_page = INIT_PAGE;
 8001f30:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <main+0x2e0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <main+0x2d4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
					break;
 8001f3c:	e014      	b.n	8001f68 <main+0x294>
				case LOW_LEVEL:
					cur_page = LOW_LEVEL_PAGE;
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <main+0x2e0>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <main+0x2d4>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
					break;
 8001f4a:	e00d      	b.n	8001f68 <main+0x294>
				case MED_LEVEL:
					cur_page = MED_LEVEL_PAGE;
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <main+0x2e0>)
 8001f4e:	2202      	movs	r2, #2
 8001f50:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <main+0x2d4>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
					break;
 8001f58:	e006      	b.n	8001f68 <main+0x294>
				case HIGH_LEVEL:
					cur_page = HIGH_LEVEL_PAGE;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <main+0x2e0>)
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <main+0x2d4>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
					break;
 8001f66:	bf00      	nop
				}
				timer_start_evt = 1U;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <main+0x300>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <main+0x2e4>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
				coil_open_flag = 0U;
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <main+0x304>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
		}

		/**********************************************************************************************************
		 **************************************** LCD SCREEN UPDATE RUTINE ****************************************
		 **********************************************************************************************************/
		if (lcd_update_flag) {
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <main+0x2e4>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <main+0x2b8>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 8001f82:	f7ff fc7d 	bl	8001880 <lcd_update>
			lcd_update_flag = 0U;
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <main+0x2e4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* TIMER EVENT RUTINE ************************************************
		 ***************************************************************************************************************/
		if (timer_stop_evt) {
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <main+0x2f0>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d025      	beq.n	8001fe0 <main+0x30c>
			//printf("Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 8001f94:	4811      	ldr	r0, [pc, #68]	; (8001fdc <main+0x308>)
 8001f96:	f002 fbf9 	bl	800478c <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <main+0x2f0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	e02c      	b.n	8001ffc <main+0x328>
 8001fa2:	bf00      	nop
 8001fa4:	0800828c 	.word	0x0800828c
 8001fa8:	20000294 	.word	0x20000294
 8001fac:	40010800 	.word	0x40010800
 8001fb0:	2000029e 	.word	0x2000029e
 8001fb4:	200002a9 	.word	0x200002a9
 8001fb8:	200002ab 	.word	0x200002ab
 8001fbc:	2000029f 	.word	0x2000029f
 8001fc0:	200002ac 	.word	0x200002ac
 8001fc4:	200002a1 	.word	0x200002a1
 8001fc8:	40011000 	.word	0x40011000
 8001fcc:	40010c00 	.word	0x40010c00
 8001fd0:	200002a4 	.word	0x200002a4
 8001fd4:	200002a2 	.word	0x200002a2
 8001fd8:	200002a0 	.word	0x200002a0
 8001fdc:	2000030c 	.word	0x2000030c

		} else if ((timer_start_evt) && (dryer.state == START)) {
 8001fe0:	4b96      	ldr	r3, [pc, #600]	; (800223c <main+0x568>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <main+0x328>
 8001fe8:	4b95      	ldr	r3, [pc, #596]	; (8002240 <main+0x56c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <main+0x328>
			HAL_TIM_Base_Start_IT(&htim4);
 8001ff0:	4894      	ldr	r0, [pc, #592]	; (8002244 <main+0x570>)
 8001ff2:	f002 fb79 	bl	80046e8 <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 8001ff6:	4b91      	ldr	r3, [pc, #580]	; (800223c <main+0x568>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]

		/***************************************************************************************************************
		 ********************************************* KEYBOARD SCANNING ***********************************************
		 ********************************** INCREMENT DECREMENT OF TIMER AND MODE SET **********************************
		 ***************************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 8001ffc:	4b92      	ldr	r3, [pc, #584]	; (8002248 <main+0x574>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 81a3 	bne.w	800234c <main+0x678>
 8002006:	4b91      	ldr	r3, [pc, #580]	; (800224c <main+0x578>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 819e 	bne.w	800234c <main+0x678>
 8002010:	4b8f      	ldr	r3, [pc, #572]	; (8002250 <main+0x57c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	f040 8199 	bne.w	800234c <main+0x678>

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 800201a:	2201      	movs	r2, #1
 800201c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002020:	488c      	ldr	r0, [pc, #560]	; (8002254 <main+0x580>)
 8002022:	f001 fa8e 	bl	8003542 <HAL_GPIO_WritePin>

			if (dryer.state == START) {
 8002026:	4b86      	ldr	r3, [pc, #536]	; (8002240 <main+0x56c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	f040 80bd 	bne.w	80021aa <main+0x4d6>

				scaned_key = scan_keypad();
 8002030:	f7ff f8a6 	bl	8001180 <scan_keypad>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	4b87      	ldr	r3, [pc, #540]	; (8002258 <main+0x584>)
 800203a:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 800203c:	4b86      	ldr	r3, [pc, #536]	; (8002258 <main+0x584>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	3b01      	subs	r3, #1
 8002042:	2b03      	cmp	r3, #3
 8002044:	f200 80ad 	bhi.w	80021a2 <main+0x4ce>
 8002048:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <main+0x37c>)
 800204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204e:	bf00      	nop
 8002050:	08002061 	.word	0x08002061
 8002054:	080020a9 	.word	0x080020a9
 8002058:	080020cf 	.word	0x080020cf
 800205c:	08002177 	.word	0x08002177
				case LOW_KEY_PRESSED:
					lcd_update_flag = 1U;
 8002060:	4b7e      	ldr	r3, [pc, #504]	; (800225c <main+0x588>)
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <main+0x56c>)
 8002068:	7a1b      	ldrb	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <main+0x3a0>
 800206e:	2b01      	cmp	r3, #1
 8002070:	d00b      	beq.n	800208a <main+0x3b6>
					case COOL_CYCLE:
						if (dryer.coolTime > 60U)
							dryer.coolTime -= 60U;
						break;
					}
					break;
 8002072:	e096      	b.n	80021a2 <main+0x4ce>
						if (dryer.heatTime > 60U)
 8002074:	4b72      	ldr	r3, [pc, #456]	; (8002240 <main+0x56c>)
 8002076:	885b      	ldrh	r3, [r3, #2]
 8002078:	2b3c      	cmp	r3, #60	; 0x3c
 800207a:	d911      	bls.n	80020a0 <main+0x3cc>
							dryer.heatTime -= 60U;
 800207c:	4b70      	ldr	r3, [pc, #448]	; (8002240 <main+0x56c>)
 800207e:	885b      	ldrh	r3, [r3, #2]
 8002080:	3b3c      	subs	r3, #60	; 0x3c
 8002082:	b29a      	uxth	r2, r3
 8002084:	4b6e      	ldr	r3, [pc, #440]	; (8002240 <main+0x56c>)
 8002086:	805a      	strh	r2, [r3, #2]
						break;
 8002088:	e00a      	b.n	80020a0 <main+0x3cc>
						if (dryer.coolTime > 60U)
 800208a:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <main+0x56c>)
 800208c:	889b      	ldrh	r3, [r3, #4]
 800208e:	2b3c      	cmp	r3, #60	; 0x3c
 8002090:	d908      	bls.n	80020a4 <main+0x3d0>
							dryer.coolTime -= 60U;
 8002092:	4b6b      	ldr	r3, [pc, #428]	; (8002240 <main+0x56c>)
 8002094:	889b      	ldrh	r3, [r3, #4]
 8002096:	3b3c      	subs	r3, #60	; 0x3c
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b69      	ldr	r3, [pc, #420]	; (8002240 <main+0x56c>)
 800209c:	809a      	strh	r2, [r3, #4]
						break;
 800209e:	e001      	b.n	80020a4 <main+0x3d0>
						break;
 80020a0:	bf00      	nop
 80020a2:	e07e      	b.n	80021a2 <main+0x4ce>
						break;
 80020a4:	bf00      	nop
					break;
 80020a6:	e07c      	b.n	80021a2 <main+0x4ce>

				case MED_KEY_PRESSED:
					lcd_update_flag = 1U;
 80020a8:	4b6c      	ldr	r3, [pc, #432]	; (800225c <main+0x588>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80020ae:	4b64      	ldr	r3, [pc, #400]	; (8002240 <main+0x56c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80020b4:	4b62      	ldr	r3, [pc, #392]	; (8002240 <main+0x56c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 80020ba:	4b69      	ldr	r3, [pc, #420]	; (8002260 <main+0x58c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80020c0:	4b66      	ldr	r3, [pc, #408]	; (800225c <main+0x588>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 80020c6:	4b67      	ldr	r3, [pc, #412]	; (8002264 <main+0x590>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
					break;
 80020cc:	e069      	b.n	80021a2 <main+0x4ce>

				case HIGH_KEY_PRESSED:
					lcd_update_flag = 1U;
 80020ce:	4b63      	ldr	r3, [pc, #396]	; (800225c <main+0x588>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 80020d4:	4b5a      	ldr	r3, [pc, #360]	; (8002240 <main+0x56c>)
 80020d6:	7a1b      	ldrb	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <main+0x40e>
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d037      	beq.n	8002150 <main+0x47c>
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
 80020e0:	e05f      	b.n	80021a2 <main+0x4ce>
						if ((dryer.heatTime < 1800U)
 80020e2:	4b57      	ldr	r3, [pc, #348]	; (8002240 <main+0x56c>)
 80020e4:	885b      	ldrh	r3, [r3, #2]
 80020e6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80020ea:	d20a      	bcs.n	8002102 <main+0x42e>
								&& (dryer.mode == LOW_LEVEL))
 80020ec:	4b54      	ldr	r3, [pc, #336]	; (8002240 <main+0x56c>)
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d106      	bne.n	8002102 <main+0x42e>
							dryer.heatTime += 60U;
 80020f4:	4b52      	ldr	r3, [pc, #328]	; (8002240 <main+0x56c>)
 80020f6:	885b      	ldrh	r3, [r3, #2]
 80020f8:	333c      	adds	r3, #60	; 0x3c
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <main+0x56c>)
 80020fe:	805a      	strh	r2, [r3, #2]
 8002100:	e01f      	b.n	8002142 <main+0x46e>
						else if ((dryer.heatTime < 2400U)
 8002102:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <main+0x56c>)
 8002104:	885b      	ldrh	r3, [r3, #2]
 8002106:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800210a:	d20a      	bcs.n	8002122 <main+0x44e>
								&& (dryer.mode == MED_LEVEL))
 800210c:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <main+0x56c>)
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d106      	bne.n	8002122 <main+0x44e>
							dryer.heatTime += 60U;
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <main+0x56c>)
 8002116:	885b      	ldrh	r3, [r3, #2]
 8002118:	333c      	adds	r3, #60	; 0x3c
 800211a:	b29a      	uxth	r2, r3
 800211c:	4b48      	ldr	r3, [pc, #288]	; (8002240 <main+0x56c>)
 800211e:	805a      	strh	r2, [r3, #2]
 8002120:	e00f      	b.n	8002142 <main+0x46e>
						else if ((dryer.heatTime < 3000U)
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <main+0x56c>)
 8002124:	885b      	ldrh	r3, [r3, #2]
 8002126:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800212a:	4293      	cmp	r3, r2
 800212c:	d809      	bhi.n	8002142 <main+0x46e>
								&& (dryer.mode == HIGH_LEVEL))
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <main+0x56c>)
 8002130:	785b      	ldrb	r3, [r3, #1]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d105      	bne.n	8002142 <main+0x46e>
							dryer.heatTime += 60U;
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <main+0x56c>)
 8002138:	885b      	ldrh	r3, [r3, #2]
 800213a:	333c      	adds	r3, #60	; 0x3c
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b40      	ldr	r3, [pc, #256]	; (8002240 <main+0x56c>)
 8002140:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 8002142:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <main+0x56c>)
 8002144:	885b      	ldrh	r3, [r3, #2]
 8002146:	4619      	mov	r1, r3
 8002148:	4847      	ldr	r0, [pc, #284]	; (8002268 <main+0x594>)
 800214a:	f003 fcef 	bl	8005b2c <iprintf>
						break;
 800214e:	e011      	b.n	8002174 <main+0x4a0>
						if (dryer.coolTime < 900U)
 8002150:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <main+0x56c>)
 8002152:	889b      	ldrh	r3, [r3, #4]
 8002154:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002158:	d205      	bcs.n	8002166 <main+0x492>
							dryer.coolTime += 60U;
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <main+0x56c>)
 800215c:	889b      	ldrh	r3, [r3, #4]
 800215e:	333c      	adds	r3, #60	; 0x3c
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b37      	ldr	r3, [pc, #220]	; (8002240 <main+0x56c>)
 8002164:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <main+0x56c>)
 8002168:	889b      	ldrh	r3, [r3, #4]
 800216a:	4619      	mov	r1, r3
 800216c:	483f      	ldr	r0, [pc, #252]	; (800226c <main+0x598>)
 800216e:	f003 fcdd 	bl	8005b2c <iprintf>
						break;
 8002172:	bf00      	nop
					break;
 8002174:	e015      	b.n	80021a2 <main+0x4ce>

				case FN_KEY_PRESSED:
					lcd_update_flag = 1U;
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <main+0x588>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 0U;
 800217c:	4b30      	ldr	r3, [pc, #192]	; (8002240 <main+0x56c>)
 800217e:	2200      	movs	r2, #0
 8002180:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 8002182:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <main+0x56c>)
 8002184:	2201      	movs	r2, #1
 8002186:	721a      	strb	r2, [r3, #8]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <main+0x56c>)
 800218a:	885b      	ldrh	r3, [r3, #2]
 800218c:	4619      	mov	r1, r3
 800218e:	4836      	ldr	r0, [pc, #216]	; (8002268 <main+0x594>)
 8002190:	f003 fccc 	bl	8005b2c <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8002194:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <main+0x56c>)
 8002196:	889b      	ldrh	r3, [r3, #4]
 8002198:	4619      	mov	r1, r3
 800219a:	4834      	ldr	r0, [pc, #208]	; (800226c <main+0x598>)
 800219c:	f003 fcc6 	bl	8005b2c <iprintf>
					break;
 80021a0:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <main+0x584>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e0d0      	b.n	800234c <main+0x678>

			} else if (dryer.state == INIT) {
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <main+0x56c>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 80cc 	bne.w	800234c <main+0x678>

				scaned_key = scan_keypad();
 80021b4:	f7fe ffe4 	bl	8001180 <scan_keypad>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b26      	ldr	r3, [pc, #152]	; (8002258 <main+0x584>)
 80021be:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <main+0x584>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	f000 808d 	beq.w	80022e4 <main+0x610>
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	f300 80ba 	bgt.w	8002344 <main+0x670>
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d002      	beq.n	80021da <main+0x506>
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d055      	beq.n	8002284 <main+0x5b0>
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
							sizeof("HIGH_LEVEL\r\n"), 10);
					break;

				default:
					break;
 80021d8:	e0b4      	b.n	8002344 <main+0x670>
					dryer.mode = LOW_LEVEL;
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <main+0x56c>)
 80021dc:	2201      	movs	r2, #1
 80021de:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <main+0x56c>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <main+0x56c>)
 80021e8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80021ec:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <main+0x56c>)
 80021f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021f4:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <main+0x56c>)
 80021f8:	221e      	movs	r2, #30
 80021fa:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 40U;
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <main+0x56c>)
 80021fe:	2228      	movs	r2, #40	; 0x28
 8002200:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <main+0x56c>)
 8002204:	2200      	movs	r2, #0
 8002206:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <main+0x59c>)
 800220a:	221e      	movs	r2, #30
 800220c:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <main+0x5a0>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8002214:	4b18      	ldr	r3, [pc, #96]	; (8002278 <main+0x5a4>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <main+0x568>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
					cur_page = LOW_LEVEL_PAGE;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <main+0x58c>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <main+0x588>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 800222c:	230a      	movs	r3, #10
 800222e:	220c      	movs	r2, #12
 8002230:	4912      	ldr	r1, [pc, #72]	; (800227c <main+0x5a8>)
 8002232:	4813      	ldr	r0, [pc, #76]	; (8002280 <main+0x5ac>)
 8002234:	f002 fe7d 	bl	8004f32 <HAL_UART_Transmit>
					break;
 8002238:	e085      	b.n	8002346 <main+0x672>
 800223a:	bf00      	nop
 800223c:	200002a2 	.word	0x200002a2
 8002240:	20000294 	.word	0x20000294
 8002244:	2000030c 	.word	0x2000030c
 8002248:	2000029e 	.word	0x2000029e
 800224c:	200002a0 	.word	0x200002a0
 8002250:	200002a4 	.word	0x200002a4
 8002254:	40011000 	.word	0x40011000
 8002258:	200002a3 	.word	0x200002a3
 800225c:	200002ab 	.word	0x200002ab
 8002260:	200002a9 	.word	0x200002a9
 8002264:	200002a1 	.word	0x200002a1
 8002268:	08008294 	.word	0x08008294
 800226c:	080082a4 	.word	0x080082a4
 8002270:	20000002 	.word	0x20000002
 8002274:	200002a5 	.word	0x200002a5
 8002278:	200002a6 	.word	0x200002a6
 800227c:	080082b4 	.word	0x080082b4
 8002280:	20000354 	.word	0x20000354
					dryer.mode = MED_LEVEL;
 8002284:	4baa      	ldr	r3, [pc, #680]	; (8002530 <main+0x85c>)
 8002286:	2202      	movs	r2, #2
 8002288:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 800228a:	4ba9      	ldr	r3, [pc, #676]	; (8002530 <main+0x85c>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 8002290:	4ba7      	ldr	r3, [pc, #668]	; (8002530 <main+0x85c>)
 8002292:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002296:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8002298:	4ba5      	ldr	r3, [pc, #660]	; (8002530 <main+0x85c>)
 800229a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800229e:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80022a0:	4ba3      	ldr	r3, [pc, #652]	; (8002530 <main+0x85c>)
 80022a2:	221e      	movs	r2, #30
 80022a4:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 70U;
 80022a6:	4ba2      	ldr	r3, [pc, #648]	; (8002530 <main+0x85c>)
 80022a8:	2246      	movs	r2, #70	; 0x46
 80022aa:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 80022ac:	4ba0      	ldr	r3, [pc, #640]	; (8002530 <main+0x85c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 80022b2:	4ba0      	ldr	r3, [pc, #640]	; (8002534 <main+0x860>)
 80022b4:	221e      	movs	r2, #30
 80022b6:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 80022b8:	4b9f      	ldr	r3, [pc, #636]	; (8002538 <main+0x864>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 80022be:	4b9f      	ldr	r3, [pc, #636]	; (800253c <main+0x868>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 80022c4:	4b9e      	ldr	r3, [pc, #632]	; (8002540 <main+0x86c>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
					cur_page = MED_LEVEL_PAGE;
 80022ca:	4b9e      	ldr	r3, [pc, #632]	; (8002544 <main+0x870>)
 80022cc:	2202      	movs	r2, #2
 80022ce:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80022d0:	4b9d      	ldr	r3, [pc, #628]	; (8002548 <main+0x874>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 80022d6:	230a      	movs	r3, #10
 80022d8:	220c      	movs	r2, #12
 80022da:	499c      	ldr	r1, [pc, #624]	; (800254c <main+0x878>)
 80022dc:	489c      	ldr	r0, [pc, #624]	; (8002550 <main+0x87c>)
 80022de:	f002 fe28 	bl	8004f32 <HAL_UART_Transmit>
					break;
 80022e2:	e030      	b.n	8002346 <main+0x672>
					dryer.mode = HIGH_LEVEL;
 80022e4:	4b92      	ldr	r3, [pc, #584]	; (8002530 <main+0x85c>)
 80022e6:	2203      	movs	r2, #3
 80022e8:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80022ea:	4b91      	ldr	r3, [pc, #580]	; (8002530 <main+0x85c>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 80022f0:	4b8f      	ldr	r3, [pc, #572]	; (8002530 <main+0x85c>)
 80022f2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80022f6:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80022f8:	4b8d      	ldr	r3, [pc, #564]	; (8002530 <main+0x85c>)
 80022fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022fe:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8002300:	4b8b      	ldr	r3, [pc, #556]	; (8002530 <main+0x85c>)
 8002302:	221e      	movs	r2, #30
 8002304:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 90U;
 8002306:	4b8a      	ldr	r3, [pc, #552]	; (8002530 <main+0x85c>)
 8002308:	225a      	movs	r2, #90	; 0x5a
 800230a:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 800230c:	4b88      	ldr	r3, [pc, #544]	; (8002530 <main+0x85c>)
 800230e:	2200      	movs	r2, #0
 8002310:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <main+0x860>)
 8002314:	221e      	movs	r2, #30
 8002316:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8002318:	4b87      	ldr	r3, [pc, #540]	; (8002538 <main+0x864>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 800231e:	4b87      	ldr	r3, [pc, #540]	; (800253c <main+0x868>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8002324:	4b86      	ldr	r3, [pc, #536]	; (8002540 <main+0x86c>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
					cur_page = HIGH_LEVEL_PAGE;
 800232a:	4b86      	ldr	r3, [pc, #536]	; (8002544 <main+0x870>)
 800232c:	2203      	movs	r2, #3
 800232e:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8002330:	4b85      	ldr	r3, [pc, #532]	; (8002548 <main+0x874>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 8002336:	230a      	movs	r3, #10
 8002338:	220d      	movs	r2, #13
 800233a:	4986      	ldr	r1, [pc, #536]	; (8002554 <main+0x880>)
 800233c:	4884      	ldr	r0, [pc, #528]	; (8002550 <main+0x87c>)
 800233e:	f002 fdf8 	bl	8004f32 <HAL_UART_Transmit>
					break;
 8002342:	e000      	b.n	8002346 <main+0x672>
					break;
 8002344:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 8002346:	4b84      	ldr	r3, [pc, #528]	; (8002558 <main+0x884>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
			}
		}

		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 800234c:	4b83      	ldr	r3, [pc, #524]	; (800255c <main+0x888>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d13d      	bne.n	80023d0 <main+0x6fc>
 8002354:	4b82      	ldr	r3, [pc, #520]	; (8002560 <main+0x88c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d139      	bne.n	80023d0 <main+0x6fc>
 800235c:	4b81      	ldr	r3, [pc, #516]	; (8002564 <main+0x890>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d135      	bne.n	80023d0 <main+0x6fc>
			if (dryer.state == START) {
 8002364:	4b72      	ldr	r3, [pc, #456]	; (8002530 <main+0x85c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d154      	bne.n	8002416 <main+0x742>
				if (limit_timeout == 0U) {
 800236c:	4b7e      	ldr	r3, [pc, #504]	; (8002568 <main+0x894>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d150      	bne.n	8002416 <main+0x742>
					limit_timeout = 30U;
 8002374:	4b7c      	ldr	r3, [pc, #496]	; (8002568 <main+0x894>)
 8002376:	221e      	movs	r2, #30
 8002378:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 800237a:	4b7c      	ldr	r3, [pc, #496]	; (800256c <main+0x898>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]

					dryer.state = INIT;
 8002380:	4b6b      	ldr	r3, [pc, #428]	; (8002530 <main+0x85c>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8002386:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <main+0x85c>)
 8002388:	2200      	movs	r2, #0
 800238a:	705a      	strb	r2, [r3, #1]

					cur_page = LIMIT_SW_ERR_PAGE;
 800238c:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <main+0x870>)
 800238e:	2206      	movs	r2, #6
 8002390:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8002392:	2200      	movs	r2, #0
 8002394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002398:	4875      	ldr	r0, [pc, #468]	; (8002570 <main+0x89c>)
 800239a:	f001 f8d2 	bl	8003542 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800239e:	2200      	movs	r2, #0
 80023a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023a4:	4873      	ldr	r0, [pc, #460]	; (8002574 <main+0x8a0>)
 80023a6:	f001 f8cc 	bl	8003542 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80023aa:	2200      	movs	r2, #0
 80023ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023b0:	4870      	ldr	r0, [pc, #448]	; (8002574 <main+0x8a0>)
 80023b2:	f001 f8c6 	bl	8003542 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80023b6:	2200      	movs	r2, #0
 80023b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023bc:	486d      	ldr	r0, [pc, #436]	; (8002574 <main+0x8a0>)
 80023be:	f001 f8c0 	bl	8003542 <HAL_GPIO_WritePin>

					limit_timeout_flag = 1U;
 80023c2:	4b68      	ldr	r3, [pc, #416]	; (8002564 <main+0x890>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80023c8:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <main+0x874>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
			if (dryer.state == START) {
 80023ce:	e022      	b.n	8002416 <main+0x742>
				}
			}
		} else if (!door_open_flag && !coil_open_flag && limit_timeout_flag) {
 80023d0:	4b62      	ldr	r3, [pc, #392]	; (800255c <main+0x888>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11f      	bne.n	8002418 <main+0x744>
 80023d8:	4b61      	ldr	r3, [pc, #388]	; (8002560 <main+0x88c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11b      	bne.n	8002418 <main+0x744>
 80023e0:	4b60      	ldr	r3, [pc, #384]	; (8002564 <main+0x890>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d017      	beq.n	8002418 <main+0x744>
			scaned_key = scan_keypad();
 80023e8:	f7fe feca 	bl	8001180 <scan_keypad>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b59      	ldr	r3, [pc, #356]	; (8002558 <main+0x884>)
 80023f2:	701a      	strb	r2, [r3, #0]
			if (scaned_key == MED_KEY_PRESSED) {
 80023f4:	4b58      	ldr	r3, [pc, #352]	; (8002558 <main+0x884>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d10d      	bne.n	8002418 <main+0x744>
				cur_page = INIT_PAGE;
 80023fc:	4b51      	ldr	r3, [pc, #324]	; (8002544 <main+0x870>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
				limit_timeout = 30U;
 8002402:	4b59      	ldr	r3, [pc, #356]	; (8002568 <main+0x894>)
 8002404:	221e      	movs	r2, #30
 8002406:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8002408:	4b4f      	ldr	r3, [pc, #316]	; (8002548 <main+0x874>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
				limit_timeout_flag = 0U;
 800240e:	4b55      	ldr	r3, [pc, #340]	; (8002564 <main+0x890>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	e000      	b.n	8002418 <main+0x744>
			if (dryer.state == START) {
 8002416:	bf00      	nop
		 * @COMPLETE STATE
		 * 		->TURNS OFF FAN, DRUM MOTORS, HEATER
		 * 		->TRUNS ON/OFF BEEP EVERY 3s FOR 30s
		 * 		->WATCHS DOOR OPEN
		 **********************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 8002418:	4b50      	ldr	r3, [pc, #320]	; (800255c <main+0x888>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 812e 	bne.w	800267e <main+0x9aa>
 8002422:	4b4f      	ldr	r3, [pc, #316]	; (8002560 <main+0x88c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 8129 	bne.w	800267e <main+0x9aa>
 800242c:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <main+0x890>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 8124 	bne.w	800267e <main+0x9aa>

			if (dryer.state == START) {
 8002436:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <main+0x85c>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	f040 80d1 	bne.w	80025e2 <main+0x90e>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 8002440:	2201      	movs	r2, #1
 8002442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002446:	484a      	ldr	r0, [pc, #296]	; (8002570 <main+0x89c>)
 8002448:	f001 f87b 	bl	8003542 <HAL_GPIO_WritePin>

				if (otp) {
 800244c:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <main+0x8a4>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <main+0x7c2>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <main+0x85c>)
 8002456:	885b      	ldrh	r3, [r3, #2]
 8002458:	4619      	mov	r1, r3
 800245a:	4848      	ldr	r0, [pc, #288]	; (800257c <main+0x8a8>)
 800245c:	f003 fb66 	bl	8005b2c <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8002460:	4b33      	ldr	r3, [pc, #204]	; (8002530 <main+0x85c>)
 8002462:	889b      	ldrh	r3, [r3, #4]
 8002464:	4619      	mov	r1, r3
 8002466:	4846      	ldr	r0, [pc, #280]	; (8002580 <main+0x8ac>)
 8002468:	f003 fb60 	bl	8005b2c <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 800246c:	4b31      	ldr	r3, [pc, #196]	; (8002534 <main+0x860>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	4844      	ldr	r0, [pc, #272]	; (8002584 <main+0x8b0>)
 8002474:	f003 fb5a 	bl	8005b2c <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 8002478:	4b30      	ldr	r3, [pc, #192]	; (800253c <main+0x868>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	4842      	ldr	r0, [pc, #264]	; (8002588 <main+0x8b4>)
 8002480:	f003 fb54 	bl	8005b2c <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 8002484:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <main+0x864>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	4840      	ldr	r0, [pc, #256]	; (800258c <main+0x8b8>)
 800248c:	f003 fb4e 	bl	8005b2c <iprintf>
					otp = 0;
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <main+0x8a4>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
				}

				//start Flip Flop
				if (pasue_cunt > 0) {
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <main+0x868>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d034      	beq.n	8002508 <main+0x834>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800249e:	2200      	movs	r2, #0
 80024a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024a4:	4833      	ldr	r0, [pc, #204]	; (8002574 <main+0x8a0>)
 80024a6:	f001 f84c 	bl	8003542 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80024aa:	2200      	movs	r2, #0
 80024ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024b0:	4830      	ldr	r0, [pc, #192]	; (8002574 <main+0x8a0>)
 80024b2:	f001 f846 	bl	8003542 <HAL_GPIO_WritePin>

					if (pasue_cunt <= 1) {
 80024b6:	4b21      	ldr	r3, [pc, #132]	; (800253c <main+0x868>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d87f      	bhi.n	80025be <main+0x8ea>

						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 80024be:	2104      	movs	r1, #4
 80024c0:	482b      	ldr	r0, [pc, #172]	; (8002570 <main+0x89c>)
 80024c2:	f001 f827 	bl	8003514 <HAL_GPIO_ReadPin>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <main+0x8bc>)
 80024cc:	701a      	strb	r2, [r3, #0]
						SEL_ROT_SW);

						if (rot_sw_state) {
 80024ce:	4b30      	ldr	r3, [pc, #192]	; (8002590 <main+0x8bc>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <main+0x810>

							rot_left_cunt = 30U;
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <main+0x860>)
 80024d8:	221e      	movs	r2, #30
 80024da:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <main+0x864>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e06c      	b.n	80025be <main+0x8ea>

						} else {

							if (flipflop) {
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <main+0x8c0>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <main+0x826>

								rot_left_cunt = 0U;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <main+0x860>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <main+0x864>)
 80024f4:	221e      	movs	r2, #30
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e061      	b.n	80025be <main+0x8ea>

							} else {

								rot_left_cunt = 30U;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <main+0x860>)
 80024fc:	221e      	movs	r2, #30
 80024fe:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <main+0x864>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e05a      	b.n	80025be <main+0x8ea>

							}
						}
					}
				} else if (rot_left_cunt > 0) {
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <main+0x860>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d043      	beq.n	8002598 <main+0x8c4>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 8002510:	2201      	movs	r2, #1
 8002512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002516:	4817      	ldr	r0, [pc, #92]	; (8002574 <main+0x8a0>)
 8002518:	f001 f813 	bl	8003542 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002522:	4814      	ldr	r0, [pc, #80]	; (8002574 <main+0x8a0>)
 8002524:	f001 f80d 	bl	8003542 <HAL_GPIO_WritePin>
					flipflop = 1;
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <main+0x8c0>)
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e046      	b.n	80025be <main+0x8ea>
 8002530:	20000294 	.word	0x20000294
 8002534:	20000002 	.word	0x20000002
 8002538:	200002a5 	.word	0x200002a5
 800253c:	200002a6 	.word	0x200002a6
 8002540:	200002a2 	.word	0x200002a2
 8002544:	200002a9 	.word	0x200002a9
 8002548:	200002ab 	.word	0x200002ab
 800254c:	080082c0 	.word	0x080082c0
 8002550:	20000354 	.word	0x20000354
 8002554:	080082cc 	.word	0x080082cc
 8002558:	200002a3 	.word	0x200002a3
 800255c:	2000029e 	.word	0x2000029e
 8002560:	200002a0 	.word	0x200002a0
 8002564:	200002a4 	.word	0x200002a4
 8002568:	20000001 	.word	0x20000001
 800256c:	200002a1 	.word	0x200002a1
 8002570:	40010800 	.word	0x40010800
 8002574:	40010c00 	.word	0x40010c00
 8002578:	20000000 	.word	0x20000000
 800257c:	080082dc 	.word	0x080082dc
 8002580:	080082a4 	.word	0x080082a4
 8002584:	080082f0 	.word	0x080082f0
 8002588:	08008300 	.word	0x08008300
 800258c:	08008310 	.word	0x08008310
 8002590:	200002a7 	.word	0x200002a7
 8002594:	200002a8 	.word	0x200002a8

				} else if (rot_right_cunt > 0) {
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <main+0x9b4>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00e      	beq.n	80025be <main+0x8ea>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025a6:	4839      	ldr	r0, [pc, #228]	; (800268c <main+0x9b8>)
 80025a8:	f000 ffcb 	bl	8003542 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 80025ac:	2201      	movs	r2, #1
 80025ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025b2:	4836      	ldr	r0, [pc, #216]	; (800268c <main+0x9b8>)
 80025b4:	f000 ffc5 	bl	8003542 <HAL_GPIO_WritePin>
					flipflop = 0;
 80025b8:	4b35      	ldr	r3, [pc, #212]	; (8002690 <main+0x9bc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]

				}

				if (dryer.cycle == HEAT_CYCLE) {
 80025be:	4b35      	ldr	r3, [pc, #212]	; (8002694 <main+0x9c0>)
 80025c0:	7a1b      	ldrb	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <main+0x900>

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025cc:	482f      	ldr	r0, [pc, #188]	; (800268c <main+0x9b8>)
 80025ce:	f000 ffb8 	bl	8003542 <HAL_GPIO_WritePin>
 80025d2:	e054      	b.n	800267e <main+0x9aa>

				} else {

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80025d4:	2200      	movs	r2, #0
 80025d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025da:	482c      	ldr	r0, [pc, #176]	; (800268c <main+0x9b8>)
 80025dc:	f000 ffb1 	bl	8003542 <HAL_GPIO_WritePin>
 80025e0:	e04d      	b.n	800267e <main+0x9aa>

				}
			} else if (dryer.state == COMPLETE) {
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <main+0x9c0>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d131      	bne.n	800264e <main+0x97a>

				if (dryer.beepTime == 0) {
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <main+0x9c0>)
 80025ec:	79db      	ldrb	r3, [r3, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d114      	bne.n	800261c <main+0x948>
					HAL_GPIO_WritePin(GPIOC, LED, LOW);
 80025f2:	2200      	movs	r2, #0
 80025f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025f8:	4827      	ldr	r0, [pc, #156]	; (8002698 <main+0x9c4>)
 80025fa:	f000 ffa2 	bl	8003542 <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 80025fe:	4b27      	ldr	r3, [pc, #156]	; (800269c <main+0x9c8>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <main+0x9cc>)
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
					//beep off
					timer_stop_evt = 1U;
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <main+0x9d0>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8002610:	4b20      	ldr	r3, [pc, #128]	; (8002694 <main+0x9c0>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <main+0x9c0>)
 8002618:	2200      	movs	r2, #0
 800261a:	705a      	strb	r2, [r3, #1]
				} else if (dryer.beepTime % 3 == 0) {
					//beep toggle
				}
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 800261c:	2200      	movs	r2, #0
 800261e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002622:	4821      	ldr	r0, [pc, #132]	; (80026a8 <main+0x9d4>)
 8002624:	f000 ff8d 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8002628:	2200      	movs	r2, #0
 800262a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800262e:	4817      	ldr	r0, [pc, #92]	; (800268c <main+0x9b8>)
 8002630:	f000 ff87 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8002634:	2200      	movs	r2, #0
 8002636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800263a:	4814      	ldr	r0, [pc, #80]	; (800268c <main+0x9b8>)
 800263c:	f000 ff81 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8002640:	2200      	movs	r2, #0
 8002642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002646:	4811      	ldr	r0, [pc, #68]	; (800268c <main+0x9b8>)
 8002648:	f000 ff7b 	bl	8003542 <HAL_GPIO_WritePin>
 800264c:	e017      	b.n	800267e <main+0x9aa>

			} else {
				//beep off
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 800264e:	2200      	movs	r2, #0
 8002650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002654:	4814      	ldr	r0, [pc, #80]	; (80026a8 <main+0x9d4>)
 8002656:	f000 ff74 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800265a:	2200      	movs	r2, #0
 800265c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002660:	480a      	ldr	r0, [pc, #40]	; (800268c <main+0x9b8>)
 8002662:	f000 ff6e 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8002666:	2200      	movs	r2, #0
 8002668:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <main+0x9b8>)
 800266e:	f000 ff68 	bl	8003542 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8002672:	2200      	movs	r2, #0
 8002674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002678:	4804      	ldr	r0, [pc, #16]	; (800268c <main+0x9b8>)
 800267a:	f000 ff62 	bl	8003542 <HAL_GPIO_WritePin>
			}
		}
		lcd_update_flag = 1U;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <main+0x9cc>)
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
		if (is_door_open() && (!door_open_flag)) {
 8002684:	f7ff bb62 	b.w	8001d4c <main+0x78>
 8002688:	200002a5 	.word	0x200002a5
 800268c:	40010c00 	.word	0x40010c00
 8002690:	200002a8 	.word	0x200002a8
 8002694:	20000294 	.word	0x20000294
 8002698:	40011000 	.word	0x40011000
 800269c:	200002a9 	.word	0x200002a9
 80026a0:	200002ab 	.word	0x200002ab
 80026a4:	200002a1 	.word	0x200002a1
 80026a8:	40010800 	.word	0x40010800

080026ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b090      	sub	sp, #64	; 0x40
 80026b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b2:	f107 0318 	add.w	r3, r7, #24
 80026b6:	2228      	movs	r2, #40	; 0x28
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 fdce 	bl	800525c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026ce:	2302      	movs	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026d2:	2301      	movs	r3, #1
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026d6:	2310      	movs	r3, #16
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026da:	2300      	movs	r3, #0
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026de:	f107 0318 	add.w	r3, r7, #24
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 ff5e 	bl	80035a4 <HAL_RCC_OscConfig>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80026ee:	f000 f8e5 	bl	80028bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026f2:	230f      	movs	r3, #15
 80026f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f001 f9cc 	bl	8003aa8 <HAL_RCC_ClockConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002716:	f000 f8d1 	bl	80028bc <Error_Handler>
  }
}
 800271a:	bf00      	nop
 800271c:	3740      	adds	r7, #64	; 0x40
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
//	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10b      	bne.n	800274c <HAL_GPIO_EXTI_Callback+0x28>
		NVIC_DisableIRQ(EXTI0_IRQn);
 8002734:	2006      	movs	r0, #6
 8002736:	f7ff fa97 	bl	8001c68 <__NVIC_DisableIRQ>

		door_open_flag = 1U;
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_GPIO_EXTI_Callback+0x30>)
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
		door_open_evt = 1U;
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_GPIO_EXTI_Callback+0x34>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]

		NVIC_EnableIRQ(EXTI0_IRQn);
 8002746:	2006      	movs	r0, #6
 8002748:	f7ff fa72 	bl	8001c30 <__NVIC_EnableIRQ>
	}
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	2000029e 	.word	0x2000029e
 8002758:	2000029f 	.word	0x2000029f

0800275c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) "TIMER\r\n", sizeof("TIMER\r\n"), 10);
 8002764:	230a      	movs	r3, #10
 8002766:	2208      	movs	r2, #8
 8002768:	4948      	ldr	r1, [pc, #288]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800276a:	4849      	ldr	r0, [pc, #292]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800276c:	f002 fbe1 	bl	8004f32 <HAL_UART_Transmit>

	if (dryer.heatTime > 0) {
 8002770:	4b48      	ldr	r3, [pc, #288]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d006      	beq.n	8002786 <HAL_TIM_PeriodElapsedCallback+0x2a>
		dryer.heatTime--;
 8002778:	4b46      	ldr	r3, [pc, #280]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800277a:	885b      	ldrh	r3, [r3, #2]
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b44      	ldr	r3, [pc, #272]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002782:	805a      	strh	r2, [r3, #2]
 8002784:	e014      	b.n	80027b0 <HAL_TIM_PeriodElapsedCallback+0x54>
	} else if (dryer.coolTime > 0) {
 8002786:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002788:	889b      	ldrh	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <HAL_TIM_PeriodElapsedCallback+0x40>
		dryer.coolTime--;
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002790:	889b      	ldrh	r3, [r3, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002798:	809a      	strh	r2, [r3, #4]
 800279a:	e009      	b.n	80027b0 <HAL_TIM_PeriodElapsedCallback+0x54>
	} else if (dryer.state == COMPLETE) {
 800279c:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d105      	bne.n	80027b0 <HAL_TIM_PeriodElapsedCallback+0x54>
		dryer.beepTime--;
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027a6:	79db      	ldrb	r3, [r3, #7]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b39      	ldr	r3, [pc, #228]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027ae:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 80027b0:	4b38      	ldr	r3, [pc, #224]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027b2:	885b      	ldrh	r3, [r3, #2]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d107      	bne.n	80027c8 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027ba:	7a1b      	ldrb	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <HAL_TIM_PeriodElapsedCallback+0x6c>
		dryer.cycle = COOL_CYCLE;
 80027c0:	4b34      	ldr	r3, [pc, #208]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	721a      	strb	r2, [r3, #8]
 80027c6:	e013      	b.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x94>
	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 80027c8:	4b32      	ldr	r3, [pc, #200]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027ca:	889b      	ldrh	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10f      	bne.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x94>
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027d2:	7a1b      	ldrb	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d10b      	bne.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x94>
		printf("Complete\r\n");
 80027d8:	482f      	ldr	r0, [pc, #188]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80027da:	f003 fa2d 	bl	8005c38 <puts>
		dryer.state = COMPLETE;
 80027de:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027e0:	2202      	movs	r2, #2
 80027e2:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80027ec:	2204      	movs	r2, #4
 80027ee:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <HAL_TIM_PeriodElapsedCallback+0xaa>
		pasue_cunt--;
 80027f8:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e022      	b.n	800284c <HAL_TIM_PeriodElapsedCallback+0xf0>
	} else if (rot_left_cunt > 0) {
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <HAL_TIM_PeriodElapsedCallback+0xce>
		rot_left_cunt--;
 800280e:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002818:	701a      	strb	r2, [r3, #0]

		if (rot_left_cunt == 0) {
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d114      	bne.n	800284c <HAL_TIM_PeriodElapsedCallback+0xf0>
			pasue_cunt = 3U;
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002824:	2203      	movs	r2, #3
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	e010      	b.n	800284c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
	} else if (rot_right_cunt > 0) {
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <HAL_TIM_PeriodElapsedCallback+0xf0>
		rot_right_cunt--;
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3b01      	subs	r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800283c:	701a      	strb	r2, [r3, #0]

		if (rot_right_cunt == 0) {
 800283e:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_TIM_PeriodElapsedCallback+0xf0>
			pasue_cunt = 3U;
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002848:	2203      	movs	r2, #3
 800284a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (limit_sw_open()) {
 800284c:	f7fe fc3a 	bl	80010c4 <limit_sw_open>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_TIM_PeriodElapsedCallback+0x110>
		if (limit_timeout > 0)
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_TIM_PeriodElapsedCallback+0x11c>
			limit_timeout--;
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	3b01      	subs	r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e005      	b.n	8002878 <HAL_TIM_PeriodElapsedCallback+0x11c>
	} else {
		limit_timeout = 30U;
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x150>)
 800286e:	221e      	movs	r2, #30
 8002870:	701a      	strb	r2, [r3, #0]
		limit_timeout_flag = 0U;
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
	}
	otp = 1;
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
	lcd_update_flag = 1U;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	08008324 	.word	0x08008324
 8002890:	20000354 	.word	0x20000354
 8002894:	20000294 	.word	0x20000294
 8002898:	0800832c 	.word	0x0800832c
 800289c:	200002a9 	.word	0x200002a9
 80028a0:	200002a6 	.word	0x200002a6
 80028a4:	20000002 	.word	0x20000002
 80028a8:	200002a5 	.word	0x200002a5
 80028ac:	20000001 	.word	0x20000001
 80028b0:	200002a4 	.word	0x200002a4
 80028b4:	20000000 	.word	0x20000000
 80028b8:	200002ab 	.word	0x200002ab

080028bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028c0:	b672      	cpsid	i
}
 80028c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028c4:	e7fe      	b.n	80028c4 <Error_Handler+0x8>
	...

080028c8 <output_init>:
 *  Created on: Mar 27, 2023
 *      Author: Yash
 */
#include "output.h"

void output_init(void) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	4b3a      	ldr	r3, [pc, #232]	; (80029b8 <output_init+0xf0>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	4a39      	ldr	r2, [pc, #228]	; (80029b8 <output_init+0xf0>)
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	6193      	str	r3, [r2, #24]
 80028da:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <output_init+0xf0>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <output_init+0xf0>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4a33      	ldr	r2, [pc, #204]	; (80029b8 <output_init+0xf0>)
 80028ec:	f043 0310 	orr.w	r3, r3, #16
 80028f0:	6193      	str	r3, [r2, #24]
 80028f2:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <output_init+0xf0>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOx = { 0 };
 80028fe:	f107 0308 	add.w	r3, r7, #8
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN, GPIO_PIN_RESET);
 800290c:	2200      	movs	r2, #0
 800290e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002912:	482a      	ldr	r0, [pc, #168]	; (80029bc <output_init+0xf4>)
 8002914:	f000 fe15 	bl	8003542 <HAL_GPIO_WritePin>

	GPIOx.Pin = DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN;
 8002918:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800291c:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8002922:	2302      	movs	r3, #2
 8002924:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2302      	movs	r3, #2
 8002928:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(OUTPUT_PORT, &GPIOx);
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	4619      	mov	r1, r3
 8002930:	4822      	ldr	r0, [pc, #136]	; (80029bc <output_init+0xf4>)
 8002932:	f000 fc6b 	bl	800320c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, GPIO_PIN_RESET);
 8002936:	2200      	movs	r2, #0
 8002938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800293c:	4820      	ldr	r0, [pc, #128]	; (80029c0 <output_init+0xf8>)
 800293e:	f000 fe00 	bl	8003542 <HAL_GPIO_WritePin>

	GPIOx.Pin = FAN_PIN;
 8002942:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002946:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8002948:	2301      	movs	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 800294c:	2302      	movs	r3, #2
 800294e:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8002950:	2302      	movs	r3, #2
 8002952:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(FAN_PORT, &GPIOx);
 8002954:	f107 0308 	add.w	r3, r7, #8
 8002958:	4619      	mov	r1, r3
 800295a:	4819      	ldr	r0, [pc, #100]	; (80029c0 <output_init+0xf8>)
 800295c:	f000 fc56 	bl	800320c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8002960:	2200      	movs	r2, #0
 8002962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002966:	4817      	ldr	r0, [pc, #92]	; (80029c4 <output_init+0xfc>)
 8002968:	f000 fdeb 	bl	8003542 <HAL_GPIO_WritePin>

	GPIOx.Pin = BUZZER_PIN;
 800296c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002970:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8002972:	2301      	movs	r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8002976:	2302      	movs	r3, #2
 8002978:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2302      	movs	r3, #2
 800297c:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(BUZZER_PORT, &GPIOx);
 800297e:	f107 0308 	add.w	r3, r7, #8
 8002982:	4619      	mov	r1, r3
 8002984:	480f      	ldr	r0, [pc, #60]	; (80029c4 <output_init+0xfc>)
 8002986:	f000 fc41 	bl	800320c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 , GPIO_PIN_SET);
 800298a:	2201      	movs	r2, #1
 800298c:	2110      	movs	r1, #16
 800298e:	480c      	ldr	r0, [pc, #48]	; (80029c0 <output_init+0xf8>)
 8002990:	f000 fdd7 	bl	8003542 <HAL_GPIO_WritePin>

	GPIOx.Pin = GPIO_PIN_4;
 8002994:	2310      	movs	r3, #16
 8002996:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8002998:	2301      	movs	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOA, &GPIOx);
 80029a4:	f107 0308 	add.w	r3, r7, #8
 80029a8:	4619      	mov	r1, r3
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <output_init+0xf8>)
 80029ac:	f000 fc2e 	bl	800320c <HAL_GPIO_Init>
}
 80029b0:	bf00      	nop
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010c00 	.word	0x40010c00
 80029c0:	40010800 	.word	0x40010800
 80029c4:	40011000 	.word	0x40011000

080029c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029cc:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <MX_SPI1_Init+0x64>)
 80029ce:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <MX_SPI1_Init+0x68>)
 80029d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <MX_SPI1_Init+0x64>)
 80029d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <MX_SPI1_Init+0x64>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <MX_SPI1_Init+0x64>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_SPI1_Init+0x64>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <MX_SPI1_Init+0x64>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_SPI1_Init+0x64>)
 80029f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_SPI1_Init+0x64>)
 80029fc:	2228      	movs	r2, #40	; 0x28
 80029fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <MX_SPI1_Init+0x64>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_SPI1_Init+0x64>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <MX_SPI1_Init+0x64>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_SPI1_Init+0x64>)
 8002a14:	220a      	movs	r2, #10
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <MX_SPI1_Init+0x64>)
 8002a1a:	f001 f9dd 	bl	8003dd8 <HAL_SPI_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a24:	f7ff ff4a 	bl	80028bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200002b0 	.word	0x200002b0
 8002a30:	40013000 	.word	0x40013000

08002a34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_SPI_MspInit+0x88>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d12f      	bne.n	8002ab4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_SPI_MspInit+0x8c>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <HAL_SPI_MspInit+0x8c>)
 8002a5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a5e:	6193      	str	r3, [r2, #24]
 8002a60:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <HAL_SPI_MspInit+0x8c>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_SPI_MspInit+0x8c>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <HAL_SPI_MspInit+0x8c>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	6193      	str	r3, [r2, #24]
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_SPI_MspInit+0x8c>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a84:	23a0      	movs	r3, #160	; 0xa0
 8002a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	4619      	mov	r1, r3
 8002a96:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <HAL_SPI_MspInit+0x90>)
 8002a98:	f000 fbb8 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a9c:	2340      	movs	r3, #64	; 0x40
 8002a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4619      	mov	r1, r3
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <HAL_SPI_MspInit+0x90>)
 8002ab0:	f000 fbac 	bl	800320c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40013000 	.word	0x40013000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40010800 	.word	0x40010800

08002ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_MspInit+0x40>)
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <HAL_MspInit+0x40>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6193      	str	r3, [r2, #24]
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_MspInit+0x40>)
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_MspInit+0x40>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_MspInit+0x40>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af0:	61d3      	str	r3, [r2, #28]
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_MspInit+0x40>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	40021000 	.word	0x40021000

08002b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler+0x4>

08002b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <MemManage_Handler+0x4>

08002b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <BusFault_Handler+0x4>

08002b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <UsageFault_Handler+0x4>

08002b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b52:	f000 fa0d 	bl	8002f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0
  return 1;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <_kill>:

int _kill(int pid, int sig)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b72:	f002 fb49 	bl	8005208 <__errno>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2216      	movs	r2, #22
 8002b7a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_exit>:

void _exit (int status)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b90:	f04f 31ff 	mov.w	r1, #4294967295
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ffe7 	bl	8002b68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b9a:	e7fe      	b.n	8002b9a <_exit+0x12>

08002b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e00a      	b.n	8002bc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bae:	f3af 8000 	nop.w
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	60ba      	str	r2, [r7, #8]
 8002bba:	b2ca      	uxtb	r2, r1
 8002bbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	dbf0      	blt.n	8002bae <_read+0x12>
  }

  return len;
 8002bcc:	687b      	ldr	r3, [r7, #4]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	e009      	b.n	8002bfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff f85d 	bl	8001cb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbf1      	blt.n	8002be8 <_write+0x12>
  }
  return len;
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_close>:

int _close(int file)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c34:	605a      	str	r2, [r3, #4]
  return 0;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <_isatty>:

int _isatty(int file)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
	...

08002c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <_sbrk+0x5c>)
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <_sbrk+0x60>)
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <_sbrk+0x64>)
 8002c8e:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <_sbrk+0x68>)
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d207      	bcs.n	8002cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca0:	f002 fab2 	bl	8005208 <__errno>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	e009      	b.n	8002cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <_sbrk+0x64>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <_sbrk+0x64>)
 8002cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20005000 	.word	0x20005000
 8002cd0:	00000400 	.word	0x00000400
 8002cd4:	20000308 	.word	0x20000308
 8002cd8:	200003b0 	.word	0x200003b0

08002cdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <timer_init>:
#include "timer.h"

TIM_HandleTypeDef htim4;

void timer_init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_CLK_ENABLE();
 8002cee:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <timer_init+0xa4>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <timer_init+0xa4>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	61d3      	str	r3, [r2, #28]
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <timer_init+0xa4>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d06:	f107 0310 	add.w	r3, r7, #16
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <timer_init+0xa8>)
 8002d20:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <timer_init+0xac>)
 8002d22:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7200;
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <timer_init+0xa8>)
 8002d26:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002d2a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <timer_init+0xa8>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1110+1;
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <timer_init+0xa8>)
 8002d34:	f240 4257 	movw	r2, #1111	; 0x457
 8002d38:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <timer_init+0xa8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <timer_init+0xa8>)
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim4);
 8002d46:	4812      	ldr	r0, [pc, #72]	; (8002d90 <timer_init+0xa8>)
 8002d48:	f001 fc76 	bl	8004638 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d50:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002d52:	f107 0310 	add.w	r3, r7, #16
 8002d56:	4619      	mov	r1, r3
 8002d58:	480d      	ldr	r0, [pc, #52]	; (8002d90 <timer_init+0xa8>)
 8002d5a:	f001 fe4d 	bl	80049f8 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002d66:	f107 0308 	add.w	r3, r7, #8
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4808      	ldr	r0, [pc, #32]	; (8002d90 <timer_init+0xa8>)
 8002d6e:	f002 f823 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2101      	movs	r1, #1
 8002d76:	201e      	movs	r0, #30
 8002d78:	f000 fa11 	bl	800319e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d7c:	201e      	movs	r0, #30
 8002d7e:	f000 fa2a 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	2000030c 	.word	0x2000030c
 8002d94:	40000800 	.word	0x40000800

08002d98 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8002d9c:	4802      	ldr	r0, [pc, #8]	; (8002da8 <TIM4_IRQHandler+0x10>)
 8002d9e:	f001 fd23 	bl	80047e8 <HAL_TIM_IRQHandler>
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2000030c 	.word	0x2000030c

08002dac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <MX_USART1_UART_Init+0x4c>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <MX_USART1_UART_Init+0x50>)
 8002db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <MX_USART1_UART_Init+0x4c>)
 8002db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <MX_USART1_UART_Init+0x4c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <MX_USART1_UART_Init+0x4c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <MX_USART1_UART_Init+0x4c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <MX_USART1_UART_Init+0x4c>)
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <MX_USART1_UART_Init+0x4c>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <MX_USART1_UART_Init+0x4c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002de2:	4805      	ldr	r0, [pc, #20]	; (8002df8 <MX_USART1_UART_Init+0x4c>)
 8002de4:	f002 f858 	bl	8004e98 <HAL_UART_Init>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002dee:	f7ff fd65 	bl	80028bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000354 	.word	0x20000354
 8002dfc:	40013800 	.word	0x40013800

08002e00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0310 	add.w	r3, r7, #16
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_UART_MspInit+0x8c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d131      	bne.n	8002e84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_UART_MspInit+0x90>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_UART_MspInit+0x90>)
 8002e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2a:	6193      	str	r3, [r2, #24]
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_UART_MspInit+0x90>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e38:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_UART_MspInit+0x90>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_UART_MspInit+0x90>)
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	6193      	str	r3, [r2, #24]
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_UART_MspInit+0x90>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	f107 0310 	add.w	r3, r7, #16
 8002e62:	4619      	mov	r1, r3
 8002e64:	480b      	ldr	r0, [pc, #44]	; (8002e94 <HAL_UART_MspInit+0x94>)
 8002e66:	f000 f9d1 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f107 0310 	add.w	r3, r7, #16
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4805      	ldr	r0, [pc, #20]	; (8002e94 <HAL_UART_MspInit+0x94>)
 8002e80:	f000 f9c4 	bl	800320c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e84:	bf00      	nop
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40013800 	.word	0x40013800
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010800 	.word	0x40010800

08002e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e9a:	490d      	ldr	r1, [pc, #52]	; (8002ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea0:	e002      	b.n	8002ea8 <LoopCopyDataInit>

08002ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea6:	3304      	adds	r3, #4

08002ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eac:	d3f9      	bcc.n	8002ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002eb0:	4c0a      	ldr	r4, [pc, #40]	; (8002edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb4:	e001      	b.n	8002eba <LoopFillZerobss>

08002eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb8:	3204      	adds	r2, #4

08002eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ebc:	d3fb      	bcc.n	8002eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ebe:	f7ff ff0d 	bl	8002cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ec2:	f002 f9a7 	bl	8005214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ec6:	f7fe ff05 	bl	8001cd4 <main>
  bx lr
 8002eca:	4770      	bx	lr
  ldr r0, =_sdata
 8002ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002ed4:	08008744 	.word	0x08008744
  ldr r2, =_sbss
 8002ed8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002edc:	200003ac 	.word	0x200003ac

08002ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ee0:	e7fe      	b.n	8002ee0 <ADC1_2_IRQHandler>
	...

08002ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_Init+0x28>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <HAL_Init+0x28>)
 8002eee:	f043 0310 	orr.w	r3, r3, #16
 8002ef2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef4:	2003      	movs	r0, #3
 8002ef6:	f000 f947 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002efa:	200f      	movs	r0, #15
 8002efc:	f000 f808 	bl	8002f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f00:	f7ff fde2 	bl	8002ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40022000 	.word	0x40022000

08002f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_InitTick+0x54>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_InitTick+0x58>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f95f 	bl	80031f2 <HAL_SYSTICK_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00e      	b.n	8002f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b0f      	cmp	r3, #15
 8002f42:	d80a      	bhi.n	8002f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f44:	2200      	movs	r2, #0
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	f000 f927 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f50:	4a06      	ldr	r2, [pc, #24]	; (8002f6c <HAL_InitTick+0x5c>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000004 	.word	0x20000004
 8002f68:	2000000c 	.word	0x2000000c
 8002f6c:	20000008 	.word	0x20000008

08002f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_IncTick+0x1c>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_IncTick+0x20>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	4a03      	ldr	r2, [pc, #12]	; (8002f90 <HAL_IncTick+0x20>)
 8002f82:	6013      	str	r3, [r2, #0]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	2000000c 	.word	0x2000000c
 8002f90:	20000398 	.word	0x20000398

08002f94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return uwTick;
 8002f98:	4b02      	ldr	r3, [pc, #8]	; (8002fa4 <HAL_GetTick+0x10>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	20000398 	.word	0x20000398

08002fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb0:	f7ff fff0 	bl	8002f94 <HAL_GetTick>
 8002fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d005      	beq.n	8002fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_Delay+0x44>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fce:	bf00      	nop
 8002fd0:	f7ff ffe0 	bl	8002f94 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d8f7      	bhi.n	8002fd0 <HAL_Delay+0x28>
  {
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000000c 	.word	0x2000000c

08002ff0 <__NVIC_SetPriorityGrouping>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4906      	ldr	r1, [pc, #24]	; (8003088 <__NVIC_EnableIRQ+0x34>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	e000e100 	.word	0xe000e100

0800308c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db0a      	blt.n	80030b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	490c      	ldr	r1, [pc, #48]	; (80030d8 <__NVIC_SetPriority+0x4c>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b4:	e00a      	b.n	80030cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	; (80030dc <__NVIC_SetPriority+0x50>)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3b04      	subs	r3, #4
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	761a      	strb	r2, [r3, #24]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f1c3 0307 	rsb	r3, r3, #7
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	bf28      	it	cs
 80030fe:	2304      	movcs	r3, #4
 8003100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3304      	adds	r3, #4
 8003106:	2b06      	cmp	r3, #6
 8003108:	d902      	bls.n	8003110 <NVIC_EncodePriority+0x30>
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3b03      	subs	r3, #3
 800310e:	e000      	b.n	8003112 <NVIC_EncodePriority+0x32>
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	f04f 32ff 	mov.w	r2, #4294967295
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003128:	f04f 31ff 	mov.w	r1, #4294967295
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43d9      	mvns	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	4313      	orrs	r3, r2
         );
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	; 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f7ff ff90 	bl	800308c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff2d 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff42 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff90 	bl	80030e0 <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5f 	bl	800308c <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff35 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa2 	bl	8003144 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800320c:	b480      	push	{r7}
 800320e:	b08b      	sub	sp, #44	; 0x2c
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800321a:	2300      	movs	r3, #0
 800321c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321e:	e169      	b.n	80034f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003220:	2201      	movs	r2, #1
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	429a      	cmp	r2, r3
 800323a:	f040 8158 	bne.w	80034ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4a9a      	ldr	r2, [pc, #616]	; (80034ac <HAL_GPIO_Init+0x2a0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d05e      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
 8003248:	4a98      	ldr	r2, [pc, #608]	; (80034ac <HAL_GPIO_Init+0x2a0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d875      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 800324e:	4a98      	ldr	r2, [pc, #608]	; (80034b0 <HAL_GPIO_Init+0x2a4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d058      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
 8003254:	4a96      	ldr	r2, [pc, #600]	; (80034b0 <HAL_GPIO_Init+0x2a4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d86f      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 800325a:	4a96      	ldr	r2, [pc, #600]	; (80034b4 <HAL_GPIO_Init+0x2a8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d052      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
 8003260:	4a94      	ldr	r2, [pc, #592]	; (80034b4 <HAL_GPIO_Init+0x2a8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d869      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 8003266:	4a94      	ldr	r2, [pc, #592]	; (80034b8 <HAL_GPIO_Init+0x2ac>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d04c      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
 800326c:	4a92      	ldr	r2, [pc, #584]	; (80034b8 <HAL_GPIO_Init+0x2ac>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d863      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 8003272:	4a92      	ldr	r2, [pc, #584]	; (80034bc <HAL_GPIO_Init+0x2b0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d046      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
 8003278:	4a90      	ldr	r2, [pc, #576]	; (80034bc <HAL_GPIO_Init+0x2b0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d85d      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 800327e:	2b12      	cmp	r3, #18
 8003280:	d82a      	bhi.n	80032d8 <HAL_GPIO_Init+0xcc>
 8003282:	2b12      	cmp	r3, #18
 8003284:	d859      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 8003286:	a201      	add	r2, pc, #4	; (adr r2, 800328c <HAL_GPIO_Init+0x80>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	08003307 	.word	0x08003307
 8003290:	080032e1 	.word	0x080032e1
 8003294:	080032f3 	.word	0x080032f3
 8003298:	08003335 	.word	0x08003335
 800329c:	0800333b 	.word	0x0800333b
 80032a0:	0800333b 	.word	0x0800333b
 80032a4:	0800333b 	.word	0x0800333b
 80032a8:	0800333b 	.word	0x0800333b
 80032ac:	0800333b 	.word	0x0800333b
 80032b0:	0800333b 	.word	0x0800333b
 80032b4:	0800333b 	.word	0x0800333b
 80032b8:	0800333b 	.word	0x0800333b
 80032bc:	0800333b 	.word	0x0800333b
 80032c0:	0800333b 	.word	0x0800333b
 80032c4:	0800333b 	.word	0x0800333b
 80032c8:	0800333b 	.word	0x0800333b
 80032cc:	0800333b 	.word	0x0800333b
 80032d0:	080032e9 	.word	0x080032e9
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	4a79      	ldr	r2, [pc, #484]	; (80034c0 <HAL_GPIO_Init+0x2b4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032de:	e02c      	b.n	800333a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	623b      	str	r3, [r7, #32]
          break;
 80032e6:	e029      	b.n	800333c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	3304      	adds	r3, #4
 80032ee:	623b      	str	r3, [r7, #32]
          break;
 80032f0:	e024      	b.n	800333c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	3308      	adds	r3, #8
 80032f8:	623b      	str	r3, [r7, #32]
          break;
 80032fa:	e01f      	b.n	800333c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	330c      	adds	r3, #12
 8003302:	623b      	str	r3, [r7, #32]
          break;
 8003304:	e01a      	b.n	800333c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800330e:	2304      	movs	r3, #4
 8003310:	623b      	str	r3, [r7, #32]
          break;
 8003312:	e013      	b.n	800333c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800331c:	2308      	movs	r3, #8
 800331e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	611a      	str	r2, [r3, #16]
          break;
 8003326:	e009      	b.n	800333c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003328:	2308      	movs	r3, #8
 800332a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	615a      	str	r2, [r3, #20]
          break;
 8003332:	e003      	b.n	800333c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003334:	2300      	movs	r3, #0
 8003336:	623b      	str	r3, [r7, #32]
          break;
 8003338:	e000      	b.n	800333c <HAL_GPIO_Init+0x130>
          break;
 800333a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2bff      	cmp	r3, #255	; 0xff
 8003340:	d801      	bhi.n	8003346 <HAL_GPIO_Init+0x13a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	e001      	b.n	800334a <HAL_GPIO_Init+0x13e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3304      	adds	r3, #4
 800334a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2bff      	cmp	r3, #255	; 0xff
 8003350:	d802      	bhi.n	8003358 <HAL_GPIO_Init+0x14c>
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	e002      	b.n	800335e <HAL_GPIO_Init+0x152>
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	3b08      	subs	r3, #8
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	210f      	movs	r1, #15
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	401a      	ands	r2, r3
 8003370:	6a39      	ldr	r1, [r7, #32]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	431a      	orrs	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 80b1 	beq.w	80034ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800338c:	4b4d      	ldr	r3, [pc, #308]	; (80034c4 <HAL_GPIO_Init+0x2b8>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	4a4c      	ldr	r2, [pc, #304]	; (80034c4 <HAL_GPIO_Init+0x2b8>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6193      	str	r3, [r2, #24]
 8003398:	4b4a      	ldr	r3, [pc, #296]	; (80034c4 <HAL_GPIO_Init+0x2b8>)
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033a4:	4a48      	ldr	r2, [pc, #288]	; (80034c8 <HAL_GPIO_Init+0x2bc>)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	3302      	adds	r3, #2
 80033ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	220f      	movs	r2, #15
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a40      	ldr	r2, [pc, #256]	; (80034cc <HAL_GPIO_Init+0x2c0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <HAL_GPIO_Init+0x1ec>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3f      	ldr	r2, [pc, #252]	; (80034d0 <HAL_GPIO_Init+0x2c4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00d      	beq.n	80033f4 <HAL_GPIO_Init+0x1e8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3e      	ldr	r2, [pc, #248]	; (80034d4 <HAL_GPIO_Init+0x2c8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <HAL_GPIO_Init+0x1e4>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3d      	ldr	r2, [pc, #244]	; (80034d8 <HAL_GPIO_Init+0x2cc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_GPIO_Init+0x1e0>
 80033e8:	2303      	movs	r3, #3
 80033ea:	e006      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e004      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e002      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033f8:	2300      	movs	r3, #0
 80033fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fc:	f002 0203 	and.w	r2, r2, #3
 8003400:	0092      	lsls	r2, r2, #2
 8003402:	4093      	lsls	r3, r2
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800340a:	492f      	ldr	r1, [pc, #188]	; (80034c8 <HAL_GPIO_Init+0x2bc>)
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	3302      	adds	r3, #2
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d006      	beq.n	8003432 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	492c      	ldr	r1, [pc, #176]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003432:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	43db      	mvns	r3, r3
 800343a:	4928      	ldr	r1, [pc, #160]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 800343c:	4013      	ands	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d006      	beq.n	800345a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800344c:	4b23      	ldr	r3, [pc, #140]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	4922      	ldr	r1, [pc, #136]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
 8003458:	e006      	b.n	8003468 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	43db      	mvns	r3, r3
 8003462:	491e      	ldr	r1, [pc, #120]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 8003464:	4013      	ands	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d006      	beq.n	8003482 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	4918      	ldr	r1, [pc, #96]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]
 8003480:	e006      	b.n	8003490 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003482:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	43db      	mvns	r3, r3
 800348a:	4914      	ldr	r1, [pc, #80]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 800348c:	4013      	ands	r3, r2
 800348e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d021      	beq.n	80034e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	490e      	ldr	r1, [pc, #56]	; (80034dc <HAL_GPIO_Init+0x2d0>)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60cb      	str	r3, [r1, #12]
 80034a8:	e021      	b.n	80034ee <HAL_GPIO_Init+0x2e2>
 80034aa:	bf00      	nop
 80034ac:	10320000 	.word	0x10320000
 80034b0:	10310000 	.word	0x10310000
 80034b4:	10220000 	.word	0x10220000
 80034b8:	10210000 	.word	0x10210000
 80034bc:	10120000 	.word	0x10120000
 80034c0:	10110000 	.word	0x10110000
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40010800 	.word	0x40010800
 80034d0:	40010c00 	.word	0x40010c00
 80034d4:	40011000 	.word	0x40011000
 80034d8:	40011400 	.word	0x40011400
 80034dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_GPIO_Init+0x304>)
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	4909      	ldr	r1, [pc, #36]	; (8003510 <HAL_GPIO_Init+0x304>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	3301      	adds	r3, #1
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f47f ae8e 	bne.w	8003220 <HAL_GPIO_Init+0x14>
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	372c      	adds	r7, #44	; 0x2c
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	887b      	ldrh	r3, [r7, #2]
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e001      	b.n	8003536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003532:	2300      	movs	r3, #0
 8003534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	807b      	strh	r3, [r7, #2]
 800354e:	4613      	mov	r3, r2
 8003550:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003552:	787b      	ldrb	r3, [r7, #1]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003558:	887a      	ldrh	r2, [r7, #2]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800355e:	e003      	b.n	8003568 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003560:	887b      	ldrh	r3, [r7, #2]
 8003562:	041a      	lsls	r2, r3, #16
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	611a      	str	r2, [r3, #16]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
	...

08003574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800357e:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800358a:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff f8c6 	bl	8002724 <HAL_GPIO_EXTI_Callback>
  }
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40010400 	.word	0x40010400

080035a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e272      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8087 	beq.w	80036d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035c4:	4b92      	ldr	r3, [pc, #584]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d00c      	beq.n	80035ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035d0:	4b8f      	ldr	r3, [pc, #572]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d112      	bne.n	8003602 <HAL_RCC_OscConfig+0x5e>
 80035dc:	4b8c      	ldr	r3, [pc, #560]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d10b      	bne.n	8003602 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ea:	4b89      	ldr	r3, [pc, #548]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d06c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x12c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d168      	bne.n	80036d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e24c      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x76>
 800360c:	4b80      	ldr	r3, [pc, #512]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a7f      	ldr	r2, [pc, #508]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	e02e      	b.n	8003678 <HAL_RCC_OscConfig+0xd4>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x98>
 8003622:	4b7b      	ldr	r3, [pc, #492]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7a      	ldr	r2, [pc, #488]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b78      	ldr	r3, [pc, #480]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a77      	ldr	r2, [pc, #476]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e01d      	b.n	8003678 <HAL_RCC_OscConfig+0xd4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0xbc>
 8003646:	4b72      	ldr	r3, [pc, #456]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a71      	ldr	r2, [pc, #452]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800364c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b6f      	ldr	r3, [pc, #444]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a6e      	ldr	r2, [pc, #440]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0xd4>
 8003660:	4b6b      	ldr	r3, [pc, #428]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a6a      	ldr	r2, [pc, #424]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b68      	ldr	r3, [pc, #416]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a67      	ldr	r2, [pc, #412]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003676:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d013      	beq.n	80036a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7ff fc88 	bl	8002f94 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7ff fc84 	bl	8002f94 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e200      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b5d      	ldr	r3, [pc, #372]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0xe4>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7ff fc74 	bl	8002f94 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b0:	f7ff fc70 	bl	8002f94 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	; 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e1ec      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c2:	4b53      	ldr	r3, [pc, #332]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x10c>
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d063      	beq.n	80037a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036de:	4b4c      	ldr	r3, [pc, #304]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036ea:	4b49      	ldr	r3, [pc, #292]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d11c      	bne.n	8003730 <HAL_RCC_OscConfig+0x18c>
 80036f6:	4b46      	ldr	r3, [pc, #280]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d116      	bne.n	8003730 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	4b43      	ldr	r3, [pc, #268]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_RCC_OscConfig+0x176>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e1c0      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371a:	4b3d      	ldr	r3, [pc, #244]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4939      	ldr	r1, [pc, #228]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372e:	e03a      	b.n	80037a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d020      	beq.n	800377a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003738:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7ff fc29 	bl	8002f94 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003746:	f7ff fc25 	bl	8002f94 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e1a1      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003758:	4b2d      	ldr	r3, [pc, #180]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003764:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4927      	ldr	r1, [pc, #156]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
 8003778:	e015      	b.n	80037a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7ff fc08 	bl	8002f94 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003788:	f7ff fc04 	bl	8002f94 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e180      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d03a      	beq.n	8003828 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d019      	beq.n	80037ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HAL_RCC_OscConfig+0x274>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7ff fbe8 	bl	8002f94 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c8:	f7ff fbe4 	bl	8002f94 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e160      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037e6:	2001      	movs	r0, #1
 80037e8:	f000 fad8 	bl	8003d9c <RCC_Delay>
 80037ec:	e01c      	b.n	8003828 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_RCC_OscConfig+0x274>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f4:	f7ff fbce 	bl	8002f94 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fa:	e00f      	b.n	800381c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fc:	f7ff fbca 	bl	8002f94 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d908      	bls.n	800381c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e146      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000
 8003814:	42420000 	.word	0x42420000
 8003818:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	4b92      	ldr	r3, [pc, #584]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e9      	bne.n	80037fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a6 	beq.w	8003982 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b8b      	ldr	r3, [pc, #556]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4a87      	ldr	r2, [pc, #540]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	61d3      	str	r3, [r2, #28]
 8003852:	4b85      	ldr	r3, [pc, #532]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	4b82      	ldr	r3, [pc, #520]	; (8003a6c <HAL_RCC_OscConfig+0x4c8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386e:	4b7f      	ldr	r3, [pc, #508]	; (8003a6c <HAL_RCC_OscConfig+0x4c8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a7e      	ldr	r2, [pc, #504]	; (8003a6c <HAL_RCC_OscConfig+0x4c8>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7ff fb8b 	bl	8002f94 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7ff fb87 	bl	8002f94 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b64      	cmp	r3, #100	; 0x64
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e103      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	4b75      	ldr	r3, [pc, #468]	; (8003a6c <HAL_RCC_OscConfig+0x4c8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x312>
 80038a8:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	4a6e      	ldr	r2, [pc, #440]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6213      	str	r3, [r2, #32]
 80038b4:	e02d      	b.n	8003912 <HAL_RCC_OscConfig+0x36e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x334>
 80038be:	4b6a      	ldr	r3, [pc, #424]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4a69      	ldr	r2, [pc, #420]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	6213      	str	r3, [r2, #32]
 80038ca:	4b67      	ldr	r3, [pc, #412]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	4a66      	ldr	r2, [pc, #408]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	f023 0304 	bic.w	r3, r3, #4
 80038d4:	6213      	str	r3, [r2, #32]
 80038d6:	e01c      	b.n	8003912 <HAL_RCC_OscConfig+0x36e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b05      	cmp	r3, #5
 80038de:	d10c      	bne.n	80038fa <HAL_RCC_OscConfig+0x356>
 80038e0:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	4a60      	ldr	r2, [pc, #384]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	6213      	str	r3, [r2, #32]
 80038ec:	4b5e      	ldr	r3, [pc, #376]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4a5d      	ldr	r2, [pc, #372]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6213      	str	r3, [r2, #32]
 80038f8:	e00b      	b.n	8003912 <HAL_RCC_OscConfig+0x36e>
 80038fa:	4b5b      	ldr	r3, [pc, #364]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4a5a      	ldr	r2, [pc, #360]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	6213      	str	r3, [r2, #32]
 8003906:	4b58      	ldr	r3, [pc, #352]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	4a57      	ldr	r2, [pc, #348]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	f023 0304 	bic.w	r3, r3, #4
 8003910:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d015      	beq.n	8003946 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391a:	f7ff fb3b 	bl	8002f94 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003920:	e00a      	b.n	8003938 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7ff fb37 	bl	8002f94 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0b1      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ee      	beq.n	8003922 <HAL_RCC_OscConfig+0x37e>
 8003944:	e014      	b.n	8003970 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7ff fb25 	bl	8002f94 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7ff fb21 	bl	8002f94 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e09b      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003964:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ee      	bne.n	800394e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d105      	bne.n	8003982 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003976:	4b3c      	ldr	r3, [pc, #240]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4a3b      	ldr	r2, [pc, #236]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8087 	beq.w	8003a9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b08      	cmp	r3, #8
 8003996:	d061      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d146      	bne.n	8003a2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a0:	4b33      	ldr	r3, [pc, #204]	; (8003a70 <HAL_RCC_OscConfig+0x4cc>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7ff faf5 	bl	8002f94 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ae:	f7ff faf1 	bl	8002f94 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e06d      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c0:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d108      	bne.n	80039e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4921      	ldr	r1, [pc, #132]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039e8:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a19      	ldr	r1, [r3, #32]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	430b      	orrs	r3, r1
 80039fa:	491b      	ldr	r1, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x4cc>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7ff fac5 	bl	8002f94 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7ff fac1 	bl	8002f94 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e03d      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x46a>
 8003a2c:	e035      	b.n	8003a9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_RCC_OscConfig+0x4cc>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7ff faae 	bl	8002f94 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7ff faaa 	bl	8002f94 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e026      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x498>
 8003a5a:	e01e      	b.n	8003a9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e019      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_OscConfig+0x500>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0d0      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003abc:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d910      	bls.n	8003aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 0207 	bic.w	r2, r3, #7
 8003ad2:	4965      	ldr	r1, [pc, #404]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b63      	ldr	r3, [pc, #396]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0b8      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b04:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4a58      	ldr	r2, [pc, #352]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b1c:	4b53      	ldr	r3, [pc, #332]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a52      	ldr	r2, [pc, #328]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b28:	4b50      	ldr	r3, [pc, #320]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	494d      	ldr	r1, [pc, #308]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d040      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d115      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e07f      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b66:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e073      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b76:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e06b      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b86:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4936      	ldr	r1, [pc, #216]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b98:	f7ff f9fc 	bl	8002f94 <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7ff f9f8 	bl	8002f94 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e053      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d210      	bcs.n	8003bf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 0207 	bic.w	r2, r3, #7
 8003bde:	4922      	ldr	r1, [pc, #136]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e032      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4916      	ldr	r1, [pc, #88]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	490e      	ldr	r1, [pc, #56]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c36:	f000 f821 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	490a      	ldr	r1, [pc, #40]	; (8003c70 <HAL_RCC_ClockConfig+0x1c8>)
 8003c48:	5ccb      	ldrb	r3, [r1, r3]
 8003c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <HAL_RCC_ClockConfig+0x1cc>)
 8003c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x1d0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff f95a 	bl	8002f10 <HAL_InitTick>

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40022000 	.word	0x40022000
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	08008348 	.word	0x08008348
 8003c74:	20000004 	.word	0x20000004
 8003c78:	20000008 	.word	0x20000008

08003c7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c7c:	b490      	push	{r4, r7}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xac>)
 8003c84:	1d3c      	adds	r4, r7, #4
 8003c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c8c:	f240 2301 	movw	r3, #513	; 0x201
 8003c90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d002      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x40>
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x46>
 8003cba:	e02b      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cbc:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cbe:	623b      	str	r3, [r7, #32]
      break;
 8003cc0:	e02b      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	0c9b      	lsrs	r3, r3, #18
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	3328      	adds	r3, #40	; 0x28
 8003ccc:	443b      	add	r3, r7
 8003cce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cd2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d012      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	0c5b      	lsrs	r3, r3, #17
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	3328      	adds	r3, #40	; 0x28
 8003cea:	443b      	add	r3, r7
 8003cec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003cf0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cf6:	fb03 f202 	mul.w	r2, r3, r2
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	e004      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	4a0b      	ldr	r2, [pc, #44]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	623b      	str	r3, [r7, #32]
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d16:	623b      	str	r3, [r7, #32]
      break;
 8003d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3728      	adds	r7, #40	; 0x28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc90      	pop	{r4, r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	08008338 	.word	0x08008338
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	007a1200 	.word	0x007a1200
 8003d34:	003d0900 	.word	0x003d0900

08003d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d3c:	4b02      	ldr	r3, [pc, #8]	; (8003d48 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	20000004 	.word	0x20000004

08003d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d50:	f7ff fff2 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4903      	ldr	r1, [pc, #12]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	08008358 	.word	0x08008358

08003d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d78:	f7ff ffde 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	0adb      	lsrs	r3, r3, #11
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4903      	ldr	r1, [pc, #12]	; (8003d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000
 8003d98:	08008358 	.word	0x08008358

08003d9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <RCC_Delay+0x34>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <RCC_Delay+0x38>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	0a5b      	lsrs	r3, r3, #9
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003db8:	bf00      	nop
  }
  while (Delay --);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	60fa      	str	r2, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f9      	bne.n	8003db8 <RCC_Delay+0x1c>
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	20000004 	.word	0x20000004
 8003dd4:	10624dd3 	.word	0x10624dd3

08003dd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e076      	b.n	8003ed8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d108      	bne.n	8003e04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfa:	d009      	beq.n	8003e10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	61da      	str	r2, [r3, #28]
 8003e02:	e005      	b.n	8003e10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fe fe02 	bl	8002a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	ea42 0103 	orr.w	r1, r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	0c1a      	lsrs	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f002 0204 	and.w	r2, r2, #4
 8003eb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efc:	d112      	bne.n	8003f24 <HAL_SPI_Receive+0x44>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10e      	bne.n	8003f24 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2204      	movs	r2, #4
 8003f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f8f1 	bl	8004102 <HAL_SPI_TransmitReceive>
 8003f20:	4603      	mov	r3, r0
 8003f22:	e0ea      	b.n	80040fa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_SPI_Receive+0x52>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e0e3      	b.n	80040fa <HAL_SPI_Receive+0x21a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f3a:	f7ff f82b 	bl	8002f94 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d002      	beq.n	8003f52 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f50:	e0ca      	b.n	80040e8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_SPI_Receive+0x7e>
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d102      	bne.n	8003f64 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f62:	e0c1      	b.n	80040e8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2204      	movs	r2, #4
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003faa:	d10f      	bne.n	8003fcc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d007      	beq.n	8003fea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d162      	bne.n	80040b8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ff2:	e02e      	b.n	8004052 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d115      	bne.n	800402e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f103 020c 	add.w	r2, r3, #12
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	7812      	ldrb	r2, [r2, #0]
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800402c:	e011      	b.n	8004052 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800402e:	f7fe ffb1 	bl	8002f94 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d803      	bhi.n	8004046 <HAL_SPI_Receive+0x166>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d102      	bne.n	800404c <HAL_SPI_Receive+0x16c>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d102      	bne.n	8004052 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004050:	e04a      	b.n	80040e8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1cb      	bne.n	8003ff4 <HAL_SPI_Receive+0x114>
 800405c:	e031      	b.n	80040c2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d113      	bne.n	8004094 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	b292      	uxth	r2, r2
 8004078:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004092:	e011      	b.n	80040b8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004094:	f7fe ff7e 	bl	8002f94 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d803      	bhi.n	80040ac <HAL_SPI_Receive+0x1cc>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	d102      	bne.n	80040b2 <HAL_SPI_Receive+0x1d2>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040b6:	e017      	b.n	80040e8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1cd      	bne.n	800405e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	6839      	ldr	r1, [r7, #0]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 fa46 	bl	8004558 <SPI_EndRxTransaction>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	75fb      	strb	r3, [r7, #23]
 80040e4:	e000      	b.n	80040e8 <HAL_SPI_Receive+0x208>
  }

error :
 80040e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b08c      	sub	sp, #48	; 0x30
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004110:	2301      	movs	r3, #1
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x26>
 8004124:	2302      	movs	r3, #2
 8004126:	e18a      	b.n	800443e <HAL_SPI_TransmitReceive+0x33c>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004130:	f7fe ff30 	bl	8002f94 <HAL_GetTick>
 8004134:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800413c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800414a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800414e:	2b01      	cmp	r3, #1
 8004150:	d00f      	beq.n	8004172 <HAL_SPI_TransmitReceive+0x70>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004158:	d107      	bne.n	800416a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <HAL_SPI_TransmitReceive+0x68>
 8004162:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004166:	2b04      	cmp	r3, #4
 8004168:	d003      	beq.n	8004172 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800416a:	2302      	movs	r3, #2
 800416c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004170:	e15b      	b.n	800442a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x82>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x82>
 800417e:	887b      	ldrh	r3, [r7, #2]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d103      	bne.n	800418c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800418a:	e14e      	b.n	800442a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b04      	cmp	r3, #4
 8004196:	d003      	beq.n	80041a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2205      	movs	r2, #5
 800419c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	887a      	ldrh	r2, [r7, #2]
 80041b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	887a      	ldrh	r2, [r7, #2]
 80041c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d007      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fc:	d178      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_SPI_TransmitReceive+0x10a>
 8004206:	8b7b      	ldrh	r3, [r7, #26]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d166      	bne.n	80042da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004230:	e053      	b.n	80042da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d11b      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x176>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x176>
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d113      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	881a      	ldrh	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d119      	bne.n	80042ba <HAL_SPI_TransmitReceive+0x1b8>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d014      	beq.n	80042ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	b292      	uxth	r2, r2
 800429c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	1c9a      	adds	r2, r3, #2
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042b6:	2301      	movs	r3, #1
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042ba:	f7fe fe6b 	bl	8002f94 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d807      	bhi.n	80042da <HAL_SPI_TransmitReceive+0x1d8>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d003      	beq.n	80042da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042d8:	e0a7      	b.n	800442a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1a6      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x130>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1a1      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x130>
 80042ee:	e07c      	b.n	80043ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_SPI_TransmitReceive+0x1fc>
 80042f8:	8b7b      	ldrh	r3, [r7, #26]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d16b      	bne.n	80043d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004324:	e057      	b.n	80043d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b02      	cmp	r3, #2
 8004332:	d11c      	bne.n	800436e <HAL_SPI_TransmitReceive+0x26c>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d017      	beq.n	800436e <HAL_SPI_TransmitReceive+0x26c>
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d114      	bne.n	800436e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b01      	cmp	r3, #1
 800437a:	d119      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x2ae>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d014      	beq.n	80043b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043ac:	2301      	movs	r3, #1
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043b0:	f7fe fdf0 	bl	8002f94 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043bc:	429a      	cmp	r2, r3
 80043be:	d803      	bhi.n	80043c8 <HAL_SPI_TransmitReceive+0x2c6>
 80043c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d102      	bne.n	80043ce <HAL_SPI_TransmitReceive+0x2cc>
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043d4:	e029      	b.n	800442a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1a2      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x224>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d19d      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f904 	bl	80045fc <SPI_EndRxTxTransaction>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004406:	e010      	b.n	800442a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	e000      	b.n	800442a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004428:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800443a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800443e:	4618      	mov	r0, r3
 8004440:	3730      	adds	r7, #48	; 0x30
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004458:	f7fe fd9c 	bl	8002f94 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	4413      	add	r3, r2
 8004466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004468:	f7fe fd94 	bl	8002f94 <HAL_GetTick>
 800446c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800446e:	4b39      	ldr	r3, [pc, #228]	; (8004554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	015b      	lsls	r3, r3, #5
 8004474:	0d1b      	lsrs	r3, r3, #20
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	fb02 f303 	mul.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447e:	e054      	b.n	800452a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d050      	beq.n	800452a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004488:	f7fe fd84 	bl	8002f94 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	429a      	cmp	r2, r3
 8004496:	d902      	bls.n	800449e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d13d      	bne.n	800451a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b6:	d111      	bne.n	80044dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c0:	d004      	beq.n	80044cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ca:	d107      	bne.n	80044dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e4:	d10f      	bne.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e017      	b.n	800454a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3b01      	subs	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4013      	ands	r3, r2
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	bf0c      	ite	eq
 800453a:	2301      	moveq	r3, #1
 800453c:	2300      	movne	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	429a      	cmp	r2, r3
 8004546:	d19b      	bne.n	8004480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000004 	.word	0x20000004

08004558 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800456c:	d111      	bne.n	8004592 <SPI_EndRxTransaction+0x3a>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004576:	d004      	beq.n	8004582 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	d107      	bne.n	8004592 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004590:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800459a:	d117      	bne.n	80045cc <SPI_EndRxTransaction+0x74>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a4:	d112      	bne.n	80045cc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2200      	movs	r2, #0
 80045ae:	2101      	movs	r1, #1
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7ff ff49 	bl	8004448 <SPI_WaitFlagStateUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01a      	beq.n	80045f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e013      	b.n	80045f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2200      	movs	r2, #0
 80045d4:	2180      	movs	r1, #128	; 0x80
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff ff36 	bl	8004448 <SPI_WaitFlagStateUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d007      	beq.n	80045f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e000      	b.n	80045f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2200      	movs	r2, #0
 8004610:	2180      	movs	r1, #128	; 0x80
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff ff18 	bl	8004448 <SPI_WaitFlagStateUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e000      	b.n	8004630 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e041      	b.n	80046ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f839 	bl	80046d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f000 faa6 	bl	8004bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d001      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e03a      	b.n	8004776 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_TIM_Base_Start_IT+0x98>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00e      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x58>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472a:	d009      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x58>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <HAL_TIM_Base_Start_IT+0x9c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x58>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a13      	ldr	r2, [pc, #76]	; (8004788 <HAL_TIM_Base_Start_IT+0xa0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d111      	bne.n	8004764 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b06      	cmp	r3, #6
 8004750:	d010      	beq.n	8004774 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004762:	e007      	b.n	8004774 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800

0800478c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a1a      	ldr	r2, [r3, #32]
 80047aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10f      	bne.n	80047d4 <HAL_TIM_Base_Stop_IT+0x48>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6a1a      	ldr	r2, [r3, #32]
 80047ba:	f240 4344 	movw	r3, #1092	; 0x444
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d107      	bne.n	80047d4 <HAL_TIM_Base_Stop_IT+0x48>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d122      	bne.n	8004844 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b02      	cmp	r3, #2
 800480a:	d11b      	bne.n	8004844 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0202 	mvn.w	r2, #2
 8004814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f9b1 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 8004830:	e005      	b.n	800483e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f9a4 	bl	8004b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f9b3 	bl	8004ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b04      	cmp	r3, #4
 8004850:	d122      	bne.n	8004898 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d11b      	bne.n	8004898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0204 	mvn.w	r2, #4
 8004868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f987 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 8004884:	e005      	b.n	8004892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f97a 	bl	8004b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f989 	bl	8004ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d122      	bne.n	80048ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d11b      	bne.n	80048ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0208 	mvn.w	r2, #8
 80048bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2204      	movs	r2, #4
 80048c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f95d 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f950 	bl	8004b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f95f 	bl	8004ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d122      	bne.n	8004940 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b10      	cmp	r3, #16
 8004906:	d11b      	bne.n	8004940 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0210 	mvn.w	r2, #16
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2208      	movs	r2, #8
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f933 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f926 	bl	8004b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f935 	bl	8004ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d10e      	bne.n	800496c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b01      	cmp	r3, #1
 800495a:	d107      	bne.n	800496c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0201 	mvn.w	r2, #1
 8004964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fd fef8 	bl	800275c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d10e      	bne.n	8004998 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d107      	bne.n	8004998 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fa77 	bl	8004e86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b40      	cmp	r3, #64	; 0x40
 80049a4:	d10e      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b0:	2b40      	cmp	r3, #64	; 0x40
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8f9 	bl	8004bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d10e      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d107      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0220 	mvn.w	r2, #32
 80049e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa42 	bl	8004e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIM_ConfigClockSource+0x18>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e0b3      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x180>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a48:	d03e      	beq.n	8004ac8 <HAL_TIM_ConfigClockSource+0xd0>
 8004a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4e:	f200 8087 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	f000 8085 	beq.w	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5e:	d87f      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a60:	2b70      	cmp	r3, #112	; 0x70
 8004a62:	d01a      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0xa2>
 8004a64:	2b70      	cmp	r3, #112	; 0x70
 8004a66:	d87b      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a68:	2b60      	cmp	r3, #96	; 0x60
 8004a6a:	d050      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x116>
 8004a6c:	2b60      	cmp	r3, #96	; 0x60
 8004a6e:	d877      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a70:	2b50      	cmp	r3, #80	; 0x50
 8004a72:	d03c      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0xf6>
 8004a74:	2b50      	cmp	r3, #80	; 0x50
 8004a76:	d873      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d058      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x136>
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d86f      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a80:	2b30      	cmp	r3, #48	; 0x30
 8004a82:	d064      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x156>
 8004a84:	2b30      	cmp	r3, #48	; 0x30
 8004a86:	d86b      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d060      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x156>
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d867      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d05c      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x156>
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d05a      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a98:	e062      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6899      	ldr	r1, [r3, #8]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f000 f966 	bl	8004d7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004abc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	609a      	str	r2, [r3, #8]
      break;
 8004ac6:	e04e      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	6899      	ldr	r1, [r3, #8]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f000 f94f 	bl	8004d7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aea:	609a      	str	r2, [r3, #8]
      break;
 8004aec:	e03b      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f000 f8c6 	bl	8004c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2150      	movs	r1, #80	; 0x50
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f91d 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e02b      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6859      	ldr	r1, [r3, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f000 f8e4 	bl	8004ce8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2160      	movs	r1, #96	; 0x60
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f90d 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004b2c:	e01b      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f000 f8a6 	bl	8004c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f8fd 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004b4c:	e00b      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f000 f8f4 	bl	8004d46 <TIM_ITRx_SetConfig>
        break;
 8004b5e:	e002      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b60:	bf00      	nop
 8004b62:	e000      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a29      	ldr	r2, [pc, #164]	; (8004c80 <TIM_Base_SetConfig+0xb8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00b      	beq.n	8004bf8 <TIM_Base_SetConfig+0x30>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be6:	d007      	beq.n	8004bf8 <TIM_Base_SetConfig+0x30>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a26      	ldr	r2, [pc, #152]	; (8004c84 <TIM_Base_SetConfig+0xbc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d003      	beq.n	8004bf8 <TIM_Base_SetConfig+0x30>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a25      	ldr	r2, [pc, #148]	; (8004c88 <TIM_Base_SetConfig+0xc0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d108      	bne.n	8004c0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <TIM_Base_SetConfig+0xb8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00b      	beq.n	8004c2a <TIM_Base_SetConfig+0x62>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c18:	d007      	beq.n	8004c2a <TIM_Base_SetConfig+0x62>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <TIM_Base_SetConfig+0xbc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d003      	beq.n	8004c2a <TIM_Base_SetConfig+0x62>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <TIM_Base_SetConfig+0xc0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d108      	bne.n	8004c3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a07      	ldr	r2, [pc, #28]	; (8004c80 <TIM_Base_SetConfig+0xb8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d103      	bne.n	8004c70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	615a      	str	r2, [r3, #20]
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800

08004c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 030a 	bic.w	r3, r3, #10
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f023 0210 	bic.w	r2, r3, #16
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	031b      	lsls	r3, r3, #12
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr

08004d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f043 0307 	orr.w	r3, r3, #7
 8004d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	609a      	str	r2, [r3, #8]
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr

08004d7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b087      	sub	sp, #28
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	021a      	lsls	r2, r3, #8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	609a      	str	r2, [r3, #8]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e046      	b.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00e      	beq.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d009      	beq.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a12      	ldr	r2, [pc, #72]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d004      	beq.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a10      	ldr	r2, [pc, #64]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d10c      	bne.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800

08004e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr

08004e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e03f      	b.n	8004f2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fd ff9e 	bl	8002e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	; 0x24
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f905 	bl	80050ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b08a      	sub	sp, #40	; 0x28
 8004f36:	af02      	add	r7, sp, #8
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d17c      	bne.n	800504c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_UART_Transmit+0x2c>
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e075      	b.n	800504e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Transmit+0x3e>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e06e      	b.n	800504e <HAL_UART_Transmit+0x11c>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2221      	movs	r2, #33	; 0x21
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f86:	f7fe f805 	bl	8002f94 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	88fa      	ldrh	r2, [r7, #6]
 8004f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	88fa      	ldrh	r2, [r7, #6]
 8004f96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa0:	d108      	bne.n	8004fb4 <HAL_UART_Transmit+0x82>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e003      	b.n	8004fbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fc4:	e02a      	b.n	800501c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f840 	bl	8005056 <UART_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e036      	b.n	800504e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	e007      	b.n	800500e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3301      	adds	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1cf      	bne.n	8004fc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2200      	movs	r2, #0
 800502e:	2140      	movs	r1, #64	; 0x40
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f810 	bl	8005056 <UART_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e006      	b.n	800504e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005066:	e02c      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d028      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0x30>
 8005076:	f7fd ff8d 	bl	8002f94 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	429a      	cmp	r2, r3
 8005084:	d21d      	bcs.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005094:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0201 	bic.w	r2, r2, #1
 80050a4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e00f      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d0c3      	beq.n	8005068 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005126:	f023 030c 	bic.w	r3, r3, #12
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	430b      	orrs	r3, r1
 8005132:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <UART_SetConfig+0x114>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d103      	bne.n	800515c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005154:	f7fe fe0e 	bl	8003d74 <HAL_RCC_GetPCLK2Freq>
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	e002      	b.n	8005162 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800515c:	f7fe fdf6 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8005160:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009a      	lsls	r2, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	4a22      	ldr	r2, [pc, #136]	; (8005204 <UART_SetConfig+0x118>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	0119      	lsls	r1, r3, #4
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009a      	lsls	r2, r3, #2
 800518c:	441a      	add	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	fbb2 f2f3 	udiv	r2, r2, r3
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <UART_SetConfig+0x118>)
 800519a:	fba3 0302 	umull	r0, r3, r3, r2
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	2064      	movs	r0, #100	; 0x64
 80051a2:	fb00 f303 	mul.w	r3, r0, r3
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	3332      	adds	r3, #50	; 0x32
 80051ac:	4a15      	ldr	r2, [pc, #84]	; (8005204 <UART_SetConfig+0x118>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b8:	4419      	add	r1, r3
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009a      	lsls	r2, r3, #2
 80051c4:	441a      	add	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <UART_SetConfig+0x118>)
 80051d2:	fba3 0302 	umull	r0, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	2064      	movs	r0, #100	; 0x64
 80051da:	fb00 f303 	mul.w	r3, r0, r3
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	3332      	adds	r3, #50	; 0x32
 80051e4:	4a07      	ldr	r2, [pc, #28]	; (8005204 <UART_SetConfig+0x118>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	f003 020f 	and.w	r2, r3, #15
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	440a      	add	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40013800 	.word	0x40013800
 8005204:	51eb851f 	.word	0x51eb851f

08005208 <__errno>:
 8005208:	4b01      	ldr	r3, [pc, #4]	; (8005210 <__errno+0x8>)
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20000010 	.word	0x20000010

08005214 <__libc_init_array>:
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	2600      	movs	r6, #0
 8005218:	4d0c      	ldr	r5, [pc, #48]	; (800524c <__libc_init_array+0x38>)
 800521a:	4c0d      	ldr	r4, [pc, #52]	; (8005250 <__libc_init_array+0x3c>)
 800521c:	1b64      	subs	r4, r4, r5
 800521e:	10a4      	asrs	r4, r4, #2
 8005220:	42a6      	cmp	r6, r4
 8005222:	d109      	bne.n	8005238 <__libc_init_array+0x24>
 8005224:	f002 ff88 	bl	8008138 <_init>
 8005228:	2600      	movs	r6, #0
 800522a:	4d0a      	ldr	r5, [pc, #40]	; (8005254 <__libc_init_array+0x40>)
 800522c:	4c0a      	ldr	r4, [pc, #40]	; (8005258 <__libc_init_array+0x44>)
 800522e:	1b64      	subs	r4, r4, r5
 8005230:	10a4      	asrs	r4, r4, #2
 8005232:	42a6      	cmp	r6, r4
 8005234:	d105      	bne.n	8005242 <__libc_init_array+0x2e>
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	f855 3b04 	ldr.w	r3, [r5], #4
 800523c:	4798      	blx	r3
 800523e:	3601      	adds	r6, #1
 8005240:	e7ee      	b.n	8005220 <__libc_init_array+0xc>
 8005242:	f855 3b04 	ldr.w	r3, [r5], #4
 8005246:	4798      	blx	r3
 8005248:	3601      	adds	r6, #1
 800524a:	e7f2      	b.n	8005232 <__libc_init_array+0x1e>
 800524c:	0800873c 	.word	0x0800873c
 8005250:	0800873c 	.word	0x0800873c
 8005254:	0800873c 	.word	0x0800873c
 8005258:	08008740 	.word	0x08008740

0800525c <memset>:
 800525c:	4603      	mov	r3, r0
 800525e:	4402      	add	r2, r0
 8005260:	4293      	cmp	r3, r2
 8005262:	d100      	bne.n	8005266 <memset+0xa>
 8005264:	4770      	bx	lr
 8005266:	f803 1b01 	strb.w	r1, [r3], #1
 800526a:	e7f9      	b.n	8005260 <memset+0x4>

0800526c <__cvt>:
 800526c:	2b00      	cmp	r3, #0
 800526e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005272:	461f      	mov	r7, r3
 8005274:	bfbb      	ittet	lt
 8005276:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800527a:	461f      	movlt	r7, r3
 800527c:	2300      	movge	r3, #0
 800527e:	232d      	movlt	r3, #45	; 0x2d
 8005280:	b088      	sub	sp, #32
 8005282:	4614      	mov	r4, r2
 8005284:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005286:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005288:	7013      	strb	r3, [r2, #0]
 800528a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800528c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005290:	f023 0820 	bic.w	r8, r3, #32
 8005294:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005298:	d005      	beq.n	80052a6 <__cvt+0x3a>
 800529a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800529e:	d100      	bne.n	80052a2 <__cvt+0x36>
 80052a0:	3501      	adds	r5, #1
 80052a2:	2302      	movs	r3, #2
 80052a4:	e000      	b.n	80052a8 <__cvt+0x3c>
 80052a6:	2303      	movs	r3, #3
 80052a8:	aa07      	add	r2, sp, #28
 80052aa:	9204      	str	r2, [sp, #16]
 80052ac:	aa06      	add	r2, sp, #24
 80052ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80052b2:	e9cd 3500 	strd	r3, r5, [sp]
 80052b6:	4622      	mov	r2, r4
 80052b8:	463b      	mov	r3, r7
 80052ba:	f000 fe31 	bl	8005f20 <_dtoa_r>
 80052be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052c2:	4606      	mov	r6, r0
 80052c4:	d102      	bne.n	80052cc <__cvt+0x60>
 80052c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052c8:	07db      	lsls	r3, r3, #31
 80052ca:	d522      	bpl.n	8005312 <__cvt+0xa6>
 80052cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052d0:	eb06 0905 	add.w	r9, r6, r5
 80052d4:	d110      	bne.n	80052f8 <__cvt+0x8c>
 80052d6:	7833      	ldrb	r3, [r6, #0]
 80052d8:	2b30      	cmp	r3, #48	; 0x30
 80052da:	d10a      	bne.n	80052f2 <__cvt+0x86>
 80052dc:	2200      	movs	r2, #0
 80052de:	2300      	movs	r3, #0
 80052e0:	4620      	mov	r0, r4
 80052e2:	4639      	mov	r1, r7
 80052e4:	f7fb fc14 	bl	8000b10 <__aeabi_dcmpeq>
 80052e8:	b918      	cbnz	r0, 80052f2 <__cvt+0x86>
 80052ea:	f1c5 0501 	rsb	r5, r5, #1
 80052ee:	f8ca 5000 	str.w	r5, [sl]
 80052f2:	f8da 3000 	ldr.w	r3, [sl]
 80052f6:	4499      	add	r9, r3
 80052f8:	2200      	movs	r2, #0
 80052fa:	2300      	movs	r3, #0
 80052fc:	4620      	mov	r0, r4
 80052fe:	4639      	mov	r1, r7
 8005300:	f7fb fc06 	bl	8000b10 <__aeabi_dcmpeq>
 8005304:	b108      	cbz	r0, 800530a <__cvt+0x9e>
 8005306:	f8cd 901c 	str.w	r9, [sp, #28]
 800530a:	2230      	movs	r2, #48	; 0x30
 800530c:	9b07      	ldr	r3, [sp, #28]
 800530e:	454b      	cmp	r3, r9
 8005310:	d307      	bcc.n	8005322 <__cvt+0xb6>
 8005312:	4630      	mov	r0, r6
 8005314:	9b07      	ldr	r3, [sp, #28]
 8005316:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005318:	1b9b      	subs	r3, r3, r6
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	b008      	add	sp, #32
 800531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005322:	1c59      	adds	r1, r3, #1
 8005324:	9107      	str	r1, [sp, #28]
 8005326:	701a      	strb	r2, [r3, #0]
 8005328:	e7f0      	b.n	800530c <__cvt+0xa0>

0800532a <__exponent>:
 800532a:	4603      	mov	r3, r0
 800532c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800532e:	2900      	cmp	r1, #0
 8005330:	f803 2b02 	strb.w	r2, [r3], #2
 8005334:	bfb6      	itet	lt
 8005336:	222d      	movlt	r2, #45	; 0x2d
 8005338:	222b      	movge	r2, #43	; 0x2b
 800533a:	4249      	neglt	r1, r1
 800533c:	2909      	cmp	r1, #9
 800533e:	7042      	strb	r2, [r0, #1]
 8005340:	dd2b      	ble.n	800539a <__exponent+0x70>
 8005342:	f10d 0407 	add.w	r4, sp, #7
 8005346:	46a4      	mov	ip, r4
 8005348:	270a      	movs	r7, #10
 800534a:	fb91 f6f7 	sdiv	r6, r1, r7
 800534e:	460a      	mov	r2, r1
 8005350:	46a6      	mov	lr, r4
 8005352:	fb07 1516 	mls	r5, r7, r6, r1
 8005356:	2a63      	cmp	r2, #99	; 0x63
 8005358:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800535c:	4631      	mov	r1, r6
 800535e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005362:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005366:	dcf0      	bgt.n	800534a <__exponent+0x20>
 8005368:	3130      	adds	r1, #48	; 0x30
 800536a:	f1ae 0502 	sub.w	r5, lr, #2
 800536e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005372:	4629      	mov	r1, r5
 8005374:	1c44      	adds	r4, r0, #1
 8005376:	4561      	cmp	r1, ip
 8005378:	d30a      	bcc.n	8005390 <__exponent+0x66>
 800537a:	f10d 0209 	add.w	r2, sp, #9
 800537e:	eba2 020e 	sub.w	r2, r2, lr
 8005382:	4565      	cmp	r5, ip
 8005384:	bf88      	it	hi
 8005386:	2200      	movhi	r2, #0
 8005388:	4413      	add	r3, r2
 800538a:	1a18      	subs	r0, r3, r0
 800538c:	b003      	add	sp, #12
 800538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005390:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005394:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005398:	e7ed      	b.n	8005376 <__exponent+0x4c>
 800539a:	2330      	movs	r3, #48	; 0x30
 800539c:	3130      	adds	r1, #48	; 0x30
 800539e:	7083      	strb	r3, [r0, #2]
 80053a0:	70c1      	strb	r1, [r0, #3]
 80053a2:	1d03      	adds	r3, r0, #4
 80053a4:	e7f1      	b.n	800538a <__exponent+0x60>
	...

080053a8 <_printf_float>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	b091      	sub	sp, #68	; 0x44
 80053ae:	460c      	mov	r4, r1
 80053b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80053b4:	4616      	mov	r6, r2
 80053b6:	461f      	mov	r7, r3
 80053b8:	4605      	mov	r5, r0
 80053ba:	f001 fd53 	bl	8006e64 <_localeconv_r>
 80053be:	6803      	ldr	r3, [r0, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	9309      	str	r3, [sp, #36]	; 0x24
 80053c4:	f7fa fec4 	bl	8000150 <strlen>
 80053c8:	2300      	movs	r3, #0
 80053ca:	930e      	str	r3, [sp, #56]	; 0x38
 80053cc:	f8d8 3000 	ldr.w	r3, [r8]
 80053d0:	900a      	str	r0, [sp, #40]	; 0x28
 80053d2:	3307      	adds	r3, #7
 80053d4:	f023 0307 	bic.w	r3, r3, #7
 80053d8:	f103 0208 	add.w	r2, r3, #8
 80053dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80053e0:	f8d4 b000 	ldr.w	fp, [r4]
 80053e4:	f8c8 2000 	str.w	r2, [r8]
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80053f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80053f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053fa:	f04f 32ff 	mov.w	r2, #4294967295
 80053fe:	4640      	mov	r0, r8
 8005400:	4b9c      	ldr	r3, [pc, #624]	; (8005674 <_printf_float+0x2cc>)
 8005402:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005404:	f7fb fbb6 	bl	8000b74 <__aeabi_dcmpun>
 8005408:	bb70      	cbnz	r0, 8005468 <_printf_float+0xc0>
 800540a:	f04f 32ff 	mov.w	r2, #4294967295
 800540e:	4640      	mov	r0, r8
 8005410:	4b98      	ldr	r3, [pc, #608]	; (8005674 <_printf_float+0x2cc>)
 8005412:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005414:	f7fb fb90 	bl	8000b38 <__aeabi_dcmple>
 8005418:	bb30      	cbnz	r0, 8005468 <_printf_float+0xc0>
 800541a:	2200      	movs	r2, #0
 800541c:	2300      	movs	r3, #0
 800541e:	4640      	mov	r0, r8
 8005420:	4651      	mov	r1, sl
 8005422:	f7fb fb7f 	bl	8000b24 <__aeabi_dcmplt>
 8005426:	b110      	cbz	r0, 800542e <_printf_float+0x86>
 8005428:	232d      	movs	r3, #45	; 0x2d
 800542a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800542e:	4b92      	ldr	r3, [pc, #584]	; (8005678 <_printf_float+0x2d0>)
 8005430:	4892      	ldr	r0, [pc, #584]	; (800567c <_printf_float+0x2d4>)
 8005432:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005436:	bf94      	ite	ls
 8005438:	4698      	movls	r8, r3
 800543a:	4680      	movhi	r8, r0
 800543c:	2303      	movs	r3, #3
 800543e:	f04f 0a00 	mov.w	sl, #0
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	f02b 0304 	bic.w	r3, fp, #4
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	4633      	mov	r3, r6
 800544c:	4621      	mov	r1, r4
 800544e:	4628      	mov	r0, r5
 8005450:	9700      	str	r7, [sp, #0]
 8005452:	aa0f      	add	r2, sp, #60	; 0x3c
 8005454:	f000 f9d4 	bl	8005800 <_printf_common>
 8005458:	3001      	adds	r0, #1
 800545a:	f040 8090 	bne.w	800557e <_printf_float+0x1d6>
 800545e:	f04f 30ff 	mov.w	r0, #4294967295
 8005462:	b011      	add	sp, #68	; 0x44
 8005464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005468:	4642      	mov	r2, r8
 800546a:	4653      	mov	r3, sl
 800546c:	4640      	mov	r0, r8
 800546e:	4651      	mov	r1, sl
 8005470:	f7fb fb80 	bl	8000b74 <__aeabi_dcmpun>
 8005474:	b148      	cbz	r0, 800548a <_printf_float+0xe2>
 8005476:	f1ba 0f00 	cmp.w	sl, #0
 800547a:	bfb8      	it	lt
 800547c:	232d      	movlt	r3, #45	; 0x2d
 800547e:	4880      	ldr	r0, [pc, #512]	; (8005680 <_printf_float+0x2d8>)
 8005480:	bfb8      	it	lt
 8005482:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005486:	4b7f      	ldr	r3, [pc, #508]	; (8005684 <_printf_float+0x2dc>)
 8005488:	e7d3      	b.n	8005432 <_printf_float+0x8a>
 800548a:	6863      	ldr	r3, [r4, #4]
 800548c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	d142      	bne.n	800551a <_printf_float+0x172>
 8005494:	2306      	movs	r3, #6
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	9206      	str	r2, [sp, #24]
 800549c:	aa0e      	add	r2, sp, #56	; 0x38
 800549e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80054a2:	aa0d      	add	r2, sp, #52	; 0x34
 80054a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80054a8:	9203      	str	r2, [sp, #12]
 80054aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80054ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	6863      	ldr	r3, [r4, #4]
 80054b6:	4642      	mov	r2, r8
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	4628      	mov	r0, r5
 80054bc:	4653      	mov	r3, sl
 80054be:	910b      	str	r1, [sp, #44]	; 0x2c
 80054c0:	f7ff fed4 	bl	800526c <__cvt>
 80054c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054c6:	4680      	mov	r8, r0
 80054c8:	2947      	cmp	r1, #71	; 0x47
 80054ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054cc:	d108      	bne.n	80054e0 <_printf_float+0x138>
 80054ce:	1cc8      	adds	r0, r1, #3
 80054d0:	db02      	blt.n	80054d8 <_printf_float+0x130>
 80054d2:	6863      	ldr	r3, [r4, #4]
 80054d4:	4299      	cmp	r1, r3
 80054d6:	dd40      	ble.n	800555a <_printf_float+0x1b2>
 80054d8:	f1a9 0902 	sub.w	r9, r9, #2
 80054dc:	fa5f f989 	uxtb.w	r9, r9
 80054e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054e4:	d81f      	bhi.n	8005526 <_printf_float+0x17e>
 80054e6:	464a      	mov	r2, r9
 80054e8:	3901      	subs	r1, #1
 80054ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054ee:	910d      	str	r1, [sp, #52]	; 0x34
 80054f0:	f7ff ff1b 	bl	800532a <__exponent>
 80054f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054f6:	4682      	mov	sl, r0
 80054f8:	1813      	adds	r3, r2, r0
 80054fa:	2a01      	cmp	r2, #1
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	dc02      	bgt.n	8005506 <_printf_float+0x15e>
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	07d2      	lsls	r2, r2, #31
 8005504:	d501      	bpl.n	800550a <_printf_float+0x162>
 8005506:	3301      	adds	r3, #1
 8005508:	6123      	str	r3, [r4, #16]
 800550a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800550e:	2b00      	cmp	r3, #0
 8005510:	d09b      	beq.n	800544a <_printf_float+0xa2>
 8005512:	232d      	movs	r3, #45	; 0x2d
 8005514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005518:	e797      	b.n	800544a <_printf_float+0xa2>
 800551a:	2947      	cmp	r1, #71	; 0x47
 800551c:	d1bc      	bne.n	8005498 <_printf_float+0xf0>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1ba      	bne.n	8005498 <_printf_float+0xf0>
 8005522:	2301      	movs	r3, #1
 8005524:	e7b7      	b.n	8005496 <_printf_float+0xee>
 8005526:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800552a:	d118      	bne.n	800555e <_printf_float+0x1b6>
 800552c:	2900      	cmp	r1, #0
 800552e:	6863      	ldr	r3, [r4, #4]
 8005530:	dd0b      	ble.n	800554a <_printf_float+0x1a2>
 8005532:	6121      	str	r1, [r4, #16]
 8005534:	b913      	cbnz	r3, 800553c <_printf_float+0x194>
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	07d0      	lsls	r0, r2, #31
 800553a:	d502      	bpl.n	8005542 <_printf_float+0x19a>
 800553c:	3301      	adds	r3, #1
 800553e:	440b      	add	r3, r1
 8005540:	6123      	str	r3, [r4, #16]
 8005542:	f04f 0a00 	mov.w	sl, #0
 8005546:	65a1      	str	r1, [r4, #88]	; 0x58
 8005548:	e7df      	b.n	800550a <_printf_float+0x162>
 800554a:	b913      	cbnz	r3, 8005552 <_printf_float+0x1aa>
 800554c:	6822      	ldr	r2, [r4, #0]
 800554e:	07d2      	lsls	r2, r2, #31
 8005550:	d501      	bpl.n	8005556 <_printf_float+0x1ae>
 8005552:	3302      	adds	r3, #2
 8005554:	e7f4      	b.n	8005540 <_printf_float+0x198>
 8005556:	2301      	movs	r3, #1
 8005558:	e7f2      	b.n	8005540 <_printf_float+0x198>
 800555a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800555e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005560:	4299      	cmp	r1, r3
 8005562:	db05      	blt.n	8005570 <_printf_float+0x1c8>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	6121      	str	r1, [r4, #16]
 8005568:	07d8      	lsls	r0, r3, #31
 800556a:	d5ea      	bpl.n	8005542 <_printf_float+0x19a>
 800556c:	1c4b      	adds	r3, r1, #1
 800556e:	e7e7      	b.n	8005540 <_printf_float+0x198>
 8005570:	2900      	cmp	r1, #0
 8005572:	bfcc      	ite	gt
 8005574:	2201      	movgt	r2, #1
 8005576:	f1c1 0202 	rsble	r2, r1, #2
 800557a:	4413      	add	r3, r2
 800557c:	e7e0      	b.n	8005540 <_printf_float+0x198>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	055a      	lsls	r2, r3, #21
 8005582:	d407      	bmi.n	8005594 <_printf_float+0x1ec>
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	4642      	mov	r2, r8
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	d12b      	bne.n	80055ea <_printf_float+0x242>
 8005592:	e764      	b.n	800545e <_printf_float+0xb6>
 8005594:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005598:	f240 80dd 	bls.w	8005756 <_printf_float+0x3ae>
 800559c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055a0:	2200      	movs	r2, #0
 80055a2:	2300      	movs	r3, #0
 80055a4:	f7fb fab4 	bl	8000b10 <__aeabi_dcmpeq>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d033      	beq.n	8005614 <_printf_float+0x26c>
 80055ac:	2301      	movs	r3, #1
 80055ae:	4631      	mov	r1, r6
 80055b0:	4628      	mov	r0, r5
 80055b2:	4a35      	ldr	r2, [pc, #212]	; (8005688 <_printf_float+0x2e0>)
 80055b4:	47b8      	blx	r7
 80055b6:	3001      	adds	r0, #1
 80055b8:	f43f af51 	beq.w	800545e <_printf_float+0xb6>
 80055bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055c0:	429a      	cmp	r2, r3
 80055c2:	db02      	blt.n	80055ca <_printf_float+0x222>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	07d8      	lsls	r0, r3, #31
 80055c8:	d50f      	bpl.n	80055ea <_printf_float+0x242>
 80055ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055ce:	4631      	mov	r1, r6
 80055d0:	4628      	mov	r0, r5
 80055d2:	47b8      	blx	r7
 80055d4:	3001      	adds	r0, #1
 80055d6:	f43f af42 	beq.w	800545e <_printf_float+0xb6>
 80055da:	f04f 0800 	mov.w	r8, #0
 80055de:	f104 091a 	add.w	r9, r4, #26
 80055e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055e4:	3b01      	subs	r3, #1
 80055e6:	4543      	cmp	r3, r8
 80055e8:	dc09      	bgt.n	80055fe <_printf_float+0x256>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	079b      	lsls	r3, r3, #30
 80055ee:	f100 8102 	bmi.w	80057f6 <_printf_float+0x44e>
 80055f2:	68e0      	ldr	r0, [r4, #12]
 80055f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055f6:	4298      	cmp	r0, r3
 80055f8:	bfb8      	it	lt
 80055fa:	4618      	movlt	r0, r3
 80055fc:	e731      	b.n	8005462 <_printf_float+0xba>
 80055fe:	2301      	movs	r3, #1
 8005600:	464a      	mov	r2, r9
 8005602:	4631      	mov	r1, r6
 8005604:	4628      	mov	r0, r5
 8005606:	47b8      	blx	r7
 8005608:	3001      	adds	r0, #1
 800560a:	f43f af28 	beq.w	800545e <_printf_float+0xb6>
 800560e:	f108 0801 	add.w	r8, r8, #1
 8005612:	e7e6      	b.n	80055e2 <_printf_float+0x23a>
 8005614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005616:	2b00      	cmp	r3, #0
 8005618:	dc38      	bgt.n	800568c <_printf_float+0x2e4>
 800561a:	2301      	movs	r3, #1
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	4a19      	ldr	r2, [pc, #100]	; (8005688 <_printf_float+0x2e0>)
 8005622:	47b8      	blx	r7
 8005624:	3001      	adds	r0, #1
 8005626:	f43f af1a 	beq.w	800545e <_printf_float+0xb6>
 800562a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800562e:	4313      	orrs	r3, r2
 8005630:	d102      	bne.n	8005638 <_printf_float+0x290>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	07d9      	lsls	r1, r3, #31
 8005636:	d5d8      	bpl.n	80055ea <_printf_float+0x242>
 8005638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f af0b 	beq.w	800545e <_printf_float+0xb6>
 8005648:	f04f 0900 	mov.w	r9, #0
 800564c:	f104 0a1a 	add.w	sl, r4, #26
 8005650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005652:	425b      	negs	r3, r3
 8005654:	454b      	cmp	r3, r9
 8005656:	dc01      	bgt.n	800565c <_printf_float+0x2b4>
 8005658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800565a:	e794      	b.n	8005586 <_printf_float+0x1de>
 800565c:	2301      	movs	r3, #1
 800565e:	4652      	mov	r2, sl
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f aef9 	beq.w	800545e <_printf_float+0xb6>
 800566c:	f109 0901 	add.w	r9, r9, #1
 8005670:	e7ee      	b.n	8005650 <_printf_float+0x2a8>
 8005672:	bf00      	nop
 8005674:	7fefffff 	.word	0x7fefffff
 8005678:	08008364 	.word	0x08008364
 800567c:	08008368 	.word	0x08008368
 8005680:	08008370 	.word	0x08008370
 8005684:	0800836c 	.word	0x0800836c
 8005688:	08008374 	.word	0x08008374
 800568c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800568e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005690:	429a      	cmp	r2, r3
 8005692:	bfa8      	it	ge
 8005694:	461a      	movge	r2, r3
 8005696:	2a00      	cmp	r2, #0
 8005698:	4691      	mov	r9, r2
 800569a:	dc37      	bgt.n	800570c <_printf_float+0x364>
 800569c:	f04f 0b00 	mov.w	fp, #0
 80056a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056a4:	f104 021a 	add.w	r2, r4, #26
 80056a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80056ac:	ebaa 0309 	sub.w	r3, sl, r9
 80056b0:	455b      	cmp	r3, fp
 80056b2:	dc33      	bgt.n	800571c <_printf_float+0x374>
 80056b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056b8:	429a      	cmp	r2, r3
 80056ba:	db3b      	blt.n	8005734 <_printf_float+0x38c>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07da      	lsls	r2, r3, #31
 80056c0:	d438      	bmi.n	8005734 <_printf_float+0x38c>
 80056c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056c6:	eba3 020a 	sub.w	r2, r3, sl
 80056ca:	eba3 0901 	sub.w	r9, r3, r1
 80056ce:	4591      	cmp	r9, r2
 80056d0:	bfa8      	it	ge
 80056d2:	4691      	movge	r9, r2
 80056d4:	f1b9 0f00 	cmp.w	r9, #0
 80056d8:	dc34      	bgt.n	8005744 <_printf_float+0x39c>
 80056da:	f04f 0800 	mov.w	r8, #0
 80056de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056e2:	f104 0a1a 	add.w	sl, r4, #26
 80056e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	eba3 0309 	sub.w	r3, r3, r9
 80056f0:	4543      	cmp	r3, r8
 80056f2:	f77f af7a 	ble.w	80055ea <_printf_float+0x242>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4652      	mov	r2, sl
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f aeac 	beq.w	800545e <_printf_float+0xb6>
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	e7ec      	b.n	80056e6 <_printf_float+0x33e>
 800570c:	4613      	mov	r3, r2
 800570e:	4631      	mov	r1, r6
 8005710:	4642      	mov	r2, r8
 8005712:	4628      	mov	r0, r5
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	d1c0      	bne.n	800569c <_printf_float+0x2f4>
 800571a:	e6a0      	b.n	800545e <_printf_float+0xb6>
 800571c:	2301      	movs	r3, #1
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	920b      	str	r2, [sp, #44]	; 0x2c
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	f43f ae99 	beq.w	800545e <_printf_float+0xb6>
 800572c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800572e:	f10b 0b01 	add.w	fp, fp, #1
 8005732:	e7b9      	b.n	80056a8 <_printf_float+0x300>
 8005734:	4631      	mov	r1, r6
 8005736:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	d1bf      	bne.n	80056c2 <_printf_float+0x31a>
 8005742:	e68c      	b.n	800545e <_printf_float+0xb6>
 8005744:	464b      	mov	r3, r9
 8005746:	4631      	mov	r1, r6
 8005748:	4628      	mov	r0, r5
 800574a:	eb08 020a 	add.w	r2, r8, sl
 800574e:	47b8      	blx	r7
 8005750:	3001      	adds	r0, #1
 8005752:	d1c2      	bne.n	80056da <_printf_float+0x332>
 8005754:	e683      	b.n	800545e <_printf_float+0xb6>
 8005756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005758:	2a01      	cmp	r2, #1
 800575a:	dc01      	bgt.n	8005760 <_printf_float+0x3b8>
 800575c:	07db      	lsls	r3, r3, #31
 800575e:	d537      	bpl.n	80057d0 <_printf_float+0x428>
 8005760:	2301      	movs	r3, #1
 8005762:	4642      	mov	r2, r8
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	f43f ae77 	beq.w	800545e <_printf_float+0xb6>
 8005770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005774:	4631      	mov	r1, r6
 8005776:	4628      	mov	r0, r5
 8005778:	47b8      	blx	r7
 800577a:	3001      	adds	r0, #1
 800577c:	f43f ae6f 	beq.w	800545e <_printf_float+0xb6>
 8005780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005784:	2200      	movs	r2, #0
 8005786:	2300      	movs	r3, #0
 8005788:	f7fb f9c2 	bl	8000b10 <__aeabi_dcmpeq>
 800578c:	b9d8      	cbnz	r0, 80057c6 <_printf_float+0x41e>
 800578e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005790:	f108 0201 	add.w	r2, r8, #1
 8005794:	3b01      	subs	r3, #1
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	d10e      	bne.n	80057be <_printf_float+0x416>
 80057a0:	e65d      	b.n	800545e <_printf_float+0xb6>
 80057a2:	2301      	movs	r3, #1
 80057a4:	464a      	mov	r2, r9
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	f43f ae56 	beq.w	800545e <_printf_float+0xb6>
 80057b2:	f108 0801 	add.w	r8, r8, #1
 80057b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057b8:	3b01      	subs	r3, #1
 80057ba:	4543      	cmp	r3, r8
 80057bc:	dcf1      	bgt.n	80057a2 <_printf_float+0x3fa>
 80057be:	4653      	mov	r3, sl
 80057c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057c4:	e6e0      	b.n	8005588 <_printf_float+0x1e0>
 80057c6:	f04f 0800 	mov.w	r8, #0
 80057ca:	f104 091a 	add.w	r9, r4, #26
 80057ce:	e7f2      	b.n	80057b6 <_printf_float+0x40e>
 80057d0:	2301      	movs	r3, #1
 80057d2:	4642      	mov	r2, r8
 80057d4:	e7df      	b.n	8005796 <_printf_float+0x3ee>
 80057d6:	2301      	movs	r3, #1
 80057d8:	464a      	mov	r2, r9
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	f43f ae3c 	beq.w	800545e <_printf_float+0xb6>
 80057e6:	f108 0801 	add.w	r8, r8, #1
 80057ea:	68e3      	ldr	r3, [r4, #12]
 80057ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80057ee:	1a5b      	subs	r3, r3, r1
 80057f0:	4543      	cmp	r3, r8
 80057f2:	dcf0      	bgt.n	80057d6 <_printf_float+0x42e>
 80057f4:	e6fd      	b.n	80055f2 <_printf_float+0x24a>
 80057f6:	f04f 0800 	mov.w	r8, #0
 80057fa:	f104 0919 	add.w	r9, r4, #25
 80057fe:	e7f4      	b.n	80057ea <_printf_float+0x442>

08005800 <_printf_common>:
 8005800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	4616      	mov	r6, r2
 8005806:	4699      	mov	r9, r3
 8005808:	688a      	ldr	r2, [r1, #8]
 800580a:	690b      	ldr	r3, [r1, #16]
 800580c:	4607      	mov	r7, r0
 800580e:	4293      	cmp	r3, r2
 8005810:	bfb8      	it	lt
 8005812:	4613      	movlt	r3, r2
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800581a:	460c      	mov	r4, r1
 800581c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005820:	b10a      	cbz	r2, 8005826 <_printf_common+0x26>
 8005822:	3301      	adds	r3, #1
 8005824:	6033      	str	r3, [r6, #0]
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	0699      	lsls	r1, r3, #26
 800582a:	bf42      	ittt	mi
 800582c:	6833      	ldrmi	r3, [r6, #0]
 800582e:	3302      	addmi	r3, #2
 8005830:	6033      	strmi	r3, [r6, #0]
 8005832:	6825      	ldr	r5, [r4, #0]
 8005834:	f015 0506 	ands.w	r5, r5, #6
 8005838:	d106      	bne.n	8005848 <_printf_common+0x48>
 800583a:	f104 0a19 	add.w	sl, r4, #25
 800583e:	68e3      	ldr	r3, [r4, #12]
 8005840:	6832      	ldr	r2, [r6, #0]
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	42ab      	cmp	r3, r5
 8005846:	dc28      	bgt.n	800589a <_printf_common+0x9a>
 8005848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800584c:	1e13      	subs	r3, r2, #0
 800584e:	6822      	ldr	r2, [r4, #0]
 8005850:	bf18      	it	ne
 8005852:	2301      	movne	r3, #1
 8005854:	0692      	lsls	r2, r2, #26
 8005856:	d42d      	bmi.n	80058b4 <_printf_common+0xb4>
 8005858:	4649      	mov	r1, r9
 800585a:	4638      	mov	r0, r7
 800585c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005860:	47c0      	blx	r8
 8005862:	3001      	adds	r0, #1
 8005864:	d020      	beq.n	80058a8 <_printf_common+0xa8>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	68e5      	ldr	r5, [r4, #12]
 800586a:	f003 0306 	and.w	r3, r3, #6
 800586e:	2b04      	cmp	r3, #4
 8005870:	bf18      	it	ne
 8005872:	2500      	movne	r5, #0
 8005874:	6832      	ldr	r2, [r6, #0]
 8005876:	f04f 0600 	mov.w	r6, #0
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	bf08      	it	eq
 800587e:	1aad      	subeq	r5, r5, r2
 8005880:	6922      	ldr	r2, [r4, #16]
 8005882:	bf08      	it	eq
 8005884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005888:	4293      	cmp	r3, r2
 800588a:	bfc4      	itt	gt
 800588c:	1a9b      	subgt	r3, r3, r2
 800588e:	18ed      	addgt	r5, r5, r3
 8005890:	341a      	adds	r4, #26
 8005892:	42b5      	cmp	r5, r6
 8005894:	d11a      	bne.n	80058cc <_printf_common+0xcc>
 8005896:	2000      	movs	r0, #0
 8005898:	e008      	b.n	80058ac <_printf_common+0xac>
 800589a:	2301      	movs	r3, #1
 800589c:	4652      	mov	r2, sl
 800589e:	4649      	mov	r1, r9
 80058a0:	4638      	mov	r0, r7
 80058a2:	47c0      	blx	r8
 80058a4:	3001      	adds	r0, #1
 80058a6:	d103      	bne.n	80058b0 <_printf_common+0xb0>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b0:	3501      	adds	r5, #1
 80058b2:	e7c4      	b.n	800583e <_printf_common+0x3e>
 80058b4:	2030      	movs	r0, #48	; 0x30
 80058b6:	18e1      	adds	r1, r4, r3
 80058b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c2:	4422      	add	r2, r4
 80058c4:	3302      	adds	r3, #2
 80058c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058ca:	e7c5      	b.n	8005858 <_printf_common+0x58>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4622      	mov	r2, r4
 80058d0:	4649      	mov	r1, r9
 80058d2:	4638      	mov	r0, r7
 80058d4:	47c0      	blx	r8
 80058d6:	3001      	adds	r0, #1
 80058d8:	d0e6      	beq.n	80058a8 <_printf_common+0xa8>
 80058da:	3601      	adds	r6, #1
 80058dc:	e7d9      	b.n	8005892 <_printf_common+0x92>
	...

080058e0 <_printf_i>:
 80058e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	7e0f      	ldrb	r7, [r1, #24]
 80058e6:	4691      	mov	r9, r2
 80058e8:	2f78      	cmp	r7, #120	; 0x78
 80058ea:	4680      	mov	r8, r0
 80058ec:	460c      	mov	r4, r1
 80058ee:	469a      	mov	sl, r3
 80058f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058f6:	d807      	bhi.n	8005908 <_printf_i+0x28>
 80058f8:	2f62      	cmp	r7, #98	; 0x62
 80058fa:	d80a      	bhi.n	8005912 <_printf_i+0x32>
 80058fc:	2f00      	cmp	r7, #0
 80058fe:	f000 80d9 	beq.w	8005ab4 <_printf_i+0x1d4>
 8005902:	2f58      	cmp	r7, #88	; 0x58
 8005904:	f000 80a4 	beq.w	8005a50 <_printf_i+0x170>
 8005908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800590c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005910:	e03a      	b.n	8005988 <_printf_i+0xa8>
 8005912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005916:	2b15      	cmp	r3, #21
 8005918:	d8f6      	bhi.n	8005908 <_printf_i+0x28>
 800591a:	a101      	add	r1, pc, #4	; (adr r1, 8005920 <_printf_i+0x40>)
 800591c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005920:	08005979 	.word	0x08005979
 8005924:	0800598d 	.word	0x0800598d
 8005928:	08005909 	.word	0x08005909
 800592c:	08005909 	.word	0x08005909
 8005930:	08005909 	.word	0x08005909
 8005934:	08005909 	.word	0x08005909
 8005938:	0800598d 	.word	0x0800598d
 800593c:	08005909 	.word	0x08005909
 8005940:	08005909 	.word	0x08005909
 8005944:	08005909 	.word	0x08005909
 8005948:	08005909 	.word	0x08005909
 800594c:	08005a9b 	.word	0x08005a9b
 8005950:	080059bd 	.word	0x080059bd
 8005954:	08005a7d 	.word	0x08005a7d
 8005958:	08005909 	.word	0x08005909
 800595c:	08005909 	.word	0x08005909
 8005960:	08005abd 	.word	0x08005abd
 8005964:	08005909 	.word	0x08005909
 8005968:	080059bd 	.word	0x080059bd
 800596c:	08005909 	.word	0x08005909
 8005970:	08005909 	.word	0x08005909
 8005974:	08005a85 	.word	0x08005a85
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	1d1a      	adds	r2, r3, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	602a      	str	r2, [r5, #0]
 8005980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005988:	2301      	movs	r3, #1
 800598a:	e0a4      	b.n	8005ad6 <_printf_i+0x1f6>
 800598c:	6820      	ldr	r0, [r4, #0]
 800598e:	6829      	ldr	r1, [r5, #0]
 8005990:	0606      	lsls	r6, r0, #24
 8005992:	f101 0304 	add.w	r3, r1, #4
 8005996:	d50a      	bpl.n	80059ae <_printf_i+0xce>
 8005998:	680e      	ldr	r6, [r1, #0]
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	2e00      	cmp	r6, #0
 800599e:	da03      	bge.n	80059a8 <_printf_i+0xc8>
 80059a0:	232d      	movs	r3, #45	; 0x2d
 80059a2:	4276      	negs	r6, r6
 80059a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a8:	230a      	movs	r3, #10
 80059aa:	485e      	ldr	r0, [pc, #376]	; (8005b24 <_printf_i+0x244>)
 80059ac:	e019      	b.n	80059e2 <_printf_i+0x102>
 80059ae:	680e      	ldr	r6, [r1, #0]
 80059b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059b4:	602b      	str	r3, [r5, #0]
 80059b6:	bf18      	it	ne
 80059b8:	b236      	sxthne	r6, r6
 80059ba:	e7ef      	b.n	800599c <_printf_i+0xbc>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	1d19      	adds	r1, r3, #4
 80059c2:	6029      	str	r1, [r5, #0]
 80059c4:	0601      	lsls	r1, r0, #24
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0xec>
 80059c8:	681e      	ldr	r6, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <_printf_i+0xf2>
 80059cc:	0646      	lsls	r6, r0, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0xe8>
 80059d0:	881e      	ldrh	r6, [r3, #0]
 80059d2:	2f6f      	cmp	r7, #111	; 0x6f
 80059d4:	bf0c      	ite	eq
 80059d6:	2308      	moveq	r3, #8
 80059d8:	230a      	movne	r3, #10
 80059da:	4852      	ldr	r0, [pc, #328]	; (8005b24 <_printf_i+0x244>)
 80059dc:	2100      	movs	r1, #0
 80059de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059e2:	6865      	ldr	r5, [r4, #4]
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	bfa8      	it	ge
 80059e8:	6821      	ldrge	r1, [r4, #0]
 80059ea:	60a5      	str	r5, [r4, #8]
 80059ec:	bfa4      	itt	ge
 80059ee:	f021 0104 	bicge.w	r1, r1, #4
 80059f2:	6021      	strge	r1, [r4, #0]
 80059f4:	b90e      	cbnz	r6, 80059fa <_printf_i+0x11a>
 80059f6:	2d00      	cmp	r5, #0
 80059f8:	d04d      	beq.n	8005a96 <_printf_i+0x1b6>
 80059fa:	4615      	mov	r5, r2
 80059fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a00:	fb03 6711 	mls	r7, r3, r1, r6
 8005a04:	5dc7      	ldrb	r7, [r0, r7]
 8005a06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a0a:	4637      	mov	r7, r6
 8005a0c:	42bb      	cmp	r3, r7
 8005a0e:	460e      	mov	r6, r1
 8005a10:	d9f4      	bls.n	80059fc <_printf_i+0x11c>
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d10b      	bne.n	8005a2e <_printf_i+0x14e>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	07de      	lsls	r6, r3, #31
 8005a1a:	d508      	bpl.n	8005a2e <_printf_i+0x14e>
 8005a1c:	6923      	ldr	r3, [r4, #16]
 8005a1e:	6861      	ldr	r1, [r4, #4]
 8005a20:	4299      	cmp	r1, r3
 8005a22:	bfde      	ittt	le
 8005a24:	2330      	movle	r3, #48	; 0x30
 8005a26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a2e:	1b52      	subs	r2, r2, r5
 8005a30:	6122      	str	r2, [r4, #16]
 8005a32:	464b      	mov	r3, r9
 8005a34:	4621      	mov	r1, r4
 8005a36:	4640      	mov	r0, r8
 8005a38:	f8cd a000 	str.w	sl, [sp]
 8005a3c:	aa03      	add	r2, sp, #12
 8005a3e:	f7ff fedf 	bl	8005800 <_printf_common>
 8005a42:	3001      	adds	r0, #1
 8005a44:	d14c      	bne.n	8005ae0 <_printf_i+0x200>
 8005a46:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4a:	b004      	add	sp, #16
 8005a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a50:	4834      	ldr	r0, [pc, #208]	; (8005b24 <_printf_i+0x244>)
 8005a52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a56:	6829      	ldr	r1, [r5, #0]
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a5e:	6029      	str	r1, [r5, #0]
 8005a60:	061d      	lsls	r5, r3, #24
 8005a62:	d514      	bpl.n	8005a8e <_printf_i+0x1ae>
 8005a64:	07df      	lsls	r7, r3, #31
 8005a66:	bf44      	itt	mi
 8005a68:	f043 0320 	orrmi.w	r3, r3, #32
 8005a6c:	6023      	strmi	r3, [r4, #0]
 8005a6e:	b91e      	cbnz	r6, 8005a78 <_printf_i+0x198>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	f023 0320 	bic.w	r3, r3, #32
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	2310      	movs	r3, #16
 8005a7a:	e7af      	b.n	80059dc <_printf_i+0xfc>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	f043 0320 	orr.w	r3, r3, #32
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	2378      	movs	r3, #120	; 0x78
 8005a86:	4828      	ldr	r0, [pc, #160]	; (8005b28 <_printf_i+0x248>)
 8005a88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a8c:	e7e3      	b.n	8005a56 <_printf_i+0x176>
 8005a8e:	0659      	lsls	r1, r3, #25
 8005a90:	bf48      	it	mi
 8005a92:	b2b6      	uxthmi	r6, r6
 8005a94:	e7e6      	b.n	8005a64 <_printf_i+0x184>
 8005a96:	4615      	mov	r5, r2
 8005a98:	e7bb      	b.n	8005a12 <_printf_i+0x132>
 8005a9a:	682b      	ldr	r3, [r5, #0]
 8005a9c:	6826      	ldr	r6, [r4, #0]
 8005a9e:	1d18      	adds	r0, r3, #4
 8005aa0:	6961      	ldr	r1, [r4, #20]
 8005aa2:	6028      	str	r0, [r5, #0]
 8005aa4:	0635      	lsls	r5, r6, #24
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	d501      	bpl.n	8005aae <_printf_i+0x1ce>
 8005aaa:	6019      	str	r1, [r3, #0]
 8005aac:	e002      	b.n	8005ab4 <_printf_i+0x1d4>
 8005aae:	0670      	lsls	r0, r6, #25
 8005ab0:	d5fb      	bpl.n	8005aaa <_printf_i+0x1ca>
 8005ab2:	8019      	strh	r1, [r3, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4615      	mov	r5, r2
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	e7ba      	b.n	8005a32 <_printf_i+0x152>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	2100      	movs	r1, #0
 8005ac0:	1d1a      	adds	r2, r3, #4
 8005ac2:	602a      	str	r2, [r5, #0]
 8005ac4:	681d      	ldr	r5, [r3, #0]
 8005ac6:	6862      	ldr	r2, [r4, #4]
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f001 fa3f 	bl	8006f4c <memchr>
 8005ace:	b108      	cbz	r0, 8005ad4 <_printf_i+0x1f4>
 8005ad0:	1b40      	subs	r0, r0, r5
 8005ad2:	6060      	str	r0, [r4, #4]
 8005ad4:	6863      	ldr	r3, [r4, #4]
 8005ad6:	6123      	str	r3, [r4, #16]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ade:	e7a8      	b.n	8005a32 <_printf_i+0x152>
 8005ae0:	462a      	mov	r2, r5
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	6923      	ldr	r3, [r4, #16]
 8005ae8:	47d0      	blx	sl
 8005aea:	3001      	adds	r0, #1
 8005aec:	d0ab      	beq.n	8005a46 <_printf_i+0x166>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	079b      	lsls	r3, r3, #30
 8005af2:	d413      	bmi.n	8005b1c <_printf_i+0x23c>
 8005af4:	68e0      	ldr	r0, [r4, #12]
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	4298      	cmp	r0, r3
 8005afa:	bfb8      	it	lt
 8005afc:	4618      	movlt	r0, r3
 8005afe:	e7a4      	b.n	8005a4a <_printf_i+0x16a>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4632      	mov	r2, r6
 8005b04:	4649      	mov	r1, r9
 8005b06:	4640      	mov	r0, r8
 8005b08:	47d0      	blx	sl
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d09b      	beq.n	8005a46 <_printf_i+0x166>
 8005b0e:	3501      	adds	r5, #1
 8005b10:	68e3      	ldr	r3, [r4, #12]
 8005b12:	9903      	ldr	r1, [sp, #12]
 8005b14:	1a5b      	subs	r3, r3, r1
 8005b16:	42ab      	cmp	r3, r5
 8005b18:	dcf2      	bgt.n	8005b00 <_printf_i+0x220>
 8005b1a:	e7eb      	b.n	8005af4 <_printf_i+0x214>
 8005b1c:	2500      	movs	r5, #0
 8005b1e:	f104 0619 	add.w	r6, r4, #25
 8005b22:	e7f5      	b.n	8005b10 <_printf_i+0x230>
 8005b24:	08008376 	.word	0x08008376
 8005b28:	08008387 	.word	0x08008387

08005b2c <iprintf>:
 8005b2c:	b40f      	push	{r0, r1, r2, r3}
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <iprintf+0x2c>)
 8005b30:	b513      	push	{r0, r1, r4, lr}
 8005b32:	681c      	ldr	r4, [r3, #0]
 8005b34:	b124      	cbz	r4, 8005b40 <iprintf+0x14>
 8005b36:	69a3      	ldr	r3, [r4, #24]
 8005b38:	b913      	cbnz	r3, 8005b40 <iprintf+0x14>
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f001 f8f4 	bl	8006d28 <__sinit>
 8005b40:	ab05      	add	r3, sp, #20
 8005b42:	4620      	mov	r0, r4
 8005b44:	9a04      	ldr	r2, [sp, #16]
 8005b46:	68a1      	ldr	r1, [r4, #8]
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	f002 f811 	bl	8007b70 <_vfiprintf_r>
 8005b4e:	b002      	add	sp, #8
 8005b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b54:	b004      	add	sp, #16
 8005b56:	4770      	bx	lr
 8005b58:	20000010 	.word	0x20000010

08005b5c <_puts_r>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	460e      	mov	r6, r1
 8005b60:	4605      	mov	r5, r0
 8005b62:	b118      	cbz	r0, 8005b6c <_puts_r+0x10>
 8005b64:	6983      	ldr	r3, [r0, #24]
 8005b66:	b90b      	cbnz	r3, 8005b6c <_puts_r+0x10>
 8005b68:	f001 f8de 	bl	8006d28 <__sinit>
 8005b6c:	69ab      	ldr	r3, [r5, #24]
 8005b6e:	68ac      	ldr	r4, [r5, #8]
 8005b70:	b913      	cbnz	r3, 8005b78 <_puts_r+0x1c>
 8005b72:	4628      	mov	r0, r5
 8005b74:	f001 f8d8 	bl	8006d28 <__sinit>
 8005b78:	4b2c      	ldr	r3, [pc, #176]	; (8005c2c <_puts_r+0xd0>)
 8005b7a:	429c      	cmp	r4, r3
 8005b7c:	d120      	bne.n	8005bc0 <_puts_r+0x64>
 8005b7e:	686c      	ldr	r4, [r5, #4]
 8005b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b82:	07db      	lsls	r3, r3, #31
 8005b84:	d405      	bmi.n	8005b92 <_puts_r+0x36>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	0598      	lsls	r0, r3, #22
 8005b8a:	d402      	bmi.n	8005b92 <_puts_r+0x36>
 8005b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b8e:	f001 f96e 	bl	8006e6e <__retarget_lock_acquire_recursive>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	0719      	lsls	r1, r3, #28
 8005b96:	d51d      	bpl.n	8005bd4 <_puts_r+0x78>
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	b1db      	cbz	r3, 8005bd4 <_puts_r+0x78>
 8005b9c:	3e01      	subs	r6, #1
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60a3      	str	r3, [r4, #8]
 8005ba8:	bb39      	cbnz	r1, 8005bfa <_puts_r+0x9e>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da38      	bge.n	8005c20 <_puts_r+0xc4>
 8005bae:	4622      	mov	r2, r4
 8005bb0:	210a      	movs	r1, #10
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f000 f868 	bl	8005c88 <__swbuf_r>
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d011      	beq.n	8005be0 <_puts_r+0x84>
 8005bbc:	250a      	movs	r5, #10
 8005bbe:	e011      	b.n	8005be4 <_puts_r+0x88>
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <_puts_r+0xd4>)
 8005bc2:	429c      	cmp	r4, r3
 8005bc4:	d101      	bne.n	8005bca <_puts_r+0x6e>
 8005bc6:	68ac      	ldr	r4, [r5, #8]
 8005bc8:	e7da      	b.n	8005b80 <_puts_r+0x24>
 8005bca:	4b1a      	ldr	r3, [pc, #104]	; (8005c34 <_puts_r+0xd8>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	bf08      	it	eq
 8005bd0:	68ec      	ldreq	r4, [r5, #12]
 8005bd2:	e7d5      	b.n	8005b80 <_puts_r+0x24>
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 f8a8 	bl	8005d2c <__swsetup_r>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d0dd      	beq.n	8005b9c <_puts_r+0x40>
 8005be0:	f04f 35ff 	mov.w	r5, #4294967295
 8005be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005be6:	07da      	lsls	r2, r3, #31
 8005be8:	d405      	bmi.n	8005bf6 <_puts_r+0x9a>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	059b      	lsls	r3, r3, #22
 8005bee:	d402      	bmi.n	8005bf6 <_puts_r+0x9a>
 8005bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bf2:	f001 f93d 	bl	8006e70 <__retarget_lock_release_recursive>
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	da04      	bge.n	8005c08 <_puts_r+0xac>
 8005bfe:	69a2      	ldr	r2, [r4, #24]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	dc06      	bgt.n	8005c12 <_puts_r+0xb6>
 8005c04:	290a      	cmp	r1, #10
 8005c06:	d004      	beq.n	8005c12 <_puts_r+0xb6>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	6022      	str	r2, [r4, #0]
 8005c0e:	7019      	strb	r1, [r3, #0]
 8005c10:	e7c5      	b.n	8005b9e <_puts_r+0x42>
 8005c12:	4622      	mov	r2, r4
 8005c14:	4628      	mov	r0, r5
 8005c16:	f000 f837 	bl	8005c88 <__swbuf_r>
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d1bf      	bne.n	8005b9e <_puts_r+0x42>
 8005c1e:	e7df      	b.n	8005be0 <_puts_r+0x84>
 8005c20:	250a      	movs	r5, #10
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	6022      	str	r2, [r4, #0]
 8005c28:	701d      	strb	r5, [r3, #0]
 8005c2a:	e7db      	b.n	8005be4 <_puts_r+0x88>
 8005c2c:	08008448 	.word	0x08008448
 8005c30:	08008468 	.word	0x08008468
 8005c34:	08008428 	.word	0x08008428

08005c38 <puts>:
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <puts+0xc>)
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f7ff bf8d 	b.w	8005b5c <_puts_r>
 8005c42:	bf00      	nop
 8005c44:	20000010 	.word	0x20000010

08005c48 <siprintf>:
 8005c48:	b40e      	push	{r1, r2, r3}
 8005c4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c4e:	b500      	push	{lr}
 8005c50:	b09c      	sub	sp, #112	; 0x70
 8005c52:	ab1d      	add	r3, sp, #116	; 0x74
 8005c54:	9002      	str	r0, [sp, #8]
 8005c56:	9006      	str	r0, [sp, #24]
 8005c58:	9107      	str	r1, [sp, #28]
 8005c5a:	9104      	str	r1, [sp, #16]
 8005c5c:	4808      	ldr	r0, [pc, #32]	; (8005c80 <siprintf+0x38>)
 8005c5e:	4909      	ldr	r1, [pc, #36]	; (8005c84 <siprintf+0x3c>)
 8005c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c64:	9105      	str	r1, [sp, #20]
 8005c66:	6800      	ldr	r0, [r0, #0]
 8005c68:	a902      	add	r1, sp, #8
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	f001 fe58 	bl	8007920 <_svfiprintf_r>
 8005c70:	2200      	movs	r2, #0
 8005c72:	9b02      	ldr	r3, [sp, #8]
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	b01c      	add	sp, #112	; 0x70
 8005c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c7c:	b003      	add	sp, #12
 8005c7e:	4770      	bx	lr
 8005c80:	20000010 	.word	0x20000010
 8005c84:	ffff0208 	.word	0xffff0208

08005c88 <__swbuf_r>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	460e      	mov	r6, r1
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	4605      	mov	r5, r0
 8005c90:	b118      	cbz	r0, 8005c9a <__swbuf_r+0x12>
 8005c92:	6983      	ldr	r3, [r0, #24]
 8005c94:	b90b      	cbnz	r3, 8005c9a <__swbuf_r+0x12>
 8005c96:	f001 f847 	bl	8006d28 <__sinit>
 8005c9a:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <__swbuf_r+0x98>)
 8005c9c:	429c      	cmp	r4, r3
 8005c9e:	d12b      	bne.n	8005cf8 <__swbuf_r+0x70>
 8005ca0:	686c      	ldr	r4, [r5, #4]
 8005ca2:	69a3      	ldr	r3, [r4, #24]
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	071a      	lsls	r2, r3, #28
 8005caa:	d52f      	bpl.n	8005d0c <__swbuf_r+0x84>
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	b36b      	cbz	r3, 8005d0c <__swbuf_r+0x84>
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	6820      	ldr	r0, [r4, #0]
 8005cb4:	b2f6      	uxtb	r6, r6
 8005cb6:	1ac0      	subs	r0, r0, r3
 8005cb8:	6963      	ldr	r3, [r4, #20]
 8005cba:	4637      	mov	r7, r6
 8005cbc:	4283      	cmp	r3, r0
 8005cbe:	dc04      	bgt.n	8005cca <__swbuf_r+0x42>
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 ff9c 	bl	8006c00 <_fflush_r>
 8005cc8:	bb30      	cbnz	r0, 8005d18 <__swbuf_r+0x90>
 8005cca:	68a3      	ldr	r3, [r4, #8]
 8005ccc:	3001      	adds	r0, #1
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	60a3      	str	r3, [r4, #8]
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	6022      	str	r2, [r4, #0]
 8005cd8:	701e      	strb	r6, [r3, #0]
 8005cda:	6963      	ldr	r3, [r4, #20]
 8005cdc:	4283      	cmp	r3, r0
 8005cde:	d004      	beq.n	8005cea <__swbuf_r+0x62>
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	07db      	lsls	r3, r3, #31
 8005ce4:	d506      	bpl.n	8005cf4 <__swbuf_r+0x6c>
 8005ce6:	2e0a      	cmp	r6, #10
 8005ce8:	d104      	bne.n	8005cf4 <__swbuf_r+0x6c>
 8005cea:	4621      	mov	r1, r4
 8005cec:	4628      	mov	r0, r5
 8005cee:	f000 ff87 	bl	8006c00 <_fflush_r>
 8005cf2:	b988      	cbnz	r0, 8005d18 <__swbuf_r+0x90>
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <__swbuf_r+0x9c>)
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	d101      	bne.n	8005d02 <__swbuf_r+0x7a>
 8005cfe:	68ac      	ldr	r4, [r5, #8]
 8005d00:	e7cf      	b.n	8005ca2 <__swbuf_r+0x1a>
 8005d02:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <__swbuf_r+0xa0>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	bf08      	it	eq
 8005d08:	68ec      	ldreq	r4, [r5, #12]
 8005d0a:	e7ca      	b.n	8005ca2 <__swbuf_r+0x1a>
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f000 f80c 	bl	8005d2c <__swsetup_r>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d0cb      	beq.n	8005cb0 <__swbuf_r+0x28>
 8005d18:	f04f 37ff 	mov.w	r7, #4294967295
 8005d1c:	e7ea      	b.n	8005cf4 <__swbuf_r+0x6c>
 8005d1e:	bf00      	nop
 8005d20:	08008448 	.word	0x08008448
 8005d24:	08008468 	.word	0x08008468
 8005d28:	08008428 	.word	0x08008428

08005d2c <__swsetup_r>:
 8005d2c:	4b32      	ldr	r3, [pc, #200]	; (8005df8 <__swsetup_r+0xcc>)
 8005d2e:	b570      	push	{r4, r5, r6, lr}
 8005d30:	681d      	ldr	r5, [r3, #0]
 8005d32:	4606      	mov	r6, r0
 8005d34:	460c      	mov	r4, r1
 8005d36:	b125      	cbz	r5, 8005d42 <__swsetup_r+0x16>
 8005d38:	69ab      	ldr	r3, [r5, #24]
 8005d3a:	b913      	cbnz	r3, 8005d42 <__swsetup_r+0x16>
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 fff3 	bl	8006d28 <__sinit>
 8005d42:	4b2e      	ldr	r3, [pc, #184]	; (8005dfc <__swsetup_r+0xd0>)
 8005d44:	429c      	cmp	r4, r3
 8005d46:	d10f      	bne.n	8005d68 <__swsetup_r+0x3c>
 8005d48:	686c      	ldr	r4, [r5, #4]
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d50:	0719      	lsls	r1, r3, #28
 8005d52:	d42c      	bmi.n	8005dae <__swsetup_r+0x82>
 8005d54:	06dd      	lsls	r5, r3, #27
 8005d56:	d411      	bmi.n	8005d7c <__swsetup_r+0x50>
 8005d58:	2309      	movs	r3, #9
 8005d5a:	6033      	str	r3, [r6, #0]
 8005d5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d60:	f04f 30ff 	mov.w	r0, #4294967295
 8005d64:	81a3      	strh	r3, [r4, #12]
 8005d66:	e03e      	b.n	8005de6 <__swsetup_r+0xba>
 8005d68:	4b25      	ldr	r3, [pc, #148]	; (8005e00 <__swsetup_r+0xd4>)
 8005d6a:	429c      	cmp	r4, r3
 8005d6c:	d101      	bne.n	8005d72 <__swsetup_r+0x46>
 8005d6e:	68ac      	ldr	r4, [r5, #8]
 8005d70:	e7eb      	b.n	8005d4a <__swsetup_r+0x1e>
 8005d72:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <__swsetup_r+0xd8>)
 8005d74:	429c      	cmp	r4, r3
 8005d76:	bf08      	it	eq
 8005d78:	68ec      	ldreq	r4, [r5, #12]
 8005d7a:	e7e6      	b.n	8005d4a <__swsetup_r+0x1e>
 8005d7c:	0758      	lsls	r0, r3, #29
 8005d7e:	d512      	bpl.n	8005da6 <__swsetup_r+0x7a>
 8005d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d82:	b141      	cbz	r1, 8005d96 <__swsetup_r+0x6a>
 8005d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d88:	4299      	cmp	r1, r3
 8005d8a:	d002      	beq.n	8005d92 <__swsetup_r+0x66>
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f001 fc8f 	bl	80076b0 <_free_r>
 8005d92:	2300      	movs	r3, #0
 8005d94:	6363      	str	r3, [r4, #52]	; 0x34
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d9c:	81a3      	strh	r3, [r4, #12]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	6063      	str	r3, [r4, #4]
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	f043 0308 	orr.w	r3, r3, #8
 8005dac:	81a3      	strh	r3, [r4, #12]
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	b94b      	cbnz	r3, 8005dc6 <__swsetup_r+0x9a>
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dbc:	d003      	beq.n	8005dc6 <__swsetup_r+0x9a>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f001 f87b 	bl	8006ebc <__smakebuf_r>
 8005dc6:	89a0      	ldrh	r0, [r4, #12]
 8005dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dcc:	f010 0301 	ands.w	r3, r0, #1
 8005dd0:	d00a      	beq.n	8005de8 <__swsetup_r+0xbc>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60a3      	str	r3, [r4, #8]
 8005dd6:	6963      	ldr	r3, [r4, #20]
 8005dd8:	425b      	negs	r3, r3
 8005dda:	61a3      	str	r3, [r4, #24]
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	b943      	cbnz	r3, 8005df2 <__swsetup_r+0xc6>
 8005de0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005de4:	d1ba      	bne.n	8005d5c <__swsetup_r+0x30>
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	0781      	lsls	r1, r0, #30
 8005dea:	bf58      	it	pl
 8005dec:	6963      	ldrpl	r3, [r4, #20]
 8005dee:	60a3      	str	r3, [r4, #8]
 8005df0:	e7f4      	b.n	8005ddc <__swsetup_r+0xb0>
 8005df2:	2000      	movs	r0, #0
 8005df4:	e7f7      	b.n	8005de6 <__swsetup_r+0xba>
 8005df6:	bf00      	nop
 8005df8:	20000010 	.word	0x20000010
 8005dfc:	08008448 	.word	0x08008448
 8005e00:	08008468 	.word	0x08008468
 8005e04:	08008428 	.word	0x08008428

08005e08 <quorem>:
 8005e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	6903      	ldr	r3, [r0, #16]
 8005e0e:	690c      	ldr	r4, [r1, #16]
 8005e10:	4607      	mov	r7, r0
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	f2c0 8082 	blt.w	8005f1c <quorem+0x114>
 8005e18:	3c01      	subs	r4, #1
 8005e1a:	f100 0514 	add.w	r5, r0, #20
 8005e1e:	f101 0814 	add.w	r8, r1, #20
 8005e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e30:	3301      	adds	r3, #1
 8005e32:	429a      	cmp	r2, r3
 8005e34:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e40:	d331      	bcc.n	8005ea6 <quorem+0x9e>
 8005e42:	f04f 0e00 	mov.w	lr, #0
 8005e46:	4640      	mov	r0, r8
 8005e48:	46ac      	mov	ip, r5
 8005e4a:	46f2      	mov	sl, lr
 8005e4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e50:	b293      	uxth	r3, r2
 8005e52:	fb06 e303 	mla	r3, r6, r3, lr
 8005e56:	0c12      	lsrs	r2, r2, #16
 8005e58:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	fb06 e202 	mla	r2, r6, r2, lr
 8005e62:	ebaa 0303 	sub.w	r3, sl, r3
 8005e66:	f8dc a000 	ldr.w	sl, [ip]
 8005e6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e6e:	fa1f fa8a 	uxth.w	sl, sl
 8005e72:	4453      	add	r3, sl
 8005e74:	f8dc a000 	ldr.w	sl, [ip]
 8005e78:	b292      	uxth	r2, r2
 8005e7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e88:	4581      	cmp	r9, r0
 8005e8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e8e:	f84c 3b04 	str.w	r3, [ip], #4
 8005e92:	d2db      	bcs.n	8005e4c <quorem+0x44>
 8005e94:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e98:	b92b      	cbnz	r3, 8005ea6 <quorem+0x9e>
 8005e9a:	9b01      	ldr	r3, [sp, #4]
 8005e9c:	3b04      	subs	r3, #4
 8005e9e:	429d      	cmp	r5, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	d32f      	bcc.n	8005f04 <quorem+0xfc>
 8005ea4:	613c      	str	r4, [r7, #16]
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	f001 faea 	bl	8007480 <__mcmp>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	db25      	blt.n	8005efc <quorem+0xf4>
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	f04f 0c00 	mov.w	ip, #0
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	f858 1b04 	ldr.w	r1, [r8], #4
 8005ebc:	f8d0 e000 	ldr.w	lr, [r0]
 8005ec0:	b28b      	uxth	r3, r1
 8005ec2:	ebac 0303 	sub.w	r3, ip, r3
 8005ec6:	fa1f f28e 	uxth.w	r2, lr
 8005eca:	4413      	add	r3, r2
 8005ecc:	0c0a      	lsrs	r2, r1, #16
 8005ece:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ed2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005edc:	45c1      	cmp	r9, r8
 8005ede:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ee2:	f840 3b04 	str.w	r3, [r0], #4
 8005ee6:	d2e7      	bcs.n	8005eb8 <quorem+0xb0>
 8005ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ef0:	b922      	cbnz	r2, 8005efc <quorem+0xf4>
 8005ef2:	3b04      	subs	r3, #4
 8005ef4:	429d      	cmp	r5, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	d30a      	bcc.n	8005f10 <quorem+0x108>
 8005efa:	613c      	str	r4, [r7, #16]
 8005efc:	4630      	mov	r0, r6
 8005efe:	b003      	add	sp, #12
 8005f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	3b04      	subs	r3, #4
 8005f08:	2a00      	cmp	r2, #0
 8005f0a:	d1cb      	bne.n	8005ea4 <quorem+0x9c>
 8005f0c:	3c01      	subs	r4, #1
 8005f0e:	e7c6      	b.n	8005e9e <quorem+0x96>
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	3b04      	subs	r3, #4
 8005f14:	2a00      	cmp	r2, #0
 8005f16:	d1f0      	bne.n	8005efa <quorem+0xf2>
 8005f18:	3c01      	subs	r4, #1
 8005f1a:	e7eb      	b.n	8005ef4 <quorem+0xec>
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e7ee      	b.n	8005efe <quorem+0xf6>

08005f20 <_dtoa_r>:
 8005f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	4616      	mov	r6, r2
 8005f26:	461f      	mov	r7, r3
 8005f28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f2a:	b099      	sub	sp, #100	; 0x64
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005f36:	b974      	cbnz	r4, 8005f56 <_dtoa_r+0x36>
 8005f38:	2010      	movs	r0, #16
 8005f3a:	f000 ffff 	bl	8006f3c <malloc>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6268      	str	r0, [r5, #36]	; 0x24
 8005f42:	b920      	cbnz	r0, 8005f4e <_dtoa_r+0x2e>
 8005f44:	21ea      	movs	r1, #234	; 0xea
 8005f46:	4ba8      	ldr	r3, [pc, #672]	; (80061e8 <_dtoa_r+0x2c8>)
 8005f48:	48a8      	ldr	r0, [pc, #672]	; (80061ec <_dtoa_r+0x2cc>)
 8005f4a:	f001 ffa7 	bl	8007e9c <__assert_func>
 8005f4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f52:	6004      	str	r4, [r0, #0]
 8005f54:	60c4      	str	r4, [r0, #12]
 8005f56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f58:	6819      	ldr	r1, [r3, #0]
 8005f5a:	b151      	cbz	r1, 8005f72 <_dtoa_r+0x52>
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	2301      	movs	r3, #1
 8005f60:	4093      	lsls	r3, r2
 8005f62:	604a      	str	r2, [r1, #4]
 8005f64:	608b      	str	r3, [r1, #8]
 8005f66:	4628      	mov	r0, r5
 8005f68:	f001 f84c 	bl	8007004 <_Bfree>
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	1e3b      	subs	r3, r7, #0
 8005f74:	bfaf      	iteee	ge
 8005f76:	2300      	movge	r3, #0
 8005f78:	2201      	movlt	r2, #1
 8005f7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f7e:	9305      	strlt	r3, [sp, #20]
 8005f80:	bfa8      	it	ge
 8005f82:	f8c8 3000 	strge.w	r3, [r8]
 8005f86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005f8a:	4b99      	ldr	r3, [pc, #612]	; (80061f0 <_dtoa_r+0x2d0>)
 8005f8c:	bfb8      	it	lt
 8005f8e:	f8c8 2000 	strlt.w	r2, [r8]
 8005f92:	ea33 0309 	bics.w	r3, r3, r9
 8005f96:	d119      	bne.n	8005fcc <_dtoa_r+0xac>
 8005f98:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fa4:	4333      	orrs	r3, r6
 8005fa6:	f000 857f 	beq.w	8006aa8 <_dtoa_r+0xb88>
 8005faa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fac:	b953      	cbnz	r3, 8005fc4 <_dtoa_r+0xa4>
 8005fae:	4b91      	ldr	r3, [pc, #580]	; (80061f4 <_dtoa_r+0x2d4>)
 8005fb0:	e022      	b.n	8005ff8 <_dtoa_r+0xd8>
 8005fb2:	4b91      	ldr	r3, [pc, #580]	; (80061f8 <_dtoa_r+0x2d8>)
 8005fb4:	9303      	str	r3, [sp, #12]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	9803      	ldr	r0, [sp, #12]
 8005fbe:	b019      	add	sp, #100	; 0x64
 8005fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc4:	4b8b      	ldr	r3, [pc, #556]	; (80061f4 <_dtoa_r+0x2d4>)
 8005fc6:	9303      	str	r3, [sp, #12]
 8005fc8:	3303      	adds	r3, #3
 8005fca:	e7f5      	b.n	8005fb8 <_dtoa_r+0x98>
 8005fcc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005fd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f7fa fd98 	bl	8000b10 <__aeabi_dcmpeq>
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	b158      	cbz	r0, 8005ffc <_dtoa_r+0xdc>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8558 	beq.w	8006aa2 <_dtoa_r+0xb82>
 8005ff2:	4882      	ldr	r0, [pc, #520]	; (80061fc <_dtoa_r+0x2dc>)
 8005ff4:	6018      	str	r0, [r3, #0]
 8005ff6:	1e43      	subs	r3, r0, #1
 8005ff8:	9303      	str	r3, [sp, #12]
 8005ffa:	e7df      	b.n	8005fbc <_dtoa_r+0x9c>
 8005ffc:	ab16      	add	r3, sp, #88	; 0x58
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	ab17      	add	r3, sp, #92	; 0x5c
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	4628      	mov	r0, r5
 8006006:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800600a:	f001 fae1 	bl	80075d0 <__d2b>
 800600e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006012:	4683      	mov	fp, r0
 8006014:	2c00      	cmp	r4, #0
 8006016:	d07f      	beq.n	8006118 <_dtoa_r+0x1f8>
 8006018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800601c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800601e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006022:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006026:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800602a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800602e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006032:	2200      	movs	r2, #0
 8006034:	4b72      	ldr	r3, [pc, #456]	; (8006200 <_dtoa_r+0x2e0>)
 8006036:	f7fa f94b 	bl	80002d0 <__aeabi_dsub>
 800603a:	a365      	add	r3, pc, #404	; (adr r3, 80061d0 <_dtoa_r+0x2b0>)
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f7fa fafe 	bl	8000640 <__aeabi_dmul>
 8006044:	a364      	add	r3, pc, #400	; (adr r3, 80061d8 <_dtoa_r+0x2b8>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa f943 	bl	80002d4 <__adddf3>
 800604e:	4606      	mov	r6, r0
 8006050:	4620      	mov	r0, r4
 8006052:	460f      	mov	r7, r1
 8006054:	f7fa fa8a 	bl	800056c <__aeabi_i2d>
 8006058:	a361      	add	r3, pc, #388	; (adr r3, 80061e0 <_dtoa_r+0x2c0>)
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	f7fa faef 	bl	8000640 <__aeabi_dmul>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4630      	mov	r0, r6
 8006068:	4639      	mov	r1, r7
 800606a:	f7fa f933 	bl	80002d4 <__adddf3>
 800606e:	4606      	mov	r6, r0
 8006070:	460f      	mov	r7, r1
 8006072:	f7fa fd95 	bl	8000ba0 <__aeabi_d2iz>
 8006076:	2200      	movs	r2, #0
 8006078:	4682      	mov	sl, r0
 800607a:	2300      	movs	r3, #0
 800607c:	4630      	mov	r0, r6
 800607e:	4639      	mov	r1, r7
 8006080:	f7fa fd50 	bl	8000b24 <__aeabi_dcmplt>
 8006084:	b148      	cbz	r0, 800609a <_dtoa_r+0x17a>
 8006086:	4650      	mov	r0, sl
 8006088:	f7fa fa70 	bl	800056c <__aeabi_i2d>
 800608c:	4632      	mov	r2, r6
 800608e:	463b      	mov	r3, r7
 8006090:	f7fa fd3e 	bl	8000b10 <__aeabi_dcmpeq>
 8006094:	b908      	cbnz	r0, 800609a <_dtoa_r+0x17a>
 8006096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800609a:	f1ba 0f16 	cmp.w	sl, #22
 800609e:	d858      	bhi.n	8006152 <_dtoa_r+0x232>
 80060a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060a4:	4b57      	ldr	r3, [pc, #348]	; (8006204 <_dtoa_r+0x2e4>)
 80060a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f7fa fd39 	bl	8000b24 <__aeabi_dcmplt>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d04f      	beq.n	8006156 <_dtoa_r+0x236>
 80060b6:	2300      	movs	r3, #0
 80060b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80060be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060c0:	1b1c      	subs	r4, r3, r4
 80060c2:	1e63      	subs	r3, r4, #1
 80060c4:	9309      	str	r3, [sp, #36]	; 0x24
 80060c6:	bf49      	itett	mi
 80060c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80060cc:	2300      	movpl	r3, #0
 80060ce:	9306      	strmi	r3, [sp, #24]
 80060d0:	2300      	movmi	r3, #0
 80060d2:	bf54      	ite	pl
 80060d4:	9306      	strpl	r3, [sp, #24]
 80060d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80060d8:	f1ba 0f00 	cmp.w	sl, #0
 80060dc:	db3d      	blt.n	800615a <_dtoa_r+0x23a>
 80060de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80060e4:	4453      	add	r3, sl
 80060e6:	9309      	str	r3, [sp, #36]	; 0x24
 80060e8:	2300      	movs	r3, #0
 80060ea:	930a      	str	r3, [sp, #40]	; 0x28
 80060ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	f200 808c 	bhi.w	800620c <_dtoa_r+0x2ec>
 80060f4:	2b05      	cmp	r3, #5
 80060f6:	bfc4      	itt	gt
 80060f8:	3b04      	subgt	r3, #4
 80060fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80060fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060fe:	bfc8      	it	gt
 8006100:	2400      	movgt	r4, #0
 8006102:	f1a3 0302 	sub.w	r3, r3, #2
 8006106:	bfd8      	it	le
 8006108:	2401      	movle	r4, #1
 800610a:	2b03      	cmp	r3, #3
 800610c:	f200 808a 	bhi.w	8006224 <_dtoa_r+0x304>
 8006110:	e8df f003 	tbb	[pc, r3]
 8006114:	5b4d4f2d 	.word	0x5b4d4f2d
 8006118:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800611c:	441c      	add	r4, r3
 800611e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006122:	2b20      	cmp	r3, #32
 8006124:	bfc3      	ittte	gt
 8006126:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800612a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800612e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006132:	f1c3 0320 	rsble	r3, r3, #32
 8006136:	bfc6      	itte	gt
 8006138:	fa26 f000 	lsrgt.w	r0, r6, r0
 800613c:	4318      	orrgt	r0, r3
 800613e:	fa06 f003 	lslle.w	r0, r6, r3
 8006142:	f7fa fa03 	bl	800054c <__aeabi_ui2d>
 8006146:	2301      	movs	r3, #1
 8006148:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800614c:	3c01      	subs	r4, #1
 800614e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006150:	e76f      	b.n	8006032 <_dtoa_r+0x112>
 8006152:	2301      	movs	r3, #1
 8006154:	e7b2      	b.n	80060bc <_dtoa_r+0x19c>
 8006156:	900f      	str	r0, [sp, #60]	; 0x3c
 8006158:	e7b1      	b.n	80060be <_dtoa_r+0x19e>
 800615a:	9b06      	ldr	r3, [sp, #24]
 800615c:	eba3 030a 	sub.w	r3, r3, sl
 8006160:	9306      	str	r3, [sp, #24]
 8006162:	f1ca 0300 	rsb	r3, sl, #0
 8006166:	930a      	str	r3, [sp, #40]	; 0x28
 8006168:	2300      	movs	r3, #0
 800616a:	930e      	str	r3, [sp, #56]	; 0x38
 800616c:	e7be      	b.n	80060ec <_dtoa_r+0x1cc>
 800616e:	2300      	movs	r3, #0
 8006170:	930b      	str	r3, [sp, #44]	; 0x2c
 8006172:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006174:	2b00      	cmp	r3, #0
 8006176:	dc58      	bgt.n	800622a <_dtoa_r+0x30a>
 8006178:	f04f 0901 	mov.w	r9, #1
 800617c:	464b      	mov	r3, r9
 800617e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006182:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006186:	2200      	movs	r2, #0
 8006188:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800618a:	6042      	str	r2, [r0, #4]
 800618c:	2204      	movs	r2, #4
 800618e:	f102 0614 	add.w	r6, r2, #20
 8006192:	429e      	cmp	r6, r3
 8006194:	6841      	ldr	r1, [r0, #4]
 8006196:	d94e      	bls.n	8006236 <_dtoa_r+0x316>
 8006198:	4628      	mov	r0, r5
 800619a:	f000 fef3 	bl	8006f84 <_Balloc>
 800619e:	9003      	str	r0, [sp, #12]
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d14c      	bne.n	800623e <_dtoa_r+0x31e>
 80061a4:	4602      	mov	r2, r0
 80061a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061aa:	4b17      	ldr	r3, [pc, #92]	; (8006208 <_dtoa_r+0x2e8>)
 80061ac:	e6cc      	b.n	8005f48 <_dtoa_r+0x28>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e7de      	b.n	8006170 <_dtoa_r+0x250>
 80061b2:	2300      	movs	r3, #0
 80061b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80061b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061b8:	eb0a 0903 	add.w	r9, sl, r3
 80061bc:	f109 0301 	add.w	r3, r9, #1
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	9308      	str	r3, [sp, #32]
 80061c4:	bfb8      	it	lt
 80061c6:	2301      	movlt	r3, #1
 80061c8:	e7dd      	b.n	8006186 <_dtoa_r+0x266>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e7f2      	b.n	80061b4 <_dtoa_r+0x294>
 80061ce:	bf00      	nop
 80061d0:	636f4361 	.word	0x636f4361
 80061d4:	3fd287a7 	.word	0x3fd287a7
 80061d8:	8b60c8b3 	.word	0x8b60c8b3
 80061dc:	3fc68a28 	.word	0x3fc68a28
 80061e0:	509f79fb 	.word	0x509f79fb
 80061e4:	3fd34413 	.word	0x3fd34413
 80061e8:	080083a5 	.word	0x080083a5
 80061ec:	080083bc 	.word	0x080083bc
 80061f0:	7ff00000 	.word	0x7ff00000
 80061f4:	080083a1 	.word	0x080083a1
 80061f8:	08008398 	.word	0x08008398
 80061fc:	08008375 	.word	0x08008375
 8006200:	3ff80000 	.word	0x3ff80000
 8006204:	08008510 	.word	0x08008510
 8006208:	08008417 	.word	0x08008417
 800620c:	2401      	movs	r4, #1
 800620e:	2300      	movs	r3, #0
 8006210:	940b      	str	r4, [sp, #44]	; 0x2c
 8006212:	9322      	str	r3, [sp, #136]	; 0x88
 8006214:	f04f 39ff 	mov.w	r9, #4294967295
 8006218:	2200      	movs	r2, #0
 800621a:	2312      	movs	r3, #18
 800621c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006220:	9223      	str	r2, [sp, #140]	; 0x8c
 8006222:	e7b0      	b.n	8006186 <_dtoa_r+0x266>
 8006224:	2301      	movs	r3, #1
 8006226:	930b      	str	r3, [sp, #44]	; 0x2c
 8006228:	e7f4      	b.n	8006214 <_dtoa_r+0x2f4>
 800622a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800622e:	464b      	mov	r3, r9
 8006230:	f8cd 9020 	str.w	r9, [sp, #32]
 8006234:	e7a7      	b.n	8006186 <_dtoa_r+0x266>
 8006236:	3101      	adds	r1, #1
 8006238:	6041      	str	r1, [r0, #4]
 800623a:	0052      	lsls	r2, r2, #1
 800623c:	e7a7      	b.n	800618e <_dtoa_r+0x26e>
 800623e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006240:	9a03      	ldr	r2, [sp, #12]
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	9b08      	ldr	r3, [sp, #32]
 8006246:	2b0e      	cmp	r3, #14
 8006248:	f200 80a8 	bhi.w	800639c <_dtoa_r+0x47c>
 800624c:	2c00      	cmp	r4, #0
 800624e:	f000 80a5 	beq.w	800639c <_dtoa_r+0x47c>
 8006252:	f1ba 0f00 	cmp.w	sl, #0
 8006256:	dd34      	ble.n	80062c2 <_dtoa_r+0x3a2>
 8006258:	4a9a      	ldr	r2, [pc, #616]	; (80064c4 <_dtoa_r+0x5a4>)
 800625a:	f00a 030f 	and.w	r3, sl, #15
 800625e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006262:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006266:	e9d3 3400 	ldrd	r3, r4, [r3]
 800626a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800626e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006272:	d016      	beq.n	80062a2 <_dtoa_r+0x382>
 8006274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006278:	4b93      	ldr	r3, [pc, #588]	; (80064c8 <_dtoa_r+0x5a8>)
 800627a:	2703      	movs	r7, #3
 800627c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006280:	f7fa fb08 	bl	8000894 <__aeabi_ddiv>
 8006284:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006288:	f004 040f 	and.w	r4, r4, #15
 800628c:	4e8e      	ldr	r6, [pc, #568]	; (80064c8 <_dtoa_r+0x5a8>)
 800628e:	b954      	cbnz	r4, 80062a6 <_dtoa_r+0x386>
 8006290:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006298:	f7fa fafc 	bl	8000894 <__aeabi_ddiv>
 800629c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062a0:	e029      	b.n	80062f6 <_dtoa_r+0x3d6>
 80062a2:	2702      	movs	r7, #2
 80062a4:	e7f2      	b.n	800628c <_dtoa_r+0x36c>
 80062a6:	07e1      	lsls	r1, r4, #31
 80062a8:	d508      	bpl.n	80062bc <_dtoa_r+0x39c>
 80062aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062b2:	f7fa f9c5 	bl	8000640 <__aeabi_dmul>
 80062b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062ba:	3701      	adds	r7, #1
 80062bc:	1064      	asrs	r4, r4, #1
 80062be:	3608      	adds	r6, #8
 80062c0:	e7e5      	b.n	800628e <_dtoa_r+0x36e>
 80062c2:	f000 80a5 	beq.w	8006410 <_dtoa_r+0x4f0>
 80062c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062ca:	f1ca 0400 	rsb	r4, sl, #0
 80062ce:	4b7d      	ldr	r3, [pc, #500]	; (80064c4 <_dtoa_r+0x5a4>)
 80062d0:	f004 020f 	and.w	r2, r4, #15
 80062d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7fa f9b0 	bl	8000640 <__aeabi_dmul>
 80062e0:	2702      	movs	r7, #2
 80062e2:	2300      	movs	r3, #0
 80062e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062e8:	4e77      	ldr	r6, [pc, #476]	; (80064c8 <_dtoa_r+0x5a8>)
 80062ea:	1124      	asrs	r4, r4, #4
 80062ec:	2c00      	cmp	r4, #0
 80062ee:	f040 8084 	bne.w	80063fa <_dtoa_r+0x4da>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1d2      	bne.n	800629c <_dtoa_r+0x37c>
 80062f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 808b 	beq.w	8006414 <_dtoa_r+0x4f4>
 80062fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006302:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006306:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800630a:	2200      	movs	r2, #0
 800630c:	4b6f      	ldr	r3, [pc, #444]	; (80064cc <_dtoa_r+0x5ac>)
 800630e:	f7fa fc09 	bl	8000b24 <__aeabi_dcmplt>
 8006312:	2800      	cmp	r0, #0
 8006314:	d07e      	beq.n	8006414 <_dtoa_r+0x4f4>
 8006316:	9b08      	ldr	r3, [sp, #32]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d07b      	beq.n	8006414 <_dtoa_r+0x4f4>
 800631c:	f1b9 0f00 	cmp.w	r9, #0
 8006320:	dd38      	ble.n	8006394 <_dtoa_r+0x474>
 8006322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006326:	2200      	movs	r2, #0
 8006328:	4b69      	ldr	r3, [pc, #420]	; (80064d0 <_dtoa_r+0x5b0>)
 800632a:	f7fa f989 	bl	8000640 <__aeabi_dmul>
 800632e:	464c      	mov	r4, r9
 8006330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006334:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006338:	3701      	adds	r7, #1
 800633a:	4638      	mov	r0, r7
 800633c:	f7fa f916 	bl	800056c <__aeabi_i2d>
 8006340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006344:	f7fa f97c 	bl	8000640 <__aeabi_dmul>
 8006348:	2200      	movs	r2, #0
 800634a:	4b62      	ldr	r3, [pc, #392]	; (80064d4 <_dtoa_r+0x5b4>)
 800634c:	f7f9 ffc2 	bl	80002d4 <__adddf3>
 8006350:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006354:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006358:	9611      	str	r6, [sp, #68]	; 0x44
 800635a:	2c00      	cmp	r4, #0
 800635c:	d15d      	bne.n	800641a <_dtoa_r+0x4fa>
 800635e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006362:	2200      	movs	r2, #0
 8006364:	4b5c      	ldr	r3, [pc, #368]	; (80064d8 <_dtoa_r+0x5b8>)
 8006366:	f7f9 ffb3 	bl	80002d0 <__aeabi_dsub>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006372:	4633      	mov	r3, r6
 8006374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006376:	f7fa fbf3 	bl	8000b60 <__aeabi_dcmpgt>
 800637a:	2800      	cmp	r0, #0
 800637c:	f040 829c 	bne.w	80068b8 <_dtoa_r+0x998>
 8006380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006384:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006386:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800638a:	f7fa fbcb 	bl	8000b24 <__aeabi_dcmplt>
 800638e:	2800      	cmp	r0, #0
 8006390:	f040 8290 	bne.w	80068b4 <_dtoa_r+0x994>
 8006394:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006398:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800639c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f2c0 8152 	blt.w	8006648 <_dtoa_r+0x728>
 80063a4:	f1ba 0f0e 	cmp.w	sl, #14
 80063a8:	f300 814e 	bgt.w	8006648 <_dtoa_r+0x728>
 80063ac:	4b45      	ldr	r3, [pc, #276]	; (80064c4 <_dtoa_r+0x5a4>)
 80063ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80063ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f280 80db 	bge.w	8006578 <_dtoa_r+0x658>
 80063c2:	9b08      	ldr	r3, [sp, #32]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f300 80d7 	bgt.w	8006578 <_dtoa_r+0x658>
 80063ca:	f040 8272 	bne.w	80068b2 <_dtoa_r+0x992>
 80063ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063d2:	2200      	movs	r2, #0
 80063d4:	4b40      	ldr	r3, [pc, #256]	; (80064d8 <_dtoa_r+0x5b8>)
 80063d6:	f7fa f933 	bl	8000640 <__aeabi_dmul>
 80063da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063de:	f7fa fbb5 	bl	8000b4c <__aeabi_dcmpge>
 80063e2:	9c08      	ldr	r4, [sp, #32]
 80063e4:	4626      	mov	r6, r4
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f040 8248 	bne.w	800687c <_dtoa_r+0x95c>
 80063ec:	2331      	movs	r3, #49	; 0x31
 80063ee:	9f03      	ldr	r7, [sp, #12]
 80063f0:	f10a 0a01 	add.w	sl, sl, #1
 80063f4:	f807 3b01 	strb.w	r3, [r7], #1
 80063f8:	e244      	b.n	8006884 <_dtoa_r+0x964>
 80063fa:	07e2      	lsls	r2, r4, #31
 80063fc:	d505      	bpl.n	800640a <_dtoa_r+0x4ea>
 80063fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006402:	f7fa f91d 	bl	8000640 <__aeabi_dmul>
 8006406:	2301      	movs	r3, #1
 8006408:	3701      	adds	r7, #1
 800640a:	1064      	asrs	r4, r4, #1
 800640c:	3608      	adds	r6, #8
 800640e:	e76d      	b.n	80062ec <_dtoa_r+0x3cc>
 8006410:	2702      	movs	r7, #2
 8006412:	e770      	b.n	80062f6 <_dtoa_r+0x3d6>
 8006414:	46d0      	mov	r8, sl
 8006416:	9c08      	ldr	r4, [sp, #32]
 8006418:	e78f      	b.n	800633a <_dtoa_r+0x41a>
 800641a:	9903      	ldr	r1, [sp, #12]
 800641c:	4b29      	ldr	r3, [pc, #164]	; (80064c4 <_dtoa_r+0x5a4>)
 800641e:	4421      	add	r1, r4
 8006420:	9112      	str	r1, [sp, #72]	; 0x48
 8006422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006428:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800642c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006430:	2900      	cmp	r1, #0
 8006432:	d055      	beq.n	80064e0 <_dtoa_r+0x5c0>
 8006434:	2000      	movs	r0, #0
 8006436:	4929      	ldr	r1, [pc, #164]	; (80064dc <_dtoa_r+0x5bc>)
 8006438:	f7fa fa2c 	bl	8000894 <__aeabi_ddiv>
 800643c:	463b      	mov	r3, r7
 800643e:	4632      	mov	r2, r6
 8006440:	f7f9 ff46 	bl	80002d0 <__aeabi_dsub>
 8006444:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006448:	9f03      	ldr	r7, [sp, #12]
 800644a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800644e:	f7fa fba7 	bl	8000ba0 <__aeabi_d2iz>
 8006452:	4604      	mov	r4, r0
 8006454:	f7fa f88a 	bl	800056c <__aeabi_i2d>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006460:	f7f9 ff36 	bl	80002d0 <__aeabi_dsub>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	3430      	adds	r4, #48	; 0x30
 800646a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800646e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006472:	f807 4b01 	strb.w	r4, [r7], #1
 8006476:	f7fa fb55 	bl	8000b24 <__aeabi_dcmplt>
 800647a:	2800      	cmp	r0, #0
 800647c:	d174      	bne.n	8006568 <_dtoa_r+0x648>
 800647e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006482:	2000      	movs	r0, #0
 8006484:	4911      	ldr	r1, [pc, #68]	; (80064cc <_dtoa_r+0x5ac>)
 8006486:	f7f9 ff23 	bl	80002d0 <__aeabi_dsub>
 800648a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800648e:	f7fa fb49 	bl	8000b24 <__aeabi_dcmplt>
 8006492:	2800      	cmp	r0, #0
 8006494:	f040 80b7 	bne.w	8006606 <_dtoa_r+0x6e6>
 8006498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800649a:	429f      	cmp	r7, r3
 800649c:	f43f af7a 	beq.w	8006394 <_dtoa_r+0x474>
 80064a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064a4:	2200      	movs	r2, #0
 80064a6:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <_dtoa_r+0x5b0>)
 80064a8:	f7fa f8ca 	bl	8000640 <__aeabi_dmul>
 80064ac:	2200      	movs	r2, #0
 80064ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <_dtoa_r+0x5b0>)
 80064b8:	f7fa f8c2 	bl	8000640 <__aeabi_dmul>
 80064bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064c0:	e7c3      	b.n	800644a <_dtoa_r+0x52a>
 80064c2:	bf00      	nop
 80064c4:	08008510 	.word	0x08008510
 80064c8:	080084e8 	.word	0x080084e8
 80064cc:	3ff00000 	.word	0x3ff00000
 80064d0:	40240000 	.word	0x40240000
 80064d4:	401c0000 	.word	0x401c0000
 80064d8:	40140000 	.word	0x40140000
 80064dc:	3fe00000 	.word	0x3fe00000
 80064e0:	4630      	mov	r0, r6
 80064e2:	4639      	mov	r1, r7
 80064e4:	f7fa f8ac 	bl	8000640 <__aeabi_dmul>
 80064e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064ee:	9c03      	ldr	r4, [sp, #12]
 80064f0:	9314      	str	r3, [sp, #80]	; 0x50
 80064f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064f6:	f7fa fb53 	bl	8000ba0 <__aeabi_d2iz>
 80064fa:	9015      	str	r0, [sp, #84]	; 0x54
 80064fc:	f7fa f836 	bl	800056c <__aeabi_i2d>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006508:	f7f9 fee2 	bl	80002d0 <__aeabi_dsub>
 800650c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800650e:	4606      	mov	r6, r0
 8006510:	3330      	adds	r3, #48	; 0x30
 8006512:	f804 3b01 	strb.w	r3, [r4], #1
 8006516:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006518:	460f      	mov	r7, r1
 800651a:	429c      	cmp	r4, r3
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	d124      	bne.n	800656c <_dtoa_r+0x64c>
 8006522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006526:	4bb0      	ldr	r3, [pc, #704]	; (80067e8 <_dtoa_r+0x8c8>)
 8006528:	f7f9 fed4 	bl	80002d4 <__adddf3>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4630      	mov	r0, r6
 8006532:	4639      	mov	r1, r7
 8006534:	f7fa fb14 	bl	8000b60 <__aeabi_dcmpgt>
 8006538:	2800      	cmp	r0, #0
 800653a:	d163      	bne.n	8006604 <_dtoa_r+0x6e4>
 800653c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006540:	2000      	movs	r0, #0
 8006542:	49a9      	ldr	r1, [pc, #676]	; (80067e8 <_dtoa_r+0x8c8>)
 8006544:	f7f9 fec4 	bl	80002d0 <__aeabi_dsub>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4630      	mov	r0, r6
 800654e:	4639      	mov	r1, r7
 8006550:	f7fa fae8 	bl	8000b24 <__aeabi_dcmplt>
 8006554:	2800      	cmp	r0, #0
 8006556:	f43f af1d 	beq.w	8006394 <_dtoa_r+0x474>
 800655a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800655c:	1e7b      	subs	r3, r7, #1
 800655e:	9314      	str	r3, [sp, #80]	; 0x50
 8006560:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006564:	2b30      	cmp	r3, #48	; 0x30
 8006566:	d0f8      	beq.n	800655a <_dtoa_r+0x63a>
 8006568:	46c2      	mov	sl, r8
 800656a:	e03b      	b.n	80065e4 <_dtoa_r+0x6c4>
 800656c:	4b9f      	ldr	r3, [pc, #636]	; (80067ec <_dtoa_r+0x8cc>)
 800656e:	f7fa f867 	bl	8000640 <__aeabi_dmul>
 8006572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006576:	e7bc      	b.n	80064f2 <_dtoa_r+0x5d2>
 8006578:	9f03      	ldr	r7, [sp, #12]
 800657a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800657e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	f7fa f985 	bl	8000894 <__aeabi_ddiv>
 800658a:	f7fa fb09 	bl	8000ba0 <__aeabi_d2iz>
 800658e:	4604      	mov	r4, r0
 8006590:	f7f9 ffec 	bl	800056c <__aeabi_i2d>
 8006594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006598:	f7fa f852 	bl	8000640 <__aeabi_dmul>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4640      	mov	r0, r8
 80065a2:	4649      	mov	r1, r9
 80065a4:	f7f9 fe94 	bl	80002d0 <__aeabi_dsub>
 80065a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80065ac:	f807 6b01 	strb.w	r6, [r7], #1
 80065b0:	9e03      	ldr	r6, [sp, #12]
 80065b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80065b6:	1bbe      	subs	r6, r7, r6
 80065b8:	45b4      	cmp	ip, r6
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	d136      	bne.n	800662e <_dtoa_r+0x70e>
 80065c0:	f7f9 fe88 	bl	80002d4 <__adddf3>
 80065c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065c8:	4680      	mov	r8, r0
 80065ca:	4689      	mov	r9, r1
 80065cc:	f7fa fac8 	bl	8000b60 <__aeabi_dcmpgt>
 80065d0:	bb58      	cbnz	r0, 800662a <_dtoa_r+0x70a>
 80065d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065d6:	4640      	mov	r0, r8
 80065d8:	4649      	mov	r1, r9
 80065da:	f7fa fa99 	bl	8000b10 <__aeabi_dcmpeq>
 80065de:	b108      	cbz	r0, 80065e4 <_dtoa_r+0x6c4>
 80065e0:	07e1      	lsls	r1, r4, #31
 80065e2:	d422      	bmi.n	800662a <_dtoa_r+0x70a>
 80065e4:	4628      	mov	r0, r5
 80065e6:	4659      	mov	r1, fp
 80065e8:	f000 fd0c 	bl	8007004 <_Bfree>
 80065ec:	2300      	movs	r3, #0
 80065ee:	703b      	strb	r3, [r7, #0]
 80065f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80065f2:	f10a 0001 	add.w	r0, sl, #1
 80065f6:	6018      	str	r0, [r3, #0]
 80065f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f43f acde 	beq.w	8005fbc <_dtoa_r+0x9c>
 8006600:	601f      	str	r7, [r3, #0]
 8006602:	e4db      	b.n	8005fbc <_dtoa_r+0x9c>
 8006604:	4627      	mov	r7, r4
 8006606:	463b      	mov	r3, r7
 8006608:	461f      	mov	r7, r3
 800660a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800660e:	2a39      	cmp	r2, #57	; 0x39
 8006610:	d107      	bne.n	8006622 <_dtoa_r+0x702>
 8006612:	9a03      	ldr	r2, [sp, #12]
 8006614:	429a      	cmp	r2, r3
 8006616:	d1f7      	bne.n	8006608 <_dtoa_r+0x6e8>
 8006618:	2230      	movs	r2, #48	; 0x30
 800661a:	9903      	ldr	r1, [sp, #12]
 800661c:	f108 0801 	add.w	r8, r8, #1
 8006620:	700a      	strb	r2, [r1, #0]
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	3201      	adds	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	e79e      	b.n	8006568 <_dtoa_r+0x648>
 800662a:	46d0      	mov	r8, sl
 800662c:	e7eb      	b.n	8006606 <_dtoa_r+0x6e6>
 800662e:	2200      	movs	r2, #0
 8006630:	4b6e      	ldr	r3, [pc, #440]	; (80067ec <_dtoa_r+0x8cc>)
 8006632:	f7fa f805 	bl	8000640 <__aeabi_dmul>
 8006636:	2200      	movs	r2, #0
 8006638:	2300      	movs	r3, #0
 800663a:	4680      	mov	r8, r0
 800663c:	4689      	mov	r9, r1
 800663e:	f7fa fa67 	bl	8000b10 <__aeabi_dcmpeq>
 8006642:	2800      	cmp	r0, #0
 8006644:	d09b      	beq.n	800657e <_dtoa_r+0x65e>
 8006646:	e7cd      	b.n	80065e4 <_dtoa_r+0x6c4>
 8006648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800664a:	2a00      	cmp	r2, #0
 800664c:	f000 80d0 	beq.w	80067f0 <_dtoa_r+0x8d0>
 8006650:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006652:	2a01      	cmp	r2, #1
 8006654:	f300 80ae 	bgt.w	80067b4 <_dtoa_r+0x894>
 8006658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800665a:	2a00      	cmp	r2, #0
 800665c:	f000 80a6 	beq.w	80067ac <_dtoa_r+0x88c>
 8006660:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006664:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006666:	9f06      	ldr	r7, [sp, #24]
 8006668:	9a06      	ldr	r2, [sp, #24]
 800666a:	2101      	movs	r1, #1
 800666c:	441a      	add	r2, r3
 800666e:	9206      	str	r2, [sp, #24]
 8006670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006672:	4628      	mov	r0, r5
 8006674:	441a      	add	r2, r3
 8006676:	9209      	str	r2, [sp, #36]	; 0x24
 8006678:	f000 fd7a 	bl	8007170 <__i2b>
 800667c:	4606      	mov	r6, r0
 800667e:	2f00      	cmp	r7, #0
 8006680:	dd0c      	ble.n	800669c <_dtoa_r+0x77c>
 8006682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006684:	2b00      	cmp	r3, #0
 8006686:	dd09      	ble.n	800669c <_dtoa_r+0x77c>
 8006688:	42bb      	cmp	r3, r7
 800668a:	bfa8      	it	ge
 800668c:	463b      	movge	r3, r7
 800668e:	9a06      	ldr	r2, [sp, #24]
 8006690:	1aff      	subs	r7, r7, r3
 8006692:	1ad2      	subs	r2, r2, r3
 8006694:	9206      	str	r2, [sp, #24]
 8006696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	9309      	str	r3, [sp, #36]	; 0x24
 800669c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669e:	b1f3      	cbz	r3, 80066de <_dtoa_r+0x7be>
 80066a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 80a8 	beq.w	80067f8 <_dtoa_r+0x8d8>
 80066a8:	2c00      	cmp	r4, #0
 80066aa:	dd10      	ble.n	80066ce <_dtoa_r+0x7ae>
 80066ac:	4631      	mov	r1, r6
 80066ae:	4622      	mov	r2, r4
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 fe1b 	bl	80072ec <__pow5mult>
 80066b6:	465a      	mov	r2, fp
 80066b8:	4601      	mov	r1, r0
 80066ba:	4606      	mov	r6, r0
 80066bc:	4628      	mov	r0, r5
 80066be:	f000 fd6d 	bl	800719c <__multiply>
 80066c2:	4680      	mov	r8, r0
 80066c4:	4659      	mov	r1, fp
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 fc9c 	bl	8007004 <_Bfree>
 80066cc:	46c3      	mov	fp, r8
 80066ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d0:	1b1a      	subs	r2, r3, r4
 80066d2:	d004      	beq.n	80066de <_dtoa_r+0x7be>
 80066d4:	4659      	mov	r1, fp
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 fe08 	bl	80072ec <__pow5mult>
 80066dc:	4683      	mov	fp, r0
 80066de:	2101      	movs	r1, #1
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 fd45 	bl	8007170 <__i2b>
 80066e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e8:	4604      	mov	r4, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f340 8086 	ble.w	80067fc <_dtoa_r+0x8dc>
 80066f0:	461a      	mov	r2, r3
 80066f2:	4601      	mov	r1, r0
 80066f4:	4628      	mov	r0, r5
 80066f6:	f000 fdf9 	bl	80072ec <__pow5mult>
 80066fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066fc:	4604      	mov	r4, r0
 80066fe:	2b01      	cmp	r3, #1
 8006700:	dd7f      	ble.n	8006802 <_dtoa_r+0x8e2>
 8006702:	f04f 0800 	mov.w	r8, #0
 8006706:	6923      	ldr	r3, [r4, #16]
 8006708:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800670c:	6918      	ldr	r0, [r3, #16]
 800670e:	f000 fce1 	bl	80070d4 <__hi0bits>
 8006712:	f1c0 0020 	rsb	r0, r0, #32
 8006716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006718:	4418      	add	r0, r3
 800671a:	f010 001f 	ands.w	r0, r0, #31
 800671e:	f000 8092 	beq.w	8006846 <_dtoa_r+0x926>
 8006722:	f1c0 0320 	rsb	r3, r0, #32
 8006726:	2b04      	cmp	r3, #4
 8006728:	f340 808a 	ble.w	8006840 <_dtoa_r+0x920>
 800672c:	f1c0 001c 	rsb	r0, r0, #28
 8006730:	9b06      	ldr	r3, [sp, #24]
 8006732:	4407      	add	r7, r0
 8006734:	4403      	add	r3, r0
 8006736:	9306      	str	r3, [sp, #24]
 8006738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673a:	4403      	add	r3, r0
 800673c:	9309      	str	r3, [sp, #36]	; 0x24
 800673e:	9b06      	ldr	r3, [sp, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	dd05      	ble.n	8006750 <_dtoa_r+0x830>
 8006744:	4659      	mov	r1, fp
 8006746:	461a      	mov	r2, r3
 8006748:	4628      	mov	r0, r5
 800674a:	f000 fe29 	bl	80073a0 <__lshift>
 800674e:	4683      	mov	fp, r0
 8006750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006752:	2b00      	cmp	r3, #0
 8006754:	dd05      	ble.n	8006762 <_dtoa_r+0x842>
 8006756:	4621      	mov	r1, r4
 8006758:	461a      	mov	r2, r3
 800675a:	4628      	mov	r0, r5
 800675c:	f000 fe20 	bl	80073a0 <__lshift>
 8006760:	4604      	mov	r4, r0
 8006762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d070      	beq.n	800684a <_dtoa_r+0x92a>
 8006768:	4621      	mov	r1, r4
 800676a:	4658      	mov	r0, fp
 800676c:	f000 fe88 	bl	8007480 <__mcmp>
 8006770:	2800      	cmp	r0, #0
 8006772:	da6a      	bge.n	800684a <_dtoa_r+0x92a>
 8006774:	2300      	movs	r3, #0
 8006776:	4659      	mov	r1, fp
 8006778:	220a      	movs	r2, #10
 800677a:	4628      	mov	r0, r5
 800677c:	f000 fc64 	bl	8007048 <__multadd>
 8006780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006782:	4683      	mov	fp, r0
 8006784:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8194 	beq.w	8006ab6 <_dtoa_r+0xb96>
 800678e:	4631      	mov	r1, r6
 8006790:	2300      	movs	r3, #0
 8006792:	220a      	movs	r2, #10
 8006794:	4628      	mov	r0, r5
 8006796:	f000 fc57 	bl	8007048 <__multadd>
 800679a:	f1b9 0f00 	cmp.w	r9, #0
 800679e:	4606      	mov	r6, r0
 80067a0:	f300 8093 	bgt.w	80068ca <_dtoa_r+0x9aa>
 80067a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	dc57      	bgt.n	800685a <_dtoa_r+0x93a>
 80067aa:	e08e      	b.n	80068ca <_dtoa_r+0x9aa>
 80067ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067b2:	e757      	b.n	8006664 <_dtoa_r+0x744>
 80067b4:	9b08      	ldr	r3, [sp, #32]
 80067b6:	1e5c      	subs	r4, r3, #1
 80067b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ba:	42a3      	cmp	r3, r4
 80067bc:	bfb7      	itett	lt
 80067be:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80067c0:	1b1c      	subge	r4, r3, r4
 80067c2:	1ae2      	sublt	r2, r4, r3
 80067c4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80067c6:	bfbe      	ittt	lt
 80067c8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80067ca:	189b      	addlt	r3, r3, r2
 80067cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80067ce:	9b08      	ldr	r3, [sp, #32]
 80067d0:	bfb8      	it	lt
 80067d2:	2400      	movlt	r4, #0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bfbb      	ittet	lt
 80067d8:	9b06      	ldrlt	r3, [sp, #24]
 80067da:	9a08      	ldrlt	r2, [sp, #32]
 80067dc:	9f06      	ldrge	r7, [sp, #24]
 80067de:	1a9f      	sublt	r7, r3, r2
 80067e0:	bfac      	ite	ge
 80067e2:	9b08      	ldrge	r3, [sp, #32]
 80067e4:	2300      	movlt	r3, #0
 80067e6:	e73f      	b.n	8006668 <_dtoa_r+0x748>
 80067e8:	3fe00000 	.word	0x3fe00000
 80067ec:	40240000 	.word	0x40240000
 80067f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80067f2:	9f06      	ldr	r7, [sp, #24]
 80067f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80067f6:	e742      	b.n	800667e <_dtoa_r+0x75e>
 80067f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067fa:	e76b      	b.n	80066d4 <_dtoa_r+0x7b4>
 80067fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067fe:	2b01      	cmp	r3, #1
 8006800:	dc19      	bgt.n	8006836 <_dtoa_r+0x916>
 8006802:	9b04      	ldr	r3, [sp, #16]
 8006804:	b9bb      	cbnz	r3, 8006836 <_dtoa_r+0x916>
 8006806:	9b05      	ldr	r3, [sp, #20]
 8006808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800680c:	b99b      	cbnz	r3, 8006836 <_dtoa_r+0x916>
 800680e:	9b05      	ldr	r3, [sp, #20]
 8006810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006814:	0d1b      	lsrs	r3, r3, #20
 8006816:	051b      	lsls	r3, r3, #20
 8006818:	b183      	cbz	r3, 800683c <_dtoa_r+0x91c>
 800681a:	f04f 0801 	mov.w	r8, #1
 800681e:	9b06      	ldr	r3, [sp, #24]
 8006820:	3301      	adds	r3, #1
 8006822:	9306      	str	r3, [sp, #24]
 8006824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006826:	3301      	adds	r3, #1
 8006828:	9309      	str	r3, [sp, #36]	; 0x24
 800682a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800682c:	2b00      	cmp	r3, #0
 800682e:	f47f af6a 	bne.w	8006706 <_dtoa_r+0x7e6>
 8006832:	2001      	movs	r0, #1
 8006834:	e76f      	b.n	8006716 <_dtoa_r+0x7f6>
 8006836:	f04f 0800 	mov.w	r8, #0
 800683a:	e7f6      	b.n	800682a <_dtoa_r+0x90a>
 800683c:	4698      	mov	r8, r3
 800683e:	e7f4      	b.n	800682a <_dtoa_r+0x90a>
 8006840:	f43f af7d 	beq.w	800673e <_dtoa_r+0x81e>
 8006844:	4618      	mov	r0, r3
 8006846:	301c      	adds	r0, #28
 8006848:	e772      	b.n	8006730 <_dtoa_r+0x810>
 800684a:	9b08      	ldr	r3, [sp, #32]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dc36      	bgt.n	80068be <_dtoa_r+0x99e>
 8006850:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006852:	2b02      	cmp	r3, #2
 8006854:	dd33      	ble.n	80068be <_dtoa_r+0x99e>
 8006856:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800685a:	f1b9 0f00 	cmp.w	r9, #0
 800685e:	d10d      	bne.n	800687c <_dtoa_r+0x95c>
 8006860:	4621      	mov	r1, r4
 8006862:	464b      	mov	r3, r9
 8006864:	2205      	movs	r2, #5
 8006866:	4628      	mov	r0, r5
 8006868:	f000 fbee 	bl	8007048 <__multadd>
 800686c:	4601      	mov	r1, r0
 800686e:	4604      	mov	r4, r0
 8006870:	4658      	mov	r0, fp
 8006872:	f000 fe05 	bl	8007480 <__mcmp>
 8006876:	2800      	cmp	r0, #0
 8006878:	f73f adb8 	bgt.w	80063ec <_dtoa_r+0x4cc>
 800687c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800687e:	9f03      	ldr	r7, [sp, #12]
 8006880:	ea6f 0a03 	mvn.w	sl, r3
 8006884:	f04f 0800 	mov.w	r8, #0
 8006888:	4621      	mov	r1, r4
 800688a:	4628      	mov	r0, r5
 800688c:	f000 fbba 	bl	8007004 <_Bfree>
 8006890:	2e00      	cmp	r6, #0
 8006892:	f43f aea7 	beq.w	80065e4 <_dtoa_r+0x6c4>
 8006896:	f1b8 0f00 	cmp.w	r8, #0
 800689a:	d005      	beq.n	80068a8 <_dtoa_r+0x988>
 800689c:	45b0      	cmp	r8, r6
 800689e:	d003      	beq.n	80068a8 <_dtoa_r+0x988>
 80068a0:	4641      	mov	r1, r8
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 fbae 	bl	8007004 <_Bfree>
 80068a8:	4631      	mov	r1, r6
 80068aa:	4628      	mov	r0, r5
 80068ac:	f000 fbaa 	bl	8007004 <_Bfree>
 80068b0:	e698      	b.n	80065e4 <_dtoa_r+0x6c4>
 80068b2:	2400      	movs	r4, #0
 80068b4:	4626      	mov	r6, r4
 80068b6:	e7e1      	b.n	800687c <_dtoa_r+0x95c>
 80068b8:	46c2      	mov	sl, r8
 80068ba:	4626      	mov	r6, r4
 80068bc:	e596      	b.n	80063ec <_dtoa_r+0x4cc>
 80068be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80fd 	beq.w	8006ac4 <_dtoa_r+0xba4>
 80068ca:	2f00      	cmp	r7, #0
 80068cc:	dd05      	ble.n	80068da <_dtoa_r+0x9ba>
 80068ce:	4631      	mov	r1, r6
 80068d0:	463a      	mov	r2, r7
 80068d2:	4628      	mov	r0, r5
 80068d4:	f000 fd64 	bl	80073a0 <__lshift>
 80068d8:	4606      	mov	r6, r0
 80068da:	f1b8 0f00 	cmp.w	r8, #0
 80068de:	d05c      	beq.n	800699a <_dtoa_r+0xa7a>
 80068e0:	4628      	mov	r0, r5
 80068e2:	6871      	ldr	r1, [r6, #4]
 80068e4:	f000 fb4e 	bl	8006f84 <_Balloc>
 80068e8:	4607      	mov	r7, r0
 80068ea:	b928      	cbnz	r0, 80068f8 <_dtoa_r+0x9d8>
 80068ec:	4602      	mov	r2, r0
 80068ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068f2:	4b7f      	ldr	r3, [pc, #508]	; (8006af0 <_dtoa_r+0xbd0>)
 80068f4:	f7ff bb28 	b.w	8005f48 <_dtoa_r+0x28>
 80068f8:	6932      	ldr	r2, [r6, #16]
 80068fa:	f106 010c 	add.w	r1, r6, #12
 80068fe:	3202      	adds	r2, #2
 8006900:	0092      	lsls	r2, r2, #2
 8006902:	300c      	adds	r0, #12
 8006904:	f000 fb30 	bl	8006f68 <memcpy>
 8006908:	2201      	movs	r2, #1
 800690a:	4639      	mov	r1, r7
 800690c:	4628      	mov	r0, r5
 800690e:	f000 fd47 	bl	80073a0 <__lshift>
 8006912:	46b0      	mov	r8, r6
 8006914:	4606      	mov	r6, r0
 8006916:	9b03      	ldr	r3, [sp, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	9308      	str	r3, [sp, #32]
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	444b      	add	r3, r9
 8006920:	930a      	str	r3, [sp, #40]	; 0x28
 8006922:	9b04      	ldr	r3, [sp, #16]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	9309      	str	r3, [sp, #36]	; 0x24
 800692a:	9b08      	ldr	r3, [sp, #32]
 800692c:	4621      	mov	r1, r4
 800692e:	3b01      	subs	r3, #1
 8006930:	4658      	mov	r0, fp
 8006932:	9304      	str	r3, [sp, #16]
 8006934:	f7ff fa68 	bl	8005e08 <quorem>
 8006938:	4603      	mov	r3, r0
 800693a:	4641      	mov	r1, r8
 800693c:	3330      	adds	r3, #48	; 0x30
 800693e:	9006      	str	r0, [sp, #24]
 8006940:	4658      	mov	r0, fp
 8006942:	930b      	str	r3, [sp, #44]	; 0x2c
 8006944:	f000 fd9c 	bl	8007480 <__mcmp>
 8006948:	4632      	mov	r2, r6
 800694a:	4681      	mov	r9, r0
 800694c:	4621      	mov	r1, r4
 800694e:	4628      	mov	r0, r5
 8006950:	f000 fdb2 	bl	80074b8 <__mdiff>
 8006954:	68c2      	ldr	r2, [r0, #12]
 8006956:	4607      	mov	r7, r0
 8006958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695a:	bb02      	cbnz	r2, 800699e <_dtoa_r+0xa7e>
 800695c:	4601      	mov	r1, r0
 800695e:	4658      	mov	r0, fp
 8006960:	f000 fd8e 	bl	8007480 <__mcmp>
 8006964:	4602      	mov	r2, r0
 8006966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006968:	4639      	mov	r1, r7
 800696a:	4628      	mov	r0, r5
 800696c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006970:	f000 fb48 	bl	8007004 <_Bfree>
 8006974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006978:	9f08      	ldr	r7, [sp, #32]
 800697a:	ea43 0102 	orr.w	r1, r3, r2
 800697e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006980:	430b      	orrs	r3, r1
 8006982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006984:	d10d      	bne.n	80069a2 <_dtoa_r+0xa82>
 8006986:	2b39      	cmp	r3, #57	; 0x39
 8006988:	d029      	beq.n	80069de <_dtoa_r+0xabe>
 800698a:	f1b9 0f00 	cmp.w	r9, #0
 800698e:	dd01      	ble.n	8006994 <_dtoa_r+0xa74>
 8006990:	9b06      	ldr	r3, [sp, #24]
 8006992:	3331      	adds	r3, #49	; 0x31
 8006994:	9a04      	ldr	r2, [sp, #16]
 8006996:	7013      	strb	r3, [r2, #0]
 8006998:	e776      	b.n	8006888 <_dtoa_r+0x968>
 800699a:	4630      	mov	r0, r6
 800699c:	e7b9      	b.n	8006912 <_dtoa_r+0x9f2>
 800699e:	2201      	movs	r2, #1
 80069a0:	e7e2      	b.n	8006968 <_dtoa_r+0xa48>
 80069a2:	f1b9 0f00 	cmp.w	r9, #0
 80069a6:	db06      	blt.n	80069b6 <_dtoa_r+0xa96>
 80069a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80069aa:	ea41 0909 	orr.w	r9, r1, r9
 80069ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069b0:	ea59 0101 	orrs.w	r1, r9, r1
 80069b4:	d120      	bne.n	80069f8 <_dtoa_r+0xad8>
 80069b6:	2a00      	cmp	r2, #0
 80069b8:	ddec      	ble.n	8006994 <_dtoa_r+0xa74>
 80069ba:	4659      	mov	r1, fp
 80069bc:	2201      	movs	r2, #1
 80069be:	4628      	mov	r0, r5
 80069c0:	9308      	str	r3, [sp, #32]
 80069c2:	f000 fced 	bl	80073a0 <__lshift>
 80069c6:	4621      	mov	r1, r4
 80069c8:	4683      	mov	fp, r0
 80069ca:	f000 fd59 	bl	8007480 <__mcmp>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	dc02      	bgt.n	80069da <_dtoa_r+0xaba>
 80069d4:	d1de      	bne.n	8006994 <_dtoa_r+0xa74>
 80069d6:	07da      	lsls	r2, r3, #31
 80069d8:	d5dc      	bpl.n	8006994 <_dtoa_r+0xa74>
 80069da:	2b39      	cmp	r3, #57	; 0x39
 80069dc:	d1d8      	bne.n	8006990 <_dtoa_r+0xa70>
 80069de:	2339      	movs	r3, #57	; 0x39
 80069e0:	9a04      	ldr	r2, [sp, #16]
 80069e2:	7013      	strb	r3, [r2, #0]
 80069e4:	463b      	mov	r3, r7
 80069e6:	461f      	mov	r7, r3
 80069e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	2a39      	cmp	r2, #57	; 0x39
 80069f0:	d050      	beq.n	8006a94 <_dtoa_r+0xb74>
 80069f2:	3201      	adds	r2, #1
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	e747      	b.n	8006888 <_dtoa_r+0x968>
 80069f8:	2a00      	cmp	r2, #0
 80069fa:	dd03      	ble.n	8006a04 <_dtoa_r+0xae4>
 80069fc:	2b39      	cmp	r3, #57	; 0x39
 80069fe:	d0ee      	beq.n	80069de <_dtoa_r+0xabe>
 8006a00:	3301      	adds	r3, #1
 8006a02:	e7c7      	b.n	8006994 <_dtoa_r+0xa74>
 8006a04:	9a08      	ldr	r2, [sp, #32]
 8006a06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a0c:	428a      	cmp	r2, r1
 8006a0e:	d02a      	beq.n	8006a66 <_dtoa_r+0xb46>
 8006a10:	4659      	mov	r1, fp
 8006a12:	2300      	movs	r3, #0
 8006a14:	220a      	movs	r2, #10
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 fb16 	bl	8007048 <__multadd>
 8006a1c:	45b0      	cmp	r8, r6
 8006a1e:	4683      	mov	fp, r0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	f04f 020a 	mov.w	r2, #10
 8006a28:	4641      	mov	r1, r8
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	d107      	bne.n	8006a3e <_dtoa_r+0xb1e>
 8006a2e:	f000 fb0b 	bl	8007048 <__multadd>
 8006a32:	4680      	mov	r8, r0
 8006a34:	4606      	mov	r6, r0
 8006a36:	9b08      	ldr	r3, [sp, #32]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	9308      	str	r3, [sp, #32]
 8006a3c:	e775      	b.n	800692a <_dtoa_r+0xa0a>
 8006a3e:	f000 fb03 	bl	8007048 <__multadd>
 8006a42:	4631      	mov	r1, r6
 8006a44:	4680      	mov	r8, r0
 8006a46:	2300      	movs	r3, #0
 8006a48:	220a      	movs	r2, #10
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f000 fafc 	bl	8007048 <__multadd>
 8006a50:	4606      	mov	r6, r0
 8006a52:	e7f0      	b.n	8006a36 <_dtoa_r+0xb16>
 8006a54:	f1b9 0f00 	cmp.w	r9, #0
 8006a58:	bfcc      	ite	gt
 8006a5a:	464f      	movgt	r7, r9
 8006a5c:	2701      	movle	r7, #1
 8006a5e:	f04f 0800 	mov.w	r8, #0
 8006a62:	9a03      	ldr	r2, [sp, #12]
 8006a64:	4417      	add	r7, r2
 8006a66:	4659      	mov	r1, fp
 8006a68:	2201      	movs	r2, #1
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	9308      	str	r3, [sp, #32]
 8006a6e:	f000 fc97 	bl	80073a0 <__lshift>
 8006a72:	4621      	mov	r1, r4
 8006a74:	4683      	mov	fp, r0
 8006a76:	f000 fd03 	bl	8007480 <__mcmp>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	dcb2      	bgt.n	80069e4 <_dtoa_r+0xac4>
 8006a7e:	d102      	bne.n	8006a86 <_dtoa_r+0xb66>
 8006a80:	9b08      	ldr	r3, [sp, #32]
 8006a82:	07db      	lsls	r3, r3, #31
 8006a84:	d4ae      	bmi.n	80069e4 <_dtoa_r+0xac4>
 8006a86:	463b      	mov	r3, r7
 8006a88:	461f      	mov	r7, r3
 8006a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a8e:	2a30      	cmp	r2, #48	; 0x30
 8006a90:	d0fa      	beq.n	8006a88 <_dtoa_r+0xb68>
 8006a92:	e6f9      	b.n	8006888 <_dtoa_r+0x968>
 8006a94:	9a03      	ldr	r2, [sp, #12]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d1a5      	bne.n	80069e6 <_dtoa_r+0xac6>
 8006a9a:	2331      	movs	r3, #49	; 0x31
 8006a9c:	f10a 0a01 	add.w	sl, sl, #1
 8006aa0:	e779      	b.n	8006996 <_dtoa_r+0xa76>
 8006aa2:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <_dtoa_r+0xbd4>)
 8006aa4:	f7ff baa8 	b.w	8005ff8 <_dtoa_r+0xd8>
 8006aa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f47f aa81 	bne.w	8005fb2 <_dtoa_r+0x92>
 8006ab0:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <_dtoa_r+0xbd8>)
 8006ab2:	f7ff baa1 	b.w	8005ff8 <_dtoa_r+0xd8>
 8006ab6:	f1b9 0f00 	cmp.w	r9, #0
 8006aba:	dc03      	bgt.n	8006ac4 <_dtoa_r+0xba4>
 8006abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	f73f aecb 	bgt.w	800685a <_dtoa_r+0x93a>
 8006ac4:	9f03      	ldr	r7, [sp, #12]
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4658      	mov	r0, fp
 8006aca:	f7ff f99d 	bl	8005e08 <quorem>
 8006ace:	9a03      	ldr	r2, [sp, #12]
 8006ad0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ad4:	f807 3b01 	strb.w	r3, [r7], #1
 8006ad8:	1aba      	subs	r2, r7, r2
 8006ada:	4591      	cmp	r9, r2
 8006adc:	ddba      	ble.n	8006a54 <_dtoa_r+0xb34>
 8006ade:	4659      	mov	r1, fp
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	220a      	movs	r2, #10
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f000 faaf 	bl	8007048 <__multadd>
 8006aea:	4683      	mov	fp, r0
 8006aec:	e7eb      	b.n	8006ac6 <_dtoa_r+0xba6>
 8006aee:	bf00      	nop
 8006af0:	08008417 	.word	0x08008417
 8006af4:	08008374 	.word	0x08008374
 8006af8:	08008398 	.word	0x08008398

08006afc <__sflush_r>:
 8006afc:	898a      	ldrh	r2, [r1, #12]
 8006afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b00:	4605      	mov	r5, r0
 8006b02:	0710      	lsls	r0, r2, #28
 8006b04:	460c      	mov	r4, r1
 8006b06:	d457      	bmi.n	8006bb8 <__sflush_r+0xbc>
 8006b08:	684b      	ldr	r3, [r1, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	dc04      	bgt.n	8006b18 <__sflush_r+0x1c>
 8006b0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dc01      	bgt.n	8006b18 <__sflush_r+0x1c>
 8006b14:	2000      	movs	r0, #0
 8006b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	d0fa      	beq.n	8006b14 <__sflush_r+0x18>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b24:	682f      	ldr	r7, [r5, #0]
 8006b26:	602b      	str	r3, [r5, #0]
 8006b28:	d032      	beq.n	8006b90 <__sflush_r+0x94>
 8006b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	075a      	lsls	r2, r3, #29
 8006b30:	d505      	bpl.n	8006b3e <__sflush_r+0x42>
 8006b32:	6863      	ldr	r3, [r4, #4]
 8006b34:	1ac0      	subs	r0, r0, r3
 8006b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b38:	b10b      	cbz	r3, 8006b3e <__sflush_r+0x42>
 8006b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b3c:	1ac0      	subs	r0, r0, r3
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4602      	mov	r2, r0
 8006b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b44:	4628      	mov	r0, r5
 8006b46:	6a21      	ldr	r1, [r4, #32]
 8006b48:	47b0      	blx	r6
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	d106      	bne.n	8006b5e <__sflush_r+0x62>
 8006b50:	6829      	ldr	r1, [r5, #0]
 8006b52:	291d      	cmp	r1, #29
 8006b54:	d82c      	bhi.n	8006bb0 <__sflush_r+0xb4>
 8006b56:	4a29      	ldr	r2, [pc, #164]	; (8006bfc <__sflush_r+0x100>)
 8006b58:	40ca      	lsrs	r2, r1
 8006b5a:	07d6      	lsls	r6, r2, #31
 8006b5c:	d528      	bpl.n	8006bb0 <__sflush_r+0xb4>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	6062      	str	r2, [r4, #4]
 8006b62:	6922      	ldr	r2, [r4, #16]
 8006b64:	04d9      	lsls	r1, r3, #19
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	d504      	bpl.n	8006b74 <__sflush_r+0x78>
 8006b6a:	1c42      	adds	r2, r0, #1
 8006b6c:	d101      	bne.n	8006b72 <__sflush_r+0x76>
 8006b6e:	682b      	ldr	r3, [r5, #0]
 8006b70:	b903      	cbnz	r3, 8006b74 <__sflush_r+0x78>
 8006b72:	6560      	str	r0, [r4, #84]	; 0x54
 8006b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b76:	602f      	str	r7, [r5, #0]
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	d0cb      	beq.n	8006b14 <__sflush_r+0x18>
 8006b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b80:	4299      	cmp	r1, r3
 8006b82:	d002      	beq.n	8006b8a <__sflush_r+0x8e>
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 fd93 	bl	80076b0 <_free_r>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b8e:	e7c2      	b.n	8006b16 <__sflush_r+0x1a>
 8006b90:	6a21      	ldr	r1, [r4, #32]
 8006b92:	2301      	movs	r3, #1
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b0      	blx	r6
 8006b98:	1c41      	adds	r1, r0, #1
 8006b9a:	d1c7      	bne.n	8006b2c <__sflush_r+0x30>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0c4      	beq.n	8006b2c <__sflush_r+0x30>
 8006ba2:	2b1d      	cmp	r3, #29
 8006ba4:	d001      	beq.n	8006baa <__sflush_r+0xae>
 8006ba6:	2b16      	cmp	r3, #22
 8006ba8:	d101      	bne.n	8006bae <__sflush_r+0xb2>
 8006baa:	602f      	str	r7, [r5, #0]
 8006bac:	e7b2      	b.n	8006b14 <__sflush_r+0x18>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb4:	81a3      	strh	r3, [r4, #12]
 8006bb6:	e7ae      	b.n	8006b16 <__sflush_r+0x1a>
 8006bb8:	690f      	ldr	r7, [r1, #16]
 8006bba:	2f00      	cmp	r7, #0
 8006bbc:	d0aa      	beq.n	8006b14 <__sflush_r+0x18>
 8006bbe:	0793      	lsls	r3, r2, #30
 8006bc0:	bf18      	it	ne
 8006bc2:	2300      	movne	r3, #0
 8006bc4:	680e      	ldr	r6, [r1, #0]
 8006bc6:	bf08      	it	eq
 8006bc8:	694b      	ldreq	r3, [r1, #20]
 8006bca:	1bf6      	subs	r6, r6, r7
 8006bcc:	600f      	str	r7, [r1, #0]
 8006bce:	608b      	str	r3, [r1, #8]
 8006bd0:	2e00      	cmp	r6, #0
 8006bd2:	dd9f      	ble.n	8006b14 <__sflush_r+0x18>
 8006bd4:	4633      	mov	r3, r6
 8006bd6:	463a      	mov	r2, r7
 8006bd8:	4628      	mov	r0, r5
 8006bda:	6a21      	ldr	r1, [r4, #32]
 8006bdc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006be0:	47e0      	blx	ip
 8006be2:	2800      	cmp	r0, #0
 8006be4:	dc06      	bgt.n	8006bf4 <__sflush_r+0xf8>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	e790      	b.n	8006b16 <__sflush_r+0x1a>
 8006bf4:	4407      	add	r7, r0
 8006bf6:	1a36      	subs	r6, r6, r0
 8006bf8:	e7ea      	b.n	8006bd0 <__sflush_r+0xd4>
 8006bfa:	bf00      	nop
 8006bfc:	20400001 	.word	0x20400001

08006c00 <_fflush_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	690b      	ldr	r3, [r1, #16]
 8006c04:	4605      	mov	r5, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	b913      	cbnz	r3, 8006c10 <_fflush_r+0x10>
 8006c0a:	2500      	movs	r5, #0
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	b118      	cbz	r0, 8006c1a <_fflush_r+0x1a>
 8006c12:	6983      	ldr	r3, [r0, #24]
 8006c14:	b90b      	cbnz	r3, 8006c1a <_fflush_r+0x1a>
 8006c16:	f000 f887 	bl	8006d28 <__sinit>
 8006c1a:	4b14      	ldr	r3, [pc, #80]	; (8006c6c <_fflush_r+0x6c>)
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	d11b      	bne.n	8006c58 <_fflush_r+0x58>
 8006c20:	686c      	ldr	r4, [r5, #4]
 8006c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0ef      	beq.n	8006c0a <_fflush_r+0xa>
 8006c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c2c:	07d0      	lsls	r0, r2, #31
 8006c2e:	d404      	bmi.n	8006c3a <_fflush_r+0x3a>
 8006c30:	0599      	lsls	r1, r3, #22
 8006c32:	d402      	bmi.n	8006c3a <_fflush_r+0x3a>
 8006c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c36:	f000 f91a 	bl	8006e6e <__retarget_lock_acquire_recursive>
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	f7ff ff5d 	bl	8006afc <__sflush_r>
 8006c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c44:	4605      	mov	r5, r0
 8006c46:	07da      	lsls	r2, r3, #31
 8006c48:	d4e0      	bmi.n	8006c0c <_fflush_r+0xc>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	059b      	lsls	r3, r3, #22
 8006c4e:	d4dd      	bmi.n	8006c0c <_fflush_r+0xc>
 8006c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c52:	f000 f90d 	bl	8006e70 <__retarget_lock_release_recursive>
 8006c56:	e7d9      	b.n	8006c0c <_fflush_r+0xc>
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <_fflush_r+0x70>)
 8006c5a:	429c      	cmp	r4, r3
 8006c5c:	d101      	bne.n	8006c62 <_fflush_r+0x62>
 8006c5e:	68ac      	ldr	r4, [r5, #8]
 8006c60:	e7df      	b.n	8006c22 <_fflush_r+0x22>
 8006c62:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <_fflush_r+0x74>)
 8006c64:	429c      	cmp	r4, r3
 8006c66:	bf08      	it	eq
 8006c68:	68ec      	ldreq	r4, [r5, #12]
 8006c6a:	e7da      	b.n	8006c22 <_fflush_r+0x22>
 8006c6c:	08008448 	.word	0x08008448
 8006c70:	08008468 	.word	0x08008468
 8006c74:	08008428 	.word	0x08008428

08006c78 <std>:
 8006c78:	2300      	movs	r3, #0
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c86:	6083      	str	r3, [r0, #8]
 8006c88:	8181      	strh	r1, [r0, #12]
 8006c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c8c:	81c2      	strh	r2, [r0, #14]
 8006c8e:	6183      	str	r3, [r0, #24]
 8006c90:	4619      	mov	r1, r3
 8006c92:	2208      	movs	r2, #8
 8006c94:	305c      	adds	r0, #92	; 0x5c
 8006c96:	f7fe fae1 	bl	800525c <memset>
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <std+0x38>)
 8006c9c:	6224      	str	r4, [r4, #32]
 8006c9e:	6263      	str	r3, [r4, #36]	; 0x24
 8006ca0:	4b04      	ldr	r3, [pc, #16]	; (8006cb4 <std+0x3c>)
 8006ca2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ca4:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <std+0x40>)
 8006ca6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <std+0x44>)
 8006caa:	6323      	str	r3, [r4, #48]	; 0x30
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	bf00      	nop
 8006cb0:	08007df1 	.word	0x08007df1
 8006cb4:	08007e13 	.word	0x08007e13
 8006cb8:	08007e4b 	.word	0x08007e4b
 8006cbc:	08007e6f 	.word	0x08007e6f

08006cc0 <_cleanup_r>:
 8006cc0:	4901      	ldr	r1, [pc, #4]	; (8006cc8 <_cleanup_r+0x8>)
 8006cc2:	f000 b8af 	b.w	8006e24 <_fwalk_reent>
 8006cc6:	bf00      	nop
 8006cc8:	08006c01 	.word	0x08006c01

08006ccc <__sfmoreglue>:
 8006ccc:	2268      	movs	r2, #104	; 0x68
 8006cce:	b570      	push	{r4, r5, r6, lr}
 8006cd0:	1e4d      	subs	r5, r1, #1
 8006cd2:	4355      	muls	r5, r2
 8006cd4:	460e      	mov	r6, r1
 8006cd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cda:	f000 fd51 	bl	8007780 <_malloc_r>
 8006cde:	4604      	mov	r4, r0
 8006ce0:	b140      	cbz	r0, 8006cf4 <__sfmoreglue+0x28>
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ce8:	300c      	adds	r0, #12
 8006cea:	60a0      	str	r0, [r4, #8]
 8006cec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cf0:	f7fe fab4 	bl	800525c <memset>
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}

08006cf8 <__sfp_lock_acquire>:
 8006cf8:	4801      	ldr	r0, [pc, #4]	; (8006d00 <__sfp_lock_acquire+0x8>)
 8006cfa:	f000 b8b8 	b.w	8006e6e <__retarget_lock_acquire_recursive>
 8006cfe:	bf00      	nop
 8006d00:	2000039d 	.word	0x2000039d

08006d04 <__sfp_lock_release>:
 8006d04:	4801      	ldr	r0, [pc, #4]	; (8006d0c <__sfp_lock_release+0x8>)
 8006d06:	f000 b8b3 	b.w	8006e70 <__retarget_lock_release_recursive>
 8006d0a:	bf00      	nop
 8006d0c:	2000039d 	.word	0x2000039d

08006d10 <__sinit_lock_acquire>:
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <__sinit_lock_acquire+0x8>)
 8006d12:	f000 b8ac 	b.w	8006e6e <__retarget_lock_acquire_recursive>
 8006d16:	bf00      	nop
 8006d18:	2000039e 	.word	0x2000039e

08006d1c <__sinit_lock_release>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	; (8006d24 <__sinit_lock_release+0x8>)
 8006d1e:	f000 b8a7 	b.w	8006e70 <__retarget_lock_release_recursive>
 8006d22:	bf00      	nop
 8006d24:	2000039e 	.word	0x2000039e

08006d28 <__sinit>:
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	f7ff fff0 	bl	8006d10 <__sinit_lock_acquire>
 8006d30:	69a3      	ldr	r3, [r4, #24]
 8006d32:	b11b      	cbz	r3, 8006d3c <__sinit+0x14>
 8006d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d38:	f7ff bff0 	b.w	8006d1c <__sinit_lock_release>
 8006d3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d40:	6523      	str	r3, [r4, #80]	; 0x50
 8006d42:	4b13      	ldr	r3, [pc, #76]	; (8006d90 <__sinit+0x68>)
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <__sinit+0x6c>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	bf08      	it	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	4620      	mov	r0, r4
 8006d52:	bf08      	it	eq
 8006d54:	61a3      	streq	r3, [r4, #24]
 8006d56:	f000 f81f 	bl	8006d98 <__sfp>
 8006d5a:	6060      	str	r0, [r4, #4]
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 f81b 	bl	8006d98 <__sfp>
 8006d62:	60a0      	str	r0, [r4, #8]
 8006d64:	4620      	mov	r0, r4
 8006d66:	f000 f817 	bl	8006d98 <__sfp>
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2104      	movs	r1, #4
 8006d6e:	60e0      	str	r0, [r4, #12]
 8006d70:	6860      	ldr	r0, [r4, #4]
 8006d72:	f7ff ff81 	bl	8006c78 <std>
 8006d76:	2201      	movs	r2, #1
 8006d78:	2109      	movs	r1, #9
 8006d7a:	68a0      	ldr	r0, [r4, #8]
 8006d7c:	f7ff ff7c 	bl	8006c78 <std>
 8006d80:	2202      	movs	r2, #2
 8006d82:	2112      	movs	r1, #18
 8006d84:	68e0      	ldr	r0, [r4, #12]
 8006d86:	f7ff ff77 	bl	8006c78 <std>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	61a3      	str	r3, [r4, #24]
 8006d8e:	e7d1      	b.n	8006d34 <__sinit+0xc>
 8006d90:	08008360 	.word	0x08008360
 8006d94:	08006cc1 	.word	0x08006cc1

08006d98 <__sfp>:
 8006d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9a:	4607      	mov	r7, r0
 8006d9c:	f7ff ffac 	bl	8006cf8 <__sfp_lock_acquire>
 8006da0:	4b1e      	ldr	r3, [pc, #120]	; (8006e1c <__sfp+0x84>)
 8006da2:	681e      	ldr	r6, [r3, #0]
 8006da4:	69b3      	ldr	r3, [r6, #24]
 8006da6:	b913      	cbnz	r3, 8006dae <__sfp+0x16>
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff ffbd 	bl	8006d28 <__sinit>
 8006dae:	3648      	adds	r6, #72	; 0x48
 8006db0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	d503      	bpl.n	8006dc0 <__sfp+0x28>
 8006db8:	6833      	ldr	r3, [r6, #0]
 8006dba:	b30b      	cbz	r3, 8006e00 <__sfp+0x68>
 8006dbc:	6836      	ldr	r6, [r6, #0]
 8006dbe:	e7f7      	b.n	8006db0 <__sfp+0x18>
 8006dc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006dc4:	b9d5      	cbnz	r5, 8006dfc <__sfp+0x64>
 8006dc6:	4b16      	ldr	r3, [pc, #88]	; (8006e20 <__sfp+0x88>)
 8006dc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dcc:	60e3      	str	r3, [r4, #12]
 8006dce:	6665      	str	r5, [r4, #100]	; 0x64
 8006dd0:	f000 f84c 	bl	8006e6c <__retarget_lock_init_recursive>
 8006dd4:	f7ff ff96 	bl	8006d04 <__sfp_lock_release>
 8006dd8:	2208      	movs	r2, #8
 8006dda:	4629      	mov	r1, r5
 8006ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006de4:	6025      	str	r5, [r4, #0]
 8006de6:	61a5      	str	r5, [r4, #24]
 8006de8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dec:	f7fe fa36 	bl	800525c <memset>
 8006df0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006df4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006df8:	4620      	mov	r0, r4
 8006dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dfc:	3468      	adds	r4, #104	; 0x68
 8006dfe:	e7d9      	b.n	8006db4 <__sfp+0x1c>
 8006e00:	2104      	movs	r1, #4
 8006e02:	4638      	mov	r0, r7
 8006e04:	f7ff ff62 	bl	8006ccc <__sfmoreglue>
 8006e08:	4604      	mov	r4, r0
 8006e0a:	6030      	str	r0, [r6, #0]
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d1d5      	bne.n	8006dbc <__sfp+0x24>
 8006e10:	f7ff ff78 	bl	8006d04 <__sfp_lock_release>
 8006e14:	230c      	movs	r3, #12
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	e7ee      	b.n	8006df8 <__sfp+0x60>
 8006e1a:	bf00      	nop
 8006e1c:	08008360 	.word	0x08008360
 8006e20:	ffff0001 	.word	0xffff0001

08006e24 <_fwalk_reent>:
 8006e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e28:	4606      	mov	r6, r0
 8006e2a:	4688      	mov	r8, r1
 8006e2c:	2700      	movs	r7, #0
 8006e2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e36:	f1b9 0901 	subs.w	r9, r9, #1
 8006e3a:	d505      	bpl.n	8006e48 <_fwalk_reent+0x24>
 8006e3c:	6824      	ldr	r4, [r4, #0]
 8006e3e:	2c00      	cmp	r4, #0
 8006e40:	d1f7      	bne.n	8006e32 <_fwalk_reent+0xe>
 8006e42:	4638      	mov	r0, r7
 8006e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e48:	89ab      	ldrh	r3, [r5, #12]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d907      	bls.n	8006e5e <_fwalk_reent+0x3a>
 8006e4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e52:	3301      	adds	r3, #1
 8006e54:	d003      	beq.n	8006e5e <_fwalk_reent+0x3a>
 8006e56:	4629      	mov	r1, r5
 8006e58:	4630      	mov	r0, r6
 8006e5a:	47c0      	blx	r8
 8006e5c:	4307      	orrs	r7, r0
 8006e5e:	3568      	adds	r5, #104	; 0x68
 8006e60:	e7e9      	b.n	8006e36 <_fwalk_reent+0x12>
	...

08006e64 <_localeconv_r>:
 8006e64:	4800      	ldr	r0, [pc, #0]	; (8006e68 <_localeconv_r+0x4>)
 8006e66:	4770      	bx	lr
 8006e68:	20000164 	.word	0x20000164

08006e6c <__retarget_lock_init_recursive>:
 8006e6c:	4770      	bx	lr

08006e6e <__retarget_lock_acquire_recursive>:
 8006e6e:	4770      	bx	lr

08006e70 <__retarget_lock_release_recursive>:
 8006e70:	4770      	bx	lr

08006e72 <__swhatbuf_r>:
 8006e72:	b570      	push	{r4, r5, r6, lr}
 8006e74:	460e      	mov	r6, r1
 8006e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7a:	4614      	mov	r4, r2
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	461d      	mov	r5, r3
 8006e80:	b096      	sub	sp, #88	; 0x58
 8006e82:	da08      	bge.n	8006e96 <__swhatbuf_r+0x24>
 8006e84:	2200      	movs	r2, #0
 8006e86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e8a:	602a      	str	r2, [r5, #0]
 8006e8c:	061a      	lsls	r2, r3, #24
 8006e8e:	d410      	bmi.n	8006eb2 <__swhatbuf_r+0x40>
 8006e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e94:	e00e      	b.n	8006eb4 <__swhatbuf_r+0x42>
 8006e96:	466a      	mov	r2, sp
 8006e98:	f001 f840 	bl	8007f1c <_fstat_r>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	dbf1      	blt.n	8006e84 <__swhatbuf_r+0x12>
 8006ea0:	9a01      	ldr	r2, [sp, #4]
 8006ea2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ea6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006eaa:	425a      	negs	r2, r3
 8006eac:	415a      	adcs	r2, r3
 8006eae:	602a      	str	r2, [r5, #0]
 8006eb0:	e7ee      	b.n	8006e90 <__swhatbuf_r+0x1e>
 8006eb2:	2340      	movs	r3, #64	; 0x40
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	b016      	add	sp, #88	; 0x58
 8006eba:	bd70      	pop	{r4, r5, r6, pc}

08006ebc <__smakebuf_r>:
 8006ebc:	898b      	ldrh	r3, [r1, #12]
 8006ebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ec0:	079d      	lsls	r5, r3, #30
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	d507      	bpl.n	8006ed8 <__smakebuf_r+0x1c>
 8006ec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	6123      	str	r3, [r4, #16]
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	6163      	str	r3, [r4, #20]
 8006ed4:	b002      	add	sp, #8
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	466a      	mov	r2, sp
 8006eda:	ab01      	add	r3, sp, #4
 8006edc:	f7ff ffc9 	bl	8006e72 <__swhatbuf_r>
 8006ee0:	9900      	ldr	r1, [sp, #0]
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 fc4b 	bl	8007780 <_malloc_r>
 8006eea:	b948      	cbnz	r0, 8006f00 <__smakebuf_r+0x44>
 8006eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef0:	059a      	lsls	r2, r3, #22
 8006ef2:	d4ef      	bmi.n	8006ed4 <__smakebuf_r+0x18>
 8006ef4:	f023 0303 	bic.w	r3, r3, #3
 8006ef8:	f043 0302 	orr.w	r3, r3, #2
 8006efc:	81a3      	strh	r3, [r4, #12]
 8006efe:	e7e3      	b.n	8006ec8 <__smakebuf_r+0xc>
 8006f00:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <__smakebuf_r+0x7c>)
 8006f02:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	6020      	str	r0, [r4, #0]
 8006f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f0c:	81a3      	strh	r3, [r4, #12]
 8006f0e:	9b00      	ldr	r3, [sp, #0]
 8006f10:	6120      	str	r0, [r4, #16]
 8006f12:	6163      	str	r3, [r4, #20]
 8006f14:	9b01      	ldr	r3, [sp, #4]
 8006f16:	b15b      	cbz	r3, 8006f30 <__smakebuf_r+0x74>
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f1e:	f001 f80f 	bl	8007f40 <_isatty_r>
 8006f22:	b128      	cbz	r0, 8006f30 <__smakebuf_r+0x74>
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	f023 0303 	bic.w	r3, r3, #3
 8006f2a:	f043 0301 	orr.w	r3, r3, #1
 8006f2e:	81a3      	strh	r3, [r4, #12]
 8006f30:	89a0      	ldrh	r0, [r4, #12]
 8006f32:	4305      	orrs	r5, r0
 8006f34:	81a5      	strh	r5, [r4, #12]
 8006f36:	e7cd      	b.n	8006ed4 <__smakebuf_r+0x18>
 8006f38:	08006cc1 	.word	0x08006cc1

08006f3c <malloc>:
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <malloc+0xc>)
 8006f3e:	4601      	mov	r1, r0
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f000 bc1d 	b.w	8007780 <_malloc_r>
 8006f46:	bf00      	nop
 8006f48:	20000010 	.word	0x20000010

08006f4c <memchr>:
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	b510      	push	{r4, lr}
 8006f50:	b2c9      	uxtb	r1, r1
 8006f52:	4402      	add	r2, r0
 8006f54:	4293      	cmp	r3, r2
 8006f56:	4618      	mov	r0, r3
 8006f58:	d101      	bne.n	8006f5e <memchr+0x12>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e003      	b.n	8006f66 <memchr+0x1a>
 8006f5e:	7804      	ldrb	r4, [r0, #0]
 8006f60:	3301      	adds	r3, #1
 8006f62:	428c      	cmp	r4, r1
 8006f64:	d1f6      	bne.n	8006f54 <memchr+0x8>
 8006f66:	bd10      	pop	{r4, pc}

08006f68 <memcpy>:
 8006f68:	440a      	add	r2, r1
 8006f6a:	4291      	cmp	r1, r2
 8006f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f70:	d100      	bne.n	8006f74 <memcpy+0xc>
 8006f72:	4770      	bx	lr
 8006f74:	b510      	push	{r4, lr}
 8006f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f7a:	4291      	cmp	r1, r2
 8006f7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f80:	d1f9      	bne.n	8006f76 <memcpy+0xe>
 8006f82:	bd10      	pop	{r4, pc}

08006f84 <_Balloc>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f88:	4604      	mov	r4, r0
 8006f8a:	460d      	mov	r5, r1
 8006f8c:	b976      	cbnz	r6, 8006fac <_Balloc+0x28>
 8006f8e:	2010      	movs	r0, #16
 8006f90:	f7ff ffd4 	bl	8006f3c <malloc>
 8006f94:	4602      	mov	r2, r0
 8006f96:	6260      	str	r0, [r4, #36]	; 0x24
 8006f98:	b920      	cbnz	r0, 8006fa4 <_Balloc+0x20>
 8006f9a:	2166      	movs	r1, #102	; 0x66
 8006f9c:	4b17      	ldr	r3, [pc, #92]	; (8006ffc <_Balloc+0x78>)
 8006f9e:	4818      	ldr	r0, [pc, #96]	; (8007000 <_Balloc+0x7c>)
 8006fa0:	f000 ff7c 	bl	8007e9c <__assert_func>
 8006fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fa8:	6006      	str	r6, [r0, #0]
 8006faa:	60c6      	str	r6, [r0, #12]
 8006fac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fae:	68f3      	ldr	r3, [r6, #12]
 8006fb0:	b183      	cbz	r3, 8006fd4 <_Balloc+0x50>
 8006fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fba:	b9b8      	cbnz	r0, 8006fec <_Balloc+0x68>
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	fa01 f605 	lsl.w	r6, r1, r5
 8006fc2:	1d72      	adds	r2, r6, #5
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	0092      	lsls	r2, r2, #2
 8006fc8:	f000 fb5e 	bl	8007688 <_calloc_r>
 8006fcc:	b160      	cbz	r0, 8006fe8 <_Balloc+0x64>
 8006fce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fd2:	e00e      	b.n	8006ff2 <_Balloc+0x6e>
 8006fd4:	2221      	movs	r2, #33	; 0x21
 8006fd6:	2104      	movs	r1, #4
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fb55 	bl	8007688 <_calloc_r>
 8006fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe0:	60f0      	str	r0, [r6, #12]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e4      	bne.n	8006fb2 <_Balloc+0x2e>
 8006fe8:	2000      	movs	r0, #0
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	6802      	ldr	r2, [r0, #0]
 8006fee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ff8:	e7f7      	b.n	8006fea <_Balloc+0x66>
 8006ffa:	bf00      	nop
 8006ffc:	080083a5 	.word	0x080083a5
 8007000:	08008488 	.word	0x08008488

08007004 <_Bfree>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007008:	4605      	mov	r5, r0
 800700a:	460c      	mov	r4, r1
 800700c:	b976      	cbnz	r6, 800702c <_Bfree+0x28>
 800700e:	2010      	movs	r0, #16
 8007010:	f7ff ff94 	bl	8006f3c <malloc>
 8007014:	4602      	mov	r2, r0
 8007016:	6268      	str	r0, [r5, #36]	; 0x24
 8007018:	b920      	cbnz	r0, 8007024 <_Bfree+0x20>
 800701a:	218a      	movs	r1, #138	; 0x8a
 800701c:	4b08      	ldr	r3, [pc, #32]	; (8007040 <_Bfree+0x3c>)
 800701e:	4809      	ldr	r0, [pc, #36]	; (8007044 <_Bfree+0x40>)
 8007020:	f000 ff3c 	bl	8007e9c <__assert_func>
 8007024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007028:	6006      	str	r6, [r0, #0]
 800702a:	60c6      	str	r6, [r0, #12]
 800702c:	b13c      	cbz	r4, 800703e <_Bfree+0x3a>
 800702e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007030:	6862      	ldr	r2, [r4, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007038:	6021      	str	r1, [r4, #0]
 800703a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800703e:	bd70      	pop	{r4, r5, r6, pc}
 8007040:	080083a5 	.word	0x080083a5
 8007044:	08008488 	.word	0x08008488

08007048 <__multadd>:
 8007048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704c:	4607      	mov	r7, r0
 800704e:	460c      	mov	r4, r1
 8007050:	461e      	mov	r6, r3
 8007052:	2000      	movs	r0, #0
 8007054:	690d      	ldr	r5, [r1, #16]
 8007056:	f101 0c14 	add.w	ip, r1, #20
 800705a:	f8dc 3000 	ldr.w	r3, [ip]
 800705e:	3001      	adds	r0, #1
 8007060:	b299      	uxth	r1, r3
 8007062:	fb02 6101 	mla	r1, r2, r1, r6
 8007066:	0c1e      	lsrs	r6, r3, #16
 8007068:	0c0b      	lsrs	r3, r1, #16
 800706a:	fb02 3306 	mla	r3, r2, r6, r3
 800706e:	b289      	uxth	r1, r1
 8007070:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007074:	4285      	cmp	r5, r0
 8007076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800707a:	f84c 1b04 	str.w	r1, [ip], #4
 800707e:	dcec      	bgt.n	800705a <__multadd+0x12>
 8007080:	b30e      	cbz	r6, 80070c6 <__multadd+0x7e>
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	42ab      	cmp	r3, r5
 8007086:	dc19      	bgt.n	80070bc <__multadd+0x74>
 8007088:	6861      	ldr	r1, [r4, #4]
 800708a:	4638      	mov	r0, r7
 800708c:	3101      	adds	r1, #1
 800708e:	f7ff ff79 	bl	8006f84 <_Balloc>
 8007092:	4680      	mov	r8, r0
 8007094:	b928      	cbnz	r0, 80070a2 <__multadd+0x5a>
 8007096:	4602      	mov	r2, r0
 8007098:	21b5      	movs	r1, #181	; 0xb5
 800709a:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <__multadd+0x84>)
 800709c:	480c      	ldr	r0, [pc, #48]	; (80070d0 <__multadd+0x88>)
 800709e:	f000 fefd 	bl	8007e9c <__assert_func>
 80070a2:	6922      	ldr	r2, [r4, #16]
 80070a4:	f104 010c 	add.w	r1, r4, #12
 80070a8:	3202      	adds	r2, #2
 80070aa:	0092      	lsls	r2, r2, #2
 80070ac:	300c      	adds	r0, #12
 80070ae:	f7ff ff5b 	bl	8006f68 <memcpy>
 80070b2:	4621      	mov	r1, r4
 80070b4:	4638      	mov	r0, r7
 80070b6:	f7ff ffa5 	bl	8007004 <_Bfree>
 80070ba:	4644      	mov	r4, r8
 80070bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070c0:	3501      	adds	r5, #1
 80070c2:	615e      	str	r6, [r3, #20]
 80070c4:	6125      	str	r5, [r4, #16]
 80070c6:	4620      	mov	r0, r4
 80070c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070cc:	08008417 	.word	0x08008417
 80070d0:	08008488 	.word	0x08008488

080070d4 <__hi0bits>:
 80070d4:	0c02      	lsrs	r2, r0, #16
 80070d6:	0412      	lsls	r2, r2, #16
 80070d8:	4603      	mov	r3, r0
 80070da:	b9ca      	cbnz	r2, 8007110 <__hi0bits+0x3c>
 80070dc:	0403      	lsls	r3, r0, #16
 80070de:	2010      	movs	r0, #16
 80070e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070e4:	bf04      	itt	eq
 80070e6:	021b      	lsleq	r3, r3, #8
 80070e8:	3008      	addeq	r0, #8
 80070ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80070ee:	bf04      	itt	eq
 80070f0:	011b      	lsleq	r3, r3, #4
 80070f2:	3004      	addeq	r0, #4
 80070f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070f8:	bf04      	itt	eq
 80070fa:	009b      	lsleq	r3, r3, #2
 80070fc:	3002      	addeq	r0, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	db05      	blt.n	800710e <__hi0bits+0x3a>
 8007102:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007106:	f100 0001 	add.w	r0, r0, #1
 800710a:	bf08      	it	eq
 800710c:	2020      	moveq	r0, #32
 800710e:	4770      	bx	lr
 8007110:	2000      	movs	r0, #0
 8007112:	e7e5      	b.n	80070e0 <__hi0bits+0xc>

08007114 <__lo0bits>:
 8007114:	6803      	ldr	r3, [r0, #0]
 8007116:	4602      	mov	r2, r0
 8007118:	f013 0007 	ands.w	r0, r3, #7
 800711c:	d00b      	beq.n	8007136 <__lo0bits+0x22>
 800711e:	07d9      	lsls	r1, r3, #31
 8007120:	d421      	bmi.n	8007166 <__lo0bits+0x52>
 8007122:	0798      	lsls	r0, r3, #30
 8007124:	bf49      	itett	mi
 8007126:	085b      	lsrmi	r3, r3, #1
 8007128:	089b      	lsrpl	r3, r3, #2
 800712a:	2001      	movmi	r0, #1
 800712c:	6013      	strmi	r3, [r2, #0]
 800712e:	bf5c      	itt	pl
 8007130:	2002      	movpl	r0, #2
 8007132:	6013      	strpl	r3, [r2, #0]
 8007134:	4770      	bx	lr
 8007136:	b299      	uxth	r1, r3
 8007138:	b909      	cbnz	r1, 800713e <__lo0bits+0x2a>
 800713a:	2010      	movs	r0, #16
 800713c:	0c1b      	lsrs	r3, r3, #16
 800713e:	b2d9      	uxtb	r1, r3
 8007140:	b909      	cbnz	r1, 8007146 <__lo0bits+0x32>
 8007142:	3008      	adds	r0, #8
 8007144:	0a1b      	lsrs	r3, r3, #8
 8007146:	0719      	lsls	r1, r3, #28
 8007148:	bf04      	itt	eq
 800714a:	091b      	lsreq	r3, r3, #4
 800714c:	3004      	addeq	r0, #4
 800714e:	0799      	lsls	r1, r3, #30
 8007150:	bf04      	itt	eq
 8007152:	089b      	lsreq	r3, r3, #2
 8007154:	3002      	addeq	r0, #2
 8007156:	07d9      	lsls	r1, r3, #31
 8007158:	d403      	bmi.n	8007162 <__lo0bits+0x4e>
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	f100 0001 	add.w	r0, r0, #1
 8007160:	d003      	beq.n	800716a <__lo0bits+0x56>
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	4770      	bx	lr
 8007166:	2000      	movs	r0, #0
 8007168:	4770      	bx	lr
 800716a:	2020      	movs	r0, #32
 800716c:	4770      	bx	lr
	...

08007170 <__i2b>:
 8007170:	b510      	push	{r4, lr}
 8007172:	460c      	mov	r4, r1
 8007174:	2101      	movs	r1, #1
 8007176:	f7ff ff05 	bl	8006f84 <_Balloc>
 800717a:	4602      	mov	r2, r0
 800717c:	b928      	cbnz	r0, 800718a <__i2b+0x1a>
 800717e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007182:	4b04      	ldr	r3, [pc, #16]	; (8007194 <__i2b+0x24>)
 8007184:	4804      	ldr	r0, [pc, #16]	; (8007198 <__i2b+0x28>)
 8007186:	f000 fe89 	bl	8007e9c <__assert_func>
 800718a:	2301      	movs	r3, #1
 800718c:	6144      	str	r4, [r0, #20]
 800718e:	6103      	str	r3, [r0, #16]
 8007190:	bd10      	pop	{r4, pc}
 8007192:	bf00      	nop
 8007194:	08008417 	.word	0x08008417
 8007198:	08008488 	.word	0x08008488

0800719c <__multiply>:
 800719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a0:	4691      	mov	r9, r2
 80071a2:	690a      	ldr	r2, [r1, #16]
 80071a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071a8:	460c      	mov	r4, r1
 80071aa:	429a      	cmp	r2, r3
 80071ac:	bfbe      	ittt	lt
 80071ae:	460b      	movlt	r3, r1
 80071b0:	464c      	movlt	r4, r9
 80071b2:	4699      	movlt	r9, r3
 80071b4:	6927      	ldr	r7, [r4, #16]
 80071b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	6861      	ldr	r1, [r4, #4]
 80071be:	eb07 060a 	add.w	r6, r7, sl
 80071c2:	42b3      	cmp	r3, r6
 80071c4:	b085      	sub	sp, #20
 80071c6:	bfb8      	it	lt
 80071c8:	3101      	addlt	r1, #1
 80071ca:	f7ff fedb 	bl	8006f84 <_Balloc>
 80071ce:	b930      	cbnz	r0, 80071de <__multiply+0x42>
 80071d0:	4602      	mov	r2, r0
 80071d2:	f240 115d 	movw	r1, #349	; 0x15d
 80071d6:	4b43      	ldr	r3, [pc, #268]	; (80072e4 <__multiply+0x148>)
 80071d8:	4843      	ldr	r0, [pc, #268]	; (80072e8 <__multiply+0x14c>)
 80071da:	f000 fe5f 	bl	8007e9c <__assert_func>
 80071de:	f100 0514 	add.w	r5, r0, #20
 80071e2:	462b      	mov	r3, r5
 80071e4:	2200      	movs	r2, #0
 80071e6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071ea:	4543      	cmp	r3, r8
 80071ec:	d321      	bcc.n	8007232 <__multiply+0x96>
 80071ee:	f104 0314 	add.w	r3, r4, #20
 80071f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071f6:	f109 0314 	add.w	r3, r9, #20
 80071fa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071fe:	9202      	str	r2, [sp, #8]
 8007200:	1b3a      	subs	r2, r7, r4
 8007202:	3a15      	subs	r2, #21
 8007204:	f022 0203 	bic.w	r2, r2, #3
 8007208:	3204      	adds	r2, #4
 800720a:	f104 0115 	add.w	r1, r4, #21
 800720e:	428f      	cmp	r7, r1
 8007210:	bf38      	it	cc
 8007212:	2204      	movcc	r2, #4
 8007214:	9201      	str	r2, [sp, #4]
 8007216:	9a02      	ldr	r2, [sp, #8]
 8007218:	9303      	str	r3, [sp, #12]
 800721a:	429a      	cmp	r2, r3
 800721c:	d80c      	bhi.n	8007238 <__multiply+0x9c>
 800721e:	2e00      	cmp	r6, #0
 8007220:	dd03      	ble.n	800722a <__multiply+0x8e>
 8007222:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007226:	2b00      	cmp	r3, #0
 8007228:	d059      	beq.n	80072de <__multiply+0x142>
 800722a:	6106      	str	r6, [r0, #16]
 800722c:	b005      	add	sp, #20
 800722e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007232:	f843 2b04 	str.w	r2, [r3], #4
 8007236:	e7d8      	b.n	80071ea <__multiply+0x4e>
 8007238:	f8b3 a000 	ldrh.w	sl, [r3]
 800723c:	f1ba 0f00 	cmp.w	sl, #0
 8007240:	d023      	beq.n	800728a <__multiply+0xee>
 8007242:	46a9      	mov	r9, r5
 8007244:	f04f 0c00 	mov.w	ip, #0
 8007248:	f104 0e14 	add.w	lr, r4, #20
 800724c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007250:	f8d9 1000 	ldr.w	r1, [r9]
 8007254:	fa1f fb82 	uxth.w	fp, r2
 8007258:	b289      	uxth	r1, r1
 800725a:	fb0a 110b 	mla	r1, sl, fp, r1
 800725e:	4461      	add	r1, ip
 8007260:	f8d9 c000 	ldr.w	ip, [r9]
 8007264:	0c12      	lsrs	r2, r2, #16
 8007266:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800726a:	fb0a c202 	mla	r2, sl, r2, ip
 800726e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007272:	b289      	uxth	r1, r1
 8007274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007278:	4577      	cmp	r7, lr
 800727a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800727e:	f849 1b04 	str.w	r1, [r9], #4
 8007282:	d8e3      	bhi.n	800724c <__multiply+0xb0>
 8007284:	9a01      	ldr	r2, [sp, #4]
 8007286:	f845 c002 	str.w	ip, [r5, r2]
 800728a:	9a03      	ldr	r2, [sp, #12]
 800728c:	3304      	adds	r3, #4
 800728e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007292:	f1b9 0f00 	cmp.w	r9, #0
 8007296:	d020      	beq.n	80072da <__multiply+0x13e>
 8007298:	46ae      	mov	lr, r5
 800729a:	f04f 0a00 	mov.w	sl, #0
 800729e:	6829      	ldr	r1, [r5, #0]
 80072a0:	f104 0c14 	add.w	ip, r4, #20
 80072a4:	f8bc b000 	ldrh.w	fp, [ip]
 80072a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072ac:	b289      	uxth	r1, r1
 80072ae:	fb09 220b 	mla	r2, r9, fp, r2
 80072b2:	4492      	add	sl, r2
 80072b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80072b8:	f84e 1b04 	str.w	r1, [lr], #4
 80072bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072c0:	f8be 1000 	ldrh.w	r1, [lr]
 80072c4:	0c12      	lsrs	r2, r2, #16
 80072c6:	fb09 1102 	mla	r1, r9, r2, r1
 80072ca:	4567      	cmp	r7, ip
 80072cc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072d4:	d8e6      	bhi.n	80072a4 <__multiply+0x108>
 80072d6:	9a01      	ldr	r2, [sp, #4]
 80072d8:	50a9      	str	r1, [r5, r2]
 80072da:	3504      	adds	r5, #4
 80072dc:	e79b      	b.n	8007216 <__multiply+0x7a>
 80072de:	3e01      	subs	r6, #1
 80072e0:	e79d      	b.n	800721e <__multiply+0x82>
 80072e2:	bf00      	nop
 80072e4:	08008417 	.word	0x08008417
 80072e8:	08008488 	.word	0x08008488

080072ec <__pow5mult>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	4615      	mov	r5, r2
 80072f2:	f012 0203 	ands.w	r2, r2, #3
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	d007      	beq.n	800730c <__pow5mult+0x20>
 80072fc:	4c25      	ldr	r4, [pc, #148]	; (8007394 <__pow5mult+0xa8>)
 80072fe:	3a01      	subs	r2, #1
 8007300:	2300      	movs	r3, #0
 8007302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007306:	f7ff fe9f 	bl	8007048 <__multadd>
 800730a:	4607      	mov	r7, r0
 800730c:	10ad      	asrs	r5, r5, #2
 800730e:	d03d      	beq.n	800738c <__pow5mult+0xa0>
 8007310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007312:	b97c      	cbnz	r4, 8007334 <__pow5mult+0x48>
 8007314:	2010      	movs	r0, #16
 8007316:	f7ff fe11 	bl	8006f3c <malloc>
 800731a:	4602      	mov	r2, r0
 800731c:	6270      	str	r0, [r6, #36]	; 0x24
 800731e:	b928      	cbnz	r0, 800732c <__pow5mult+0x40>
 8007320:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007324:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <__pow5mult+0xac>)
 8007326:	481d      	ldr	r0, [pc, #116]	; (800739c <__pow5mult+0xb0>)
 8007328:	f000 fdb8 	bl	8007e9c <__assert_func>
 800732c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007330:	6004      	str	r4, [r0, #0]
 8007332:	60c4      	str	r4, [r0, #12]
 8007334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800733c:	b94c      	cbnz	r4, 8007352 <__pow5mult+0x66>
 800733e:	f240 2171 	movw	r1, #625	; 0x271
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ff14 	bl	8007170 <__i2b>
 8007348:	2300      	movs	r3, #0
 800734a:	4604      	mov	r4, r0
 800734c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	f04f 0900 	mov.w	r9, #0
 8007356:	07eb      	lsls	r3, r5, #31
 8007358:	d50a      	bpl.n	8007370 <__pow5mult+0x84>
 800735a:	4639      	mov	r1, r7
 800735c:	4622      	mov	r2, r4
 800735e:	4630      	mov	r0, r6
 8007360:	f7ff ff1c 	bl	800719c <__multiply>
 8007364:	4680      	mov	r8, r0
 8007366:	4639      	mov	r1, r7
 8007368:	4630      	mov	r0, r6
 800736a:	f7ff fe4b 	bl	8007004 <_Bfree>
 800736e:	4647      	mov	r7, r8
 8007370:	106d      	asrs	r5, r5, #1
 8007372:	d00b      	beq.n	800738c <__pow5mult+0xa0>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	b938      	cbnz	r0, 8007388 <__pow5mult+0x9c>
 8007378:	4622      	mov	r2, r4
 800737a:	4621      	mov	r1, r4
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff ff0d 	bl	800719c <__multiply>
 8007382:	6020      	str	r0, [r4, #0]
 8007384:	f8c0 9000 	str.w	r9, [r0]
 8007388:	4604      	mov	r4, r0
 800738a:	e7e4      	b.n	8007356 <__pow5mult+0x6a>
 800738c:	4638      	mov	r0, r7
 800738e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007392:	bf00      	nop
 8007394:	080085d8 	.word	0x080085d8
 8007398:	080083a5 	.word	0x080083a5
 800739c:	08008488 	.word	0x08008488

080073a0 <__lshift>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	460c      	mov	r4, r1
 80073a6:	4607      	mov	r7, r0
 80073a8:	4691      	mov	r9, r2
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	6849      	ldr	r1, [r1, #4]
 80073ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073b8:	f108 0601 	add.w	r6, r8, #1
 80073bc:	42b3      	cmp	r3, r6
 80073be:	db0b      	blt.n	80073d8 <__lshift+0x38>
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff fddf 	bl	8006f84 <_Balloc>
 80073c6:	4605      	mov	r5, r0
 80073c8:	b948      	cbnz	r0, 80073de <__lshift+0x3e>
 80073ca:	4602      	mov	r2, r0
 80073cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073d0:	4b29      	ldr	r3, [pc, #164]	; (8007478 <__lshift+0xd8>)
 80073d2:	482a      	ldr	r0, [pc, #168]	; (800747c <__lshift+0xdc>)
 80073d4:	f000 fd62 	bl	8007e9c <__assert_func>
 80073d8:	3101      	adds	r1, #1
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	e7ee      	b.n	80073bc <__lshift+0x1c>
 80073de:	2300      	movs	r3, #0
 80073e0:	f100 0114 	add.w	r1, r0, #20
 80073e4:	f100 0210 	add.w	r2, r0, #16
 80073e8:	4618      	mov	r0, r3
 80073ea:	4553      	cmp	r3, sl
 80073ec:	db37      	blt.n	800745e <__lshift+0xbe>
 80073ee:	6920      	ldr	r0, [r4, #16]
 80073f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073f4:	f104 0314 	add.w	r3, r4, #20
 80073f8:	f019 091f 	ands.w	r9, r9, #31
 80073fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007404:	d02f      	beq.n	8007466 <__lshift+0xc6>
 8007406:	468a      	mov	sl, r1
 8007408:	f04f 0c00 	mov.w	ip, #0
 800740c:	f1c9 0e20 	rsb	lr, r9, #32
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	fa02 f209 	lsl.w	r2, r2, r9
 8007416:	ea42 020c 	orr.w	r2, r2, ip
 800741a:	f84a 2b04 	str.w	r2, [sl], #4
 800741e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007422:	4298      	cmp	r0, r3
 8007424:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007428:	d8f2      	bhi.n	8007410 <__lshift+0x70>
 800742a:	1b03      	subs	r3, r0, r4
 800742c:	3b15      	subs	r3, #21
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	3304      	adds	r3, #4
 8007434:	f104 0215 	add.w	r2, r4, #21
 8007438:	4290      	cmp	r0, r2
 800743a:	bf38      	it	cc
 800743c:	2304      	movcc	r3, #4
 800743e:	f841 c003 	str.w	ip, [r1, r3]
 8007442:	f1bc 0f00 	cmp.w	ip, #0
 8007446:	d001      	beq.n	800744c <__lshift+0xac>
 8007448:	f108 0602 	add.w	r6, r8, #2
 800744c:	3e01      	subs	r6, #1
 800744e:	4638      	mov	r0, r7
 8007450:	4621      	mov	r1, r4
 8007452:	612e      	str	r6, [r5, #16]
 8007454:	f7ff fdd6 	bl	8007004 <_Bfree>
 8007458:	4628      	mov	r0, r5
 800745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007462:	3301      	adds	r3, #1
 8007464:	e7c1      	b.n	80073ea <__lshift+0x4a>
 8007466:	3904      	subs	r1, #4
 8007468:	f853 2b04 	ldr.w	r2, [r3], #4
 800746c:	4298      	cmp	r0, r3
 800746e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007472:	d8f9      	bhi.n	8007468 <__lshift+0xc8>
 8007474:	e7ea      	b.n	800744c <__lshift+0xac>
 8007476:	bf00      	nop
 8007478:	08008417 	.word	0x08008417
 800747c:	08008488 	.word	0x08008488

08007480 <__mcmp>:
 8007480:	4603      	mov	r3, r0
 8007482:	690a      	ldr	r2, [r1, #16]
 8007484:	6900      	ldr	r0, [r0, #16]
 8007486:	b530      	push	{r4, r5, lr}
 8007488:	1a80      	subs	r0, r0, r2
 800748a:	d10d      	bne.n	80074a8 <__mcmp+0x28>
 800748c:	3314      	adds	r3, #20
 800748e:	3114      	adds	r1, #20
 8007490:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007494:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007498:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800749c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074a0:	4295      	cmp	r5, r2
 80074a2:	d002      	beq.n	80074aa <__mcmp+0x2a>
 80074a4:	d304      	bcc.n	80074b0 <__mcmp+0x30>
 80074a6:	2001      	movs	r0, #1
 80074a8:	bd30      	pop	{r4, r5, pc}
 80074aa:	42a3      	cmp	r3, r4
 80074ac:	d3f4      	bcc.n	8007498 <__mcmp+0x18>
 80074ae:	e7fb      	b.n	80074a8 <__mcmp+0x28>
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295
 80074b4:	e7f8      	b.n	80074a8 <__mcmp+0x28>
	...

080074b8 <__mdiff>:
 80074b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	460d      	mov	r5, r1
 80074be:	4607      	mov	r7, r0
 80074c0:	4611      	mov	r1, r2
 80074c2:	4628      	mov	r0, r5
 80074c4:	4614      	mov	r4, r2
 80074c6:	f7ff ffdb 	bl	8007480 <__mcmp>
 80074ca:	1e06      	subs	r6, r0, #0
 80074cc:	d111      	bne.n	80074f2 <__mdiff+0x3a>
 80074ce:	4631      	mov	r1, r6
 80074d0:	4638      	mov	r0, r7
 80074d2:	f7ff fd57 	bl	8006f84 <_Balloc>
 80074d6:	4602      	mov	r2, r0
 80074d8:	b928      	cbnz	r0, 80074e6 <__mdiff+0x2e>
 80074da:	f240 2132 	movw	r1, #562	; 0x232
 80074de:	4b3a      	ldr	r3, [pc, #232]	; (80075c8 <__mdiff+0x110>)
 80074e0:	483a      	ldr	r0, [pc, #232]	; (80075cc <__mdiff+0x114>)
 80074e2:	f000 fcdb 	bl	8007e9c <__assert_func>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80074ec:	4610      	mov	r0, r2
 80074ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f2:	bfa4      	itt	ge
 80074f4:	4623      	movge	r3, r4
 80074f6:	462c      	movge	r4, r5
 80074f8:	4638      	mov	r0, r7
 80074fa:	6861      	ldr	r1, [r4, #4]
 80074fc:	bfa6      	itte	ge
 80074fe:	461d      	movge	r5, r3
 8007500:	2600      	movge	r6, #0
 8007502:	2601      	movlt	r6, #1
 8007504:	f7ff fd3e 	bl	8006f84 <_Balloc>
 8007508:	4602      	mov	r2, r0
 800750a:	b918      	cbnz	r0, 8007514 <__mdiff+0x5c>
 800750c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007510:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <__mdiff+0x110>)
 8007512:	e7e5      	b.n	80074e0 <__mdiff+0x28>
 8007514:	f102 0814 	add.w	r8, r2, #20
 8007518:	46c2      	mov	sl, r8
 800751a:	f04f 0c00 	mov.w	ip, #0
 800751e:	6927      	ldr	r7, [r4, #16]
 8007520:	60c6      	str	r6, [r0, #12]
 8007522:	692e      	ldr	r6, [r5, #16]
 8007524:	f104 0014 	add.w	r0, r4, #20
 8007528:	f105 0914 	add.w	r9, r5, #20
 800752c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007530:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007534:	3410      	adds	r4, #16
 8007536:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800753a:	f859 3b04 	ldr.w	r3, [r9], #4
 800753e:	fa1f f18b 	uxth.w	r1, fp
 8007542:	448c      	add	ip, r1
 8007544:	b299      	uxth	r1, r3
 8007546:	0c1b      	lsrs	r3, r3, #16
 8007548:	ebac 0101 	sub.w	r1, ip, r1
 800754c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007550:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007554:	b289      	uxth	r1, r1
 8007556:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800755a:	454e      	cmp	r6, r9
 800755c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007560:	f84a 3b04 	str.w	r3, [sl], #4
 8007564:	d8e7      	bhi.n	8007536 <__mdiff+0x7e>
 8007566:	1b73      	subs	r3, r6, r5
 8007568:	3b15      	subs	r3, #21
 800756a:	f023 0303 	bic.w	r3, r3, #3
 800756e:	3515      	adds	r5, #21
 8007570:	3304      	adds	r3, #4
 8007572:	42ae      	cmp	r6, r5
 8007574:	bf38      	it	cc
 8007576:	2304      	movcc	r3, #4
 8007578:	4418      	add	r0, r3
 800757a:	4443      	add	r3, r8
 800757c:	461e      	mov	r6, r3
 800757e:	4605      	mov	r5, r0
 8007580:	4575      	cmp	r5, lr
 8007582:	d30e      	bcc.n	80075a2 <__mdiff+0xea>
 8007584:	f10e 0103 	add.w	r1, lr, #3
 8007588:	1a09      	subs	r1, r1, r0
 800758a:	f021 0103 	bic.w	r1, r1, #3
 800758e:	3803      	subs	r0, #3
 8007590:	4586      	cmp	lr, r0
 8007592:	bf38      	it	cc
 8007594:	2100      	movcc	r1, #0
 8007596:	4419      	add	r1, r3
 8007598:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800759c:	b18b      	cbz	r3, 80075c2 <__mdiff+0x10a>
 800759e:	6117      	str	r7, [r2, #16]
 80075a0:	e7a4      	b.n	80074ec <__mdiff+0x34>
 80075a2:	f855 8b04 	ldr.w	r8, [r5], #4
 80075a6:	fa1f f188 	uxth.w	r1, r8
 80075aa:	4461      	add	r1, ip
 80075ac:	140c      	asrs	r4, r1, #16
 80075ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075b2:	b289      	uxth	r1, r1
 80075b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80075b8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80075bc:	f846 1b04 	str.w	r1, [r6], #4
 80075c0:	e7de      	b.n	8007580 <__mdiff+0xc8>
 80075c2:	3f01      	subs	r7, #1
 80075c4:	e7e8      	b.n	8007598 <__mdiff+0xe0>
 80075c6:	bf00      	nop
 80075c8:	08008417 	.word	0x08008417
 80075cc:	08008488 	.word	0x08008488

080075d0 <__d2b>:
 80075d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80075d4:	2101      	movs	r1, #1
 80075d6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80075da:	4690      	mov	r8, r2
 80075dc:	461d      	mov	r5, r3
 80075de:	f7ff fcd1 	bl	8006f84 <_Balloc>
 80075e2:	4604      	mov	r4, r0
 80075e4:	b930      	cbnz	r0, 80075f4 <__d2b+0x24>
 80075e6:	4602      	mov	r2, r0
 80075e8:	f240 310a 	movw	r1, #778	; 0x30a
 80075ec:	4b24      	ldr	r3, [pc, #144]	; (8007680 <__d2b+0xb0>)
 80075ee:	4825      	ldr	r0, [pc, #148]	; (8007684 <__d2b+0xb4>)
 80075f0:	f000 fc54 	bl	8007e9c <__assert_func>
 80075f4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80075f8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80075fc:	bb2d      	cbnz	r5, 800764a <__d2b+0x7a>
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	f1b8 0300 	subs.w	r3, r8, #0
 8007604:	d026      	beq.n	8007654 <__d2b+0x84>
 8007606:	4668      	mov	r0, sp
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	f7ff fd83 	bl	8007114 <__lo0bits>
 800760e:	9900      	ldr	r1, [sp, #0]
 8007610:	b1f0      	cbz	r0, 8007650 <__d2b+0x80>
 8007612:	9a01      	ldr	r2, [sp, #4]
 8007614:	f1c0 0320 	rsb	r3, r0, #32
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	430b      	orrs	r3, r1
 800761e:	40c2      	lsrs	r2, r0
 8007620:	6163      	str	r3, [r4, #20]
 8007622:	9201      	str	r2, [sp, #4]
 8007624:	9b01      	ldr	r3, [sp, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	bf14      	ite	ne
 800762a:	2102      	movne	r1, #2
 800762c:	2101      	moveq	r1, #1
 800762e:	61a3      	str	r3, [r4, #24]
 8007630:	6121      	str	r1, [r4, #16]
 8007632:	b1c5      	cbz	r5, 8007666 <__d2b+0x96>
 8007634:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007638:	4405      	add	r5, r0
 800763a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800763e:	603d      	str	r5, [r7, #0]
 8007640:	6030      	str	r0, [r6, #0]
 8007642:	4620      	mov	r0, r4
 8007644:	b002      	add	sp, #8
 8007646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800764a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800764e:	e7d6      	b.n	80075fe <__d2b+0x2e>
 8007650:	6161      	str	r1, [r4, #20]
 8007652:	e7e7      	b.n	8007624 <__d2b+0x54>
 8007654:	a801      	add	r0, sp, #4
 8007656:	f7ff fd5d 	bl	8007114 <__lo0bits>
 800765a:	2101      	movs	r1, #1
 800765c:	9b01      	ldr	r3, [sp, #4]
 800765e:	6121      	str	r1, [r4, #16]
 8007660:	6163      	str	r3, [r4, #20]
 8007662:	3020      	adds	r0, #32
 8007664:	e7e5      	b.n	8007632 <__d2b+0x62>
 8007666:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800766a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800766e:	6038      	str	r0, [r7, #0]
 8007670:	6918      	ldr	r0, [r3, #16]
 8007672:	f7ff fd2f 	bl	80070d4 <__hi0bits>
 8007676:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800767a:	6031      	str	r1, [r6, #0]
 800767c:	e7e1      	b.n	8007642 <__d2b+0x72>
 800767e:	bf00      	nop
 8007680:	08008417 	.word	0x08008417
 8007684:	08008488 	.word	0x08008488

08007688 <_calloc_r>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	fba1 5402 	umull	r5, r4, r1, r2
 800768e:	b934      	cbnz	r4, 800769e <_calloc_r+0x16>
 8007690:	4629      	mov	r1, r5
 8007692:	f000 f875 	bl	8007780 <_malloc_r>
 8007696:	4606      	mov	r6, r0
 8007698:	b928      	cbnz	r0, 80076a6 <_calloc_r+0x1e>
 800769a:	4630      	mov	r0, r6
 800769c:	bd70      	pop	{r4, r5, r6, pc}
 800769e:	220c      	movs	r2, #12
 80076a0:	2600      	movs	r6, #0
 80076a2:	6002      	str	r2, [r0, #0]
 80076a4:	e7f9      	b.n	800769a <_calloc_r+0x12>
 80076a6:	462a      	mov	r2, r5
 80076a8:	4621      	mov	r1, r4
 80076aa:	f7fd fdd7 	bl	800525c <memset>
 80076ae:	e7f4      	b.n	800769a <_calloc_r+0x12>

080076b0 <_free_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4605      	mov	r5, r0
 80076b4:	2900      	cmp	r1, #0
 80076b6:	d040      	beq.n	800773a <_free_r+0x8a>
 80076b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076bc:	1f0c      	subs	r4, r1, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	bfb8      	it	lt
 80076c2:	18e4      	addlt	r4, r4, r3
 80076c4:	f000 fc8a 	bl	8007fdc <__malloc_lock>
 80076c8:	4a1c      	ldr	r2, [pc, #112]	; (800773c <_free_r+0x8c>)
 80076ca:	6813      	ldr	r3, [r2, #0]
 80076cc:	b933      	cbnz	r3, 80076dc <_free_r+0x2c>
 80076ce:	6063      	str	r3, [r4, #4]
 80076d0:	6014      	str	r4, [r2, #0]
 80076d2:	4628      	mov	r0, r5
 80076d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d8:	f000 bc86 	b.w	8007fe8 <__malloc_unlock>
 80076dc:	42a3      	cmp	r3, r4
 80076de:	d908      	bls.n	80076f2 <_free_r+0x42>
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	1821      	adds	r1, r4, r0
 80076e4:	428b      	cmp	r3, r1
 80076e6:	bf01      	itttt	eq
 80076e8:	6819      	ldreq	r1, [r3, #0]
 80076ea:	685b      	ldreq	r3, [r3, #4]
 80076ec:	1809      	addeq	r1, r1, r0
 80076ee:	6021      	streq	r1, [r4, #0]
 80076f0:	e7ed      	b.n	80076ce <_free_r+0x1e>
 80076f2:	461a      	mov	r2, r3
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	b10b      	cbz	r3, 80076fc <_free_r+0x4c>
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d9fa      	bls.n	80076f2 <_free_r+0x42>
 80076fc:	6811      	ldr	r1, [r2, #0]
 80076fe:	1850      	adds	r0, r2, r1
 8007700:	42a0      	cmp	r0, r4
 8007702:	d10b      	bne.n	800771c <_free_r+0x6c>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	4401      	add	r1, r0
 8007708:	1850      	adds	r0, r2, r1
 800770a:	4283      	cmp	r3, r0
 800770c:	6011      	str	r1, [r2, #0]
 800770e:	d1e0      	bne.n	80076d2 <_free_r+0x22>
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4401      	add	r1, r0
 8007716:	6011      	str	r1, [r2, #0]
 8007718:	6053      	str	r3, [r2, #4]
 800771a:	e7da      	b.n	80076d2 <_free_r+0x22>
 800771c:	d902      	bls.n	8007724 <_free_r+0x74>
 800771e:	230c      	movs	r3, #12
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	e7d6      	b.n	80076d2 <_free_r+0x22>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	1821      	adds	r1, r4, r0
 8007728:	428b      	cmp	r3, r1
 800772a:	bf01      	itttt	eq
 800772c:	6819      	ldreq	r1, [r3, #0]
 800772e:	685b      	ldreq	r3, [r3, #4]
 8007730:	1809      	addeq	r1, r1, r0
 8007732:	6021      	streq	r1, [r4, #0]
 8007734:	6063      	str	r3, [r4, #4]
 8007736:	6054      	str	r4, [r2, #4]
 8007738:	e7cb      	b.n	80076d2 <_free_r+0x22>
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	200003a0 	.word	0x200003a0

08007740 <sbrk_aligned>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	4e0e      	ldr	r6, [pc, #56]	; (800777c <sbrk_aligned+0x3c>)
 8007744:	460c      	mov	r4, r1
 8007746:	6831      	ldr	r1, [r6, #0]
 8007748:	4605      	mov	r5, r0
 800774a:	b911      	cbnz	r1, 8007752 <sbrk_aligned+0x12>
 800774c:	f000 fb40 	bl	8007dd0 <_sbrk_r>
 8007750:	6030      	str	r0, [r6, #0]
 8007752:	4621      	mov	r1, r4
 8007754:	4628      	mov	r0, r5
 8007756:	f000 fb3b 	bl	8007dd0 <_sbrk_r>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	d00a      	beq.n	8007774 <sbrk_aligned+0x34>
 800775e:	1cc4      	adds	r4, r0, #3
 8007760:	f024 0403 	bic.w	r4, r4, #3
 8007764:	42a0      	cmp	r0, r4
 8007766:	d007      	beq.n	8007778 <sbrk_aligned+0x38>
 8007768:	1a21      	subs	r1, r4, r0
 800776a:	4628      	mov	r0, r5
 800776c:	f000 fb30 	bl	8007dd0 <_sbrk_r>
 8007770:	3001      	adds	r0, #1
 8007772:	d101      	bne.n	8007778 <sbrk_aligned+0x38>
 8007774:	f04f 34ff 	mov.w	r4, #4294967295
 8007778:	4620      	mov	r0, r4
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	200003a4 	.word	0x200003a4

08007780 <_malloc_r>:
 8007780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007784:	1ccd      	adds	r5, r1, #3
 8007786:	f025 0503 	bic.w	r5, r5, #3
 800778a:	3508      	adds	r5, #8
 800778c:	2d0c      	cmp	r5, #12
 800778e:	bf38      	it	cc
 8007790:	250c      	movcc	r5, #12
 8007792:	2d00      	cmp	r5, #0
 8007794:	4607      	mov	r7, r0
 8007796:	db01      	blt.n	800779c <_malloc_r+0x1c>
 8007798:	42a9      	cmp	r1, r5
 800779a:	d905      	bls.n	80077a8 <_malloc_r+0x28>
 800779c:	230c      	movs	r3, #12
 800779e:	2600      	movs	r6, #0
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	4630      	mov	r0, r6
 80077a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a8:	4e2e      	ldr	r6, [pc, #184]	; (8007864 <_malloc_r+0xe4>)
 80077aa:	f000 fc17 	bl	8007fdc <__malloc_lock>
 80077ae:	6833      	ldr	r3, [r6, #0]
 80077b0:	461c      	mov	r4, r3
 80077b2:	bb34      	cbnz	r4, 8007802 <_malloc_r+0x82>
 80077b4:	4629      	mov	r1, r5
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7ff ffc2 	bl	8007740 <sbrk_aligned>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	4604      	mov	r4, r0
 80077c0:	d14d      	bne.n	800785e <_malloc_r+0xde>
 80077c2:	6834      	ldr	r4, [r6, #0]
 80077c4:	4626      	mov	r6, r4
 80077c6:	2e00      	cmp	r6, #0
 80077c8:	d140      	bne.n	800784c <_malloc_r+0xcc>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	4631      	mov	r1, r6
 80077ce:	4638      	mov	r0, r7
 80077d0:	eb04 0803 	add.w	r8, r4, r3
 80077d4:	f000 fafc 	bl	8007dd0 <_sbrk_r>
 80077d8:	4580      	cmp	r8, r0
 80077da:	d13a      	bne.n	8007852 <_malloc_r+0xd2>
 80077dc:	6821      	ldr	r1, [r4, #0]
 80077de:	3503      	adds	r5, #3
 80077e0:	1a6d      	subs	r5, r5, r1
 80077e2:	f025 0503 	bic.w	r5, r5, #3
 80077e6:	3508      	adds	r5, #8
 80077e8:	2d0c      	cmp	r5, #12
 80077ea:	bf38      	it	cc
 80077ec:	250c      	movcc	r5, #12
 80077ee:	4638      	mov	r0, r7
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7ff ffa5 	bl	8007740 <sbrk_aligned>
 80077f6:	3001      	adds	r0, #1
 80077f8:	d02b      	beq.n	8007852 <_malloc_r+0xd2>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	442b      	add	r3, r5
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	e00e      	b.n	8007820 <_malloc_r+0xa0>
 8007802:	6822      	ldr	r2, [r4, #0]
 8007804:	1b52      	subs	r2, r2, r5
 8007806:	d41e      	bmi.n	8007846 <_malloc_r+0xc6>
 8007808:	2a0b      	cmp	r2, #11
 800780a:	d916      	bls.n	800783a <_malloc_r+0xba>
 800780c:	1961      	adds	r1, r4, r5
 800780e:	42a3      	cmp	r3, r4
 8007810:	6025      	str	r5, [r4, #0]
 8007812:	bf18      	it	ne
 8007814:	6059      	strne	r1, [r3, #4]
 8007816:	6863      	ldr	r3, [r4, #4]
 8007818:	bf08      	it	eq
 800781a:	6031      	streq	r1, [r6, #0]
 800781c:	5162      	str	r2, [r4, r5]
 800781e:	604b      	str	r3, [r1, #4]
 8007820:	4638      	mov	r0, r7
 8007822:	f104 060b 	add.w	r6, r4, #11
 8007826:	f000 fbdf 	bl	8007fe8 <__malloc_unlock>
 800782a:	f026 0607 	bic.w	r6, r6, #7
 800782e:	1d23      	adds	r3, r4, #4
 8007830:	1af2      	subs	r2, r6, r3
 8007832:	d0b6      	beq.n	80077a2 <_malloc_r+0x22>
 8007834:	1b9b      	subs	r3, r3, r6
 8007836:	50a3      	str	r3, [r4, r2]
 8007838:	e7b3      	b.n	80077a2 <_malloc_r+0x22>
 800783a:	6862      	ldr	r2, [r4, #4]
 800783c:	42a3      	cmp	r3, r4
 800783e:	bf0c      	ite	eq
 8007840:	6032      	streq	r2, [r6, #0]
 8007842:	605a      	strne	r2, [r3, #4]
 8007844:	e7ec      	b.n	8007820 <_malloc_r+0xa0>
 8007846:	4623      	mov	r3, r4
 8007848:	6864      	ldr	r4, [r4, #4]
 800784a:	e7b2      	b.n	80077b2 <_malloc_r+0x32>
 800784c:	4634      	mov	r4, r6
 800784e:	6876      	ldr	r6, [r6, #4]
 8007850:	e7b9      	b.n	80077c6 <_malloc_r+0x46>
 8007852:	230c      	movs	r3, #12
 8007854:	4638      	mov	r0, r7
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	f000 fbc6 	bl	8007fe8 <__malloc_unlock>
 800785c:	e7a1      	b.n	80077a2 <_malloc_r+0x22>
 800785e:	6025      	str	r5, [r4, #0]
 8007860:	e7de      	b.n	8007820 <_malloc_r+0xa0>
 8007862:	bf00      	nop
 8007864:	200003a0 	.word	0x200003a0

08007868 <__ssputs_r>:
 8007868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786c:	688e      	ldr	r6, [r1, #8]
 800786e:	4682      	mov	sl, r0
 8007870:	429e      	cmp	r6, r3
 8007872:	460c      	mov	r4, r1
 8007874:	4690      	mov	r8, r2
 8007876:	461f      	mov	r7, r3
 8007878:	d838      	bhi.n	80078ec <__ssputs_r+0x84>
 800787a:	898a      	ldrh	r2, [r1, #12]
 800787c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007880:	d032      	beq.n	80078e8 <__ssputs_r+0x80>
 8007882:	6825      	ldr	r5, [r4, #0]
 8007884:	6909      	ldr	r1, [r1, #16]
 8007886:	3301      	adds	r3, #1
 8007888:	eba5 0901 	sub.w	r9, r5, r1
 800788c:	6965      	ldr	r5, [r4, #20]
 800788e:	444b      	add	r3, r9
 8007890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007898:	106d      	asrs	r5, r5, #1
 800789a:	429d      	cmp	r5, r3
 800789c:	bf38      	it	cc
 800789e:	461d      	movcc	r5, r3
 80078a0:	0553      	lsls	r3, r2, #21
 80078a2:	d531      	bpl.n	8007908 <__ssputs_r+0xa0>
 80078a4:	4629      	mov	r1, r5
 80078a6:	f7ff ff6b 	bl	8007780 <_malloc_r>
 80078aa:	4606      	mov	r6, r0
 80078ac:	b950      	cbnz	r0, 80078c4 <__ssputs_r+0x5c>
 80078ae:	230c      	movs	r3, #12
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295
 80078b4:	f8ca 3000 	str.w	r3, [sl]
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078be:	81a3      	strh	r3, [r4, #12]
 80078c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c4:	464a      	mov	r2, r9
 80078c6:	6921      	ldr	r1, [r4, #16]
 80078c8:	f7ff fb4e 	bl	8006f68 <memcpy>
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d6:	81a3      	strh	r3, [r4, #12]
 80078d8:	6126      	str	r6, [r4, #16]
 80078da:	444e      	add	r6, r9
 80078dc:	6026      	str	r6, [r4, #0]
 80078de:	463e      	mov	r6, r7
 80078e0:	6165      	str	r5, [r4, #20]
 80078e2:	eba5 0509 	sub.w	r5, r5, r9
 80078e6:	60a5      	str	r5, [r4, #8]
 80078e8:	42be      	cmp	r6, r7
 80078ea:	d900      	bls.n	80078ee <__ssputs_r+0x86>
 80078ec:	463e      	mov	r6, r7
 80078ee:	4632      	mov	r2, r6
 80078f0:	4641      	mov	r1, r8
 80078f2:	6820      	ldr	r0, [r4, #0]
 80078f4:	f000 fb58 	bl	8007fa8 <memmove>
 80078f8:	68a3      	ldr	r3, [r4, #8]
 80078fa:	2000      	movs	r0, #0
 80078fc:	1b9b      	subs	r3, r3, r6
 80078fe:	60a3      	str	r3, [r4, #8]
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	4433      	add	r3, r6
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	e7db      	b.n	80078c0 <__ssputs_r+0x58>
 8007908:	462a      	mov	r2, r5
 800790a:	f000 fb73 	bl	8007ff4 <_realloc_r>
 800790e:	4606      	mov	r6, r0
 8007910:	2800      	cmp	r0, #0
 8007912:	d1e1      	bne.n	80078d8 <__ssputs_r+0x70>
 8007914:	4650      	mov	r0, sl
 8007916:	6921      	ldr	r1, [r4, #16]
 8007918:	f7ff feca 	bl	80076b0 <_free_r>
 800791c:	e7c7      	b.n	80078ae <__ssputs_r+0x46>
	...

08007920 <_svfiprintf_r>:
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	4698      	mov	r8, r3
 8007926:	898b      	ldrh	r3, [r1, #12]
 8007928:	4607      	mov	r7, r0
 800792a:	061b      	lsls	r3, r3, #24
 800792c:	460d      	mov	r5, r1
 800792e:	4614      	mov	r4, r2
 8007930:	b09d      	sub	sp, #116	; 0x74
 8007932:	d50e      	bpl.n	8007952 <_svfiprintf_r+0x32>
 8007934:	690b      	ldr	r3, [r1, #16]
 8007936:	b963      	cbnz	r3, 8007952 <_svfiprintf_r+0x32>
 8007938:	2140      	movs	r1, #64	; 0x40
 800793a:	f7ff ff21 	bl	8007780 <_malloc_r>
 800793e:	6028      	str	r0, [r5, #0]
 8007940:	6128      	str	r0, [r5, #16]
 8007942:	b920      	cbnz	r0, 800794e <_svfiprintf_r+0x2e>
 8007944:	230c      	movs	r3, #12
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	e0d1      	b.n	8007af2 <_svfiprintf_r+0x1d2>
 800794e:	2340      	movs	r3, #64	; 0x40
 8007950:	616b      	str	r3, [r5, #20]
 8007952:	2300      	movs	r3, #0
 8007954:	9309      	str	r3, [sp, #36]	; 0x24
 8007956:	2320      	movs	r3, #32
 8007958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800795c:	2330      	movs	r3, #48	; 0x30
 800795e:	f04f 0901 	mov.w	r9, #1
 8007962:	f8cd 800c 	str.w	r8, [sp, #12]
 8007966:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b0c <_svfiprintf_r+0x1ec>
 800796a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800796e:	4623      	mov	r3, r4
 8007970:	469a      	mov	sl, r3
 8007972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007976:	b10a      	cbz	r2, 800797c <_svfiprintf_r+0x5c>
 8007978:	2a25      	cmp	r2, #37	; 0x25
 800797a:	d1f9      	bne.n	8007970 <_svfiprintf_r+0x50>
 800797c:	ebba 0b04 	subs.w	fp, sl, r4
 8007980:	d00b      	beq.n	800799a <_svfiprintf_r+0x7a>
 8007982:	465b      	mov	r3, fp
 8007984:	4622      	mov	r2, r4
 8007986:	4629      	mov	r1, r5
 8007988:	4638      	mov	r0, r7
 800798a:	f7ff ff6d 	bl	8007868 <__ssputs_r>
 800798e:	3001      	adds	r0, #1
 8007990:	f000 80aa 	beq.w	8007ae8 <_svfiprintf_r+0x1c8>
 8007994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007996:	445a      	add	r2, fp
 8007998:	9209      	str	r2, [sp, #36]	; 0x24
 800799a:	f89a 3000 	ldrb.w	r3, [sl]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 80a2 	beq.w	8007ae8 <_svfiprintf_r+0x1c8>
 80079a4:	2300      	movs	r3, #0
 80079a6:	f04f 32ff 	mov.w	r2, #4294967295
 80079aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ae:	f10a 0a01 	add.w	sl, sl, #1
 80079b2:	9304      	str	r3, [sp, #16]
 80079b4:	9307      	str	r3, [sp, #28]
 80079b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ba:	931a      	str	r3, [sp, #104]	; 0x68
 80079bc:	4654      	mov	r4, sl
 80079be:	2205      	movs	r2, #5
 80079c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c4:	4851      	ldr	r0, [pc, #324]	; (8007b0c <_svfiprintf_r+0x1ec>)
 80079c6:	f7ff fac1 	bl	8006f4c <memchr>
 80079ca:	9a04      	ldr	r2, [sp, #16]
 80079cc:	b9d8      	cbnz	r0, 8007a06 <_svfiprintf_r+0xe6>
 80079ce:	06d0      	lsls	r0, r2, #27
 80079d0:	bf44      	itt	mi
 80079d2:	2320      	movmi	r3, #32
 80079d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d8:	0711      	lsls	r1, r2, #28
 80079da:	bf44      	itt	mi
 80079dc:	232b      	movmi	r3, #43	; 0x2b
 80079de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e2:	f89a 3000 	ldrb.w	r3, [sl]
 80079e6:	2b2a      	cmp	r3, #42	; 0x2a
 80079e8:	d015      	beq.n	8007a16 <_svfiprintf_r+0xf6>
 80079ea:	4654      	mov	r4, sl
 80079ec:	2000      	movs	r0, #0
 80079ee:	f04f 0c0a 	mov.w	ip, #10
 80079f2:	9a07      	ldr	r2, [sp, #28]
 80079f4:	4621      	mov	r1, r4
 80079f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079fa:	3b30      	subs	r3, #48	; 0x30
 80079fc:	2b09      	cmp	r3, #9
 80079fe:	d94e      	bls.n	8007a9e <_svfiprintf_r+0x17e>
 8007a00:	b1b0      	cbz	r0, 8007a30 <_svfiprintf_r+0x110>
 8007a02:	9207      	str	r2, [sp, #28]
 8007a04:	e014      	b.n	8007a30 <_svfiprintf_r+0x110>
 8007a06:	eba0 0308 	sub.w	r3, r0, r8
 8007a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	46a2      	mov	sl, r4
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	e7d2      	b.n	80079bc <_svfiprintf_r+0x9c>
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	1d19      	adds	r1, r3, #4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	9103      	str	r1, [sp, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfbb      	ittet	lt
 8007a22:	425b      	neglt	r3, r3
 8007a24:	f042 0202 	orrlt.w	r2, r2, #2
 8007a28:	9307      	strge	r3, [sp, #28]
 8007a2a:	9307      	strlt	r3, [sp, #28]
 8007a2c:	bfb8      	it	lt
 8007a2e:	9204      	strlt	r2, [sp, #16]
 8007a30:	7823      	ldrb	r3, [r4, #0]
 8007a32:	2b2e      	cmp	r3, #46	; 0x2e
 8007a34:	d10c      	bne.n	8007a50 <_svfiprintf_r+0x130>
 8007a36:	7863      	ldrb	r3, [r4, #1]
 8007a38:	2b2a      	cmp	r3, #42	; 0x2a
 8007a3a:	d135      	bne.n	8007aa8 <_svfiprintf_r+0x188>
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	3402      	adds	r4, #2
 8007a40:	1d1a      	adds	r2, r3, #4
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	9203      	str	r2, [sp, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bfb8      	it	lt
 8007a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a4e:	9305      	str	r3, [sp, #20]
 8007a50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007b10 <_svfiprintf_r+0x1f0>
 8007a54:	2203      	movs	r2, #3
 8007a56:	4650      	mov	r0, sl
 8007a58:	7821      	ldrb	r1, [r4, #0]
 8007a5a:	f7ff fa77 	bl	8006f4c <memchr>
 8007a5e:	b140      	cbz	r0, 8007a72 <_svfiprintf_r+0x152>
 8007a60:	2340      	movs	r3, #64	; 0x40
 8007a62:	eba0 000a 	sub.w	r0, r0, sl
 8007a66:	fa03 f000 	lsl.w	r0, r3, r0
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	3401      	adds	r4, #1
 8007a6e:	4303      	orrs	r3, r0
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a76:	2206      	movs	r2, #6
 8007a78:	4826      	ldr	r0, [pc, #152]	; (8007b14 <_svfiprintf_r+0x1f4>)
 8007a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a7e:	f7ff fa65 	bl	8006f4c <memchr>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d038      	beq.n	8007af8 <_svfiprintf_r+0x1d8>
 8007a86:	4b24      	ldr	r3, [pc, #144]	; (8007b18 <_svfiprintf_r+0x1f8>)
 8007a88:	bb1b      	cbnz	r3, 8007ad2 <_svfiprintf_r+0x1b2>
 8007a8a:	9b03      	ldr	r3, [sp, #12]
 8007a8c:	3307      	adds	r3, #7
 8007a8e:	f023 0307 	bic.w	r3, r3, #7
 8007a92:	3308      	adds	r3, #8
 8007a94:	9303      	str	r3, [sp, #12]
 8007a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a98:	4433      	add	r3, r6
 8007a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9c:	e767      	b.n	800796e <_svfiprintf_r+0x4e>
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aa6:	e7a5      	b.n	80079f4 <_svfiprintf_r+0xd4>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f04f 0c0a 	mov.w	ip, #10
 8007aae:	4619      	mov	r1, r3
 8007ab0:	3401      	adds	r4, #1
 8007ab2:	9305      	str	r3, [sp, #20]
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aba:	3a30      	subs	r2, #48	; 0x30
 8007abc:	2a09      	cmp	r2, #9
 8007abe:	d903      	bls.n	8007ac8 <_svfiprintf_r+0x1a8>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0c5      	beq.n	8007a50 <_svfiprintf_r+0x130>
 8007ac4:	9105      	str	r1, [sp, #20]
 8007ac6:	e7c3      	b.n	8007a50 <_svfiprintf_r+0x130>
 8007ac8:	4604      	mov	r4, r0
 8007aca:	2301      	movs	r3, #1
 8007acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ad0:	e7f0      	b.n	8007ab4 <_svfiprintf_r+0x194>
 8007ad2:	ab03      	add	r3, sp, #12
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4638      	mov	r0, r7
 8007ada:	4b10      	ldr	r3, [pc, #64]	; (8007b1c <_svfiprintf_r+0x1fc>)
 8007adc:	a904      	add	r1, sp, #16
 8007ade:	f7fd fc63 	bl	80053a8 <_printf_float>
 8007ae2:	1c42      	adds	r2, r0, #1
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	d1d6      	bne.n	8007a96 <_svfiprintf_r+0x176>
 8007ae8:	89ab      	ldrh	r3, [r5, #12]
 8007aea:	065b      	lsls	r3, r3, #25
 8007aec:	f53f af2c 	bmi.w	8007948 <_svfiprintf_r+0x28>
 8007af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007af2:	b01d      	add	sp, #116	; 0x74
 8007af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af8:	ab03      	add	r3, sp, #12
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	462a      	mov	r2, r5
 8007afe:	4638      	mov	r0, r7
 8007b00:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <_svfiprintf_r+0x1fc>)
 8007b02:	a904      	add	r1, sp, #16
 8007b04:	f7fd feec 	bl	80058e0 <_printf_i>
 8007b08:	e7eb      	b.n	8007ae2 <_svfiprintf_r+0x1c2>
 8007b0a:	bf00      	nop
 8007b0c:	080085e4 	.word	0x080085e4
 8007b10:	080085ea 	.word	0x080085ea
 8007b14:	080085ee 	.word	0x080085ee
 8007b18:	080053a9 	.word	0x080053a9
 8007b1c:	08007869 	.word	0x08007869

08007b20 <__sfputc_r>:
 8007b20:	6893      	ldr	r3, [r2, #8]
 8007b22:	b410      	push	{r4}
 8007b24:	3b01      	subs	r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	6093      	str	r3, [r2, #8]
 8007b2a:	da07      	bge.n	8007b3c <__sfputc_r+0x1c>
 8007b2c:	6994      	ldr	r4, [r2, #24]
 8007b2e:	42a3      	cmp	r3, r4
 8007b30:	db01      	blt.n	8007b36 <__sfputc_r+0x16>
 8007b32:	290a      	cmp	r1, #10
 8007b34:	d102      	bne.n	8007b3c <__sfputc_r+0x1c>
 8007b36:	bc10      	pop	{r4}
 8007b38:	f7fe b8a6 	b.w	8005c88 <__swbuf_r>
 8007b3c:	6813      	ldr	r3, [r2, #0]
 8007b3e:	1c58      	adds	r0, r3, #1
 8007b40:	6010      	str	r0, [r2, #0]
 8007b42:	7019      	strb	r1, [r3, #0]
 8007b44:	4608      	mov	r0, r1
 8007b46:	bc10      	pop	{r4}
 8007b48:	4770      	bx	lr

08007b4a <__sfputs_r>:
 8007b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	460f      	mov	r7, r1
 8007b50:	4614      	mov	r4, r2
 8007b52:	18d5      	adds	r5, r2, r3
 8007b54:	42ac      	cmp	r4, r5
 8007b56:	d101      	bne.n	8007b5c <__sfputs_r+0x12>
 8007b58:	2000      	movs	r0, #0
 8007b5a:	e007      	b.n	8007b6c <__sfputs_r+0x22>
 8007b5c:	463a      	mov	r2, r7
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b64:	f7ff ffdc 	bl	8007b20 <__sfputc_r>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d1f3      	bne.n	8007b54 <__sfputs_r+0xa>
 8007b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b70 <_vfiprintf_r>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	460d      	mov	r5, r1
 8007b76:	4614      	mov	r4, r2
 8007b78:	4698      	mov	r8, r3
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	b09d      	sub	sp, #116	; 0x74
 8007b7e:	b118      	cbz	r0, 8007b88 <_vfiprintf_r+0x18>
 8007b80:	6983      	ldr	r3, [r0, #24]
 8007b82:	b90b      	cbnz	r3, 8007b88 <_vfiprintf_r+0x18>
 8007b84:	f7ff f8d0 	bl	8006d28 <__sinit>
 8007b88:	4b89      	ldr	r3, [pc, #548]	; (8007db0 <_vfiprintf_r+0x240>)
 8007b8a:	429d      	cmp	r5, r3
 8007b8c:	d11b      	bne.n	8007bc6 <_vfiprintf_r+0x56>
 8007b8e:	6875      	ldr	r5, [r6, #4]
 8007b90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b92:	07d9      	lsls	r1, r3, #31
 8007b94:	d405      	bmi.n	8007ba2 <_vfiprintf_r+0x32>
 8007b96:	89ab      	ldrh	r3, [r5, #12]
 8007b98:	059a      	lsls	r2, r3, #22
 8007b9a:	d402      	bmi.n	8007ba2 <_vfiprintf_r+0x32>
 8007b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b9e:	f7ff f966 	bl	8006e6e <__retarget_lock_acquire_recursive>
 8007ba2:	89ab      	ldrh	r3, [r5, #12]
 8007ba4:	071b      	lsls	r3, r3, #28
 8007ba6:	d501      	bpl.n	8007bac <_vfiprintf_r+0x3c>
 8007ba8:	692b      	ldr	r3, [r5, #16]
 8007baa:	b9eb      	cbnz	r3, 8007be8 <_vfiprintf_r+0x78>
 8007bac:	4629      	mov	r1, r5
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f7fe f8bc 	bl	8005d2c <__swsetup_r>
 8007bb4:	b1c0      	cbz	r0, 8007be8 <_vfiprintf_r+0x78>
 8007bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bb8:	07dc      	lsls	r4, r3, #31
 8007bba:	d50e      	bpl.n	8007bda <_vfiprintf_r+0x6a>
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	b01d      	add	sp, #116	; 0x74
 8007bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc6:	4b7b      	ldr	r3, [pc, #492]	; (8007db4 <_vfiprintf_r+0x244>)
 8007bc8:	429d      	cmp	r5, r3
 8007bca:	d101      	bne.n	8007bd0 <_vfiprintf_r+0x60>
 8007bcc:	68b5      	ldr	r5, [r6, #8]
 8007bce:	e7df      	b.n	8007b90 <_vfiprintf_r+0x20>
 8007bd0:	4b79      	ldr	r3, [pc, #484]	; (8007db8 <_vfiprintf_r+0x248>)
 8007bd2:	429d      	cmp	r5, r3
 8007bd4:	bf08      	it	eq
 8007bd6:	68f5      	ldreq	r5, [r6, #12]
 8007bd8:	e7da      	b.n	8007b90 <_vfiprintf_r+0x20>
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	0598      	lsls	r0, r3, #22
 8007bde:	d4ed      	bmi.n	8007bbc <_vfiprintf_r+0x4c>
 8007be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007be2:	f7ff f945 	bl	8006e70 <__retarget_lock_release_recursive>
 8007be6:	e7e9      	b.n	8007bbc <_vfiprintf_r+0x4c>
 8007be8:	2300      	movs	r3, #0
 8007bea:	9309      	str	r3, [sp, #36]	; 0x24
 8007bec:	2320      	movs	r3, #32
 8007bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bf2:	2330      	movs	r3, #48	; 0x30
 8007bf4:	f04f 0901 	mov.w	r9, #1
 8007bf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bfc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007dbc <_vfiprintf_r+0x24c>
 8007c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c04:	4623      	mov	r3, r4
 8007c06:	469a      	mov	sl, r3
 8007c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c0c:	b10a      	cbz	r2, 8007c12 <_vfiprintf_r+0xa2>
 8007c0e:	2a25      	cmp	r2, #37	; 0x25
 8007c10:	d1f9      	bne.n	8007c06 <_vfiprintf_r+0x96>
 8007c12:	ebba 0b04 	subs.w	fp, sl, r4
 8007c16:	d00b      	beq.n	8007c30 <_vfiprintf_r+0xc0>
 8007c18:	465b      	mov	r3, fp
 8007c1a:	4622      	mov	r2, r4
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7ff ff93 	bl	8007b4a <__sfputs_r>
 8007c24:	3001      	adds	r0, #1
 8007c26:	f000 80aa 	beq.w	8007d7e <_vfiprintf_r+0x20e>
 8007c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c2c:	445a      	add	r2, fp
 8007c2e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c30:	f89a 3000 	ldrb.w	r3, [sl]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 80a2 	beq.w	8007d7e <_vfiprintf_r+0x20e>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c44:	f10a 0a01 	add.w	sl, sl, #1
 8007c48:	9304      	str	r3, [sp, #16]
 8007c4a:	9307      	str	r3, [sp, #28]
 8007c4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c50:	931a      	str	r3, [sp, #104]	; 0x68
 8007c52:	4654      	mov	r4, sl
 8007c54:	2205      	movs	r2, #5
 8007c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c5a:	4858      	ldr	r0, [pc, #352]	; (8007dbc <_vfiprintf_r+0x24c>)
 8007c5c:	f7ff f976 	bl	8006f4c <memchr>
 8007c60:	9a04      	ldr	r2, [sp, #16]
 8007c62:	b9d8      	cbnz	r0, 8007c9c <_vfiprintf_r+0x12c>
 8007c64:	06d1      	lsls	r1, r2, #27
 8007c66:	bf44      	itt	mi
 8007c68:	2320      	movmi	r3, #32
 8007c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c6e:	0713      	lsls	r3, r2, #28
 8007c70:	bf44      	itt	mi
 8007c72:	232b      	movmi	r3, #43	; 0x2b
 8007c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c78:	f89a 3000 	ldrb.w	r3, [sl]
 8007c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c7e:	d015      	beq.n	8007cac <_vfiprintf_r+0x13c>
 8007c80:	4654      	mov	r4, sl
 8007c82:	2000      	movs	r0, #0
 8007c84:	f04f 0c0a 	mov.w	ip, #10
 8007c88:	9a07      	ldr	r2, [sp, #28]
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c90:	3b30      	subs	r3, #48	; 0x30
 8007c92:	2b09      	cmp	r3, #9
 8007c94:	d94e      	bls.n	8007d34 <_vfiprintf_r+0x1c4>
 8007c96:	b1b0      	cbz	r0, 8007cc6 <_vfiprintf_r+0x156>
 8007c98:	9207      	str	r2, [sp, #28]
 8007c9a:	e014      	b.n	8007cc6 <_vfiprintf_r+0x156>
 8007c9c:	eba0 0308 	sub.w	r3, r0, r8
 8007ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	46a2      	mov	sl, r4
 8007ca8:	9304      	str	r3, [sp, #16]
 8007caa:	e7d2      	b.n	8007c52 <_vfiprintf_r+0xe2>
 8007cac:	9b03      	ldr	r3, [sp, #12]
 8007cae:	1d19      	adds	r1, r3, #4
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	9103      	str	r1, [sp, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bfbb      	ittet	lt
 8007cb8:	425b      	neglt	r3, r3
 8007cba:	f042 0202 	orrlt.w	r2, r2, #2
 8007cbe:	9307      	strge	r3, [sp, #28]
 8007cc0:	9307      	strlt	r3, [sp, #28]
 8007cc2:	bfb8      	it	lt
 8007cc4:	9204      	strlt	r2, [sp, #16]
 8007cc6:	7823      	ldrb	r3, [r4, #0]
 8007cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cca:	d10c      	bne.n	8007ce6 <_vfiprintf_r+0x176>
 8007ccc:	7863      	ldrb	r3, [r4, #1]
 8007cce:	2b2a      	cmp	r3, #42	; 0x2a
 8007cd0:	d135      	bne.n	8007d3e <_vfiprintf_r+0x1ce>
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	3402      	adds	r4, #2
 8007cd6:	1d1a      	adds	r2, r3, #4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	9203      	str	r2, [sp, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bfb8      	it	lt
 8007ce0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ce4:	9305      	str	r3, [sp, #20]
 8007ce6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007dc0 <_vfiprintf_r+0x250>
 8007cea:	2203      	movs	r2, #3
 8007cec:	4650      	mov	r0, sl
 8007cee:	7821      	ldrb	r1, [r4, #0]
 8007cf0:	f7ff f92c 	bl	8006f4c <memchr>
 8007cf4:	b140      	cbz	r0, 8007d08 <_vfiprintf_r+0x198>
 8007cf6:	2340      	movs	r3, #64	; 0x40
 8007cf8:	eba0 000a 	sub.w	r0, r0, sl
 8007cfc:	fa03 f000 	lsl.w	r0, r3, r0
 8007d00:	9b04      	ldr	r3, [sp, #16]
 8007d02:	3401      	adds	r4, #1
 8007d04:	4303      	orrs	r3, r0
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d0c:	2206      	movs	r2, #6
 8007d0e:	482d      	ldr	r0, [pc, #180]	; (8007dc4 <_vfiprintf_r+0x254>)
 8007d10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d14:	f7ff f91a 	bl	8006f4c <memchr>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d03f      	beq.n	8007d9c <_vfiprintf_r+0x22c>
 8007d1c:	4b2a      	ldr	r3, [pc, #168]	; (8007dc8 <_vfiprintf_r+0x258>)
 8007d1e:	bb1b      	cbnz	r3, 8007d68 <_vfiprintf_r+0x1f8>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	3307      	adds	r3, #7
 8007d24:	f023 0307 	bic.w	r3, r3, #7
 8007d28:	3308      	adds	r3, #8
 8007d2a:	9303      	str	r3, [sp, #12]
 8007d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2e:	443b      	add	r3, r7
 8007d30:	9309      	str	r3, [sp, #36]	; 0x24
 8007d32:	e767      	b.n	8007c04 <_vfiprintf_r+0x94>
 8007d34:	460c      	mov	r4, r1
 8007d36:	2001      	movs	r0, #1
 8007d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d3c:	e7a5      	b.n	8007c8a <_vfiprintf_r+0x11a>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f04f 0c0a 	mov.w	ip, #10
 8007d44:	4619      	mov	r1, r3
 8007d46:	3401      	adds	r4, #1
 8007d48:	9305      	str	r3, [sp, #20]
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d50:	3a30      	subs	r2, #48	; 0x30
 8007d52:	2a09      	cmp	r2, #9
 8007d54:	d903      	bls.n	8007d5e <_vfiprintf_r+0x1ee>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0c5      	beq.n	8007ce6 <_vfiprintf_r+0x176>
 8007d5a:	9105      	str	r1, [sp, #20]
 8007d5c:	e7c3      	b.n	8007ce6 <_vfiprintf_r+0x176>
 8007d5e:	4604      	mov	r4, r0
 8007d60:	2301      	movs	r3, #1
 8007d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d66:	e7f0      	b.n	8007d4a <_vfiprintf_r+0x1da>
 8007d68:	ab03      	add	r3, sp, #12
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	462a      	mov	r2, r5
 8007d6e:	4630      	mov	r0, r6
 8007d70:	4b16      	ldr	r3, [pc, #88]	; (8007dcc <_vfiprintf_r+0x25c>)
 8007d72:	a904      	add	r1, sp, #16
 8007d74:	f7fd fb18 	bl	80053a8 <_printf_float>
 8007d78:	4607      	mov	r7, r0
 8007d7a:	1c78      	adds	r0, r7, #1
 8007d7c:	d1d6      	bne.n	8007d2c <_vfiprintf_r+0x1bc>
 8007d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d80:	07d9      	lsls	r1, r3, #31
 8007d82:	d405      	bmi.n	8007d90 <_vfiprintf_r+0x220>
 8007d84:	89ab      	ldrh	r3, [r5, #12]
 8007d86:	059a      	lsls	r2, r3, #22
 8007d88:	d402      	bmi.n	8007d90 <_vfiprintf_r+0x220>
 8007d8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d8c:	f7ff f870 	bl	8006e70 <__retarget_lock_release_recursive>
 8007d90:	89ab      	ldrh	r3, [r5, #12]
 8007d92:	065b      	lsls	r3, r3, #25
 8007d94:	f53f af12 	bmi.w	8007bbc <_vfiprintf_r+0x4c>
 8007d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d9a:	e711      	b.n	8007bc0 <_vfiprintf_r+0x50>
 8007d9c:	ab03      	add	r3, sp, #12
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	462a      	mov	r2, r5
 8007da2:	4630      	mov	r0, r6
 8007da4:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <_vfiprintf_r+0x25c>)
 8007da6:	a904      	add	r1, sp, #16
 8007da8:	f7fd fd9a 	bl	80058e0 <_printf_i>
 8007dac:	e7e4      	b.n	8007d78 <_vfiprintf_r+0x208>
 8007dae:	bf00      	nop
 8007db0:	08008448 	.word	0x08008448
 8007db4:	08008468 	.word	0x08008468
 8007db8:	08008428 	.word	0x08008428
 8007dbc:	080085e4 	.word	0x080085e4
 8007dc0:	080085ea 	.word	0x080085ea
 8007dc4:	080085ee 	.word	0x080085ee
 8007dc8:	080053a9 	.word	0x080053a9
 8007dcc:	08007b4b 	.word	0x08007b4b

08007dd0 <_sbrk_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4d05      	ldr	r5, [pc, #20]	; (8007dec <_sbrk_r+0x1c>)
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	4608      	mov	r0, r1
 8007dda:	602b      	str	r3, [r5, #0]
 8007ddc:	f7fa ff48 	bl	8002c70 <_sbrk>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d102      	bne.n	8007dea <_sbrk_r+0x1a>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	b103      	cbz	r3, 8007dea <_sbrk_r+0x1a>
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	200003a8 	.word	0x200003a8

08007df0 <__sread>:
 8007df0:	b510      	push	{r4, lr}
 8007df2:	460c      	mov	r4, r1
 8007df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df8:	f000 f92c 	bl	8008054 <_read_r>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	bfab      	itete	ge
 8007e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e02:	89a3      	ldrhlt	r3, [r4, #12]
 8007e04:	181b      	addge	r3, r3, r0
 8007e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e0a:	bfac      	ite	ge
 8007e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e0e:	81a3      	strhlt	r3, [r4, #12]
 8007e10:	bd10      	pop	{r4, pc}

08007e12 <__swrite>:
 8007e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e16:	461f      	mov	r7, r3
 8007e18:	898b      	ldrh	r3, [r1, #12]
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	05db      	lsls	r3, r3, #23
 8007e1e:	460c      	mov	r4, r1
 8007e20:	4616      	mov	r6, r2
 8007e22:	d505      	bpl.n	8007e30 <__swrite+0x1e>
 8007e24:	2302      	movs	r3, #2
 8007e26:	2200      	movs	r2, #0
 8007e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2c:	f000 f898 	bl	8007f60 <_lseek_r>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	4632      	mov	r2, r6
 8007e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e38:	81a3      	strh	r3, [r4, #12]
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	463b      	mov	r3, r7
 8007e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e46:	f000 b817 	b.w	8007e78 <_write_r>

08007e4a <__sseek>:
 8007e4a:	b510      	push	{r4, lr}
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e52:	f000 f885 	bl	8007f60 <_lseek_r>
 8007e56:	1c43      	adds	r3, r0, #1
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	bf15      	itete	ne
 8007e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e66:	81a3      	strheq	r3, [r4, #12]
 8007e68:	bf18      	it	ne
 8007e6a:	81a3      	strhne	r3, [r4, #12]
 8007e6c:	bd10      	pop	{r4, pc}

08007e6e <__sclose>:
 8007e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e72:	f000 b831 	b.w	8007ed8 <_close_r>
	...

08007e78 <_write_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	4611      	mov	r1, r2
 8007e80:	2200      	movs	r2, #0
 8007e82:	4d05      	ldr	r5, [pc, #20]	; (8007e98 <_write_r+0x20>)
 8007e84:	602a      	str	r2, [r5, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f7fa fea5 	bl	8002bd6 <_write>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_write_r+0x1e>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_write_r+0x1e>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	200003a8 	.word	0x200003a8

08007e9c <__assert_func>:
 8007e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e9e:	4614      	mov	r4, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <__assert_func+0x2c>)
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68d8      	ldr	r0, [r3, #12]
 8007eaa:	b14c      	cbz	r4, 8007ec0 <__assert_func+0x24>
 8007eac:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <__assert_func+0x30>)
 8007eae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007eb2:	9100      	str	r1, [sp, #0]
 8007eb4:	462b      	mov	r3, r5
 8007eb6:	4906      	ldr	r1, [pc, #24]	; (8007ed0 <__assert_func+0x34>)
 8007eb8:	f000 f81e 	bl	8007ef8 <fiprintf>
 8007ebc:	f000 f8e9 	bl	8008092 <abort>
 8007ec0:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <__assert_func+0x38>)
 8007ec2:	461c      	mov	r4, r3
 8007ec4:	e7f3      	b.n	8007eae <__assert_func+0x12>
 8007ec6:	bf00      	nop
 8007ec8:	20000010 	.word	0x20000010
 8007ecc:	080085f5 	.word	0x080085f5
 8007ed0:	08008602 	.word	0x08008602
 8007ed4:	08008630 	.word	0x08008630

08007ed8 <_close_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	2300      	movs	r3, #0
 8007edc:	4d05      	ldr	r5, [pc, #20]	; (8007ef4 <_close_r+0x1c>)
 8007ede:	4604      	mov	r4, r0
 8007ee0:	4608      	mov	r0, r1
 8007ee2:	602b      	str	r3, [r5, #0]
 8007ee4:	f7fa fe93 	bl	8002c0e <_close>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d102      	bne.n	8007ef2 <_close_r+0x1a>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	b103      	cbz	r3, 8007ef2 <_close_r+0x1a>
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	200003a8 	.word	0x200003a8

08007ef8 <fiprintf>:
 8007ef8:	b40e      	push	{r1, r2, r3}
 8007efa:	b503      	push	{r0, r1, lr}
 8007efc:	4601      	mov	r1, r0
 8007efe:	ab03      	add	r3, sp, #12
 8007f00:	4805      	ldr	r0, [pc, #20]	; (8007f18 <fiprintf+0x20>)
 8007f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f06:	6800      	ldr	r0, [r0, #0]
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	f7ff fe31 	bl	8007b70 <_vfiprintf_r>
 8007f0e:	b002      	add	sp, #8
 8007f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f14:	b003      	add	sp, #12
 8007f16:	4770      	bx	lr
 8007f18:	20000010 	.word	0x20000010

08007f1c <_fstat_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	2300      	movs	r3, #0
 8007f20:	4d06      	ldr	r5, [pc, #24]	; (8007f3c <_fstat_r+0x20>)
 8007f22:	4604      	mov	r4, r0
 8007f24:	4608      	mov	r0, r1
 8007f26:	4611      	mov	r1, r2
 8007f28:	602b      	str	r3, [r5, #0]
 8007f2a:	f7fa fe7b 	bl	8002c24 <_fstat>
 8007f2e:	1c43      	adds	r3, r0, #1
 8007f30:	d102      	bne.n	8007f38 <_fstat_r+0x1c>
 8007f32:	682b      	ldr	r3, [r5, #0]
 8007f34:	b103      	cbz	r3, 8007f38 <_fstat_r+0x1c>
 8007f36:	6023      	str	r3, [r4, #0]
 8007f38:	bd38      	pop	{r3, r4, r5, pc}
 8007f3a:	bf00      	nop
 8007f3c:	200003a8 	.word	0x200003a8

08007f40 <_isatty_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	2300      	movs	r3, #0
 8007f44:	4d05      	ldr	r5, [pc, #20]	; (8007f5c <_isatty_r+0x1c>)
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	602b      	str	r3, [r5, #0]
 8007f4c:	f7fa fe79 	bl	8002c42 <_isatty>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_isatty_r+0x1a>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_isatty_r+0x1a>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	200003a8 	.word	0x200003a8

08007f60 <_lseek_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	4611      	mov	r1, r2
 8007f68:	2200      	movs	r2, #0
 8007f6a:	4d05      	ldr	r5, [pc, #20]	; (8007f80 <_lseek_r+0x20>)
 8007f6c:	602a      	str	r2, [r5, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7fa fe71 	bl	8002c56 <_lseek>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_lseek_r+0x1e>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_lseek_r+0x1e>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	200003a8 	.word	0x200003a8

08007f84 <__ascii_mbtowc>:
 8007f84:	b082      	sub	sp, #8
 8007f86:	b901      	cbnz	r1, 8007f8a <__ascii_mbtowc+0x6>
 8007f88:	a901      	add	r1, sp, #4
 8007f8a:	b142      	cbz	r2, 8007f9e <__ascii_mbtowc+0x1a>
 8007f8c:	b14b      	cbz	r3, 8007fa2 <__ascii_mbtowc+0x1e>
 8007f8e:	7813      	ldrb	r3, [r2, #0]
 8007f90:	600b      	str	r3, [r1, #0]
 8007f92:	7812      	ldrb	r2, [r2, #0]
 8007f94:	1e10      	subs	r0, r2, #0
 8007f96:	bf18      	it	ne
 8007f98:	2001      	movne	r0, #1
 8007f9a:	b002      	add	sp, #8
 8007f9c:	4770      	bx	lr
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	e7fb      	b.n	8007f9a <__ascii_mbtowc+0x16>
 8007fa2:	f06f 0001 	mvn.w	r0, #1
 8007fa6:	e7f8      	b.n	8007f9a <__ascii_mbtowc+0x16>

08007fa8 <memmove>:
 8007fa8:	4288      	cmp	r0, r1
 8007faa:	b510      	push	{r4, lr}
 8007fac:	eb01 0402 	add.w	r4, r1, r2
 8007fb0:	d902      	bls.n	8007fb8 <memmove+0x10>
 8007fb2:	4284      	cmp	r4, r0
 8007fb4:	4623      	mov	r3, r4
 8007fb6:	d807      	bhi.n	8007fc8 <memmove+0x20>
 8007fb8:	1e43      	subs	r3, r0, #1
 8007fba:	42a1      	cmp	r1, r4
 8007fbc:	d008      	beq.n	8007fd0 <memmove+0x28>
 8007fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fc6:	e7f8      	b.n	8007fba <memmove+0x12>
 8007fc8:	4601      	mov	r1, r0
 8007fca:	4402      	add	r2, r0
 8007fcc:	428a      	cmp	r2, r1
 8007fce:	d100      	bne.n	8007fd2 <memmove+0x2a>
 8007fd0:	bd10      	pop	{r4, pc}
 8007fd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fda:	e7f7      	b.n	8007fcc <memmove+0x24>

08007fdc <__malloc_lock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__malloc_lock+0x8>)
 8007fde:	f7fe bf46 	b.w	8006e6e <__retarget_lock_acquire_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	2000039c 	.word	0x2000039c

08007fe8 <__malloc_unlock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__malloc_unlock+0x8>)
 8007fea:	f7fe bf41 	b.w	8006e70 <__retarget_lock_release_recursive>
 8007fee:	bf00      	nop
 8007ff0:	2000039c 	.word	0x2000039c

08007ff4 <_realloc_r>:
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	4614      	mov	r4, r2
 8007ffc:	460e      	mov	r6, r1
 8007ffe:	b921      	cbnz	r1, 800800a <_realloc_r+0x16>
 8008000:	4611      	mov	r1, r2
 8008002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008006:	f7ff bbbb 	b.w	8007780 <_malloc_r>
 800800a:	b92a      	cbnz	r2, 8008018 <_realloc_r+0x24>
 800800c:	f7ff fb50 	bl	80076b0 <_free_r>
 8008010:	4625      	mov	r5, r4
 8008012:	4628      	mov	r0, r5
 8008014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008018:	f000 f842 	bl	80080a0 <_malloc_usable_size_r>
 800801c:	4284      	cmp	r4, r0
 800801e:	4607      	mov	r7, r0
 8008020:	d802      	bhi.n	8008028 <_realloc_r+0x34>
 8008022:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008026:	d812      	bhi.n	800804e <_realloc_r+0x5a>
 8008028:	4621      	mov	r1, r4
 800802a:	4640      	mov	r0, r8
 800802c:	f7ff fba8 	bl	8007780 <_malloc_r>
 8008030:	4605      	mov	r5, r0
 8008032:	2800      	cmp	r0, #0
 8008034:	d0ed      	beq.n	8008012 <_realloc_r+0x1e>
 8008036:	42bc      	cmp	r4, r7
 8008038:	4622      	mov	r2, r4
 800803a:	4631      	mov	r1, r6
 800803c:	bf28      	it	cs
 800803e:	463a      	movcs	r2, r7
 8008040:	f7fe ff92 	bl	8006f68 <memcpy>
 8008044:	4631      	mov	r1, r6
 8008046:	4640      	mov	r0, r8
 8008048:	f7ff fb32 	bl	80076b0 <_free_r>
 800804c:	e7e1      	b.n	8008012 <_realloc_r+0x1e>
 800804e:	4635      	mov	r5, r6
 8008050:	e7df      	b.n	8008012 <_realloc_r+0x1e>
	...

08008054 <_read_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4604      	mov	r4, r0
 8008058:	4608      	mov	r0, r1
 800805a:	4611      	mov	r1, r2
 800805c:	2200      	movs	r2, #0
 800805e:	4d05      	ldr	r5, [pc, #20]	; (8008074 <_read_r+0x20>)
 8008060:	602a      	str	r2, [r5, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	f7fa fd9a 	bl	8002b9c <_read>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d102      	bne.n	8008072 <_read_r+0x1e>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	b103      	cbz	r3, 8008072 <_read_r+0x1e>
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	200003a8 	.word	0x200003a8

08008078 <__ascii_wctomb>:
 8008078:	4603      	mov	r3, r0
 800807a:	4608      	mov	r0, r1
 800807c:	b141      	cbz	r1, 8008090 <__ascii_wctomb+0x18>
 800807e:	2aff      	cmp	r2, #255	; 0xff
 8008080:	d904      	bls.n	800808c <__ascii_wctomb+0x14>
 8008082:	228a      	movs	r2, #138	; 0x8a
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	4770      	bx	lr
 800808c:	2001      	movs	r0, #1
 800808e:	700a      	strb	r2, [r1, #0]
 8008090:	4770      	bx	lr

08008092 <abort>:
 8008092:	2006      	movs	r0, #6
 8008094:	b508      	push	{r3, lr}
 8008096:	f000 f833 	bl	8008100 <raise>
 800809a:	2001      	movs	r0, #1
 800809c:	f7fa fd74 	bl	8002b88 <_exit>

080080a0 <_malloc_usable_size_r>:
 80080a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a4:	1f18      	subs	r0, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bfbc      	itt	lt
 80080aa:	580b      	ldrlt	r3, [r1, r0]
 80080ac:	18c0      	addlt	r0, r0, r3
 80080ae:	4770      	bx	lr

080080b0 <_raise_r>:
 80080b0:	291f      	cmp	r1, #31
 80080b2:	b538      	push	{r3, r4, r5, lr}
 80080b4:	4604      	mov	r4, r0
 80080b6:	460d      	mov	r5, r1
 80080b8:	d904      	bls.n	80080c4 <_raise_r+0x14>
 80080ba:	2316      	movs	r3, #22
 80080bc:	6003      	str	r3, [r0, #0]
 80080be:	f04f 30ff 	mov.w	r0, #4294967295
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080c6:	b112      	cbz	r2, 80080ce <_raise_r+0x1e>
 80080c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080cc:	b94b      	cbnz	r3, 80080e2 <_raise_r+0x32>
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 f830 	bl	8008134 <_getpid_r>
 80080d4:	462a      	mov	r2, r5
 80080d6:	4601      	mov	r1, r0
 80080d8:	4620      	mov	r0, r4
 80080da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080de:	f000 b817 	b.w	8008110 <_kill_r>
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d00a      	beq.n	80080fc <_raise_r+0x4c>
 80080e6:	1c59      	adds	r1, r3, #1
 80080e8:	d103      	bne.n	80080f2 <_raise_r+0x42>
 80080ea:	2316      	movs	r3, #22
 80080ec:	6003      	str	r3, [r0, #0]
 80080ee:	2001      	movs	r0, #1
 80080f0:	e7e7      	b.n	80080c2 <_raise_r+0x12>
 80080f2:	2400      	movs	r4, #0
 80080f4:	4628      	mov	r0, r5
 80080f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080fa:	4798      	blx	r3
 80080fc:	2000      	movs	r0, #0
 80080fe:	e7e0      	b.n	80080c2 <_raise_r+0x12>

08008100 <raise>:
 8008100:	4b02      	ldr	r3, [pc, #8]	; (800810c <raise+0xc>)
 8008102:	4601      	mov	r1, r0
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	f7ff bfd3 	b.w	80080b0 <_raise_r>
 800810a:	bf00      	nop
 800810c:	20000010 	.word	0x20000010

08008110 <_kill_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	2300      	movs	r3, #0
 8008114:	4d06      	ldr	r5, [pc, #24]	; (8008130 <_kill_r+0x20>)
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	4611      	mov	r1, r2
 800811c:	602b      	str	r3, [r5, #0]
 800811e:	f7fa fd23 	bl	8002b68 <_kill>
 8008122:	1c43      	adds	r3, r0, #1
 8008124:	d102      	bne.n	800812c <_kill_r+0x1c>
 8008126:	682b      	ldr	r3, [r5, #0]
 8008128:	b103      	cbz	r3, 800812c <_kill_r+0x1c>
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	bd38      	pop	{r3, r4, r5, pc}
 800812e:	bf00      	nop
 8008130:	200003a8 	.word	0x200003a8

08008134 <_getpid_r>:
 8008134:	f7fa bd11 	b.w	8002b5a <_getpid>

08008138 <_init>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	bf00      	nop
 800813c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813e:	bc08      	pop	{r3}
 8008140:	469e      	mov	lr, r3
 8008142:	4770      	bx	lr

08008144 <_fini>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	bf00      	nop
 8008148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814a:	bc08      	pop	{r3}
 800814c:	469e      	mov	lr, r3
 800814e:	4770      	bx	lr
