
Dryer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c68  08004c68  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004c68  08004c68  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c68  08004c68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000074  08004ce4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004ce4  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b213  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5f  00000000  00000000  0002b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0002d210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  0002dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019334  00000000  00000000  0002ec88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f02d  00000000  00000000  00047fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c057  00000000  00000000  00056fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000e3040  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f0  00000000  00000000  000e308c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080049d0 	.word	0x080049d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080049d0 	.word	0x080049d0

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0310 	and.w	r3, r3, #16
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]


}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <gpio_init>:

/* USER CODE BEGIN 2 */
void gpio_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIOx = {0};
 80001ae:	463b      	mov	r3, r7
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = DOOR_SW;
 80001ba:	2301      	movs	r3, #1
 80001bc:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001be:	4b19      	ldr	r3, [pc, #100]	; (8000224 <gpio_init+0x7c>)
 80001c0:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_PULLUP;
 80001c2:	2301      	movs	r3, #1
 80001c4:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001c6:	2302      	movs	r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001ca:	463b      	mov	r3, r7
 80001cc:	4619      	mov	r1, r3
 80001ce:	4816      	ldr	r0, [pc, #88]	; (8000228 <gpio_init+0x80>)
 80001d0:	f001 fe18 	bl	8001e04 <HAL_GPIO_Init>

	GPIOx.Pin = LIMIT_SW | HEATER_SW | SEL_ROT_SW;
 80001d4:	230e      	movs	r3, #14
 80001d6:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_INPUT;
 80001d8:	2300      	movs	r3, #0
 80001da:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_PULLUP;
 80001dc:	2301      	movs	r3, #1
 80001de:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001e0:	2302      	movs	r3, #2
 80001e2:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001e4:	463b      	mov	r3, r7
 80001e6:	4619      	mov	r1, r3
 80001e8:	480f      	ldr	r0, [pc, #60]	; (8000228 <gpio_init+0x80>)
 80001ea:	f001 fe0b 	bl	8001e04 <HAL_GPIO_Init>

	GPIOx.Pin = LED;
 80001ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f2:	603b      	str	r3, [r7, #0]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2301      	movs	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
	GPIOx.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60bb      	str	r3, [r7, #8]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOC, &GPIOx);
 8000200:	463b      	mov	r3, r7
 8000202:	4619      	mov	r1, r3
 8000204:	4809      	ldr	r0, [pc, #36]	; (800022c <gpio_init+0x84>)
 8000206:	f001 fdfd 	bl	8001e04 <HAL_GPIO_Init>

	//HAL_GPIO_WritePin(GPIOC, LED, LOW);

	HAL_NVIC_SetPriority(EXTI0_IRQn,0,0);
 800020a:	2200      	movs	r2, #0
 800020c:	2100      	movs	r1, #0
 800020e:	2006      	movs	r0, #6
 8000210:	f001 fdc1 	bl	8001d96 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000214:	2006      	movs	r0, #6
 8000216:	f001 fdda 	bl	8001dce <HAL_NVIC_EnableIRQ>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	10310000 	.word	0x10310000
 8000228:	40010800 	.word	0x40010800
 800022c:	40011000 	.word	0x40011000

08000230 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(DOOR_SW);
 8000234:	2001      	movs	r0, #1
 8000236:	f001 ff99 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <keypad_init>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

void keypad_init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <keypad_init+0x54>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <keypad_init+0x54>)
 800024c:	f043 0308 	orr.w	r3, r3, #8
 8000250:	6193      	str	r3, [r2, #24]
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <keypad_init+0x54>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	f003 0308 	and.w	r3, r3, #8
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 800025e:	f107 0308 	add.w	r3, r7, #8
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = LOW_KEY | MED_KEY | HIGH_KEY | FN_KEY;
 800026c:	f640 4303 	movw	r3, #3075	; 0xc03
 8000270:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_INPUT;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 8000276:	2301      	movs	r3, #1
 8000278:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 800027a:	2303      	movs	r3, #3
 800027c:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(KEYPAD_PORT, &GPIOx);
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	4619      	mov	r1, r3
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <keypad_init+0x58>)
 8000286:	f001 fdbd 	bl	8001e04 <HAL_GPIO_Init>
}
 800028a:	bf00      	nop
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	40010c00 	.word	0x40010c00

0800029c <scan_keypad>:

uint8_t scan_keypad(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 80002a0:	f000 f832 	bl	8000308 <is_low_key_pressed>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d004      	beq.n	80002b4 <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 80002aa:	4813      	ldr	r0, [pc, #76]	; (80002f8 <scan_keypad+0x5c>)
 80002ac:	f003 fa30 	bl	8003710 <puts>
		return LOW_KEY_PRESSED;
 80002b0:	2301      	movs	r3, #1
 80002b2:	e01e      	b.n	80002f2 <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 80002b4:	f000 f860 	bl	8000378 <is_med_key_pressed>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d004      	beq.n	80002c8 <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 80002be:	480f      	ldr	r0, [pc, #60]	; (80002fc <scan_keypad+0x60>)
 80002c0:	f003 fa26 	bl	8003710 <puts>
		return MED_KEY_PRESSED;
 80002c4:	2302      	movs	r3, #2
 80002c6:	e014      	b.n	80002f2 <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 80002c8:	f000 f890 	bl	80003ec <is_high_key_pressed>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d004      	beq.n	80002dc <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 80002d2:	480b      	ldr	r0, [pc, #44]	; (8000300 <scan_keypad+0x64>)
 80002d4:	f003 fa1c 	bl	8003710 <puts>
		return HIGH_KEY_PRESSED;
 80002d8:	2303      	movs	r3, #3
 80002da:	e00a      	b.n	80002f2 <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 80002dc:	f000 f8c0 	bl	8000460 <is_fn_key_pressed>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d004      	beq.n	80002f0 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 80002e6:	4807      	ldr	r0, [pc, #28]	; (8000304 <scan_keypad+0x68>)
 80002e8:	f003 fa12 	bl	8003710 <puts>
		return FN_KEY_PRESSED;
 80002ec:	2304      	movs	r3, #4
 80002ee:	e000      	b.n	80002f2 <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	080049e8 	.word	0x080049e8
 80002fc:	080049fc 	.word	0x080049fc
 8000300:	08004a10 	.word	0x08004a10
 8000304:	08004a24 	.word	0x08004a24

08000308 <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 800030c:	f001 fc3e 	bl	8001b8c <HAL_GetTick>
 8000310:	4602      	mov	r2, r0
 8000312:	4b16      	ldr	r3, [pc, #88]	; (800036c <is_low_key_pressed+0x64>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	1ad3      	subs	r3, r2, r3
 8000318:	2b0a      	cmp	r3, #10
 800031a:	d923      	bls.n	8000364 <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 800031c:	2102      	movs	r1, #2
 800031e:	4814      	ldr	r0, [pc, #80]	; (8000370 <is_low_key_pressed+0x68>)
 8000320:	f001 fef4 	bl	800210c <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d114      	bne.n	8000354 <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <is_low_key_pressed+0x6c>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b01      	cmp	r3, #1
 8000332:	d112      	bne.n	800035a <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 8000334:	2102      	movs	r1, #2
 8000336:	480e      	ldr	r0, [pc, #56]	; (8000370 <is_low_key_pressed+0x68>)
 8000338:	f001 fee8 	bl	800210c <HAL_GPIO_ReadPin>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d104      	bne.n	800034c <is_low_key_pressed+0x44>
				{
					last_state = 0;
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <is_low_key_pressed+0x6c>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
					return 1;
 8000348:	2301      	movs	r3, #1
 800034a:	e00c      	b.n	8000366 <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <is_low_key_pressed+0x6c>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
 8000352:	e002      	b.n	800035a <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <is_low_key_pressed+0x6c>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800035a:	f001 fc17 	bl	8001b8c <HAL_GetTick>
 800035e:	4603      	mov	r3, r0
 8000360:	4a02      	ldr	r2, [pc, #8]	; (800036c <is_low_key_pressed+0x64>)
 8000362:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000364:	2300      	movs	r3, #0
}
 8000366:	4618      	mov	r0, r3
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000090 	.word	0x20000090
 8000370:	40010c00 	.word	0x40010c00
 8000374:	20000094 	.word	0x20000094

08000378 <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 800037c:	f001 fc06 	bl	8001b8c <HAL_GetTick>
 8000380:	4602      	mov	r2, r0
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <is_med_key_pressed+0x68>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	2b0a      	cmp	r3, #10
 800038a:	d925      	bls.n	80003d8 <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 800038c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000390:	4814      	ldr	r0, [pc, #80]	; (80003e4 <is_med_key_pressed+0x6c>)
 8000392:	f001 febb 	bl	800210c <HAL_GPIO_ReadPin>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d115      	bne.n	80003c8 <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <is_med_key_pressed+0x70>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d113      	bne.n	80003ce <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 80003a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003aa:	480e      	ldr	r0, [pc, #56]	; (80003e4 <is_med_key_pressed+0x6c>)
 80003ac:	f001 feae 	bl	800210c <HAL_GPIO_ReadPin>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d104      	bne.n	80003c0 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <is_med_key_pressed+0x70>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
					return 1;
 80003bc:	2301      	movs	r3, #1
 80003be:	e00c      	b.n	80003da <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <is_med_key_pressed+0x70>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
 80003c6:	e002      	b.n	80003ce <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <is_med_key_pressed+0x70>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80003ce:	f001 fbdd 	bl	8001b8c <HAL_GetTick>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a02      	ldr	r2, [pc, #8]	; (80003e0 <is_med_key_pressed+0x68>)
 80003d6:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80003d8:	2300      	movs	r3, #0
}
 80003da:	4618      	mov	r0, r3
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000098 	.word	0x20000098
 80003e4:	40010c00 	.word	0x40010c00
 80003e8:	2000009c 	.word	0x2000009c

080003ec <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 80003f0:	f001 fbcc 	bl	8001b8c <HAL_GetTick>
 80003f4:	4602      	mov	r2, r0
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <is_high_key_pressed+0x68>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	1ad3      	subs	r3, r2, r3
 80003fc:	2b0a      	cmp	r3, #10
 80003fe:	d925      	bls.n	800044c <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4814      	ldr	r0, [pc, #80]	; (8000458 <is_high_key_pressed+0x6c>)
 8000406:	f001 fe81 	bl	800210c <HAL_GPIO_ReadPin>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d115      	bne.n	800043c <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <is_high_key_pressed+0x70>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b01      	cmp	r3, #1
 8000418:	d113      	bne.n	8000442 <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	480e      	ldr	r0, [pc, #56]	; (8000458 <is_high_key_pressed+0x6c>)
 8000420:	f001 fe74 	bl	800210c <HAL_GPIO_ReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d104      	bne.n	8000434 <is_high_key_pressed+0x48>
				{
					last_state = 0;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <is_high_key_pressed+0x70>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
					return 1;
 8000430:	2301      	movs	r3, #1
 8000432:	e00c      	b.n	800044e <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <is_high_key_pressed+0x70>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
 800043a:	e002      	b.n	8000442 <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <is_high_key_pressed+0x70>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000442:	f001 fba3 	bl	8001b8c <HAL_GetTick>
 8000446:	4603      	mov	r3, r0
 8000448:	4a02      	ldr	r2, [pc, #8]	; (8000454 <is_high_key_pressed+0x68>)
 800044a:	6013      	str	r3, [r2, #0]
	}
	return 0;
 800044c:	2300      	movs	r3, #0
}
 800044e:	4618      	mov	r0, r3
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a0 	.word	0x200000a0
 8000458:	40010c00 	.word	0x40010c00
 800045c:	200000a4 	.word	0x200000a4

08000460 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 10U)
 8000464:	f001 fb92 	bl	8001b8c <HAL_GetTick>
 8000468:	4602      	mov	r2, r0
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <is_fn_key_pressed+0x64>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	2b0a      	cmp	r3, #10
 8000472:	d923      	bls.n	80004bc <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8000474:	2101      	movs	r1, #1
 8000476:	4814      	ldr	r0, [pc, #80]	; (80004c8 <is_fn_key_pressed+0x68>)
 8000478:	f001 fe48 	bl	800210c <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d114      	bne.n	80004ac <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <is_fn_key_pressed+0x6c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	2b01      	cmp	r3, #1
 800048a:	d112      	bne.n	80004b2 <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 800048c:	2101      	movs	r1, #1
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <is_fn_key_pressed+0x68>)
 8000490:	f001 fe3c 	bl	800210c <HAL_GPIO_ReadPin>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d104      	bne.n	80004a4 <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <is_fn_key_pressed+0x6c>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
					return 1;
 80004a0:	2301      	movs	r3, #1
 80004a2:	e00c      	b.n	80004be <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <is_fn_key_pressed+0x6c>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e002      	b.n	80004b2 <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 80004ac:	4b07      	ldr	r3, [pc, #28]	; (80004cc <is_fn_key_pressed+0x6c>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80004b2:	f001 fb6b 	bl	8001b8c <HAL_GetTick>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a02      	ldr	r2, [pc, #8]	; (80004c4 <is_fn_key_pressed+0x64>)
 80004ba:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000a8 	.word	0x200000a8
 80004c8:	40010c00 	.word	0x40010c00
 80004cc:	200000ac 	.word	0x200000ac

080004d0 <lcd_gpio_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_gpio_init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0
	__HAL_RCC_AFIO_CLK_ENABLE();
 80004d6:	4b47      	ldr	r3, [pc, #284]	; (80005f4 <lcd_gpio_init+0x124>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a46      	ldr	r2, [pc, #280]	; (80005f4 <lcd_gpio_init+0x124>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b44      	ldr	r3, [pc, #272]	; (80005f4 <lcd_gpio_init+0x124>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_AFIO_REMAP_SWJ_NONJTRST();
 80004ee:	4b42      	ldr	r3, [pc, #264]	; (80005f8 <lcd_gpio_init+0x128>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
 80004f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
 80004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000502:	627b      	str	r3, [r7, #36]	; 0x24
 8000504:	4a3c      	ldr	r2, [pc, #240]	; (80005f8 <lcd_gpio_init+0x128>)
 8000506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000508:	6053      	str	r3, [r2, #4]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050a:	4b3b      	ldr	r3, [pc, #236]	; (80005f8 <lcd_gpio_init+0x128>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	623b      	str	r3, [r7, #32]
 8000510:	6a3b      	ldr	r3, [r7, #32]
 8000512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000516:	623b      	str	r3, [r7, #32]
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051e:	623b      	str	r3, [r7, #32]
 8000520:	4a35      	ldr	r2, [pc, #212]	; (80005f8 <lcd_gpio_init+0x128>)
 8000522:	6a3b      	ldr	r3, [r7, #32]
 8000524:	6053      	str	r3, [r2, #4]

	//__HAL_AFIO_REMAP_SWJ_DISABLE();

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <lcd_gpio_init+0x124>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a32      	ldr	r2, [pc, #200]	; (80005f4 <lcd_gpio_init+0x124>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <lcd_gpio_init+0x124>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <lcd_gpio_init+0x124>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <lcd_gpio_init+0x124>)
 8000544:	f043 0308 	orr.w	r3, r3, #8
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <lcd_gpio_init+0x124>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0308 	and.w	r3, r3, #8
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	4824      	ldr	r0, [pc, #144]	; (80005fc <lcd_gpio_init+0x12c>)
 800056c:	f001 fde5 	bl	800213a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_gpio_init+0x12c>)
 8000578:	f001 fddf 	bl	800213a <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_RS | LCD_PIN_EN;
 800057c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000580:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 8000586:	2302      	movs	r3, #2
 8000588:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2302      	movs	r3, #2
 800058c:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_CTRL, &GPIOx);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4819      	ldr	r0, [pc, #100]	; (80005fc <lcd_gpio_init+0x12c>)
 8000596:	f001 fc35 	bl	8001e04 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	21f8      	movs	r1, #248	; 0xf8
 800059e:	4817      	ldr	r0, [pc, #92]	; (80005fc <lcd_gpio_init+0x12c>)
 80005a0:	f001 fdcb 	bl	800213a <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4;
 80005a4:	23f8      	movs	r3, #248	; 0xf8
 80005a6:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D0_4, &GPIOx);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	4810      	ldr	r0, [pc, #64]	; (80005fc <lcd_gpio_init+0x12c>)
 80005bc:	f001 fc22 	bl	8001e04 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <lcd_gpio_init+0x130>)
 80005c8:	f001 fdb7 	bl	800213a <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7;
 80005cc:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80005d0:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 80005d6:	2302      	movs	r3, #2
 80005d8:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2302      	movs	r3, #2
 80005dc:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D5_7, &GPIOx);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <lcd_gpio_init+0x130>)
 80005e6:	f001 fc0d 	bl	8001e04 <HAL_GPIO_Init>

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010000 	.word	0x40010000
 80005fc:	40010c00 	.word	0x40010c00
 8000600:	40010800 	.word	0x40010800

08000604 <lcd_init>:

void lcd_init(uint8_t fourbitmode)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <lcd_init+0x28>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 800061a:	e002      	b.n	8000622 <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <lcd_init+0x28>)
 800061e:	2210      	movs	r2, #16
 8000620:	701a      	strb	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	200000ad 	.word	0x200000ad

08000630 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	460b      	mov	r3, r1
 800063c:	71bb      	strb	r3, [r7, #6]
 800063e:	4613      	mov	r3, r2
 8000640:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d906      	bls.n	8000656 <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 8000648:	4b30      	ldr	r3, [pc, #192]	; (800070c <lcd_begin+0xdc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <lcd_begin+0xdc>)
 8000654:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 8000656:	4a2e      	ldr	r2, [pc, #184]	; (8000710 <lcd_begin+0xe0>)
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <lcd_begin+0xe4>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d009      	beq.n	800067c <lcd_begin+0x4c>
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d106      	bne.n	800067c <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <lcd_begin+0xdc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <lcd_begin+0xdc>)
 800067a:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f001 fa8e 	bl	8001ba0 <HAL_Delay>
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS | LCD_PIN_EN, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 7140 	mov.w	r1, #768	; 0x300
 800068a:	4823      	ldr	r0, [pc, #140]	; (8000718 <lcd_begin+0xe8>)
 800068c:	f001 fd55 	bl	800213a <HAL_GPIO_WritePin>
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <lcd_begin+0xdc>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	f043 0320 	orr.w	r3, r3, #32
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f902 	bl	80008a4 <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 80006a0:	200a      	movs	r0, #10
 80006a2:	f001 fa7d 	bl	8001ba0 <HAL_Delay>

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <lcd_begin+0xdc>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f8f7 	bl	80008a4 <lcd_send_cmd>
	    HAL_Delay(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f001 fa72 	bl	8001ba0 <HAL_Delay>

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <lcd_begin+0xdc>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	f043 0320 	orr.w	r3, r3, #32
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f8ec 	bl	80008a4 <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <lcd_begin+0xdc>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f043 0320 	orr.w	r3, r3, #32
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f8e4 	bl	80008a4 <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <lcd_begin+0xec>)
 80006de:	2204      	movs	r2, #4
 80006e0:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 f828 	bl	8000738 <lcd_display>

	// clear it off
	lcd_clear();
 80006e8:	f000 f8f2 	bl	80008d0 <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <lcd_begin+0xf0>)
 80006ee:	2202      	movs	r2, #2
 80006f0:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <lcd_begin+0xf0>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f8d1 	bl	80008a4 <lcd_send_cmd>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000ad 	.word	0x200000ad
 8000710:	200000b0 	.word	0x200000b0
 8000714:	200000b1 	.word	0x200000b1
 8000718:	40010c00 	.word	0x40010c00
 800071c:	200000ae 	.word	0x200000ae
 8000720:	200000af 	.word	0x200000af

08000724 <lcd_home>:

void lcd_home(void){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
 8000728:	2002      	movs	r0, #2
 800072a:	f000 f8bb 	bl	80008a4 <lcd_send_cmd>
	HAL_Delay(2); // this command takes a long time!
 800072e:	2002      	movs	r0, #2
 8000730:	f001 fa36 	bl	8001ba0 <HAL_Delay>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcd_display>:

void lcd_display(uint8_t state)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	if(state)
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00f      	beq.n	8000768 <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <lcd_display+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <lcd_display+0x58>)
 8000754:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <lcd_display+0x58>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f89f 	bl	80008a4 <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 8000766:	e00e      	b.n	8000786 <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <lcd_display+0x58>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	f023 0304 	bic.w	r3, r3, #4
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <lcd_display+0x58>)
 8000774:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <lcd_display+0x58>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f88f 	bl	80008a4 <lcd_send_cmd>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000ae 	.word	0x200000ae

08000794 <lcd_enable>:

void lcd_enable(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <lcd_enable+0x40>)
 80007a0:	f001 fccb 	bl	800213a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f001 f9fb 	bl	8001ba0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <lcd_enable+0x40>)
 80007b2:	f001 fcc2 	bl	800213a <HAL_GPIO_WritePin>
	HAL_Delay(1); // enable pulse must be >450ns
 80007b6:	2001      	movs	r0, #1
 80007b8:	f001 f9f2 	bl	8001ba0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <lcd_enable+0x40>)
 80007c4:	f001 fcb9 	bl	800213a <HAL_GPIO_WritePin>
	HAL_Delay(1); // commands need > 37us to settle
 80007c8:	2001      	movs	r0, #1
 80007ca:	f001 f9e9 	bl	8001ba0 <HAL_Delay>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <write_8bit>:

void write_8bit(uint8_t value)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D7, (value >> 7) & 0x01);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	09db      	lsrs	r3, r3, #7
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ee:	482b      	ldr	r0, [pc, #172]	; (800089c <write_8bit+0xc4>)
 80007f0:	f001 fca3 	bl	800213a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D6, (value >> 6) & 0x01);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	099b      	lsrs	r3, r3, #6
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461a      	mov	r2, r3
 8000802:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000806:	4825      	ldr	r0, [pc, #148]	; (800089c <write_8bit+0xc4>)
 8000808:	f001 fc97 	bl	800213a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5, (value >> 5) & 0x01);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	095b      	lsrs	r3, r3, #5
 8000810:	b2db      	uxtb	r3, r3
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	461a      	mov	r2, r3
 800081a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800081e:	481f      	ldr	r0, [pc, #124]	; (800089c <write_8bit+0xc4>)
 8000820:	f001 fc8b 	bl	800213a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D4, (value >> 4) & 0x01);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	091b      	lsrs	r3, r3, #4
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	2108      	movs	r1, #8
 8000834:	481a      	ldr	r0, [pc, #104]	; (80008a0 <write_8bit+0xc8>)
 8000836:	f001 fc80 	bl	800213a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D3, (value >> 3) & 0x01);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	08db      	lsrs	r3, r3, #3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	461a      	mov	r2, r3
 8000848:	2110      	movs	r1, #16
 800084a:	4815      	ldr	r0, [pc, #84]	; (80008a0 <write_8bit+0xc8>)
 800084c:	f001 fc75 	bl	800213a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D2, (value >> 2) & 0x01);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	2120      	movs	r1, #32
 8000860:	480f      	ldr	r0, [pc, #60]	; (80008a0 <write_8bit+0xc8>)
 8000862:	f001 fc6a 	bl	800213a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D1, (value >> 1) & 0x01);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	480a      	ldr	r0, [pc, #40]	; (80008a0 <write_8bit+0xc8>)
 8000878:	f001 fc5f 	bl	800213a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0, (value >> 0) & 0x01);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
 8000884:	461a      	mov	r2, r3
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <write_8bit+0xc8>)
 800088a:	f001 fc56 	bl	800213a <HAL_GPIO_WritePin>

	lcd_enable();
 800088e:	f7ff ff81 	bl	8000794 <lcd_enable>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40010800 	.word	0x40010800
 80008a0:	40010c00 	.word	0x40010c00

080008a4 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <lcd_send_cmd+0x28>)
 80008b6:	f001 fc40 	bl	800213a <HAL_GPIO_WritePin>
	write_8bit(cmd);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff8b 	bl	80007d8 <write_8bit>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40010c00 	.word	0x40010c00

080008d0 <lcd_clear>:

void lcd_clear(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff ffe5 	bl	80008a4 <lcd_send_cmd>
	HAL_Delay(2);
 80008da:	2002      	movs	r0, #2
 80008dc:	f001 f960 	bl	8001ba0 <HAL_Delay>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <lcd_send_data+0x28>)
 80008f6:	f001 fc20 	bl	800213a <HAL_GPIO_WritePin>
	write_8bit(data);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff6b 	bl	80007d8 <write_8bit>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40010c00 	.word	0x40010c00

08000910 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ffe1 	bl	80008e4 <lcd_send_data>
		str++;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3301      	adds	r3, #1
 8000926:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1f3      	bne.n	8000918 <lcd_print+0x8>
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	460a      	mov	r2, r1
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	4613      	mov	r3, r2
 800094a:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <lcd_set_cursor+0x58>)
 800094e:	f107 0408 	add.w	r4, r7, #8
 8000952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _numlines) {
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <lcd_set_cursor+0x5c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	79ba      	ldrb	r2, [r7, #6]
 800095e:	429a      	cmp	r2, r3
 8000960:	d903      	bls.n	800096a <lcd_set_cursor+0x2e>
		row = _numlines - 1; // we count rows starting w/0
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <lcd_set_cursor+0x5c>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	3b01      	subs	r3, #1
 8000968:	71bb      	strb	r3, [r7, #6]
		}
	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	3318      	adds	r3, #24
 8000970:	443b      	add	r3, r7
 8000972:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4413      	add	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff8d 	bl	80008a4 <lcd_send_cmd>
}
 800098a:	bf00      	nop
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd90      	pop	{r4, r7, pc}
 8000992:	bf00      	nop
 8000994:	08004a34 	.word	0x08004a34
 8000998:	200000b0 	.word	0x200000b0

0800099c <lcd_update>:
void mode_level_page(void);
void limit_sw_err_page(void);
void complete_page(void);

void lcd_update(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	switch(cur_page){
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <lcd_update+0x5c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b07      	cmp	r3, #7
 80009a6:	d825      	bhi.n	80009f4 <lcd_update+0x58>
 80009a8:	a201      	add	r2, pc, #4	; (adr r2, 80009b0 <lcd_update+0x14>)
 80009aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ae:	bf00      	nop
 80009b0:	080009d1 	.word	0x080009d1
 80009b4:	080009d7 	.word	0x080009d7
 80009b8:	080009d7 	.word	0x080009d7
 80009bc:	080009d7 	.word	0x080009d7
 80009c0:	080009dd 	.word	0x080009dd
 80009c4:	080009e3 	.word	0x080009e3
 80009c8:	080009e9 	.word	0x080009e9
 80009cc:	080009ef 	.word	0x080009ef
	case INIT_PAGE:
		welcome_page();
 80009d0:	f000 f814 	bl	80009fc <welcome_page>
		break;
 80009d4:	e00e      	b.n	80009f4 <lcd_update+0x58>
	case LOW_LEVEL_PAGE:
	case MED_LEVEL_PAGE:
	case HIGH_LEVEL_PAGE:
		mode_level_page();
 80009d6:	f000 f8eb 	bl	8000bb0 <mode_level_page>
		break;
 80009da:	e00b      	b.n	80009f4 <lcd_update+0x58>
	case COMPLETE_PAGE:
		complete_page();
 80009dc:	f000 f8be 	bl	8000b5c <complete_page>
		break;
 80009e0:	e008      	b.n	80009f4 <lcd_update+0x58>
	case DOOR_OPEN_PAGE:
		door_open_page();
 80009e2:	f000 f83d 	bl	8000a60 <door_open_page>
		break;
 80009e6:	e005      	b.n	80009f4 <lcd_update+0x58>
	case LIMIT_SW_ERR_PAGE:
		limit_sw_err_page();
 80009e8:	f000 f88e 	bl	8000b08 <limit_sw_err_page>
		break;
 80009ec:	e002      	b.n	80009f4 <lcd_update+0x58>
	case HEATER_COIL_PAGE:
		heater_coil_page();
 80009ee:	f000 f861 	bl	8000ab4 <heater_coil_page>
		break;
 80009f2:	bf00      	nop
	}

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000011a 	.word	0x2000011a

080009fc <welcome_page>:

void welcome_page(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <welcome_page+0x50>)
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <welcome_page+0x54>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d006      	beq.n	8000a1a <welcome_page+0x1e>
	{
		lcd_clear();
 8000a0c:	f7ff ff60 	bl	80008d0 <lcd_clear>
		last_page = cur_page;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <welcome_page+0x54>)
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <welcome_page+0x50>)
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e001      	b.n	8000a1e <welcome_page+0x22>
	}
	else{
		lcd_home();
 8000a1a:	f7ff fe83 	bl	8000724 <lcd_home>
	}
	
	lcd_set_cursor(6, 0);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2006      	movs	r0, #6
 8000a22:	f7ff ff8b 	bl	800093c <lcd_set_cursor>
	lcd_print("WELCOME!");
 8000a26:	480b      	ldr	r0, [pc, #44]	; (8000a54 <welcome_page+0x58>)
 8000a28:	f7ff ff72 	bl	8000910 <lcd_print>
	lcd_set_cursor(3,2);
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	2003      	movs	r0, #3
 8000a30:	f7ff ff84 	bl	800093c <lcd_set_cursor>
	lcd_print("Select a mode");
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <welcome_page+0x5c>)
 8000a36:	f7ff ff6b 	bl	8000910 <lcd_print>
	lcd_set_cursor(3,3);
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f7ff ff7d 	bl	800093c <lcd_set_cursor>
	lcd_print("to start dryer");
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <welcome_page+0x60>)
 8000a44:	f7ff ff64 	bl	8000910 <lcd_print>
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000011b 	.word	0x2000011b
 8000a50:	2000011a 	.word	0x2000011a
 8000a54:	08004a44 	.word	0x08004a44
 8000a58:	08004a50 	.word	0x08004a50
 8000a5c:	08004a60 	.word	0x08004a60

08000a60 <door_open_page>:

void door_open_page(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <door_open_page+0x44>)
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <door_open_page+0x48>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d006      	beq.n	8000a7e <door_open_page+0x1e>
	{
		lcd_clear();
 8000a70:	f7ff ff2e 	bl	80008d0 <lcd_clear>
		last_page = cur_page;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <door_open_page+0x48>)
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <door_open_page+0x44>)
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e001      	b.n	8000a82 <door_open_page+0x22>
	}
	else{
		lcd_home();
 8000a7e:	f7ff fe51 	bl	8000724 <lcd_home>
	}

	lcd_set_cursor(6, 0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	2006      	movs	r0, #6
 8000a86:	f7ff ff59 	bl	800093c <lcd_set_cursor>
	lcd_print("DOOR");
 8000a8a:	4808      	ldr	r0, [pc, #32]	; (8000aac <door_open_page+0x4c>)
 8000a8c:	f7ff ff40 	bl	8000910 <lcd_print>
	lcd_set_cursor(2,2);
 8000a90:	2102      	movs	r1, #2
 8000a92:	2002      	movs	r0, #2
 8000a94:	f7ff ff52 	bl	800093c <lcd_set_cursor>
	lcd_print("OPEN");
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <door_open_page+0x50>)
 8000a9a:	f7ff ff39 	bl	8000910 <lcd_print>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000011b 	.word	0x2000011b
 8000aa8:	2000011a 	.word	0x2000011a
 8000aac:	08004a70 	.word	0x08004a70
 8000ab0:	08004a78 	.word	0x08004a78

08000ab4 <heater_coil_page>:

void heater_coil_page(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <heater_coil_page+0x44>)
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <heater_coil_page+0x48>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d006      	beq.n	8000ad2 <heater_coil_page+0x1e>
	{
		lcd_clear();
 8000ac4:	f7ff ff04 	bl	80008d0 <lcd_clear>
		last_page = cur_page;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <heater_coil_page+0x48>)
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <heater_coil_page+0x44>)
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e001      	b.n	8000ad6 <heater_coil_page+0x22>
	}
	else{
		lcd_home();
 8000ad2:	f7ff fe27 	bl	8000724 <lcd_home>
	}

	lcd_set_cursor(5, 0);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2005      	movs	r0, #5
 8000ada:	f7ff ff2f 	bl	800093c <lcd_set_cursor>
	lcd_print("ERROR");
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <heater_coil_page+0x4c>)
 8000ae0:	f7ff ff16 	bl	8000910 <lcd_print>
	lcd_set_cursor(1,2);
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff ff28 	bl	800093c <lcd_set_cursor>
	lcd_print("HEATER");
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <heater_coil_page+0x50>)
 8000aee:	f7ff ff0f 	bl	8000910 <lcd_print>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000011b 	.word	0x2000011b
 8000afc:	2000011a 	.word	0x2000011a
 8000b00:	08004a80 	.word	0x08004a80
 8000b04:	08004a88 	.word	0x08004a88

08000b08 <limit_sw_err_page>:

void limit_sw_err_page(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <limit_sw_err_page+0x44>)
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <limit_sw_err_page+0x48>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d006      	beq.n	8000b26 <limit_sw_err_page+0x1e>
	{
		lcd_clear();
 8000b18:	f7ff feda 	bl	80008d0 <lcd_clear>
		last_page = cur_page;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <limit_sw_err_page+0x48>)
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <limit_sw_err_page+0x44>)
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	e001      	b.n	8000b2a <limit_sw_err_page+0x22>
	}
	else{
		lcd_home();
 8000b26:	f7ff fdfd 	bl	8000724 <lcd_home>
	}

	lcd_set_cursor(5, 0);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2005      	movs	r0, #5
 8000b2e:	f7ff ff05 	bl	800093c <lcd_set_cursor>
	lcd_print("ERROR");
 8000b32:	4808      	ldr	r0, [pc, #32]	; (8000b54 <limit_sw_err_page+0x4c>)
 8000b34:	f7ff feec 	bl	8000910 <lcd_print>
	lcd_set_cursor(2, 2);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f7ff fefe 	bl	800093c <lcd_set_cursor>
	lcd_print("AIR");
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <limit_sw_err_page+0x50>)
 8000b42:	f7ff fee5 	bl	8000910 <lcd_print>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000011b 	.word	0x2000011b
 8000b50:	2000011a 	.word	0x2000011a
 8000b54:	08004a80 	.word	0x08004a80
 8000b58:	08004a90 	.word	0x08004a90

08000b5c <complete_page>:

void complete_page(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <complete_page+0x44>)
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <complete_page+0x48>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d006      	beq.n	8000b7a <complete_page+0x1e>
	{
		lcd_clear();
 8000b6c:	f7ff feb0 	bl	80008d0 <lcd_clear>
		last_page = cur_page;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <complete_page+0x48>)
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <complete_page+0x44>)
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e001      	b.n	8000b7e <complete_page+0x22>
	}
	else{
		lcd_home();
 8000b7a:	f7ff fdd3 	bl	8000724 <lcd_home>
	}

	lcd_set_cursor(4, 0);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2004      	movs	r0, #4
 8000b82:	f7ff fedb 	bl	800093c <lcd_set_cursor>
	lcd_print("PROCESS");
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <complete_page+0x4c>)
 8000b88:	f7ff fec2 	bl	8000910 <lcd_print>
	lcd_set_cursor(0, 2);
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fed4 	bl	800093c <lcd_set_cursor>
	lcd_print("COMPLETE");
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <complete_page+0x50>)
 8000b96:	f7ff febb 	bl	8000910 <lcd_print>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000011b 	.word	0x2000011b
 8000ba4:	2000011a 	.word	0x2000011a
 8000ba8:	08004a94 	.word	0x08004a94
 8000bac:	08004a9c 	.word	0x08004a9c

08000bb0 <mode_level_page>:

void mode_level_page(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	static uint16_t a = 0,b = 0;
	if(last_page!=cur_page)
 8000bb4:	4b4c      	ldr	r3, [pc, #304]	; (8000ce8 <mode_level_page+0x138>)
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	4b4c      	ldr	r3, [pc, #304]	; (8000cec <mode_level_page+0x13c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d006      	beq.n	8000bce <mode_level_page+0x1e>
	{
		lcd_clear();
 8000bc0:	f7ff fe86 	bl	80008d0 <lcd_clear>
		last_page = cur_page;
 8000bc4:	4b49      	ldr	r3, [pc, #292]	; (8000cec <mode_level_page+0x13c>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <mode_level_page+0x138>)
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e001      	b.n	8000bd2 <mode_level_page+0x22>
	}
	else lcd_home();
 8000bce:	f7ff fda9 	bl	8000724 <lcd_home>
	a = dryer.heatTime % 60;
 8000bd2:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <mode_level_page+0x140>)
 8000bd4:	885a      	ldrh	r2, [r3, #2]
 8000bd6:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <mode_level_page+0x144>)
 8000bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bdc:	0959      	lsrs	r1, r3, #5
 8000bde:	460b      	mov	r3, r1
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	1a5b      	subs	r3, r3, r1
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <mode_level_page+0x148>)
 8000bec:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 8000bee:	4b40      	ldr	r3, [pc, #256]	; (8000cf0 <mode_level_page+0x140>)
 8000bf0:	885b      	ldrh	r3, [r3, #2]
 8000bf2:	4a40      	ldr	r2, [pc, #256]	; (8000cf4 <mode_level_page+0x144>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	095b      	lsrs	r3, r3, #5
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <mode_level_page+0x14c>)
 8000bfe:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"h=%02d:%02d",b,a);
 8000c00:	4b3e      	ldr	r3, [pc, #248]	; (8000cfc <mode_level_page+0x14c>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <mode_level_page+0x148>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	493d      	ldr	r1, [pc, #244]	; (8000d00 <mode_level_page+0x150>)
 8000c0c:	483d      	ldr	r0, [pc, #244]	; (8000d04 <mode_level_page+0x154>)
 8000c0e:	f002 fd87 	bl	8003720 <siprintf>
	lcd_set_cursor(0, 0);
 8000c12:	2100      	movs	r1, #0
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff fe91 	bl	800093c <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000c1a:	483a      	ldr	r0, [pc, #232]	; (8000d04 <mode_level_page+0x154>)
 8000c1c:	f7ff fe78 	bl	8000910 <lcd_print>

	a = dryer.coolTime % 60;
 8000c20:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <mode_level_page+0x140>)
 8000c22:	889a      	ldrh	r2, [r3, #4]
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <mode_level_page+0x144>)
 8000c26:	fba3 1302 	umull	r1, r3, r3, r2
 8000c2a:	0959      	lsrs	r1, r3, #5
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <mode_level_page+0x148>)
 8000c3a:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <mode_level_page+0x140>)
 8000c3e:	889b      	ldrh	r3, [r3, #4]
 8000c40:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <mode_level_page+0x144>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <mode_level_page+0x14c>)
 8000c4c:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"c=%02d:%02d",b,a);
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <mode_level_page+0x14c>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <mode_level_page+0x148>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	492b      	ldr	r1, [pc, #172]	; (8000d08 <mode_level_page+0x158>)
 8000c5a:	482a      	ldr	r0, [pc, #168]	; (8000d04 <mode_level_page+0x154>)
 8000c5c:	f002 fd60 	bl	8003720 <siprintf>
	lcd_set_cursor(13, 0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	200d      	movs	r0, #13
 8000c64:	f7ff fe6a 	bl	800093c <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000c68:	4826      	ldr	r0, [pc, #152]	; (8000d04 <mode_level_page+0x154>)
 8000c6a:	f7ff fe51 	bl	8000910 <lcd_print>

	if(dryer.mode == LOW_LEVEL)sprintf(lcd_buf,"LEVEL: LOW");
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <mode_level_page+0x140>)
 8000c70:	785b      	ldrb	r3, [r3, #1]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d104      	bne.n	8000c80 <mode_level_page+0xd0>
 8000c76:	4925      	ldr	r1, [pc, #148]	; (8000d0c <mode_level_page+0x15c>)
 8000c78:	4822      	ldr	r0, [pc, #136]	; (8000d04 <mode_level_page+0x154>)
 8000c7a:	f002 fd51 	bl	8003720 <siprintf>
 8000c7e:	e010      	b.n	8000ca2 <mode_level_page+0xf2>
	else if(dryer.mode == MED_LEVEL)sprintf(lcd_buf,"LEVEL: MEDIUM");
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <mode_level_page+0x140>)
 8000c82:	785b      	ldrb	r3, [r3, #1]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d104      	bne.n	8000c92 <mode_level_page+0xe2>
 8000c88:	4921      	ldr	r1, [pc, #132]	; (8000d10 <mode_level_page+0x160>)
 8000c8a:	481e      	ldr	r0, [pc, #120]	; (8000d04 <mode_level_page+0x154>)
 8000c8c:	f002 fd48 	bl	8003720 <siprintf>
 8000c90:	e007      	b.n	8000ca2 <mode_level_page+0xf2>
	else if(dryer.mode == HIGH_LEVEL)sprintf(lcd_buf,"LEVEL: HIGH");
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <mode_level_page+0x140>)
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d103      	bne.n	8000ca2 <mode_level_page+0xf2>
 8000c9a:	491e      	ldr	r1, [pc, #120]	; (8000d14 <mode_level_page+0x164>)
 8000c9c:	4819      	ldr	r0, [pc, #100]	; (8000d04 <mode_level_page+0x154>)
 8000c9e:	f002 fd3f 	bl	8003720 <siprintf>
	else;

	lcd_set_cursor(5, 1);
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2005      	movs	r0, #5
 8000ca6:	f7ff fe49 	bl	800093c <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000caa:	4816      	ldr	r0, [pc, #88]	; (8000d04 <mode_level_page+0x154>)
 8000cac:	f7ff fe30 	bl	8000910 <lcd_print>

	sprintf(lcd_buf,"Set:%02dC",dryer.setTemp);
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <mode_level_page+0x140>)
 8000cb2:	799b      	ldrb	r3, [r3, #6]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4918      	ldr	r1, [pc, #96]	; (8000d18 <mode_level_page+0x168>)
 8000cb8:	4812      	ldr	r0, [pc, #72]	; (8000d04 <mode_level_page+0x154>)
 8000cba:	f002 fd31 	bl	8003720 <siprintf>
	lcd_set_cursor(0, 3);
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff fe3b 	bl	800093c <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000cc6:	480f      	ldr	r0, [pc, #60]	; (8000d04 <mode_level_page+0x154>)
 8000cc8:	f7ff fe22 	bl	8000910 <lcd_print>

	sprintf(lcd_buf,"Cur:ERR");
 8000ccc:	4913      	ldr	r1, [pc, #76]	; (8000d1c <mode_level_page+0x16c>)
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <mode_level_page+0x154>)
 8000cd0:	f002 fd26 	bl	8003720 <siprintf>
	lcd_set_cursor(13, 3);
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	200d      	movs	r0, #13
 8000cd8:	f7ff fe30 	bl	800093c <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <mode_level_page+0x154>)
 8000cde:	f7ff fe17 	bl	8000910 <lcd_print>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000011b 	.word	0x2000011b
 8000cec:	2000011a 	.word	0x2000011a
 8000cf0:	20000108 	.word	0x20000108
 8000cf4:	88888889 	.word	0x88888889
 8000cf8:	20000104 	.word	0x20000104
 8000cfc:	20000106 	.word	0x20000106
 8000d00:	08004aa8 	.word	0x08004aa8
 8000d04:	200000b4 	.word	0x200000b4
 8000d08:	08004ab4 	.word	0x08004ab4
 8000d0c:	08004ac0 	.word	0x08004ac0
 8000d10:	08004acc 	.word	0x08004acc
 8000d14:	08004adc 	.word	0x08004adc
 8000d18:	08004ae8 	.word	0x08004ae8
 8000d1c:	08004af4 	.word	0x08004af4

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4906      	ldr	r1, [pc, #24]	; (8000d54 <__NVIC_EnableIRQ+0x34>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db12      	blt.n	8000d90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	490a      	ldr	r1, [pc, #40]	; (8000d9c <__NVIC_DisableIRQ+0x44>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	3320      	adds	r3, #32
 8000d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d84:	f3bf 8f4f 	dsb	sy
}
 8000d88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d8a:	f3bf 8f6f 	isb	sy
}
 8000d8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 8000da8:	1d39      	adds	r1, r7, #4
 8000daa:	230a      	movs	r3, #10
 8000dac:	2201      	movs	r2, #1
 8000dae:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <__io_putchar+0x20>)
 8000db0:	f002 fa8b 	bl	80032ca <HAL_UART_Transmit>
	return ch;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000016c 	.word	0x2000016c

08000dc4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dc8:	f000 fe88 	bl	8001adc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dcc:	f000 fb4e 	bl	800146c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dd0:	f7ff f9bc 	bl	800014c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000dd4:	f000 fde6 	bl	80019a4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	gpio_init();
 8000dd8:	f7ff f9e6 	bl	80001a8 <gpio_init>
	keypad_init();
 8000ddc:	f7ff fa30 	bl	8000240 <keypad_init>
	timer_init();
 8000de0:	f000 fd7e 	bl	80018e0 <timer_init>

	lcd_gpio_init();
 8000de4:	f7ff fb74 	bl	80004d0 <lcd_gpio_init>
	lcd_init(0);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fc0b 	bl	8000604 <lcd_init>
	lcd_begin(16, 4, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2104      	movs	r1, #4
 8000df2:	2010      	movs	r0, #16
 8000df4:	f7ff fc1c 	bl	8000630 <lcd_begin>

	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 8000df8:	4895      	ldr	r0, [pc, #596]	; (8001050 <main+0x28c>)
 8000dfa:	f002 fc89 	bl	8003710 <puts>
	dryer.state = INIT;
 8000dfe:	4b95      	ldr	r3, [pc, #596]	; (8001054 <main+0x290>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8000e04:	4b93      	ldr	r3, [pc, #588]	; (8001054 <main+0x290>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	705a      	strb	r2, [r3, #1]
	dryer.setTemp = 40U;
 8000e0a:	4b92      	ldr	r3, [pc, #584]	; (8001054 <main+0x290>)
 8000e0c:	2228      	movs	r2, #40	; 0x28
 8000e0e:	719a      	strb	r2, [r3, #6]

	if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == HIGH) {
 8000e10:	2101      	movs	r1, #1
 8000e12:	4891      	ldr	r0, [pc, #580]	; (8001058 <main+0x294>)
 8000e14:	f001 f97a 	bl	800210c <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d108      	bne.n	8000e30 <main+0x6c>
		door_open_flag = 1U;
 8000e1e:	4b8f      	ldr	r3, [pc, #572]	; (800105c <main+0x298>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8000e24:	4b8e      	ldr	r3, [pc, #568]	; (8001060 <main+0x29c>)
 8000e26:	2205      	movs	r2, #5
 8000e28:	701a      	strb	r2, [r3, #0]
		lcd_update_flag = 1U;
 8000e2a:	4b8e      	ldr	r3, [pc, #568]	; (8001064 <main+0x2a0>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
	}

	lcd_update();
 8000e30:	f7ff fdb4 	bl	800099c <lcd_update>
		/* USER CODE BEGIN 3 */

		/**********************************************************************************************************
		 **************************************** LCD SCREEN UPDATE RUTINE ****************************************
		 **********************************************************************************************************/
		if (lcd_update_flag) {
 8000e34:	4b8b      	ldr	r3, [pc, #556]	; (8001064 <main+0x2a0>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <main+0x82>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 8000e3c:	f7ff fdae 	bl	800099c <lcd_update>
			lcd_update_flag = 0U;
 8000e40:	4b88      	ldr	r3, [pc, #544]	; (8001064 <main+0x2a0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* TIMER EVENT RUTINE ************************************************
		 ***************************************************************************************************************/
		if (timer_stop_evt) {
 8000e46:	4b88      	ldr	r3, [pc, #544]	; (8001068 <main+0x2a4>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <main+0x98>
			//printf("Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 8000e4e:	4887      	ldr	r0, [pc, #540]	; (800106c <main+0x2a8>)
 8000e50:	f001 fe68 	bl	8002b24 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 8000e54:	4b84      	ldr	r3, [pc, #528]	; (8001068 <main+0x2a4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e00d      	b.n	8000e78 <main+0xb4>

		} else if ((timer_start_evt) && (dryer.state == START)) {
 8000e5c:	4b84      	ldr	r3, [pc, #528]	; (8001070 <main+0x2ac>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d009      	beq.n	8000e78 <main+0xb4>
 8000e64:	4b7b      	ldr	r3, [pc, #492]	; (8001054 <main+0x290>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d105      	bne.n	8000e78 <main+0xb4>
			HAL_TIM_Base_Start_IT(&htim4);
 8000e6c:	487f      	ldr	r0, [pc, #508]	; (800106c <main+0x2a8>)
 8000e6e:	f001 fe07 	bl	8002a80 <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 8000e72:	4b7f      	ldr	r3, [pc, #508]	; (8001070 <main+0x2ac>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]

		/***************************************************************************************************************
		 ********************************************* KEYBOARD SCANNING ***********************************************
		 ********************************** INCREMENT DECREMENT OF TIMER AND MODE SET **********************************
		 ***************************************************************************************************************/
		if (door_open_flag) {
 8000e78:	4b78      	ldr	r3, [pc, #480]	; (800105c <main+0x298>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <main+0xca>
			HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e86:	487b      	ldr	r0, [pc, #492]	; (8001074 <main+0x2b0>)
 8000e88:	f001 f957 	bl	800213a <HAL_GPIO_WritePin>
 8000e8c:	e18e      	b.n	80011ac <main+0x3e8>

		} else {

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	4877      	ldr	r0, [pc, #476]	; (8001074 <main+0x2b0>)
 8000e96:	f001 f950 	bl	800213a <HAL_GPIO_WritePin>

			if (dryer.state == START) {
 8000e9a:	4b6e      	ldr	r3, [pc, #440]	; (8001054 <main+0x290>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	f040 80bd 	bne.w	800101e <main+0x25a>

				scaned_key = scan_keypad();
 8000ea4:	f7ff f9fa 	bl	800029c <scan_keypad>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b72      	ldr	r3, [pc, #456]	; (8001078 <main+0x2b4>)
 8000eae:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 8000eb0:	4b71      	ldr	r3, [pc, #452]	; (8001078 <main+0x2b4>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	f200 80ad 	bhi.w	8001016 <main+0x252>
 8000ebc:	a201      	add	r2, pc, #4	; (adr r2, 8000ec4 <main+0x100>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000ed5 	.word	0x08000ed5
 8000ec8:	08000f1d 	.word	0x08000f1d
 8000ecc:	08000f43 	.word	0x08000f43
 8000ed0:	08000feb 	.word	0x08000feb
				case LOW_KEY_PRESSED:
					lcd_update_flag = 1U;
 8000ed4:	4b63      	ldr	r3, [pc, #396]	; (8001064 <main+0x2a0>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 8000eda:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <main+0x290>)
 8000edc:	7a1b      	ldrb	r3, [r3, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <main+0x124>
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d00b      	beq.n	8000efe <main+0x13a>
					case COOL_CYCLE:
						if (dryer.coolTime > 60U)
							dryer.coolTime -= 60U;
						break;
					}
					break;
 8000ee6:	e096      	b.n	8001016 <main+0x252>
						if (dryer.heatTime > 60U)
 8000ee8:	4b5a      	ldr	r3, [pc, #360]	; (8001054 <main+0x290>)
 8000eea:	885b      	ldrh	r3, [r3, #2]
 8000eec:	2b3c      	cmp	r3, #60	; 0x3c
 8000eee:	d911      	bls.n	8000f14 <main+0x150>
							dryer.heatTime -= 60U;
 8000ef0:	4b58      	ldr	r3, [pc, #352]	; (8001054 <main+0x290>)
 8000ef2:	885b      	ldrh	r3, [r3, #2]
 8000ef4:	3b3c      	subs	r3, #60	; 0x3c
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b56      	ldr	r3, [pc, #344]	; (8001054 <main+0x290>)
 8000efa:	805a      	strh	r2, [r3, #2]
						break;
 8000efc:	e00a      	b.n	8000f14 <main+0x150>
						if (dryer.coolTime > 60U)
 8000efe:	4b55      	ldr	r3, [pc, #340]	; (8001054 <main+0x290>)
 8000f00:	889b      	ldrh	r3, [r3, #4]
 8000f02:	2b3c      	cmp	r3, #60	; 0x3c
 8000f04:	d908      	bls.n	8000f18 <main+0x154>
							dryer.coolTime -= 60U;
 8000f06:	4b53      	ldr	r3, [pc, #332]	; (8001054 <main+0x290>)
 8000f08:	889b      	ldrh	r3, [r3, #4]
 8000f0a:	3b3c      	subs	r3, #60	; 0x3c
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	4b51      	ldr	r3, [pc, #324]	; (8001054 <main+0x290>)
 8000f10:	809a      	strh	r2, [r3, #4]
						break;
 8000f12:	e001      	b.n	8000f18 <main+0x154>
						break;
 8000f14:	bf00      	nop
 8000f16:	e07e      	b.n	8001016 <main+0x252>
						break;
 8000f18:	bf00      	nop
					break;
 8000f1a:	e07c      	b.n	8001016 <main+0x252>

				case MED_KEY_PRESSED:
					lcd_update_flag = 1U;
 8000f1c:	4b51      	ldr	r3, [pc, #324]	; (8001064 <main+0x2a0>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8000f22:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <main+0x290>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8000f28:	4b4a      	ldr	r3, [pc, #296]	; (8001054 <main+0x290>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 8000f2e:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <main+0x29c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8000f34:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <main+0x2a0>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8000f3a:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <main+0x2a4>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
					break;
 8000f40:	e069      	b.n	8001016 <main+0x252>

				case HIGH_KEY_PRESSED:
					lcd_update_flag = 1U;
 8000f42:	4b48      	ldr	r3, [pc, #288]	; (8001064 <main+0x2a0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 8000f48:	4b42      	ldr	r3, [pc, #264]	; (8001054 <main+0x290>)
 8000f4a:	7a1b      	ldrb	r3, [r3, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <main+0x192>
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d037      	beq.n	8000fc4 <main+0x200>
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
 8000f54:	e05f      	b.n	8001016 <main+0x252>
						if ((dryer.heatTime < 1800U)
 8000f56:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <main+0x290>)
 8000f58:	885b      	ldrh	r3, [r3, #2]
 8000f5a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000f5e:	d20a      	bcs.n	8000f76 <main+0x1b2>
								&& (dryer.mode == LOW_LEVEL))
 8000f60:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <main+0x290>)
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d106      	bne.n	8000f76 <main+0x1b2>
							dryer.heatTime += 60U;
 8000f68:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <main+0x290>)
 8000f6a:	885b      	ldrh	r3, [r3, #2]
 8000f6c:	333c      	adds	r3, #60	; 0x3c
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b38      	ldr	r3, [pc, #224]	; (8001054 <main+0x290>)
 8000f72:	805a      	strh	r2, [r3, #2]
 8000f74:	e01f      	b.n	8000fb6 <main+0x1f2>
						else if ((dryer.heatTime < 2400U)
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <main+0x290>)
 8000f78:	885b      	ldrh	r3, [r3, #2]
 8000f7a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000f7e:	d20a      	bcs.n	8000f96 <main+0x1d2>
								&& (dryer.mode == MED_LEVEL))
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <main+0x290>)
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d106      	bne.n	8000f96 <main+0x1d2>
							dryer.heatTime += 60U;
 8000f88:	4b32      	ldr	r3, [pc, #200]	; (8001054 <main+0x290>)
 8000f8a:	885b      	ldrh	r3, [r3, #2]
 8000f8c:	333c      	adds	r3, #60	; 0x3c
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4b30      	ldr	r3, [pc, #192]	; (8001054 <main+0x290>)
 8000f92:	805a      	strh	r2, [r3, #2]
 8000f94:	e00f      	b.n	8000fb6 <main+0x1f2>
						else if ((dryer.heatTime < 3000U)
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <main+0x290>)
 8000f98:	885b      	ldrh	r3, [r3, #2]
 8000f9a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d809      	bhi.n	8000fb6 <main+0x1f2>
								&& (dryer.mode == HIGH_LEVEL))
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <main+0x290>)
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d105      	bne.n	8000fb6 <main+0x1f2>
							dryer.heatTime += 60U;
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <main+0x290>)
 8000fac:	885b      	ldrh	r3, [r3, #2]
 8000fae:	333c      	adds	r3, #60	; 0x3c
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <main+0x290>)
 8000fb4:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 8000fb6:	4b27      	ldr	r3, [pc, #156]	; (8001054 <main+0x290>)
 8000fb8:	885b      	ldrh	r3, [r3, #2]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482f      	ldr	r0, [pc, #188]	; (800107c <main+0x2b8>)
 8000fbe:	f002 fb21 	bl	8003604 <iprintf>
						break;
 8000fc2:	e011      	b.n	8000fe8 <main+0x224>
						if (dryer.coolTime < 900U)
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <main+0x290>)
 8000fc6:	889b      	ldrh	r3, [r3, #4]
 8000fc8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000fcc:	d205      	bcs.n	8000fda <main+0x216>
							dryer.coolTime += 60U;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <main+0x290>)
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	333c      	adds	r3, #60	; 0x3c
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <main+0x290>)
 8000fd8:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <main+0x290>)
 8000fdc:	889b      	ldrh	r3, [r3, #4]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4827      	ldr	r0, [pc, #156]	; (8001080 <main+0x2bc>)
 8000fe2:	f002 fb0f 	bl	8003604 <iprintf>
						break;
 8000fe6:	bf00      	nop
					break;
 8000fe8:	e015      	b.n	8001016 <main+0x252>

				case FN_KEY_PRESSED:
					lcd_update_flag = 1U;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <main+0x2a0>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 0U;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <main+0x290>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <main+0x290>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	721a      	strb	r2, [r3, #8]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <main+0x290>)
 8000ffe:	885b      	ldrh	r3, [r3, #2]
 8001000:	4619      	mov	r1, r3
 8001002:	481e      	ldr	r0, [pc, #120]	; (800107c <main+0x2b8>)
 8001004:	f002 fafe 	bl	8003604 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <main+0x290>)
 800100a:	889b      	ldrh	r3, [r3, #4]
 800100c:	4619      	mov	r1, r3
 800100e:	481c      	ldr	r0, [pc, #112]	; (8001080 <main+0x2bc>)
 8001010:	f002 faf8 	bl	8003604 <iprintf>
					break;
 8001014:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <main+0x2b4>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	e0c6      	b.n	80011ac <main+0x3e8>

			} else if (dryer.state == INIT) {
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <main+0x290>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f040 80c2 	bne.w	80011ac <main+0x3e8>

				scaned_key = scan_keypad();
 8001028:	f7ff f938 	bl	800029c <scan_keypad>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <main+0x2b4>)
 8001032:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <main+0x2b4>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b03      	cmp	r3, #3
 800103a:	f000 8083 	beq.w	8001144 <main+0x380>
 800103e:	2b03      	cmp	r3, #3
 8001040:	f300 80b0 	bgt.w	80011a4 <main+0x3e0>
 8001044:	2b01      	cmp	r3, #1
 8001046:	d01d      	beq.n	8001084 <main+0x2c0>
 8001048:	2b02      	cmp	r3, #2
 800104a:	d04b      	beq.n	80010e4 <main+0x320>
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
							sizeof("HIGH_LEVEL\r\n"), 10);
					break;

				default:
					break;
 800104c:	e0aa      	b.n	80011a4 <main+0x3e0>
 800104e:	bf00      	nop
 8001050:	08004afc 	.word	0x08004afc
 8001054:	20000108 	.word	0x20000108
 8001058:	40010800 	.word	0x40010800
 800105c:	20000112 	.word	0x20000112
 8001060:	2000011a 	.word	0x2000011a
 8001064:	2000011c 	.word	0x2000011c
 8001068:	20000113 	.word	0x20000113
 800106c:	20000124 	.word	0x20000124
 8001070:	20000114 	.word	0x20000114
 8001074:	40011000 	.word	0x40011000
 8001078:	20000115 	.word	0x20000115
 800107c:	08004b04 	.word	0x08004b04
 8001080:	08004b14 	.word	0x08004b14
					dryer.mode = LOW_LEVEL;
 8001084:	4bb1      	ldr	r3, [pc, #708]	; (800134c <main+0x588>)
 8001086:	2201      	movs	r2, #1
 8001088:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 800108a:	4bb0      	ldr	r3, [pc, #704]	; (800134c <main+0x588>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 8001090:	4bae      	ldr	r3, [pc, #696]	; (800134c <main+0x588>)
 8001092:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001096:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8001098:	4bac      	ldr	r3, [pc, #688]	; (800134c <main+0x588>)
 800109a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800109e:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80010a0:	4baa      	ldr	r3, [pc, #680]	; (800134c <main+0x588>)
 80010a2:	221e      	movs	r2, #30
 80010a4:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 40U;
 80010a6:	4ba9      	ldr	r3, [pc, #676]	; (800134c <main+0x588>)
 80010a8:	2228      	movs	r2, #40	; 0x28
 80010aa:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 80010ac:	4ba7      	ldr	r3, [pc, #668]	; (800134c <main+0x588>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 80010b2:	4ba7      	ldr	r3, [pc, #668]	; (8001350 <main+0x58c>)
 80010b4:	221e      	movs	r2, #30
 80010b6:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 80010b8:	4ba6      	ldr	r3, [pc, #664]	; (8001354 <main+0x590>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 80010be:	4ba6      	ldr	r3, [pc, #664]	; (8001358 <main+0x594>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 80010c4:	4ba5      	ldr	r3, [pc, #660]	; (800135c <main+0x598>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
					cur_page = LOW_LEVEL_PAGE;
 80010ca:	4ba5      	ldr	r3, [pc, #660]	; (8001360 <main+0x59c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80010d0:	4ba4      	ldr	r3, [pc, #656]	; (8001364 <main+0x5a0>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 80010d6:	230a      	movs	r3, #10
 80010d8:	220c      	movs	r2, #12
 80010da:	49a3      	ldr	r1, [pc, #652]	; (8001368 <main+0x5a4>)
 80010dc:	48a3      	ldr	r0, [pc, #652]	; (800136c <main+0x5a8>)
 80010de:	f002 f8f4 	bl	80032ca <HAL_UART_Transmit>
					break;
 80010e2:	e060      	b.n	80011a6 <main+0x3e2>
					dryer.mode = MED_LEVEL;
 80010e4:	4b99      	ldr	r3, [pc, #612]	; (800134c <main+0x588>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80010ea:	4b98      	ldr	r3, [pc, #608]	; (800134c <main+0x588>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 80010f0:	4b96      	ldr	r3, [pc, #600]	; (800134c <main+0x588>)
 80010f2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80010f6:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80010f8:	4b94      	ldr	r3, [pc, #592]	; (800134c <main+0x588>)
 80010fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010fe:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8001100:	4b92      	ldr	r3, [pc, #584]	; (800134c <main+0x588>)
 8001102:	221e      	movs	r2, #30
 8001104:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 70U;
 8001106:	4b91      	ldr	r3, [pc, #580]	; (800134c <main+0x588>)
 8001108:	2246      	movs	r2, #70	; 0x46
 800110a:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 800110c:	4b8f      	ldr	r3, [pc, #572]	; (800134c <main+0x588>)
 800110e:	2200      	movs	r2, #0
 8001110:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8001112:	4b8f      	ldr	r3, [pc, #572]	; (8001350 <main+0x58c>)
 8001114:	221e      	movs	r2, #30
 8001116:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8001118:	4b8e      	ldr	r3, [pc, #568]	; (8001354 <main+0x590>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 800111e:	4b8e      	ldr	r3, [pc, #568]	; (8001358 <main+0x594>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8001124:	4b8d      	ldr	r3, [pc, #564]	; (800135c <main+0x598>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
					cur_page = MED_LEVEL_PAGE;
 800112a:	4b8d      	ldr	r3, [pc, #564]	; (8001360 <main+0x59c>)
 800112c:	2202      	movs	r2, #2
 800112e:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001130:	4b8c      	ldr	r3, [pc, #560]	; (8001364 <main+0x5a0>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 8001136:	230a      	movs	r3, #10
 8001138:	220c      	movs	r2, #12
 800113a:	498d      	ldr	r1, [pc, #564]	; (8001370 <main+0x5ac>)
 800113c:	488b      	ldr	r0, [pc, #556]	; (800136c <main+0x5a8>)
 800113e:	f002 f8c4 	bl	80032ca <HAL_UART_Transmit>
					break;
 8001142:	e030      	b.n	80011a6 <main+0x3e2>
					dryer.mode = HIGH_LEVEL;
 8001144:	4b81      	ldr	r3, [pc, #516]	; (800134c <main+0x588>)
 8001146:	2203      	movs	r2, #3
 8001148:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 800114a:	4b80      	ldr	r3, [pc, #512]	; (800134c <main+0x588>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 8001150:	4b7e      	ldr	r3, [pc, #504]	; (800134c <main+0x588>)
 8001152:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001156:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8001158:	4b7c      	ldr	r3, [pc, #496]	; (800134c <main+0x588>)
 800115a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800115e:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8001160:	4b7a      	ldr	r3, [pc, #488]	; (800134c <main+0x588>)
 8001162:	221e      	movs	r2, #30
 8001164:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 90U;
 8001166:	4b79      	ldr	r3, [pc, #484]	; (800134c <main+0x588>)
 8001168:	225a      	movs	r2, #90	; 0x5a
 800116a:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 800116c:	4b77      	ldr	r3, [pc, #476]	; (800134c <main+0x588>)
 800116e:	2200      	movs	r2, #0
 8001170:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8001172:	4b77      	ldr	r3, [pc, #476]	; (8001350 <main+0x58c>)
 8001174:	221e      	movs	r2, #30
 8001176:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8001178:	4b76      	ldr	r3, [pc, #472]	; (8001354 <main+0x590>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <main+0x594>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8001184:	4b75      	ldr	r3, [pc, #468]	; (800135c <main+0x598>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
					cur_page = HIGH_LEVEL_PAGE;
 800118a:	4b75      	ldr	r3, [pc, #468]	; (8001360 <main+0x59c>)
 800118c:	2203      	movs	r2, #3
 800118e:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001190:	4b74      	ldr	r3, [pc, #464]	; (8001364 <main+0x5a0>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 8001196:	230a      	movs	r3, #10
 8001198:	220d      	movs	r2, #13
 800119a:	4976      	ldr	r1, [pc, #472]	; (8001374 <main+0x5b0>)
 800119c:	4873      	ldr	r0, [pc, #460]	; (800136c <main+0x5a8>)
 800119e:	f002 f894 	bl	80032ca <HAL_UART_Transmit>
					break;
 80011a2:	e000      	b.n	80011a6 <main+0x3e2>
					break;
 80011a4:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 80011a6:	4b74      	ldr	r3, [pc, #464]	; (8001378 <main+0x5b4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
		 * @COMPLETE STATE
		 * 		->TURNS OFF FAN, DRUM MOTORS, HEATER
		 * 		->TRUNS ON/OFF BEEP EVERY 3s FOR 30s
		 * 		->WATCHS DOOR OPEN
		 **********************************************************************************************************/
		if (door_open_flag) {
 80011ac:	4b73      	ldr	r3, [pc, #460]	; (800137c <main+0x5b8>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d029      	beq.n	8001208 <main+0x444>

			HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ba:	4871      	ldr	r0, [pc, #452]	; (8001380 <main+0x5bc>)
 80011bc:	f000 ffbd 	bl	800213a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c6:	486f      	ldr	r0, [pc, #444]	; (8001384 <main+0x5c0>)
 80011c8:	f000 ffb7 	bl	800213a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d2:	486c      	ldr	r0, [pc, #432]	; (8001384 <main+0x5c0>)
 80011d4:	f000 ffb1 	bl	800213a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011de:	4869      	ldr	r0, [pc, #420]	; (8001384 <main+0x5c0>)
 80011e0:	f000 ffab 	bl	800213a <HAL_GPIO_WritePin>

			if (dryer.state == COMPLETE) {
 80011e4:	4b59      	ldr	r3, [pc, #356]	; (800134c <main+0x588>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	f040 812d 	bne.w	8001448 <main+0x684>
				//beep off
				timer_stop_evt = 1U;
 80011ee:	4b66      	ldr	r3, [pc, #408]	; (8001388 <main+0x5c4>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
				dryer.beepTime = 0U;
 80011f4:	4b55      	ldr	r3, [pc, #340]	; (800134c <main+0x588>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	71da      	strb	r2, [r3, #7]
				dryer.state = INIT;
 80011fa:	4b54      	ldr	r3, [pc, #336]	; (800134c <main+0x588>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
				dryer.mode = NO_MODE;
 8001200:	4b52      	ldr	r3, [pc, #328]	; (800134c <main+0x588>)
 8001202:	2200      	movs	r2, #0
 8001204:	705a      	strb	r2, [r3, #1]
 8001206:	e11f      	b.n	8001448 <main+0x684>
			}

		} else {

			if (dryer.state == START) {
 8001208:	4b50      	ldr	r3, [pc, #320]	; (800134c <main+0x588>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	f040 80cd 	bne.w	80013ac <main+0x5e8>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001218:	4859      	ldr	r0, [pc, #356]	; (8001380 <main+0x5bc>)
 800121a:	f000 ff8e 	bl	800213a <HAL_GPIO_WritePin>

				if (otp) {
 800121e:	4b5b      	ldr	r3, [pc, #364]	; (800138c <main+0x5c8>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d020      	beq.n	8001268 <main+0x4a4>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 8001226:	4b49      	ldr	r3, [pc, #292]	; (800134c <main+0x588>)
 8001228:	885b      	ldrh	r3, [r3, #2]
 800122a:	4619      	mov	r1, r3
 800122c:	4858      	ldr	r0, [pc, #352]	; (8001390 <main+0x5cc>)
 800122e:	f002 f9e9 	bl	8003604 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8001232:	4b46      	ldr	r3, [pc, #280]	; (800134c <main+0x588>)
 8001234:	889b      	ldrh	r3, [r3, #4]
 8001236:	4619      	mov	r1, r3
 8001238:	4856      	ldr	r0, [pc, #344]	; (8001394 <main+0x5d0>)
 800123a:	f002 f9e3 	bl	8003604 <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <main+0x58c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	4854      	ldr	r0, [pc, #336]	; (8001398 <main+0x5d4>)
 8001246:	f002 f9dd 	bl	8003604 <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 800124a:	4b43      	ldr	r3, [pc, #268]	; (8001358 <main+0x594>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	4852      	ldr	r0, [pc, #328]	; (800139c <main+0x5d8>)
 8001252:	f002 f9d7 	bl	8003604 <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 8001256:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <main+0x590>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	4619      	mov	r1, r3
 800125c:	4850      	ldr	r0, [pc, #320]	; (80013a0 <main+0x5dc>)
 800125e:	f002 f9d1 	bl	8003604 <iprintf>
					otp = 0;
 8001262:	4b4a      	ldr	r3, [pc, #296]	; (800138c <main+0x5c8>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
				}

				//start Flip Flop
				if (pasue_cunt > 0) {
 8001268:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <main+0x594>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d034      	beq.n	80012da <main+0x516>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001276:	4843      	ldr	r0, [pc, #268]	; (8001384 <main+0x5c0>)
 8001278:	f000 ff5f 	bl	800213a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001282:	4840      	ldr	r0, [pc, #256]	; (8001384 <main+0x5c0>)
 8001284:	f000 ff59 	bl	800213a <HAL_GPIO_WritePin>

					if (pasue_cunt <= 1) {
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <main+0x594>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d84b      	bhi.n	8001328 <main+0x564>

						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 8001290:	2104      	movs	r1, #4
 8001292:	483b      	ldr	r0, [pc, #236]	; (8001380 <main+0x5bc>)
 8001294:	f000 ff3a 	bl	800210c <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <main+0x5e0>)
 800129e:	701a      	strb	r2, [r3, #0]
						SEL_ROT_SW);

						if (rot_sw_state) {
 80012a0:	4b40      	ldr	r3, [pc, #256]	; (80013a4 <main+0x5e0>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <main+0x4f2>

							rot_left_cunt = 30U;
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <main+0x58c>)
 80012aa:	221e      	movs	r2, #30
 80012ac:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <main+0x590>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e038      	b.n	8001328 <main+0x564>

						} else {

							if (flipflop) {
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <main+0x5e4>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <main+0x508>

								rot_left_cunt = 0U;
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <main+0x58c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <main+0x590>)
 80012c6:	221e      	movs	r2, #30
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e02d      	b.n	8001328 <main+0x564>

							} else {

								rot_left_cunt = 30U;
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <main+0x58c>)
 80012ce:	221e      	movs	r2, #30
 80012d0:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <main+0x590>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e026      	b.n	8001328 <main+0x564>

							}
						}
					}
				} else if (rot_left_cunt > 0) {
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <main+0x58c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00f      	beq.n	8001302 <main+0x53e>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e8:	4826      	ldr	r0, [pc, #152]	; (8001384 <main+0x5c0>)
 80012ea:	f000 ff26 	bl	800213a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f4:	4823      	ldr	r0, [pc, #140]	; (8001384 <main+0x5c0>)
 80012f6:	f000 ff20 	bl	800213a <HAL_GPIO_WritePin>
					flipflop = 1;
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <main+0x5e4>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	e012      	b.n	8001328 <main+0x564>

				} else if (rot_right_cunt > 0) {
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <main+0x590>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00e      	beq.n	8001328 <main+0x564>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001310:	481c      	ldr	r0, [pc, #112]	; (8001384 <main+0x5c0>)
 8001312:	f000 ff12 	bl	800213a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800131c:	4819      	ldr	r0, [pc, #100]	; (8001384 <main+0x5c0>)
 800131e:	f000 ff0c 	bl	800213a <HAL_GPIO_WritePin>
					flipflop = 0;
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <main+0x5e4>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

				}

				if (dryer.cycle == HEAT_CYCLE) {
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <main+0x588>)
 800132a:	7a1b      	ldrb	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d106      	bne.n	800133e <main+0x57a>

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	4813      	ldr	r0, [pc, #76]	; (8001384 <main+0x5c0>)
 8001338:	f000 feff 	bl	800213a <HAL_GPIO_WritePin>
 800133c:	e084      	b.n	8001448 <main+0x684>

				} else {

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001344:	480f      	ldr	r0, [pc, #60]	; (8001384 <main+0x5c0>)
 8001346:	f000 fef8 	bl	800213a <HAL_GPIO_WritePin>
 800134a:	e07d      	b.n	8001448 <main+0x684>
 800134c:	20000108 	.word	0x20000108
 8001350:	20000001 	.word	0x20000001
 8001354:	20000116 	.word	0x20000116
 8001358:	20000117 	.word	0x20000117
 800135c:	20000114 	.word	0x20000114
 8001360:	2000011a 	.word	0x2000011a
 8001364:	2000011c 	.word	0x2000011c
 8001368:	08004b24 	.word	0x08004b24
 800136c:	2000016c 	.word	0x2000016c
 8001370:	08004b30 	.word	0x08004b30
 8001374:	08004b3c 	.word	0x08004b3c
 8001378:	20000115 	.word	0x20000115
 800137c:	20000112 	.word	0x20000112
 8001380:	40010800 	.word	0x40010800
 8001384:	40010c00 	.word	0x40010c00
 8001388:	20000113 	.word	0x20000113
 800138c:	20000000 	.word	0x20000000
 8001390:	08004b4c 	.word	0x08004b4c
 8001394:	08004b14 	.word	0x08004b14
 8001398:	08004b60 	.word	0x08004b60
 800139c:	08004b70 	.word	0x08004b70
 80013a0:	08004b80 	.word	0x08004b80
 80013a4:	20000118 	.word	0x20000118
 80013a8:	20000119 	.word	0x20000119

				}
			} else if (dryer.state == COMPLETE) {
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <main+0x68c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d131      	bne.n	8001418 <main+0x654>

				if (dryer.beepTime == 0) {
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <main+0x68c>)
 80013b6:	79db      	ldrb	r3, [r3, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d114      	bne.n	80013e6 <main+0x622>
					HAL_GPIO_WritePin(GPIOC, LED, LOW);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c2:	4824      	ldr	r0, [pc, #144]	; (8001454 <main+0x690>)
 80013c4:	f000 feb9 	bl	800213a <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <main+0x694>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <main+0x698>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
					//beep off
					timer_stop_evt = 1U;
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <main+0x69c>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <main+0x68c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <main+0x68c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	705a      	strb	r2, [r3, #1]
				} else if (dryer.beepTime % 3 == 0) {
					//beep toggle
				}
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ec:	481d      	ldr	r0, [pc, #116]	; (8001464 <main+0x6a0>)
 80013ee:	f000 fea4 	bl	800213a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f8:	481b      	ldr	r0, [pc, #108]	; (8001468 <main+0x6a4>)
 80013fa:	f000 fe9e 	bl	800213a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001404:	4818      	ldr	r0, [pc, #96]	; (8001468 <main+0x6a4>)
 8001406:	f000 fe98 	bl	800213a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001410:	4815      	ldr	r0, [pc, #84]	; (8001468 <main+0x6a4>)
 8001412:	f000 fe92 	bl	800213a <HAL_GPIO_WritePin>
 8001416:	e017      	b.n	8001448 <main+0x684>

			} else {
				//beep off
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800141e:	4811      	ldr	r0, [pc, #68]	; (8001464 <main+0x6a0>)
 8001420:	f000 fe8b 	bl	800213a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142a:	480f      	ldr	r0, [pc, #60]	; (8001468 <main+0x6a4>)
 800142c:	f000 fe85 	bl	800213a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001436:	480c      	ldr	r0, [pc, #48]	; (8001468 <main+0x6a4>)
 8001438:	f000 fe7f 	bl	800213a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001442:	4809      	ldr	r0, [pc, #36]	; (8001468 <main+0x6a4>)
 8001444:	f000 fe79 	bl	800213a <HAL_GPIO_WritePin>
			}
		}
		lcd_update_flag = 1U;
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <main+0x698>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
		if (lcd_update_flag) {
 800144e:	e4f1      	b.n	8000e34 <main+0x70>
 8001450:	20000108 	.word	0x20000108
 8001454:	40011000 	.word	0x40011000
 8001458:	2000011a 	.word	0x2000011a
 800145c:	2000011c 	.word	0x2000011c
 8001460:	20000113 	.word	0x20000113
 8001464:	40010800 	.word	0x40010800
 8001468:	40010c00 	.word	0x40010c00

0800146c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b090      	sub	sp, #64	; 0x40
 8001470:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	2228      	movs	r2, #40	; 0x28
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f002 f8ba 	bl	80035f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001492:	2301      	movs	r3, #1
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001496:	2310      	movs	r3, #16
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fe7a 	bl	800219c <HAL_RCC_OscConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0x46>
		Error_Handler();
 80014ae:	f000 f923 	bl	80016f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014b2:	230f      	movs	r3, #15
 80014b4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 f8e8 	bl	80026a0 <HAL_RCC_ClockConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0x6e>
		Error_Handler();
 80014d6:	f000 f90f 	bl	80016f8 <Error_Handler>
	}
}
 80014da:	bf00      	nop
 80014dc:	3740      	adds	r7, #64	; 0x40
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d157      	bne.n	80015a4 <HAL_GPIO_EXTI_Callback+0xc0>
		NVIC_DisableIRQ(EXTI0_IRQn);
 80014f4:	2006      	movs	r0, #6
 80014f6:	f7ff fc2f 	bl	8000d58 <__NVIC_DisableIRQ>

		temp_pin_state = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 80014fa:	2101      	movs	r1, #1
 80014fc:	482b      	ldr	r0, [pc, #172]	; (80015ac <HAL_GPIO_EXTI_Callback+0xc8>)
 80014fe:	f000 fe05 	bl	800210c <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001508:	701a      	strb	r2, [r3, #0]
		//printf("Pin: %d\r\n",temp_pin_state);

		if (temp_pin_state == HIGH) {
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d10f      	bne.n	8001534 <HAL_GPIO_EXTI_Callback+0x50>

			door_open_flag = 1;
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
			timer_stop_evt = 1;
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <HAL_GPIO_EXTI_Callback+0xd4>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
			cur_page = DOOR_OPEN_PAGE;
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001522:	2205      	movs	r2, #5
 8001524:	701a      	strb	r2, [r3, #0]
			lcd_update_flag = 1U;
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
			dryer.state = STOP;
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800152e:	2203      	movs	r2, #3
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	e034      	b.n	800159e <HAL_GPIO_EXTI_Callback+0xba>

			//stop

		} else {
			switch (dryer.mode) {
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001536:	785b      	ldrb	r3, [r3, #1]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d827      	bhi.n	800158c <HAL_GPIO_EXTI_Callback+0xa8>
 800153c:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <HAL_GPIO_EXTI_Callback+0x60>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001555 	.word	0x08001555
 8001548:	08001563 	.word	0x08001563
 800154c:	08001571 	.word	0x08001571
 8001550:	0800157f 	.word	0x0800157f
			case NO_MODE:
				cur_page = INIT_PAGE;
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
				dryer.state = INIT;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
				break;
 8001560:	e014      	b.n	800158c <HAL_GPIO_EXTI_Callback+0xa8>
			case LOW_LEVEL:
				cur_page = LOW_LEVEL_PAGE;
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
				dryer.state = START;
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
				break;
 800156e:	e00d      	b.n	800158c <HAL_GPIO_EXTI_Callback+0xa8>
			case MED_LEVEL:
				cur_page = MED_LEVEL_PAGE;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001572:	2202      	movs	r2, #2
 8001574:	701a      	strb	r2, [r3, #0]
				dryer.state = START;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
				break;
 800157c:	e006      	b.n	800158c <HAL_GPIO_EXTI_Callback+0xa8>
			case HIGH_LEVEL:
				cur_page = HIGH_LEVEL_PAGE;
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001580:	2203      	movs	r2, #3
 8001582:	701a      	strb	r2, [r3, #0]
				dryer.state = START;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
				break;
 800158a:	bf00      	nop
			}
			timer_start_evt = 1;
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_GPIO_EXTI_Callback+0xe4>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
			door_open_flag = 0;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
			lcd_update_flag = 1U;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_GPIO_EXTI_Callback+0xdc>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
		}
		//printf("Door page: %d\r\n",cur_page);
		//printf("LCD: %d\r\n",lcd_update_flag);
		NVIC_EnableIRQ(EXTI0_IRQn);
 800159e:	2006      	movs	r0, #6
 80015a0:	f7ff fbbe 	bl	8000d20 <__NVIC_EnableIRQ>
	}
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40010800 	.word	0x40010800
 80015b0:	2000011d 	.word	0x2000011d
 80015b4:	20000112 	.word	0x20000112
 80015b8:	20000113 	.word	0x20000113
 80015bc:	2000011a 	.word	0x2000011a
 80015c0:	2000011c 	.word	0x2000011c
 80015c4:	20000108 	.word	0x20000108
 80015c8:	20000114 	.word	0x20000114

080015cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) "TIMER\r\n", sizeof("TIMER\r\n"), 10);
 80015d4:	230a      	movs	r3, #10
 80015d6:	2208      	movs	r2, #8
 80015d8:	493d      	ldr	r1, [pc, #244]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015da:	483e      	ldr	r0, [pc, #248]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015dc:	f001 fe75 	bl	80032ca <HAL_UART_Transmit>

	if (dryer.heatTime > 0) {
 80015e0:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015e2:	885b      	ldrh	r3, [r3, #2]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x2a>

		dryer.heatTime--;
 80015e8:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015ea:	885b      	ldrh	r3, [r3, #2]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015f2:	805a      	strh	r2, [r3, #2]
 80015f4:	e014      	b.n	8001620 <HAL_TIM_PeriodElapsedCallback+0x54>

	} else if (dryer.coolTime > 0) {
 80015f6:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015f8:	889b      	ldrh	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <HAL_TIM_PeriodElapsedCallback+0x40>

		dryer.coolTime--;
 80015fe:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001600:	889b      	ldrh	r3, [r3, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	b29a      	uxth	r2, r3
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001608:	809a      	strh	r2, [r3, #4]
 800160a:	e009      	b.n	8001620 <HAL_TIM_PeriodElapsedCallback+0x54>

	} else if (dryer.state == COMPLETE) {
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d105      	bne.n	8001620 <HAL_TIM_PeriodElapsedCallback+0x54>
		dryer.beepTime--;
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001616:	79db      	ldrb	r3, [r3, #7]
 8001618:	3b01      	subs	r3, #1
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800161e:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001622:	885b      	ldrh	r3, [r3, #2]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d107      	bne.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800162a:	7a1b      	ldrb	r3, [r3, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x6c>

		dryer.cycle = COOL_CYCLE;
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001632:	2201      	movs	r2, #1
 8001634:	721a      	strb	r2, [r3, #8]
 8001636:	e013      	b.n	8001660 <HAL_TIM_PeriodElapsedCallback+0x94>

	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800163a:	889b      	ldrh	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10f      	bne.n	8001660 <HAL_TIM_PeriodElapsedCallback+0x94>
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001642:	7a1b      	ldrb	r3, [r3, #8]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d10b      	bne.n	8001660 <HAL_TIM_PeriodElapsedCallback+0x94>

		printf("Complete\r\n");
 8001648:	4824      	ldr	r0, [pc, #144]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800164a:	f002 f861 	bl	8003710 <puts>
		dryer.state = COMPLETE;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001650:	2202      	movs	r2, #2
 8001652:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001656:	2200      	movs	r2, #0
 8001658:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800165c:	2204      	movs	r2, #4
 800165e:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_TIM_PeriodElapsedCallback+0xaa>

		pasue_cunt--;
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e022      	b.n	80016bc <HAL_TIM_PeriodElapsedCallback+0xf0>

	} else if (rot_left_cunt > 0) {
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00d      	beq.n	800169a <HAL_TIM_PeriodElapsedCallback+0xce>

		rot_left_cunt--;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	3b01      	subs	r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001688:	701a      	strb	r2, [r3, #0]

		if (rot_left_cunt == 0) {
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d114      	bne.n	80016bc <HAL_TIM_PeriodElapsedCallback+0xf0>

			pasue_cunt = 3U;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001694:	2203      	movs	r2, #3
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	e010      	b.n	80016bc <HAL_TIM_PeriodElapsedCallback+0xf0>

		}

	} else if (rot_right_cunt > 0) {
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00c      	beq.n	80016bc <HAL_TIM_PeriodElapsedCallback+0xf0>

		rot_right_cunt--;
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016ac:	701a      	strb	r2, [r3, #0]

		if (rot_right_cunt == 0) {
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <HAL_TIM_PeriodElapsedCallback+0xf0>

			pasue_cunt = 3U;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80016b8:	2203      	movs	r2, #3
 80016ba:	701a      	strb	r2, [r3, #0]

		}
	}
	otp = 1;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
	lcd_update_flag = 1U;
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	08004b94 	.word	0x08004b94
 80016d4:	2000016c 	.word	0x2000016c
 80016d8:	20000108 	.word	0x20000108
 80016dc:	08004b9c 	.word	0x08004b9c
 80016e0:	2000011a 	.word	0x2000011a
 80016e4:	20000117 	.word	0x20000117
 80016e8:	20000001 	.word	0x20000001
 80016ec:	20000116 	.word	0x20000116
 80016f0:	20000000 	.word	0x20000000
 80016f4:	2000011c 	.word	0x2000011c

080016f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>
	...

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_MspInit+0x40>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_MspInit+0x40>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6193      	str	r3, [r2, #24]
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_MspInit+0x40>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_MspInit+0x40>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_MspInit+0x40>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_MspInit+0x40>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40021000 	.word	0x40021000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178e:	f000 f9eb 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}

08001796 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e00a      	b.n	80017be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a8:	f3af 8000 	nop.w
 80017ac:	4601      	mov	r1, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	60ba      	str	r2, [r7, #8]
 80017b4:	b2ca      	uxtb	r2, r1
 80017b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dbf0      	blt.n	80017a8 <_read+0x12>
  }

  return len;
 80017c6:	687b      	ldr	r3, [r7, #4]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e009      	b.n	80017f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	60ba      	str	r2, [r7, #8]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fad8 	bl	8000da0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3301      	adds	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dbf1      	blt.n	80017e2 <_write+0x12>
  }
  return len;
 80017fe:	687b      	ldr	r3, [r7, #4]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_close>:

int _close(int file)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182e:	605a      	str	r2, [r3, #4]
  return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <_isatty>:

int _isatty(int file)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <_sbrk+0x5c>)
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <_sbrk+0x60>)
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <_sbrk+0x64>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <_sbrk+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001898:	f001 fe82 	bl	80035a0 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e009      	b.n	80018bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <_sbrk+0x64>)
 80018b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20005000 	.word	0x20005000
 80018c8:	00000400 	.word	0x00000400
 80018cc:	20000120 	.word	0x20000120
 80018d0:	200001c8 	.word	0x200001c8

080018d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <timer_init>:
#include "timer.h"

TIM_HandleTypeDef htim4;

void timer_init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_CLK_ENABLE();
 80018e6:	4b27      	ldr	r3, [pc, #156]	; (8001984 <timer_init+0xa4>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a26      	ldr	r2, [pc, #152]	; (8001984 <timer_init+0xa4>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <timer_init+0xa4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <timer_init+0xa8>)
 8001918:	4a1c      	ldr	r2, [pc, #112]	; (800198c <timer_init+0xac>)
 800191a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7200;
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <timer_init+0xa8>)
 800191e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001922:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <timer_init+0xa8>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1110+1;
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <timer_init+0xa8>)
 800192c:	f240 4257 	movw	r2, #1111	; 0x457
 8001930:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <timer_init+0xa8>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <timer_init+0xa8>)
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim4);
 800193e:	4812      	ldr	r0, [pc, #72]	; (8001988 <timer_init+0xa8>)
 8001940:	f001 f846 	bl	80029d0 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4619      	mov	r1, r3
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <timer_init+0xa8>)
 8001952:	f001 fa1d 	bl	8002d90 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	4619      	mov	r1, r3
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <timer_init+0xa8>)
 8001966:	f001 fbf3 	bl	8003150 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2101      	movs	r1, #1
 800196e:	201e      	movs	r0, #30
 8001970:	f000 fa11 	bl	8001d96 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001974:	201e      	movs	r0, #30
 8001976:	f000 fa2a 	bl	8001dce <HAL_NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	20000124 	.word	0x20000124
 800198c:	40000800 	.word	0x40000800

08001990 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM4_IRQHandler+0x10>)
 8001996:	f001 f8f3 	bl	8002b80 <HAL_TIM_IRQHandler>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000124 	.word	0x20000124

080019a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <MX_USART1_UART_Init+0x50>)
 80019ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019dc:	f001 fc28 	bl	8003230 <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019e6:	f7ff fe87 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000016c 	.word	0x2000016c
 80019f4:	40013800 	.word	0x40013800

080019f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d131      	bne.n	8001a7c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_UART_MspInit+0x90>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_UART_MspInit+0x90>)
 8001a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_UART_MspInit+0x90>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_UART_MspInit+0x90>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_UART_MspInit+0x90>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_UART_MspInit+0x90>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480b      	ldr	r0, [pc, #44]	; (8001a8c <HAL_UART_MspInit+0x94>)
 8001a5e:	f000 f9d1 	bl	8001e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <HAL_UART_MspInit+0x94>)
 8001a78:	f000 f9c4 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010800 	.word	0x40010800

08001a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	; (8001ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ab6:	f7ff ff0d 	bl	80018d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f001 fd77 	bl	80035ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001abe:	f7ff f981 	bl	8000dc4 <main>
  bx lr
 8001ac2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001acc:	08004c70 	.word	0x08004c70
  ldr r2, =_sbss
 8001ad0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ad4:	200001c4 	.word	0x200001c4

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x28>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f947 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fe04 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f95f 	bl	8001dea <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f927 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000004 	.word	0x20000004
 8001b60:	2000000c 	.word	0x2000000c
 8001b64:	20000008 	.word	0x20000008

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x1c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_IncTick+0x20>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_IncTick+0x20>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	2000000c 	.word	0x2000000c
 8001b88:	200001b0 	.word	0x200001b0

08001b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <HAL_GetTick+0x10>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	200001b0 	.word	0x200001b0

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff fff0 	bl	8001b8c <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffe0 	bl	8001b8c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000000c 	.word	0x2000000c

08001be8 <__NVIC_SetPriorityGrouping>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4906      	ldr	r1, [pc, #24]	; (8001c80 <__NVIC_EnableIRQ+0x34>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff90 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff2d 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff42 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff90 	bl	8001cd8 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5f 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff35 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa2 	bl	8001d3c <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b08b      	sub	sp, #44	; 0x2c
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	e169      	b.n	80020ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f040 8158 	bne.w	80020e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4a9a      	ldr	r2, [pc, #616]	; (80020a4 <HAL_GPIO_Init+0x2a0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d05e      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e40:	4a98      	ldr	r2, [pc, #608]	; (80020a4 <HAL_GPIO_Init+0x2a0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d875      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e46:	4a98      	ldr	r2, [pc, #608]	; (80020a8 <HAL_GPIO_Init+0x2a4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d058      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e4c:	4a96      	ldr	r2, [pc, #600]	; (80020a8 <HAL_GPIO_Init+0x2a4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d86f      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e52:	4a96      	ldr	r2, [pc, #600]	; (80020ac <HAL_GPIO_Init+0x2a8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d052      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e58:	4a94      	ldr	r2, [pc, #592]	; (80020ac <HAL_GPIO_Init+0x2a8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d869      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e5e:	4a94      	ldr	r2, [pc, #592]	; (80020b0 <HAL_GPIO_Init+0x2ac>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d04c      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e64:	4a92      	ldr	r2, [pc, #584]	; (80020b0 <HAL_GPIO_Init+0x2ac>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d863      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e6a:	4a92      	ldr	r2, [pc, #584]	; (80020b4 <HAL_GPIO_Init+0x2b0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d046      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e70:	4a90      	ldr	r2, [pc, #576]	; (80020b4 <HAL_GPIO_Init+0x2b0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d85d      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d82a      	bhi.n	8001ed0 <HAL_GPIO_Init+0xcc>
 8001e7a:	2b12      	cmp	r3, #18
 8001e7c:	d859      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <HAL_GPIO_Init+0x80>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001eff 	.word	0x08001eff
 8001e88:	08001ed9 	.word	0x08001ed9
 8001e8c:	08001eeb 	.word	0x08001eeb
 8001e90:	08001f2d 	.word	0x08001f2d
 8001e94:	08001f33 	.word	0x08001f33
 8001e98:	08001f33 	.word	0x08001f33
 8001e9c:	08001f33 	.word	0x08001f33
 8001ea0:	08001f33 	.word	0x08001f33
 8001ea4:	08001f33 	.word	0x08001f33
 8001ea8:	08001f33 	.word	0x08001f33
 8001eac:	08001f33 	.word	0x08001f33
 8001eb0:	08001f33 	.word	0x08001f33
 8001eb4:	08001f33 	.word	0x08001f33
 8001eb8:	08001f33 	.word	0x08001f33
 8001ebc:	08001f33 	.word	0x08001f33
 8001ec0:	08001f33 	.word	0x08001f33
 8001ec4:	08001f33 	.word	0x08001f33
 8001ec8:	08001ee1 	.word	0x08001ee1
 8001ecc:	08001ef5 	.word	0x08001ef5
 8001ed0:	4a79      	ldr	r2, [pc, #484]	; (80020b8 <HAL_GPIO_Init+0x2b4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ed6:	e02c      	b.n	8001f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e029      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e024      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	3308      	adds	r3, #8
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e01f      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	330c      	adds	r3, #12
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e01a      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f06:	2304      	movs	r3, #4
 8001f08:	623b      	str	r3, [r7, #32]
          break;
 8001f0a:	e013      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f14:	2308      	movs	r3, #8
 8001f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	611a      	str	r2, [r3, #16]
          break;
 8001f1e:	e009      	b.n	8001f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f20:	2308      	movs	r3, #8
 8001f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	615a      	str	r2, [r3, #20]
          break;
 8001f2a:	e003      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
          break;
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          break;
 8001f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2bff      	cmp	r3, #255	; 0xff
 8001f38:	d801      	bhi.n	8001f3e <HAL_GPIO_Init+0x13a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_Init+0x13e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d802      	bhi.n	8001f50 <HAL_GPIO_Init+0x14c>
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x152>
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	3b08      	subs	r3, #8
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	210f      	movs	r1, #15
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	6a39      	ldr	r1, [r7, #32]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80b1 	beq.w	80020e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f84:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <HAL_GPIO_Init+0x2b8>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a4c      	ldr	r2, [pc, #304]	; (80020bc <HAL_GPIO_Init+0x2b8>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_GPIO_Init+0x2b8>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f9c:	4a48      	ldr	r2, [pc, #288]	; (80020c0 <HAL_GPIO_Init+0x2bc>)
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a40      	ldr	r2, [pc, #256]	; (80020c4 <HAL_GPIO_Init+0x2c0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_GPIO_Init+0x1ec>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3f      	ldr	r2, [pc, #252]	; (80020c8 <HAL_GPIO_Init+0x2c4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00d      	beq.n	8001fec <HAL_GPIO_Init+0x1e8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3e      	ldr	r2, [pc, #248]	; (80020cc <HAL_GPIO_Init+0x2c8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_Init+0x1e4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <HAL_GPIO_Init+0x2cc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d101      	bne.n	8001fe4 <HAL_GPIO_Init+0x1e0>
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	e004      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff4:	f002 0203 	and.w	r2, r2, #3
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002002:	492f      	ldr	r1, [pc, #188]	; (80020c0 <HAL_GPIO_Init+0x2bc>)
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	492c      	ldr	r1, [pc, #176]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800202a:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4928      	ldr	r1, [pc, #160]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4922      	ldr	r1, [pc, #136]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	43db      	mvns	r3, r3
 800205a:	491e      	ldr	r1, [pc, #120]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800205c:	4013      	ands	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	4918      	ldr	r1, [pc, #96]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	43db      	mvns	r3, r3
 8002082:	4914      	ldr	r1, [pc, #80]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002084:	4013      	ands	r3, r2
 8002086:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d021      	beq.n	80020d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	60cb      	str	r3, [r1, #12]
 80020a0:	e021      	b.n	80020e6 <HAL_GPIO_Init+0x2e2>
 80020a2:	bf00      	nop
 80020a4:	10320000 	.word	0x10320000
 80020a8:	10310000 	.word	0x10310000
 80020ac:	10220000 	.word	0x10220000
 80020b0:	10210000 	.word	0x10210000
 80020b4:	10120000 	.word	0x10120000
 80020b8:	10110000 	.word	0x10110000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40010800 	.word	0x40010800
 80020c8:	40010c00 	.word	0x40010c00
 80020cc:	40011000 	.word	0x40011000
 80020d0:	40011400 	.word	0x40011400
 80020d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	43db      	mvns	r3, r3
 80020e0:	4909      	ldr	r1, [pc, #36]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	3301      	adds	r3, #1
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f47f ae8e 	bne.w	8001e18 <HAL_GPIO_Init+0x14>
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	372c      	adds	r7, #44	; 0x2c
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40010400 	.word	0x40010400

0800210c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e001      	b.n	800212e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	807b      	strh	r3, [r7, #2]
 8002146:	4613      	mov	r3, r2
 8002148:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800214a:	787b      	ldrb	r3, [r7, #1]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002150:	887a      	ldrh	r2, [r7, #2]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002156:	e003      	b.n	8002160 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	041a      	lsls	r2, r3, #16
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	611a      	str	r2, [r3, #16]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
	...

0800216c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f9aa 	bl	80014e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e272      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8087 	beq.w	80022ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021bc:	4b92      	ldr	r3, [pc, #584]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d00c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c8:	4b8f      	ldr	r3, [pc, #572]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d112      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
 80021d4:	4b8c      	ldr	r3, [pc, #560]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d10b      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e2:	4b89      	ldr	r3, [pc, #548]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x12c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d168      	bne.n	80022c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e24c      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x76>
 8002204:	4b80      	ldr	r3, [pc, #512]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a7f      	ldr	r2, [pc, #508]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e02e      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x98>
 800221a:	4b7b      	ldr	r3, [pc, #492]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7a      	ldr	r2, [pc, #488]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b78      	ldr	r3, [pc, #480]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a77      	ldr	r2, [pc, #476]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0xbc>
 800223e:	4b72      	ldr	r3, [pc, #456]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a71      	ldr	r2, [pc, #452]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6e      	ldr	r2, [pc, #440]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002258:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6a      	ldr	r2, [pc, #424]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b68      	ldr	r3, [pc, #416]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a67      	ldr	r2, [pc, #412]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fc88 	bl	8001b8c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff fc84 	bl	8001b8c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e200      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xe4>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fc74 	bl	8001b8c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff fc70 	bl	8001b8c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1ec      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	4b53      	ldr	r3, [pc, #332]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x10c>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d063      	beq.n	800239e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d6:	4b4c      	ldr	r3, [pc, #304]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022e2:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d11c      	bne.n	8002328 <HAL_RCC_OscConfig+0x18c>
 80022ee:	4b46      	ldr	r3, [pc, #280]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e1c0      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4939      	ldr	r1, [pc, #228]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	e03a      	b.n	800239e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff fc29 	bl	8001b8c <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff fc25 	bl	8001b8c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1a1      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4927      	ldr	r1, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff fc08 	bl	8001b8c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002380:	f7ff fc04 	bl	8001b8c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e180      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d03a      	beq.n	8002420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d019      	beq.n	80023e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_RCC_OscConfig+0x274>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7ff fbe8 	bl	8001b8c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff fbe4 	bl	8001b8c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e160      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023de:	2001      	movs	r0, #1
 80023e0:	f000 fad8 	bl	8002994 <RCC_Delay>
 80023e4:	e01c      	b.n	8002420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_RCC_OscConfig+0x274>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ec:	f7ff fbce 	bl	8001b8c <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f2:	e00f      	b.n	8002414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff fbca 	bl	8001b8c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d908      	bls.n	8002414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e146      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	42420000 	.word	0x42420000
 8002410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	4b92      	ldr	r3, [pc, #584]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e9      	bne.n	80023f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a6 	beq.w	800257a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002432:	4b8b      	ldr	r3, [pc, #556]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b88      	ldr	r3, [pc, #544]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a87      	ldr	r2, [pc, #540]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b85      	ldr	r3, [pc, #532]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b82      	ldr	r3, [pc, #520]	; (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d118      	bne.n	8002498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4b7f      	ldr	r3, [pc, #508]	; (8002664 <HAL_RCC_OscConfig+0x4c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a7e      	ldr	r2, [pc, #504]	; (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002472:	f7ff fb8b 	bl	8001b8c <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7ff fb87 	bl	8001b8c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	; 0x64
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e103      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	4b75      	ldr	r3, [pc, #468]	; (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x312>
 80024a0:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a6e      	ldr	r2, [pc, #440]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	e02d      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x334>
 80024b6:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a69      	ldr	r2, [pc, #420]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	4b67      	ldr	r3, [pc, #412]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a66      	ldr	r2, [pc, #408]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	f023 0304 	bic.w	r3, r3, #4
 80024cc:	6213      	str	r3, [r2, #32]
 80024ce:	e01c      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x356>
 80024d8:	4b61      	ldr	r3, [pc, #388]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a60      	ldr	r2, [pc, #384]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	4b5e      	ldr	r3, [pc, #376]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a5d      	ldr	r2, [pc, #372]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024f2:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a5a      	ldr	r2, [pc, #360]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a57      	ldr	r2, [pc, #348]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d015      	beq.n	800253e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff fb3b 	bl	8001b8c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7ff fb37 	bl	8001b8c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0b1      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b4b      	ldr	r3, [pc, #300]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCC_OscConfig+0x37e>
 800253c:	e014      	b.n	8002568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff fb25 	bl	8001b8c <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7ff fb21 	bl	8001b8c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e09b      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	4b40      	ldr	r3, [pc, #256]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ee      	bne.n	8002546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d105      	bne.n	800257a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a3b      	ldr	r2, [pc, #236]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8087 	beq.w	8002692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002584:	4b36      	ldr	r3, [pc, #216]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d061      	beq.n	8002654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d146      	bne.n	8002626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002598:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_RCC_OscConfig+0x4cc>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff faf5 	bl	8001b8c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7ff faf1 	bl	8001b8c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e06d      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025cc:	d108      	bne.n	80025e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4921      	ldr	r1, [pc, #132]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a19      	ldr	r1, [r3, #32]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	430b      	orrs	r3, r1
 80025f2:	491b      	ldr	r1, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff fac5 	bl	8001b8c <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff fac1 	bl	8001b8c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e03d      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x46a>
 8002624:	e035      	b.n	8002692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_RCC_OscConfig+0x4cc>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff faae 	bl	8001b8c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff faaa 	bl	8001b8c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e026      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x498>
 8002652:	e01e      	b.n	8002692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e019      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
 8002660:	40021000 	.word	0x40021000
 8002664:	40007000 	.word	0x40007000
 8002668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_OscConfig+0x500>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	429a      	cmp	r2, r3
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0d0      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d910      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4965      	ldr	r1, [pc, #404]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b63      	ldr	r3, [pc, #396]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0b8      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026fc:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a58      	ldr	r2, [pc, #352]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002714:	4b53      	ldr	r3, [pc, #332]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a52      	ldr	r2, [pc, #328]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800271e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4b50      	ldr	r3, [pc, #320]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	494d      	ldr	r1, [pc, #308]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d040      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b47      	ldr	r3, [pc, #284]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d115      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275e:	4b41      	ldr	r3, [pc, #260]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e073      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06b      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277e:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f023 0203 	bic.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4936      	ldr	r1, [pc, #216]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002790:	f7ff f9fc 	bl	8001b8c <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	e00a      	b.n	80027ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002798:	f7ff f9f8 	bl	8001b8c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e053      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 020c 	and.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1eb      	bne.n	8002798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c0:	4b27      	ldr	r3, [pc, #156]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d210      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	4922      	ldr	r1, [pc, #136]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e032      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4916      	ldr	r1, [pc, #88]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	490e      	ldr	r1, [pc, #56]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800282e:	f000 f821 	bl	8002874 <HAL_RCC_GetSysClockFreq>
 8002832:	4602      	mov	r2, r0
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	490a      	ldr	r1, [pc, #40]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 8002840:	5ccb      	ldrb	r3, [r1, r3]
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	4a09      	ldr	r2, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x1cc>)
 8002848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1d0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f95a 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000
 8002864:	40021000 	.word	0x40021000
 8002868:	08004bb8 	.word	0x08004bb8
 800286c:	20000004 	.word	0x20000004
 8002870:	20000008 	.word	0x20000008

08002874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002874:	b490      	push	{r4, r7}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800287a:	4b29      	ldr	r3, [pc, #164]	; (8002920 <HAL_RCC_GetSysClockFreq+0xac>)
 800287c:	1d3c      	adds	r4, r7, #4
 800287e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002884:	f240 2301 	movw	r3, #513	; 0x201
 8002888:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d002      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x40>
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0x46>
 80028b2:	e02b      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b4:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028b6:	623b      	str	r3, [r7, #32]
      break;
 80028b8:	e02b      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	0c9b      	lsrs	r3, r3, #18
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3328      	adds	r3, #40	; 0x28
 80028c4:	443b      	add	r3, r7
 80028c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	0c5b      	lsrs	r3, r3, #17
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	3328      	adds	r3, #40	; 0x28
 80028e2:	443b      	add	r3, r7
 80028e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	4a0e      	ldr	r2, [pc, #56]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ee:	fb03 f202 	mul.w	r2, r3, r2
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	e004      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	4a0b      	ldr	r2, [pc, #44]	; (800292c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002900:	fb02 f303 	mul.w	r3, r2, r3
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	623b      	str	r3, [r7, #32]
      break;
 800290a:	e002      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb4>)
 800290e:	623b      	str	r3, [r7, #32]
      break;
 8002910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002912:	6a3b      	ldr	r3, [r7, #32]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3728      	adds	r7, #40	; 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc90      	pop	{r4, r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	08004ba8 	.word	0x08004ba8
 8002924:	40021000 	.word	0x40021000
 8002928:	007a1200 	.word	0x007a1200
 800292c:	003d0900 	.word	0x003d0900

08002930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002934:	4b02      	ldr	r3, [pc, #8]	; (8002940 <HAL_RCC_GetHCLKFreq+0x10>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002948:	f7ff fff2 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4903      	ldr	r1, [pc, #12]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	08004bc8 	.word	0x08004bc8

0800296c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002970:	f7ff ffde 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	0adb      	lsrs	r3, r3, #11
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	08004bc8 	.word	0x08004bc8

08002994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <RCC_Delay+0x34>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <RCC_Delay+0x38>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0a5b      	lsrs	r3, r3, #9
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b0:	bf00      	nop
  }
  while (Delay --);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1e5a      	subs	r2, r3, #1
 80029b6:	60fa      	str	r2, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f9      	bne.n	80029b0 <RCC_Delay+0x1c>
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000004 	.word	0x20000004
 80029cc:	10624dd3 	.word	0x10624dd3

080029d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e041      	b.n	8002a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f839 	bl	8002a6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f000 faa6 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d001      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e03a      	b.n	8002b0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_TIM_Base_Start_IT+0x98>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00e      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0x58>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac2:	d009      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0x58>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <HAL_TIM_Base_Start_IT+0x9c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0x58>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d111      	bne.n	8002afc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d010      	beq.n	8002b0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afa:	e007      	b.n	8002b0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800

08002b24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a1a      	ldr	r2, [r3, #32]
 8002b42:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10f      	bne.n	8002b6c <HAL_TIM_Base_Stop_IT+0x48>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6a1a      	ldr	r2, [r3, #32]
 8002b52:	f240 4344 	movw	r3, #1092	; 0x444
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d107      	bne.n	8002b6c <HAL_TIM_Base_Stop_IT+0x48>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d122      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d11b      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0202 	mvn.w	r2, #2
 8002bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f9b1 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002bc8:	e005      	b.n	8002bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9a4 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f9b3 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d122      	bne.n	8002c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d11b      	bne.n	8002c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0204 	mvn.w	r2, #4
 8002c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f987 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002c1c:	e005      	b.n	8002c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f97a 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f989 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d122      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d11b      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0208 	mvn.w	r2, #8
 8002c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f95d 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002c70:	e005      	b.n	8002c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f950 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f95f 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	d122      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0210 	mvn.w	r2, #16
 8002ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2208      	movs	r2, #8
 8002cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f933 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f926 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f935 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d10e      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0201 	mvn.w	r2, #1
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fc64 	bl	80015cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b80      	cmp	r3, #128	; 0x80
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fa77 	bl	800321e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8f9 	bl	8002f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d10e      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d107      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0220 	mvn.w	r2, #32
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa42 	bl	800320c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_TIM_ConfigClockSource+0x18>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e0b3      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x180>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de0:	d03e      	beq.n	8002e60 <HAL_TIM_ConfigClockSource+0xd0>
 8002de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de6:	f200 8087 	bhi.w	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dee:	f000 8085 	beq.w	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df6:	d87f      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002df8:	2b70      	cmp	r3, #112	; 0x70
 8002dfa:	d01a      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0xa2>
 8002dfc:	2b70      	cmp	r3, #112	; 0x70
 8002dfe:	d87b      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e00:	2b60      	cmp	r3, #96	; 0x60
 8002e02:	d050      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x116>
 8002e04:	2b60      	cmp	r3, #96	; 0x60
 8002e06:	d877      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e08:	2b50      	cmp	r3, #80	; 0x50
 8002e0a:	d03c      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0xf6>
 8002e0c:	2b50      	cmp	r3, #80	; 0x50
 8002e0e:	d873      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d058      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x136>
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d86f      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e18:	2b30      	cmp	r3, #48	; 0x30
 8002e1a:	d064      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x156>
 8002e1c:	2b30      	cmp	r3, #48	; 0x30
 8002e1e:	d86b      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d060      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x156>
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d867      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d05c      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x156>
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d05a      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e30:	e062      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f000 f966 	bl	8003112 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
      break;
 8002e5e:	e04e      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6899      	ldr	r1, [r3, #8]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f000 f94f 	bl	8003112 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e82:	609a      	str	r2, [r3, #8]
      break;
 8002e84:	e03b      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 f8c6 	bl	8003024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2150      	movs	r1, #80	; 0x50
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f91d 	bl	80030de <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e02b      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f000 f8e4 	bl	8003080 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2160      	movs	r1, #96	; 0x60
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f90d 	bl	80030de <TIM_ITRx_SetConfig>
      break;
 8002ec4:	e01b      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f000 f8a6 	bl	8003024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2140      	movs	r1, #64	; 0x40
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f8fd 	bl	80030de <TIM_ITRx_SetConfig>
      break;
 8002ee4:	e00b      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	f000 f8f4 	bl	80030de <TIM_ITRx_SetConfig>
        break;
 8002ef6:	e002      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002efc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a29      	ldr	r2, [pc, #164]	; (8003018 <TIM_Base_SetConfig+0xb8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <TIM_Base_SetConfig+0x30>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d007      	beq.n	8002f90 <TIM_Base_SetConfig+0x30>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a26      	ldr	r2, [pc, #152]	; (800301c <TIM_Base_SetConfig+0xbc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0x30>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a25      	ldr	r2, [pc, #148]	; (8003020 <TIM_Base_SetConfig+0xc0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d108      	bne.n	8002fa2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <TIM_Base_SetConfig+0xb8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00b      	beq.n	8002fc2 <TIM_Base_SetConfig+0x62>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d007      	beq.n	8002fc2 <TIM_Base_SetConfig+0x62>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	; (800301c <TIM_Base_SetConfig+0xbc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <TIM_Base_SetConfig+0x62>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <TIM_Base_SetConfig+0xc0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a07      	ldr	r2, [pc, #28]	; (8003018 <TIM_Base_SetConfig+0xb8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d103      	bne.n	8003008 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	615a      	str	r2, [r3, #20]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800

08003024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f023 0201 	bic.w	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800304e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f023 030a 	bic.w	r3, r3, #10
 8003060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	621a      	str	r2, [r3, #32]
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 0210 	bic.w	r2, r3, #16
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	031b      	lsls	r3, r3, #12
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	621a      	str	r2, [r3, #32]
}
 80030d4:	bf00      	nop
 80030d6:	371c      	adds	r7, #28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f043 0307 	orr.w	r3, r3, #7
 8003100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	609a      	str	r2, [r3, #8]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003112:	b480      	push	{r7}
 8003114:	b087      	sub	sp, #28
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800312c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	021a      	lsls	r2, r3, #8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	431a      	orrs	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4313      	orrs	r3, r2
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	609a      	str	r2, [r3, #8]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003164:	2302      	movs	r3, #2
 8003166:	e046      	b.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a16      	ldr	r2, [pc, #88]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00e      	beq.n	80031ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d009      	beq.n	80031ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d004      	beq.n	80031ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a10      	ldr	r2, [pc, #64]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10c      	bne.n	80031e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40000400 	.word	0x40000400
 8003208:	40000800 	.word	0x40000800

0800320c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e03f      	b.n	80032c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe fbce 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f905 	bl	8003484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b08a      	sub	sp, #40	; 0x28
 80032ce:	af02      	add	r7, sp, #8
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d17c      	bne.n	80033e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_UART_Transmit+0x2c>
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e075      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_UART_Transmit+0x3e>
 8003304:	2302      	movs	r3, #2
 8003306:	e06e      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2221      	movs	r2, #33	; 0x21
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800331e:	f7fe fc35 	bl	8001b8c <HAL_GetTick>
 8003322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003338:	d108      	bne.n	800334c <HAL_UART_Transmit+0x82>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d104      	bne.n	800334c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	e003      	b.n	8003354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800335c:	e02a      	b.n	80033b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f840 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e036      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800338c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	3302      	adds	r3, #2
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	e007      	b.n	80033a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3301      	adds	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1cf      	bne.n	800335e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	2140      	movs	r1, #64	; 0x40
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f810 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e006      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fe:	e02c      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d028      	beq.n	800345a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0x30>
 800340e:	f7fe fbbd 	bl	8001b8c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	429a      	cmp	r2, r3
 800341c:	d21d      	bcs.n	800345a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800342c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e00f      	b.n	800347a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	429a      	cmp	r2, r3
 8003476:	d0c3      	beq.n	8003400 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034be:	f023 030c 	bic.w	r3, r3, #12
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UART_SetConfig+0x114>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7ff fa3e 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	e002      	b.n	80034fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7ff fa26 	bl	8002944 <HAL_RCC_GetPCLK1Freq>
 80034f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	4a22      	ldr	r2, [pc, #136]	; (800359c <UART_SetConfig+0x118>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	0119      	lsls	r1, r3, #4
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	009a      	lsls	r2, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003530:	4b1a      	ldr	r3, [pc, #104]	; (800359c <UART_SetConfig+0x118>)
 8003532:	fba3 0302 	umull	r0, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2064      	movs	r0, #100	; 0x64
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	3332      	adds	r3, #50	; 0x32
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <UART_SetConfig+0x118>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003550:	4419      	add	r1, r3
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <UART_SetConfig+0x118>)
 800356a:	fba3 0302 	umull	r0, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2064      	movs	r0, #100	; 0x64
 8003572:	fb00 f303 	mul.w	r3, r0, r3
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	3332      	adds	r3, #50	; 0x32
 800357c:	4a07      	ldr	r2, [pc, #28]	; (800359c <UART_SetConfig+0x118>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	440a      	add	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013800 	.word	0x40013800
 800359c:	51eb851f 	.word	0x51eb851f

080035a0 <__errno>:
 80035a0:	4b01      	ldr	r3, [pc, #4]	; (80035a8 <__errno+0x8>)
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000010 	.word	0x20000010

080035ac <__libc_init_array>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	2600      	movs	r6, #0
 80035b0:	4d0c      	ldr	r5, [pc, #48]	; (80035e4 <__libc_init_array+0x38>)
 80035b2:	4c0d      	ldr	r4, [pc, #52]	; (80035e8 <__libc_init_array+0x3c>)
 80035b4:	1b64      	subs	r4, r4, r5
 80035b6:	10a4      	asrs	r4, r4, #2
 80035b8:	42a6      	cmp	r6, r4
 80035ba:	d109      	bne.n	80035d0 <__libc_init_array+0x24>
 80035bc:	f001 fa08 	bl	80049d0 <_init>
 80035c0:	2600      	movs	r6, #0
 80035c2:	4d0a      	ldr	r5, [pc, #40]	; (80035ec <__libc_init_array+0x40>)
 80035c4:	4c0a      	ldr	r4, [pc, #40]	; (80035f0 <__libc_init_array+0x44>)
 80035c6:	1b64      	subs	r4, r4, r5
 80035c8:	10a4      	asrs	r4, r4, #2
 80035ca:	42a6      	cmp	r6, r4
 80035cc:	d105      	bne.n	80035da <__libc_init_array+0x2e>
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d4:	4798      	blx	r3
 80035d6:	3601      	adds	r6, #1
 80035d8:	e7ee      	b.n	80035b8 <__libc_init_array+0xc>
 80035da:	f855 3b04 	ldr.w	r3, [r5], #4
 80035de:	4798      	blx	r3
 80035e0:	3601      	adds	r6, #1
 80035e2:	e7f2      	b.n	80035ca <__libc_init_array+0x1e>
 80035e4:	08004c68 	.word	0x08004c68
 80035e8:	08004c68 	.word	0x08004c68
 80035ec:	08004c68 	.word	0x08004c68
 80035f0:	08004c6c 	.word	0x08004c6c

080035f4 <memset>:
 80035f4:	4603      	mov	r3, r0
 80035f6:	4402      	add	r2, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <iprintf>:
 8003604:	b40f      	push	{r0, r1, r2, r3}
 8003606:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <iprintf+0x2c>)
 8003608:	b513      	push	{r0, r1, r4, lr}
 800360a:	681c      	ldr	r4, [r3, #0]
 800360c:	b124      	cbz	r4, 8003618 <iprintf+0x14>
 800360e:	69a3      	ldr	r3, [r4, #24]
 8003610:	b913      	cbnz	r3, 8003618 <iprintf+0x14>
 8003612:	4620      	mov	r0, r4
 8003614:	f000 fa7a 	bl	8003b0c <__sinit>
 8003618:	ab05      	add	r3, sp, #20
 800361a:	4620      	mov	r0, r4
 800361c:	9a04      	ldr	r2, [sp, #16]
 800361e:	68a1      	ldr	r1, [r4, #8]
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	f000 fdd9 	bl	80041d8 <_vfiprintf_r>
 8003626:	b002      	add	sp, #8
 8003628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800362c:	b004      	add	sp, #16
 800362e:	4770      	bx	lr
 8003630:	20000010 	.word	0x20000010

08003634 <_puts_r>:
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	460e      	mov	r6, r1
 8003638:	4605      	mov	r5, r0
 800363a:	b118      	cbz	r0, 8003644 <_puts_r+0x10>
 800363c:	6983      	ldr	r3, [r0, #24]
 800363e:	b90b      	cbnz	r3, 8003644 <_puts_r+0x10>
 8003640:	f000 fa64 	bl	8003b0c <__sinit>
 8003644:	69ab      	ldr	r3, [r5, #24]
 8003646:	68ac      	ldr	r4, [r5, #8]
 8003648:	b913      	cbnz	r3, 8003650 <_puts_r+0x1c>
 800364a:	4628      	mov	r0, r5
 800364c:	f000 fa5e 	bl	8003b0c <__sinit>
 8003650:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <_puts_r+0xd0>)
 8003652:	429c      	cmp	r4, r3
 8003654:	d120      	bne.n	8003698 <_puts_r+0x64>
 8003656:	686c      	ldr	r4, [r5, #4]
 8003658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800365a:	07db      	lsls	r3, r3, #31
 800365c:	d405      	bmi.n	800366a <_puts_r+0x36>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	0598      	lsls	r0, r3, #22
 8003662:	d402      	bmi.n	800366a <_puts_r+0x36>
 8003664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003666:	f000 faef 	bl	8003c48 <__retarget_lock_acquire_recursive>
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	0719      	lsls	r1, r3, #28
 800366e:	d51d      	bpl.n	80036ac <_puts_r+0x78>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	b1db      	cbz	r3, 80036ac <_puts_r+0x78>
 8003674:	3e01      	subs	r6, #1
 8003676:	68a3      	ldr	r3, [r4, #8]
 8003678:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800367c:	3b01      	subs	r3, #1
 800367e:	60a3      	str	r3, [r4, #8]
 8003680:	bb39      	cbnz	r1, 80036d2 <_puts_r+0x9e>
 8003682:	2b00      	cmp	r3, #0
 8003684:	da38      	bge.n	80036f8 <_puts_r+0xc4>
 8003686:	4622      	mov	r2, r4
 8003688:	210a      	movs	r1, #10
 800368a:	4628      	mov	r0, r5
 800368c:	f000 f868 	bl	8003760 <__swbuf_r>
 8003690:	3001      	adds	r0, #1
 8003692:	d011      	beq.n	80036b8 <_puts_r+0x84>
 8003694:	250a      	movs	r5, #10
 8003696:	e011      	b.n	80036bc <_puts_r+0x88>
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <_puts_r+0xd4>)
 800369a:	429c      	cmp	r4, r3
 800369c:	d101      	bne.n	80036a2 <_puts_r+0x6e>
 800369e:	68ac      	ldr	r4, [r5, #8]
 80036a0:	e7da      	b.n	8003658 <_puts_r+0x24>
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <_puts_r+0xd8>)
 80036a4:	429c      	cmp	r4, r3
 80036a6:	bf08      	it	eq
 80036a8:	68ec      	ldreq	r4, [r5, #12]
 80036aa:	e7d5      	b.n	8003658 <_puts_r+0x24>
 80036ac:	4621      	mov	r1, r4
 80036ae:	4628      	mov	r0, r5
 80036b0:	f000 f8a8 	bl	8003804 <__swsetup_r>
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d0dd      	beq.n	8003674 <_puts_r+0x40>
 80036b8:	f04f 35ff 	mov.w	r5, #4294967295
 80036bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036be:	07da      	lsls	r2, r3, #31
 80036c0:	d405      	bmi.n	80036ce <_puts_r+0x9a>
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	059b      	lsls	r3, r3, #22
 80036c6:	d402      	bmi.n	80036ce <_puts_r+0x9a>
 80036c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ca:	f000 fabe 	bl	8003c4a <__retarget_lock_release_recursive>
 80036ce:	4628      	mov	r0, r5
 80036d0:	bd70      	pop	{r4, r5, r6, pc}
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	da04      	bge.n	80036e0 <_puts_r+0xac>
 80036d6:	69a2      	ldr	r2, [r4, #24]
 80036d8:	429a      	cmp	r2, r3
 80036da:	dc06      	bgt.n	80036ea <_puts_r+0xb6>
 80036dc:	290a      	cmp	r1, #10
 80036de:	d004      	beq.n	80036ea <_puts_r+0xb6>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	6022      	str	r2, [r4, #0]
 80036e6:	7019      	strb	r1, [r3, #0]
 80036e8:	e7c5      	b.n	8003676 <_puts_r+0x42>
 80036ea:	4622      	mov	r2, r4
 80036ec:	4628      	mov	r0, r5
 80036ee:	f000 f837 	bl	8003760 <__swbuf_r>
 80036f2:	3001      	adds	r0, #1
 80036f4:	d1bf      	bne.n	8003676 <_puts_r+0x42>
 80036f6:	e7df      	b.n	80036b8 <_puts_r+0x84>
 80036f8:	250a      	movs	r5, #10
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	6022      	str	r2, [r4, #0]
 8003700:	701d      	strb	r5, [r3, #0]
 8003702:	e7db      	b.n	80036bc <_puts_r+0x88>
 8003704:	08004bf4 	.word	0x08004bf4
 8003708:	08004c14 	.word	0x08004c14
 800370c:	08004bd4 	.word	0x08004bd4

08003710 <puts>:
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <puts+0xc>)
 8003712:	4601      	mov	r1, r0
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	f7ff bf8d 	b.w	8003634 <_puts_r>
 800371a:	bf00      	nop
 800371c:	20000010 	.word	0x20000010

08003720 <siprintf>:
 8003720:	b40e      	push	{r1, r2, r3}
 8003722:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003726:	b500      	push	{lr}
 8003728:	b09c      	sub	sp, #112	; 0x70
 800372a:	ab1d      	add	r3, sp, #116	; 0x74
 800372c:	9002      	str	r0, [sp, #8]
 800372e:	9006      	str	r0, [sp, #24]
 8003730:	9107      	str	r1, [sp, #28]
 8003732:	9104      	str	r1, [sp, #16]
 8003734:	4808      	ldr	r0, [pc, #32]	; (8003758 <siprintf+0x38>)
 8003736:	4909      	ldr	r1, [pc, #36]	; (800375c <siprintf+0x3c>)
 8003738:	f853 2b04 	ldr.w	r2, [r3], #4
 800373c:	9105      	str	r1, [sp, #20]
 800373e:	6800      	ldr	r0, [r0, #0]
 8003740:	a902      	add	r1, sp, #8
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	f000 fc20 	bl	8003f88 <_svfiprintf_r>
 8003748:	2200      	movs	r2, #0
 800374a:	9b02      	ldr	r3, [sp, #8]
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	b01c      	add	sp, #112	; 0x70
 8003750:	f85d eb04 	ldr.w	lr, [sp], #4
 8003754:	b003      	add	sp, #12
 8003756:	4770      	bx	lr
 8003758:	20000010 	.word	0x20000010
 800375c:	ffff0208 	.word	0xffff0208

08003760 <__swbuf_r>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	460e      	mov	r6, r1
 8003764:	4614      	mov	r4, r2
 8003766:	4605      	mov	r5, r0
 8003768:	b118      	cbz	r0, 8003772 <__swbuf_r+0x12>
 800376a:	6983      	ldr	r3, [r0, #24]
 800376c:	b90b      	cbnz	r3, 8003772 <__swbuf_r+0x12>
 800376e:	f000 f9cd 	bl	8003b0c <__sinit>
 8003772:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <__swbuf_r+0x98>)
 8003774:	429c      	cmp	r4, r3
 8003776:	d12b      	bne.n	80037d0 <__swbuf_r+0x70>
 8003778:	686c      	ldr	r4, [r5, #4]
 800377a:	69a3      	ldr	r3, [r4, #24]
 800377c:	60a3      	str	r3, [r4, #8]
 800377e:	89a3      	ldrh	r3, [r4, #12]
 8003780:	071a      	lsls	r2, r3, #28
 8003782:	d52f      	bpl.n	80037e4 <__swbuf_r+0x84>
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	b36b      	cbz	r3, 80037e4 <__swbuf_r+0x84>
 8003788:	6923      	ldr	r3, [r4, #16]
 800378a:	6820      	ldr	r0, [r4, #0]
 800378c:	b2f6      	uxtb	r6, r6
 800378e:	1ac0      	subs	r0, r0, r3
 8003790:	6963      	ldr	r3, [r4, #20]
 8003792:	4637      	mov	r7, r6
 8003794:	4283      	cmp	r3, r0
 8003796:	dc04      	bgt.n	80037a2 <__swbuf_r+0x42>
 8003798:	4621      	mov	r1, r4
 800379a:	4628      	mov	r0, r5
 800379c:	f000 f922 	bl	80039e4 <_fflush_r>
 80037a0:	bb30      	cbnz	r0, 80037f0 <__swbuf_r+0x90>
 80037a2:	68a3      	ldr	r3, [r4, #8]
 80037a4:	3001      	adds	r0, #1
 80037a6:	3b01      	subs	r3, #1
 80037a8:	60a3      	str	r3, [r4, #8]
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	6022      	str	r2, [r4, #0]
 80037b0:	701e      	strb	r6, [r3, #0]
 80037b2:	6963      	ldr	r3, [r4, #20]
 80037b4:	4283      	cmp	r3, r0
 80037b6:	d004      	beq.n	80037c2 <__swbuf_r+0x62>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	07db      	lsls	r3, r3, #31
 80037bc:	d506      	bpl.n	80037cc <__swbuf_r+0x6c>
 80037be:	2e0a      	cmp	r6, #10
 80037c0:	d104      	bne.n	80037cc <__swbuf_r+0x6c>
 80037c2:	4621      	mov	r1, r4
 80037c4:	4628      	mov	r0, r5
 80037c6:	f000 f90d 	bl	80039e4 <_fflush_r>
 80037ca:	b988      	cbnz	r0, 80037f0 <__swbuf_r+0x90>
 80037cc:	4638      	mov	r0, r7
 80037ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <__swbuf_r+0x9c>)
 80037d2:	429c      	cmp	r4, r3
 80037d4:	d101      	bne.n	80037da <__swbuf_r+0x7a>
 80037d6:	68ac      	ldr	r4, [r5, #8]
 80037d8:	e7cf      	b.n	800377a <__swbuf_r+0x1a>
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <__swbuf_r+0xa0>)
 80037dc:	429c      	cmp	r4, r3
 80037de:	bf08      	it	eq
 80037e0:	68ec      	ldreq	r4, [r5, #12]
 80037e2:	e7ca      	b.n	800377a <__swbuf_r+0x1a>
 80037e4:	4621      	mov	r1, r4
 80037e6:	4628      	mov	r0, r5
 80037e8:	f000 f80c 	bl	8003804 <__swsetup_r>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d0cb      	beq.n	8003788 <__swbuf_r+0x28>
 80037f0:	f04f 37ff 	mov.w	r7, #4294967295
 80037f4:	e7ea      	b.n	80037cc <__swbuf_r+0x6c>
 80037f6:	bf00      	nop
 80037f8:	08004bf4 	.word	0x08004bf4
 80037fc:	08004c14 	.word	0x08004c14
 8003800:	08004bd4 	.word	0x08004bd4

08003804 <__swsetup_r>:
 8003804:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <__swsetup_r+0xcc>)
 8003806:	b570      	push	{r4, r5, r6, lr}
 8003808:	681d      	ldr	r5, [r3, #0]
 800380a:	4606      	mov	r6, r0
 800380c:	460c      	mov	r4, r1
 800380e:	b125      	cbz	r5, 800381a <__swsetup_r+0x16>
 8003810:	69ab      	ldr	r3, [r5, #24]
 8003812:	b913      	cbnz	r3, 800381a <__swsetup_r+0x16>
 8003814:	4628      	mov	r0, r5
 8003816:	f000 f979 	bl	8003b0c <__sinit>
 800381a:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <__swsetup_r+0xd0>)
 800381c:	429c      	cmp	r4, r3
 800381e:	d10f      	bne.n	8003840 <__swsetup_r+0x3c>
 8003820:	686c      	ldr	r4, [r5, #4]
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003828:	0719      	lsls	r1, r3, #28
 800382a:	d42c      	bmi.n	8003886 <__swsetup_r+0x82>
 800382c:	06dd      	lsls	r5, r3, #27
 800382e:	d411      	bmi.n	8003854 <__swsetup_r+0x50>
 8003830:	2309      	movs	r3, #9
 8003832:	6033      	str	r3, [r6, #0]
 8003834:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
 800383c:	81a3      	strh	r3, [r4, #12]
 800383e:	e03e      	b.n	80038be <__swsetup_r+0xba>
 8003840:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <__swsetup_r+0xd4>)
 8003842:	429c      	cmp	r4, r3
 8003844:	d101      	bne.n	800384a <__swsetup_r+0x46>
 8003846:	68ac      	ldr	r4, [r5, #8]
 8003848:	e7eb      	b.n	8003822 <__swsetup_r+0x1e>
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <__swsetup_r+0xd8>)
 800384c:	429c      	cmp	r4, r3
 800384e:	bf08      	it	eq
 8003850:	68ec      	ldreq	r4, [r5, #12]
 8003852:	e7e6      	b.n	8003822 <__swsetup_r+0x1e>
 8003854:	0758      	lsls	r0, r3, #29
 8003856:	d512      	bpl.n	800387e <__swsetup_r+0x7a>
 8003858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800385a:	b141      	cbz	r1, 800386e <__swsetup_r+0x6a>
 800385c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003860:	4299      	cmp	r1, r3
 8003862:	d002      	beq.n	800386a <__swsetup_r+0x66>
 8003864:	4630      	mov	r0, r6
 8003866:	f000 fa57 	bl	8003d18 <_free_r>
 800386a:	2300      	movs	r3, #0
 800386c:	6363      	str	r3, [r4, #52]	; 0x34
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	2300      	movs	r3, #0
 8003878:	6063      	str	r3, [r4, #4]
 800387a:	6923      	ldr	r3, [r4, #16]
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	89a3      	ldrh	r3, [r4, #12]
 8003880:	f043 0308 	orr.w	r3, r3, #8
 8003884:	81a3      	strh	r3, [r4, #12]
 8003886:	6923      	ldr	r3, [r4, #16]
 8003888:	b94b      	cbnz	r3, 800389e <__swsetup_r+0x9a>
 800388a:	89a3      	ldrh	r3, [r4, #12]
 800388c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003894:	d003      	beq.n	800389e <__swsetup_r+0x9a>
 8003896:	4621      	mov	r1, r4
 8003898:	4630      	mov	r0, r6
 800389a:	f000 f9fd 	bl	8003c98 <__smakebuf_r>
 800389e:	89a0      	ldrh	r0, [r4, #12]
 80038a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038a4:	f010 0301 	ands.w	r3, r0, #1
 80038a8:	d00a      	beq.n	80038c0 <__swsetup_r+0xbc>
 80038aa:	2300      	movs	r3, #0
 80038ac:	60a3      	str	r3, [r4, #8]
 80038ae:	6963      	ldr	r3, [r4, #20]
 80038b0:	425b      	negs	r3, r3
 80038b2:	61a3      	str	r3, [r4, #24]
 80038b4:	6923      	ldr	r3, [r4, #16]
 80038b6:	b943      	cbnz	r3, 80038ca <__swsetup_r+0xc6>
 80038b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038bc:	d1ba      	bne.n	8003834 <__swsetup_r+0x30>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	0781      	lsls	r1, r0, #30
 80038c2:	bf58      	it	pl
 80038c4:	6963      	ldrpl	r3, [r4, #20]
 80038c6:	60a3      	str	r3, [r4, #8]
 80038c8:	e7f4      	b.n	80038b4 <__swsetup_r+0xb0>
 80038ca:	2000      	movs	r0, #0
 80038cc:	e7f7      	b.n	80038be <__swsetup_r+0xba>
 80038ce:	bf00      	nop
 80038d0:	20000010 	.word	0x20000010
 80038d4:	08004bf4 	.word	0x08004bf4
 80038d8:	08004c14 	.word	0x08004c14
 80038dc:	08004bd4 	.word	0x08004bd4

080038e0 <__sflush_r>:
 80038e0:	898a      	ldrh	r2, [r1, #12]
 80038e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e4:	4605      	mov	r5, r0
 80038e6:	0710      	lsls	r0, r2, #28
 80038e8:	460c      	mov	r4, r1
 80038ea:	d457      	bmi.n	800399c <__sflush_r+0xbc>
 80038ec:	684b      	ldr	r3, [r1, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	dc04      	bgt.n	80038fc <__sflush_r+0x1c>
 80038f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	dc01      	bgt.n	80038fc <__sflush_r+0x1c>
 80038f8:	2000      	movs	r0, #0
 80038fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038fe:	2e00      	cmp	r6, #0
 8003900:	d0fa      	beq.n	80038f8 <__sflush_r+0x18>
 8003902:	2300      	movs	r3, #0
 8003904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003908:	682f      	ldr	r7, [r5, #0]
 800390a:	602b      	str	r3, [r5, #0]
 800390c:	d032      	beq.n	8003974 <__sflush_r+0x94>
 800390e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	075a      	lsls	r2, r3, #29
 8003914:	d505      	bpl.n	8003922 <__sflush_r+0x42>
 8003916:	6863      	ldr	r3, [r4, #4]
 8003918:	1ac0      	subs	r0, r0, r3
 800391a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800391c:	b10b      	cbz	r3, 8003922 <__sflush_r+0x42>
 800391e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003920:	1ac0      	subs	r0, r0, r3
 8003922:	2300      	movs	r3, #0
 8003924:	4602      	mov	r2, r0
 8003926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003928:	4628      	mov	r0, r5
 800392a:	6a21      	ldr	r1, [r4, #32]
 800392c:	47b0      	blx	r6
 800392e:	1c43      	adds	r3, r0, #1
 8003930:	89a3      	ldrh	r3, [r4, #12]
 8003932:	d106      	bne.n	8003942 <__sflush_r+0x62>
 8003934:	6829      	ldr	r1, [r5, #0]
 8003936:	291d      	cmp	r1, #29
 8003938:	d82c      	bhi.n	8003994 <__sflush_r+0xb4>
 800393a:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <__sflush_r+0x100>)
 800393c:	40ca      	lsrs	r2, r1
 800393e:	07d6      	lsls	r6, r2, #31
 8003940:	d528      	bpl.n	8003994 <__sflush_r+0xb4>
 8003942:	2200      	movs	r2, #0
 8003944:	6062      	str	r2, [r4, #4]
 8003946:	6922      	ldr	r2, [r4, #16]
 8003948:	04d9      	lsls	r1, r3, #19
 800394a:	6022      	str	r2, [r4, #0]
 800394c:	d504      	bpl.n	8003958 <__sflush_r+0x78>
 800394e:	1c42      	adds	r2, r0, #1
 8003950:	d101      	bne.n	8003956 <__sflush_r+0x76>
 8003952:	682b      	ldr	r3, [r5, #0]
 8003954:	b903      	cbnz	r3, 8003958 <__sflush_r+0x78>
 8003956:	6560      	str	r0, [r4, #84]	; 0x54
 8003958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800395a:	602f      	str	r7, [r5, #0]
 800395c:	2900      	cmp	r1, #0
 800395e:	d0cb      	beq.n	80038f8 <__sflush_r+0x18>
 8003960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003964:	4299      	cmp	r1, r3
 8003966:	d002      	beq.n	800396e <__sflush_r+0x8e>
 8003968:	4628      	mov	r0, r5
 800396a:	f000 f9d5 	bl	8003d18 <_free_r>
 800396e:	2000      	movs	r0, #0
 8003970:	6360      	str	r0, [r4, #52]	; 0x34
 8003972:	e7c2      	b.n	80038fa <__sflush_r+0x1a>
 8003974:	6a21      	ldr	r1, [r4, #32]
 8003976:	2301      	movs	r3, #1
 8003978:	4628      	mov	r0, r5
 800397a:	47b0      	blx	r6
 800397c:	1c41      	adds	r1, r0, #1
 800397e:	d1c7      	bne.n	8003910 <__sflush_r+0x30>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0c4      	beq.n	8003910 <__sflush_r+0x30>
 8003986:	2b1d      	cmp	r3, #29
 8003988:	d001      	beq.n	800398e <__sflush_r+0xae>
 800398a:	2b16      	cmp	r3, #22
 800398c:	d101      	bne.n	8003992 <__sflush_r+0xb2>
 800398e:	602f      	str	r7, [r5, #0]
 8003990:	e7b2      	b.n	80038f8 <__sflush_r+0x18>
 8003992:	89a3      	ldrh	r3, [r4, #12]
 8003994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003998:	81a3      	strh	r3, [r4, #12]
 800399a:	e7ae      	b.n	80038fa <__sflush_r+0x1a>
 800399c:	690f      	ldr	r7, [r1, #16]
 800399e:	2f00      	cmp	r7, #0
 80039a0:	d0aa      	beq.n	80038f8 <__sflush_r+0x18>
 80039a2:	0793      	lsls	r3, r2, #30
 80039a4:	bf18      	it	ne
 80039a6:	2300      	movne	r3, #0
 80039a8:	680e      	ldr	r6, [r1, #0]
 80039aa:	bf08      	it	eq
 80039ac:	694b      	ldreq	r3, [r1, #20]
 80039ae:	1bf6      	subs	r6, r6, r7
 80039b0:	600f      	str	r7, [r1, #0]
 80039b2:	608b      	str	r3, [r1, #8]
 80039b4:	2e00      	cmp	r6, #0
 80039b6:	dd9f      	ble.n	80038f8 <__sflush_r+0x18>
 80039b8:	4633      	mov	r3, r6
 80039ba:	463a      	mov	r2, r7
 80039bc:	4628      	mov	r0, r5
 80039be:	6a21      	ldr	r1, [r4, #32]
 80039c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80039c4:	47e0      	blx	ip
 80039c6:	2800      	cmp	r0, #0
 80039c8:	dc06      	bgt.n	80039d8 <__sflush_r+0xf8>
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d4:	81a3      	strh	r3, [r4, #12]
 80039d6:	e790      	b.n	80038fa <__sflush_r+0x1a>
 80039d8:	4407      	add	r7, r0
 80039da:	1a36      	subs	r6, r6, r0
 80039dc:	e7ea      	b.n	80039b4 <__sflush_r+0xd4>
 80039de:	bf00      	nop
 80039e0:	20400001 	.word	0x20400001

080039e4 <_fflush_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	690b      	ldr	r3, [r1, #16]
 80039e8:	4605      	mov	r5, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	b913      	cbnz	r3, 80039f4 <_fflush_r+0x10>
 80039ee:	2500      	movs	r5, #0
 80039f0:	4628      	mov	r0, r5
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	b118      	cbz	r0, 80039fe <_fflush_r+0x1a>
 80039f6:	6983      	ldr	r3, [r0, #24]
 80039f8:	b90b      	cbnz	r3, 80039fe <_fflush_r+0x1a>
 80039fa:	f000 f887 	bl	8003b0c <__sinit>
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <_fflush_r+0x6c>)
 8003a00:	429c      	cmp	r4, r3
 8003a02:	d11b      	bne.n	8003a3c <_fflush_r+0x58>
 8003a04:	686c      	ldr	r4, [r5, #4]
 8003a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ef      	beq.n	80039ee <_fflush_r+0xa>
 8003a0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a10:	07d0      	lsls	r0, r2, #31
 8003a12:	d404      	bmi.n	8003a1e <_fflush_r+0x3a>
 8003a14:	0599      	lsls	r1, r3, #22
 8003a16:	d402      	bmi.n	8003a1e <_fflush_r+0x3a>
 8003a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a1a:	f000 f915 	bl	8003c48 <__retarget_lock_acquire_recursive>
 8003a1e:	4628      	mov	r0, r5
 8003a20:	4621      	mov	r1, r4
 8003a22:	f7ff ff5d 	bl	80038e0 <__sflush_r>
 8003a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a28:	4605      	mov	r5, r0
 8003a2a:	07da      	lsls	r2, r3, #31
 8003a2c:	d4e0      	bmi.n	80039f0 <_fflush_r+0xc>
 8003a2e:	89a3      	ldrh	r3, [r4, #12]
 8003a30:	059b      	lsls	r3, r3, #22
 8003a32:	d4dd      	bmi.n	80039f0 <_fflush_r+0xc>
 8003a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a36:	f000 f908 	bl	8003c4a <__retarget_lock_release_recursive>
 8003a3a:	e7d9      	b.n	80039f0 <_fflush_r+0xc>
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <_fflush_r+0x70>)
 8003a3e:	429c      	cmp	r4, r3
 8003a40:	d101      	bne.n	8003a46 <_fflush_r+0x62>
 8003a42:	68ac      	ldr	r4, [r5, #8]
 8003a44:	e7df      	b.n	8003a06 <_fflush_r+0x22>
 8003a46:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <_fflush_r+0x74>)
 8003a48:	429c      	cmp	r4, r3
 8003a4a:	bf08      	it	eq
 8003a4c:	68ec      	ldreq	r4, [r5, #12]
 8003a4e:	e7da      	b.n	8003a06 <_fflush_r+0x22>
 8003a50:	08004bf4 	.word	0x08004bf4
 8003a54:	08004c14 	.word	0x08004c14
 8003a58:	08004bd4 	.word	0x08004bd4

08003a5c <std>:
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	b510      	push	{r4, lr}
 8003a60:	4604      	mov	r4, r0
 8003a62:	e9c0 3300 	strd	r3, r3, [r0]
 8003a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a6a:	6083      	str	r3, [r0, #8]
 8003a6c:	8181      	strh	r1, [r0, #12]
 8003a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8003a70:	81c2      	strh	r2, [r0, #14]
 8003a72:	6183      	str	r3, [r0, #24]
 8003a74:	4619      	mov	r1, r3
 8003a76:	2208      	movs	r2, #8
 8003a78:	305c      	adds	r0, #92	; 0x5c
 8003a7a:	f7ff fdbb 	bl	80035f4 <memset>
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <std+0x38>)
 8003a80:	6224      	str	r4, [r4, #32]
 8003a82:	6263      	str	r3, [r4, #36]	; 0x24
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <std+0x3c>)
 8003a86:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <std+0x40>)
 8003a8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <std+0x44>)
 8003a8e:	6323      	str	r3, [r4, #48]	; 0x30
 8003a90:	bd10      	pop	{r4, pc}
 8003a92:	bf00      	nop
 8003a94:	08004785 	.word	0x08004785
 8003a98:	080047a7 	.word	0x080047a7
 8003a9c:	080047df 	.word	0x080047df
 8003aa0:	08004803 	.word	0x08004803

08003aa4 <_cleanup_r>:
 8003aa4:	4901      	ldr	r1, [pc, #4]	; (8003aac <_cleanup_r+0x8>)
 8003aa6:	f000 b8af 	b.w	8003c08 <_fwalk_reent>
 8003aaa:	bf00      	nop
 8003aac:	080039e5 	.word	0x080039e5

08003ab0 <__sfmoreglue>:
 8003ab0:	2268      	movs	r2, #104	; 0x68
 8003ab2:	b570      	push	{r4, r5, r6, lr}
 8003ab4:	1e4d      	subs	r5, r1, #1
 8003ab6:	4355      	muls	r5, r2
 8003ab8:	460e      	mov	r6, r1
 8003aba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003abe:	f000 f993 	bl	8003de8 <_malloc_r>
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	b140      	cbz	r0, 8003ad8 <__sfmoreglue+0x28>
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	e9c0 1600 	strd	r1, r6, [r0]
 8003acc:	300c      	adds	r0, #12
 8003ace:	60a0      	str	r0, [r4, #8]
 8003ad0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ad4:	f7ff fd8e 	bl	80035f4 <memset>
 8003ad8:	4620      	mov	r0, r4
 8003ada:	bd70      	pop	{r4, r5, r6, pc}

08003adc <__sfp_lock_acquire>:
 8003adc:	4801      	ldr	r0, [pc, #4]	; (8003ae4 <__sfp_lock_acquire+0x8>)
 8003ade:	f000 b8b3 	b.w	8003c48 <__retarget_lock_acquire_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	200001b5 	.word	0x200001b5

08003ae8 <__sfp_lock_release>:
 8003ae8:	4801      	ldr	r0, [pc, #4]	; (8003af0 <__sfp_lock_release+0x8>)
 8003aea:	f000 b8ae 	b.w	8003c4a <__retarget_lock_release_recursive>
 8003aee:	bf00      	nop
 8003af0:	200001b5 	.word	0x200001b5

08003af4 <__sinit_lock_acquire>:
 8003af4:	4801      	ldr	r0, [pc, #4]	; (8003afc <__sinit_lock_acquire+0x8>)
 8003af6:	f000 b8a7 	b.w	8003c48 <__retarget_lock_acquire_recursive>
 8003afa:	bf00      	nop
 8003afc:	200001b6 	.word	0x200001b6

08003b00 <__sinit_lock_release>:
 8003b00:	4801      	ldr	r0, [pc, #4]	; (8003b08 <__sinit_lock_release+0x8>)
 8003b02:	f000 b8a2 	b.w	8003c4a <__retarget_lock_release_recursive>
 8003b06:	bf00      	nop
 8003b08:	200001b6 	.word	0x200001b6

08003b0c <__sinit>:
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	4604      	mov	r4, r0
 8003b10:	f7ff fff0 	bl	8003af4 <__sinit_lock_acquire>
 8003b14:	69a3      	ldr	r3, [r4, #24]
 8003b16:	b11b      	cbz	r3, 8003b20 <__sinit+0x14>
 8003b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b1c:	f7ff bff0 	b.w	8003b00 <__sinit_lock_release>
 8003b20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b24:	6523      	str	r3, [r4, #80]	; 0x50
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <__sinit+0x68>)
 8003b28:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <__sinit+0x6c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b2e:	42a3      	cmp	r3, r4
 8003b30:	bf08      	it	eq
 8003b32:	2301      	moveq	r3, #1
 8003b34:	4620      	mov	r0, r4
 8003b36:	bf08      	it	eq
 8003b38:	61a3      	streq	r3, [r4, #24]
 8003b3a:	f000 f81f 	bl	8003b7c <__sfp>
 8003b3e:	6060      	str	r0, [r4, #4]
 8003b40:	4620      	mov	r0, r4
 8003b42:	f000 f81b 	bl	8003b7c <__sfp>
 8003b46:	60a0      	str	r0, [r4, #8]
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f000 f817 	bl	8003b7c <__sfp>
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2104      	movs	r1, #4
 8003b52:	60e0      	str	r0, [r4, #12]
 8003b54:	6860      	ldr	r0, [r4, #4]
 8003b56:	f7ff ff81 	bl	8003a5c <std>
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	2109      	movs	r1, #9
 8003b5e:	68a0      	ldr	r0, [r4, #8]
 8003b60:	f7ff ff7c 	bl	8003a5c <std>
 8003b64:	2202      	movs	r2, #2
 8003b66:	2112      	movs	r1, #18
 8003b68:	68e0      	ldr	r0, [r4, #12]
 8003b6a:	f7ff ff77 	bl	8003a5c <std>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	61a3      	str	r3, [r4, #24]
 8003b72:	e7d1      	b.n	8003b18 <__sinit+0xc>
 8003b74:	08004bd0 	.word	0x08004bd0
 8003b78:	08003aa5 	.word	0x08003aa5

08003b7c <__sfp>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	4607      	mov	r7, r0
 8003b80:	f7ff ffac 	bl	8003adc <__sfp_lock_acquire>
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <__sfp+0x84>)
 8003b86:	681e      	ldr	r6, [r3, #0]
 8003b88:	69b3      	ldr	r3, [r6, #24]
 8003b8a:	b913      	cbnz	r3, 8003b92 <__sfp+0x16>
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f7ff ffbd 	bl	8003b0c <__sinit>
 8003b92:	3648      	adds	r6, #72	; 0x48
 8003b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	d503      	bpl.n	8003ba4 <__sfp+0x28>
 8003b9c:	6833      	ldr	r3, [r6, #0]
 8003b9e:	b30b      	cbz	r3, 8003be4 <__sfp+0x68>
 8003ba0:	6836      	ldr	r6, [r6, #0]
 8003ba2:	e7f7      	b.n	8003b94 <__sfp+0x18>
 8003ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ba8:	b9d5      	cbnz	r5, 8003be0 <__sfp+0x64>
 8003baa:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <__sfp+0x88>)
 8003bac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bb0:	60e3      	str	r3, [r4, #12]
 8003bb2:	6665      	str	r5, [r4, #100]	; 0x64
 8003bb4:	f000 f847 	bl	8003c46 <__retarget_lock_init_recursive>
 8003bb8:	f7ff ff96 	bl	8003ae8 <__sfp_lock_release>
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003bc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003bc8:	6025      	str	r5, [r4, #0]
 8003bca:	61a5      	str	r5, [r4, #24]
 8003bcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bd0:	f7ff fd10 	bl	80035f4 <memset>
 8003bd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bdc:	4620      	mov	r0, r4
 8003bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003be0:	3468      	adds	r4, #104	; 0x68
 8003be2:	e7d9      	b.n	8003b98 <__sfp+0x1c>
 8003be4:	2104      	movs	r1, #4
 8003be6:	4638      	mov	r0, r7
 8003be8:	f7ff ff62 	bl	8003ab0 <__sfmoreglue>
 8003bec:	4604      	mov	r4, r0
 8003bee:	6030      	str	r0, [r6, #0]
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d1d5      	bne.n	8003ba0 <__sfp+0x24>
 8003bf4:	f7ff ff78 	bl	8003ae8 <__sfp_lock_release>
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	e7ee      	b.n	8003bdc <__sfp+0x60>
 8003bfe:	bf00      	nop
 8003c00:	08004bd0 	.word	0x08004bd0
 8003c04:	ffff0001 	.word	0xffff0001

08003c08 <_fwalk_reent>:
 8003c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	4688      	mov	r8, r1
 8003c10:	2700      	movs	r7, #0
 8003c12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c1a:	f1b9 0901 	subs.w	r9, r9, #1
 8003c1e:	d505      	bpl.n	8003c2c <_fwalk_reent+0x24>
 8003c20:	6824      	ldr	r4, [r4, #0]
 8003c22:	2c00      	cmp	r4, #0
 8003c24:	d1f7      	bne.n	8003c16 <_fwalk_reent+0xe>
 8003c26:	4638      	mov	r0, r7
 8003c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c2c:	89ab      	ldrh	r3, [r5, #12]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d907      	bls.n	8003c42 <_fwalk_reent+0x3a>
 8003c32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c36:	3301      	adds	r3, #1
 8003c38:	d003      	beq.n	8003c42 <_fwalk_reent+0x3a>
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	47c0      	blx	r8
 8003c40:	4307      	orrs	r7, r0
 8003c42:	3568      	adds	r5, #104	; 0x68
 8003c44:	e7e9      	b.n	8003c1a <_fwalk_reent+0x12>

08003c46 <__retarget_lock_init_recursive>:
 8003c46:	4770      	bx	lr

08003c48 <__retarget_lock_acquire_recursive>:
 8003c48:	4770      	bx	lr

08003c4a <__retarget_lock_release_recursive>:
 8003c4a:	4770      	bx	lr

08003c4c <__swhatbuf_r>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	460e      	mov	r6, r1
 8003c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c54:	4614      	mov	r4, r2
 8003c56:	2900      	cmp	r1, #0
 8003c58:	461d      	mov	r5, r3
 8003c5a:	b096      	sub	sp, #88	; 0x58
 8003c5c:	da08      	bge.n	8003c70 <__swhatbuf_r+0x24>
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c64:	602a      	str	r2, [r5, #0]
 8003c66:	061a      	lsls	r2, r3, #24
 8003c68:	d410      	bmi.n	8003c8c <__swhatbuf_r+0x40>
 8003c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c6e:	e00e      	b.n	8003c8e <__swhatbuf_r+0x42>
 8003c70:	466a      	mov	r2, sp
 8003c72:	f000 fded 	bl	8004850 <_fstat_r>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	dbf1      	blt.n	8003c5e <__swhatbuf_r+0x12>
 8003c7a:	9a01      	ldr	r2, [sp, #4]
 8003c7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c84:	425a      	negs	r2, r3
 8003c86:	415a      	adcs	r2, r3
 8003c88:	602a      	str	r2, [r5, #0]
 8003c8a:	e7ee      	b.n	8003c6a <__swhatbuf_r+0x1e>
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	2000      	movs	r0, #0
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	b016      	add	sp, #88	; 0x58
 8003c94:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c98 <__smakebuf_r>:
 8003c98:	898b      	ldrh	r3, [r1, #12]
 8003c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c9c:	079d      	lsls	r5, r3, #30
 8003c9e:	4606      	mov	r6, r0
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	d507      	bpl.n	8003cb4 <__smakebuf_r+0x1c>
 8003ca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	6123      	str	r3, [r4, #16]
 8003cac:	2301      	movs	r3, #1
 8003cae:	6163      	str	r3, [r4, #20]
 8003cb0:	b002      	add	sp, #8
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	466a      	mov	r2, sp
 8003cb6:	ab01      	add	r3, sp, #4
 8003cb8:	f7ff ffc8 	bl	8003c4c <__swhatbuf_r>
 8003cbc:	9900      	ldr	r1, [sp, #0]
 8003cbe:	4605      	mov	r5, r0
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	f000 f891 	bl	8003de8 <_malloc_r>
 8003cc6:	b948      	cbnz	r0, 8003cdc <__smakebuf_r+0x44>
 8003cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ccc:	059a      	lsls	r2, r3, #22
 8003cce:	d4ef      	bmi.n	8003cb0 <__smakebuf_r+0x18>
 8003cd0:	f023 0303 	bic.w	r3, r3, #3
 8003cd4:	f043 0302 	orr.w	r3, r3, #2
 8003cd8:	81a3      	strh	r3, [r4, #12]
 8003cda:	e7e3      	b.n	8003ca4 <__smakebuf_r+0xc>
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <__smakebuf_r+0x7c>)
 8003cde:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	6020      	str	r0, [r4, #0]
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	81a3      	strh	r3, [r4, #12]
 8003cea:	9b00      	ldr	r3, [sp, #0]
 8003cec:	6120      	str	r0, [r4, #16]
 8003cee:	6163      	str	r3, [r4, #20]
 8003cf0:	9b01      	ldr	r3, [sp, #4]
 8003cf2:	b15b      	cbz	r3, 8003d0c <__smakebuf_r+0x74>
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cfa:	f000 fdbb 	bl	8004874 <_isatty_r>
 8003cfe:	b128      	cbz	r0, 8003d0c <__smakebuf_r+0x74>
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	81a3      	strh	r3, [r4, #12]
 8003d0c:	89a0      	ldrh	r0, [r4, #12]
 8003d0e:	4305      	orrs	r5, r0
 8003d10:	81a5      	strh	r5, [r4, #12]
 8003d12:	e7cd      	b.n	8003cb0 <__smakebuf_r+0x18>
 8003d14:	08003aa5 	.word	0x08003aa5

08003d18 <_free_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	4605      	mov	r5, r0
 8003d1c:	2900      	cmp	r1, #0
 8003d1e:	d040      	beq.n	8003da2 <_free_r+0x8a>
 8003d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d24:	1f0c      	subs	r4, r1, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bfb8      	it	lt
 8003d2a:	18e4      	addlt	r4, r4, r3
 8003d2c:	f000 fdfa 	bl	8004924 <__malloc_lock>
 8003d30:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <_free_r+0x8c>)
 8003d32:	6813      	ldr	r3, [r2, #0]
 8003d34:	b933      	cbnz	r3, 8003d44 <_free_r+0x2c>
 8003d36:	6063      	str	r3, [r4, #4]
 8003d38:	6014      	str	r4, [r2, #0]
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d40:	f000 bdf6 	b.w	8004930 <__malloc_unlock>
 8003d44:	42a3      	cmp	r3, r4
 8003d46:	d908      	bls.n	8003d5a <_free_r+0x42>
 8003d48:	6820      	ldr	r0, [r4, #0]
 8003d4a:	1821      	adds	r1, r4, r0
 8003d4c:	428b      	cmp	r3, r1
 8003d4e:	bf01      	itttt	eq
 8003d50:	6819      	ldreq	r1, [r3, #0]
 8003d52:	685b      	ldreq	r3, [r3, #4]
 8003d54:	1809      	addeq	r1, r1, r0
 8003d56:	6021      	streq	r1, [r4, #0]
 8003d58:	e7ed      	b.n	8003d36 <_free_r+0x1e>
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	b10b      	cbz	r3, 8003d64 <_free_r+0x4c>
 8003d60:	42a3      	cmp	r3, r4
 8003d62:	d9fa      	bls.n	8003d5a <_free_r+0x42>
 8003d64:	6811      	ldr	r1, [r2, #0]
 8003d66:	1850      	adds	r0, r2, r1
 8003d68:	42a0      	cmp	r0, r4
 8003d6a:	d10b      	bne.n	8003d84 <_free_r+0x6c>
 8003d6c:	6820      	ldr	r0, [r4, #0]
 8003d6e:	4401      	add	r1, r0
 8003d70:	1850      	adds	r0, r2, r1
 8003d72:	4283      	cmp	r3, r0
 8003d74:	6011      	str	r1, [r2, #0]
 8003d76:	d1e0      	bne.n	8003d3a <_free_r+0x22>
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4401      	add	r1, r0
 8003d7e:	6011      	str	r1, [r2, #0]
 8003d80:	6053      	str	r3, [r2, #4]
 8003d82:	e7da      	b.n	8003d3a <_free_r+0x22>
 8003d84:	d902      	bls.n	8003d8c <_free_r+0x74>
 8003d86:	230c      	movs	r3, #12
 8003d88:	602b      	str	r3, [r5, #0]
 8003d8a:	e7d6      	b.n	8003d3a <_free_r+0x22>
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	1821      	adds	r1, r4, r0
 8003d90:	428b      	cmp	r3, r1
 8003d92:	bf01      	itttt	eq
 8003d94:	6819      	ldreq	r1, [r3, #0]
 8003d96:	685b      	ldreq	r3, [r3, #4]
 8003d98:	1809      	addeq	r1, r1, r0
 8003d9a:	6021      	streq	r1, [r4, #0]
 8003d9c:	6063      	str	r3, [r4, #4]
 8003d9e:	6054      	str	r4, [r2, #4]
 8003da0:	e7cb      	b.n	8003d3a <_free_r+0x22>
 8003da2:	bd38      	pop	{r3, r4, r5, pc}
 8003da4:	200001b8 	.word	0x200001b8

08003da8 <sbrk_aligned>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4e0e      	ldr	r6, [pc, #56]	; (8003de4 <sbrk_aligned+0x3c>)
 8003dac:	460c      	mov	r4, r1
 8003dae:	6831      	ldr	r1, [r6, #0]
 8003db0:	4605      	mov	r5, r0
 8003db2:	b911      	cbnz	r1, 8003dba <sbrk_aligned+0x12>
 8003db4:	f000 fcd6 	bl	8004764 <_sbrk_r>
 8003db8:	6030      	str	r0, [r6, #0]
 8003dba:	4621      	mov	r1, r4
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 fcd1 	bl	8004764 <_sbrk_r>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d00a      	beq.n	8003ddc <sbrk_aligned+0x34>
 8003dc6:	1cc4      	adds	r4, r0, #3
 8003dc8:	f024 0403 	bic.w	r4, r4, #3
 8003dcc:	42a0      	cmp	r0, r4
 8003dce:	d007      	beq.n	8003de0 <sbrk_aligned+0x38>
 8003dd0:	1a21      	subs	r1, r4, r0
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 fcc6 	bl	8004764 <_sbrk_r>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d101      	bne.n	8003de0 <sbrk_aligned+0x38>
 8003ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8003de0:	4620      	mov	r0, r4
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	200001bc 	.word	0x200001bc

08003de8 <_malloc_r>:
 8003de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dec:	1ccd      	adds	r5, r1, #3
 8003dee:	f025 0503 	bic.w	r5, r5, #3
 8003df2:	3508      	adds	r5, #8
 8003df4:	2d0c      	cmp	r5, #12
 8003df6:	bf38      	it	cc
 8003df8:	250c      	movcc	r5, #12
 8003dfa:	2d00      	cmp	r5, #0
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	db01      	blt.n	8003e04 <_malloc_r+0x1c>
 8003e00:	42a9      	cmp	r1, r5
 8003e02:	d905      	bls.n	8003e10 <_malloc_r+0x28>
 8003e04:	230c      	movs	r3, #12
 8003e06:	2600      	movs	r6, #0
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e10:	4e2e      	ldr	r6, [pc, #184]	; (8003ecc <_malloc_r+0xe4>)
 8003e12:	f000 fd87 	bl	8004924 <__malloc_lock>
 8003e16:	6833      	ldr	r3, [r6, #0]
 8003e18:	461c      	mov	r4, r3
 8003e1a:	bb34      	cbnz	r4, 8003e6a <_malloc_r+0x82>
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	4638      	mov	r0, r7
 8003e20:	f7ff ffc2 	bl	8003da8 <sbrk_aligned>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	4604      	mov	r4, r0
 8003e28:	d14d      	bne.n	8003ec6 <_malloc_r+0xde>
 8003e2a:	6834      	ldr	r4, [r6, #0]
 8003e2c:	4626      	mov	r6, r4
 8003e2e:	2e00      	cmp	r6, #0
 8003e30:	d140      	bne.n	8003eb4 <_malloc_r+0xcc>
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	4631      	mov	r1, r6
 8003e36:	4638      	mov	r0, r7
 8003e38:	eb04 0803 	add.w	r8, r4, r3
 8003e3c:	f000 fc92 	bl	8004764 <_sbrk_r>
 8003e40:	4580      	cmp	r8, r0
 8003e42:	d13a      	bne.n	8003eba <_malloc_r+0xd2>
 8003e44:	6821      	ldr	r1, [r4, #0]
 8003e46:	3503      	adds	r5, #3
 8003e48:	1a6d      	subs	r5, r5, r1
 8003e4a:	f025 0503 	bic.w	r5, r5, #3
 8003e4e:	3508      	adds	r5, #8
 8003e50:	2d0c      	cmp	r5, #12
 8003e52:	bf38      	it	cc
 8003e54:	250c      	movcc	r5, #12
 8003e56:	4638      	mov	r0, r7
 8003e58:	4629      	mov	r1, r5
 8003e5a:	f7ff ffa5 	bl	8003da8 <sbrk_aligned>
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d02b      	beq.n	8003eba <_malloc_r+0xd2>
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	442b      	add	r3, r5
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	e00e      	b.n	8003e88 <_malloc_r+0xa0>
 8003e6a:	6822      	ldr	r2, [r4, #0]
 8003e6c:	1b52      	subs	r2, r2, r5
 8003e6e:	d41e      	bmi.n	8003eae <_malloc_r+0xc6>
 8003e70:	2a0b      	cmp	r2, #11
 8003e72:	d916      	bls.n	8003ea2 <_malloc_r+0xba>
 8003e74:	1961      	adds	r1, r4, r5
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	6025      	str	r5, [r4, #0]
 8003e7a:	bf18      	it	ne
 8003e7c:	6059      	strne	r1, [r3, #4]
 8003e7e:	6863      	ldr	r3, [r4, #4]
 8003e80:	bf08      	it	eq
 8003e82:	6031      	streq	r1, [r6, #0]
 8003e84:	5162      	str	r2, [r4, r5]
 8003e86:	604b      	str	r3, [r1, #4]
 8003e88:	4638      	mov	r0, r7
 8003e8a:	f104 060b 	add.w	r6, r4, #11
 8003e8e:	f000 fd4f 	bl	8004930 <__malloc_unlock>
 8003e92:	f026 0607 	bic.w	r6, r6, #7
 8003e96:	1d23      	adds	r3, r4, #4
 8003e98:	1af2      	subs	r2, r6, r3
 8003e9a:	d0b6      	beq.n	8003e0a <_malloc_r+0x22>
 8003e9c:	1b9b      	subs	r3, r3, r6
 8003e9e:	50a3      	str	r3, [r4, r2]
 8003ea0:	e7b3      	b.n	8003e0a <_malloc_r+0x22>
 8003ea2:	6862      	ldr	r2, [r4, #4]
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	bf0c      	ite	eq
 8003ea8:	6032      	streq	r2, [r6, #0]
 8003eaa:	605a      	strne	r2, [r3, #4]
 8003eac:	e7ec      	b.n	8003e88 <_malloc_r+0xa0>
 8003eae:	4623      	mov	r3, r4
 8003eb0:	6864      	ldr	r4, [r4, #4]
 8003eb2:	e7b2      	b.n	8003e1a <_malloc_r+0x32>
 8003eb4:	4634      	mov	r4, r6
 8003eb6:	6876      	ldr	r6, [r6, #4]
 8003eb8:	e7b9      	b.n	8003e2e <_malloc_r+0x46>
 8003eba:	230c      	movs	r3, #12
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	f000 fd36 	bl	8004930 <__malloc_unlock>
 8003ec4:	e7a1      	b.n	8003e0a <_malloc_r+0x22>
 8003ec6:	6025      	str	r5, [r4, #0]
 8003ec8:	e7de      	b.n	8003e88 <_malloc_r+0xa0>
 8003eca:	bf00      	nop
 8003ecc:	200001b8 	.word	0x200001b8

08003ed0 <__ssputs_r>:
 8003ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed4:	688e      	ldr	r6, [r1, #8]
 8003ed6:	4682      	mov	sl, r0
 8003ed8:	429e      	cmp	r6, r3
 8003eda:	460c      	mov	r4, r1
 8003edc:	4690      	mov	r8, r2
 8003ede:	461f      	mov	r7, r3
 8003ee0:	d838      	bhi.n	8003f54 <__ssputs_r+0x84>
 8003ee2:	898a      	ldrh	r2, [r1, #12]
 8003ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ee8:	d032      	beq.n	8003f50 <__ssputs_r+0x80>
 8003eea:	6825      	ldr	r5, [r4, #0]
 8003eec:	6909      	ldr	r1, [r1, #16]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	eba5 0901 	sub.w	r9, r5, r1
 8003ef4:	6965      	ldr	r5, [r4, #20]
 8003ef6:	444b      	add	r3, r9
 8003ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003efc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f00:	106d      	asrs	r5, r5, #1
 8003f02:	429d      	cmp	r5, r3
 8003f04:	bf38      	it	cc
 8003f06:	461d      	movcc	r5, r3
 8003f08:	0553      	lsls	r3, r2, #21
 8003f0a:	d531      	bpl.n	8003f70 <__ssputs_r+0xa0>
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	f7ff ff6b 	bl	8003de8 <_malloc_r>
 8003f12:	4606      	mov	r6, r0
 8003f14:	b950      	cbnz	r0, 8003f2c <__ssputs_r+0x5c>
 8003f16:	230c      	movs	r3, #12
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	f8ca 3000 	str.w	r3, [sl]
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2c:	464a      	mov	r2, r9
 8003f2e:	6921      	ldr	r1, [r4, #16]
 8003f30:	f000 fcd0 	bl	80048d4 <memcpy>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3e:	81a3      	strh	r3, [r4, #12]
 8003f40:	6126      	str	r6, [r4, #16]
 8003f42:	444e      	add	r6, r9
 8003f44:	6026      	str	r6, [r4, #0]
 8003f46:	463e      	mov	r6, r7
 8003f48:	6165      	str	r5, [r4, #20]
 8003f4a:	eba5 0509 	sub.w	r5, r5, r9
 8003f4e:	60a5      	str	r5, [r4, #8]
 8003f50:	42be      	cmp	r6, r7
 8003f52:	d900      	bls.n	8003f56 <__ssputs_r+0x86>
 8003f54:	463e      	mov	r6, r7
 8003f56:	4632      	mov	r2, r6
 8003f58:	4641      	mov	r1, r8
 8003f5a:	6820      	ldr	r0, [r4, #0]
 8003f5c:	f000 fcc8 	bl	80048f0 <memmove>
 8003f60:	68a3      	ldr	r3, [r4, #8]
 8003f62:	2000      	movs	r0, #0
 8003f64:	1b9b      	subs	r3, r3, r6
 8003f66:	60a3      	str	r3, [r4, #8]
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	4433      	add	r3, r6
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	e7db      	b.n	8003f28 <__ssputs_r+0x58>
 8003f70:	462a      	mov	r2, r5
 8003f72:	f000 fce3 	bl	800493c <_realloc_r>
 8003f76:	4606      	mov	r6, r0
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d1e1      	bne.n	8003f40 <__ssputs_r+0x70>
 8003f7c:	4650      	mov	r0, sl
 8003f7e:	6921      	ldr	r1, [r4, #16]
 8003f80:	f7ff feca 	bl	8003d18 <_free_r>
 8003f84:	e7c7      	b.n	8003f16 <__ssputs_r+0x46>
	...

08003f88 <_svfiprintf_r>:
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	4698      	mov	r8, r3
 8003f8e:	898b      	ldrh	r3, [r1, #12]
 8003f90:	4607      	mov	r7, r0
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	460d      	mov	r5, r1
 8003f96:	4614      	mov	r4, r2
 8003f98:	b09d      	sub	sp, #116	; 0x74
 8003f9a:	d50e      	bpl.n	8003fba <_svfiprintf_r+0x32>
 8003f9c:	690b      	ldr	r3, [r1, #16]
 8003f9e:	b963      	cbnz	r3, 8003fba <_svfiprintf_r+0x32>
 8003fa0:	2140      	movs	r1, #64	; 0x40
 8003fa2:	f7ff ff21 	bl	8003de8 <_malloc_r>
 8003fa6:	6028      	str	r0, [r5, #0]
 8003fa8:	6128      	str	r0, [r5, #16]
 8003faa:	b920      	cbnz	r0, 8003fb6 <_svfiprintf_r+0x2e>
 8003fac:	230c      	movs	r3, #12
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb4:	e0d1      	b.n	800415a <_svfiprintf_r+0x1d2>
 8003fb6:	2340      	movs	r3, #64	; 0x40
 8003fb8:	616b      	str	r3, [r5, #20]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fc4:	2330      	movs	r3, #48	; 0x30
 8003fc6:	f04f 0901 	mov.w	r9, #1
 8003fca:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004174 <_svfiprintf_r+0x1ec>
 8003fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	469a      	mov	sl, r3
 8003fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fde:	b10a      	cbz	r2, 8003fe4 <_svfiprintf_r+0x5c>
 8003fe0:	2a25      	cmp	r2, #37	; 0x25
 8003fe2:	d1f9      	bne.n	8003fd8 <_svfiprintf_r+0x50>
 8003fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8003fe8:	d00b      	beq.n	8004002 <_svfiprintf_r+0x7a>
 8003fea:	465b      	mov	r3, fp
 8003fec:	4622      	mov	r2, r4
 8003fee:	4629      	mov	r1, r5
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	f7ff ff6d 	bl	8003ed0 <__ssputs_r>
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	f000 80aa 	beq.w	8004150 <_svfiprintf_r+0x1c8>
 8003ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ffe:	445a      	add	r2, fp
 8004000:	9209      	str	r2, [sp, #36]	; 0x24
 8004002:	f89a 3000 	ldrb.w	r3, [sl]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 80a2 	beq.w	8004150 <_svfiprintf_r+0x1c8>
 800400c:	2300      	movs	r3, #0
 800400e:	f04f 32ff 	mov.w	r2, #4294967295
 8004012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004016:	f10a 0a01 	add.w	sl, sl, #1
 800401a:	9304      	str	r3, [sp, #16]
 800401c:	9307      	str	r3, [sp, #28]
 800401e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004022:	931a      	str	r3, [sp, #104]	; 0x68
 8004024:	4654      	mov	r4, sl
 8004026:	2205      	movs	r2, #5
 8004028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402c:	4851      	ldr	r0, [pc, #324]	; (8004174 <_svfiprintf_r+0x1ec>)
 800402e:	f000 fc43 	bl	80048b8 <memchr>
 8004032:	9a04      	ldr	r2, [sp, #16]
 8004034:	b9d8      	cbnz	r0, 800406e <_svfiprintf_r+0xe6>
 8004036:	06d0      	lsls	r0, r2, #27
 8004038:	bf44      	itt	mi
 800403a:	2320      	movmi	r3, #32
 800403c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004040:	0711      	lsls	r1, r2, #28
 8004042:	bf44      	itt	mi
 8004044:	232b      	movmi	r3, #43	; 0x2b
 8004046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800404a:	f89a 3000 	ldrb.w	r3, [sl]
 800404e:	2b2a      	cmp	r3, #42	; 0x2a
 8004050:	d015      	beq.n	800407e <_svfiprintf_r+0xf6>
 8004052:	4654      	mov	r4, sl
 8004054:	2000      	movs	r0, #0
 8004056:	f04f 0c0a 	mov.w	ip, #10
 800405a:	9a07      	ldr	r2, [sp, #28]
 800405c:	4621      	mov	r1, r4
 800405e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004062:	3b30      	subs	r3, #48	; 0x30
 8004064:	2b09      	cmp	r3, #9
 8004066:	d94e      	bls.n	8004106 <_svfiprintf_r+0x17e>
 8004068:	b1b0      	cbz	r0, 8004098 <_svfiprintf_r+0x110>
 800406a:	9207      	str	r2, [sp, #28]
 800406c:	e014      	b.n	8004098 <_svfiprintf_r+0x110>
 800406e:	eba0 0308 	sub.w	r3, r0, r8
 8004072:	fa09 f303 	lsl.w	r3, r9, r3
 8004076:	4313      	orrs	r3, r2
 8004078:	46a2      	mov	sl, r4
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	e7d2      	b.n	8004024 <_svfiprintf_r+0x9c>
 800407e:	9b03      	ldr	r3, [sp, #12]
 8004080:	1d19      	adds	r1, r3, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	9103      	str	r1, [sp, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	bfbb      	ittet	lt
 800408a:	425b      	neglt	r3, r3
 800408c:	f042 0202 	orrlt.w	r2, r2, #2
 8004090:	9307      	strge	r3, [sp, #28]
 8004092:	9307      	strlt	r3, [sp, #28]
 8004094:	bfb8      	it	lt
 8004096:	9204      	strlt	r2, [sp, #16]
 8004098:	7823      	ldrb	r3, [r4, #0]
 800409a:	2b2e      	cmp	r3, #46	; 0x2e
 800409c:	d10c      	bne.n	80040b8 <_svfiprintf_r+0x130>
 800409e:	7863      	ldrb	r3, [r4, #1]
 80040a0:	2b2a      	cmp	r3, #42	; 0x2a
 80040a2:	d135      	bne.n	8004110 <_svfiprintf_r+0x188>
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	3402      	adds	r4, #2
 80040a8:	1d1a      	adds	r2, r3, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	9203      	str	r2, [sp, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bfb8      	it	lt
 80040b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80040b6:	9305      	str	r3, [sp, #20]
 80040b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004178 <_svfiprintf_r+0x1f0>
 80040bc:	2203      	movs	r2, #3
 80040be:	4650      	mov	r0, sl
 80040c0:	7821      	ldrb	r1, [r4, #0]
 80040c2:	f000 fbf9 	bl	80048b8 <memchr>
 80040c6:	b140      	cbz	r0, 80040da <_svfiprintf_r+0x152>
 80040c8:	2340      	movs	r3, #64	; 0x40
 80040ca:	eba0 000a 	sub.w	r0, r0, sl
 80040ce:	fa03 f000 	lsl.w	r0, r3, r0
 80040d2:	9b04      	ldr	r3, [sp, #16]
 80040d4:	3401      	adds	r4, #1
 80040d6:	4303      	orrs	r3, r0
 80040d8:	9304      	str	r3, [sp, #16]
 80040da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040de:	2206      	movs	r2, #6
 80040e0:	4826      	ldr	r0, [pc, #152]	; (800417c <_svfiprintf_r+0x1f4>)
 80040e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040e6:	f000 fbe7 	bl	80048b8 <memchr>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d038      	beq.n	8004160 <_svfiprintf_r+0x1d8>
 80040ee:	4b24      	ldr	r3, [pc, #144]	; (8004180 <_svfiprintf_r+0x1f8>)
 80040f0:	bb1b      	cbnz	r3, 800413a <_svfiprintf_r+0x1b2>
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	3307      	adds	r3, #7
 80040f6:	f023 0307 	bic.w	r3, r3, #7
 80040fa:	3308      	adds	r3, #8
 80040fc:	9303      	str	r3, [sp, #12]
 80040fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004100:	4433      	add	r3, r6
 8004102:	9309      	str	r3, [sp, #36]	; 0x24
 8004104:	e767      	b.n	8003fd6 <_svfiprintf_r+0x4e>
 8004106:	460c      	mov	r4, r1
 8004108:	2001      	movs	r0, #1
 800410a:	fb0c 3202 	mla	r2, ip, r2, r3
 800410e:	e7a5      	b.n	800405c <_svfiprintf_r+0xd4>
 8004110:	2300      	movs	r3, #0
 8004112:	f04f 0c0a 	mov.w	ip, #10
 8004116:	4619      	mov	r1, r3
 8004118:	3401      	adds	r4, #1
 800411a:	9305      	str	r3, [sp, #20]
 800411c:	4620      	mov	r0, r4
 800411e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004122:	3a30      	subs	r2, #48	; 0x30
 8004124:	2a09      	cmp	r2, #9
 8004126:	d903      	bls.n	8004130 <_svfiprintf_r+0x1a8>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0c5      	beq.n	80040b8 <_svfiprintf_r+0x130>
 800412c:	9105      	str	r1, [sp, #20]
 800412e:	e7c3      	b.n	80040b8 <_svfiprintf_r+0x130>
 8004130:	4604      	mov	r4, r0
 8004132:	2301      	movs	r3, #1
 8004134:	fb0c 2101 	mla	r1, ip, r1, r2
 8004138:	e7f0      	b.n	800411c <_svfiprintf_r+0x194>
 800413a:	ab03      	add	r3, sp, #12
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	462a      	mov	r2, r5
 8004140:	4638      	mov	r0, r7
 8004142:	4b10      	ldr	r3, [pc, #64]	; (8004184 <_svfiprintf_r+0x1fc>)
 8004144:	a904      	add	r1, sp, #16
 8004146:	f3af 8000 	nop.w
 800414a:	1c42      	adds	r2, r0, #1
 800414c:	4606      	mov	r6, r0
 800414e:	d1d6      	bne.n	80040fe <_svfiprintf_r+0x176>
 8004150:	89ab      	ldrh	r3, [r5, #12]
 8004152:	065b      	lsls	r3, r3, #25
 8004154:	f53f af2c 	bmi.w	8003fb0 <_svfiprintf_r+0x28>
 8004158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800415a:	b01d      	add	sp, #116	; 0x74
 800415c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004160:	ab03      	add	r3, sp, #12
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	462a      	mov	r2, r5
 8004166:	4638      	mov	r0, r7
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <_svfiprintf_r+0x1fc>)
 800416a:	a904      	add	r1, sp, #16
 800416c:	f000 f9d4 	bl	8004518 <_printf_i>
 8004170:	e7eb      	b.n	800414a <_svfiprintf_r+0x1c2>
 8004172:	bf00      	nop
 8004174:	08004c34 	.word	0x08004c34
 8004178:	08004c3a 	.word	0x08004c3a
 800417c:	08004c3e 	.word	0x08004c3e
 8004180:	00000000 	.word	0x00000000
 8004184:	08003ed1 	.word	0x08003ed1

08004188 <__sfputc_r>:
 8004188:	6893      	ldr	r3, [r2, #8]
 800418a:	b410      	push	{r4}
 800418c:	3b01      	subs	r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	6093      	str	r3, [r2, #8]
 8004192:	da07      	bge.n	80041a4 <__sfputc_r+0x1c>
 8004194:	6994      	ldr	r4, [r2, #24]
 8004196:	42a3      	cmp	r3, r4
 8004198:	db01      	blt.n	800419e <__sfputc_r+0x16>
 800419a:	290a      	cmp	r1, #10
 800419c:	d102      	bne.n	80041a4 <__sfputc_r+0x1c>
 800419e:	bc10      	pop	{r4}
 80041a0:	f7ff bade 	b.w	8003760 <__swbuf_r>
 80041a4:	6813      	ldr	r3, [r2, #0]
 80041a6:	1c58      	adds	r0, r3, #1
 80041a8:	6010      	str	r0, [r2, #0]
 80041aa:	7019      	strb	r1, [r3, #0]
 80041ac:	4608      	mov	r0, r1
 80041ae:	bc10      	pop	{r4}
 80041b0:	4770      	bx	lr

080041b2 <__sfputs_r>:
 80041b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b4:	4606      	mov	r6, r0
 80041b6:	460f      	mov	r7, r1
 80041b8:	4614      	mov	r4, r2
 80041ba:	18d5      	adds	r5, r2, r3
 80041bc:	42ac      	cmp	r4, r5
 80041be:	d101      	bne.n	80041c4 <__sfputs_r+0x12>
 80041c0:	2000      	movs	r0, #0
 80041c2:	e007      	b.n	80041d4 <__sfputs_r+0x22>
 80041c4:	463a      	mov	r2, r7
 80041c6:	4630      	mov	r0, r6
 80041c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041cc:	f7ff ffdc 	bl	8004188 <__sfputc_r>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d1f3      	bne.n	80041bc <__sfputs_r+0xa>
 80041d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041d8 <_vfiprintf_r>:
 80041d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041dc:	460d      	mov	r5, r1
 80041de:	4614      	mov	r4, r2
 80041e0:	4698      	mov	r8, r3
 80041e2:	4606      	mov	r6, r0
 80041e4:	b09d      	sub	sp, #116	; 0x74
 80041e6:	b118      	cbz	r0, 80041f0 <_vfiprintf_r+0x18>
 80041e8:	6983      	ldr	r3, [r0, #24]
 80041ea:	b90b      	cbnz	r3, 80041f0 <_vfiprintf_r+0x18>
 80041ec:	f7ff fc8e 	bl	8003b0c <__sinit>
 80041f0:	4b89      	ldr	r3, [pc, #548]	; (8004418 <_vfiprintf_r+0x240>)
 80041f2:	429d      	cmp	r5, r3
 80041f4:	d11b      	bne.n	800422e <_vfiprintf_r+0x56>
 80041f6:	6875      	ldr	r5, [r6, #4]
 80041f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041fa:	07d9      	lsls	r1, r3, #31
 80041fc:	d405      	bmi.n	800420a <_vfiprintf_r+0x32>
 80041fe:	89ab      	ldrh	r3, [r5, #12]
 8004200:	059a      	lsls	r2, r3, #22
 8004202:	d402      	bmi.n	800420a <_vfiprintf_r+0x32>
 8004204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004206:	f7ff fd1f 	bl	8003c48 <__retarget_lock_acquire_recursive>
 800420a:	89ab      	ldrh	r3, [r5, #12]
 800420c:	071b      	lsls	r3, r3, #28
 800420e:	d501      	bpl.n	8004214 <_vfiprintf_r+0x3c>
 8004210:	692b      	ldr	r3, [r5, #16]
 8004212:	b9eb      	cbnz	r3, 8004250 <_vfiprintf_r+0x78>
 8004214:	4629      	mov	r1, r5
 8004216:	4630      	mov	r0, r6
 8004218:	f7ff faf4 	bl	8003804 <__swsetup_r>
 800421c:	b1c0      	cbz	r0, 8004250 <_vfiprintf_r+0x78>
 800421e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004220:	07dc      	lsls	r4, r3, #31
 8004222:	d50e      	bpl.n	8004242 <_vfiprintf_r+0x6a>
 8004224:	f04f 30ff 	mov.w	r0, #4294967295
 8004228:	b01d      	add	sp, #116	; 0x74
 800422a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422e:	4b7b      	ldr	r3, [pc, #492]	; (800441c <_vfiprintf_r+0x244>)
 8004230:	429d      	cmp	r5, r3
 8004232:	d101      	bne.n	8004238 <_vfiprintf_r+0x60>
 8004234:	68b5      	ldr	r5, [r6, #8]
 8004236:	e7df      	b.n	80041f8 <_vfiprintf_r+0x20>
 8004238:	4b79      	ldr	r3, [pc, #484]	; (8004420 <_vfiprintf_r+0x248>)
 800423a:	429d      	cmp	r5, r3
 800423c:	bf08      	it	eq
 800423e:	68f5      	ldreq	r5, [r6, #12]
 8004240:	e7da      	b.n	80041f8 <_vfiprintf_r+0x20>
 8004242:	89ab      	ldrh	r3, [r5, #12]
 8004244:	0598      	lsls	r0, r3, #22
 8004246:	d4ed      	bmi.n	8004224 <_vfiprintf_r+0x4c>
 8004248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800424a:	f7ff fcfe 	bl	8003c4a <__retarget_lock_release_recursive>
 800424e:	e7e9      	b.n	8004224 <_vfiprintf_r+0x4c>
 8004250:	2300      	movs	r3, #0
 8004252:	9309      	str	r3, [sp, #36]	; 0x24
 8004254:	2320      	movs	r3, #32
 8004256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800425a:	2330      	movs	r3, #48	; 0x30
 800425c:	f04f 0901 	mov.w	r9, #1
 8004260:	f8cd 800c 	str.w	r8, [sp, #12]
 8004264:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004424 <_vfiprintf_r+0x24c>
 8004268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800426c:	4623      	mov	r3, r4
 800426e:	469a      	mov	sl, r3
 8004270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004274:	b10a      	cbz	r2, 800427a <_vfiprintf_r+0xa2>
 8004276:	2a25      	cmp	r2, #37	; 0x25
 8004278:	d1f9      	bne.n	800426e <_vfiprintf_r+0x96>
 800427a:	ebba 0b04 	subs.w	fp, sl, r4
 800427e:	d00b      	beq.n	8004298 <_vfiprintf_r+0xc0>
 8004280:	465b      	mov	r3, fp
 8004282:	4622      	mov	r2, r4
 8004284:	4629      	mov	r1, r5
 8004286:	4630      	mov	r0, r6
 8004288:	f7ff ff93 	bl	80041b2 <__sfputs_r>
 800428c:	3001      	adds	r0, #1
 800428e:	f000 80aa 	beq.w	80043e6 <_vfiprintf_r+0x20e>
 8004292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004294:	445a      	add	r2, fp
 8004296:	9209      	str	r2, [sp, #36]	; 0x24
 8004298:	f89a 3000 	ldrb.w	r3, [sl]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80a2 	beq.w	80043e6 <_vfiprintf_r+0x20e>
 80042a2:	2300      	movs	r3, #0
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ac:	f10a 0a01 	add.w	sl, sl, #1
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	9307      	str	r3, [sp, #28]
 80042b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042b8:	931a      	str	r3, [sp, #104]	; 0x68
 80042ba:	4654      	mov	r4, sl
 80042bc:	2205      	movs	r2, #5
 80042be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c2:	4858      	ldr	r0, [pc, #352]	; (8004424 <_vfiprintf_r+0x24c>)
 80042c4:	f000 faf8 	bl	80048b8 <memchr>
 80042c8:	9a04      	ldr	r2, [sp, #16]
 80042ca:	b9d8      	cbnz	r0, 8004304 <_vfiprintf_r+0x12c>
 80042cc:	06d1      	lsls	r1, r2, #27
 80042ce:	bf44      	itt	mi
 80042d0:	2320      	movmi	r3, #32
 80042d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042d6:	0713      	lsls	r3, r2, #28
 80042d8:	bf44      	itt	mi
 80042da:	232b      	movmi	r3, #43	; 0x2b
 80042dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042e0:	f89a 3000 	ldrb.w	r3, [sl]
 80042e4:	2b2a      	cmp	r3, #42	; 0x2a
 80042e6:	d015      	beq.n	8004314 <_vfiprintf_r+0x13c>
 80042e8:	4654      	mov	r4, sl
 80042ea:	2000      	movs	r0, #0
 80042ec:	f04f 0c0a 	mov.w	ip, #10
 80042f0:	9a07      	ldr	r2, [sp, #28]
 80042f2:	4621      	mov	r1, r4
 80042f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042f8:	3b30      	subs	r3, #48	; 0x30
 80042fa:	2b09      	cmp	r3, #9
 80042fc:	d94e      	bls.n	800439c <_vfiprintf_r+0x1c4>
 80042fe:	b1b0      	cbz	r0, 800432e <_vfiprintf_r+0x156>
 8004300:	9207      	str	r2, [sp, #28]
 8004302:	e014      	b.n	800432e <_vfiprintf_r+0x156>
 8004304:	eba0 0308 	sub.w	r3, r0, r8
 8004308:	fa09 f303 	lsl.w	r3, r9, r3
 800430c:	4313      	orrs	r3, r2
 800430e:	46a2      	mov	sl, r4
 8004310:	9304      	str	r3, [sp, #16]
 8004312:	e7d2      	b.n	80042ba <_vfiprintf_r+0xe2>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	1d19      	adds	r1, r3, #4
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	9103      	str	r1, [sp, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	bfbb      	ittet	lt
 8004320:	425b      	neglt	r3, r3
 8004322:	f042 0202 	orrlt.w	r2, r2, #2
 8004326:	9307      	strge	r3, [sp, #28]
 8004328:	9307      	strlt	r3, [sp, #28]
 800432a:	bfb8      	it	lt
 800432c:	9204      	strlt	r2, [sp, #16]
 800432e:	7823      	ldrb	r3, [r4, #0]
 8004330:	2b2e      	cmp	r3, #46	; 0x2e
 8004332:	d10c      	bne.n	800434e <_vfiprintf_r+0x176>
 8004334:	7863      	ldrb	r3, [r4, #1]
 8004336:	2b2a      	cmp	r3, #42	; 0x2a
 8004338:	d135      	bne.n	80043a6 <_vfiprintf_r+0x1ce>
 800433a:	9b03      	ldr	r3, [sp, #12]
 800433c:	3402      	adds	r4, #2
 800433e:	1d1a      	adds	r2, r3, #4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	9203      	str	r2, [sp, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	bfb8      	it	lt
 8004348:	f04f 33ff 	movlt.w	r3, #4294967295
 800434c:	9305      	str	r3, [sp, #20]
 800434e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004428 <_vfiprintf_r+0x250>
 8004352:	2203      	movs	r2, #3
 8004354:	4650      	mov	r0, sl
 8004356:	7821      	ldrb	r1, [r4, #0]
 8004358:	f000 faae 	bl	80048b8 <memchr>
 800435c:	b140      	cbz	r0, 8004370 <_vfiprintf_r+0x198>
 800435e:	2340      	movs	r3, #64	; 0x40
 8004360:	eba0 000a 	sub.w	r0, r0, sl
 8004364:	fa03 f000 	lsl.w	r0, r3, r0
 8004368:	9b04      	ldr	r3, [sp, #16]
 800436a:	3401      	adds	r4, #1
 800436c:	4303      	orrs	r3, r0
 800436e:	9304      	str	r3, [sp, #16]
 8004370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004374:	2206      	movs	r2, #6
 8004376:	482d      	ldr	r0, [pc, #180]	; (800442c <_vfiprintf_r+0x254>)
 8004378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800437c:	f000 fa9c 	bl	80048b8 <memchr>
 8004380:	2800      	cmp	r0, #0
 8004382:	d03f      	beq.n	8004404 <_vfiprintf_r+0x22c>
 8004384:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <_vfiprintf_r+0x258>)
 8004386:	bb1b      	cbnz	r3, 80043d0 <_vfiprintf_r+0x1f8>
 8004388:	9b03      	ldr	r3, [sp, #12]
 800438a:	3307      	adds	r3, #7
 800438c:	f023 0307 	bic.w	r3, r3, #7
 8004390:	3308      	adds	r3, #8
 8004392:	9303      	str	r3, [sp, #12]
 8004394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004396:	443b      	add	r3, r7
 8004398:	9309      	str	r3, [sp, #36]	; 0x24
 800439a:	e767      	b.n	800426c <_vfiprintf_r+0x94>
 800439c:	460c      	mov	r4, r1
 800439e:	2001      	movs	r0, #1
 80043a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80043a4:	e7a5      	b.n	80042f2 <_vfiprintf_r+0x11a>
 80043a6:	2300      	movs	r3, #0
 80043a8:	f04f 0c0a 	mov.w	ip, #10
 80043ac:	4619      	mov	r1, r3
 80043ae:	3401      	adds	r4, #1
 80043b0:	9305      	str	r3, [sp, #20]
 80043b2:	4620      	mov	r0, r4
 80043b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043b8:	3a30      	subs	r2, #48	; 0x30
 80043ba:	2a09      	cmp	r2, #9
 80043bc:	d903      	bls.n	80043c6 <_vfiprintf_r+0x1ee>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0c5      	beq.n	800434e <_vfiprintf_r+0x176>
 80043c2:	9105      	str	r1, [sp, #20]
 80043c4:	e7c3      	b.n	800434e <_vfiprintf_r+0x176>
 80043c6:	4604      	mov	r4, r0
 80043c8:	2301      	movs	r3, #1
 80043ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80043ce:	e7f0      	b.n	80043b2 <_vfiprintf_r+0x1da>
 80043d0:	ab03      	add	r3, sp, #12
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	462a      	mov	r2, r5
 80043d6:	4630      	mov	r0, r6
 80043d8:	4b16      	ldr	r3, [pc, #88]	; (8004434 <_vfiprintf_r+0x25c>)
 80043da:	a904      	add	r1, sp, #16
 80043dc:	f3af 8000 	nop.w
 80043e0:	4607      	mov	r7, r0
 80043e2:	1c78      	adds	r0, r7, #1
 80043e4:	d1d6      	bne.n	8004394 <_vfiprintf_r+0x1bc>
 80043e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043e8:	07d9      	lsls	r1, r3, #31
 80043ea:	d405      	bmi.n	80043f8 <_vfiprintf_r+0x220>
 80043ec:	89ab      	ldrh	r3, [r5, #12]
 80043ee:	059a      	lsls	r2, r3, #22
 80043f0:	d402      	bmi.n	80043f8 <_vfiprintf_r+0x220>
 80043f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043f4:	f7ff fc29 	bl	8003c4a <__retarget_lock_release_recursive>
 80043f8:	89ab      	ldrh	r3, [r5, #12]
 80043fa:	065b      	lsls	r3, r3, #25
 80043fc:	f53f af12 	bmi.w	8004224 <_vfiprintf_r+0x4c>
 8004400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004402:	e711      	b.n	8004228 <_vfiprintf_r+0x50>
 8004404:	ab03      	add	r3, sp, #12
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	462a      	mov	r2, r5
 800440a:	4630      	mov	r0, r6
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <_vfiprintf_r+0x25c>)
 800440e:	a904      	add	r1, sp, #16
 8004410:	f000 f882 	bl	8004518 <_printf_i>
 8004414:	e7e4      	b.n	80043e0 <_vfiprintf_r+0x208>
 8004416:	bf00      	nop
 8004418:	08004bf4 	.word	0x08004bf4
 800441c:	08004c14 	.word	0x08004c14
 8004420:	08004bd4 	.word	0x08004bd4
 8004424:	08004c34 	.word	0x08004c34
 8004428:	08004c3a 	.word	0x08004c3a
 800442c:	08004c3e 	.word	0x08004c3e
 8004430:	00000000 	.word	0x00000000
 8004434:	080041b3 	.word	0x080041b3

08004438 <_printf_common>:
 8004438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	4616      	mov	r6, r2
 800443e:	4699      	mov	r9, r3
 8004440:	688a      	ldr	r2, [r1, #8]
 8004442:	690b      	ldr	r3, [r1, #16]
 8004444:	4607      	mov	r7, r0
 8004446:	4293      	cmp	r3, r2
 8004448:	bfb8      	it	lt
 800444a:	4613      	movlt	r3, r2
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004452:	460c      	mov	r4, r1
 8004454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004458:	b10a      	cbz	r2, 800445e <_printf_common+0x26>
 800445a:	3301      	adds	r3, #1
 800445c:	6033      	str	r3, [r6, #0]
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	0699      	lsls	r1, r3, #26
 8004462:	bf42      	ittt	mi
 8004464:	6833      	ldrmi	r3, [r6, #0]
 8004466:	3302      	addmi	r3, #2
 8004468:	6033      	strmi	r3, [r6, #0]
 800446a:	6825      	ldr	r5, [r4, #0]
 800446c:	f015 0506 	ands.w	r5, r5, #6
 8004470:	d106      	bne.n	8004480 <_printf_common+0x48>
 8004472:	f104 0a19 	add.w	sl, r4, #25
 8004476:	68e3      	ldr	r3, [r4, #12]
 8004478:	6832      	ldr	r2, [r6, #0]
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	42ab      	cmp	r3, r5
 800447e:	dc28      	bgt.n	80044d2 <_printf_common+0x9a>
 8004480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004484:	1e13      	subs	r3, r2, #0
 8004486:	6822      	ldr	r2, [r4, #0]
 8004488:	bf18      	it	ne
 800448a:	2301      	movne	r3, #1
 800448c:	0692      	lsls	r2, r2, #26
 800448e:	d42d      	bmi.n	80044ec <_printf_common+0xb4>
 8004490:	4649      	mov	r1, r9
 8004492:	4638      	mov	r0, r7
 8004494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004498:	47c0      	blx	r8
 800449a:	3001      	adds	r0, #1
 800449c:	d020      	beq.n	80044e0 <_printf_common+0xa8>
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	68e5      	ldr	r5, [r4, #12]
 80044a2:	f003 0306 	and.w	r3, r3, #6
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	bf18      	it	ne
 80044aa:	2500      	movne	r5, #0
 80044ac:	6832      	ldr	r2, [r6, #0]
 80044ae:	f04f 0600 	mov.w	r6, #0
 80044b2:	68a3      	ldr	r3, [r4, #8]
 80044b4:	bf08      	it	eq
 80044b6:	1aad      	subeq	r5, r5, r2
 80044b8:	6922      	ldr	r2, [r4, #16]
 80044ba:	bf08      	it	eq
 80044bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044c0:	4293      	cmp	r3, r2
 80044c2:	bfc4      	itt	gt
 80044c4:	1a9b      	subgt	r3, r3, r2
 80044c6:	18ed      	addgt	r5, r5, r3
 80044c8:	341a      	adds	r4, #26
 80044ca:	42b5      	cmp	r5, r6
 80044cc:	d11a      	bne.n	8004504 <_printf_common+0xcc>
 80044ce:	2000      	movs	r0, #0
 80044d0:	e008      	b.n	80044e4 <_printf_common+0xac>
 80044d2:	2301      	movs	r3, #1
 80044d4:	4652      	mov	r2, sl
 80044d6:	4649      	mov	r1, r9
 80044d8:	4638      	mov	r0, r7
 80044da:	47c0      	blx	r8
 80044dc:	3001      	adds	r0, #1
 80044de:	d103      	bne.n	80044e8 <_printf_common+0xb0>
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e8:	3501      	adds	r5, #1
 80044ea:	e7c4      	b.n	8004476 <_printf_common+0x3e>
 80044ec:	2030      	movs	r0, #48	; 0x30
 80044ee:	18e1      	adds	r1, r4, r3
 80044f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044fa:	4422      	add	r2, r4
 80044fc:	3302      	adds	r3, #2
 80044fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004502:	e7c5      	b.n	8004490 <_printf_common+0x58>
 8004504:	2301      	movs	r3, #1
 8004506:	4622      	mov	r2, r4
 8004508:	4649      	mov	r1, r9
 800450a:	4638      	mov	r0, r7
 800450c:	47c0      	blx	r8
 800450e:	3001      	adds	r0, #1
 8004510:	d0e6      	beq.n	80044e0 <_printf_common+0xa8>
 8004512:	3601      	adds	r6, #1
 8004514:	e7d9      	b.n	80044ca <_printf_common+0x92>
	...

08004518 <_printf_i>:
 8004518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	7e0f      	ldrb	r7, [r1, #24]
 800451e:	4691      	mov	r9, r2
 8004520:	2f78      	cmp	r7, #120	; 0x78
 8004522:	4680      	mov	r8, r0
 8004524:	460c      	mov	r4, r1
 8004526:	469a      	mov	sl, r3
 8004528:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800452a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800452e:	d807      	bhi.n	8004540 <_printf_i+0x28>
 8004530:	2f62      	cmp	r7, #98	; 0x62
 8004532:	d80a      	bhi.n	800454a <_printf_i+0x32>
 8004534:	2f00      	cmp	r7, #0
 8004536:	f000 80d9 	beq.w	80046ec <_printf_i+0x1d4>
 800453a:	2f58      	cmp	r7, #88	; 0x58
 800453c:	f000 80a4 	beq.w	8004688 <_printf_i+0x170>
 8004540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004548:	e03a      	b.n	80045c0 <_printf_i+0xa8>
 800454a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800454e:	2b15      	cmp	r3, #21
 8004550:	d8f6      	bhi.n	8004540 <_printf_i+0x28>
 8004552:	a101      	add	r1, pc, #4	; (adr r1, 8004558 <_printf_i+0x40>)
 8004554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004558:	080045b1 	.word	0x080045b1
 800455c:	080045c5 	.word	0x080045c5
 8004560:	08004541 	.word	0x08004541
 8004564:	08004541 	.word	0x08004541
 8004568:	08004541 	.word	0x08004541
 800456c:	08004541 	.word	0x08004541
 8004570:	080045c5 	.word	0x080045c5
 8004574:	08004541 	.word	0x08004541
 8004578:	08004541 	.word	0x08004541
 800457c:	08004541 	.word	0x08004541
 8004580:	08004541 	.word	0x08004541
 8004584:	080046d3 	.word	0x080046d3
 8004588:	080045f5 	.word	0x080045f5
 800458c:	080046b5 	.word	0x080046b5
 8004590:	08004541 	.word	0x08004541
 8004594:	08004541 	.word	0x08004541
 8004598:	080046f5 	.word	0x080046f5
 800459c:	08004541 	.word	0x08004541
 80045a0:	080045f5 	.word	0x080045f5
 80045a4:	08004541 	.word	0x08004541
 80045a8:	08004541 	.word	0x08004541
 80045ac:	080046bd 	.word	0x080046bd
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	1d1a      	adds	r2, r3, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	602a      	str	r2, [r5, #0]
 80045b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0a4      	b.n	800470e <_printf_i+0x1f6>
 80045c4:	6820      	ldr	r0, [r4, #0]
 80045c6:	6829      	ldr	r1, [r5, #0]
 80045c8:	0606      	lsls	r6, r0, #24
 80045ca:	f101 0304 	add.w	r3, r1, #4
 80045ce:	d50a      	bpl.n	80045e6 <_printf_i+0xce>
 80045d0:	680e      	ldr	r6, [r1, #0]
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	2e00      	cmp	r6, #0
 80045d6:	da03      	bge.n	80045e0 <_printf_i+0xc8>
 80045d8:	232d      	movs	r3, #45	; 0x2d
 80045da:	4276      	negs	r6, r6
 80045dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e0:	230a      	movs	r3, #10
 80045e2:	485e      	ldr	r0, [pc, #376]	; (800475c <_printf_i+0x244>)
 80045e4:	e019      	b.n	800461a <_printf_i+0x102>
 80045e6:	680e      	ldr	r6, [r1, #0]
 80045e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045ec:	602b      	str	r3, [r5, #0]
 80045ee:	bf18      	it	ne
 80045f0:	b236      	sxthne	r6, r6
 80045f2:	e7ef      	b.n	80045d4 <_printf_i+0xbc>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	6820      	ldr	r0, [r4, #0]
 80045f8:	1d19      	adds	r1, r3, #4
 80045fa:	6029      	str	r1, [r5, #0]
 80045fc:	0601      	lsls	r1, r0, #24
 80045fe:	d501      	bpl.n	8004604 <_printf_i+0xec>
 8004600:	681e      	ldr	r6, [r3, #0]
 8004602:	e002      	b.n	800460a <_printf_i+0xf2>
 8004604:	0646      	lsls	r6, r0, #25
 8004606:	d5fb      	bpl.n	8004600 <_printf_i+0xe8>
 8004608:	881e      	ldrh	r6, [r3, #0]
 800460a:	2f6f      	cmp	r7, #111	; 0x6f
 800460c:	bf0c      	ite	eq
 800460e:	2308      	moveq	r3, #8
 8004610:	230a      	movne	r3, #10
 8004612:	4852      	ldr	r0, [pc, #328]	; (800475c <_printf_i+0x244>)
 8004614:	2100      	movs	r1, #0
 8004616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800461a:	6865      	ldr	r5, [r4, #4]
 800461c:	2d00      	cmp	r5, #0
 800461e:	bfa8      	it	ge
 8004620:	6821      	ldrge	r1, [r4, #0]
 8004622:	60a5      	str	r5, [r4, #8]
 8004624:	bfa4      	itt	ge
 8004626:	f021 0104 	bicge.w	r1, r1, #4
 800462a:	6021      	strge	r1, [r4, #0]
 800462c:	b90e      	cbnz	r6, 8004632 <_printf_i+0x11a>
 800462e:	2d00      	cmp	r5, #0
 8004630:	d04d      	beq.n	80046ce <_printf_i+0x1b6>
 8004632:	4615      	mov	r5, r2
 8004634:	fbb6 f1f3 	udiv	r1, r6, r3
 8004638:	fb03 6711 	mls	r7, r3, r1, r6
 800463c:	5dc7      	ldrb	r7, [r0, r7]
 800463e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004642:	4637      	mov	r7, r6
 8004644:	42bb      	cmp	r3, r7
 8004646:	460e      	mov	r6, r1
 8004648:	d9f4      	bls.n	8004634 <_printf_i+0x11c>
 800464a:	2b08      	cmp	r3, #8
 800464c:	d10b      	bne.n	8004666 <_printf_i+0x14e>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	07de      	lsls	r6, r3, #31
 8004652:	d508      	bpl.n	8004666 <_printf_i+0x14e>
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	6861      	ldr	r1, [r4, #4]
 8004658:	4299      	cmp	r1, r3
 800465a:	bfde      	ittt	le
 800465c:	2330      	movle	r3, #48	; 0x30
 800465e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004662:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004666:	1b52      	subs	r2, r2, r5
 8004668:	6122      	str	r2, [r4, #16]
 800466a:	464b      	mov	r3, r9
 800466c:	4621      	mov	r1, r4
 800466e:	4640      	mov	r0, r8
 8004670:	f8cd a000 	str.w	sl, [sp]
 8004674:	aa03      	add	r2, sp, #12
 8004676:	f7ff fedf 	bl	8004438 <_printf_common>
 800467a:	3001      	adds	r0, #1
 800467c:	d14c      	bne.n	8004718 <_printf_i+0x200>
 800467e:	f04f 30ff 	mov.w	r0, #4294967295
 8004682:	b004      	add	sp, #16
 8004684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004688:	4834      	ldr	r0, [pc, #208]	; (800475c <_printf_i+0x244>)
 800468a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800468e:	6829      	ldr	r1, [r5, #0]
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	f851 6b04 	ldr.w	r6, [r1], #4
 8004696:	6029      	str	r1, [r5, #0]
 8004698:	061d      	lsls	r5, r3, #24
 800469a:	d514      	bpl.n	80046c6 <_printf_i+0x1ae>
 800469c:	07df      	lsls	r7, r3, #31
 800469e:	bf44      	itt	mi
 80046a0:	f043 0320 	orrmi.w	r3, r3, #32
 80046a4:	6023      	strmi	r3, [r4, #0]
 80046a6:	b91e      	cbnz	r6, 80046b0 <_printf_i+0x198>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	f023 0320 	bic.w	r3, r3, #32
 80046ae:	6023      	str	r3, [r4, #0]
 80046b0:	2310      	movs	r3, #16
 80046b2:	e7af      	b.n	8004614 <_printf_i+0xfc>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	2378      	movs	r3, #120	; 0x78
 80046be:	4828      	ldr	r0, [pc, #160]	; (8004760 <_printf_i+0x248>)
 80046c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046c4:	e7e3      	b.n	800468e <_printf_i+0x176>
 80046c6:	0659      	lsls	r1, r3, #25
 80046c8:	bf48      	it	mi
 80046ca:	b2b6      	uxthmi	r6, r6
 80046cc:	e7e6      	b.n	800469c <_printf_i+0x184>
 80046ce:	4615      	mov	r5, r2
 80046d0:	e7bb      	b.n	800464a <_printf_i+0x132>
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	6826      	ldr	r6, [r4, #0]
 80046d6:	1d18      	adds	r0, r3, #4
 80046d8:	6961      	ldr	r1, [r4, #20]
 80046da:	6028      	str	r0, [r5, #0]
 80046dc:	0635      	lsls	r5, r6, #24
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	d501      	bpl.n	80046e6 <_printf_i+0x1ce>
 80046e2:	6019      	str	r1, [r3, #0]
 80046e4:	e002      	b.n	80046ec <_printf_i+0x1d4>
 80046e6:	0670      	lsls	r0, r6, #25
 80046e8:	d5fb      	bpl.n	80046e2 <_printf_i+0x1ca>
 80046ea:	8019      	strh	r1, [r3, #0]
 80046ec:	2300      	movs	r3, #0
 80046ee:	4615      	mov	r5, r2
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	e7ba      	b.n	800466a <_printf_i+0x152>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	2100      	movs	r1, #0
 80046f8:	1d1a      	adds	r2, r3, #4
 80046fa:	602a      	str	r2, [r5, #0]
 80046fc:	681d      	ldr	r5, [r3, #0]
 80046fe:	6862      	ldr	r2, [r4, #4]
 8004700:	4628      	mov	r0, r5
 8004702:	f000 f8d9 	bl	80048b8 <memchr>
 8004706:	b108      	cbz	r0, 800470c <_printf_i+0x1f4>
 8004708:	1b40      	subs	r0, r0, r5
 800470a:	6060      	str	r0, [r4, #4]
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	6123      	str	r3, [r4, #16]
 8004710:	2300      	movs	r3, #0
 8004712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004716:	e7a8      	b.n	800466a <_printf_i+0x152>
 8004718:	462a      	mov	r2, r5
 800471a:	4649      	mov	r1, r9
 800471c:	4640      	mov	r0, r8
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	47d0      	blx	sl
 8004722:	3001      	adds	r0, #1
 8004724:	d0ab      	beq.n	800467e <_printf_i+0x166>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	079b      	lsls	r3, r3, #30
 800472a:	d413      	bmi.n	8004754 <_printf_i+0x23c>
 800472c:	68e0      	ldr	r0, [r4, #12]
 800472e:	9b03      	ldr	r3, [sp, #12]
 8004730:	4298      	cmp	r0, r3
 8004732:	bfb8      	it	lt
 8004734:	4618      	movlt	r0, r3
 8004736:	e7a4      	b.n	8004682 <_printf_i+0x16a>
 8004738:	2301      	movs	r3, #1
 800473a:	4632      	mov	r2, r6
 800473c:	4649      	mov	r1, r9
 800473e:	4640      	mov	r0, r8
 8004740:	47d0      	blx	sl
 8004742:	3001      	adds	r0, #1
 8004744:	d09b      	beq.n	800467e <_printf_i+0x166>
 8004746:	3501      	adds	r5, #1
 8004748:	68e3      	ldr	r3, [r4, #12]
 800474a:	9903      	ldr	r1, [sp, #12]
 800474c:	1a5b      	subs	r3, r3, r1
 800474e:	42ab      	cmp	r3, r5
 8004750:	dcf2      	bgt.n	8004738 <_printf_i+0x220>
 8004752:	e7eb      	b.n	800472c <_printf_i+0x214>
 8004754:	2500      	movs	r5, #0
 8004756:	f104 0619 	add.w	r6, r4, #25
 800475a:	e7f5      	b.n	8004748 <_printf_i+0x230>
 800475c:	08004c45 	.word	0x08004c45
 8004760:	08004c56 	.word	0x08004c56

08004764 <_sbrk_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	2300      	movs	r3, #0
 8004768:	4d05      	ldr	r5, [pc, #20]	; (8004780 <_sbrk_r+0x1c>)
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	f7fd f87a 	bl	8001868 <_sbrk>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_sbrk_r+0x1a>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_sbrk_r+0x1a>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	200001c0 	.word	0x200001c0

08004784 <__sread>:
 8004784:	b510      	push	{r4, lr}
 8004786:	460c      	mov	r4, r1
 8004788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800478c:	f000 f906 	bl	800499c <_read_r>
 8004790:	2800      	cmp	r0, #0
 8004792:	bfab      	itete	ge
 8004794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004796:	89a3      	ldrhlt	r3, [r4, #12]
 8004798:	181b      	addge	r3, r3, r0
 800479a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800479e:	bfac      	ite	ge
 80047a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80047a2:	81a3      	strhlt	r3, [r4, #12]
 80047a4:	bd10      	pop	{r4, pc}

080047a6 <__swrite>:
 80047a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047aa:	461f      	mov	r7, r3
 80047ac:	898b      	ldrh	r3, [r1, #12]
 80047ae:	4605      	mov	r5, r0
 80047b0:	05db      	lsls	r3, r3, #23
 80047b2:	460c      	mov	r4, r1
 80047b4:	4616      	mov	r6, r2
 80047b6:	d505      	bpl.n	80047c4 <__swrite+0x1e>
 80047b8:	2302      	movs	r3, #2
 80047ba:	2200      	movs	r2, #0
 80047bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c0:	f000 f868 	bl	8004894 <_lseek_r>
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	4632      	mov	r2, r6
 80047c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	4628      	mov	r0, r5
 80047d0:	463b      	mov	r3, r7
 80047d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047da:	f000 b817 	b.w	800480c <_write_r>

080047de <__sseek>:
 80047de:	b510      	push	{r4, lr}
 80047e0:	460c      	mov	r4, r1
 80047e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e6:	f000 f855 	bl	8004894 <_lseek_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	bf15      	itete	ne
 80047f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80047f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047fa:	81a3      	strheq	r3, [r4, #12]
 80047fc:	bf18      	it	ne
 80047fe:	81a3      	strhne	r3, [r4, #12]
 8004800:	bd10      	pop	{r4, pc}

08004802 <__sclose>:
 8004802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004806:	f000 b813 	b.w	8004830 <_close_r>
	...

0800480c <_write_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4604      	mov	r4, r0
 8004810:	4608      	mov	r0, r1
 8004812:	4611      	mov	r1, r2
 8004814:	2200      	movs	r2, #0
 8004816:	4d05      	ldr	r5, [pc, #20]	; (800482c <_write_r+0x20>)
 8004818:	602a      	str	r2, [r5, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	f7fc ffd8 	bl	80017d0 <_write>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d102      	bne.n	800482a <_write_r+0x1e>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	b103      	cbz	r3, 800482a <_write_r+0x1e>
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	bd38      	pop	{r3, r4, r5, pc}
 800482c:	200001c0 	.word	0x200001c0

08004830 <_close_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	2300      	movs	r3, #0
 8004834:	4d05      	ldr	r5, [pc, #20]	; (800484c <_close_r+0x1c>)
 8004836:	4604      	mov	r4, r0
 8004838:	4608      	mov	r0, r1
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	f7fc ffe4 	bl	8001808 <_close>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_close_r+0x1a>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_close_r+0x1a>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	200001c0 	.word	0x200001c0

08004850 <_fstat_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	2300      	movs	r3, #0
 8004854:	4d06      	ldr	r5, [pc, #24]	; (8004870 <_fstat_r+0x20>)
 8004856:	4604      	mov	r4, r0
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	602b      	str	r3, [r5, #0]
 800485e:	f7fc ffde 	bl	800181e <_fstat>
 8004862:	1c43      	adds	r3, r0, #1
 8004864:	d102      	bne.n	800486c <_fstat_r+0x1c>
 8004866:	682b      	ldr	r3, [r5, #0]
 8004868:	b103      	cbz	r3, 800486c <_fstat_r+0x1c>
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	bd38      	pop	{r3, r4, r5, pc}
 800486e:	bf00      	nop
 8004870:	200001c0 	.word	0x200001c0

08004874 <_isatty_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	2300      	movs	r3, #0
 8004878:	4d05      	ldr	r5, [pc, #20]	; (8004890 <_isatty_r+0x1c>)
 800487a:	4604      	mov	r4, r0
 800487c:	4608      	mov	r0, r1
 800487e:	602b      	str	r3, [r5, #0]
 8004880:	f7fc ffdc 	bl	800183c <_isatty>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_isatty_r+0x1a>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b103      	cbz	r3, 800488e <_isatty_r+0x1a>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	200001c0 	.word	0x200001c0

08004894 <_lseek_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	2200      	movs	r2, #0
 800489e:	4d05      	ldr	r5, [pc, #20]	; (80048b4 <_lseek_r+0x20>)
 80048a0:	602a      	str	r2, [r5, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f7fc ffd4 	bl	8001850 <_lseek>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d102      	bne.n	80048b2 <_lseek_r+0x1e>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	b103      	cbz	r3, 80048b2 <_lseek_r+0x1e>
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	200001c0 	.word	0x200001c0

080048b8 <memchr>:
 80048b8:	4603      	mov	r3, r0
 80048ba:	b510      	push	{r4, lr}
 80048bc:	b2c9      	uxtb	r1, r1
 80048be:	4402      	add	r2, r0
 80048c0:	4293      	cmp	r3, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	d101      	bne.n	80048ca <memchr+0x12>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e003      	b.n	80048d2 <memchr+0x1a>
 80048ca:	7804      	ldrb	r4, [r0, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	428c      	cmp	r4, r1
 80048d0:	d1f6      	bne.n	80048c0 <memchr+0x8>
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <memcpy>:
 80048d4:	440a      	add	r2, r1
 80048d6:	4291      	cmp	r1, r2
 80048d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048dc:	d100      	bne.n	80048e0 <memcpy+0xc>
 80048de:	4770      	bx	lr
 80048e0:	b510      	push	{r4, lr}
 80048e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048e6:	4291      	cmp	r1, r2
 80048e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ec:	d1f9      	bne.n	80048e2 <memcpy+0xe>
 80048ee:	bd10      	pop	{r4, pc}

080048f0 <memmove>:
 80048f0:	4288      	cmp	r0, r1
 80048f2:	b510      	push	{r4, lr}
 80048f4:	eb01 0402 	add.w	r4, r1, r2
 80048f8:	d902      	bls.n	8004900 <memmove+0x10>
 80048fa:	4284      	cmp	r4, r0
 80048fc:	4623      	mov	r3, r4
 80048fe:	d807      	bhi.n	8004910 <memmove+0x20>
 8004900:	1e43      	subs	r3, r0, #1
 8004902:	42a1      	cmp	r1, r4
 8004904:	d008      	beq.n	8004918 <memmove+0x28>
 8004906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800490a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800490e:	e7f8      	b.n	8004902 <memmove+0x12>
 8004910:	4601      	mov	r1, r0
 8004912:	4402      	add	r2, r0
 8004914:	428a      	cmp	r2, r1
 8004916:	d100      	bne.n	800491a <memmove+0x2a>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800491e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004922:	e7f7      	b.n	8004914 <memmove+0x24>

08004924 <__malloc_lock>:
 8004924:	4801      	ldr	r0, [pc, #4]	; (800492c <__malloc_lock+0x8>)
 8004926:	f7ff b98f 	b.w	8003c48 <__retarget_lock_acquire_recursive>
 800492a:	bf00      	nop
 800492c:	200001b4 	.word	0x200001b4

08004930 <__malloc_unlock>:
 8004930:	4801      	ldr	r0, [pc, #4]	; (8004938 <__malloc_unlock+0x8>)
 8004932:	f7ff b98a 	b.w	8003c4a <__retarget_lock_release_recursive>
 8004936:	bf00      	nop
 8004938:	200001b4 	.word	0x200001b4

0800493c <_realloc_r>:
 800493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004940:	4680      	mov	r8, r0
 8004942:	4614      	mov	r4, r2
 8004944:	460e      	mov	r6, r1
 8004946:	b921      	cbnz	r1, 8004952 <_realloc_r+0x16>
 8004948:	4611      	mov	r1, r2
 800494a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800494e:	f7ff ba4b 	b.w	8003de8 <_malloc_r>
 8004952:	b92a      	cbnz	r2, 8004960 <_realloc_r+0x24>
 8004954:	f7ff f9e0 	bl	8003d18 <_free_r>
 8004958:	4625      	mov	r5, r4
 800495a:	4628      	mov	r0, r5
 800495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004960:	f000 f82e 	bl	80049c0 <_malloc_usable_size_r>
 8004964:	4284      	cmp	r4, r0
 8004966:	4607      	mov	r7, r0
 8004968:	d802      	bhi.n	8004970 <_realloc_r+0x34>
 800496a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800496e:	d812      	bhi.n	8004996 <_realloc_r+0x5a>
 8004970:	4621      	mov	r1, r4
 8004972:	4640      	mov	r0, r8
 8004974:	f7ff fa38 	bl	8003de8 <_malloc_r>
 8004978:	4605      	mov	r5, r0
 800497a:	2800      	cmp	r0, #0
 800497c:	d0ed      	beq.n	800495a <_realloc_r+0x1e>
 800497e:	42bc      	cmp	r4, r7
 8004980:	4622      	mov	r2, r4
 8004982:	4631      	mov	r1, r6
 8004984:	bf28      	it	cs
 8004986:	463a      	movcs	r2, r7
 8004988:	f7ff ffa4 	bl	80048d4 <memcpy>
 800498c:	4631      	mov	r1, r6
 800498e:	4640      	mov	r0, r8
 8004990:	f7ff f9c2 	bl	8003d18 <_free_r>
 8004994:	e7e1      	b.n	800495a <_realloc_r+0x1e>
 8004996:	4635      	mov	r5, r6
 8004998:	e7df      	b.n	800495a <_realloc_r+0x1e>
	...

0800499c <_read_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4604      	mov	r4, r0
 80049a0:	4608      	mov	r0, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	2200      	movs	r2, #0
 80049a6:	4d05      	ldr	r5, [pc, #20]	; (80049bc <_read_r+0x20>)
 80049a8:	602a      	str	r2, [r5, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f7fc fef3 	bl	8001796 <_read>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_read_r+0x1e>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_read_r+0x1e>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	200001c0 	.word	0x200001c0

080049c0 <_malloc_usable_size_r>:
 80049c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c4:	1f18      	subs	r0, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bfbc      	itt	lt
 80049ca:	580b      	ldrlt	r3, [r1, r0]
 80049cc:	18c0      	addlt	r0, r0, r3
 80049ce:	4770      	bx	lr

080049d0 <_init>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr

080049dc <_fini>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr
