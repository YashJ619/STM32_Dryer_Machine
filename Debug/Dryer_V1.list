
Dryer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000080b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  080081c0  080081c0  000181c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087ac  080087ac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080087ac  080087ac  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087ac  080087ac  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087ac  080087ac  000187ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087b0  080087b0  000187b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080087b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001e8  0800899c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  0800899c  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e590  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b01  00000000  00000000  0002e7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000312a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  000322e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e1b  00000000  00000000  000331c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c23  00000000  00000000  0004cfdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd6b  00000000  00000000  0005fbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed969  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005398  00000000  00000000  000ed9bc  2**2
=======
  1 .text         000080f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08008208  08008208  00018208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087ec  080087ec  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080087ec  080087ec  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087ec  080087ec  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087ec  080087ec  000187ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080087f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001e8  080089dc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  080089dc  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5c0  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b01  00000000  00000000  0002e7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000312d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00032310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e1b  00000000  00000000  000331f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c4f  00000000  00000000  0004d00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd74  00000000  00000000  0005fc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed9ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005398  00000000  00000000  000eda20  2**2
>>>>>>> majorchng
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000130:	080081a8 	.word	0x080081a8
=======
 8000130:	080081f0 	.word	0x080081f0
>>>>>>> majorchng

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
<<<<<<< HEAD
 800014c:	080081a8 	.word	0x080081a8
=======
 800014c:	080081f0 	.word	0x080081f0
>>>>>>> majorchng

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2iz>:
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e14:	d30f      	bcc.n	8000e36 <__aeabi_f2iz+0x2a>
 8000e16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d90d      	bls.n	8000e3c <__aeabi_f2iz+0x30>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e28:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e30:	bf18      	it	ne
 8000e32:	4240      	negne	r0, r0
 8000e34:	4770      	bx	lr
 8000e36:	f04f 0000 	mov.w	r0, #0
 8000e3a:	4770      	bx	lr
 8000e3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e40:	d101      	bne.n	8000e46 <__aeabi_f2iz+0x3a>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d105      	bne.n	8000e52 <__aeabi_f2iz+0x46>
 8000e46:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e4a:	bf08      	it	eq
 8000e4c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr

08000e58 <Max6675_Read_Temp>:
// ------------------- Variables ----------------
_Bool TCF = 0;                       // Thermocouple Connection acknowledge Flag
uint8_t DATARX[2];                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max6675_Read_Temp(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	float Temp = 0;                                      // Temperature Variable
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8000e64:	2200      	movs	r2, #0
 8000e66:	2110      	movs	r1, #16
 8000e68:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <Max6675_Read_Temp+0x98>)
<<<<<<< HEAD
 8000e6a:	f002 fba0 	bl	80035ae <HAL_GPIO_WritePin>
=======
 8000e6a:	f002 fbc6 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	HAL_SPI_Receive(&hspi1, DATARX, 2, 50);                  // DATA Transfer
 8000e6e:	2332      	movs	r3, #50	; 0x32
 8000e70:	2202      	movs	r2, #2
 8000e72:	4920      	ldr	r1, [pc, #128]	; (8000ef4 <Max6675_Read_Temp+0x9c>)
 8000e74:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <Max6675_Read_Temp+0xa0>)
<<<<<<< HEAD
 8000e76:	f003 f869 	bl	8003f4c <HAL_SPI_Receive>
=======
 8000e76:	f003 f88f 	bl	8003f98 <HAL_SPI_Receive>
>>>>>>> majorchng
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	481c      	ldr	r0, [pc, #112]	; (8000ef0 <Max6675_Read_Temp+0x98>)
<<<<<<< HEAD
 8000e80:	f002 fb95 	bl	80035ae <HAL_GPIO_WritePin>
=======
 8000e80:	f002 fbbb 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
//printf("Mix = %x\r\n",((DATARX[0] << 8)|DATARX[1]));
//printf("MSB = %x\r\n",DATARX[1]);

//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2) & 0x0001);        // State of Connecting
	TCF = ((((DATARX[0] << 8) | DATARX[1]) >> 2) & 0x0001);
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <Max6675_Read_Temp+0x9c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <Max6675_Read_Temp+0x9c>)
 8000e8c:	7852      	ldrb	r2, [r2, #1]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	109b      	asrs	r3, r3, #2
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <Max6675_Read_Temp+0xa4>)
 8000ea2:	701a      	strb	r2, [r3, #0]
//printf("TCF = %d\r\n",TCF);

//Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
	if (TCF == 0) {
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <Max6675_Read_Temp+0xa4>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	f083 0301 	eor.w	r3, r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d013      	beq.n	8000eda <Max6675_Read_Temp+0x82>
		Temp = (((DATARX[0] << 8) | DATARX[1]) >> 3);
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <Max6675_Read_Temp+0x9c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <Max6675_Read_Temp+0x9c>)
 8000eba:	7852      	ldrb	r2, [r2, #1]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	10db      	asrs	r3, r3, #3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff4f 	bl	8000d64 <__aeabi_i2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	607b      	str	r3, [r7, #4]
		Temp *= 0.25;                         // Data to Centigrade Conversation
 8000eca:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff f946 	bl	8000160 <__aeabi_fmul>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	e001      	b.n	8000ede <Max6675_Read_Temp+0x86>
	} else
		Temp = -1;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <Max6675_Read_Temp+0xa8>)
 8000edc:	607b      	str	r3, [r7, #4]
	HAL_Delay(250); // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 8000ede:	20fa      	movs	r0, #250	; 0xfa
<<<<<<< HEAD
 8000ee0:	f002 f898 	bl	8003014 <HAL_Delay>
=======
 8000ee0:	f002 f8be 	bl	8003060 <HAL_Delay>
>>>>>>> majorchng
	return Temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	20000208 	.word	0x20000208
 8000ef8:	200002b8 	.word	0x200002b8
 8000efc:	20000204 	.word	0x20000204
 8000f00:	bf800000 	.word	0xbf800000

08000f04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 0320 	and.w	r3, r3, #32
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6193      	str	r3, [r2, #24]
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <MX_GPIO_Init+0x40>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000

08000f48 <input_init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void input_init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <input_init+0xcc>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a30      	ldr	r2, [pc, #192]	; (8001014 <input_init+0xcc>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <input_init+0xcc>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <input_init+0xcc>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a2a      	ldr	r2, [pc, #168]	; (8001014 <input_init+0xcc>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <input_init+0xcc>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <input_init+0xcc>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a24      	ldr	r2, [pc, #144]	; (8001014 <input_init+0xcc>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <input_init+0xcc>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = { 0 };
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = DOOR_SW;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <input_init+0xd0>)
 8000faa:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <input_init+0xd4>)
<<<<<<< HEAD
 8000fbc:	f002 f95c 	bl	8003278 <HAL_GPIO_Init>
=======
 8000fbc:	f002 f982 	bl	80032c4 <HAL_GPIO_Init>
>>>>>>> majorchng

	GPIOx.Pin = LIMIT_SW | HEATER_SW | SEL_ROT_SW;
 8000fc0:	230e      	movs	r3, #14
 8000fc2:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4811      	ldr	r0, [pc, #68]	; (800101c <input_init+0xd4>)
<<<<<<< HEAD
 8000fd8:	f002 f94e 	bl	8003278 <HAL_GPIO_Init>
=======
 8000fd8:	f002 f974 	bl	80032c4 <HAL_GPIO_Init>
>>>>>>> majorchng

	GPIOx.Pin = LED;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe0:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOC, &GPIOx);
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <input_init+0xd8>)
<<<<<<< HEAD
 8000ff6:	f002 f93f 	bl	8003278 <HAL_GPIO_Init>
=======
 8000ff6:	f002 f965 	bl	80032c4 <HAL_GPIO_Init>
>>>>>>> majorchng

	//HAL_GPIO_WritePin(GPIOC, LED, LOW);

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2006      	movs	r0, #6
<<<<<<< HEAD
 8001000:	f002 f903 	bl	800320a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001004:	2006      	movs	r0, #6
 8001006:	f002 f91c 	bl	8003242 <HAL_NVIC_EnableIRQ>
=======
 8001000:	f002 f929 	bl	8003256 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001004:	2006      	movs	r0, #6
 8001006:	f002 f942 	bl	800328e <HAL_NVIC_EnableIRQ>
>>>>>>> majorchng
}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	10310000 	.word	0x10310000
 800101c:	40010800 	.word	0x40010800
 8001020:	40011000 	.word	0x40011000

08001024 <is_door_open>:

uint8_t is_door_open(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
<<<<<<< HEAD
 8001028:	f001 ffea 	bl	8003000 <HAL_GetTick>
=======
 8001028:	f002 f810 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 800102c:	4602      	mov	r2, r0
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <is_door_open+0x44>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b05      	cmp	r3, #5
 8001036:	d912      	bls.n	800105e <is_door_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == GPIO_PIN_RESET) {
 8001038:	2101      	movs	r1, #1
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <is_door_open+0x48>)
<<<<<<< HEAD
 800103c:	f002 faa0 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 800103c:	f002 fac6 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d103      	bne.n	800104e <is_door_open+0x2a>
			last_state = 0;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <is_door_open+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e002      	b.n	8001054 <is_door_open+0x30>
		} else {
			last_state = 1;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <is_door_open+0x4c>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
<<<<<<< HEAD
 8001054:	f001 ffd4 	bl	8003000 <HAL_GetTick>
=======
 8001054:	f001 fffa 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 8001058:	4603      	mov	r3, r0
 800105a:	4a03      	ldr	r2, [pc, #12]	; (8001068 <is_door_open+0x44>)
 800105c:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <is_door_open+0x4c>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000020c 	.word	0x2000020c
 800106c:	40010800 	.word	0x40010800
 8001070:	20000210 	.word	0x20000210

08001074 <is_coil_open>:

uint8_t is_coil_open(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
<<<<<<< HEAD
 8001078:	f001 ffc2 	bl	8003000 <HAL_GetTick>
=======
 8001078:	f001 ffe8 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 800107c:	4602      	mov	r2, r0
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <is_coil_open+0x44>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b05      	cmp	r3, #5
 8001086:	d912      	bls.n	80010ae <is_coil_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, HEATER_SW) == GPIO_PIN_RESET) {
 8001088:	2108      	movs	r1, #8
 800108a:	480c      	ldr	r0, [pc, #48]	; (80010bc <is_coil_open+0x48>)
<<<<<<< HEAD
 800108c:	f002 fa78 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 800108c:	f002 fa9e 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <is_coil_open+0x2a>
			last_state = 0;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <is_coil_open+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e002      	b.n	80010a4 <is_coil_open+0x30>
		} else {
			last_state = 1;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <is_coil_open+0x4c>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
<<<<<<< HEAD
 80010a4:	f001 ffac 	bl	8003000 <HAL_GetTick>
=======
 80010a4:	f001 ffd2 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <is_coil_open+0x44>)
 80010ac:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <is_coil_open+0x4c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000214 	.word	0x20000214
 80010bc:	40010800 	.word	0x40010800
 80010c0:	20000218 	.word	0x20000218

080010c4 <limit_sw_open>:

uint8_t limit_sw_open(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
<<<<<<< HEAD
 80010c8:	f001 ff9a 	bl	8003000 <HAL_GetTick>
=======
 80010c8:	f001 ffc0 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 80010cc:	4602      	mov	r2, r0
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <limit_sw_open+0x44>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d912      	bls.n	80010fe <limit_sw_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, LIMIT_SW) == GPIO_PIN_RESET) {
 80010d8:	2102      	movs	r1, #2
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <limit_sw_open+0x48>)
<<<<<<< HEAD
 80010dc:	f002 fa50 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 80010dc:	f002 fa76 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d103      	bne.n	80010ee <limit_sw_open+0x2a>
			last_state = 0;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <limit_sw_open+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e002      	b.n	80010f4 <limit_sw_open+0x30>
		} else {
			last_state = 1;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <limit_sw_open+0x4c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
<<<<<<< HEAD
 80010f4:	f001 ff84 	bl	8003000 <HAL_GetTick>
=======
 80010f4:	f001 ffaa 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a03      	ldr	r2, [pc, #12]	; (8001108 <limit_sw_open+0x44>)
 80010fc:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <limit_sw_open+0x4c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000021c 	.word	0x2000021c
 800110c:	40010800 	.word	0x40010800
 8001110:	20000220 	.word	0x20000220

08001114 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(DOOR_SW);
 8001118:	2001      	movs	r0, #1
<<<<<<< HEAD
 800111a:	f002 fa61 	bl	80035e0 <HAL_GPIO_EXTI_IRQHandler>
=======
 800111a:	f002 fa87 	bl	800362c <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> majorchng
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <keypad_init>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

void keypad_init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <keypad_init+0x54>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <keypad_init+0x54>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <keypad_init+0x54>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = LOW_KEY | MED_KEY | HIGH_KEY | FN_KEY;
 8001150:	f640 4303 	movw	r3, #3075	; 0xc03
 8001154:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(KEYPAD_PORT, &GPIOx);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4619      	mov	r1, r3
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <keypad_init+0x58>)
<<<<<<< HEAD
 800116a:	f002 f885 	bl	8003278 <HAL_GPIO_Init>
=======
 800116a:	f002 f8ab 	bl	80032c4 <HAL_GPIO_Init>
>>>>>>> majorchng
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	40010c00 	.word	0x40010c00

08001180 <scan_keypad>:

uint8_t scan_keypad(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 8001184:	f000 f832 	bl	80011ec <is_low_key_pressed>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 800118e:	4813      	ldr	r0, [pc, #76]	; (80011dc <scan_keypad+0x5c>)
<<<<<<< HEAD
 8001190:	f004 fd88 	bl	8005ca4 <puts>
=======
 8001190:	f004 fdae 	bl	8005cf0 <puts>
>>>>>>> majorchng
		return LOW_KEY_PRESSED;
 8001194:	2301      	movs	r3, #1
 8001196:	e01e      	b.n	80011d6 <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 8001198:	f000 f860 	bl	800125c <is_med_key_pressed>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <scan_keypad+0x60>)
<<<<<<< HEAD
 80011a4:	f004 fd7e 	bl	8005ca4 <puts>
=======
 80011a4:	f004 fda4 	bl	8005cf0 <puts>
>>>>>>> majorchng
		return MED_KEY_PRESSED;
 80011a8:	2302      	movs	r3, #2
 80011aa:	e014      	b.n	80011d6 <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 80011ac:	f000 f890 	bl	80012d0 <is_high_key_pressed>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <scan_keypad+0x64>)
<<<<<<< HEAD
 80011b8:	f004 fd74 	bl	8005ca4 <puts>
=======
 80011b8:	f004 fd9a 	bl	8005cf0 <puts>
>>>>>>> majorchng
		return HIGH_KEY_PRESSED;
 80011bc:	2303      	movs	r3, #3
 80011be:	e00a      	b.n	80011d6 <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 80011c0:	f000 f8c0 	bl	8001344 <is_fn_key_pressed>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <scan_keypad+0x68>)
<<<<<<< HEAD
 80011cc:	f004 fd6a 	bl	8005ca4 <puts>
=======
 80011cc:	f004 fd90 	bl	8005cf0 <puts>
>>>>>>> majorchng
		return FN_KEY_PRESSED;
 80011d0:	2304      	movs	r3, #4
 80011d2:	e000      	b.n	80011d6 <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
<<<<<<< HEAD
 80011dc:	080081c0 	.word	0x080081c0
 80011e0:	080081d4 	.word	0x080081d4
 80011e4:	080081e8 	.word	0x080081e8
 80011e8:	080081fc 	.word	0x080081fc
=======
 80011dc:	08008208 	.word	0x08008208
 80011e0:	0800821c 	.word	0x0800821c
 80011e4:	08008230 	.word	0x08008230
 80011e8:	08008244 	.word	0x08008244
>>>>>>> majorchng

080011ec <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

<<<<<<< HEAD
	if(HAL_GetTick() - last_time > 5U)
 80011f0:	f001 ff06 	bl	8003000 <HAL_GetTick>
=======
	if(HAL_GetTick() - last_time > 1U)
 80011f0:	f001 ff2c 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <is_low_key_pressed+0x64>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d923      	bls.n	8001248 <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 8001200:	2102      	movs	r1, #2
 8001202:	4814      	ldr	r0, [pc, #80]	; (8001254 <is_low_key_pressed+0x68>)
<<<<<<< HEAD
 8001204:	f002 f9bc 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 8001204:	f002 f9e2 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d114      	bne.n	8001238 <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <is_low_key_pressed+0x6c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d112      	bne.n	800123e <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 8001218:	2102      	movs	r1, #2
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <is_low_key_pressed+0x68>)
<<<<<<< HEAD
 800121c:	f002 f9b0 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 800121c:	f002 f9d6 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d104      	bne.n	8001230 <is_low_key_pressed+0x44>
				{
					last_state = 0;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <is_low_key_pressed+0x6c>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
					return 1;
 800122c:	2301      	movs	r3, #1
 800122e:	e00c      	b.n	800124a <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <is_low_key_pressed+0x6c>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e002      	b.n	800123e <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <is_low_key_pressed+0x6c>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
<<<<<<< HEAD
 800123e:	f001 fedf 	bl	8003000 <HAL_GetTick>
=======
 800123e:	f001 ff05 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 8001242:	4603      	mov	r3, r0
 8001244:	4a02      	ldr	r2, [pc, #8]	; (8001250 <is_low_key_pressed+0x64>)
 8001246:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000224 	.word	0x20000224
 8001254:	40010c00 	.word	0x40010c00
 8001258:	20000228 	.word	0x20000228

0800125c <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

<<<<<<< HEAD
	if(HAL_GetTick() - last_time > 5U)
 8001260:	f001 fece 	bl	8003000 <HAL_GetTick>
=======
	if(HAL_GetTick() - last_time > 1U)
 8001260:	f001 fef4 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 8001264:	4602      	mov	r2, r0
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <is_med_key_pressed+0x68>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d925      	bls.n	80012bc <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 8001270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001274:	4814      	ldr	r0, [pc, #80]	; (80012c8 <is_med_key_pressed+0x6c>)
<<<<<<< HEAD
 8001276:	f002 f983 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 8001276:	f002 f9a9 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d115      	bne.n	80012ac <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <is_med_key_pressed+0x70>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d113      	bne.n	80012b2 <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 800128a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <is_med_key_pressed+0x6c>)
<<<<<<< HEAD
 8001290:	f002 f976 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 8001290:	f002 f99c 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d104      	bne.n	80012a4 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <is_med_key_pressed+0x70>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
					return 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e00c      	b.n	80012be <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <is_med_key_pressed+0x70>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e002      	b.n	80012b2 <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <is_med_key_pressed+0x70>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
<<<<<<< HEAD
 80012b2:	f001 fea5 	bl	8003000 <HAL_GetTick>
=======
 80012b2:	f001 fecb 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a02      	ldr	r2, [pc, #8]	; (80012c4 <is_med_key_pressed+0x68>)
 80012ba:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000022c 	.word	0x2000022c
 80012c8:	40010c00 	.word	0x40010c00
 80012cc:	20000230 	.word	0x20000230

080012d0 <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

<<<<<<< HEAD
	if(HAL_GetTick() - last_time > 5U)
 80012d4:	f001 fe94 	bl	8003000 <HAL_GetTick>
=======
	if(HAL_GetTick() - last_time > 1U)
 80012d4:	f001 feba 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 80012d8:	4602      	mov	r2, r0
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <is_high_key_pressed+0x68>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d925      	bls.n	8001330 <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 80012e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e8:	4814      	ldr	r0, [pc, #80]	; (800133c <is_high_key_pressed+0x6c>)
<<<<<<< HEAD
 80012ea:	f002 f949 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 80012ea:	f002 f96f 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d115      	bne.n	8001320 <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <is_high_key_pressed+0x70>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d113      	bne.n	8001326 <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 80012fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001302:	480e      	ldr	r0, [pc, #56]	; (800133c <is_high_key_pressed+0x6c>)
<<<<<<< HEAD
 8001304:	f002 f93c 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 8001304:	f002 f962 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d104      	bne.n	8001318 <is_high_key_pressed+0x48>
				{
					last_state = 0;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <is_high_key_pressed+0x70>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
					return 1;
 8001314:	2301      	movs	r3, #1
 8001316:	e00c      	b.n	8001332 <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <is_high_key_pressed+0x70>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	e002      	b.n	8001326 <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <is_high_key_pressed+0x70>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
<<<<<<< HEAD
 8001326:	f001 fe6b 	bl	8003000 <HAL_GetTick>
=======
 8001326:	f001 fe91 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 800132a:	4603      	mov	r3, r0
 800132c:	4a02      	ldr	r2, [pc, #8]	; (8001338 <is_high_key_pressed+0x68>)
 800132e:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000234 	.word	0x20000234
 800133c:	40010c00 	.word	0x40010c00
 8001340:	20000238 	.word	0x20000238

08001344 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

<<<<<<< HEAD
	if(HAL_GetTick() - last_time > 5U)
 8001348:	f001 fe5a 	bl	8003000 <HAL_GetTick>
=======
	if(HAL_GetTick() - last_time > 1U)
 8001348:	f001 fe80 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 800134c:	4602      	mov	r2, r0
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <is_fn_key_pressed+0x64>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d923      	bls.n	80013a0 <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8001358:	2101      	movs	r1, #1
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <is_fn_key_pressed+0x68>)
<<<<<<< HEAD
 800135c:	f002 f910 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 800135c:	f002 f936 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d114      	bne.n	8001390 <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <is_fn_key_pressed+0x6c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d112      	bne.n	8001396 <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8001370:	2101      	movs	r1, #1
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <is_fn_key_pressed+0x68>)
<<<<<<< HEAD
 8001374:	f002 f904 	bl	8003580 <HAL_GPIO_ReadPin>
=======
 8001374:	f002 f92a 	bl	80035cc <HAL_GPIO_ReadPin>
>>>>>>> majorchng
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d104      	bne.n	8001388 <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <is_fn_key_pressed+0x6c>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
					return 1;
 8001384:	2301      	movs	r3, #1
 8001386:	e00c      	b.n	80013a2 <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <is_fn_key_pressed+0x6c>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e002      	b.n	8001396 <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <is_fn_key_pressed+0x6c>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
<<<<<<< HEAD
 8001396:	f001 fe33 	bl	8003000 <HAL_GetTick>
=======
 8001396:	f001 fe59 	bl	800304c <HAL_GetTick>
>>>>>>> majorchng
 800139a:	4603      	mov	r3, r0
 800139c:	4a02      	ldr	r2, [pc, #8]	; (80013a8 <is_fn_key_pressed+0x64>)
 800139e:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000023c 	.word	0x2000023c
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	20000240 	.word	0x20000240

080013b4 <lcd_gpio_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_gpio_init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
	__HAL_RCC_AFIO_CLK_ENABLE();
 80013ba:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <lcd_gpio_init+0x124>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a46      	ldr	r2, [pc, #280]	; (80014d8 <lcd_gpio_init+0x124>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <lcd_gpio_init+0x124>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_AFIO_REMAP_SWJ_NONJTRST();
 80013d2:	4b42      	ldr	r3, [pc, #264]	; (80014dc <lcd_gpio_init+0x128>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
 80013e8:	4a3c      	ldr	r2, [pc, #240]	; (80014dc <lcd_gpio_init+0x128>)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	6053      	str	r3, [r2, #4]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <lcd_gpio_init+0x128>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013fa:	623b      	str	r3, [r7, #32]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	4a35      	ldr	r2, [pc, #212]	; (80014dc <lcd_gpio_init+0x128>)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	6053      	str	r3, [r2, #4]

	//__HAL_AFIO_REMAP_SWJ_DISABLE();

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <lcd_gpio_init+0x124>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a32      	ldr	r2, [pc, #200]	; (80014d8 <lcd_gpio_init+0x124>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <lcd_gpio_init+0x124>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <lcd_gpio_init+0x124>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a2c      	ldr	r2, [pc, #176]	; (80014d8 <lcd_gpio_init+0x124>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <lcd_gpio_init+0x124>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144e:	4824      	ldr	r0, [pc, #144]	; (80014e0 <lcd_gpio_init+0x12c>)
<<<<<<< HEAD
 8001450:	f002 f8ad 	bl	80035ae <HAL_GPIO_WritePin>
=======
 8001450:	f002 f8d3 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145a:	4821      	ldr	r0, [pc, #132]	; (80014e0 <lcd_gpio_init+0x12c>)
<<<<<<< HEAD
 800145c:	f002 f8a7 	bl	80035ae <HAL_GPIO_WritePin>
=======
 800145c:	f002 f8cd 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng

	GPIOx.Pin = LCD_PIN_RS | LCD_PIN_EN;
 8001460:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001464:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_CTRL, &GPIOx);
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	4819      	ldr	r0, [pc, #100]	; (80014e0 <lcd_gpio_init+0x12c>)
<<<<<<< HEAD
 800147a:	f001 fefd 	bl	8003278 <HAL_GPIO_Init>
=======
 800147a:	f001 ff23 	bl	80032c4 <HAL_GPIO_Init>
>>>>>>> majorchng

	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	21f8      	movs	r1, #248	; 0xf8
 8001482:	4817      	ldr	r0, [pc, #92]	; (80014e0 <lcd_gpio_init+0x12c>)
<<<<<<< HEAD
 8001484:	f002 f893 	bl	80035ae <HAL_GPIO_WritePin>
=======
 8001484:	f002 f8b9 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng

	GPIOx.Pin = LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4;
 8001488:	23f8      	movs	r3, #248	; 0xf8
 800148a:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2302      	movs	r3, #2
 8001496:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D0_4, &GPIOx);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	4810      	ldr	r0, [pc, #64]	; (80014e0 <lcd_gpio_init+0x12c>)
<<<<<<< HEAD
 80014a0:	f001 feea 	bl	8003278 <HAL_GPIO_Init>
=======
 80014a0:	f001 ff10 	bl	80032c4 <HAL_GPIO_Init>
>>>>>>> majorchng

	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <lcd_gpio_init+0x130>)
<<<<<<< HEAD
 80014ac:	f002 f87f 	bl	80035ae <HAL_GPIO_WritePin>
=======
 80014ac:	f002 f8a5 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng

	GPIOx.Pin = LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7;
 80014b0:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80014b4:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D5_7, &GPIOx);
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4619      	mov	r1, r3
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <lcd_gpio_init+0x130>)
<<<<<<< HEAD
 80014ca:	f001 fed5 	bl	8003278 <HAL_GPIO_Init>
=======
 80014ca:	f001 fefb 	bl	80032c4 <HAL_GPIO_Init>
>>>>>>> majorchng

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010c00 	.word	0x40010c00
 80014e4:	40010800 	.word	0x40010800

080014e8 <lcd_init>:

void lcd_init(uint8_t fourbitmode)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <lcd_init+0x28>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 80014fe:	e002      	b.n	8001506 <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <lcd_init+0x28>)
 8001502:	2210      	movs	r2, #16
 8001504:	701a      	strb	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000241 	.word	0x20000241

08001514 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	460b      	mov	r3, r1
 8001520:	71bb      	strb	r3, [r7, #6]
 8001522:	4613      	mov	r3, r2
 8001524:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d906      	bls.n	800153a <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <lcd_begin+0xdc>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <lcd_begin+0xdc>)
 8001538:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 800153a:	4a2e      	ldr	r2, [pc, #184]	; (80015f4 <lcd_begin+0xe0>)
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <lcd_begin+0xe4>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 8001546:	797b      	ldrb	r3, [r7, #5]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d009      	beq.n	8001560 <lcd_begin+0x4c>
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d106      	bne.n	8001560 <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <lcd_begin+0xdc>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <lcd_begin+0xdc>)
 800155e:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 8001560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
<<<<<<< HEAD
 8001564:	f001 fd56 	bl	8003014 <HAL_Delay>
=======
 8001564:	f001 fd7c 	bl	8003060 <HAL_Delay>
>>>>>>> majorchng
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS | LCD_PIN_EN, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800156e:	4823      	ldr	r0, [pc, #140]	; (80015fc <lcd_begin+0xe8>)
<<<<<<< HEAD
 8001570:	f002 f81d 	bl	80035ae <HAL_GPIO_WritePin>
=======
 8001570:	f002 f843 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <lcd_begin+0xdc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f043 0320 	orr.w	r3, r3, #32
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f902 	bl	8001788 <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 8001584:	200a      	movs	r0, #10
<<<<<<< HEAD
 8001586:	f001 fd45 	bl	8003014 <HAL_Delay>
=======
 8001586:	f001 fd6b 	bl	8003060 <HAL_Delay>
>>>>>>> majorchng

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <lcd_begin+0xdc>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	f043 0320 	orr.w	r3, r3, #32
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f8f7 	bl	8001788 <lcd_send_cmd>
	    HAL_Delay(1);
 800159a:	2001      	movs	r0, #1
<<<<<<< HEAD
 800159c:	f001 fd3a 	bl	8003014 <HAL_Delay>
=======
 800159c:	f001 fd60 	bl	8003060 <HAL_Delay>
>>>>>>> majorchng

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <lcd_begin+0xdc>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	f043 0320 	orr.w	r3, r3, #32
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f8ec 	bl	8001788 <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <lcd_begin+0xdc>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f043 0320 	orr.w	r3, r3, #32
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f8e4 	bl	8001788 <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <lcd_begin+0xec>)
 80015c2:	2204      	movs	r2, #4
 80015c4:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 f828 	bl	800161c <lcd_display>

	// clear it off
	lcd_clear();
 80015cc:	f000 f8f2 	bl	80017b4 <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <lcd_begin+0xf0>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <lcd_begin+0xf0>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f8d1 	bl	8001788 <lcd_send_cmd>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000241 	.word	0x20000241
 80015f4:	20000244 	.word	0x20000244
 80015f8:	20000245 	.word	0x20000245
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	20000242 	.word	0x20000242
 8001604:	20000243 	.word	0x20000243

08001608 <lcd_home>:

void lcd_home(void){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
 800160c:	2002      	movs	r0, #2
 800160e:	f000 f8bb 	bl	8001788 <lcd_send_cmd>
	HAL_Delay(2); // this command takes a long time!
 8001612:	2002      	movs	r0, #2
<<<<<<< HEAD
 8001614:	f001 fcfe 	bl	8003014 <HAL_Delay>
=======
 8001614:	f001 fd24 	bl	8003060 <HAL_Delay>
>>>>>>> majorchng
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <lcd_display>:

void lcd_display(uint8_t state)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	if(state)
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00f      	beq.n	800164c <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <lcd_display+0x58>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <lcd_display+0x58>)
 8001638:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <lcd_display+0x58>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f89f 	bl	8001788 <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 800164a:	e00e      	b.n	800166a <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <lcd_display+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <lcd_display+0x58>)
 8001658:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <lcd_display+0x58>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f88f 	bl	8001788 <lcd_send_cmd>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000242 	.word	0x20000242

08001678 <lcd_enable>:

void lcd_enable(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <lcd_enable+0x40>)
<<<<<<< HEAD
 8001684:	f001 ff93 	bl	80035ae <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001688:	2001      	movs	r0, #1
 800168a:	f001 fcc3 	bl	8003014 <HAL_Delay>
=======
 8001684:	f001 ffb9 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001688:	2001      	movs	r0, #1
 800168a:	f001 fce9 	bl	8003060 <HAL_Delay>
>>>>>>> majorchng
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <lcd_enable+0x40>)
<<<<<<< HEAD
 8001696:	f001 ff8a 	bl	80035ae <HAL_GPIO_WritePin>
	HAL_Delay(1); // enable pulse must be >450ns
 800169a:	2001      	movs	r0, #1
 800169c:	f001 fcba 	bl	8003014 <HAL_Delay>
=======
 8001696:	f001 ffb0 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_Delay(1); // enable pulse must be >450ns
 800169a:	2001      	movs	r0, #1
 800169c:	f001 fce0 	bl	8003060 <HAL_Delay>
>>>>>>> majorchng
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	4804      	ldr	r0, [pc, #16]	; (80016b8 <lcd_enable+0x40>)
<<<<<<< HEAD
 80016a8:	f001 ff81 	bl	80035ae <HAL_GPIO_WritePin>
	HAL_Delay(1); // commands need > 37us to settle
 80016ac:	2001      	movs	r0, #1
 80016ae:	f001 fcb1 	bl	8003014 <HAL_Delay>
=======
 80016a8:	f001 ffa7 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_Delay(1); // commands need > 37us to settle
 80016ac:	2001      	movs	r0, #1
 80016ae:	f001 fcd7 	bl	8003060 <HAL_Delay>
>>>>>>> majorchng
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40010c00 	.word	0x40010c00

080016bc <write_8bit>:

void write_8bit(uint8_t value)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D7, (value >> 7) & 0x01);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	09db      	lsrs	r3, r3, #7
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d2:	482b      	ldr	r0, [pc, #172]	; (8001780 <write_8bit+0xc4>)
<<<<<<< HEAD
 80016d4:	f001 ff6b 	bl	80035ae <HAL_GPIO_WritePin>
=======
 80016d4:	f001 ff91 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D6, (value >> 6) & 0x01);
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ea:	4825      	ldr	r0, [pc, #148]	; (8001780 <write_8bit+0xc4>)
<<<<<<< HEAD
 80016ec:	f001 ff5f 	bl	80035ae <HAL_GPIO_WritePin>
=======
 80016ec:	f001 ff85 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5, (value >> 5) & 0x01);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001702:	481f      	ldr	r0, [pc, #124]	; (8001780 <write_8bit+0xc4>)
<<<<<<< HEAD
 8001704:	f001 ff53 	bl	80035ae <HAL_GPIO_WritePin>
=======
 8001704:	f001 ff79 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D4, (value >> 4) & 0x01);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	2108      	movs	r1, #8
 8001718:	481a      	ldr	r0, [pc, #104]	; (8001784 <write_8bit+0xc8>)
<<<<<<< HEAD
 800171a:	f001 ff48 	bl	80035ae <HAL_GPIO_WritePin>
=======
 800171a:	f001 ff6e 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D3, (value >> 3) & 0x01);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	2110      	movs	r1, #16
 800172e:	4815      	ldr	r0, [pc, #84]	; (8001784 <write_8bit+0xc8>)
<<<<<<< HEAD
 8001730:	f001 ff3d 	bl	80035ae <HAL_GPIO_WritePin>
=======
 8001730:	f001 ff63 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D2, (value >> 2) & 0x01);
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	2120      	movs	r1, #32
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <write_8bit+0xc8>)
<<<<<<< HEAD
 8001746:	f001 ff32 	bl	80035ae <HAL_GPIO_WritePin>
=======
 8001746:	f001 ff58 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D1, (value >> 1) & 0x01);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	480a      	ldr	r0, [pc, #40]	; (8001784 <write_8bit+0xc8>)
<<<<<<< HEAD
 800175c:	f001 ff27 	bl	80035ae <HAL_GPIO_WritePin>
=======
 800175c:	f001 ff4d 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0, (value >> 0) & 0x01);
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <write_8bit+0xc8>)
<<<<<<< HEAD
 800176e:	f001 ff1e 	bl	80035ae <HAL_GPIO_WritePin>
=======
 800176e:	f001 ff44 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng

	lcd_enable();
 8001772:	f7ff ff81 	bl	8001678 <lcd_enable>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40010800 	.word	0x40010800
 8001784:	40010c00 	.word	0x40010c00

08001788 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <lcd_send_cmd+0x28>)
<<<<<<< HEAD
 800179a:	f001 ff08 	bl	80035ae <HAL_GPIO_WritePin>
=======
 800179a:	f001 ff2e 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	write_8bit(cmd);
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff8b 	bl	80016bc <write_8bit>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40010c00 	.word	0x40010c00

080017b4 <lcd_clear>:

void lcd_clear(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff ffe5 	bl	8001788 <lcd_send_cmd>
	HAL_Delay(2);
 80017be:	2002      	movs	r0, #2
<<<<<<< HEAD
 80017c0:	f001 fc28 	bl	8003014 <HAL_Delay>
=======
 80017c0:	f001 fc4e 	bl	8003060 <HAL_Delay>
>>>>>>> majorchng
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <lcd_send_data+0x28>)
<<<<<<< HEAD
 80017da:	f001 fee8 	bl	80035ae <HAL_GPIO_WritePin>
=======
 80017da:	f001 ff0e 	bl	80035fa <HAL_GPIO_WritePin>
>>>>>>> majorchng
	write_8bit(data);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff6b 	bl	80016bc <write_8bit>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40010c00 	.word	0x40010c00

080017f4 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ffe1 	bl	80017c8 <lcd_send_data>
		str++;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3301      	adds	r3, #1
 800180a:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f3      	bne.n	80017fc <lcd_print+0x8>
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <lcd_set_cursor>:

void lcd_set_cursor(int8_t col, int8_t row)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	460a      	mov	r2, r1
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	4613      	mov	r3, r2
 800182e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <lcd_set_cursor+0x5c>)
 8001832:	f107 0408 	add.w	r4, r7, #8
 8001836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _numlines) {
 800183c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <lcd_set_cursor+0x60>)
 8001842:	7812      	ldrb	r2, [r2, #0]
 8001844:	4293      	cmp	r3, r2
 8001846:	dd04      	ble.n	8001852 <lcd_set_cursor+0x32>
		row = _numlines - 1; // we count rows starting w/0
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <lcd_set_cursor+0x60>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	3b01      	subs	r3, #1
 800184e:	b2db      	uxtb	r3, r3
 8001850:	71bb      	strb	r3, [r7, #6]
		}
	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
 8001852:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	3318      	adds	r3, #24
 800185a:	443b      	add	r3, r7
 800185c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	4413      	add	r3, r2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800186c:	b2db      	uxtb	r3, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff8a 	bl	8001788 <lcd_send_cmd>
}
<<<<<<< HEAD
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	bf00      	nop
 8001878:	0800820c 	.word	0x0800820c
 800187c:	20000244 	.word	0x20000244
=======
 8001874:	bf00      	nop
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	08008254 	.word	0x08008254
 8001880:	20000244 	.word	0x20000244
>>>>>>> majorchng

08001884 <lcd_update>:
void mode_level_page(void);
void limit_sw_err_page(void);
void complete_page(void);

void lcd_update(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	switch(cur_page){
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <lcd_update+0x5c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b07      	cmp	r3, #7
 800188e:	d825      	bhi.n	80018dc <lcd_update+0x58>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <lcd_update+0x14>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018b9 	.word	0x080018b9
 800189c:	080018bf 	.word	0x080018bf
 80018a0:	080018bf 	.word	0x080018bf
 80018a4:	080018bf 	.word	0x080018bf
 80018a8:	080018c5 	.word	0x080018c5
 80018ac:	080018cb 	.word	0x080018cb
 80018b0:	080018d1 	.word	0x080018d1
 80018b4:	080018d7 	.word	0x080018d7
	case INIT_PAGE:
		welcome_page();
 80018b8:	f000 f814 	bl	80018e4 <welcome_page>
		break;
 80018bc:	e00e      	b.n	80018dc <lcd_update+0x58>
	case LOW_LEVEL_PAGE:
	case MED_LEVEL_PAGE:
	case HIGH_LEVEL_PAGE:
		mode_level_page();
 80018be:	f000 f8ed 	bl	8001a9c <mode_level_page>
		break;
 80018c2:	e00b      	b.n	80018dc <lcd_update+0x58>
	case COMPLETE_PAGE:
		complete_page();
 80018c4:	f000 f8c0 	bl	8001a48 <complete_page>
		break;
 80018c8:	e008      	b.n	80018dc <lcd_update+0x58>
	case DOOR_OPEN_PAGE:
		door_open_page();
 80018ca:	f000 f83f 	bl	800194c <door_open_page>
		break;
 80018ce:	e005      	b.n	80018dc <lcd_update+0x58>
	case LIMIT_SW_ERR_PAGE:
		limit_sw_err_page();
 80018d0:	f000 f890 	bl	80019f4 <limit_sw_err_page>
		break;
 80018d4:	e002      	b.n	80018dc <lcd_update+0x58>
	case HEATER_COIL_PAGE:
		heater_coil_page();
 80018d6:	f000 f863 	bl	80019a0 <heater_coil_page>
		break;
 80018da:	bf00      	nop
	}

}
<<<<<<< HEAD
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200002b1 	.word	0x200002b1
=======
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200002b1 	.word	0x200002b1
>>>>>>> majorchng

080018e4 <welcome_page>:

void welcome_page(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <welcome_page+0x54>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <welcome_page+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d006      	beq.n	8001902 <welcome_page+0x1e>
	{
		lcd_clear();
 80018f4:	f7ff ff5e 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <welcome_page+0x58>)
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <welcome_page+0x54>)
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e001      	b.n	8001906 <welcome_page+0x22>
	}
	else{
		lcd_home();
 8001902:	f7ff fe81 	bl	8001608 <lcd_home>
	}
	
	lcd_set_cursor(5, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	2005      	movs	r0, #5
 800190a:	f7ff ff89 	bl	8001820 <lcd_set_cursor>
	lcd_print("WELCOME!");
 800190e:	480c      	ldr	r0, [pc, #48]	; (8001940 <welcome_page+0x5c>)
 8001910:	f7ff ff70 	bl	80017f4 <lcd_print>
	lcd_set_cursor(-3,2);
 8001914:	2102      	movs	r1, #2
 8001916:	f06f 0002 	mvn.w	r0, #2
 800191a:	f7ff ff81 	bl	8001820 <lcd_set_cursor>
	lcd_print("Select a mode");
 800191e:	4809      	ldr	r0, [pc, #36]	; (8001944 <welcome_page+0x60>)
 8001920:	f7ff ff68 	bl	80017f4 <lcd_print>
	lcd_set_cursor(-3,3);
 8001924:	2103      	movs	r1, #3
 8001926:	f06f 0002 	mvn.w	r0, #2
 800192a:	f7ff ff79 	bl	8001820 <lcd_set_cursor>
	lcd_print("to start dryer");
 800192e:	4806      	ldr	r0, [pc, #24]	; (8001948 <welcome_page+0x64>)
 8001930:	f7ff ff60 	bl	80017f4 <lcd_print>
}
<<<<<<< HEAD
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200002b2 	.word	0x200002b2
 8001934:	200002b1 	.word	0x200002b1
 8001938:	0800821c 	.word	0x0800821c
 800193c:	08008228 	.word	0x08008228
 8001940:	08008238 	.word	0x08008238
=======
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200002b2 	.word	0x200002b2
 800193c:	200002b1 	.word	0x200002b1
 8001940:	08008264 	.word	0x08008264
 8001944:	08008270 	.word	0x08008270
 8001948:	08008280 	.word	0x08008280
>>>>>>> majorchng

0800194c <door_open_page>:

void door_open_page(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <door_open_page+0x44>)
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <door_open_page+0x48>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d006      	beq.n	800196a <door_open_page+0x1e>
	{
		lcd_clear();
 800195c:	f7ff ff2a 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <door_open_page+0x48>)
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <door_open_page+0x44>)
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	e001      	b.n	800196e <door_open_page+0x22>
	}
	else{
		lcd_home();
 800196a:	f7ff fe4d 	bl	8001608 <lcd_home>
	}

	lcd_set_cursor(6, 1);
 800196e:	2101      	movs	r1, #1
 8001970:	2006      	movs	r0, #6
 8001972:	f7ff ff55 	bl	8001820 <lcd_set_cursor>
	lcd_print("DOOR");
 8001976:	4808      	ldr	r0, [pc, #32]	; (8001998 <door_open_page+0x4c>)
 8001978:	f7ff ff3c 	bl	80017f4 <lcd_print>
	lcd_set_cursor(6,2);
 800197c:	2102      	movs	r1, #2
 800197e:	2006      	movs	r0, #6
 8001980:	f7ff ff4e 	bl	8001820 <lcd_set_cursor>
	lcd_print("OPEN");
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <door_open_page+0x50>)
 8001986:	f7ff ff35 	bl	80017f4 <lcd_print>
}
<<<<<<< HEAD
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200002b2 	.word	0x200002b2
 800198c:	200002b1 	.word	0x200002b1
 8001990:	08008248 	.word	0x08008248
 8001994:	08008250 	.word	0x08008250
=======
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200002b2 	.word	0x200002b2
 8001994:	200002b1 	.word	0x200002b1
 8001998:	08008290 	.word	0x08008290
 800199c:	08008298 	.word	0x08008298
>>>>>>> majorchng

080019a0 <heater_coil_page>:

void heater_coil_page(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <heater_coil_page+0x44>)
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <heater_coil_page+0x48>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d006      	beq.n	80019be <heater_coil_page+0x1e>
	{
		lcd_clear();
 80019b0:	f7ff ff00 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <heater_coil_page+0x48>)
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <heater_coil_page+0x44>)
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e001      	b.n	80019c2 <heater_coil_page+0x22>
	}
	else{
		lcd_home();
 80019be:	f7ff fe23 	bl	8001608 <lcd_home>
	}

	lcd_set_cursor(5, 1);
 80019c2:	2101      	movs	r1, #1
 80019c4:	2005      	movs	r0, #5
 80019c6:	f7ff ff2b 	bl	8001820 <lcd_set_cursor>
	lcd_print("HEATER");
 80019ca:	4808      	ldr	r0, [pc, #32]	; (80019ec <heater_coil_page+0x4c>)
 80019cc:	f7ff ff12 	bl	80017f4 <lcd_print>
	lcd_set_cursor(5,2);
 80019d0:	2102      	movs	r1, #2
 80019d2:	2005      	movs	r0, #5
 80019d4:	f7ff ff24 	bl	8001820 <lcd_set_cursor>
	lcd_print("ERROR");
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <heater_coil_page+0x50>)
 80019da:	f7ff ff0b 	bl	80017f4 <lcd_print>
}
<<<<<<< HEAD
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200002b2 	.word	0x200002b2
 80019e0:	200002b1 	.word	0x200002b1
 80019e4:	08008258 	.word	0x08008258
 80019e8:	08008260 	.word	0x08008260
=======
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200002b2 	.word	0x200002b2
 80019e8:	200002b1 	.word	0x200002b1
 80019ec:	080082a0 	.word	0x080082a0
 80019f0:	080082a8 	.word	0x080082a8
>>>>>>> majorchng

080019f4 <limit_sw_err_page>:

void limit_sw_err_page(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <limit_sw_err_page+0x44>)
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <limit_sw_err_page+0x48>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d006      	beq.n	8001a12 <limit_sw_err_page+0x1e>
	{
		lcd_clear();
 8001a04:	f7ff fed6 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <limit_sw_err_page+0x48>)
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <limit_sw_err_page+0x44>)
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e001      	b.n	8001a16 <limit_sw_err_page+0x22>
	}
	else{
		lcd_home();
 8001a12:	f7ff fdf9 	bl	8001608 <lcd_home>
	}

	lcd_set_cursor(5, 0);
 8001a16:	2100      	movs	r1, #0
 8001a18:	2005      	movs	r0, #5
 8001a1a:	f7ff ff01 	bl	8001820 <lcd_set_cursor>
	lcd_print("Limit");
 8001a1e:	4808      	ldr	r0, [pc, #32]	; (8001a40 <limit_sw_err_page+0x4c>)
 8001a20:	f7ff fee8 	bl	80017f4 <lcd_print>
	lcd_set_cursor(2, 2);
 8001a24:	2102      	movs	r1, #2
 8001a26:	2002      	movs	r0, #2
 8001a28:	f7ff fefa 	bl	8001820 <lcd_set_cursor>
	lcd_print("Err");
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <limit_sw_err_page+0x50>)
 8001a2e:	f7ff fee1 	bl	80017f4 <lcd_print>
}
<<<<<<< HEAD
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200002b2 	.word	0x200002b2
 8001a34:	200002b1 	.word	0x200002b1
 8001a38:	08008268 	.word	0x08008268
 8001a3c:	08008270 	.word	0x08008270
=======
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200002b2 	.word	0x200002b2
 8001a3c:	200002b1 	.word	0x200002b1
 8001a40:	080082b0 	.word	0x080082b0
 8001a44:	080082b8 	.word	0x080082b8
>>>>>>> majorchng

08001a48 <complete_page>:

void complete_page(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <complete_page+0x44>)
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <complete_page+0x48>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d006      	beq.n	8001a66 <complete_page+0x1e>
	{
		lcd_clear();
 8001a58:	f7ff feac 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <complete_page+0x48>)
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <complete_page+0x44>)
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	e001      	b.n	8001a6a <complete_page+0x22>
	}
	else{
		lcd_home();
 8001a66:	f7ff fdcf 	bl	8001608 <lcd_home>
	}

	lcd_set_cursor(4, 0);
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2004      	movs	r0, #4
 8001a6e:	f7ff fed7 	bl	8001820 <lcd_set_cursor>
	lcd_print("PROCESS");
 8001a72:	4808      	ldr	r0, [pc, #32]	; (8001a94 <complete_page+0x4c>)
 8001a74:	f7ff febe 	bl	80017f4 <lcd_print>
	lcd_set_cursor(0, 2);
 8001a78:	2102      	movs	r1, #2
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fed0 	bl	8001820 <lcd_set_cursor>
	lcd_print("COMPLETE");
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <complete_page+0x50>)
 8001a82:	f7ff feb7 	bl	80017f4 <lcd_print>
}
<<<<<<< HEAD
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200002b2 	.word	0x200002b2
 8001a88:	200002b1 	.word	0x200002b1
 8001a8c:	08008274 	.word	0x08008274
 8001a90:	0800827c 	.word	0x0800827c
=======
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200002b2 	.word	0x200002b2
 8001a90:	200002b1 	.word	0x200002b1
 8001a94:	080082bc 	.word	0x080082bc
 8001a98:	080082c4 	.word	0x080082c4
>>>>>>> majorchng

08001a9c <mode_level_page>:

void mode_level_page(void)
{
<<<<<<< HEAD
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	static uint16_t a = 0,b = 0;
	if(last_page!=cur_page)
 8001a98:	4b54      	ldr	r3, [pc, #336]	; (8001bec <mode_level_page+0x158>)
 8001a9a:	781a      	ldrb	r2, [r3, #0]
 8001a9c:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <mode_level_page+0x15c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d006      	beq.n	8001ab2 <mode_level_page+0x1e>
	{
		lcd_clear();
 8001aa4:	f7ff fe86 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 8001aa8:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <mode_level_page+0x15c>)
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <mode_level_page+0x158>)
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e001      	b.n	8001ab6 <mode_level_page+0x22>
	}
	else lcd_home();
 8001ab2:	f7ff fda9 	bl	8001608 <lcd_home>

	a = dryer.heatTime % 60;
 8001ab6:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <mode_level_page+0x160>)
 8001ab8:	885a      	ldrh	r2, [r3, #2]
 8001aba:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <mode_level_page+0x164>)
 8001abc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac0:	0959      	lsrs	r1, r3, #5
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	1a5b      	subs	r3, r3, r1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <mode_level_page+0x168>)
 8001ad0:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 8001ad2:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <mode_level_page+0x160>)
 8001ad4:	885b      	ldrh	r3, [r3, #2]
 8001ad6:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <mode_level_page+0x164>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <mode_level_page+0x16c>)
 8001ae2:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"h=%02d:%02d",b,a);
 8001ae4:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <mode_level_page+0x16c>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <mode_level_page+0x168>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	4945      	ldr	r1, [pc, #276]	; (8001c04 <mode_level_page+0x170>)
 8001af0:	4845      	ldr	r0, [pc, #276]	; (8001c08 <mode_level_page+0x174>)
 8001af2:	f004 f8df 	bl	8005cb4 <siprintf>
	lcd_set_cursor(0, 0);
 8001af6:	2100      	movs	r1, #0
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fe91 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001afe:	4842      	ldr	r0, [pc, #264]	; (8001c08 <mode_level_page+0x174>)
 8001b00:	f7ff fe78 	bl	80017f4 <lcd_print>

	a = dryer.coolTime % 60;
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <mode_level_page+0x160>)
 8001b06:	889a      	ldrh	r2, [r3, #4]
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <mode_level_page+0x164>)
 8001b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b0e:	0959      	lsrs	r1, r3, #5
 8001b10:	460b      	mov	r3, r1
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	1a5b      	subs	r3, r3, r1
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <mode_level_page+0x168>)
 8001b1e:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <mode_level_page+0x160>)
 8001b22:	889b      	ldrh	r3, [r3, #4]
 8001b24:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <mode_level_page+0x164>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b34      	ldr	r3, [pc, #208]	; (8001c00 <mode_level_page+0x16c>)
 8001b30:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"c=%02d:%02d",b,a);
 8001b32:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <mode_level_page+0x16c>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <mode_level_page+0x168>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	4933      	ldr	r1, [pc, #204]	; (8001c0c <mode_level_page+0x178>)
 8001b3e:	4832      	ldr	r0, [pc, #200]	; (8001c08 <mode_level_page+0x174>)
 8001b40:	f004 f8b8 	bl	8005cb4 <siprintf>
	lcd_set_cursor(9, 0);
 8001b44:	2100      	movs	r1, #0
 8001b46:	2009      	movs	r0, #9
 8001b48:	f7ff fe6a 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001b4c:	482e      	ldr	r0, [pc, #184]	; (8001c08 <mode_level_page+0x174>)
 8001b4e:	f7ff fe51 	bl	80017f4 <lcd_print>

	if(dryer.mode == LOW_LEVEL)sprintf(lcd_buf,"LEVEL: LOW");
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <mode_level_page+0x160>)
 8001b54:	785b      	ldrb	r3, [r3, #1]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d104      	bne.n	8001b64 <mode_level_page+0xd0>
 8001b5a:	492d      	ldr	r1, [pc, #180]	; (8001c10 <mode_level_page+0x17c>)
 8001b5c:	482a      	ldr	r0, [pc, #168]	; (8001c08 <mode_level_page+0x174>)
 8001b5e:	f004 f8a9 	bl	8005cb4 <siprintf>
 8001b62:	e010      	b.n	8001b86 <mode_level_page+0xf2>
	else if(dryer.mode == MED_LEVEL)sprintf(lcd_buf,"LEVEL: MEDIUM");
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <mode_level_page+0x160>)
 8001b66:	785b      	ldrb	r3, [r3, #1]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d104      	bne.n	8001b76 <mode_level_page+0xe2>
 8001b6c:	4929      	ldr	r1, [pc, #164]	; (8001c14 <mode_level_page+0x180>)
 8001b6e:	4826      	ldr	r0, [pc, #152]	; (8001c08 <mode_level_page+0x174>)
 8001b70:	f004 f8a0 	bl	8005cb4 <siprintf>
 8001b74:	e007      	b.n	8001b86 <mode_level_page+0xf2>
	else if(dryer.mode == HIGH_LEVEL)sprintf(lcd_buf,"LEVEL: HIGH");
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <mode_level_page+0x160>)
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d103      	bne.n	8001b86 <mode_level_page+0xf2>
 8001b7e:	4926      	ldr	r1, [pc, #152]	; (8001c18 <mode_level_page+0x184>)
 8001b80:	4821      	ldr	r0, [pc, #132]	; (8001c08 <mode_level_page+0x174>)
 8001b82:	f004 f897 	bl	8005cb4 <siprintf>
	else;

	lcd_set_cursor(2, 1);
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7ff fe49 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001b8e:	481e      	ldr	r0, [pc, #120]	; (8001c08 <mode_level_page+0x174>)
 8001b90:	f7ff fe30 	bl	80017f4 <lcd_print>

	sprintf(lcd_buf,"Set Temp : %02dC",dryer.setTemp);
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <mode_level_page+0x160>)
 8001b96:	799b      	ldrb	r3, [r3, #6]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4920      	ldr	r1, [pc, #128]	; (8001c1c <mode_level_page+0x188>)
 8001b9c:	481a      	ldr	r0, [pc, #104]	; (8001c08 <mode_level_page+0x174>)
 8001b9e:	f004 f889 	bl	8005cb4 <siprintf>
	lcd_set_cursor(0, 2);
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7ff fe3b 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001baa:	4817      	ldr	r0, [pc, #92]	; (8001c08 <mode_level_page+0x174>)
 8001bac:	f7ff fe22 	bl	80017f4 <lcd_print>
=======
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	static uint16_t a = 0,b = 0;
	if(last_page!=cur_page)
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <mode_level_page+0x15c>)
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	4b55      	ldr	r3, [pc, #340]	; (8001bfc <mode_level_page+0x160>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d006      	beq.n	8001aba <mode_level_page+0x1e>
	{
		lcd_clear();
 8001aac:	f7ff fe82 	bl	80017b4 <lcd_clear>
		last_page = cur_page;
 8001ab0:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <mode_level_page+0x160>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <mode_level_page+0x15c>)
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e001      	b.n	8001abe <mode_level_page+0x22>
	}
	else lcd_home();
 8001aba:	f7ff fda5 	bl	8001608 <lcd_home>

	a = dryer.heatTime % 60;
 8001abe:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <mode_level_page+0x164>)
 8001ac0:	885a      	ldrh	r2, [r3, #2]
 8001ac2:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <mode_level_page+0x168>)
 8001ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac8:	0959      	lsrs	r1, r3, #5
 8001aca:	460b      	mov	r3, r1
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	1a5b      	subs	r3, r3, r1
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <mode_level_page+0x16c>)
 8001ad8:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <mode_level_page+0x164>)
 8001adc:	885b      	ldrh	r3, [r3, #2]
 8001ade:	4a49      	ldr	r2, [pc, #292]	; (8001c04 <mode_level_page+0x168>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	095b      	lsrs	r3, r3, #5
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b48      	ldr	r3, [pc, #288]	; (8001c0c <mode_level_page+0x170>)
 8001aea:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"h=%02d:%02d",b,a);
 8001aec:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <mode_level_page+0x170>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <mode_level_page+0x16c>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	4946      	ldr	r1, [pc, #280]	; (8001c10 <mode_level_page+0x174>)
 8001af8:	4846      	ldr	r0, [pc, #280]	; (8001c14 <mode_level_page+0x178>)
 8001afa:	f004 f901 	bl	8005d00 <siprintf>
	lcd_set_cursor(0, 0);
 8001afe:	2100      	movs	r1, #0
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fe8d 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001b06:	4843      	ldr	r0, [pc, #268]	; (8001c14 <mode_level_page+0x178>)
 8001b08:	f7ff fe74 	bl	80017f4 <lcd_print>

	a = dryer.coolTime % 60;
 8001b0c:	4b3c      	ldr	r3, [pc, #240]	; (8001c00 <mode_level_page+0x164>)
 8001b0e:	889a      	ldrh	r2, [r3, #4]
 8001b10:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <mode_level_page+0x168>)
 8001b12:	fba3 1302 	umull	r1, r3, r3, r2
 8001b16:	0959      	lsrs	r1, r3, #5
 8001b18:	460b      	mov	r3, r1
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	1a5b      	subs	r3, r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <mode_level_page+0x16c>)
 8001b26:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 8001b28:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <mode_level_page+0x164>)
 8001b2a:	889b      	ldrh	r3, [r3, #4]
 8001b2c:	4a35      	ldr	r2, [pc, #212]	; (8001c04 <mode_level_page+0x168>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <mode_level_page+0x170>)
 8001b38:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"c=%02d:%02d",b,a);
 8001b3a:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <mode_level_page+0x170>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <mode_level_page+0x16c>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	4934      	ldr	r1, [pc, #208]	; (8001c18 <mode_level_page+0x17c>)
 8001b46:	4833      	ldr	r0, [pc, #204]	; (8001c14 <mode_level_page+0x178>)
 8001b48:	f004 f8da 	bl	8005d00 <siprintf>
	lcd_set_cursor(9, 0);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2009      	movs	r0, #9
 8001b50:	f7ff fe66 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001b54:	482f      	ldr	r0, [pc, #188]	; (8001c14 <mode_level_page+0x178>)
 8001b56:	f7ff fe4d 	bl	80017f4 <lcd_print>

	if(dryer.mode == LOW_LEVEL)sprintf(lcd_buf,"LEVEL: LOW");
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <mode_level_page+0x164>)
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d104      	bne.n	8001b6c <mode_level_page+0xd0>
 8001b62:	492e      	ldr	r1, [pc, #184]	; (8001c1c <mode_level_page+0x180>)
 8001b64:	482b      	ldr	r0, [pc, #172]	; (8001c14 <mode_level_page+0x178>)
 8001b66:	f004 f8cb 	bl	8005d00 <siprintf>
 8001b6a:	e010      	b.n	8001b8e <mode_level_page+0xf2>
	else if(dryer.mode == MED_LEVEL)sprintf(lcd_buf,"LEVEL: MEDIUM");
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <mode_level_page+0x164>)
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d104      	bne.n	8001b7e <mode_level_page+0xe2>
 8001b74:	492a      	ldr	r1, [pc, #168]	; (8001c20 <mode_level_page+0x184>)
 8001b76:	4827      	ldr	r0, [pc, #156]	; (8001c14 <mode_level_page+0x178>)
 8001b78:	f004 f8c2 	bl	8005d00 <siprintf>
 8001b7c:	e007      	b.n	8001b8e <mode_level_page+0xf2>
	else if(dryer.mode == HIGH_LEVEL)sprintf(lcd_buf,"LEVEL: HIGH");
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <mode_level_page+0x164>)
 8001b80:	785b      	ldrb	r3, [r3, #1]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d103      	bne.n	8001b8e <mode_level_page+0xf2>
 8001b86:	4927      	ldr	r1, [pc, #156]	; (8001c24 <mode_level_page+0x188>)
 8001b88:	4822      	ldr	r0, [pc, #136]	; (8001c14 <mode_level_page+0x178>)
 8001b8a:	f004 f8b9 	bl	8005d00 <siprintf>
	else;

	lcd_set_cursor(2, 1);
 8001b8e:	2101      	movs	r1, #1
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7ff fe45 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001b96:	481f      	ldr	r0, [pc, #124]	; (8001c14 <mode_level_page+0x178>)
 8001b98:	f7ff fe2c 	bl	80017f4 <lcd_print>

	sprintf(lcd_buf,"SetTemp: %02dC",dryer.setTemp);
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <mode_level_page+0x164>)
 8001b9e:	799b      	ldrb	r3, [r3, #6]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4921      	ldr	r1, [pc, #132]	; (8001c28 <mode_level_page+0x18c>)
 8001ba4:	481b      	ldr	r0, [pc, #108]	; (8001c14 <mode_level_page+0x178>)
 8001ba6:	f004 f8ab 	bl	8005d00 <siprintf>
	lcd_set_cursor(-1, 2);
 8001baa:	2102      	movs	r1, #2
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff fe36 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001bb4:	4817      	ldr	r0, [pc, #92]	; (8001c14 <mode_level_page+0x178>)
 8001bb6:	f7ff fe1d 	bl	80017f4 <lcd_print>
>>>>>>> majorchng

	//int temp = (int)Max6675_Read_Temp();

	if(cur_temp == -1 || cur_temp == 0)
<<<<<<< HEAD
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <mode_level_page+0x18c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d003      	beq.n	8001bc2 <mode_level_page+0x12e>
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <mode_level_page+0x18c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d104      	bne.n	8001bcc <mode_level_page+0x138>
	{
		sprintf(lcd_buf,"Cur Temp : ERR");
 8001bc2:	4918      	ldr	r1, [pc, #96]	; (8001c24 <mode_level_page+0x190>)
 8001bc4:	4810      	ldr	r0, [pc, #64]	; (8001c08 <mode_level_page+0x174>)
 8001bc6:	f004 f875 	bl	8005cb4 <siprintf>
 8001bca:	e006      	b.n	8001bda <mode_level_page+0x146>
	}
	else
	{
		sprintf(lcd_buf,"Cur Temp : %dC ",cur_temp);
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <mode_level_page+0x18c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4915      	ldr	r1, [pc, #84]	; (8001c28 <mode_level_page+0x194>)
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <mode_level_page+0x174>)
 8001bd6:	f004 f86d 	bl	8005cb4 <siprintf>
	}
	lcd_set_cursor(0, 3);
 8001bda:	2103      	movs	r1, #3
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff fe1f 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <mode_level_page+0x174>)
 8001be4:	f7ff fe06 	bl	80017f4 <lcd_print>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200002b2 	.word	0x200002b2
 8001bf0:	200002b1 	.word	0x200002b1
 8001bf4:	2000029c 	.word	0x2000029c
 8001bf8:	88888889 	.word	0x88888889
 8001bfc:	20000298 	.word	0x20000298
 8001c00:	2000029a 	.word	0x2000029a
 8001c04:	08008288 	.word	0x08008288
 8001c08:	20000248 	.word	0x20000248
 8001c0c:	08008294 	.word	0x08008294
 8001c10:	080082a0 	.word	0x080082a0
 8001c14:	080082ac 	.word	0x080082ac
 8001c18:	080082bc 	.word	0x080082bc
 8001c1c:	080082c8 	.word	0x080082c8
 8001c20:	20000004 	.word	0x20000004
 8001c24:	080082dc 	.word	0x080082dc
 8001c28:	080082ec 	.word	0x080082ec

08001c2c <__NVIC_EnableIRQ>:
=======
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <mode_level_page+0x190>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc2:	d003      	beq.n	8001bcc <mode_level_page+0x130>
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <mode_level_page+0x190>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d104      	bne.n	8001bd6 <mode_level_page+0x13a>
	{
		sprintf(lcd_buf,"CurTemp: ERR");
 8001bcc:	4918      	ldr	r1, [pc, #96]	; (8001c30 <mode_level_page+0x194>)
 8001bce:	4811      	ldr	r0, [pc, #68]	; (8001c14 <mode_level_page+0x178>)
 8001bd0:	f004 f896 	bl	8005d00 <siprintf>
 8001bd4:	e006      	b.n	8001be4 <mode_level_page+0x148>
	}
	else
	{
		sprintf(lcd_buf,"CurTemp: %dC ",cur_temp);
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <mode_level_page+0x190>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4915      	ldr	r1, [pc, #84]	; (8001c34 <mode_level_page+0x198>)
 8001bde:	480d      	ldr	r0, [pc, #52]	; (8001c14 <mode_level_page+0x178>)
 8001be0:	f004 f88e 	bl	8005d00 <siprintf>
	}
	lcd_set_cursor(-1, 3);
 8001be4:	2103      	movs	r1, #3
 8001be6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bea:	f7ff fe19 	bl	8001820 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <mode_level_page+0x178>)
 8001bf0:	f7ff fe00 	bl	80017f4 <lcd_print>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200002b2 	.word	0x200002b2
 8001bfc:	200002b1 	.word	0x200002b1
 8001c00:	2000029c 	.word	0x2000029c
 8001c04:	88888889 	.word	0x88888889
 8001c08:	20000298 	.word	0x20000298
 8001c0c:	2000029a 	.word	0x2000029a
 8001c10:	080082d0 	.word	0x080082d0
 8001c14:	20000248 	.word	0x20000248
 8001c18:	080082dc 	.word	0x080082dc
 8001c1c:	080082e8 	.word	0x080082e8
 8001c20:	080082f4 	.word	0x080082f4
 8001c24:	08008304 	.word	0x08008304
 8001c28:	08008310 	.word	0x08008310
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	08008320 	.word	0x08008320
 8001c34:	08008330 	.word	0x08008330

08001c38 <__NVIC_EnableIRQ>:
>>>>>>> majorchng
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4906      	ldr	r1, [pc, #24]	; (8001c60 <__NVIC_EnableIRQ+0x34>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_DisableIRQ>:
=======
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4906      	ldr	r1, [pc, #24]	; (8001c6c <__NVIC_EnableIRQ+0x34>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_DisableIRQ>:
>>>>>>> majorchng
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db12      	blt.n	8001c9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <__NVIC_DisableIRQ+0x44>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	3320      	adds	r3, #32
 8001c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db12      	blt.n	8001ca8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	490a      	ldr	r1, [pc, #40]	; (8001cb4 <__NVIC_DisableIRQ+0x44>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	3320      	adds	r3, #32
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> majorchng
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
<<<<<<< HEAD
 8001c90:	f3bf 8f4f 	dsb	sy
}
 8001c94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c96:	f3bf 8f6f 	isb	sy
}
 8001c9a:	bf00      	nop
=======
 8001c9c:	f3bf 8f4f 	dsb	sy
}
 8001ca0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ca2:	f3bf 8f6f 	isb	sy
}
 8001ca6:	bf00      	nop
>>>>>>> majorchng
    __DSB();
    __ISB();
  }
}
<<<<<<< HEAD
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__io_putchar>:
=======
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__io_putchar>:
>>>>>>> majorchng

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
<<<<<<< HEAD
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 8001cb4:	1d39      	adds	r1, r7, #4
 8001cb6:	230a      	movs	r3, #10
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4804      	ldr	r0, [pc, #16]	; (8001ccc <__io_putchar+0x20>)
 8001cbc:	f003 f96f 	bl	8004f9e <HAL_UART_Transmit>
	return ch;
 8001cc0:	687b      	ldr	r3, [r7, #4]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000035c 	.word	0x2000035c

08001cd0 <main>:
=======
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 8001cc0:	1d39      	adds	r1, r7, #4
 8001cc2:	230a      	movs	r3, #10
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <__io_putchar+0x20>)
 8001cc8:	f003 f98f 	bl	8004fea <HAL_UART_Transmit>
	return ch;
 8001ccc:	687b      	ldr	r3, [r7, #4]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000035c 	.word	0x2000035c

08001cdc <main>:
>>>>>>> majorchng

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
<<<<<<< HEAD
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
=======
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
>>>>>>> majorchng
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
<<<<<<< HEAD
 8001cd4:	f001 f93c 	bl	8002f50 <HAL_Init>
=======
 8001ce0:	f001 f95c 	bl	8002f9c <HAL_Init>
>>>>>>> majorchng
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
<<<<<<< HEAD
 8001cd8:	f000 fd1e 	bl	8002718 <SystemClock_Config>
=======
 8001ce4:	f000 fd26 	bl	8002734 <SystemClock_Config>
>>>>>>> majorchng
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
<<<<<<< HEAD
 8001cdc:	f7ff f912 	bl	8000f04 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001ce0:	f001 f89a 	bl	8002e18 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8001ce4:	f000 fea6 	bl	8002a34 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	input_init();
 8001ce8:	f7ff f92e 	bl	8000f48 <input_init>
	output_init();
 8001cec:	f000 fe22 	bl	8002934 <output_init>
	keypad_init();
 8001cf0:	f7ff fa18 	bl	8001124 <keypad_init>
	timer_init();
 8001cf4:	f001 f82e 	bl	8002d54 <timer_init>

	lcd_gpio_init();
 8001cf8:	f7ff fb5c 	bl	80013b4 <lcd_gpio_init>
	lcd_init(0);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff fbf3 	bl	80014e8 <lcd_init>
	lcd_begin(16, 4, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2104      	movs	r1, #4
 8001d06:	2010      	movs	r0, #16
 8001d08:	f7ff fc04 	bl	8001514 <lcd_begin>

	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 8001d0c:	48a4      	ldr	r0, [pc, #656]	; (8001fa0 <main+0x2d0>)
 8001d0e:	f003 ffc9 	bl	8005ca4 <puts>
	dryer.state = INIT;
 8001d12:	4ba4      	ldr	r3, [pc, #656]	; (8001fa4 <main+0x2d4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8001d18:	4ba2      	ldr	r3, [pc, #648]	; (8001fa4 <main+0x2d4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	705a      	strb	r2, [r3, #1]
	dryer.setTemp = 40U;
 8001d1e:	4ba1      	ldr	r3, [pc, #644]	; (8001fa4 <main+0x2d4>)
 8001d20:	2228      	movs	r2, #40	; 0x28
 8001d22:	719a      	strb	r2, [r3, #6]

	if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == HIGH) {
 8001d24:	2101      	movs	r1, #1
 8001d26:	48a0      	ldr	r0, [pc, #640]	; (8001fa8 <main+0x2d8>)
 8001d28:	f001 fc2a 	bl	8003580 <HAL_GPIO_ReadPin>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d108      	bne.n	8001d44 <main+0x74>
		door_open_flag = 1U;
 8001d32:	4b9e      	ldr	r3, [pc, #632]	; (8001fac <main+0x2dc>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8001d38:	4b9d      	ldr	r3, [pc, #628]	; (8001fb0 <main+0x2e0>)
 8001d3a:	2205      	movs	r2, #5
 8001d3c:	701a      	strb	r2, [r3, #0]
		lcd_update_flag = 1U;
 8001d3e:	4b9d      	ldr	r3, [pc, #628]	; (8001fb4 <main+0x2e4>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
	}

	lcd_update();
 8001d44:	f7ff fd9c 	bl	8001880 <lcd_update>
=======
 8001ce8:	f7ff f90c 	bl	8000f04 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001cec:	f001 f8ba 	bl	8002e64 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8001cf0:	f000 fec6 	bl	8002a80 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	input_init();
 8001cf4:	f7ff f928 	bl	8000f48 <input_init>
	output_init();
 8001cf8:	f000 fe42 	bl	8002980 <output_init>
	keypad_init();
 8001cfc:	f7ff fa12 	bl	8001124 <keypad_init>
	timer_init();
 8001d00:	f001 f84e 	bl	8002da0 <timer_init>

	lcd_gpio_init();
 8001d04:	f7ff fb56 	bl	80013b4 <lcd_gpio_init>
	lcd_init(0);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff fbed 	bl	80014e8 <lcd_init>
	lcd_begin(16, 4, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2104      	movs	r1, #4
 8001d12:	2010      	movs	r0, #16
 8001d14:	f7ff fbfe 	bl	8001514 <lcd_begin>

	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 8001d18:	48a4      	ldr	r0, [pc, #656]	; (8001fac <main+0x2d0>)
 8001d1a:	f003 ffe9 	bl	8005cf0 <puts>
	dryer.state = INIT;
 8001d1e:	4ba4      	ldr	r3, [pc, #656]	; (8001fb0 <main+0x2d4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8001d24:	4ba2      	ldr	r3, [pc, #648]	; (8001fb0 <main+0x2d4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	705a      	strb	r2, [r3, #1]
	dryer.setTemp = 40U;
 8001d2a:	4ba1      	ldr	r3, [pc, #644]	; (8001fb0 <main+0x2d4>)
 8001d2c:	2228      	movs	r2, #40	; 0x28
 8001d2e:	719a      	strb	r2, [r3, #6]

	if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == HIGH) {
 8001d30:	2101      	movs	r1, #1
 8001d32:	48a0      	ldr	r0, [pc, #640]	; (8001fb4 <main+0x2d8>)
 8001d34:	f001 fc4a 	bl	80035cc <HAL_GPIO_ReadPin>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d108      	bne.n	8001d50 <main+0x74>
		door_open_flag = 1U;
 8001d3e:	4b9e      	ldr	r3, [pc, #632]	; (8001fb8 <main+0x2dc>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8001d44:	4b9d      	ldr	r3, [pc, #628]	; (8001fbc <main+0x2e0>)
 8001d46:	2205      	movs	r2, #5
 8001d48:	701a      	strb	r2, [r3, #0]
		lcd_update_flag = 1U;
 8001d4a:	4b9d      	ldr	r3, [pc, #628]	; (8001fc0 <main+0x2e4>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
	}

	lcd_update();
 8001d50:	f7ff fd98 	bl	8001884 <lcd_update>
>>>>>>> majorchng
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (is_door_open() && (!door_open_flag)) {
<<<<<<< HEAD
 8001d48:	f7ff f96c 	bl	8001024 <is_door_open>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <main+0x96>
 8001d52:	4b96      	ldr	r3, [pc, #600]	; (8001fac <main+0x2dc>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d105      	bne.n	8001d66 <main+0x96>
			door_open_evt = 1U;
 8001d5a:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <main+0x2e8>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
			door_open_flag = 1U;
 8001d60:	4b92      	ldr	r3, [pc, #584]	; (8001fac <main+0x2dc>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
		}

		if (door_open_evt) {
 8001d66:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <main+0x2e8>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 808f 	beq.w	8001e8e <main+0x1be>
			static volatile uint8_t temp_pin_state = 0U;

			temp_pin_state = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 8001d70:	2101      	movs	r1, #1
 8001d72:	488d      	ldr	r0, [pc, #564]	; (8001fa8 <main+0x2d8>)
 8001d74:	f001 fc04 	bl	8003580 <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <main+0x2ec>)
 8001d7e:	701a      	strb	r2, [r3, #0]
			//printf("Pin: %d\r\n",temp_pin_state);

			if (temp_pin_state == HIGH) {
 8001d80:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <main+0x2ec>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d13d      	bne.n	8001e06 <main+0x136>

				door_open_flag = 1U;
 8001d8a:	4b88      	ldr	r3, [pc, #544]	; (8001fac <main+0x2dc>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001d90:	4b8b      	ldr	r3, [pc, #556]	; (8001fc0 <main+0x2f0>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
				cur_page = DOOR_OPEN_PAGE;
 8001d96:	4b86      	ldr	r3, [pc, #536]	; (8001fb0 <main+0x2e0>)
 8001d98:	2205      	movs	r2, #5
 8001d9a:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001d9c:	4b85      	ldr	r3, [pc, #532]	; (8001fb4 <main+0x2e4>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8001da2:	4b80      	ldr	r3, [pc, #512]	; (8001fa4 <main+0x2d4>)
 8001da4:	2203      	movs	r2, #3
 8001da6:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dae:	4885      	ldr	r0, [pc, #532]	; (8001fc4 <main+0x2f4>)
 8001db0:	f001 fbfd 	bl	80035ae <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dba:	487b      	ldr	r0, [pc, #492]	; (8001fa8 <main+0x2d8>)
 8001dbc:	f001 fbf7 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc6:	4880      	ldr	r0, [pc, #512]	; (8001fc8 <main+0x2f8>)
 8001dc8:	f001 fbf1 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dd2:	487d      	ldr	r0, [pc, #500]	; (8001fc8 <main+0x2f8>)
 8001dd4:	f001 fbeb 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dde:	487a      	ldr	r0, [pc, #488]	; (8001fc8 <main+0x2f8>)
 8001de0:	f001 fbe5 	bl	80035ae <HAL_GPIO_WritePin>

				if (dryer.state == COMPLETE) {
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <main+0x2d4>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d14d      	bne.n	8001e88 <main+0x1b8>
					//beep off
					timer_stop_evt = 1U;
 8001dec:	4b74      	ldr	r3, [pc, #464]	; (8001fc0 <main+0x2f0>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
					dryer.beepTime = 0U;
 8001df2:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <main+0x2d4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	71da      	strb	r2, [r3, #7]
					dryer.state = INIT;
 8001df8:	4b6a      	ldr	r3, [pc, #424]	; (8001fa4 <main+0x2d4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001dfe:	4b69      	ldr	r3, [pc, #420]	; (8001fa4 <main+0x2d4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	705a      	strb	r2, [r3, #1]
 8001e04:	e040      	b.n	8001e88 <main+0x1b8>
=======
 8001d54:	f7ff f966 	bl	8001024 <is_door_open>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <main+0x96>
 8001d5e:	4b96      	ldr	r3, [pc, #600]	; (8001fb8 <main+0x2dc>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <main+0x96>
			door_open_evt = 1U;
 8001d66:	4b97      	ldr	r3, [pc, #604]	; (8001fc4 <main+0x2e8>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
			door_open_flag = 1U;
 8001d6c:	4b92      	ldr	r3, [pc, #584]	; (8001fb8 <main+0x2dc>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
		}

		if (door_open_evt) {
 8001d72:	4b94      	ldr	r3, [pc, #592]	; (8001fc4 <main+0x2e8>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 808f 	beq.w	8001e9a <main+0x1be>
			static volatile uint8_t temp_pin_state = 0U;

			temp_pin_state = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	488d      	ldr	r0, [pc, #564]	; (8001fb4 <main+0x2d8>)
 8001d80:	f001 fc24 	bl	80035cc <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b8f      	ldr	r3, [pc, #572]	; (8001fc8 <main+0x2ec>)
 8001d8a:	701a      	strb	r2, [r3, #0]
			//printf("Pin: %d\r\n",temp_pin_state);

			if (temp_pin_state == HIGH) {
 8001d8c:	4b8e      	ldr	r3, [pc, #568]	; (8001fc8 <main+0x2ec>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d13d      	bne.n	8001e12 <main+0x136>

				door_open_flag = 1U;
 8001d96:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <main+0x2dc>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001d9c:	4b8b      	ldr	r3, [pc, #556]	; (8001fcc <main+0x2f0>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
				cur_page = DOOR_OPEN_PAGE;
 8001da2:	4b86      	ldr	r3, [pc, #536]	; (8001fbc <main+0x2e0>)
 8001da4:	2205      	movs	r2, #5
 8001da6:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001da8:	4b85      	ldr	r3, [pc, #532]	; (8001fc0 <main+0x2e4>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8001dae:	4b80      	ldr	r3, [pc, #512]	; (8001fb0 <main+0x2d4>)
 8001db0:	2203      	movs	r2, #3
 8001db2:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dba:	4885      	ldr	r0, [pc, #532]	; (8001fd0 <main+0x2f4>)
 8001dbc:	f001 fc1d 	bl	80035fa <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc6:	487b      	ldr	r0, [pc, #492]	; (8001fb4 <main+0x2d8>)
 8001dc8:	f001 fc17 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd2:	4880      	ldr	r0, [pc, #512]	; (8001fd4 <main+0x2f8>)
 8001dd4:	f001 fc11 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dde:	487d      	ldr	r0, [pc, #500]	; (8001fd4 <main+0x2f8>)
 8001de0:	f001 fc0b 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dea:	487a      	ldr	r0, [pc, #488]	; (8001fd4 <main+0x2f8>)
 8001dec:	f001 fc05 	bl	80035fa <HAL_GPIO_WritePin>

				if (dryer.state == COMPLETE) {
 8001df0:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <main+0x2d4>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d14d      	bne.n	8001e94 <main+0x1b8>
					//beep off
					timer_stop_evt = 1U;
 8001df8:	4b74      	ldr	r3, [pc, #464]	; (8001fcc <main+0x2f0>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
					dryer.beepTime = 0U;
 8001dfe:	4b6c      	ldr	r3, [pc, #432]	; (8001fb0 <main+0x2d4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	71da      	strb	r2, [r3, #7]
					dryer.state = INIT;
 8001e04:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <main+0x2d4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001e0a:	4b69      	ldr	r3, [pc, #420]	; (8001fb0 <main+0x2d4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	705a      	strb	r2, [r3, #1]
 8001e10:	e040      	b.n	8001e94 <main+0x1b8>
>>>>>>> majorchng
				}

				//stop

			} else {
				if (!limit_timeout_flag) {
<<<<<<< HEAD
 8001e06:	4b71      	ldr	r3, [pc, #452]	; (8001fcc <main+0x2fc>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d133      	bne.n	8001e76 <main+0x1a6>
					switch (dryer.mode) {
 8001e0e:	4b65      	ldr	r3, [pc, #404]	; (8001fa4 <main+0x2d4>)
 8001e10:	785b      	ldrb	r3, [r3, #1]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d832      	bhi.n	8001e7c <main+0x1ac>
 8001e16:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <main+0x14c>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e3b 	.word	0x08001e3b
 8001e24:	08001e4f 	.word	0x08001e4f
 8001e28:	08001e63 	.word	0x08001e63
					case NO_MODE:
						cur_page = INIT_PAGE;
 8001e2c:	4b60      	ldr	r3, [pc, #384]	; (8001fb0 <main+0x2e0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 8001e32:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <main+0x2d4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
						break;
 8001e38:	e020      	b.n	8001e7c <main+0x1ac>
					case LOW_LEVEL:
						cur_page = LOW_LEVEL_PAGE;
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <main+0x2e0>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001e40:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <main+0x2d4>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <main+0x300>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
						break;
 8001e4c:	e016      	b.n	8001e7c <main+0x1ac>
					case MED_LEVEL:
						cur_page = MED_LEVEL_PAGE;
 8001e4e:	4b58      	ldr	r3, [pc, #352]	; (8001fb0 <main+0x2e0>)
 8001e50:	2202      	movs	r2, #2
 8001e52:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <main+0x2d4>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001e5a:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <main+0x300>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
						break;
 8001e60:	e00c      	b.n	8001e7c <main+0x1ac>
					case HIGH_LEVEL:
						cur_page = HIGH_LEVEL_PAGE;
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <main+0x2e0>)
 8001e64:	2203      	movs	r2, #3
 8001e66:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001e68:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <main+0x2d4>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001e6e:	4b58      	ldr	r3, [pc, #352]	; (8001fd0 <main+0x300>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
						break;
 8001e74:	e002      	b.n	8001e7c <main+0x1ac>
					}
				} else
					cur_page = LIMIT_SW_ERR_PAGE;
 8001e76:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <main+0x2e0>)
 8001e78:	2206      	movs	r2, #6
 8001e7a:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <main+0x2e4>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
				door_open_flag = 0U;
 8001e82:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <main+0x2dc>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
			}
			door_open_evt = 0U;
 8001e88:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <main+0x2e8>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
=======
 8001e12:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <main+0x2fc>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d133      	bne.n	8001e82 <main+0x1a6>
					switch (dryer.mode) {
 8001e1a:	4b65      	ldr	r3, [pc, #404]	; (8001fb0 <main+0x2d4>)
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d832      	bhi.n	8001e88 <main+0x1ac>
 8001e22:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <main+0x14c>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e47 	.word	0x08001e47
 8001e30:	08001e5b 	.word	0x08001e5b
 8001e34:	08001e6f 	.word	0x08001e6f
					case NO_MODE:
						cur_page = INIT_PAGE;
 8001e38:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <main+0x2e0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	; (8001fb0 <main+0x2d4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
						break;
 8001e44:	e020      	b.n	8001e88 <main+0x1ac>
					case LOW_LEVEL:
						cur_page = LOW_LEVEL_PAGE;
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <main+0x2e0>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001e4c:	4b58      	ldr	r3, [pc, #352]	; (8001fb0 <main+0x2d4>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001e52:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <main+0x300>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
						break;
 8001e58:	e016      	b.n	8001e88 <main+0x1ac>
					case MED_LEVEL:
						cur_page = MED_LEVEL_PAGE;
 8001e5a:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <main+0x2e0>)
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <main+0x2d4>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001e66:	4b5d      	ldr	r3, [pc, #372]	; (8001fdc <main+0x300>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
						break;
 8001e6c:	e00c      	b.n	8001e88 <main+0x1ac>
					case HIGH_LEVEL:
						cur_page = HIGH_LEVEL_PAGE;
 8001e6e:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <main+0x2e0>)
 8001e70:	2203      	movs	r2, #3
 8001e72:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001e74:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <main+0x2d4>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001e7a:	4b58      	ldr	r3, [pc, #352]	; (8001fdc <main+0x300>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
						break;
 8001e80:	e002      	b.n	8001e88 <main+0x1ac>
					}
				} else
					cur_page = LIMIT_SW_ERR_PAGE;
 8001e82:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <main+0x2e0>)
 8001e84:	2206      	movs	r2, #6
 8001e86:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001e88:	4b4d      	ldr	r3, [pc, #308]	; (8001fc0 <main+0x2e4>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
				door_open_flag = 0U;
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <main+0x2dc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
			}
			door_open_evt = 0U;
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <main+0x2e8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
>>>>>>> majorchng
		}

		/*************************************************************************************************************
		 *************************************************HERTER COIL CHECK*******************************************
		 *************************************************************************************************************/
		if (!door_open_flag && !limit_timeout_flag && dryer.state != COMPLETE) {
<<<<<<< HEAD
 8001e8e:	4b47      	ldr	r3, [pc, #284]	; (8001fac <main+0x2dc>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d16f      	bne.n	8001f76 <main+0x2a6>
 8001e96:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <main+0x2fc>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d16b      	bne.n	8001f76 <main+0x2a6>
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <main+0x2d4>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d067      	beq.n	8001f76 <main+0x2a6>

			if (is_coil_open()) {
 8001ea6:	f7ff f8e5 	bl	8001074 <is_coil_open>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d02d      	beq.n	8001f0c <main+0x23c>

				coil_open_flag = 1U;
 8001eb0:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <main+0x304>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001eb6:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <main+0x2f0>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
				cur_page = HEATER_COIL_PAGE;
 8001ebc:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <main+0x2e0>)
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <main+0x2e4>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <main+0x2d4>)
 8001eca:	2203      	movs	r2, #3
 8001ecc:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed4:	483b      	ldr	r0, [pc, #236]	; (8001fc4 <main+0x2f4>)
 8001ed6:	f001 fb6a 	bl	80035ae <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee0:	4831      	ldr	r0, [pc, #196]	; (8001fa8 <main+0x2d8>)
 8001ee2:	f001 fb64 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eec:	4836      	ldr	r0, [pc, #216]	; (8001fc8 <main+0x2f8>)
 8001eee:	f001 fb5e 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ef8:	4833      	ldr	r0, [pc, #204]	; (8001fc8 <main+0x2f8>)
 8001efa:	f001 fb58 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f04:	4830      	ldr	r0, [pc, #192]	; (8001fc8 <main+0x2f8>)
 8001f06:	f001 fb52 	bl	80035ae <HAL_GPIO_WritePin>
 8001f0a:	e034      	b.n	8001f76 <main+0x2a6>
=======
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <main+0x2dc>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d16f      	bne.n	8001f82 <main+0x2a6>
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <main+0x2fc>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d16b      	bne.n	8001f82 <main+0x2a6>
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <main+0x2d4>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d067      	beq.n	8001f82 <main+0x2a6>

			if (is_coil_open()) {
 8001eb2:	f7ff f8df 	bl	8001074 <is_coil_open>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02d      	beq.n	8001f18 <main+0x23c>

				coil_open_flag = 1U;
 8001ebc:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <main+0x304>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001ec2:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <main+0x2f0>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
				cur_page = HEATER_COIL_PAGE;
 8001ec8:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <main+0x2e0>)
 8001eca:	2207      	movs	r2, #7
 8001ecc:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001ece:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <main+0x2e4>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8001ed4:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <main+0x2d4>)
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ee0:	483b      	ldr	r0, [pc, #236]	; (8001fd0 <main+0x2f4>)
 8001ee2:	f001 fb8a 	bl	80035fa <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eec:	4831      	ldr	r0, [pc, #196]	; (8001fb4 <main+0x2d8>)
 8001eee:	f001 fb84 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef8:	4836      	ldr	r0, [pc, #216]	; (8001fd4 <main+0x2f8>)
 8001efa:	f001 fb7e 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f04:	4833      	ldr	r0, [pc, #204]	; (8001fd4 <main+0x2f8>)
 8001f06:	f001 fb78 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f10:	4830      	ldr	r0, [pc, #192]	; (8001fd4 <main+0x2f8>)
 8001f12:	f001 fb72 	bl	80035fa <HAL_GPIO_WritePin>
 8001f16:	e034      	b.n	8001f82 <main+0x2a6>
>>>>>>> majorchng

				//stop

			} else {
				switch (dryer.mode) {
<<<<<<< HEAD
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <main+0x2d4>)
 8001f0e:	785b      	ldrb	r3, [r3, #1]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d827      	bhi.n	8001f64 <main+0x294>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <main+0x24c>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f3b 	.word	0x08001f3b
 8001f24:	08001f49 	.word	0x08001f49
 8001f28:	08001f57 	.word	0x08001f57
				case NO_MODE:
					cur_page = INIT_PAGE;
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <main+0x2e0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <main+0x2d4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
					break;
 8001f38:	e014      	b.n	8001f64 <main+0x294>
				case LOW_LEVEL:
					cur_page = LOW_LEVEL_PAGE;
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <main+0x2e0>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <main+0x2d4>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
					break;
 8001f46:	e00d      	b.n	8001f64 <main+0x294>
				case MED_LEVEL:
					cur_page = MED_LEVEL_PAGE;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <main+0x2e0>)
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <main+0x2d4>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
					break;
 8001f54:	e006      	b.n	8001f64 <main+0x294>
				case HIGH_LEVEL:
					cur_page = HIGH_LEVEL_PAGE;
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <main+0x2e0>)
 8001f58:	2203      	movs	r2, #3
 8001f5a:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <main+0x2d4>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
					break;
 8001f62:	bf00      	nop
				}
				timer_start_evt = 1U;
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <main+0x300>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <main+0x2e4>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
				coil_open_flag = 0U;
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <main+0x304>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
=======
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <main+0x2d4>)
 8001f1a:	785b      	ldrb	r3, [r3, #1]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d827      	bhi.n	8001f70 <main+0x294>
 8001f20:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <main+0x24c>)
 8001f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f26:	bf00      	nop
 8001f28:	08001f39 	.word	0x08001f39
 8001f2c:	08001f47 	.word	0x08001f47
 8001f30:	08001f55 	.word	0x08001f55
 8001f34:	08001f63 	.word	0x08001f63
				case NO_MODE:
					cur_page = INIT_PAGE;
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <main+0x2e0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <main+0x2d4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
					break;
 8001f44:	e014      	b.n	8001f70 <main+0x294>
				case LOW_LEVEL:
					cur_page = LOW_LEVEL_PAGE;
 8001f46:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <main+0x2e0>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <main+0x2d4>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
					break;
 8001f52:	e00d      	b.n	8001f70 <main+0x294>
				case MED_LEVEL:
					cur_page = MED_LEVEL_PAGE;
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <main+0x2e0>)
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <main+0x2d4>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
					break;
 8001f60:	e006      	b.n	8001f70 <main+0x294>
				case HIGH_LEVEL:
					cur_page = HIGH_LEVEL_PAGE;
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <main+0x2e0>)
 8001f64:	2203      	movs	r2, #3
 8001f66:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <main+0x2d4>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
					break;
 8001f6e:	bf00      	nop
				}
				timer_start_evt = 1U;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <main+0x300>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <main+0x2e4>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
				coil_open_flag = 0U;
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <main+0x304>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
>>>>>>> majorchng
		}

		/**********************************************************************************************************
		 **************************************** LCD SCREEN UPDATE RUTINE ****************************************
		 **********************************************************************************************************/
		if (lcd_update_flag) {
<<<<<<< HEAD
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <main+0x2e4>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <main+0x2b8>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 8001f7e:	f7ff fc7f 	bl	8001880 <lcd_update>
			lcd_update_flag = 0U;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <main+0x2e4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
=======
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <main+0x2e4>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d004      	beq.n	8001f94 <main+0x2b8>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 8001f8a:	f7ff fc7b 	bl	8001884 <lcd_update>
			lcd_update_flag = 0U;
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <main+0x2e4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
>>>>>>> majorchng
		}

		/***************************************************************************************************************
		 ******************************************* TIMER EVENT RUTINE ************************************************
		 ***************************************************************************************************************/
		if (timer_stop_evt) {
<<<<<<< HEAD
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <main+0x2f0>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d025      	beq.n	8001fdc <main+0x30c>
			//printf("Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 8001f90:	4811      	ldr	r0, [pc, #68]	; (8001fd8 <main+0x308>)
 8001f92:	f002 fc31 	bl	80047f8 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <main+0x2f0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e02c      	b.n	8001ff8 <main+0x328>
 8001f9e:	bf00      	nop
 8001fa0:	080082fc 	.word	0x080082fc
 8001fa4:	2000029c 	.word	0x2000029c
 8001fa8:	40010800 	.word	0x40010800
 8001fac:	200002a6 	.word	0x200002a6
 8001fb0:	200002b1 	.word	0x200002b1
 8001fb4:	200002b3 	.word	0x200002b3
 8001fb8:	200002a7 	.word	0x200002a7
 8001fbc:	200002b4 	.word	0x200002b4
 8001fc0:	200002a9 	.word	0x200002a9
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40010c00 	.word	0x40010c00
 8001fcc:	200002ac 	.word	0x200002ac
 8001fd0:	200002aa 	.word	0x200002aa
 8001fd4:	200002a8 	.word	0x200002a8
 8001fd8:	20000314 	.word	0x20000314

		} else if ((timer_start_evt) && (dryer.state == START)) {
 8001fdc:	4b96      	ldr	r3, [pc, #600]	; (8002238 <main+0x568>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <main+0x328>
 8001fe4:	4b95      	ldr	r3, [pc, #596]	; (800223c <main+0x56c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <main+0x328>
			HAL_TIM_Base_Start_IT(&htim4);
 8001fec:	4894      	ldr	r0, [pc, #592]	; (8002240 <main+0x570>)
 8001fee:	f002 fbb1 	bl	8004754 <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 8001ff2:	4b91      	ldr	r3, [pc, #580]	; (8002238 <main+0x568>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
=======
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <main+0x2f0>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d025      	beq.n	8001fe8 <main+0x30c>
			//printf("Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 8001f9c:	4811      	ldr	r0, [pc, #68]	; (8001fe4 <main+0x308>)
 8001f9e:	f002 fc51 	bl	8004844 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <main+0x2f0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e02c      	b.n	8002004 <main+0x328>
 8001faa:	bf00      	nop
 8001fac:	08008340 	.word	0x08008340
 8001fb0:	2000029c 	.word	0x2000029c
 8001fb4:	40010800 	.word	0x40010800
 8001fb8:	200002a6 	.word	0x200002a6
 8001fbc:	200002b1 	.word	0x200002b1
 8001fc0:	200002b3 	.word	0x200002b3
 8001fc4:	200002a7 	.word	0x200002a7
 8001fc8:	200002b4 	.word	0x200002b4
 8001fcc:	200002a9 	.word	0x200002a9
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	200002ac 	.word	0x200002ac
 8001fdc:	200002aa 	.word	0x200002aa
 8001fe0:	200002a8 	.word	0x200002a8
 8001fe4:	20000314 	.word	0x20000314

		} else if ((timer_start_evt) && (dryer.state == START)) {
 8001fe8:	4b96      	ldr	r3, [pc, #600]	; (8002244 <main+0x568>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <main+0x328>
 8001ff0:	4b95      	ldr	r3, [pc, #596]	; (8002248 <main+0x56c>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <main+0x328>
			HAL_TIM_Base_Start_IT(&htim4);
 8001ff8:	4894      	ldr	r0, [pc, #592]	; (800224c <main+0x570>)
 8001ffa:	f002 fbd1 	bl	80047a0 <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 8001ffe:	4b91      	ldr	r3, [pc, #580]	; (8002244 <main+0x568>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
>>>>>>> majorchng

		/***************************************************************************************************************
		 ********************************************* KEYBOARD SCANNING ***********************************************
		 ********************************** INCREMENT DECREMENT OF TIMER AND MODE SET **********************************
		 ***************************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
<<<<<<< HEAD
 8001ff8:	4b92      	ldr	r3, [pc, #584]	; (8002244 <main+0x574>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f040 81a3 	bne.w	8002348 <main+0x678>
 8002002:	4b91      	ldr	r3, [pc, #580]	; (8002248 <main+0x578>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 819e 	bne.w	8002348 <main+0x678>
 800200c:	4b8f      	ldr	r3, [pc, #572]	; (800224c <main+0x57c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 8199 	bne.w	8002348 <main+0x678>

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 8002016:	2201      	movs	r2, #1
 8002018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800201c:	488c      	ldr	r0, [pc, #560]	; (8002250 <main+0x580>)
 800201e:	f001 fac6 	bl	80035ae <HAL_GPIO_WritePin>

			if (dryer.state == START) {
 8002022:	4b86      	ldr	r3, [pc, #536]	; (800223c <main+0x56c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	f040 80bd 	bne.w	80021a6 <main+0x4d6>

				scaned_key = scan_keypad();
 800202c:	f7ff f8a8 	bl	8001180 <scan_keypad>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b87      	ldr	r3, [pc, #540]	; (8002254 <main+0x584>)
 8002036:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 8002038:	4b86      	ldr	r3, [pc, #536]	; (8002254 <main+0x584>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3b01      	subs	r3, #1
 800203e:	2b03      	cmp	r3, #3
 8002040:	f200 80ad 	bhi.w	800219e <main+0x4ce>
 8002044:	a201      	add	r2, pc, #4	; (adr r2, 800204c <main+0x37c>)
 8002046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204a:	bf00      	nop
 800204c:	0800205d 	.word	0x0800205d
 8002050:	080020a5 	.word	0x080020a5
 8002054:	080020cb 	.word	0x080020cb
 8002058:	08002173 	.word	0x08002173
				case LOW_KEY_PRESSED:
					lcd_update_flag = 1U;
 800205c:	4b7e      	ldr	r3, [pc, #504]	; (8002258 <main+0x588>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 8002062:	4b76      	ldr	r3, [pc, #472]	; (800223c <main+0x56c>)
 8002064:	7a1b      	ldrb	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <main+0x3a0>
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <main+0x3b6>
=======
 8002004:	4b92      	ldr	r3, [pc, #584]	; (8002250 <main+0x574>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	f040 81a3 	bne.w	8002354 <main+0x678>
 800200e:	4b91      	ldr	r3, [pc, #580]	; (8002254 <main+0x578>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f040 819e 	bne.w	8002354 <main+0x678>
 8002018:	4b8f      	ldr	r3, [pc, #572]	; (8002258 <main+0x57c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f040 8199 	bne.w	8002354 <main+0x678>

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002028:	488c      	ldr	r0, [pc, #560]	; (800225c <main+0x580>)
 800202a:	f001 fae6 	bl	80035fa <HAL_GPIO_WritePin>

			if (dryer.state == START) {
 800202e:	4b86      	ldr	r3, [pc, #536]	; (8002248 <main+0x56c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	f040 80bd 	bne.w	80021b2 <main+0x4d6>

				scaned_key = scan_keypad();
 8002038:	f7ff f8a2 	bl	8001180 <scan_keypad>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	4b87      	ldr	r3, [pc, #540]	; (8002260 <main+0x584>)
 8002042:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 8002044:	4b86      	ldr	r3, [pc, #536]	; (8002260 <main+0x584>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	3b01      	subs	r3, #1
 800204a:	2b03      	cmp	r3, #3
 800204c:	f200 80ad 	bhi.w	80021aa <main+0x4ce>
 8002050:	a201      	add	r2, pc, #4	; (adr r2, 8002058 <main+0x37c>)
 8002052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002056:	bf00      	nop
 8002058:	08002069 	.word	0x08002069
 800205c:	080020b1 	.word	0x080020b1
 8002060:	080020d7 	.word	0x080020d7
 8002064:	0800217f 	.word	0x0800217f
				case LOW_KEY_PRESSED:
					lcd_update_flag = 1U;
 8002068:	4b7e      	ldr	r3, [pc, #504]	; (8002264 <main+0x588>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <main+0x56c>)
 8002070:	7a1b      	ldrb	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <main+0x3a0>
 8002076:	2b01      	cmp	r3, #1
 8002078:	d00b      	beq.n	8002092 <main+0x3b6>
>>>>>>> majorchng
					case COOL_CYCLE:
						if (dryer.coolTime > 60U)
							dryer.coolTime -= 60U;
						break;
					}
					break;
<<<<<<< HEAD
 800206e:	e096      	b.n	800219e <main+0x4ce>
						if (dryer.heatTime > 60U)
 8002070:	4b72      	ldr	r3, [pc, #456]	; (800223c <main+0x56c>)
 8002072:	885b      	ldrh	r3, [r3, #2]
 8002074:	2b3c      	cmp	r3, #60	; 0x3c
 8002076:	d911      	bls.n	800209c <main+0x3cc>
							dryer.heatTime -= 60U;
 8002078:	4b70      	ldr	r3, [pc, #448]	; (800223c <main+0x56c>)
 800207a:	885b      	ldrh	r3, [r3, #2]
 800207c:	3b3c      	subs	r3, #60	; 0x3c
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b6e      	ldr	r3, [pc, #440]	; (800223c <main+0x56c>)
 8002082:	805a      	strh	r2, [r3, #2]
						break;
 8002084:	e00a      	b.n	800209c <main+0x3cc>
						if (dryer.coolTime > 60U)
 8002086:	4b6d      	ldr	r3, [pc, #436]	; (800223c <main+0x56c>)
 8002088:	889b      	ldrh	r3, [r3, #4]
 800208a:	2b3c      	cmp	r3, #60	; 0x3c
 800208c:	d908      	bls.n	80020a0 <main+0x3d0>
							dryer.coolTime -= 60U;
 800208e:	4b6b      	ldr	r3, [pc, #428]	; (800223c <main+0x56c>)
 8002090:	889b      	ldrh	r3, [r3, #4]
 8002092:	3b3c      	subs	r3, #60	; 0x3c
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b69      	ldr	r3, [pc, #420]	; (800223c <main+0x56c>)
 8002098:	809a      	strh	r2, [r3, #4]
						break;
 800209a:	e001      	b.n	80020a0 <main+0x3d0>
						break;
 800209c:	bf00      	nop
 800209e:	e07e      	b.n	800219e <main+0x4ce>
						break;
 80020a0:	bf00      	nop
					break;
 80020a2:	e07c      	b.n	800219e <main+0x4ce>

				case MED_KEY_PRESSED:
					lcd_update_flag = 1U;
 80020a4:	4b6c      	ldr	r3, [pc, #432]	; (8002258 <main+0x588>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80020aa:	4b64      	ldr	r3, [pc, #400]	; (800223c <main+0x56c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80020b0:	4b62      	ldr	r3, [pc, #392]	; (800223c <main+0x56c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 80020b6:	4b69      	ldr	r3, [pc, #420]	; (800225c <main+0x58c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80020bc:	4b66      	ldr	r3, [pc, #408]	; (8002258 <main+0x588>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <main+0x590>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
					break;
 80020c8:	e069      	b.n	800219e <main+0x4ce>

				case HIGH_KEY_PRESSED:
					lcd_update_flag = 1U;
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <main+0x588>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 80020d0:	4b5a      	ldr	r3, [pc, #360]	; (800223c <main+0x56c>)
 80020d2:	7a1b      	ldrb	r3, [r3, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <main+0x40e>
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d037      	beq.n	800214c <main+0x47c>
=======
 800207a:	e096      	b.n	80021aa <main+0x4ce>
						if (dryer.heatTime > 60U)
 800207c:	4b72      	ldr	r3, [pc, #456]	; (8002248 <main+0x56c>)
 800207e:	885b      	ldrh	r3, [r3, #2]
 8002080:	2b3c      	cmp	r3, #60	; 0x3c
 8002082:	d911      	bls.n	80020a8 <main+0x3cc>
							dryer.heatTime -= 60U;
 8002084:	4b70      	ldr	r3, [pc, #448]	; (8002248 <main+0x56c>)
 8002086:	885b      	ldrh	r3, [r3, #2]
 8002088:	3b3c      	subs	r3, #60	; 0x3c
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b6e      	ldr	r3, [pc, #440]	; (8002248 <main+0x56c>)
 800208e:	805a      	strh	r2, [r3, #2]
						break;
 8002090:	e00a      	b.n	80020a8 <main+0x3cc>
						if (dryer.coolTime > 60U)
 8002092:	4b6d      	ldr	r3, [pc, #436]	; (8002248 <main+0x56c>)
 8002094:	889b      	ldrh	r3, [r3, #4]
 8002096:	2b3c      	cmp	r3, #60	; 0x3c
 8002098:	d908      	bls.n	80020ac <main+0x3d0>
							dryer.coolTime -= 60U;
 800209a:	4b6b      	ldr	r3, [pc, #428]	; (8002248 <main+0x56c>)
 800209c:	889b      	ldrh	r3, [r3, #4]
 800209e:	3b3c      	subs	r3, #60	; 0x3c
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b69      	ldr	r3, [pc, #420]	; (8002248 <main+0x56c>)
 80020a4:	809a      	strh	r2, [r3, #4]
						break;
 80020a6:	e001      	b.n	80020ac <main+0x3d0>
						break;
 80020a8:	bf00      	nop
 80020aa:	e07e      	b.n	80021aa <main+0x4ce>
						break;
 80020ac:	bf00      	nop
					break;
 80020ae:	e07c      	b.n	80021aa <main+0x4ce>

				case MED_KEY_PRESSED:
					lcd_update_flag = 1U;
 80020b0:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <main+0x588>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80020b6:	4b64      	ldr	r3, [pc, #400]	; (8002248 <main+0x56c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80020bc:	4b62      	ldr	r3, [pc, #392]	; (8002248 <main+0x56c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 80020c2:	4b69      	ldr	r3, [pc, #420]	; (8002268 <main+0x58c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80020c8:	4b66      	ldr	r3, [pc, #408]	; (8002264 <main+0x588>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 80020ce:	4b67      	ldr	r3, [pc, #412]	; (800226c <main+0x590>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
					break;
 80020d4:	e069      	b.n	80021aa <main+0x4ce>

				case HIGH_KEY_PRESSED:
					lcd_update_flag = 1U;
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <main+0x588>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 80020dc:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <main+0x56c>)
 80020de:	7a1b      	ldrb	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <main+0x40e>
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d037      	beq.n	8002158 <main+0x47c>
>>>>>>> majorchng
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
<<<<<<< HEAD
 80020dc:	e05f      	b.n	800219e <main+0x4ce>
						if ((dryer.heatTime < 1800U)
 80020de:	4b57      	ldr	r3, [pc, #348]	; (800223c <main+0x56c>)
 80020e0:	885b      	ldrh	r3, [r3, #2]
 80020e2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80020e6:	d20a      	bcs.n	80020fe <main+0x42e>
								&& (dryer.mode == LOW_LEVEL))
 80020e8:	4b54      	ldr	r3, [pc, #336]	; (800223c <main+0x56c>)
 80020ea:	785b      	ldrb	r3, [r3, #1]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d106      	bne.n	80020fe <main+0x42e>
							dryer.heatTime += 60U;
 80020f0:	4b52      	ldr	r3, [pc, #328]	; (800223c <main+0x56c>)
 80020f2:	885b      	ldrh	r3, [r3, #2]
 80020f4:	333c      	adds	r3, #60	; 0x3c
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b50      	ldr	r3, [pc, #320]	; (800223c <main+0x56c>)
 80020fa:	805a      	strh	r2, [r3, #2]
 80020fc:	e01f      	b.n	800213e <main+0x46e>
						else if ((dryer.heatTime < 2400U)
 80020fe:	4b4f      	ldr	r3, [pc, #316]	; (800223c <main+0x56c>)
 8002100:	885b      	ldrh	r3, [r3, #2]
 8002102:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002106:	d20a      	bcs.n	800211e <main+0x44e>
								&& (dryer.mode == MED_LEVEL))
 8002108:	4b4c      	ldr	r3, [pc, #304]	; (800223c <main+0x56c>)
 800210a:	785b      	ldrb	r3, [r3, #1]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d106      	bne.n	800211e <main+0x44e>
							dryer.heatTime += 60U;
 8002110:	4b4a      	ldr	r3, [pc, #296]	; (800223c <main+0x56c>)
 8002112:	885b      	ldrh	r3, [r3, #2]
 8002114:	333c      	adds	r3, #60	; 0x3c
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b48      	ldr	r3, [pc, #288]	; (800223c <main+0x56c>)
 800211a:	805a      	strh	r2, [r3, #2]
 800211c:	e00f      	b.n	800213e <main+0x46e>
						else if ((dryer.heatTime < 3000U)
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <main+0x56c>)
 8002120:	885b      	ldrh	r3, [r3, #2]
 8002122:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002126:	4293      	cmp	r3, r2
 8002128:	d809      	bhi.n	800213e <main+0x46e>
								&& (dryer.mode == HIGH_LEVEL))
 800212a:	4b44      	ldr	r3, [pc, #272]	; (800223c <main+0x56c>)
 800212c:	785b      	ldrb	r3, [r3, #1]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d105      	bne.n	800213e <main+0x46e>
							dryer.heatTime += 60U;
 8002132:	4b42      	ldr	r3, [pc, #264]	; (800223c <main+0x56c>)
 8002134:	885b      	ldrh	r3, [r3, #2]
 8002136:	333c      	adds	r3, #60	; 0x3c
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b40      	ldr	r3, [pc, #256]	; (800223c <main+0x56c>)
 800213c:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 800213e:	4b3f      	ldr	r3, [pc, #252]	; (800223c <main+0x56c>)
 8002140:	885b      	ldrh	r3, [r3, #2]
 8002142:	4619      	mov	r1, r3
 8002144:	4847      	ldr	r0, [pc, #284]	; (8002264 <main+0x594>)
 8002146:	f003 fd27 	bl	8005b98 <iprintf>
						break;
 800214a:	e011      	b.n	8002170 <main+0x4a0>
						if (dryer.coolTime < 900U)
 800214c:	4b3b      	ldr	r3, [pc, #236]	; (800223c <main+0x56c>)
 800214e:	889b      	ldrh	r3, [r3, #4]
 8002150:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002154:	d205      	bcs.n	8002162 <main+0x492>
							dryer.coolTime += 60U;
 8002156:	4b39      	ldr	r3, [pc, #228]	; (800223c <main+0x56c>)
 8002158:	889b      	ldrh	r3, [r3, #4]
 800215a:	333c      	adds	r3, #60	; 0x3c
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b37      	ldr	r3, [pc, #220]	; (800223c <main+0x56c>)
 8002160:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <main+0x56c>)
 8002164:	889b      	ldrh	r3, [r3, #4]
 8002166:	4619      	mov	r1, r3
 8002168:	483f      	ldr	r0, [pc, #252]	; (8002268 <main+0x598>)
 800216a:	f003 fd15 	bl	8005b98 <iprintf>
						break;
 800216e:	bf00      	nop
					break;
 8002170:	e015      	b.n	800219e <main+0x4ce>

				case FN_KEY_PRESSED:
					lcd_update_flag = 1U;
 8002172:	4b39      	ldr	r3, [pc, #228]	; (8002258 <main+0x588>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 0U;
 8002178:	4b30      	ldr	r3, [pc, #192]	; (800223c <main+0x56c>)
 800217a:	2200      	movs	r2, #0
 800217c:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <main+0x56c>)
 8002180:	2201      	movs	r2, #1
 8002182:	721a      	strb	r2, [r3, #8]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <main+0x56c>)
 8002186:	885b      	ldrh	r3, [r3, #2]
 8002188:	4619      	mov	r1, r3
 800218a:	4836      	ldr	r0, [pc, #216]	; (8002264 <main+0x594>)
 800218c:	f003 fd04 	bl	8005b98 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <main+0x56c>)
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	4619      	mov	r1, r3
 8002196:	4834      	ldr	r0, [pc, #208]	; (8002268 <main+0x598>)
 8002198:	f003 fcfe 	bl	8005b98 <iprintf>
					break;
 800219c:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <main+0x584>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e0d0      	b.n	8002348 <main+0x678>

			} else if (dryer.state == INIT) {
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <main+0x56c>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 80cc 	bne.w	8002348 <main+0x678>

				scaned_key = scan_keypad();
 80021b0:	f7fe ffe6 	bl	8001180 <scan_keypad>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461a      	mov	r2, r3
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <main+0x584>)
 80021ba:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <main+0x584>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	f000 808d 	beq.w	80022e0 <main+0x610>
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	f300 80ba 	bgt.w	8002340 <main+0x670>
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d002      	beq.n	80021d6 <main+0x506>
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d055      	beq.n	8002280 <main+0x5b0>
=======
 80020e8:	e05f      	b.n	80021aa <main+0x4ce>
						if ((dryer.heatTime < 1800U)
 80020ea:	4b57      	ldr	r3, [pc, #348]	; (8002248 <main+0x56c>)
 80020ec:	885b      	ldrh	r3, [r3, #2]
 80020ee:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80020f2:	d20a      	bcs.n	800210a <main+0x42e>
								&& (dryer.mode == LOW_LEVEL))
 80020f4:	4b54      	ldr	r3, [pc, #336]	; (8002248 <main+0x56c>)
 80020f6:	785b      	ldrb	r3, [r3, #1]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <main+0x42e>
							dryer.heatTime += 60U;
 80020fc:	4b52      	ldr	r3, [pc, #328]	; (8002248 <main+0x56c>)
 80020fe:	885b      	ldrh	r3, [r3, #2]
 8002100:	333c      	adds	r3, #60	; 0x3c
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b50      	ldr	r3, [pc, #320]	; (8002248 <main+0x56c>)
 8002106:	805a      	strh	r2, [r3, #2]
 8002108:	e01f      	b.n	800214a <main+0x46e>
						else if ((dryer.heatTime < 2400U)
 800210a:	4b4f      	ldr	r3, [pc, #316]	; (8002248 <main+0x56c>)
 800210c:	885b      	ldrh	r3, [r3, #2]
 800210e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002112:	d20a      	bcs.n	800212a <main+0x44e>
								&& (dryer.mode == MED_LEVEL))
 8002114:	4b4c      	ldr	r3, [pc, #304]	; (8002248 <main+0x56c>)
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d106      	bne.n	800212a <main+0x44e>
							dryer.heatTime += 60U;
 800211c:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <main+0x56c>)
 800211e:	885b      	ldrh	r3, [r3, #2]
 8002120:	333c      	adds	r3, #60	; 0x3c
 8002122:	b29a      	uxth	r2, r3
 8002124:	4b48      	ldr	r3, [pc, #288]	; (8002248 <main+0x56c>)
 8002126:	805a      	strh	r2, [r3, #2]
 8002128:	e00f      	b.n	800214a <main+0x46e>
						else if ((dryer.heatTime < 3000U)
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <main+0x56c>)
 800212c:	885b      	ldrh	r3, [r3, #2]
 800212e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002132:	4293      	cmp	r3, r2
 8002134:	d809      	bhi.n	800214a <main+0x46e>
								&& (dryer.mode == HIGH_LEVEL))
 8002136:	4b44      	ldr	r3, [pc, #272]	; (8002248 <main+0x56c>)
 8002138:	785b      	ldrb	r3, [r3, #1]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d105      	bne.n	800214a <main+0x46e>
							dryer.heatTime += 60U;
 800213e:	4b42      	ldr	r3, [pc, #264]	; (8002248 <main+0x56c>)
 8002140:	885b      	ldrh	r3, [r3, #2]
 8002142:	333c      	adds	r3, #60	; 0x3c
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b40      	ldr	r3, [pc, #256]	; (8002248 <main+0x56c>)
 8002148:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 800214a:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <main+0x56c>)
 800214c:	885b      	ldrh	r3, [r3, #2]
 800214e:	4619      	mov	r1, r3
 8002150:	4847      	ldr	r0, [pc, #284]	; (8002270 <main+0x594>)
 8002152:	f003 fd47 	bl	8005be4 <iprintf>
						break;
 8002156:	e011      	b.n	800217c <main+0x4a0>
						if (dryer.coolTime < 900U)
 8002158:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <main+0x56c>)
 800215a:	889b      	ldrh	r3, [r3, #4]
 800215c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002160:	d205      	bcs.n	800216e <main+0x492>
							dryer.coolTime += 60U;
 8002162:	4b39      	ldr	r3, [pc, #228]	; (8002248 <main+0x56c>)
 8002164:	889b      	ldrh	r3, [r3, #4]
 8002166:	333c      	adds	r3, #60	; 0x3c
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b37      	ldr	r3, [pc, #220]	; (8002248 <main+0x56c>)
 800216c:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 800216e:	4b36      	ldr	r3, [pc, #216]	; (8002248 <main+0x56c>)
 8002170:	889b      	ldrh	r3, [r3, #4]
 8002172:	4619      	mov	r1, r3
 8002174:	483f      	ldr	r0, [pc, #252]	; (8002274 <main+0x598>)
 8002176:	f003 fd35 	bl	8005be4 <iprintf>
						break;
 800217a:	bf00      	nop
					break;
 800217c:	e015      	b.n	80021aa <main+0x4ce>

				case FN_KEY_PRESSED:
					lcd_update_flag = 1U;
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <main+0x588>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 0U;
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <main+0x56c>)
 8002186:	2200      	movs	r2, #0
 8002188:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 800218a:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <main+0x56c>)
 800218c:	2201      	movs	r2, #1
 800218e:	721a      	strb	r2, [r3, #8]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <main+0x56c>)
 8002192:	885b      	ldrh	r3, [r3, #2]
 8002194:	4619      	mov	r1, r3
 8002196:	4836      	ldr	r0, [pc, #216]	; (8002270 <main+0x594>)
 8002198:	f003 fd24 	bl	8005be4 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <main+0x56c>)
 800219e:	889b      	ldrh	r3, [r3, #4]
 80021a0:	4619      	mov	r1, r3
 80021a2:	4834      	ldr	r0, [pc, #208]	; (8002274 <main+0x598>)
 80021a4:	f003 fd1e 	bl	8005be4 <iprintf>
					break;
 80021a8:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <main+0x584>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e0d0      	b.n	8002354 <main+0x678>

			} else if (dryer.state == INIT) {
 80021b2:	4b25      	ldr	r3, [pc, #148]	; (8002248 <main+0x56c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 80cc 	bne.w	8002354 <main+0x678>

				scaned_key = scan_keypad();
 80021bc:	f7fe ffe0 	bl	8001180 <scan_keypad>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <main+0x584>)
 80021c6:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <main+0x584>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	f000 808d 	beq.w	80022ec <main+0x610>
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	f300 80ba 	bgt.w	800234c <main+0x670>
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d002      	beq.n	80021e2 <main+0x506>
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d055      	beq.n	800228c <main+0x5b0>
>>>>>>> majorchng
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
							sizeof("HIGH_LEVEL\r\n"), 10);
					break;

				default:
					break;
<<<<<<< HEAD
 80021d4:	e0b4      	b.n	8002340 <main+0x670>
					dryer.mode = LOW_LEVEL;
 80021d6:	4b19      	ldr	r3, [pc, #100]	; (800223c <main+0x56c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <main+0x56c>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <main+0x56c>)
 80021e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80021e8:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <main+0x56c>)
 80021ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021f0:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <main+0x56c>)
 80021f4:	221e      	movs	r2, #30
 80021f6:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 40U;
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <main+0x56c>)
 80021fa:	2228      	movs	r2, #40	; 0x28
 80021fc:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <main+0x56c>)
 8002200:	2200      	movs	r2, #0
 8002202:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <main+0x59c>)
 8002206:	221e      	movs	r2, #30
 8002208:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <main+0x5a0>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <main+0x5a4>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <main+0x568>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
					cur_page = LOW_LEVEL_PAGE;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <main+0x58c>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <main+0x588>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 8002228:	230a      	movs	r3, #10
 800222a:	220c      	movs	r2, #12
 800222c:	4912      	ldr	r1, [pc, #72]	; (8002278 <main+0x5a8>)
 800222e:	4813      	ldr	r0, [pc, #76]	; (800227c <main+0x5ac>)
 8002230:	f002 feb5 	bl	8004f9e <HAL_UART_Transmit>
					break;
 8002234:	e085      	b.n	8002342 <main+0x672>
 8002236:	bf00      	nop
 8002238:	200002aa 	.word	0x200002aa
 800223c:	2000029c 	.word	0x2000029c
 8002240:	20000314 	.word	0x20000314
 8002244:	200002a6 	.word	0x200002a6
 8002248:	200002a8 	.word	0x200002a8
 800224c:	200002ac 	.word	0x200002ac
 8002250:	40011000 	.word	0x40011000
 8002254:	200002ab 	.word	0x200002ab
 8002258:	200002b3 	.word	0x200002b3
 800225c:	200002b1 	.word	0x200002b1
 8002260:	200002a9 	.word	0x200002a9
 8002264:	08008304 	.word	0x08008304
 8002268:	08008314 	.word	0x08008314
 800226c:	20000008 	.word	0x20000008
 8002270:	200002ad 	.word	0x200002ad
 8002274:	200002ae 	.word	0x200002ae
 8002278:	08008324 	.word	0x08008324
 800227c:	2000035c 	.word	0x2000035c
					dryer.mode = MED_LEVEL;
 8002280:	4baa      	ldr	r3, [pc, #680]	; (800252c <main+0x85c>)
 8002282:	2202      	movs	r2, #2
 8002284:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 8002286:	4ba9      	ldr	r3, [pc, #676]	; (800252c <main+0x85c>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 800228c:	4ba7      	ldr	r3, [pc, #668]	; (800252c <main+0x85c>)
 800228e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002292:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8002294:	4ba5      	ldr	r3, [pc, #660]	; (800252c <main+0x85c>)
 8002296:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800229a:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 800229c:	4ba3      	ldr	r3, [pc, #652]	; (800252c <main+0x85c>)
 800229e:	221e      	movs	r2, #30
 80022a0:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 70U;
 80022a2:	4ba2      	ldr	r3, [pc, #648]	; (800252c <main+0x85c>)
 80022a4:	2246      	movs	r2, #70	; 0x46
 80022a6:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 80022a8:	4ba0      	ldr	r3, [pc, #640]	; (800252c <main+0x85c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 80022ae:	4ba0      	ldr	r3, [pc, #640]	; (8002530 <main+0x860>)
 80022b0:	221e      	movs	r2, #30
 80022b2:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 80022b4:	4b9f      	ldr	r3, [pc, #636]	; (8002534 <main+0x864>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 80022ba:	4b9f      	ldr	r3, [pc, #636]	; (8002538 <main+0x868>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 80022c0:	4b9e      	ldr	r3, [pc, #632]	; (800253c <main+0x86c>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
					cur_page = MED_LEVEL_PAGE;
 80022c6:	4b9e      	ldr	r3, [pc, #632]	; (8002540 <main+0x870>)
 80022c8:	2202      	movs	r2, #2
 80022ca:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80022cc:	4b9d      	ldr	r3, [pc, #628]	; (8002544 <main+0x874>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 80022d2:	230a      	movs	r3, #10
 80022d4:	220c      	movs	r2, #12
 80022d6:	499c      	ldr	r1, [pc, #624]	; (8002548 <main+0x878>)
 80022d8:	489c      	ldr	r0, [pc, #624]	; (800254c <main+0x87c>)
 80022da:	f002 fe60 	bl	8004f9e <HAL_UART_Transmit>
					break;
 80022de:	e030      	b.n	8002342 <main+0x672>
					dryer.mode = HIGH_LEVEL;
 80022e0:	4b92      	ldr	r3, [pc, #584]	; (800252c <main+0x85c>)
 80022e2:	2203      	movs	r2, #3
 80022e4:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80022e6:	4b91      	ldr	r3, [pc, #580]	; (800252c <main+0x85c>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 80022ec:	4b8f      	ldr	r3, [pc, #572]	; (800252c <main+0x85c>)
 80022ee:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80022f2:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80022f4:	4b8d      	ldr	r3, [pc, #564]	; (800252c <main+0x85c>)
 80022f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022fa:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80022fc:	4b8b      	ldr	r3, [pc, #556]	; (800252c <main+0x85c>)
 80022fe:	221e      	movs	r2, #30
 8002300:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 90U;
 8002302:	4b8a      	ldr	r3, [pc, #552]	; (800252c <main+0x85c>)
 8002304:	225a      	movs	r2, #90	; 0x5a
 8002306:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8002308:	4b88      	ldr	r3, [pc, #544]	; (800252c <main+0x85c>)
 800230a:	2200      	movs	r2, #0
 800230c:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <main+0x860>)
 8002310:	221e      	movs	r2, #30
 8002312:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8002314:	4b87      	ldr	r3, [pc, #540]	; (8002534 <main+0x864>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 800231a:	4b87      	ldr	r3, [pc, #540]	; (8002538 <main+0x868>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8002320:	4b86      	ldr	r3, [pc, #536]	; (800253c <main+0x86c>)
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
					cur_page = HIGH_LEVEL_PAGE;
 8002326:	4b86      	ldr	r3, [pc, #536]	; (8002540 <main+0x870>)
 8002328:	2203      	movs	r2, #3
 800232a:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 800232c:	4b85      	ldr	r3, [pc, #532]	; (8002544 <main+0x874>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 8002332:	230a      	movs	r3, #10
 8002334:	220d      	movs	r2, #13
 8002336:	4986      	ldr	r1, [pc, #536]	; (8002550 <main+0x880>)
 8002338:	4884      	ldr	r0, [pc, #528]	; (800254c <main+0x87c>)
 800233a:	f002 fe30 	bl	8004f9e <HAL_UART_Transmit>
					break;
 800233e:	e000      	b.n	8002342 <main+0x672>
					break;
 8002340:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 8002342:	4b84      	ldr	r3, [pc, #528]	; (8002554 <main+0x884>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
=======
 80021e0:	e0b4      	b.n	800234c <main+0x670>
					dryer.mode = LOW_LEVEL;
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <main+0x56c>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <main+0x56c>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <main+0x56c>)
 80021f0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80021f4:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <main+0x56c>)
 80021f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021fc:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <main+0x56c>)
 8002200:	221e      	movs	r2, #30
 8002202:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 40U;
 8002204:	4b10      	ldr	r3, [pc, #64]	; (8002248 <main+0x56c>)
 8002206:	2228      	movs	r2, #40	; 0x28
 8002208:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <main+0x56c>)
 800220c:	2200      	movs	r2, #0
 800220e:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <main+0x59c>)
 8002212:	221e      	movs	r2, #30
 8002214:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <main+0x5a0>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <main+0x5a4>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <main+0x568>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
					cur_page = LOW_LEVEL_PAGE;
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <main+0x58c>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <main+0x588>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 8002234:	230a      	movs	r3, #10
 8002236:	220c      	movs	r2, #12
 8002238:	4912      	ldr	r1, [pc, #72]	; (8002284 <main+0x5a8>)
 800223a:	4813      	ldr	r0, [pc, #76]	; (8002288 <main+0x5ac>)
 800223c:	f002 fed5 	bl	8004fea <HAL_UART_Transmit>
					break;
 8002240:	e085      	b.n	800234e <main+0x672>
 8002242:	bf00      	nop
 8002244:	200002aa 	.word	0x200002aa
 8002248:	2000029c 	.word	0x2000029c
 800224c:	20000314 	.word	0x20000314
 8002250:	200002a6 	.word	0x200002a6
 8002254:	200002a8 	.word	0x200002a8
 8002258:	200002ac 	.word	0x200002ac
 800225c:	40011000 	.word	0x40011000
 8002260:	200002ab 	.word	0x200002ab
 8002264:	200002b3 	.word	0x200002b3
 8002268:	200002b1 	.word	0x200002b1
 800226c:	200002a9 	.word	0x200002a9
 8002270:	08008348 	.word	0x08008348
 8002274:	08008358 	.word	0x08008358
 8002278:	20000008 	.word	0x20000008
 800227c:	200002ad 	.word	0x200002ad
 8002280:	200002ae 	.word	0x200002ae
 8002284:	08008368 	.word	0x08008368
 8002288:	2000035c 	.word	0x2000035c
					dryer.mode = MED_LEVEL;
 800228c:	4baa      	ldr	r3, [pc, #680]	; (8002538 <main+0x85c>)
 800228e:	2202      	movs	r2, #2
 8002290:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 8002292:	4ba9      	ldr	r3, [pc, #676]	; (8002538 <main+0x85c>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 8002298:	4ba7      	ldr	r3, [pc, #668]	; (8002538 <main+0x85c>)
 800229a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800229e:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80022a0:	4ba5      	ldr	r3, [pc, #660]	; (8002538 <main+0x85c>)
 80022a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022a6:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80022a8:	4ba3      	ldr	r3, [pc, #652]	; (8002538 <main+0x85c>)
 80022aa:	221e      	movs	r2, #30
 80022ac:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 70U;
 80022ae:	4ba2      	ldr	r3, [pc, #648]	; (8002538 <main+0x85c>)
 80022b0:	2246      	movs	r2, #70	; 0x46
 80022b2:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 80022b4:	4ba0      	ldr	r3, [pc, #640]	; (8002538 <main+0x85c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 80022ba:	4ba0      	ldr	r3, [pc, #640]	; (800253c <main+0x860>)
 80022bc:	221e      	movs	r2, #30
 80022be:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 80022c0:	4b9f      	ldr	r3, [pc, #636]	; (8002540 <main+0x864>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 80022c6:	4b9f      	ldr	r3, [pc, #636]	; (8002544 <main+0x868>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 80022cc:	4b9e      	ldr	r3, [pc, #632]	; (8002548 <main+0x86c>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
					cur_page = MED_LEVEL_PAGE;
 80022d2:	4b9e      	ldr	r3, [pc, #632]	; (800254c <main+0x870>)
 80022d4:	2202      	movs	r2, #2
 80022d6:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80022d8:	4b9d      	ldr	r3, [pc, #628]	; (8002550 <main+0x874>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 80022de:	230a      	movs	r3, #10
 80022e0:	220c      	movs	r2, #12
 80022e2:	499c      	ldr	r1, [pc, #624]	; (8002554 <main+0x878>)
 80022e4:	489c      	ldr	r0, [pc, #624]	; (8002558 <main+0x87c>)
 80022e6:	f002 fe80 	bl	8004fea <HAL_UART_Transmit>
					break;
 80022ea:	e030      	b.n	800234e <main+0x672>
					dryer.mode = HIGH_LEVEL;
 80022ec:	4b92      	ldr	r3, [pc, #584]	; (8002538 <main+0x85c>)
 80022ee:	2203      	movs	r2, #3
 80022f0:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80022f2:	4b91      	ldr	r3, [pc, #580]	; (8002538 <main+0x85c>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 80022f8:	4b8f      	ldr	r3, [pc, #572]	; (8002538 <main+0x85c>)
 80022fa:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80022fe:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8002300:	4b8d      	ldr	r3, [pc, #564]	; (8002538 <main+0x85c>)
 8002302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002306:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8002308:	4b8b      	ldr	r3, [pc, #556]	; (8002538 <main+0x85c>)
 800230a:	221e      	movs	r2, #30
 800230c:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 90U;
 800230e:	4b8a      	ldr	r3, [pc, #552]	; (8002538 <main+0x85c>)
 8002310:	225a      	movs	r2, #90	; 0x5a
 8002312:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 8002314:	4b88      	ldr	r3, [pc, #544]	; (8002538 <main+0x85c>)
 8002316:	2200      	movs	r2, #0
 8002318:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 800231a:	4b88      	ldr	r3, [pc, #544]	; (800253c <main+0x860>)
 800231c:	221e      	movs	r2, #30
 800231e:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8002320:	4b87      	ldr	r3, [pc, #540]	; (8002540 <main+0x864>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8002326:	4b87      	ldr	r3, [pc, #540]	; (8002544 <main+0x868>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 800232c:	4b86      	ldr	r3, [pc, #536]	; (8002548 <main+0x86c>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
					cur_page = HIGH_LEVEL_PAGE;
 8002332:	4b86      	ldr	r3, [pc, #536]	; (800254c <main+0x870>)
 8002334:	2203      	movs	r2, #3
 8002336:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8002338:	4b85      	ldr	r3, [pc, #532]	; (8002550 <main+0x874>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 800233e:	230a      	movs	r3, #10
 8002340:	220d      	movs	r2, #13
 8002342:	4986      	ldr	r1, [pc, #536]	; (800255c <main+0x880>)
 8002344:	4884      	ldr	r0, [pc, #528]	; (8002558 <main+0x87c>)
 8002346:	f002 fe50 	bl	8004fea <HAL_UART_Transmit>
					break;
 800234a:	e000      	b.n	800234e <main+0x672>
					break;
 800234c:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 800234e:	4b84      	ldr	r3, [pc, #528]	; (8002560 <main+0x884>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
>>>>>>> majorchng
			}
		}

		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
<<<<<<< HEAD
 8002348:	4b83      	ldr	r3, [pc, #524]	; (8002558 <main+0x888>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d13d      	bne.n	80023cc <main+0x6fc>
 8002350:	4b82      	ldr	r3, [pc, #520]	; (800255c <main+0x88c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d139      	bne.n	80023cc <main+0x6fc>
 8002358:	4b81      	ldr	r3, [pc, #516]	; (8002560 <main+0x890>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d135      	bne.n	80023cc <main+0x6fc>
			if (dryer.state == START) {
 8002360:	4b72      	ldr	r3, [pc, #456]	; (800252c <main+0x85c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d154      	bne.n	8002412 <main+0x742>
				if (limit_timeout == 0U) {
 8002368:	4b7e      	ldr	r3, [pc, #504]	; (8002564 <main+0x894>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d150      	bne.n	8002412 <main+0x742>
					limit_timeout = 30U;
 8002370:	4b7c      	ldr	r3, [pc, #496]	; (8002564 <main+0x894>)
 8002372:	221e      	movs	r2, #30
 8002374:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8002376:	4b7c      	ldr	r3, [pc, #496]	; (8002568 <main+0x898>)
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]

					dryer.state = INIT;
 800237c:	4b6b      	ldr	r3, [pc, #428]	; (800252c <main+0x85c>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8002382:	4b6a      	ldr	r3, [pc, #424]	; (800252c <main+0x85c>)
 8002384:	2200      	movs	r2, #0
 8002386:	705a      	strb	r2, [r3, #1]

					cur_page = LIMIT_SW_ERR_PAGE;
 8002388:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <main+0x870>)
 800238a:	2206      	movs	r2, #6
 800238c:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 800238e:	2200      	movs	r2, #0
 8002390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002394:	4875      	ldr	r0, [pc, #468]	; (800256c <main+0x89c>)
 8002396:	f001 f90a 	bl	80035ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800239a:	2200      	movs	r2, #0
 800239c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023a0:	4873      	ldr	r0, [pc, #460]	; (8002570 <main+0x8a0>)
 80023a2:	f001 f904 	bl	80035ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80023a6:	2200      	movs	r2, #0
 80023a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ac:	4870      	ldr	r0, [pc, #448]	; (8002570 <main+0x8a0>)
 80023ae:	f001 f8fe 	bl	80035ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80023b2:	2200      	movs	r2, #0
 80023b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023b8:	486d      	ldr	r0, [pc, #436]	; (8002570 <main+0x8a0>)
 80023ba:	f001 f8f8 	bl	80035ae <HAL_GPIO_WritePin>

					limit_timeout_flag = 1U;
 80023be:	4b68      	ldr	r3, [pc, #416]	; (8002560 <main+0x890>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80023c4:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <main+0x874>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
			if (dryer.state == START) {
 80023ca:	e022      	b.n	8002412 <main+0x742>
				}
			}
		} else if (!door_open_flag && !coil_open_flag && limit_timeout_flag) {
 80023cc:	4b62      	ldr	r3, [pc, #392]	; (8002558 <main+0x888>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11f      	bne.n	8002414 <main+0x744>
 80023d4:	4b61      	ldr	r3, [pc, #388]	; (800255c <main+0x88c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11b      	bne.n	8002414 <main+0x744>
 80023dc:	4b60      	ldr	r3, [pc, #384]	; (8002560 <main+0x890>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d017      	beq.n	8002414 <main+0x744>
			scaned_key = scan_keypad();
 80023e4:	f7fe fecc 	bl	8001180 <scan_keypad>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b59      	ldr	r3, [pc, #356]	; (8002554 <main+0x884>)
 80023ee:	701a      	strb	r2, [r3, #0]
			if (scaned_key == MED_KEY_PRESSED) {
 80023f0:	4b58      	ldr	r3, [pc, #352]	; (8002554 <main+0x884>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d10d      	bne.n	8002414 <main+0x744>
				cur_page = INIT_PAGE;
 80023f8:	4b51      	ldr	r3, [pc, #324]	; (8002540 <main+0x870>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
				limit_timeout = 30U;
 80023fe:	4b59      	ldr	r3, [pc, #356]	; (8002564 <main+0x894>)
 8002400:	221e      	movs	r2, #30
 8002402:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <main+0x874>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
				limit_timeout_flag = 0U;
 800240a:	4b55      	ldr	r3, [pc, #340]	; (8002560 <main+0x890>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e000      	b.n	8002414 <main+0x744>
			if (dryer.state == START) {
 8002412:	bf00      	nop
=======
 8002354:	4b83      	ldr	r3, [pc, #524]	; (8002564 <main+0x888>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d13d      	bne.n	80023d8 <main+0x6fc>
 800235c:	4b82      	ldr	r3, [pc, #520]	; (8002568 <main+0x88c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d139      	bne.n	80023d8 <main+0x6fc>
 8002364:	4b81      	ldr	r3, [pc, #516]	; (800256c <main+0x890>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d135      	bne.n	80023d8 <main+0x6fc>
			if (dryer.state == START) {
 800236c:	4b72      	ldr	r3, [pc, #456]	; (8002538 <main+0x85c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d154      	bne.n	800241e <main+0x742>
				if (limit_timeout == 0U) {
 8002374:	4b7e      	ldr	r3, [pc, #504]	; (8002570 <main+0x894>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d150      	bne.n	800241e <main+0x742>
					limit_timeout = 30U;
 800237c:	4b7c      	ldr	r3, [pc, #496]	; (8002570 <main+0x894>)
 800237e:	221e      	movs	r2, #30
 8002380:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8002382:	4b7c      	ldr	r3, [pc, #496]	; (8002574 <main+0x898>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]

					dryer.state = INIT;
 8002388:	4b6b      	ldr	r3, [pc, #428]	; (8002538 <main+0x85c>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 800238e:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <main+0x85c>)
 8002390:	2200      	movs	r2, #0
 8002392:	705a      	strb	r2, [r3, #1]

					cur_page = LIMIT_SW_ERR_PAGE;
 8002394:	4b6d      	ldr	r3, [pc, #436]	; (800254c <main+0x870>)
 8002396:	2206      	movs	r2, #6
 8002398:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 800239a:	2200      	movs	r2, #0
 800239c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a0:	4875      	ldr	r0, [pc, #468]	; (8002578 <main+0x89c>)
 80023a2:	f001 f92a 	bl	80035fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80023a6:	2200      	movs	r2, #0
 80023a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ac:	4873      	ldr	r0, [pc, #460]	; (800257c <main+0x8a0>)
 80023ae:	f001 f924 	bl	80035fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80023b2:	2200      	movs	r2, #0
 80023b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023b8:	4870      	ldr	r0, [pc, #448]	; (800257c <main+0x8a0>)
 80023ba:	f001 f91e 	bl	80035fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80023be:	2200      	movs	r2, #0
 80023c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c4:	486d      	ldr	r0, [pc, #436]	; (800257c <main+0x8a0>)
 80023c6:	f001 f918 	bl	80035fa <HAL_GPIO_WritePin>

					limit_timeout_flag = 1U;
 80023ca:	4b68      	ldr	r3, [pc, #416]	; (800256c <main+0x890>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80023d0:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <main+0x874>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
			if (dryer.state == START) {
 80023d6:	e022      	b.n	800241e <main+0x742>
				}
			}
		} else if (!door_open_flag && !coil_open_flag && limit_timeout_flag) {
 80023d8:	4b62      	ldr	r3, [pc, #392]	; (8002564 <main+0x888>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11f      	bne.n	8002420 <main+0x744>
 80023e0:	4b61      	ldr	r3, [pc, #388]	; (8002568 <main+0x88c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11b      	bne.n	8002420 <main+0x744>
 80023e8:	4b60      	ldr	r3, [pc, #384]	; (800256c <main+0x890>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d017      	beq.n	8002420 <main+0x744>
			scaned_key = scan_keypad();
 80023f0:	f7fe fec6 	bl	8001180 <scan_keypad>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b59      	ldr	r3, [pc, #356]	; (8002560 <main+0x884>)
 80023fa:	701a      	strb	r2, [r3, #0]
			if (scaned_key == MED_KEY_PRESSED) {
 80023fc:	4b58      	ldr	r3, [pc, #352]	; (8002560 <main+0x884>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d10d      	bne.n	8002420 <main+0x744>
				cur_page = INIT_PAGE;
 8002404:	4b51      	ldr	r3, [pc, #324]	; (800254c <main+0x870>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
				limit_timeout = 30U;
 800240a:	4b59      	ldr	r3, [pc, #356]	; (8002570 <main+0x894>)
 800240c:	221e      	movs	r2, #30
 800240e:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8002410:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <main+0x874>)
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
				limit_timeout_flag = 0U;
 8002416:	4b55      	ldr	r3, [pc, #340]	; (800256c <main+0x890>)
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e000      	b.n	8002420 <main+0x744>
			if (dryer.state == START) {
 800241e:	bf00      	nop
>>>>>>> majorchng
		 * @COMPLETE STATE
		 * 		->TURNS OFF FAN, DRUM MOTORS, HEATER
		 * 		->TRUNS ON/OFF BEEP EVERY 3s FOR 30s
		 * 		->WATCHS DOOR OPEN
		 **********************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
<<<<<<< HEAD
 8002414:	4b50      	ldr	r3, [pc, #320]	; (8002558 <main+0x888>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 8164 	bne.w	80026e6 <main+0xa16>
 800241e:	4b4f      	ldr	r3, [pc, #316]	; (800255c <main+0x88c>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 815f 	bne.w	80026e6 <main+0xa16>
 8002428:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <main+0x890>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f040 815a 	bne.w	80026e6 <main+0xa16>

			if (dryer.state == START) {
 8002432:	4b3e      	ldr	r3, [pc, #248]	; (800252c <main+0x85c>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	f040 8107 	bne.w	800264a <main+0x97a>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 800243c:	2201      	movs	r2, #1
 800243e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002442:	484a      	ldr	r0, [pc, #296]	; (800256c <main+0x89c>)
 8002444:	f001 f8b3 	bl	80035ae <HAL_GPIO_WritePin>

				if (otp) {
 8002448:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <main+0x8a4>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <main+0x7c2>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 8002450:	4b36      	ldr	r3, [pc, #216]	; (800252c <main+0x85c>)
 8002452:	885b      	ldrh	r3, [r3, #2]
 8002454:	4619      	mov	r1, r3
 8002456:	4848      	ldr	r0, [pc, #288]	; (8002578 <main+0x8a8>)
 8002458:	f003 fb9e 	bl	8005b98 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 800245c:	4b33      	ldr	r3, [pc, #204]	; (800252c <main+0x85c>)
 800245e:	889b      	ldrh	r3, [r3, #4]
 8002460:	4619      	mov	r1, r3
 8002462:	4846      	ldr	r0, [pc, #280]	; (800257c <main+0x8ac>)
 8002464:	f003 fb98 	bl	8005b98 <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <main+0x860>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	4844      	ldr	r0, [pc, #272]	; (8002580 <main+0x8b0>)
 8002470:	f003 fb92 	bl	8005b98 <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <main+0x868>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	4842      	ldr	r0, [pc, #264]	; (8002584 <main+0x8b4>)
 800247c:	f003 fb8c 	bl	8005b98 <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 8002480:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <main+0x864>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	4840      	ldr	r0, [pc, #256]	; (8002588 <main+0x8b8>)
 8002488:	f003 fb86 	bl	8005b98 <iprintf>
					otp = 0;
 800248c:	4b39      	ldr	r3, [pc, #228]	; (8002574 <main+0x8a4>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
=======
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <main+0x888>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	f040 816c 	bne.w	8002702 <main+0xa26>
 800242a:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <main+0x88c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 8167 	bne.w	8002702 <main+0xa26>
 8002434:	4b4d      	ldr	r3, [pc, #308]	; (800256c <main+0x890>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f040 8162 	bne.w	8002702 <main+0xa26>

			if (dryer.state == START) {
 800243e:	4b3e      	ldr	r3, [pc, #248]	; (8002538 <main+0x85c>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	f040 810d 	bne.w	8002662 <main+0x986>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 8002448:	2201      	movs	r2, #1
 800244a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800244e:	484a      	ldr	r0, [pc, #296]	; (8002578 <main+0x89c>)
 8002450:	f001 f8d3 	bl	80035fa <HAL_GPIO_WritePin>

				if (otp) {
 8002454:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <main+0x8a4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <main+0x7c2>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 800245c:	4b36      	ldr	r3, [pc, #216]	; (8002538 <main+0x85c>)
 800245e:	885b      	ldrh	r3, [r3, #2]
 8002460:	4619      	mov	r1, r3
 8002462:	4848      	ldr	r0, [pc, #288]	; (8002584 <main+0x8a8>)
 8002464:	f003 fbbe 	bl	8005be4 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8002468:	4b33      	ldr	r3, [pc, #204]	; (8002538 <main+0x85c>)
 800246a:	889b      	ldrh	r3, [r3, #4]
 800246c:	4619      	mov	r1, r3
 800246e:	4846      	ldr	r0, [pc, #280]	; (8002588 <main+0x8ac>)
 8002470:	f003 fbb8 	bl	8005be4 <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 8002474:	4b31      	ldr	r3, [pc, #196]	; (800253c <main+0x860>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	4844      	ldr	r0, [pc, #272]	; (800258c <main+0x8b0>)
 800247c:	f003 fbb2 	bl	8005be4 <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 8002480:	4b30      	ldr	r3, [pc, #192]	; (8002544 <main+0x868>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	4842      	ldr	r0, [pc, #264]	; (8002590 <main+0x8b4>)
 8002488:	f003 fbac 	bl	8005be4 <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <main+0x864>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	4840      	ldr	r0, [pc, #256]	; (8002594 <main+0x8b8>)
 8002494:	f003 fba6 	bl	8005be4 <iprintf>
					otp = 0;
 8002498:	4b39      	ldr	r3, [pc, #228]	; (8002580 <main+0x8a4>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
>>>>>>> majorchng
				}

				//start Flip Flop
				if (pasue_cunt > 0) {
<<<<<<< HEAD
 8002492:	4b29      	ldr	r3, [pc, #164]	; (8002538 <main+0x868>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d034      	beq.n	8002504 <main+0x834>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800249a:	2200      	movs	r2, #0
 800249c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024a0:	4833      	ldr	r0, [pc, #204]	; (8002570 <main+0x8a0>)
 80024a2:	f001 f884 	bl	80035ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80024a6:	2200      	movs	r2, #0
 80024a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024ac:	4830      	ldr	r0, [pc, #192]	; (8002570 <main+0x8a0>)
 80024ae:	f001 f87e 	bl	80035ae <HAL_GPIO_WritePin>

					if (pasue_cunt <= 1) {
 80024b2:	4b21      	ldr	r3, [pc, #132]	; (8002538 <main+0x868>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d87f      	bhi.n	80025ba <main+0x8ea>

						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 80024ba:	2104      	movs	r1, #4
 80024bc:	482b      	ldr	r0, [pc, #172]	; (800256c <main+0x89c>)
 80024be:	f001 f85f 	bl	8003580 <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b31      	ldr	r3, [pc, #196]	; (800258c <main+0x8bc>)
 80024c8:	701a      	strb	r2, [r3, #0]
=======
 800249e:	4b29      	ldr	r3, [pc, #164]	; (8002544 <main+0x868>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d034      	beq.n	8002510 <main+0x834>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80024a6:	2200      	movs	r2, #0
 80024a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ac:	4833      	ldr	r0, [pc, #204]	; (800257c <main+0x8a0>)
 80024ae:	f001 f8a4 	bl	80035fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80024b2:	2200      	movs	r2, #0
 80024b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024b8:	4830      	ldr	r0, [pc, #192]	; (800257c <main+0x8a0>)
 80024ba:	f001 f89e 	bl	80035fa <HAL_GPIO_WritePin>

					if (pasue_cunt <= 1) {
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <main+0x868>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d87f      	bhi.n	80025c6 <main+0x8ea>
						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 80024c6:	2104      	movs	r1, #4
 80024c8:	482b      	ldr	r0, [pc, #172]	; (8002578 <main+0x89c>)
 80024ca:	f001 f87f 	bl	80035cc <HAL_GPIO_ReadPin>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <main+0x8bc>)
 80024d4:	701a      	strb	r2, [r3, #0]
>>>>>>> majorchng
						SEL_ROT_SW);
						if (rot_sw_state) {
<<<<<<< HEAD
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <main+0x8bc>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <main+0x810>

							rot_left_cunt = 30U;
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <main+0x860>)
 80024d4:	221e      	movs	r2, #30
 80024d6:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <main+0x864>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e06c      	b.n	80025ba <main+0x8ea>

=======
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <main+0x8bc>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <main+0x810>
							rot_left_cunt = 30U;
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <main+0x860>)
 80024e0:	221e      	movs	r2, #30
 80024e2:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <main+0x864>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	e06c      	b.n	80025c6 <main+0x8ea>
>>>>>>> majorchng
						} else {
							if (flipflop) {
<<<<<<< HEAD
 80024e0:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <main+0x8c0>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <main+0x826>

								rot_left_cunt = 0U;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <main+0x860>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <main+0x864>)
 80024f0:	221e      	movs	r2, #30
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e061      	b.n	80025ba <main+0x8ea>

							} else {

								rot_left_cunt = 30U;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <main+0x860>)
 80024f8:	221e      	movs	r2, #30
 80024fa:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 80024fc:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <main+0x864>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e05a      	b.n	80025ba <main+0x8ea>

=======
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <main+0x8c0>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <main+0x826>
								rot_left_cunt = 0U;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <main+0x860>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <main+0x864>)
 80024fc:	221e      	movs	r2, #30
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e061      	b.n	80025c6 <main+0x8ea>
							} else {
								rot_left_cunt = 30U;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <main+0x860>)
 8002504:	221e      	movs	r2, #30
 8002506:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <main+0x864>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e05a      	b.n	80025c6 <main+0x8ea>
>>>>>>> majorchng
							}
						}
					}
				} else if (rot_left_cunt > 0) {
<<<<<<< HEAD
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <main+0x860>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d043      	beq.n	8002594 <main+0x8c4>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 800250c:	2201      	movs	r2, #1
 800250e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002512:	4817      	ldr	r0, [pc, #92]	; (8002570 <main+0x8a0>)
 8002514:	f001 f84b 	bl	80035ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8002518:	2200      	movs	r2, #0
 800251a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800251e:	4814      	ldr	r0, [pc, #80]	; (8002570 <main+0x8a0>)
 8002520:	f001 f845 	bl	80035ae <HAL_GPIO_WritePin>
					flipflop = 1;
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <main+0x8c0>)
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	e046      	b.n	80025ba <main+0x8ea>
 800252c:	2000029c 	.word	0x2000029c
 8002530:	20000008 	.word	0x20000008
 8002534:	200002ad 	.word	0x200002ad
 8002538:	200002ae 	.word	0x200002ae
 800253c:	200002aa 	.word	0x200002aa
 8002540:	200002b1 	.word	0x200002b1
 8002544:	200002b3 	.word	0x200002b3
 8002548:	08008330 	.word	0x08008330
 800254c:	2000035c 	.word	0x2000035c
 8002550:	0800833c 	.word	0x0800833c
 8002554:	200002ab 	.word	0x200002ab
 8002558:	200002a6 	.word	0x200002a6
 800255c:	200002a8 	.word	0x200002a8
 8002560:	200002ac 	.word	0x200002ac
 8002564:	20000001 	.word	0x20000001
 8002568:	200002a9 	.word	0x200002a9
 800256c:	40010800 	.word	0x40010800
 8002570:	40010c00 	.word	0x40010c00
 8002574:	20000000 	.word	0x20000000
 8002578:	0800834c 	.word	0x0800834c
 800257c:	08008314 	.word	0x08008314
 8002580:	08008360 	.word	0x08008360
 8002584:	08008370 	.word	0x08008370
 8002588:	08008380 	.word	0x08008380
 800258c:	200002af 	.word	0x200002af
 8002590:	200002b0 	.word	0x200002b0

				} else if (rot_right_cunt > 0) {
 8002594:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <main+0xa20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <main+0x8ea>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800259c:	2200      	movs	r2, #0
 800259e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025a2:	4854      	ldr	r0, [pc, #336]	; (80026f4 <main+0xa24>)
 80025a4:	f001 f803 	bl	80035ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 80025a8:	2201      	movs	r2, #1
 80025aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025ae:	4851      	ldr	r0, [pc, #324]	; (80026f4 <main+0xa24>)
 80025b0:	f000 fffd 	bl	80035ae <HAL_GPIO_WritePin>
					flipflop = 0;
 80025b4:	4b50      	ldr	r3, [pc, #320]	; (80026f8 <main+0xa28>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]

				}

				if (dryer.cycle == HEAT_CYCLE) {
 80025ba:	4b50      	ldr	r3, [pc, #320]	; (80026fc <main+0xa2c>)
 80025bc:	7a1b      	ldrb	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d13c      	bne.n	800263c <main+0x96c>
					cur_temp = (int) Max6675_Read_Temp();
 80025c2:	f7fe fc49 	bl	8000e58 <Max6675_Read_Temp>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fc1f 	bl	8000e0c <__aeabi_f2iz>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4a4b      	ldr	r2, [pc, #300]	; (8002700 <main+0xa30>)
 80025d2:	6013      	str	r3, [r2, #0]

					if (cur_temp == -1 || cur_temp == 0) {
 80025d4:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <main+0xa30>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d003      	beq.n	80025e6 <main+0x916>
 80025de:	4b48      	ldr	r3, [pc, #288]	; (8002700 <main+0xa30>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <main+0x924>
						HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80025e6:	2200      	movs	r2, #0
 80025e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ec:	4841      	ldr	r0, [pc, #260]	; (80026f4 <main+0xa24>)
 80025ee:	f000 ffde 	bl	80035ae <HAL_GPIO_WritePin>
 80025f2:	e078      	b.n	80026e6 <main+0xa16>
					} else if ((cur_temp < (dryer.setTemp - 5))
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <main+0xa2c>)
 80025f6:	799b      	ldrb	r3, [r3, #6]
 80025f8:	1f5a      	subs	r2, r3, #5
 80025fa:	4b41      	ldr	r3, [pc, #260]	; (8002700 <main+0xa30>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	dd0a      	ble.n	8002618 <main+0x948>
							&& (cur_temp > 0)) {
 8002602:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <main+0xa30>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	dd06      	ble.n	8002618 <main+0x948>
						HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 800260a:	2201      	movs	r2, #1
 800260c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002610:	4838      	ldr	r0, [pc, #224]	; (80026f4 <main+0xa24>)
 8002612:	f000 ffcc 	bl	80035ae <HAL_GPIO_WritePin>
 8002616:	e066      	b.n	80026e6 <main+0xa16>
					} else if ((cur_temp > (dryer.setTemp + 2))
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <main+0xa2c>)
 800261a:	799b      	ldrb	r3, [r3, #6]
 800261c:	1c9a      	adds	r2, r3, #2
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <main+0xa30>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	db03      	blt.n	800262e <main+0x95e>
							|| (cur_temp <= 0)) {
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <main+0xa30>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	dc5b      	bgt.n	80026e6 <main+0xa16>
						HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 800262e:	2200      	movs	r2, #0
 8002630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002634:	482f      	ldr	r0, [pc, #188]	; (80026f4 <main+0xa24>)
 8002636:	f000 ffba 	bl	80035ae <HAL_GPIO_WritePin>
 800263a:	e054      	b.n	80026e6 <main+0xa16>
=======
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <main+0x860>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d043      	beq.n	80025a0 <main+0x8c4>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 8002518:	2201      	movs	r2, #1
 800251a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800251e:	4817      	ldr	r0, [pc, #92]	; (800257c <main+0x8a0>)
 8002520:	f001 f86b 	bl	80035fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8002524:	2200      	movs	r2, #0
 8002526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800252a:	4814      	ldr	r0, [pc, #80]	; (800257c <main+0x8a0>)
 800252c:	f001 f865 	bl	80035fa <HAL_GPIO_WritePin>
					flipflop = 1;
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <main+0x8c0>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e046      	b.n	80025c6 <main+0x8ea>
 8002538:	2000029c 	.word	0x2000029c
 800253c:	20000008 	.word	0x20000008
 8002540:	200002ad 	.word	0x200002ad
 8002544:	200002ae 	.word	0x200002ae
 8002548:	200002aa 	.word	0x200002aa
 800254c:	200002b1 	.word	0x200002b1
 8002550:	200002b3 	.word	0x200002b3
 8002554:	08008374 	.word	0x08008374
 8002558:	2000035c 	.word	0x2000035c
 800255c:	08008380 	.word	0x08008380
 8002560:	200002ab 	.word	0x200002ab
 8002564:	200002a6 	.word	0x200002a6
 8002568:	200002a8 	.word	0x200002a8
 800256c:	200002ac 	.word	0x200002ac
 8002570:	20000001 	.word	0x20000001
 8002574:	200002a9 	.word	0x200002a9
 8002578:	40010800 	.word	0x40010800
 800257c:	40010c00 	.word	0x40010c00
 8002580:	20000000 	.word	0x20000000
 8002584:	08008390 	.word	0x08008390
 8002588:	08008358 	.word	0x08008358
 800258c:	080083a4 	.word	0x080083a4
 8002590:	080083b4 	.word	0x080083b4
 8002594:	080083c4 	.word	0x080083c4
 8002598:	200002af 	.word	0x200002af
 800259c:	200002b0 	.word	0x200002b0
				} else if (rot_right_cunt > 0) {
 80025a0:	4b5a      	ldr	r3, [pc, #360]	; (800270c <main+0xa30>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00e      	beq.n	80025c6 <main+0x8ea>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80025a8:	2200      	movs	r2, #0
 80025aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025ae:	4858      	ldr	r0, [pc, #352]	; (8002710 <main+0xa34>)
 80025b0:	f001 f823 	bl	80035fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 80025b4:	2201      	movs	r2, #1
 80025b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025ba:	4855      	ldr	r0, [pc, #340]	; (8002710 <main+0xa34>)
 80025bc:	f001 f81d 	bl	80035fa <HAL_GPIO_WritePin>
					flipflop = 0;
 80025c0:	4b54      	ldr	r3, [pc, #336]	; (8002714 <main+0xa38>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
				}

				cur_temp = (int) Max6675_Read_Temp();
 80025c6:	f7fe fc47 	bl	8000e58 <Max6675_Read_Temp>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fc1d 	bl	8000e0c <__aeabi_f2iz>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a50      	ldr	r2, [pc, #320]	; (8002718 <main+0xa3c>)
 80025d6:	6013      	str	r3, [r2, #0]

				if (dryer.cycle == HEAT_CYCLE && !limit_sw_open()) {
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <main+0xa40>)
 80025da:	7a1b      	ldrb	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d139      	bne.n	8002654 <main+0x978>
 80025e0:	f7fe fd70 	bl	80010c4 <limit_sw_open>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d134      	bne.n	8002654 <main+0x978>
					if (cur_temp == -1 || cur_temp == 0) {
 80025ea:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <main+0xa3c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f2:	d003      	beq.n	80025fc <main+0x920>
 80025f4:	4b48      	ldr	r3, [pc, #288]	; (8002718 <main+0xa3c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <main+0x92e>
						HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80025fc:	2200      	movs	r2, #0
 80025fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002602:	4843      	ldr	r0, [pc, #268]	; (8002710 <main+0xa34>)
 8002604:	f000 fff9 	bl	80035fa <HAL_GPIO_WritePin>
 8002608:	e023      	b.n	8002652 <main+0x976>
					} else if ((cur_temp > (dryer.setTemp + 2))
 800260a:	4b44      	ldr	r3, [pc, #272]	; (800271c <main+0xa40>)
 800260c:	799b      	ldrb	r3, [r3, #6]
 800260e:	1c9a      	adds	r2, r3, #2
 8002610:	4b41      	ldr	r3, [pc, #260]	; (8002718 <main+0xa3c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	db03      	blt.n	8002620 <main+0x944>
							|| (cur_temp <= 0)) {
 8002618:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <main+0xa3c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	dc06      	bgt.n	800262e <main+0x952>
						HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8002620:	2200      	movs	r2, #0
 8002622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002626:	483a      	ldr	r0, [pc, #232]	; (8002710 <main+0xa34>)
 8002628:	f000 ffe7 	bl	80035fa <HAL_GPIO_WritePin>
 800262c:	e011      	b.n	8002652 <main+0x976>
					} else if ((cur_temp < (dryer.setTemp - 5))
 800262e:	4b3b      	ldr	r3, [pc, #236]	; (800271c <main+0xa40>)
 8002630:	799b      	ldrb	r3, [r3, #6]
 8002632:	1f5a      	subs	r2, r3, #5
 8002634:	4b38      	ldr	r3, [pc, #224]	; (8002718 <main+0xa3c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	dd61      	ble.n	8002700 <main+0xa24>
							&& (cur_temp > 0)) {
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <main+0xa3c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	dd5d      	ble.n	8002700 <main+0xa24>
						HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 8002644:	2201      	movs	r2, #1
 8002646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800264a:	4831      	ldr	r0, [pc, #196]	; (8002710 <main+0xa34>)
 800264c:	f000 ffd5 	bl	80035fa <HAL_GPIO_WritePin>
					if (cur_temp == -1 || cur_temp == 0) {
 8002650:	e056      	b.n	8002700 <main+0xa24>
 8002652:	e055      	b.n	8002700 <main+0xa24>
>>>>>>> majorchng
					}
				} else {

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
<<<<<<< HEAD
 800263c:	2200      	movs	r2, #0
 800263e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002642:	482c      	ldr	r0, [pc, #176]	; (80026f4 <main+0xa24>)
 8002644:	f000 ffb3 	bl	80035ae <HAL_GPIO_WritePin>
 8002648:	e04d      	b.n	80026e6 <main+0xa16>

				}
			} else if (dryer.state == COMPLETE) {
 800264a:	4b2c      	ldr	r3, [pc, #176]	; (80026fc <main+0xa2c>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d131      	bne.n	80026b6 <main+0x9e6>

				if (dryer.beepTime == 0) {
 8002652:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <main+0xa2c>)
 8002654:	79db      	ldrb	r3, [r3, #7]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d114      	bne.n	8002684 <main+0x9b4>
					HAL_GPIO_WritePin(GPIOC, LED, LOW);
 800265a:	2200      	movs	r2, #0
 800265c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002660:	4828      	ldr	r0, [pc, #160]	; (8002704 <main+0xa34>)
 8002662:	f000 ffa4 	bl	80035ae <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 8002666:	4b28      	ldr	r3, [pc, #160]	; (8002708 <main+0xa38>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <main+0xa3c>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
					//beep off
					timer_stop_evt = 1U;
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <main+0xa40>)
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <main+0xa2c>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 800267e:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <main+0xa2c>)
 8002680:	2200      	movs	r2, #0
 8002682:	705a      	strb	r2, [r3, #1]
=======
 8002654:	2200      	movs	r2, #0
 8002656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265a:	482d      	ldr	r0, [pc, #180]	; (8002710 <main+0xa34>)
 800265c:	f000 ffcd 	bl	80035fa <HAL_GPIO_WritePin>
 8002660:	e04f      	b.n	8002702 <main+0xa26>

				}
			} else if (dryer.state == COMPLETE) {
 8002662:	4b2e      	ldr	r3, [pc, #184]	; (800271c <main+0xa40>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d131      	bne.n	80026ce <main+0x9f2>

				if (dryer.beepTime == 0) {
 800266a:	4b2c      	ldr	r3, [pc, #176]	; (800271c <main+0xa40>)
 800266c:	79db      	ldrb	r3, [r3, #7]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d114      	bne.n	800269c <main+0x9c0>
					HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8002672:	2200      	movs	r2, #0
 8002674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002678:	4829      	ldr	r0, [pc, #164]	; (8002720 <main+0xa44>)
 800267a:	f000 ffbe 	bl	80035fa <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 800267e:	4b29      	ldr	r3, [pc, #164]	; (8002724 <main+0xa48>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8002684:	4b28      	ldr	r3, [pc, #160]	; (8002728 <main+0xa4c>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
					//beep off
					timer_stop_evt = 1U;
 800268a:	4b28      	ldr	r3, [pc, #160]	; (800272c <main+0xa50>)
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <main+0xa40>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <main+0xa40>)
 8002698:	2200      	movs	r2, #0
 800269a:	705a      	strb	r2, [r3, #1]
>>>>>>> majorchng
				} else if (dryer.beepTime % 3 == 0) {
					//beep toggle
				}
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
<<<<<<< HEAD
 8002684:	2200      	movs	r2, #0
 8002686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268a:	4822      	ldr	r0, [pc, #136]	; (8002714 <main+0xa44>)
 800268c:	f000 ff8f 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002696:	4817      	ldr	r0, [pc, #92]	; (80026f4 <main+0xa24>)
 8002698:	f000 ff89 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800269c:	2200      	movs	r2, #0
 800269e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026a2:	4814      	ldr	r0, [pc, #80]	; (80026f4 <main+0xa24>)
 80026a4:	f000 ff83 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80026a8:	2200      	movs	r2, #0
 80026aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ae:	4811      	ldr	r0, [pc, #68]	; (80026f4 <main+0xa24>)
 80026b0:	f000 ff7d 	bl	80035ae <HAL_GPIO_WritePin>
 80026b4:	e017      	b.n	80026e6 <main+0xa16>
=======
 800269c:	2200      	movs	r2, #0
 800269e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a2:	4823      	ldr	r0, [pc, #140]	; (8002730 <main+0xa54>)
 80026a4:	f000 ffa9 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80026a8:	2200      	movs	r2, #0
 80026aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026ae:	4818      	ldr	r0, [pc, #96]	; (8002710 <main+0xa34>)
 80026b0:	f000 ffa3 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80026b4:	2200      	movs	r2, #0
 80026b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026ba:	4815      	ldr	r0, [pc, #84]	; (8002710 <main+0xa34>)
 80026bc:	f000 ff9d 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80026c0:	2200      	movs	r2, #0
 80026c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026c6:	4812      	ldr	r0, [pc, #72]	; (8002710 <main+0xa34>)
 80026c8:	f000 ff97 	bl	80035fa <HAL_GPIO_WritePin>
 80026cc:	e019      	b.n	8002702 <main+0xa26>
>>>>>>> majorchng

			} else {
				//beep off
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
<<<<<<< HEAD
 80026b6:	2200      	movs	r2, #0
 80026b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026bc:	4815      	ldr	r0, [pc, #84]	; (8002714 <main+0xa44>)
 80026be:	f000 ff76 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80026c2:	2200      	movs	r2, #0
 80026c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026c8:	480a      	ldr	r0, [pc, #40]	; (80026f4 <main+0xa24>)
 80026ca:	f000 ff70 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80026ce:	2200      	movs	r2, #0
 80026d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026d4:	4807      	ldr	r0, [pc, #28]	; (80026f4 <main+0xa24>)
 80026d6:	f000 ff6a 	bl	80035ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80026da:	2200      	movs	r2, #0
 80026dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <main+0xa24>)
 80026e2:	f000 ff64 	bl	80035ae <HAL_GPIO_WritePin>
			}
		}
		lcd_update_flag = 1U;
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <main+0xa3c>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
		if (is_door_open() && (!door_open_flag)) {
 80026ec:	f7ff bb2c 	b.w	8001d48 <main+0x78>
 80026f0:	200002ad 	.word	0x200002ad
 80026f4:	40010c00 	.word	0x40010c00
 80026f8:	200002b0 	.word	0x200002b0
 80026fc:	2000029c 	.word	0x2000029c
 8002700:	20000004 	.word	0x20000004
 8002704:	40011000 	.word	0x40011000
 8002708:	200002b1 	.word	0x200002b1
 800270c:	200002b3 	.word	0x200002b3
 8002710:	200002a9 	.word	0x200002a9
 8002714:	40010800 	.word	0x40010800

08002718 <SystemClock_Config>:
=======
 80026ce:	2200      	movs	r2, #0
 80026d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026d4:	4816      	ldr	r0, [pc, #88]	; (8002730 <main+0xa54>)
 80026d6:	f000 ff90 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80026da:	2200      	movs	r2, #0
 80026dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026e0:	480b      	ldr	r0, [pc, #44]	; (8002710 <main+0xa34>)
 80026e2:	f000 ff8a 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80026e6:	2200      	movs	r2, #0
 80026e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026ec:	4808      	ldr	r0, [pc, #32]	; (8002710 <main+0xa34>)
 80026ee:	f000 ff84 	bl	80035fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80026f2:	2200      	movs	r2, #0
 80026f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <main+0xa34>)
 80026fa:	f000 ff7e 	bl	80035fa <HAL_GPIO_WritePin>
 80026fe:	e000      	b.n	8002702 <main+0xa26>
					if (cur_temp == -1 || cur_temp == 0) {
 8002700:	bf00      	nop
			}
		}
		lcd_update_flag = 1U;
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <main+0xa4c>)
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
		if (is_door_open() && (!door_open_flag)) {
 8002708:	f7ff bb24 	b.w	8001d54 <main+0x78>
 800270c:	200002ad 	.word	0x200002ad
 8002710:	40010c00 	.word	0x40010c00
 8002714:	200002b0 	.word	0x200002b0
 8002718:	20000004 	.word	0x20000004
 800271c:	2000029c 	.word	0x2000029c
 8002720:	40011000 	.word	0x40011000
 8002724:	200002b1 	.word	0x200002b1
 8002728:	200002b3 	.word	0x200002b3
 800272c:	200002a9 	.word	0x200002a9
 8002730:	40010800 	.word	0x40010800

08002734 <SystemClock_Config>:
>>>>>>> majorchng

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
<<<<<<< HEAD
 8002718:	b580      	push	{r7, lr}
 800271a:	b090      	sub	sp, #64	; 0x40
 800271c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800271e:	f107 0318 	add.w	r3, r7, #24
 8002722:	2228      	movs	r2, #40	; 0x28
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f002 fdce 	bl	80052c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	60da      	str	r2, [r3, #12]
 8002738:	611a      	str	r2, [r3, #16]
=======
 8002734:	b580      	push	{r7, lr}
 8002736:	b090      	sub	sp, #64	; 0x40
 8002738:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800273a:	f107 0318 	add.w	r3, r7, #24
 800273e:	2228      	movs	r2, #40	; 0x28
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fde6 	bl	8005314 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	60da      	str	r2, [r3, #12]
 8002754:	611a      	str	r2, [r3, #16]
>>>>>>> majorchng

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 800273a:	2302      	movs	r3, #2
 800273c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800273e:	2301      	movs	r3, #1
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002742:	2310      	movs	r3, #16
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800274a:	f107 0318 	add.w	r3, r7, #24
 800274e:	4618      	mov	r0, r3
 8002750:	f000 ff5e 	bl	8003610 <HAL_RCC_OscConfig>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <SystemClock_Config+0x46>
		Error_Handler();
 800275a:	f000 f8e5 	bl	8002928 <Error_Handler>
=======
 8002756:	2302      	movs	r3, #2
 8002758:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800275a:	2301      	movs	r3, #1
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800275e:	2310      	movs	r3, #16
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002762:	2300      	movs	r3, #0
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002766:	f107 0318 	add.w	r3, r7, #24
 800276a:	4618      	mov	r0, r3
 800276c:	f000 ff76 	bl	800365c <HAL_RCC_OscConfig>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <SystemClock_Config+0x46>
		Error_Handler();
 8002776:	f000 f8fd 	bl	8002974 <Error_Handler>
>>>>>>> majorchng
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 800275e:	230f      	movs	r3, #15
 8002760:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f001 f9cc 	bl	8003b14 <HAL_RCC_ClockConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0x6e>
		Error_Handler();
 8002782:	f000 f8d1 	bl	8002928 <Error_Handler>
	}
}
 8002786:	bf00      	nop
 8002788:	3740      	adds	r7, #64	; 0x40
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	80fb      	strh	r3, [r7, #6]
//	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d10b      	bne.n	80027b8 <HAL_GPIO_EXTI_Callback+0x28>
		NVIC_DisableIRQ(EXTI0_IRQn);
 80027a0:	2006      	movs	r0, #6
 80027a2:	f7ff fa5f 	bl	8001c64 <__NVIC_DisableIRQ>

		door_open_flag = 1U;
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_GPIO_EXTI_Callback+0x30>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
		door_open_evt = 1U;
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]

		NVIC_EnableIRQ(EXTI0_IRQn);
 80027b2:	2006      	movs	r0, #6
 80027b4:	f7ff fa3a 	bl	8001c2c <__NVIC_EnableIRQ>
	}
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200002a6 	.word	0x200002a6
 80027c4:	200002a7 	.word	0x200002a7

080027c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) "TIMER\r\n", sizeof("TIMER\r\n"), 10);
 80027d0:	230a      	movs	r3, #10
 80027d2:	2208      	movs	r2, #8
 80027d4:	4948      	ldr	r1, [pc, #288]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80027d6:	4849      	ldr	r0, [pc, #292]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 80027d8:	f002 fbe1 	bl	8004f9e <HAL_UART_Transmit>

	if (dryer.heatTime > 0) {
 80027dc:	4b48      	ldr	r3, [pc, #288]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027de:	885b      	ldrh	r3, [r3, #2]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <HAL_TIM_PeriodElapsedCallback+0x2a>
		dryer.heatTime--;
 80027e4:	4b46      	ldr	r3, [pc, #280]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027e6:	885b      	ldrh	r3, [r3, #2]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027ee:	805a      	strh	r2, [r3, #2]
 80027f0:	e014      	b.n	800281c <HAL_TIM_PeriodElapsedCallback+0x54>
	} else if (dryer.coolTime > 0) {
 80027f2:	4b43      	ldr	r3, [pc, #268]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027f4:	889b      	ldrh	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <HAL_TIM_PeriodElapsedCallback+0x40>
		dryer.coolTime--;
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027fc:	889b      	ldrh	r3, [r3, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002804:	809a      	strh	r2, [r3, #4]
 8002806:	e009      	b.n	800281c <HAL_TIM_PeriodElapsedCallback+0x54>
	} else if (dryer.state == COMPLETE) {
 8002808:	4b3d      	ldr	r3, [pc, #244]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d105      	bne.n	800281c <HAL_TIM_PeriodElapsedCallback+0x54>
		dryer.beepTime--;
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002812:	79db      	ldrb	r3, [r3, #7]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b39      	ldr	r3, [pc, #228]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800281a:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 800281c:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800281e:	885b      	ldrh	r3, [r3, #2]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8002824:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002826:	7a1b      	ldrb	r3, [r3, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <HAL_TIM_PeriodElapsedCallback+0x6c>
		dryer.cycle = COOL_CYCLE;
 800282c:	4b34      	ldr	r3, [pc, #208]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800282e:	2201      	movs	r2, #1
 8002830:	721a      	strb	r2, [r3, #8]
 8002832:	e013      	b.n	800285c <HAL_TIM_PeriodElapsedCallback+0x94>
	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8002834:	4b32      	ldr	r3, [pc, #200]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002836:	889b      	ldrh	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10f      	bne.n	800285c <HAL_TIM_PeriodElapsedCallback+0x94>
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800283e:	7a1b      	ldrb	r3, [r3, #8]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10b      	bne.n	800285c <HAL_TIM_PeriodElapsedCallback+0x94>
		printf("Complete\r\n");
 8002844:	482f      	ldr	r0, [pc, #188]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002846:	f003 fa2d 	bl	8005ca4 <puts>
		dryer.state = COMPLETE;
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800284c:	2202      	movs	r2, #2
 800284e:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002852:	2200      	movs	r2, #0
 8002854:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 8002856:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002858:	2204      	movs	r2, #4
 800285a:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <HAL_TIM_PeriodElapsedCallback+0xaa>
		pasue_cunt--;
 8002864:	4b29      	ldr	r3, [pc, #164]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3b01      	subs	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e022      	b.n	80028b8 <HAL_TIM_PeriodElapsedCallback+0xf0>
	} else if (rot_left_cunt > 0) {
 8002872:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00d      	beq.n	8002896 <HAL_TIM_PeriodElapsedCallback+0xce>
		rot_left_cunt--;
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	3b01      	subs	r3, #1
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002884:	701a      	strb	r2, [r3, #0]

		if (rot_left_cunt == 0) {
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d114      	bne.n	80028b8 <HAL_TIM_PeriodElapsedCallback+0xf0>
			pasue_cunt = 3U;
 800288e:	4b1f      	ldr	r3, [pc, #124]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002890:	2203      	movs	r2, #3
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e010      	b.n	80028b8 <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
	} else if (rot_right_cunt > 0) {
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <HAL_TIM_PeriodElapsedCallback+0xf0>
		rot_right_cunt--;
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80028a8:	701a      	strb	r2, [r3, #0]

		if (rot_right_cunt == 0) {
 80028aa:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_TIM_PeriodElapsedCallback+0xf0>
			pasue_cunt = 3U;
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80028b4:	2203      	movs	r2, #3
 80028b6:	701a      	strb	r2, [r3, #0]
=======
 800277a:	230f      	movs	r3, #15
 800277c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f001 f9e4 	bl	8003b60 <HAL_RCC_ClockConfig>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <SystemClock_Config+0x6e>
		Error_Handler();
 800279e:	f000 f8e9 	bl	8002974 <Error_Handler>
	}
}
 80027a2:	bf00      	nop
 80027a4:	3740      	adds	r7, #64	; 0x40
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
//	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10b      	bne.n	80027d4 <HAL_GPIO_EXTI_Callback+0x28>
		NVIC_DisableIRQ(EXTI0_IRQn);
 80027bc:	2006      	movs	r0, #6
 80027be:	f7ff fa57 	bl	8001c70 <__NVIC_DisableIRQ>

		door_open_flag = 1U;
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_GPIO_EXTI_Callback+0x30>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
		door_open_evt = 1U;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x34>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]

		NVIC_EnableIRQ(EXTI0_IRQn);
 80027ce:	2006      	movs	r0, #6
 80027d0:	f7ff fa32 	bl	8001c38 <__NVIC_EnableIRQ>
	}
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200002a6 	.word	0x200002a6
 80027e0:	200002a7 	.word	0x200002a7

080027e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) "TIMER\r\n", sizeof("TIMER\r\n"), 10);
 80027ec:	230a      	movs	r3, #10
 80027ee:	2208      	movs	r2, #8
 80027f0:	4952      	ldr	r1, [pc, #328]	; (800293c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80027f2:	4853      	ldr	r0, [pc, #332]	; (8002940 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80027f4:	f002 fbf9 	bl	8004fea <HAL_UART_Transmit>

	if (dryer.heatTime > 0) {
 80027f8:	4b52      	ldr	r3, [pc, #328]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80027fa:	885b      	ldrh	r3, [r3, #2]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <HAL_TIM_PeriodElapsedCallback+0x2a>
		dryer.heatTime--;
 8002800:	4b50      	ldr	r3, [pc, #320]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002802:	885b      	ldrh	r3, [r3, #2]
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b4e      	ldr	r3, [pc, #312]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800280a:	805a      	strh	r2, [r3, #2]
 800280c:	e014      	b.n	8002838 <HAL_TIM_PeriodElapsedCallback+0x54>
	} else if (dryer.coolTime > 0) {
 800280e:	4b4d      	ldr	r3, [pc, #308]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002810:	889b      	ldrh	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <HAL_TIM_PeriodElapsedCallback+0x40>
		dryer.coolTime--;
 8002816:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002818:	889b      	ldrh	r3, [r3, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	4b49      	ldr	r3, [pc, #292]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002820:	809a      	strh	r2, [r3, #4]
 8002822:	e009      	b.n	8002838 <HAL_TIM_PeriodElapsedCallback+0x54>
	} else if (dryer.state == COMPLETE) {
 8002824:	4b47      	ldr	r3, [pc, #284]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d105      	bne.n	8002838 <HAL_TIM_PeriodElapsedCallback+0x54>
		dryer.beepTime--;
 800282c:	4b45      	ldr	r3, [pc, #276]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800282e:	79db      	ldrb	r3, [r3, #7]
 8002830:	3b01      	subs	r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b43      	ldr	r3, [pc, #268]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002836:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 8002838:	4b42      	ldr	r3, [pc, #264]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800283a:	885b      	ldrh	r3, [r3, #2]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002842:	7a1b      	ldrb	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <HAL_TIM_PeriodElapsedCallback+0x6c>
		dryer.cycle = COOL_CYCLE;
 8002848:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800284a:	2201      	movs	r2, #1
 800284c:	721a      	strb	r2, [r3, #8]
 800284e:	e013      	b.n	8002878 <HAL_TIM_PeriodElapsedCallback+0x94>
	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8002850:	4b3c      	ldr	r3, [pc, #240]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002852:	889b      	ldrh	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10f      	bne.n	8002878 <HAL_TIM_PeriodElapsedCallback+0x94>
 8002858:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800285a:	7a1b      	ldrb	r3, [r3, #8]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10b      	bne.n	8002878 <HAL_TIM_PeriodElapsedCallback+0x94>
		printf("Complete\r\n");
 8002860:	4839      	ldr	r0, [pc, #228]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002862:	f003 fa45 	bl	8005cf0 <puts>
		dryer.state = COMPLETE;
 8002866:	4b37      	ldr	r3, [pc, #220]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002868:	2202      	movs	r2, #2
 800286a:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 800286c:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800286e:	2200      	movs	r2, #0
 8002870:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 8002872:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002874:	2204      	movs	r2, #4
 8002876:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 8002878:	4b35      	ldr	r3, [pc, #212]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <HAL_TIM_PeriodElapsedCallback+0xaa>
		pasue_cunt--;
 8002880:	4b33      	ldr	r3, [pc, #204]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	3b01      	subs	r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	4b31      	ldr	r3, [pc, #196]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e035      	b.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x116>
	} else if (rot_left_cunt > 0) {
 800288e:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d020      	beq.n	80028d8 <HAL_TIM_PeriodElapsedCallback+0xf4>
		rot_left_cunt--;
 8002896:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	3b01      	subs	r3, #1
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80028a0:	701a      	strb	r2, [r3, #0]
		if (rot_left_cunt == 0) {
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d127      	bne.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x116>
			rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 80028aa:	2104      	movs	r1, #4
 80028ac:	482a      	ldr	r0, [pc, #168]	; (8002958 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80028ae:	f000 fe8d 	bl	80035cc <HAL_GPIO_ReadPin>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80028b8:	701a      	strb	r2, [r3, #0]
					SEL_ROT_SW);
			if(rot_sw_state){
 80028ba:	4b28      	ldr	r3, [pc, #160]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <HAL_TIM_PeriodElapsedCallback+0xec>
				pasue_cunt = 0U;
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
				rot_left_cunt = 30U;
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80028ca:	221e      	movs	r2, #30
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e014      	b.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x116>
			}else pasue_cunt = 3U;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80028d2:	2203      	movs	r2, #3
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e010      	b.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x116>
		}
	} else if (rot_right_cunt > 0) {
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00c      	beq.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x116>
		rot_right_cunt--;
 80028e0:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80028ea:	701a      	strb	r2, [r3, #0]
		if (rot_right_cunt == 0) {
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x116>
			pasue_cunt = 3U;
 80028f4:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80028f6:	2203      	movs	r2, #3
 80028f8:	701a      	strb	r2, [r3, #0]
>>>>>>> majorchng
		}
	}

	if (limit_sw_open()) {
<<<<<<< HEAD
 80028b8:	f7fe fc04 	bl	80010c4 <limit_sw_open>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_TIM_PeriodElapsedCallback+0x110>
		if (limit_timeout > 0)
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00c      	beq.n	80028e4 <HAL_TIM_PeriodElapsedCallback+0x11c>
			limit_timeout--;
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e005      	b.n	80028e4 <HAL_TIM_PeriodElapsedCallback+0x11c>
	} else {
		limit_timeout = 30U;
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80028da:	221e      	movs	r2, #30
 80028dc:	701a      	strb	r2, [r3, #0]
		limit_timeout_flag = 0U;
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
	}
	otp = 1;
 80028e4:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
	lcd_update_flag = 1U;
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	08008394 	.word	0x08008394
 80028fc:	2000035c 	.word	0x2000035c
 8002900:	2000029c 	.word	0x2000029c
 8002904:	0800839c 	.word	0x0800839c
 8002908:	200002b1 	.word	0x200002b1
 800290c:	200002ae 	.word	0x200002ae
 8002910:	20000008 	.word	0x20000008
 8002914:	200002ad 	.word	0x200002ad
 8002918:	20000001 	.word	0x20000001
 800291c:	200002ac 	.word	0x200002ac
 8002920:	20000000 	.word	0x20000000
 8002924:	200002b3 	.word	0x200002b3

08002928 <Error_Handler>:
=======
 80028fa:	f7fe fbe3 	bl	80010c4 <limit_sw_open>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_TIM_PeriodElapsedCallback+0x136>
		if (limit_timeout > 0)
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00c      	beq.n	8002926 <HAL_TIM_PeriodElapsedCallback+0x142>
			limit_timeout--;
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e005      	b.n	8002926 <HAL_TIM_PeriodElapsedCallback+0x142>
	} else {
		limit_timeout = 30U;
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800291c:	221e      	movs	r2, #30
 800291e:	701a      	strb	r2, [r3, #0]
		limit_timeout_flag = 0U;
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
	}
	otp = 1;
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
	lcd_update_flag = 1U;
 800292c:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	080083d8 	.word	0x080083d8
 8002940:	2000035c 	.word	0x2000035c
 8002944:	2000029c 	.word	0x2000029c
 8002948:	080083e0 	.word	0x080083e0
 800294c:	200002b1 	.word	0x200002b1
 8002950:	200002ae 	.word	0x200002ae
 8002954:	20000008 	.word	0x20000008
 8002958:	40010800 	.word	0x40010800
 800295c:	200002af 	.word	0x200002af
 8002960:	200002ad 	.word	0x200002ad
 8002964:	20000001 	.word	0x20000001
 8002968:	200002ac 	.word	0x200002ac
 800296c:	20000000 	.word	0x20000000
 8002970:	200002b3 	.word	0x200002b3

08002974 <Error_Handler>:
>>>>>>> majorchng

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
<<<<<<< HEAD
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800292c:	b672      	cpsid	i
}
 800292e:	bf00      	nop
=======
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002978:	b672      	cpsid	i
}
 800297a:	bf00      	nop
>>>>>>> majorchng
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
<<<<<<< HEAD
 8002930:	e7fe      	b.n	8002930 <Error_Handler+0x8>
	...

08002934 <output_init>:
=======
 800297c:	e7fe      	b.n	800297c <Error_Handler+0x8>
	...

08002980 <output_init>:
>>>>>>> majorchng
 *  Created on: Mar 27, 2023
 *      Author: Yash
 */
#include "output.h"

void output_init(void) {
<<<<<<< HEAD
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800293a:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <output_init+0xf0>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	4a39      	ldr	r2, [pc, #228]	; (8002a24 <output_init+0xf0>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	6193      	str	r3, [r2, #24]
 8002946:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <output_init+0xf0>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002952:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <output_init+0xf0>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	4a33      	ldr	r2, [pc, #204]	; (8002a24 <output_init+0xf0>)
 8002958:	f043 0310 	orr.w	r3, r3, #16
 800295c:	6193      	str	r3, [r2, #24]
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <output_init+0xf0>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOx = { 0 };
 800296a:	f107 0308 	add.w	r3, r7, #8
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN, GPIO_PIN_RESET);
 8002978:	2200      	movs	r2, #0
 800297a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800297e:	482a      	ldr	r0, [pc, #168]	; (8002a28 <output_init+0xf4>)
 8002980:	f000 fe15 	bl	80035ae <HAL_GPIO_WritePin>

	GPIOx.Pin = DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN;
 8002984:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002988:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800298a:	2301      	movs	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 800298e:	2302      	movs	r3, #2
 8002990:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2302      	movs	r3, #2
 8002994:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(OUTPUT_PORT, &GPIOx);
 8002996:	f107 0308 	add.w	r3, r7, #8
 800299a:	4619      	mov	r1, r3
 800299c:	4822      	ldr	r0, [pc, #136]	; (8002a28 <output_init+0xf4>)
 800299e:	f000 fc6b 	bl	8003278 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, GPIO_PIN_RESET);
 80029a2:	2200      	movs	r2, #0
 80029a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029a8:	4820      	ldr	r0, [pc, #128]	; (8002a2c <output_init+0xf8>)
 80029aa:	f000 fe00 	bl	80035ae <HAL_GPIO_WritePin>

	GPIOx.Pin = FAN_PIN;
 80029ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b2:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80029b4:	2301      	movs	r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 80029b8:	2302      	movs	r3, #2
 80029ba:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2302      	movs	r3, #2
 80029be:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(FAN_PORT, &GPIOx);
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	4619      	mov	r1, r3
 80029c6:	4819      	ldr	r0, [pc, #100]	; (8002a2c <output_init+0xf8>)
 80029c8:	f000 fc56 	bl	8003278 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 80029cc:	2200      	movs	r2, #0
 80029ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029d2:	4817      	ldr	r0, [pc, #92]	; (8002a30 <output_init+0xfc>)
 80029d4:	f000 fdeb 	bl	80035ae <HAL_GPIO_WritePin>

	GPIOx.Pin = BUZZER_PIN;
 80029d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029dc:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80029de:	2301      	movs	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 80029e2:	2302      	movs	r3, #2
 80029e4:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2302      	movs	r3, #2
 80029e8:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(BUZZER_PORT, &GPIOx);
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	4619      	mov	r1, r3
 80029f0:	480f      	ldr	r0, [pc, #60]	; (8002a30 <output_init+0xfc>)
 80029f2:	f000 fc41 	bl	8003278 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 , GPIO_PIN_SET);
 80029f6:	2201      	movs	r2, #1
 80029f8:	2110      	movs	r1, #16
 80029fa:	480c      	ldr	r0, [pc, #48]	; (8002a2c <output_init+0xf8>)
 80029fc:	f000 fdd7 	bl	80035ae <HAL_GPIO_WritePin>

	GPIOx.Pin = GPIO_PIN_4;
 8002a00:	2310      	movs	r3, #16
 8002a02:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8002a04:	2301      	movs	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOA, &GPIOx);
 8002a10:	f107 0308 	add.w	r3, r7, #8
 8002a14:	4619      	mov	r1, r3
 8002a16:	4805      	ldr	r0, [pc, #20]	; (8002a2c <output_init+0xf8>)
 8002a18:	f000 fc2e 	bl	8003278 <HAL_GPIO_Init>
}
 8002a1c:	bf00      	nop
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010c00 	.word	0x40010c00
 8002a2c:	40010800 	.word	0x40010800
 8002a30:	40011000 	.word	0x40011000

08002a34 <MX_SPI1_Init>:
=======
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <output_init+0xf0>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	4a39      	ldr	r2, [pc, #228]	; (8002a70 <output_init+0xf0>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6193      	str	r3, [r2, #24]
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <output_init+0xf0>)
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <output_init+0xf0>)
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4a33      	ldr	r2, [pc, #204]	; (8002a70 <output_init+0xf0>)
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	6193      	str	r3, [r2, #24]
 80029aa:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <output_init+0xf0>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOx = { 0 };
 80029b6:	f107 0308 	add.w	r3, r7, #8
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN, GPIO_PIN_RESET);
 80029c4:	2200      	movs	r2, #0
 80029c6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80029ca:	482a      	ldr	r0, [pc, #168]	; (8002a74 <output_init+0xf4>)
 80029cc:	f000 fe15 	bl	80035fa <HAL_GPIO_WritePin>

	GPIOx.Pin = DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN;
 80029d0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80029d4:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80029d6:	2301      	movs	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 80029da:	2302      	movs	r3, #2
 80029dc:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2302      	movs	r3, #2
 80029e0:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(OUTPUT_PORT, &GPIOx);
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	4619      	mov	r1, r3
 80029e8:	4822      	ldr	r0, [pc, #136]	; (8002a74 <output_init+0xf4>)
 80029ea:	f000 fc6b 	bl	80032c4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, GPIO_PIN_RESET);
 80029ee:	2200      	movs	r2, #0
 80029f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029f4:	4820      	ldr	r0, [pc, #128]	; (8002a78 <output_init+0xf8>)
 80029f6:	f000 fe00 	bl	80035fa <HAL_GPIO_WritePin>

	GPIOx.Pin = FAN_PIN;
 80029fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029fe:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8002a00:	2301      	movs	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8002a04:	2302      	movs	r3, #2
 8002a06:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(FAN_PORT, &GPIOx);
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	4619      	mov	r1, r3
 8002a12:	4819      	ldr	r0, [pc, #100]	; (8002a78 <output_init+0xf8>)
 8002a14:	f000 fc56 	bl	80032c4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a1e:	4817      	ldr	r0, [pc, #92]	; (8002a7c <output_init+0xfc>)
 8002a20:	f000 fdeb 	bl	80035fa <HAL_GPIO_WritePin>

	GPIOx.Pin = BUZZER_PIN;
 8002a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a28:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2302      	movs	r3, #2
 8002a34:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(BUZZER_PORT, &GPIOx);
 8002a36:	f107 0308 	add.w	r3, r7, #8
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	480f      	ldr	r0, [pc, #60]	; (8002a7c <output_init+0xfc>)
 8002a3e:	f000 fc41 	bl	80032c4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 , GPIO_PIN_SET);
 8002a42:	2201      	movs	r2, #1
 8002a44:	2110      	movs	r1, #16
 8002a46:	480c      	ldr	r0, [pc, #48]	; (8002a78 <output_init+0xf8>)
 8002a48:	f000 fdd7 	bl	80035fa <HAL_GPIO_WritePin>

	GPIOx.Pin = GPIO_PIN_4;
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8002a50:	2301      	movs	r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOA, &GPIOx);
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	4619      	mov	r1, r3
 8002a62:	4805      	ldr	r0, [pc, #20]	; (8002a78 <output_init+0xf8>)
 8002a64:	f000 fc2e 	bl	80032c4 <HAL_GPIO_Init>
}
 8002a68:	bf00      	nop
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40010c00 	.word	0x40010c00
 8002a78:	40010800 	.word	0x40010800
 8002a7c:	40011000 	.word	0x40011000

08002a80 <MX_SPI1_Init>:
>>>>>>> majorchng

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
=======
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
>>>>>>> majorchng
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
<<<<<<< HEAD
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a3a:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <MX_SPI1_Init+0x68>)
 8002a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a68:	2228      	movs	r2, #40	; 0x28
 8002a6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a80:	220a      	movs	r2, #10
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a84:	4804      	ldr	r0, [pc, #16]	; (8002a98 <MX_SPI1_Init+0x64>)
 8002a86:	f001 f9dd 	bl	8003e44 <HAL_SPI_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a90:	f7ff ff4a 	bl	8002928 <Error_Handler>
=======
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <MX_SPI1_Init+0x68>)
 8002a88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002a8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002ab4:	2228      	movs	r2, #40	; 0x28
 8002ab6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002acc:	220a      	movs	r2, #10
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ad0:	4804      	ldr	r0, [pc, #16]	; (8002ae4 <MX_SPI1_Init+0x64>)
 8002ad2:	f001 f9dd 	bl	8003e90 <HAL_SPI_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002adc:	f7ff ff4a 	bl	8002974 <Error_Handler>
>>>>>>> majorchng
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	200002b8 	.word	0x200002b8
 8002a9c:	40013000 	.word	0x40013000

08002aa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d12f      	bne.n	8002b20 <HAL_SPI_MspInit+0x80>
=======
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200002b8 	.word	0x200002b8
 8002ae8:	40013000 	.word	0x40013000

08002aec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_SPI_MspInit+0x88>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d12f      	bne.n	8002b6c <HAL_SPI_MspInit+0x80>
>>>>>>> majorchng
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_SPI_MspInit+0x8c>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <HAL_SPI_MspInit+0x8c>)
 8002ac6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_SPI_MspInit+0x8c>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad8:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <HAL_SPI_MspInit+0x8c>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <HAL_SPI_MspInit+0x8c>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_SPI_MspInit+0x8c>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
=======
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_SPI_MspInit+0x8c>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_SPI_MspInit+0x8c>)
 8002b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b16:	6193      	str	r3, [r2, #24]
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <HAL_SPI_MspInit+0x8c>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_SPI_MspInit+0x8c>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <HAL_SPI_MspInit+0x8c>)
 8002b2a:	f043 0304 	orr.w	r3, r3, #4
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_SPI_MspInit+0x8c>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> majorchng
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
<<<<<<< HEAD
 8002af0:	23a0      	movs	r3, #160	; 0xa0
 8002af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	4619      	mov	r1, r3
 8002b02:	480b      	ldr	r0, [pc, #44]	; (8002b30 <HAL_SPI_MspInit+0x90>)
 8002b04:	f000 fbb8 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b08:	2340      	movs	r3, #64	; 0x40
 8002b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b14:	f107 0310 	add.w	r3, r7, #16
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <HAL_SPI_MspInit+0x90>)
 8002b1c:	f000 fbac 	bl	8003278 <HAL_GPIO_Init>
=======
 8002b3c:	23a0      	movs	r3, #160	; 0xa0
 8002b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b44:	2303      	movs	r3, #3
 8002b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b48:	f107 0310 	add.w	r3, r7, #16
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480b      	ldr	r0, [pc, #44]	; (8002b7c <HAL_SPI_MspInit+0x90>)
 8002b50:	f000 fbb8 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b54:	2340      	movs	r3, #64	; 0x40
 8002b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	4619      	mov	r1, r3
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <HAL_SPI_MspInit+0x90>)
 8002b68:	f000 fbac 	bl	80032c4 <HAL_GPIO_Init>
>>>>>>> majorchng

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8002b20:	bf00      	nop
 8002b22:	3720      	adds	r7, #32
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40013000 	.word	0x40013000
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40010800 	.word	0x40010800

08002b34 <HAL_MspInit>:
=======
 8002b6c:	bf00      	nop
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40013000 	.word	0x40013000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40010800 	.word	0x40010800

08002b80 <HAL_MspInit>:
>>>>>>> majorchng
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
=======
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
>>>>>>> majorchng
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_MspInit+0x40>)
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	4a0d      	ldr	r2, [pc, #52]	; (8002b74 <HAL_MspInit+0x40>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6193      	str	r3, [r2, #24]
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_MspInit+0x40>)
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_MspInit+0x40>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_MspInit+0x40>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	61d3      	str	r3, [r2, #28]
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_MspInit+0x40>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
=======
 8002b86:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_MspInit+0x40>)
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_MspInit+0x40>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6193      	str	r3, [r2, #24]
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_MspInit+0x40>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_MspInit+0x40>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_MspInit+0x40>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	61d3      	str	r3, [r2, #28]
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_MspInit+0x40>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
>>>>>>> majorchng
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	40021000 	.word	0x40021000

08002b78 <NMI_Handler>:
=======
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <NMI_Handler>:
>>>>>>> majorchng
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
=======
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
>>>>>>> majorchng
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8002b7c:	e7fe      	b.n	8002b7c <NMI_Handler+0x4>

08002b7e <HardFault_Handler>:
=======
 8002bc8:	e7fe      	b.n	8002bc8 <NMI_Handler+0x4>

08002bca <HardFault_Handler>:
>>>>>>> majorchng

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
=======
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
>>>>>>> majorchng
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002b82:	e7fe      	b.n	8002b82 <HardFault_Handler+0x4>

08002b84 <MemManage_Handler>:
=======
 8002bce:	e7fe      	b.n	8002bce <HardFault_Handler+0x4>

08002bd0 <MemManage_Handler>:
>>>>>>> majorchng

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
=======
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
>>>>>>> majorchng
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002b88:	e7fe      	b.n	8002b88 <MemManage_Handler+0x4>

08002b8a <BusFault_Handler>:
=======
 8002bd4:	e7fe      	b.n	8002bd4 <MemManage_Handler+0x4>

08002bd6 <BusFault_Handler>:
>>>>>>> majorchng

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0
=======
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
>>>>>>> majorchng
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002b8e:	e7fe      	b.n	8002b8e <BusFault_Handler+0x4>

08002b90 <UsageFault_Handler>:
=======
 8002bda:	e7fe      	b.n	8002bda <BusFault_Handler+0x4>

08002bdc <UsageFault_Handler>:
>>>>>>> majorchng

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
=======
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
>>>>>>> majorchng
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002b94:	e7fe      	b.n	8002b94 <UsageFault_Handler+0x4>

08002b96 <SVC_Handler>:
=======
 8002be0:	e7fe      	b.n	8002be0 <UsageFault_Handler+0x4>

08002be2 <SVC_Handler>:
>>>>>>> majorchng

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
=======
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
>>>>>>> majorchng

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <DebugMon_Handler>:
=======
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <DebugMon_Handler>:
>>>>>>> majorchng

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
=======
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
>>>>>>> majorchng

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <PendSV_Handler>:
=======
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <PendSV_Handler>:
>>>>>>> majorchng

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
=======
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
>>>>>>> majorchng

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8002bb2:	bf00      	nop
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <SysTick_Handler>:
=======
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <SysTick_Handler>:
>>>>>>> majorchng

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	af00      	add	r7, sp, #0
=======
 8002c06:	b580      	push	{r7, lr}
 8002c08:	af00      	add	r7, sp, #0
>>>>>>> majorchng
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8002bbe:	f000 fa0d 	bl	8002fdc <HAL_IncTick>
=======
 8002c0a:	f000 fa0d 	bl	8003028 <HAL_IncTick>
>>>>>>> majorchng
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_getpid>:
=======
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_getpid>:
>>>>>>> majorchng
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  return 1;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <_kill>:

int _kill(int pid, int sig)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bde:	f002 fb49 	bl	8005274 <__errno>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2216      	movs	r2, #22
 8002be6:	601a      	str	r2, [r3, #0]
  return -1;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_exit>:

void _exit (int status)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ffe7 	bl	8002bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c06:	e7fe      	b.n	8002c06 <_exit+0x12>

08002c08 <_read>:
=======
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  return 1;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <_kill>:

int _kill(int pid, int sig)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c2a:	f002 fb49 	bl	80052c0 <__errno>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2216      	movs	r2, #22
 8002c32:	601a      	str	r2, [r3, #0]
  return -1;
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_exit>:

void _exit (int status)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ffe7 	bl	8002c20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c52:	e7fe      	b.n	8002c52 <_exit+0x12>

08002c54 <_read>:
>>>>>>> majorchng
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
=======
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
>>>>>>> majorchng
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e00a      	b.n	8002c30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c1a:	f3af 8000 	nop.w
 8002c1e:	4601      	mov	r1, r0
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	60ba      	str	r2, [r7, #8]
 8002c26:	b2ca      	uxtb	r2, r1
 8002c28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dbf0      	blt.n	8002c1a <_read+0x12>
  }

  return len;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
=======
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e00a      	b.n	8002c7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c66:	f3af 8000 	nop.w
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	60ba      	str	r2, [r7, #8]
 8002c72:	b2ca      	uxtb	r2, r1
 8002c74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	dbf0      	blt.n	8002c66 <_read+0x12>
  }

  return len;
 8002c84:	687b      	ldr	r3, [r7, #4]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
>>>>>>> majorchng
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e009      	b.n	8002c68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	60ba      	str	r2, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff f825 	bl	8001cac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3301      	adds	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	dbf1      	blt.n	8002c54 <_write+0x12>
  }
  return len;
 8002c70:	687b      	ldr	r3, [r7, #4]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_close>:

int _close(int file)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <_fstat>:
=======
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	e009      	b.n	8002cb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	60ba      	str	r2, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff f805 	bl	8001cb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	dbf1      	blt.n	8002ca0 <_write+0x12>
  }
  return len;
 8002cbc:	687b      	ldr	r3, [r7, #4]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_close>:

int _close(int file)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <_fstat>:
>>>>>>> majorchng


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <_isatty>:

int _isatty(int file)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
=======
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cec:	605a      	str	r2, [r3, #4]
  return 0;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <_isatty>:

int _isatty(int file)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d02:	2301      	movs	r3, #1
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
>>>>>>> majorchng
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< HEAD
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
	...

08002cdc <_sbrk>:
=======
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
	...

08002d28 <_sbrk>:
>>>>>>> majorchng
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
=======
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8002ce4:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <_sbrk+0x5c>)
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <_sbrk+0x60>)
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	613b      	str	r3, [r7, #16]
=======
 8002d30:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <_sbrk+0x5c>)
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <_sbrk+0x60>)
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
>>>>>>> majorchng
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <_sbrk+0x64>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <_sbrk+0x64>)
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <_sbrk+0x68>)
 8002cfc:	601a      	str	r2, [r3, #0]
=======
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <_sbrk+0x64>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <_sbrk+0x68>)
 8002d48:	601a      	str	r2, [r3, #0]
>>>>>>> majorchng
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <_sbrk+0x64>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d207      	bcs.n	8002d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d0c:	f002 fab2 	bl	8005274 <__errno>
 8002d10:	4603      	mov	r3, r0
 8002d12:	220c      	movs	r2, #12
 8002d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	e009      	b.n	8002d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <_sbrk+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <_sbrk+0x64>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <_sbrk+0x64>)
 8002d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20005000 	.word	0x20005000
 8002d3c:	00000400 	.word	0x00000400
 8002d40:	20000310 	.word	0x20000310
 8002d44:	200003b8 	.word	0x200003b8

08002d48 <SystemInit>:
=======
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d207      	bcs.n	8002d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d58:	f002 fab2 	bl	80052c0 <__errno>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	220c      	movs	r2, #12
 8002d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	e009      	b.n	8002d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <_sbrk+0x64>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <_sbrk+0x64>)
 8002d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20005000 	.word	0x20005000
 8002d88:	00000400 	.word	0x00000400
 8002d8c:	20000310 	.word	0x20000310
 8002d90:	200003b8 	.word	0x200003b8

08002d94 <SystemInit>:
>>>>>>> majorchng
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
=======
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
>>>>>>> majorchng

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <timer_init>:
=======
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <timer_init>:
>>>>>>> majorchng
#include "timer.h"

TIM_HandleTypeDef htim4;

void timer_init(void)
{
<<<<<<< HEAD
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_CLK_ENABLE();
 8002d5a:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <timer_init+0xa4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <timer_init+0xa4>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	61d3      	str	r3, [r2, #28]
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <timer_init+0xa4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d72:	f107 0310 	add.w	r3, r7, #16
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <timer_init+0xa8>)
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <timer_init+0xac>)
 8002d8e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7200;
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <timer_init+0xa8>)
 8002d92:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002d96:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <timer_init+0xa8>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1110+1;
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <timer_init+0xa8>)
 8002da0:	f240 4257 	movw	r2, #1111	; 0x457
 8002da4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <timer_init+0xa8>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <timer_init+0xa8>)
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim4);
 8002db2:	4812      	ldr	r0, [pc, #72]	; (8002dfc <timer_init+0xa8>)
 8002db4:	f001 fc76 	bl	80046a4 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dbc:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	480d      	ldr	r0, [pc, #52]	; (8002dfc <timer_init+0xa8>)
 8002dc6:	f001 fe4d 	bl	8004a64 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <timer_init+0xa8>)
 8002dda:	f002 f823 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2101      	movs	r1, #1
 8002de2:	201e      	movs	r0, #30
 8002de4:	f000 fa11 	bl	800320a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002de8:	201e      	movs	r0, #30
 8002dea:	f000 fa2a 	bl	8003242 <HAL_NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	20000314 	.word	0x20000314
 8002e00:	40000800 	.word	0x40000800

08002e04 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <TIM4_IRQHandler+0x10>)
 8002e0a:	f001 fd23 	bl	8004854 <HAL_TIM_IRQHandler>
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000314 	.word	0x20000314

08002e18 <MX_USART1_UART_Init>:
=======
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_CLK_ENABLE();
 8002da6:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <timer_init+0xa4>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <timer_init+0xa4>)
 8002dac:	f043 0304 	orr.w	r3, r3, #4
 8002db0:	61d3      	str	r3, [r2, #28]
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <timer_init+0xa4>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dcc:	f107 0308 	add.w	r3, r7, #8
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8002dd6:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <timer_init+0xa8>)
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <timer_init+0xac>)
 8002dda:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7200;
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <timer_init+0xa8>)
 8002dde:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002de2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <timer_init+0xa8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1110+1;
 8002dea:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <timer_init+0xa8>)
 8002dec:	f240 4257 	movw	r2, #1111	; 0x457
 8002df0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <timer_init+0xa8>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <timer_init+0xa8>)
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim4);
 8002dfe:	4812      	ldr	r0, [pc, #72]	; (8002e48 <timer_init+0xa8>)
 8002e00:	f001 fc76 	bl	80046f0 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e08:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002e0a:	f107 0310 	add.w	r3, r7, #16
 8002e0e:	4619      	mov	r1, r3
 8002e10:	480d      	ldr	r0, [pc, #52]	; (8002e48 <timer_init+0xa8>)
 8002e12:	f001 fe4d 	bl	8004ab0 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	4619      	mov	r1, r3
 8002e24:	4808      	ldr	r0, [pc, #32]	; (8002e48 <timer_init+0xa8>)
 8002e26:	f002 f823 	bl	8004e70 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	201e      	movs	r0, #30
 8002e30:	f000 fa11 	bl	8003256 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e34:	201e      	movs	r0, #30
 8002e36:	f000 fa2a 	bl	800328e <HAL_NVIC_EnableIRQ>
}
 8002e3a:	bf00      	nop
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	20000314 	.word	0x20000314
 8002e4c:	40000800 	.word	0x40000800

08002e50 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <TIM4_IRQHandler+0x10>)
 8002e56:	f001 fd23 	bl	80048a0 <HAL_TIM_IRQHandler>
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000314 	.word	0x20000314

08002e64 <MX_USART1_UART_Init>:
>>>>>>> majorchng
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
=======
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
>>>>>>> majorchng
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <MX_USART1_UART_Init+0x50>)
 8002e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e3e:	220c      	movs	r2, #12
 8002e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e4e:	4805      	ldr	r0, [pc, #20]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e50:	f002 f858 	bl	8004f04 <HAL_UART_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e5a:	f7ff fd65 	bl	8002928 <Error_Handler>
=======
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <MX_USART1_UART_Init+0x4c>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <MX_USART1_UART_Init+0x50>)
 8002e6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <MX_USART1_UART_Init+0x4c>)
 8002e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <MX_USART1_UART_Init+0x4c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <MX_USART1_UART_Init+0x4c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <MX_USART1_UART_Init+0x4c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <MX_USART1_UART_Init+0x4c>)
 8002e8a:	220c      	movs	r2, #12
 8002e8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <MX_USART1_UART_Init+0x4c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <MX_USART1_UART_Init+0x4c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e9a:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <MX_USART1_UART_Init+0x4c>)
 8002e9c:	f002 f858 	bl	8004f50 <HAL_UART_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ea6:	f7ff fd65 	bl	8002974 <Error_Handler>
>>>>>>> majorchng
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000035c 	.word	0x2000035c
 8002e68:	40013800 	.word	0x40013800

08002e6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0310 	add.w	r3, r7, #16
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_UART_MspInit+0x8c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d131      	bne.n	8002ef0 <HAL_UART_MspInit+0x84>
=======
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000035c 	.word	0x2000035c
 8002eb4:	40013800 	.word	0x40013800

08002eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 0310 	add.w	r3, r7, #16
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1c      	ldr	r2, [pc, #112]	; (8002f44 <HAL_UART_MspInit+0x8c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d131      	bne.n	8002f3c <HAL_UART_MspInit+0x84>
>>>>>>> majorchng
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_UART_MspInit+0x90>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	4a1a      	ldr	r2, [pc, #104]	; (8002efc <HAL_UART_MspInit+0x90>)
 8002e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e96:	6193      	str	r3, [r2, #24]
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <HAL_UART_MspInit+0x90>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_UART_MspInit+0x90>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <HAL_UART_MspInit+0x90>)
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	6193      	str	r3, [r2, #24]
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_UART_MspInit+0x90>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
=======
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_UART_MspInit+0x90>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <HAL_UART_MspInit+0x90>)
 8002ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee2:	6193      	str	r3, [r2, #24]
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_UART_MspInit+0x90>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef0:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <HAL_UART_MspInit+0x90>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <HAL_UART_MspInit+0x90>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	6193      	str	r3, [r2, #24]
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_UART_MspInit+0x90>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
>>>>>>> majorchng
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 8002ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4619      	mov	r1, r3
 8002ed0:	480b      	ldr	r0, [pc, #44]	; (8002f00 <HAL_UART_MspInit+0x94>)
 8002ed2:	f000 f9d1 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4805      	ldr	r0, [pc, #20]	; (8002f00 <HAL_UART_MspInit+0x94>)
 8002eec:	f000 f9c4 	bl	8003278 <HAL_GPIO_Init>
=======
 8002f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f12:	2303      	movs	r3, #3
 8002f14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f16:	f107 0310 	add.w	r3, r7, #16
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480b      	ldr	r0, [pc, #44]	; (8002f4c <HAL_UART_MspInit+0x94>)
 8002f1e:	f000 f9d1 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	4619      	mov	r1, r3
 8002f36:	4805      	ldr	r0, [pc, #20]	; (8002f4c <HAL_UART_MspInit+0x94>)
 8002f38:	f000 f9c4 	bl	80032c4 <HAL_GPIO_Init>
>>>>>>> majorchng

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8002ef0:	bf00      	nop
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010800 	.word	0x40010800

08002f04 <Reset_Handler>:
=======
 8002f3c:	bf00      	nop
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40013800 	.word	0x40013800
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40010800 	.word	0x40010800

08002f50 <Reset_Handler>:
>>>>>>> majorchng
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
<<<<<<< HEAD
 8002f04:	480c      	ldr	r0, [pc, #48]	; (8002f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f06:	490d      	ldr	r1, [pc, #52]	; (8002f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f1c:	4c0a      	ldr	r4, [pc, #40]	; (8002f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f2a:	f7ff ff0d 	bl	8002d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f002 f9a7 	bl	8005280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f32:	f7fe fecd 	bl	8001cd0 <main>
  bx lr
 8002f36:	4770      	bx	lr
  ldr r0, =_sdata
 8002f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f3c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002f40:	080087b4 	.word	0x080087b4
  ldr r2, =_sbss
 8002f44:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f48:	200003b4 	.word	0x200003b4

08002f4c <ADC1_2_IRQHandler>:
=======
 8002f50:	480c      	ldr	r0, [pc, #48]	; (8002f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f52:	490d      	ldr	r1, [pc, #52]	; (8002f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f58:	e002      	b.n	8002f60 <LoopCopyDataInit>

08002f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5e:	3304      	adds	r3, #4

08002f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f64:	d3f9      	bcc.n	8002f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f68:	4c0a      	ldr	r4, [pc, #40]	; (8002f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f6c:	e001      	b.n	8002f72 <LoopFillZerobss>

08002f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f70:	3204      	adds	r2, #4

08002f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f74:	d3fb      	bcc.n	8002f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f76:	f7ff ff0d 	bl	8002d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f7a:	f002 f9a7 	bl	80052cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f7e:	f7fe fead 	bl	8001cdc <main>
  bx lr
 8002f82:	4770      	bx	lr
  ldr r0, =_sdata
 8002f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f88:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002f8c:	080087f4 	.word	0x080087f4
  ldr r2, =_sbss
 8002f90:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f94:	200003b4 	.word	0x200003b4

08002f98 <ADC1_2_IRQHandler>:
>>>>>>> majorchng
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8002f4c:	e7fe      	b.n	8002f4c <ADC1_2_IRQHandler>
	...

08002f50 <HAL_Init>:
=======
 8002f98:	e7fe      	b.n	8002f98 <ADC1_2_IRQHandler>
	...

08002f9c <HAL_Init>:
>>>>>>> majorchng
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
=======
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
>>>>>>> majorchng
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_Init+0x28>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <HAL_Init+0x28>)
 8002f5a:	f043 0310 	orr.w	r3, r3, #16
 8002f5e:	6013      	str	r3, [r2, #0]
=======
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_Init+0x28>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <HAL_Init+0x28>)
 8002fa6:	f043 0310 	orr.w	r3, r3, #16
 8002faa:	6013      	str	r3, [r2, #0]
>>>>>>> majorchng
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8002f60:	2003      	movs	r0, #3
 8002f62:	f000 f947 	bl	80031f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f66:	200f      	movs	r0, #15
 8002f68:	f000 f808 	bl	8002f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f6c:	f7ff fde2 	bl	8002b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40022000 	.word	0x40022000

08002f7c <HAL_InitTick>:
=======
 8002fac:	2003      	movs	r0, #3
 8002fae:	f000 f947 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fb2:	200f      	movs	r0, #15
 8002fb4:	f000 f808 	bl	8002fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb8:	f7ff fde2 	bl	8002b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40022000 	.word	0x40022000

08002fc8 <HAL_InitTick>:
>>>>>>> majorchng
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_InitTick+0x54>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_InitTick+0x58>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f95f 	bl	800325e <HAL_SYSTICK_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00e      	b.n	8002fc8 <HAL_InitTick+0x4c>
=======
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_InitTick+0x54>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_InitTick+0x58>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f95f 	bl	80032aa <HAL_SYSTICK_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00e      	b.n	8003014 <HAL_InitTick+0x4c>
>>>>>>> majorchng
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d80a      	bhi.n	8002fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	f000 f927 	bl	800320a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fbc:	4a06      	ldr	r2, [pc, #24]	; (8002fd8 <HAL_InitTick+0x5c>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6013      	str	r3, [r2, #0]
=======
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0f      	cmp	r3, #15
 8002ffa:	d80a      	bhi.n	8003012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	f04f 30ff 	mov.w	r0, #4294967295
 8003004:	f000 f927 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003008:	4a06      	ldr	r2, [pc, #24]	; (8003024 <HAL_InitTick+0x5c>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6013      	str	r3, [r2, #0]
>>>>>>> majorchng
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	2000000c 	.word	0x2000000c
 8002fd4:	20000014 	.word	0x20000014
 8002fd8:	20000010 	.word	0x20000010

08002fdc <HAL_IncTick>:
=======
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	2000000c 	.word	0x2000000c
 8003020:	20000014 	.word	0x20000014
 8003024:	20000010 	.word	0x20000010

08003028 <HAL_IncTick>:
>>>>>>> majorchng
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_IncTick+0x1c>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_IncTick+0x20>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <HAL_IncTick+0x20>)
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	20000014 	.word	0x20000014
 8002ffc:	200003a0 	.word	0x200003a0

08003000 <HAL_GetTick>:
=======
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_IncTick+0x1c>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_IncTick+0x20>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4413      	add	r3, r2
 8003038:	4a03      	ldr	r2, [pc, #12]	; (8003048 <HAL_IncTick+0x20>)
 800303a:	6013      	str	r3, [r2, #0]
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	20000014 	.word	0x20000014
 8003048:	200003a0 	.word	0x200003a0

0800304c <HAL_GetTick>:
>>>>>>> majorchng
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return uwTick;
 8003004:	4b02      	ldr	r3, [pc, #8]	; (8003010 <HAL_GetTick+0x10>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	200003a0 	.word	0x200003a0

08003014 <HAL_Delay>:
=======
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return uwTick;
 8003050:	4b02      	ldr	r3, [pc, #8]	; (800305c <HAL_GetTick+0x10>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	200003a0 	.word	0x200003a0

08003060 <HAL_Delay>:
>>>>>>> majorchng
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff fff0 	bl	8003000 <HAL_GetTick>
 8003020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d005      	beq.n	800303a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <HAL_Delay+0x44>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800303a:	bf00      	nop
 800303c:	f7ff ffe0 	bl	8003000 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d8f7      	bhi.n	800303c <HAL_Delay+0x28>
  {
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000014 	.word	0x20000014

0800305c <__NVIC_SetPriorityGrouping>:
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <__NVIC_SetPriorityGrouping+0x44>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003078:	4013      	ands	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	60d3      	str	r3, [r2, #12]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <__NVIC_GetPriorityGrouping>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <__NVIC_GetPriorityGrouping+0x18>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	f003 0307 	and.w	r3, r3, #7
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <__NVIC_EnableIRQ>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	db0b      	blt.n	80030ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	4906      	ldr	r1, [pc, #24]	; (80030f4 <__NVIC_EnableIRQ+0x34>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2001      	movs	r0, #1
 80030e2:	fa00 f202 	lsl.w	r2, r0, r2
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <__NVIC_SetPriority>:
=======
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7ff fff0 	bl	800304c <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d005      	beq.n	8003086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <HAL_Delay+0x44>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003086:	bf00      	nop
 8003088:	f7ff ffe0 	bl	800304c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	429a      	cmp	r2, r3
 8003096:	d8f7      	bhi.n	8003088 <HAL_Delay+0x28>
  {
  }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000014 	.word	0x20000014

080030a8 <__NVIC_SetPriorityGrouping>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_GetPriorityGrouping>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <__NVIC_GetPriorityGrouping+0x18>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0307 	and.w	r3, r3, #7
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_EnableIRQ>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db0b      	blt.n	8003136 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4906      	ldr	r1, [pc, #24]	; (8003140 <__NVIC_EnableIRQ+0x34>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100

08003144 <__NVIC_SetPriority>:
>>>>>>> majorchng
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003108:	2b00      	cmp	r3, #0
 800310a:	db0a      	blt.n	8003122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	490c      	ldr	r1, [pc, #48]	; (8003144 <__NVIC_SetPriority+0x4c>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	440b      	add	r3, r1
 800311c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	db0a      	blt.n	800316e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	490c      	ldr	r1, [pc, #48]	; (8003190 <__NVIC_SetPriority+0x4c>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	440b      	add	r3, r1
 8003168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> majorchng
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8003120:	e00a      	b.n	8003138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4908      	ldr	r1, [pc, #32]	; (8003148 <__NVIC_SetPriority+0x50>)
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	3b04      	subs	r3, #4
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	440b      	add	r3, r1
 8003136:	761a      	strb	r2, [r3, #24]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000e100 	.word	0xe000e100
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <NVIC_EncodePriority>:
=======
 800316c:	e00a      	b.n	8003184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4908      	ldr	r1, [pc, #32]	; (8003194 <__NVIC_SetPriority+0x50>)
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	3b04      	subs	r3, #4
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	440b      	add	r3, r1
 8003182:	761a      	strb	r2, [r3, #24]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e100 	.word	0xe000e100
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <NVIC_EncodePriority>:
>>>>>>> majorchng
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	; 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	61fb      	str	r3, [r7, #28]
=======
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	61fb      	str	r3, [r7, #28]
>>>>>>> majorchng
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f1c3 0307 	rsb	r3, r3, #7
 8003166:	2b04      	cmp	r3, #4
 8003168:	bf28      	it	cs
 800316a:	2304      	movcs	r3, #4
 800316c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3304      	adds	r3, #4
 8003172:	2b06      	cmp	r3, #6
 8003174:	d902      	bls.n	800317c <NVIC_EncodePriority+0x30>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3b03      	subs	r3, #3
 800317a:	e000      	b.n	800317e <NVIC_EncodePriority+0x32>
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	f04f 32ff 	mov.w	r2, #4294967295
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	401a      	ands	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003194:	f04f 31ff 	mov.w	r1, #4294967295
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	43d9      	mvns	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	4313      	orrs	r3, r2
         );
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	; 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <SysTick_Config>:
=======
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f1c3 0307 	rsb	r3, r3, #7
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	bf28      	it	cs
 80031b6:	2304      	movcs	r3, #4
 80031b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3304      	adds	r3, #4
 80031be:	2b06      	cmp	r3, #6
 80031c0:	d902      	bls.n	80031c8 <NVIC_EncodePriority+0x30>
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3b03      	subs	r3, #3
 80031c6:	e000      	b.n	80031ca <NVIC_EncodePriority+0x32>
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	f04f 32ff 	mov.w	r2, #4294967295
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	401a      	ands	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e0:	f04f 31ff 	mov.w	r1, #4294967295
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	43d9      	mvns	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	4313      	orrs	r3, r2
         );
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <SysTick_Config>:
>>>>>>> majorchng
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c0:	d301      	bcc.n	80031c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00f      	b.n	80031e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <SysTick_Config+0x40>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ce:	210f      	movs	r1, #15
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	f7ff ff90 	bl	80030f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <SysTick_Config+0x40>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <SysTick_Config+0x40>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010

080031f4 <HAL_NVIC_SetPriorityGrouping>:
=======
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff90 	bl	8003144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> majorchng
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
=======
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ff2d 	bl	800305c <__NVIC_SetPriorityGrouping>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_SetPriority>:
=======
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff2d 	bl	80030a8 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
>>>>>>> majorchng
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
=======
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
>>>>>>> majorchng
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 800321c:	f7ff ff42 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 8003220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7ff ff90 	bl	800314c <NVIC_EncodePriority>
 800322c:	4602      	mov	r2, r0
 800322e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff5f 	bl	80030f8 <__NVIC_SetPriority>
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_EnableIRQ>:
=======
 8003268:	f7ff ff42 	bl	80030f0 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff90 	bl	8003198 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5f 	bl	8003144 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
>>>>>>> majorchng
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	71fb      	strb	r3, [r7, #7]
=======
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
>>>>>>> majorchng
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff35 	bl	80030c0 <__NVIC_EnableIRQ>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SYSTICK_Config>:
=======
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff35 	bl	800310c <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
>>>>>>> majorchng
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffa2 	bl	80031b0 <SysTick_Config>
 800326c:	4603      	mov	r3, r0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_GPIO_Init>:
=======
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_GPIO_Init>:
>>>>>>> majorchng
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8003278:	b480      	push	{r7}
 800327a:	b08b      	sub	sp, #44	; 0x2c
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003282:	2300      	movs	r3, #0
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80032c4:	b480      	push	{r7}
 80032c6:	b08b      	sub	sp, #44	; 0x2c
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> majorchng
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
=======
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
>>>>>>> majorchng
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 800328a:	e169      	b.n	8003560 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800328c:	2201      	movs	r2, #1
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f040 8158 	bne.w	800355a <HAL_GPIO_Init+0x2e2>
=======
 80032d6:	e169      	b.n	80035ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032d8:	2201      	movs	r2, #1
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	f040 8158 	bne.w	80035a6 <HAL_GPIO_Init+0x2e2>
>>>>>>> majorchng
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4a9a      	ldr	r2, [pc, #616]	; (8003518 <HAL_GPIO_Init+0x2a0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d05e      	beq.n	8003372 <HAL_GPIO_Init+0xfa>
 80032b4:	4a98      	ldr	r2, [pc, #608]	; (8003518 <HAL_GPIO_Init+0x2a0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d875      	bhi.n	80033a6 <HAL_GPIO_Init+0x12e>
 80032ba:	4a98      	ldr	r2, [pc, #608]	; (800351c <HAL_GPIO_Init+0x2a4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d058      	beq.n	8003372 <HAL_GPIO_Init+0xfa>
 80032c0:	4a96      	ldr	r2, [pc, #600]	; (800351c <HAL_GPIO_Init+0x2a4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d86f      	bhi.n	80033a6 <HAL_GPIO_Init+0x12e>
 80032c6:	4a96      	ldr	r2, [pc, #600]	; (8003520 <HAL_GPIO_Init+0x2a8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d052      	beq.n	8003372 <HAL_GPIO_Init+0xfa>
 80032cc:	4a94      	ldr	r2, [pc, #592]	; (8003520 <HAL_GPIO_Init+0x2a8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d869      	bhi.n	80033a6 <HAL_GPIO_Init+0x12e>
 80032d2:	4a94      	ldr	r2, [pc, #592]	; (8003524 <HAL_GPIO_Init+0x2ac>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d04c      	beq.n	8003372 <HAL_GPIO_Init+0xfa>
 80032d8:	4a92      	ldr	r2, [pc, #584]	; (8003524 <HAL_GPIO_Init+0x2ac>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d863      	bhi.n	80033a6 <HAL_GPIO_Init+0x12e>
 80032de:	4a92      	ldr	r2, [pc, #584]	; (8003528 <HAL_GPIO_Init+0x2b0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d046      	beq.n	8003372 <HAL_GPIO_Init+0xfa>
 80032e4:	4a90      	ldr	r2, [pc, #576]	; (8003528 <HAL_GPIO_Init+0x2b0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d85d      	bhi.n	80033a6 <HAL_GPIO_Init+0x12e>
 80032ea:	2b12      	cmp	r3, #18
 80032ec:	d82a      	bhi.n	8003344 <HAL_GPIO_Init+0xcc>
 80032ee:	2b12      	cmp	r3, #18
 80032f0:	d859      	bhi.n	80033a6 <HAL_GPIO_Init+0x12e>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <HAL_GPIO_Init+0x80>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	08003373 	.word	0x08003373
 80032fc:	0800334d 	.word	0x0800334d
 8003300:	0800335f 	.word	0x0800335f
 8003304:	080033a1 	.word	0x080033a1
 8003308:	080033a7 	.word	0x080033a7
 800330c:	080033a7 	.word	0x080033a7
 8003310:	080033a7 	.word	0x080033a7
 8003314:	080033a7 	.word	0x080033a7
 8003318:	080033a7 	.word	0x080033a7
 800331c:	080033a7 	.word	0x080033a7
 8003320:	080033a7 	.word	0x080033a7
 8003324:	080033a7 	.word	0x080033a7
 8003328:	080033a7 	.word	0x080033a7
 800332c:	080033a7 	.word	0x080033a7
 8003330:	080033a7 	.word	0x080033a7
 8003334:	080033a7 	.word	0x080033a7
 8003338:	080033a7 	.word	0x080033a7
 800333c:	08003355 	.word	0x08003355
 8003340:	08003369 	.word	0x08003369
 8003344:	4a79      	ldr	r2, [pc, #484]	; (800352c <HAL_GPIO_Init+0x2b4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <HAL_GPIO_Init+0xfa>
=======
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4a9a      	ldr	r2, [pc, #616]	; (8003564 <HAL_GPIO_Init+0x2a0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d05e      	beq.n	80033be <HAL_GPIO_Init+0xfa>
 8003300:	4a98      	ldr	r2, [pc, #608]	; (8003564 <HAL_GPIO_Init+0x2a0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d875      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 8003306:	4a98      	ldr	r2, [pc, #608]	; (8003568 <HAL_GPIO_Init+0x2a4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d058      	beq.n	80033be <HAL_GPIO_Init+0xfa>
 800330c:	4a96      	ldr	r2, [pc, #600]	; (8003568 <HAL_GPIO_Init+0x2a4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d86f      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 8003312:	4a96      	ldr	r2, [pc, #600]	; (800356c <HAL_GPIO_Init+0x2a8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d052      	beq.n	80033be <HAL_GPIO_Init+0xfa>
 8003318:	4a94      	ldr	r2, [pc, #592]	; (800356c <HAL_GPIO_Init+0x2a8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d869      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 800331e:	4a94      	ldr	r2, [pc, #592]	; (8003570 <HAL_GPIO_Init+0x2ac>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d04c      	beq.n	80033be <HAL_GPIO_Init+0xfa>
 8003324:	4a92      	ldr	r2, [pc, #584]	; (8003570 <HAL_GPIO_Init+0x2ac>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d863      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 800332a:	4a92      	ldr	r2, [pc, #584]	; (8003574 <HAL_GPIO_Init+0x2b0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d046      	beq.n	80033be <HAL_GPIO_Init+0xfa>
 8003330:	4a90      	ldr	r2, [pc, #576]	; (8003574 <HAL_GPIO_Init+0x2b0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d85d      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 8003336:	2b12      	cmp	r3, #18
 8003338:	d82a      	bhi.n	8003390 <HAL_GPIO_Init+0xcc>
 800333a:	2b12      	cmp	r3, #18
 800333c:	d859      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <HAL_GPIO_Init+0x80>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	080033bf 	.word	0x080033bf
 8003348:	08003399 	.word	0x08003399
 800334c:	080033ab 	.word	0x080033ab
 8003350:	080033ed 	.word	0x080033ed
 8003354:	080033f3 	.word	0x080033f3
 8003358:	080033f3 	.word	0x080033f3
 800335c:	080033f3 	.word	0x080033f3
 8003360:	080033f3 	.word	0x080033f3
 8003364:	080033f3 	.word	0x080033f3
 8003368:	080033f3 	.word	0x080033f3
 800336c:	080033f3 	.word	0x080033f3
 8003370:	080033f3 	.word	0x080033f3
 8003374:	080033f3 	.word	0x080033f3
 8003378:	080033f3 	.word	0x080033f3
 800337c:	080033f3 	.word	0x080033f3
 8003380:	080033f3 	.word	0x080033f3
 8003384:	080033f3 	.word	0x080033f3
 8003388:	080033a1 	.word	0x080033a1
 800338c:	080033b5 	.word	0x080033b5
 8003390:	4a79      	ldr	r2, [pc, #484]	; (8003578 <HAL_GPIO_Init+0x2b4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0xfa>
>>>>>>> majorchng
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 800334a:	e02c      	b.n	80033a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	623b      	str	r3, [r7, #32]
          break;
 8003352:	e029      	b.n	80033a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	3304      	adds	r3, #4
 800335a:	623b      	str	r3, [r7, #32]
          break;
 800335c:	e024      	b.n	80033a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	3308      	adds	r3, #8
 8003364:	623b      	str	r3, [r7, #32]
          break;
 8003366:	e01f      	b.n	80033a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	330c      	adds	r3, #12
 800336e:	623b      	str	r3, [r7, #32]
          break;
 8003370:	e01a      	b.n	80033a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800337a:	2304      	movs	r3, #4
 800337c:	623b      	str	r3, [r7, #32]
          break;
 800337e:	e013      	b.n	80033a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003388:	2308      	movs	r3, #8
 800338a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	611a      	str	r2, [r3, #16]
          break;
 8003392:	e009      	b.n	80033a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003394:	2308      	movs	r3, #8
 8003396:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	615a      	str	r2, [r3, #20]
          break;
 800339e:	e003      	b.n	80033a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033a0:	2300      	movs	r3, #0
 80033a2:	623b      	str	r3, [r7, #32]
          break;
 80033a4:	e000      	b.n	80033a8 <HAL_GPIO_Init+0x130>
          break;
 80033a6:	bf00      	nop
=======
 8003396:	e02c      	b.n	80033f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	623b      	str	r3, [r7, #32]
          break;
 800339e:	e029      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	3304      	adds	r3, #4
 80033a6:	623b      	str	r3, [r7, #32]
          break;
 80033a8:	e024      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	3308      	adds	r3, #8
 80033b0:	623b      	str	r3, [r7, #32]
          break;
 80033b2:	e01f      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	330c      	adds	r3, #12
 80033ba:	623b      	str	r3, [r7, #32]
          break;
 80033bc:	e01a      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d102      	bne.n	80033cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033c6:	2304      	movs	r3, #4
 80033c8:	623b      	str	r3, [r7, #32]
          break;
 80033ca:	e013      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d105      	bne.n	80033e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033d4:	2308      	movs	r3, #8
 80033d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	611a      	str	r2, [r3, #16]
          break;
 80033de:	e009      	b.n	80033f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033e0:	2308      	movs	r3, #8
 80033e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	615a      	str	r2, [r3, #20]
          break;
 80033ea:	e003      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033ec:	2300      	movs	r3, #0
 80033ee:	623b      	str	r3, [r7, #32]
          break;
 80033f0:	e000      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          break;
 80033f2:	bf00      	nop
>>>>>>> majorchng
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	d801      	bhi.n	80033b2 <HAL_GPIO_Init+0x13a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	e001      	b.n	80033b6 <HAL_GPIO_Init+0x13e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2bff      	cmp	r3, #255	; 0xff
 80033bc:	d802      	bhi.n	80033c4 <HAL_GPIO_Init+0x14c>
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	e002      	b.n	80033ca <HAL_GPIO_Init+0x152>
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	3b08      	subs	r3, #8
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	210f      	movs	r1, #15
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	401a      	ands	r2, r3
 80033dc:	6a39      	ldr	r1, [r7, #32]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	431a      	orrs	r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	601a      	str	r2, [r3, #0]
=======
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2bff      	cmp	r3, #255	; 0xff
 80033f8:	d801      	bhi.n	80033fe <HAL_GPIO_Init+0x13a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	e001      	b.n	8003402 <HAL_GPIO_Init+0x13e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2bff      	cmp	r3, #255	; 0xff
 8003408:	d802      	bhi.n	8003410 <HAL_GPIO_Init+0x14c>
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	e002      	b.n	8003416 <HAL_GPIO_Init+0x152>
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	3b08      	subs	r3, #8
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	210f      	movs	r1, #15
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	401a      	ands	r2, r3
 8003428:	6a39      	ldr	r1, [r7, #32]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	431a      	orrs	r2, r3
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	601a      	str	r2, [r3, #0]
>>>>>>> majorchng

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80b1 	beq.w	800355a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033f8:	4b4d      	ldr	r3, [pc, #308]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	4a4c      	ldr	r2, [pc, #304]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6193      	str	r3, [r2, #24]
 8003404:	4b4a      	ldr	r3, [pc, #296]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003410:	4a48      	ldr	r2, [pc, #288]	; (8003534 <HAL_GPIO_Init+0x2bc>)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	3302      	adds	r3, #2
 8003418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	220f      	movs	r2, #15
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4013      	ands	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a40      	ldr	r2, [pc, #256]	; (8003538 <HAL_GPIO_Init+0x2c0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <HAL_GPIO_Init+0x1ec>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a3f      	ldr	r2, [pc, #252]	; (800353c <HAL_GPIO_Init+0x2c4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00d      	beq.n	8003460 <HAL_GPIO_Init+0x1e8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3e      	ldr	r2, [pc, #248]	; (8003540 <HAL_GPIO_Init+0x2c8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <HAL_GPIO_Init+0x1e4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3d      	ldr	r2, [pc, #244]	; (8003544 <HAL_GPIO_Init+0x2cc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_GPIO_Init+0x1e0>
 8003454:	2303      	movs	r3, #3
 8003456:	e006      	b.n	8003466 <HAL_GPIO_Init+0x1ee>
 8003458:	2304      	movs	r3, #4
 800345a:	e004      	b.n	8003466 <HAL_GPIO_Init+0x1ee>
 800345c:	2302      	movs	r3, #2
 800345e:	e002      	b.n	8003466 <HAL_GPIO_Init+0x1ee>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_GPIO_Init+0x1ee>
 8003464:	2300      	movs	r3, #0
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	f002 0203 	and.w	r2, r2, #3
 800346c:	0092      	lsls	r2, r2, #2
 800346e:	4093      	lsls	r3, r2
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003476:	492f      	ldr	r1, [pc, #188]	; (8003534 <HAL_GPIO_Init+0x2bc>)
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80b1 	beq.w	80035a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003444:	4b4d      	ldr	r3, [pc, #308]	; (800357c <HAL_GPIO_Init+0x2b8>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	4a4c      	ldr	r2, [pc, #304]	; (800357c <HAL_GPIO_Init+0x2b8>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6193      	str	r3, [r2, #24]
 8003450:	4b4a      	ldr	r3, [pc, #296]	; (800357c <HAL_GPIO_Init+0x2b8>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800345c:	4a48      	ldr	r2, [pc, #288]	; (8003580 <HAL_GPIO_Init+0x2bc>)
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003468:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	220f      	movs	r2, #15
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4013      	ands	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a40      	ldr	r2, [pc, #256]	; (8003584 <HAL_GPIO_Init+0x2c0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_GPIO_Init+0x1ec>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a3f      	ldr	r2, [pc, #252]	; (8003588 <HAL_GPIO_Init+0x2c4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00d      	beq.n	80034ac <HAL_GPIO_Init+0x1e8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3e      	ldr	r2, [pc, #248]	; (800358c <HAL_GPIO_Init+0x2c8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d007      	beq.n	80034a8 <HAL_GPIO_Init+0x1e4>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a3d      	ldr	r2, [pc, #244]	; (8003590 <HAL_GPIO_Init+0x2cc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_GPIO_Init+0x1e0>
 80034a0:	2303      	movs	r3, #3
 80034a2:	e006      	b.n	80034b2 <HAL_GPIO_Init+0x1ee>
 80034a4:	2304      	movs	r3, #4
 80034a6:	e004      	b.n	80034b2 <HAL_GPIO_Init+0x1ee>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e002      	b.n	80034b2 <HAL_GPIO_Init+0x1ee>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_GPIO_Init+0x1ee>
 80034b0:	2300      	movs	r3, #0
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	f002 0203 	and.w	r2, r2, #3
 80034b8:	0092      	lsls	r2, r2, #2
 80034ba:	4093      	lsls	r3, r2
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034c2:	492f      	ldr	r1, [pc, #188]	; (8003580 <HAL_GPIO_Init+0x2bc>)
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3302      	adds	r3, #2
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> majorchng


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003490:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	492c      	ldr	r1, [pc, #176]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	e006      	b.n	80034ac <HAL_GPIO_Init+0x234>
=======
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d006      	beq.n	80034ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034dc:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	492c      	ldr	r1, [pc, #176]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
 80034e8:	e006      	b.n	80034f8 <HAL_GPIO_Init+0x234>
>>>>>>> majorchng
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 800349e:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	4928      	ldr	r1, [pc, #160]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
=======
 80034ea:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	4928      	ldr	r1, [pc, #160]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	600b      	str	r3, [r1, #0]
>>>>>>> majorchng
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4922      	ldr	r1, [pc, #136]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
 80034c4:	e006      	b.n	80034d4 <HAL_GPIO_Init+0x25c>
=======
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d006      	beq.n	8003512 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003504:	4b23      	ldr	r3, [pc, #140]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	4922      	ldr	r1, [pc, #136]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
 8003510:	e006      	b.n	8003520 <HAL_GPIO_Init+0x25c>
>>>>>>> majorchng
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	491e      	ldr	r1, [pc, #120]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
=======
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	43db      	mvns	r3, r3
 800351a:	491e      	ldr	r1, [pc, #120]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 800351c:	4013      	ands	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
>>>>>>> majorchng
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d006      	beq.n	80034ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4918      	ldr	r1, [pc, #96]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	608b      	str	r3, [r1, #8]
 80034ec:	e006      	b.n	80034fc <HAL_GPIO_Init+0x284>
=======
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d006      	beq.n	800353a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	4918      	ldr	r1, [pc, #96]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]
 8003538:	e006      	b.n	8003548 <HAL_GPIO_Init+0x284>
>>>>>>> majorchng
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	4914      	ldr	r1, [pc, #80]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]
=======
 800353a:	4b16      	ldr	r3, [pc, #88]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	43db      	mvns	r3, r3
 8003542:	4914      	ldr	r1, [pc, #80]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 8003544:	4013      	ands	r3, r2
 8003546:	608b      	str	r3, [r1, #8]
>>>>>>> majorchng
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d021      	beq.n	800354c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	490e      	ldr	r1, [pc, #56]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	4313      	orrs	r3, r2
 8003512:	60cb      	str	r3, [r1, #12]
 8003514:	e021      	b.n	800355a <HAL_GPIO_Init+0x2e2>
 8003516:	bf00      	nop
 8003518:	10320000 	.word	0x10320000
 800351c:	10310000 	.word	0x10310000
 8003520:	10220000 	.word	0x10220000
 8003524:	10210000 	.word	0x10210000
 8003528:	10120000 	.word	0x10120000
 800352c:	10110000 	.word	0x10110000
 8003530:	40021000 	.word	0x40021000
 8003534:	40010000 	.word	0x40010000
 8003538:	40010800 	.word	0x40010800
 800353c:	40010c00 	.word	0x40010c00
 8003540:	40011000 	.word	0x40011000
 8003544:	40011400 	.word	0x40011400
 8003548:	40010400 	.word	0x40010400
=======
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d021      	beq.n	8003598 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	490e      	ldr	r1, [pc, #56]	; (8003594 <HAL_GPIO_Init+0x2d0>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	60cb      	str	r3, [r1, #12]
 8003560:	e021      	b.n	80035a6 <HAL_GPIO_Init+0x2e2>
 8003562:	bf00      	nop
 8003564:	10320000 	.word	0x10320000
 8003568:	10310000 	.word	0x10310000
 800356c:	10220000 	.word	0x10220000
 8003570:	10210000 	.word	0x10210000
 8003574:	10120000 	.word	0x10120000
 8003578:	10110000 	.word	0x10110000
 800357c:	40021000 	.word	0x40021000
 8003580:	40010000 	.word	0x40010000
 8003584:	40010800 	.word	0x40010800
 8003588:	40010c00 	.word	0x40010c00
 800358c:	40011000 	.word	0x40011000
 8003590:	40011400 	.word	0x40011400
 8003594:	40010400 	.word	0x40010400
>>>>>>> majorchng
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_GPIO_Init+0x304>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	43db      	mvns	r3, r3
 8003554:	4909      	ldr	r1, [pc, #36]	; (800357c <HAL_GPIO_Init+0x304>)
 8003556:	4013      	ands	r3, r2
 8003558:	60cb      	str	r3, [r1, #12]
=======
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_GPIO_Init+0x304>)
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	43db      	mvns	r3, r3
 80035a0:	4909      	ldr	r1, [pc, #36]	; (80035c8 <HAL_GPIO_Init+0x304>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	60cb      	str	r3, [r1, #12]
>>>>>>> majorchng
        }
      }
    }

	position++;
<<<<<<< HEAD
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	3301      	adds	r3, #1
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	f47f ae8e 	bne.w	800328c <HAL_GPIO_Init+0x14>
  }
}
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	372c      	adds	r7, #44	; 0x2c
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_GPIO_ReadPin>:
=======
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	3301      	adds	r3, #1
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f47f ae8e 	bne.w	80032d8 <HAL_GPIO_Init+0x14>
  }
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	372c      	adds	r7, #44	; 0x2c
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	40010400 	.word	0x40010400

080035cc <HAL_GPIO_ReadPin>:
>>>>>>> majorchng
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
=======
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
>>>>>>> majorchng
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e001      	b.n	80035a2 <HAL_GPIO_ReadPin+0x22>
=======
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e001      	b.n	80035ee <HAL_GPIO_ReadPin+0x22>
>>>>>>> majorchng
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <HAL_GPIO_WritePin>:
=======
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <HAL_GPIO_WritePin>:
>>>>>>> majorchng
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	807b      	strh	r3, [r7, #2]
 80035ba:	4613      	mov	r3, r2
 80035bc:	707b      	strb	r3, [r7, #1]
=======
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	807b      	strh	r3, [r7, #2]
 8003606:	4613      	mov	r3, r2
 8003608:	707b      	strb	r3, [r7, #1]
>>>>>>> majorchng
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80035be:	787b      	ldrb	r3, [r7, #1]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035c4:	887a      	ldrh	r2, [r7, #2]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	611a      	str	r2, [r3, #16]
=======
 800360a:	787b      	ldrb	r3, [r7, #1]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003610:	887a      	ldrh	r2, [r7, #2]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]
>>>>>>> majorchng
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 80035ca:	e003      	b.n	80035d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	041a      	lsls	r2, r3, #16
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	611a      	str	r2, [r3, #16]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8003616:	e003      	b.n	8003620 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	041a      	lsls	r2, r3, #16
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	611a      	str	r2, [r3, #16]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
	...

0800362c <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> majorchng
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d006      	beq.n	8003604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035f6:	4a05      	ldr	r2, [pc, #20]	; (800360c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f8c6 	bl	8002790 <HAL_GPIO_EXTI_Callback>
  }
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40010400 	.word	0x40010400

08003610 <HAL_RCC_OscConfig>:
=======
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d006      	beq.n	8003650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003642:	4a05      	ldr	r2, [pc, #20]	; (8003658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff f8ae 	bl	80027ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40010400 	.word	0x40010400

0800365c <HAL_RCC_OscConfig>:
>>>>>>> majorchng
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
=======
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e272      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
=======
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e272      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> majorchng

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8087 	beq.w	800373e <HAL_RCC_OscConfig+0x12e>
=======
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8087 	beq.w	800378a <HAL_RCC_OscConfig+0x12e>
>>>>>>> majorchng
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8003630:	4b92      	ldr	r3, [pc, #584]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	2b04      	cmp	r3, #4
 800363a:	d00c      	beq.n	8003656 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800363c:	4b8f      	ldr	r3, [pc, #572]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b08      	cmp	r3, #8
 8003646:	d112      	bne.n	800366e <HAL_RCC_OscConfig+0x5e>
 8003648:	4b8c      	ldr	r3, [pc, #560]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d10b      	bne.n	800366e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003656:	4b89      	ldr	r3, [pc, #548]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d06c      	beq.n	800373c <HAL_RCC_OscConfig+0x12c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d168      	bne.n	800373c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e24c      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
=======
 800367c:	4b92      	ldr	r3, [pc, #584]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b04      	cmp	r3, #4
 8003686:	d00c      	beq.n	80036a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003688:	4b8f      	ldr	r3, [pc, #572]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d112      	bne.n	80036ba <HAL_RCC_OscConfig+0x5e>
 8003694:	4b8c      	ldr	r3, [pc, #560]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a0:	d10b      	bne.n	80036ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a2:	4b89      	ldr	r3, [pc, #548]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d06c      	beq.n	8003788 <HAL_RCC_OscConfig+0x12c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d168      	bne.n	8003788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e24c      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> majorchng
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003676:	d106      	bne.n	8003686 <HAL_RCC_OscConfig+0x76>
 8003678:	4b80      	ldr	r3, [pc, #512]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a7f      	ldr	r2, [pc, #508]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 800367e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	e02e      	b.n	80036e4 <HAL_RCC_OscConfig+0xd4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x98>
 800368e:	4b7b      	ldr	r3, [pc, #492]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a7a      	ldr	r2, [pc, #488]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	4b78      	ldr	r3, [pc, #480]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a77      	ldr	r2, [pc, #476]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80036a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e01d      	b.n	80036e4 <HAL_RCC_OscConfig+0xd4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0xbc>
 80036b2:	4b72      	ldr	r3, [pc, #456]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a71      	ldr	r2, [pc, #452]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80036b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4b6f      	ldr	r3, [pc, #444]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a6e      	ldr	r2, [pc, #440]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e00b      	b.n	80036e4 <HAL_RCC_OscConfig+0xd4>
 80036cc:	4b6b      	ldr	r3, [pc, #428]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a6a      	ldr	r2, [pc, #424]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b68      	ldr	r3, [pc, #416]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a67      	ldr	r2, [pc, #412]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e2:	6013      	str	r3, [r2, #0]
=======
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x76>
 80036c4:	4b80      	ldr	r3, [pc, #512]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a7f      	ldr	r2, [pc, #508]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e02e      	b.n	8003730 <HAL_RCC_OscConfig+0xd4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x98>
 80036da:	4b7b      	ldr	r3, [pc, #492]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a7a      	ldr	r2, [pc, #488]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b78      	ldr	r3, [pc, #480]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a77      	ldr	r2, [pc, #476]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e01d      	b.n	8003730 <HAL_RCC_OscConfig+0xd4>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0xbc>
 80036fe:	4b72      	ldr	r3, [pc, #456]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a71      	ldr	r2, [pc, #452]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	4b6f      	ldr	r3, [pc, #444]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6e      	ldr	r2, [pc, #440]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e00b      	b.n	8003730 <HAL_RCC_OscConfig+0xd4>
 8003718:	4b6b      	ldr	r3, [pc, #428]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6a      	ldr	r2, [pc, #424]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800371e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a67      	ldr	r2, [pc, #412]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800372a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372e:	6013      	str	r3, [r2, #0]
>>>>>>> majorchng


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7ff fc88 	bl	8003000 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f4:	f7ff fc84 	bl	8003000 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e200      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	4b5d      	ldr	r3, [pc, #372]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0xe4>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x12e>
=======
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7ff fc88 	bl	800304c <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7ff fc84 	bl	800304c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e200      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b5d      	ldr	r3, [pc, #372]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0xe4>
 800375e:	e014      	b.n	800378a <HAL_RCC_OscConfig+0x12e>
>>>>>>> majorchng
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003714:	f7ff fc74 	bl	8003000 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7ff fc70 	bl	8003000 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e1ec      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	4b53      	ldr	r3, [pc, #332]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x10c>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
=======
 8003760:	f7ff fc74 	bl	800304c <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003768:	f7ff fc70 	bl	800304c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e1ec      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377a:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x10c>
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003788:	bf00      	nop
>>>>>>> majorchng
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d063      	beq.n	8003812 <HAL_RCC_OscConfig+0x202>
=======
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d063      	beq.n	800385e <HAL_RCC_OscConfig+0x202>
>>>>>>> majorchng
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 800374a:	4b4c      	ldr	r3, [pc, #304]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003756:	4b49      	ldr	r3, [pc, #292]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b08      	cmp	r3, #8
 8003760:	d11c      	bne.n	800379c <HAL_RCC_OscConfig+0x18c>
 8003762:	4b46      	ldr	r3, [pc, #280]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d116      	bne.n	800379c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376e:	4b43      	ldr	r3, [pc, #268]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_RCC_OscConfig+0x176>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e1c0      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
=======
 8003796:	4b4c      	ldr	r3, [pc, #304]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037a2:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d11c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x18c>
 80037ae:	4b46      	ldr	r3, [pc, #280]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d116      	bne.n	80037e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_RCC_OscConfig+0x176>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e1c0      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> majorchng
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003786:	4b3d      	ldr	r3, [pc, #244]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4939      	ldr	r1, [pc, #228]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379a:	e03a      	b.n	8003812 <HAL_RCC_OscConfig+0x202>
=======
 80037d2:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4939      	ldr	r1, [pc, #228]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e6:	e03a      	b.n	800385e <HAL_RCC_OscConfig+0x202>
>>>>>>> majorchng
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d020      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a4:	4b36      	ldr	r3, [pc, #216]	; (8003880 <HAL_RCC_OscConfig+0x270>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037aa:	f7ff fc29 	bl	8003000 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b2:	f7ff fc25 	bl	8003000 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e1a1      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	4b2d      	ldr	r3, [pc, #180]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x1a2>
=======
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7ff fc29 	bl	800304c <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fe:	f7ff fc25 	bl	800304c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e1a1      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x1a2>
>>>>>>> majorchng
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80037d0:	4b2a      	ldr	r3, [pc, #168]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4927      	ldr	r1, [pc, #156]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]
 80037e4:	e015      	b.n	8003812 <HAL_RCC_OscConfig+0x202>
=======
 800381c:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4927      	ldr	r1, [pc, #156]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x202>
>>>>>>> majorchng
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80037e6:	4b26      	ldr	r3, [pc, #152]	; (8003880 <HAL_RCC_OscConfig+0x270>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7ff fc08 	bl	8003000 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f4:	f7ff fc04 	bl	8003000 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e180      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x1e4>
=======
 8003832:	4b26      	ldr	r3, [pc, #152]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7ff fc08 	bl	800304c <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003840:	f7ff fc04 	bl	800304c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e180      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> majorchng
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d03a      	beq.n	8003894 <HAL_RCC_OscConfig+0x284>
=======
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d03a      	beq.n	80038e0 <HAL_RCC_OscConfig+0x284>
>>>>>>> majorchng
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d019      	beq.n	800385a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382c:	f7ff fbe8 	bl	8003000 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003834:	f7ff fbe4 	bl	8003000 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e160      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_RCC_OscConfig+0x26c>)
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x224>
=======
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d019      	beq.n	80038a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003878:	f7ff fbe8 	bl	800304c <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003880:	f7ff fbe4 	bl	800304c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e160      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x224>
>>>>>>> majorchng
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 8003852:	2001      	movs	r0, #1
 8003854:	f000 fad8 	bl	8003e08 <RCC_Delay>
 8003858:	e01c      	b.n	8003894 <HAL_RCC_OscConfig+0x284>
=======
 800389e:	2001      	movs	r0, #1
 80038a0:	f000 fad8 	bl	8003e54 <RCC_Delay>
 80038a4:	e01c      	b.n	80038e0 <HAL_RCC_OscConfig+0x284>
>>>>>>> majorchng
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003860:	f7ff fbce 	bl	8003000 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003866:	e00f      	b.n	8003888 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003868:	f7ff fbca 	bl	8003000 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d908      	bls.n	8003888 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e146      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	42420000 	.word	0x42420000
 8003884:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003888:	4b92      	ldr	r3, [pc, #584]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e9      	bne.n	8003868 <HAL_RCC_OscConfig+0x258>
=======
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ac:	f7ff fbce 	bl	800304c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b2:	e00f      	b.n	80038d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b4:	f7ff fbca 	bl	800304c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d908      	bls.n	80038d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e146      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	42420000 	.word	0x42420000
 80038d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d4:	4b92      	ldr	r3, [pc, #584]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e9      	bne.n	80038b4 <HAL_RCC_OscConfig+0x258>
>>>>>>> majorchng
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a6 	beq.w	80039ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a2:	2300      	movs	r3, #0
 80038a4:	75fb      	strb	r3, [r7, #23]
=======
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80a6 	beq.w	8003a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]
>>>>>>> majorchng
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80038a6:	4b8b      	ldr	r3, [pc, #556]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10d      	bne.n	80038ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	4a87      	ldr	r2, [pc, #540]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	61d3      	str	r3, [r2, #28]
 80038be:	4b85      	ldr	r3, [pc, #532]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	4b82      	ldr	r3, [pc, #520]	; (8003ad8 <HAL_RCC_OscConfig+0x4c8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d118      	bne.n	800390c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038da:	4b7f      	ldr	r3, [pc, #508]	; (8003ad8 <HAL_RCC_OscConfig+0x4c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7e      	ldr	r2, [pc, #504]	; (8003ad8 <HAL_RCC_OscConfig+0x4c8>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e6:	f7ff fb8b 	bl	8003000 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ee:	f7ff fb87 	bl	8003000 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b64      	cmp	r3, #100	; 0x64
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e103      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	4b75      	ldr	r3, [pc, #468]	; (8003ad8 <HAL_RCC_OscConfig+0x4c8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x2de>
=======
 80038f2:	4b8b      	ldr	r3, [pc, #556]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10d      	bne.n	800391a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fe:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	4a87      	ldr	r2, [pc, #540]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003908:	61d3      	str	r3, [r2, #28]
 800390a:	4b85      	ldr	r3, [pc, #532]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003916:	2301      	movs	r3, #1
 8003918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391a:	4b82      	ldr	r3, [pc, #520]	; (8003b24 <HAL_RCC_OscConfig+0x4c8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d118      	bne.n	8003958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003926:	4b7f      	ldr	r3, [pc, #508]	; (8003b24 <HAL_RCC_OscConfig+0x4c8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a7e      	ldr	r2, [pc, #504]	; (8003b24 <HAL_RCC_OscConfig+0x4c8>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003932:	f7ff fb8b 	bl	800304c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393a:	f7ff fb87 	bl	800304c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b64      	cmp	r3, #100	; 0x64
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e103      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	4b75      	ldr	r3, [pc, #468]	; (8003b24 <HAL_RCC_OscConfig+0x4c8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x2de>
>>>>>>> majorchng
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x312>
 8003914:	4b6f      	ldr	r3, [pc, #444]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6213      	str	r3, [r2, #32]
 8003920:	e02d      	b.n	800397e <HAL_RCC_OscConfig+0x36e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x334>
 800392a:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4a69      	ldr	r2, [pc, #420]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6213      	str	r3, [r2, #32]
 8003936:	4b67      	ldr	r3, [pc, #412]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4a66      	ldr	r2, [pc, #408]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	6213      	str	r3, [r2, #32]
 8003942:	e01c      	b.n	800397e <HAL_RCC_OscConfig+0x36e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b05      	cmp	r3, #5
 800394a:	d10c      	bne.n	8003966 <HAL_RCC_OscConfig+0x356>
 800394c:	4b61      	ldr	r3, [pc, #388]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4a60      	ldr	r2, [pc, #384]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003952:	f043 0304 	orr.w	r3, r3, #4
 8003956:	6213      	str	r3, [r2, #32]
 8003958:	4b5e      	ldr	r3, [pc, #376]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4a5d      	ldr	r2, [pc, #372]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6213      	str	r3, [r2, #32]
 8003964:	e00b      	b.n	800397e <HAL_RCC_OscConfig+0x36e>
 8003966:	4b5b      	ldr	r3, [pc, #364]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4a5a      	ldr	r2, [pc, #360]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6213      	str	r3, [r2, #32]
 8003972:	4b58      	ldr	r3, [pc, #352]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4a57      	ldr	r2, [pc, #348]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d015      	beq.n	80039b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003986:	f7ff fb3b 	bl	8003000 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7ff fb37 	bl	8003000 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e0b1      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ee      	beq.n	800398e <HAL_RCC_OscConfig+0x37e>
 80039b0:	e014      	b.n	80039dc <HAL_RCC_OscConfig+0x3cc>
=======
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d106      	bne.n	800396e <HAL_RCC_OscConfig+0x312>
 8003960:	4b6f      	ldr	r3, [pc, #444]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4a6e      	ldr	r2, [pc, #440]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6213      	str	r3, [r2, #32]
 800396c:	e02d      	b.n	80039ca <HAL_RCC_OscConfig+0x36e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x334>
 8003976:	4b6a      	ldr	r3, [pc, #424]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4a69      	ldr	r2, [pc, #420]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	6213      	str	r3, [r2, #32]
 8003982:	4b67      	ldr	r3, [pc, #412]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4a66      	ldr	r2, [pc, #408]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003988:	f023 0304 	bic.w	r3, r3, #4
 800398c:	6213      	str	r3, [r2, #32]
 800398e:	e01c      	b.n	80039ca <HAL_RCC_OscConfig+0x36e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b05      	cmp	r3, #5
 8003996:	d10c      	bne.n	80039b2 <HAL_RCC_OscConfig+0x356>
 8003998:	4b61      	ldr	r3, [pc, #388]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4a60      	ldr	r2, [pc, #384]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	6213      	str	r3, [r2, #32]
 80039a4:	4b5e      	ldr	r3, [pc, #376]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4a5d      	ldr	r2, [pc, #372]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6213      	str	r3, [r2, #32]
 80039b0:	e00b      	b.n	80039ca <HAL_RCC_OscConfig+0x36e>
 80039b2:	4b5b      	ldr	r3, [pc, #364]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	4a5a      	ldr	r2, [pc, #360]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	6213      	str	r3, [r2, #32]
 80039be:	4b58      	ldr	r3, [pc, #352]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4a57      	ldr	r2, [pc, #348]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	f023 0304 	bic.w	r3, r3, #4
 80039c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d015      	beq.n	80039fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d2:	f7ff fb3b 	bl	800304c <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7ff fb37 	bl	800304c <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e0b1      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0ee      	beq.n	80039da <HAL_RCC_OscConfig+0x37e>
 80039fc:	e014      	b.n	8003a28 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> majorchng
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80039b2:	f7ff fb25 	bl	8003000 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7ff fb21 	bl	8003000 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e09b      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d0:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ee      	bne.n	80039ba <HAL_RCC_OscConfig+0x3aa>
=======
 80039fe:	f7ff fb25 	bl	800304c <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7ff fb21 	bl	800304c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e09b      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1c:	4b40      	ldr	r3, [pc, #256]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ee      	bne.n	8003a06 <HAL_RCC_OscConfig+0x3aa>
>>>>>>> majorchng
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d105      	bne.n	80039ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e2:	4b3c      	ldr	r3, [pc, #240]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4a3b      	ldr	r2, [pc, #236]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ec:	61d3      	str	r3, [r2, #28]
=======
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d105      	bne.n	8003a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2e:	4b3c      	ldr	r3, [pc, #240]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4a3b      	ldr	r2, [pc, #236]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a38:	61d3      	str	r3, [r2, #28]
>>>>>>> majorchng

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8087 	beq.w	8003b06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f8:	4b36      	ldr	r3, [pc, #216]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d061      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d146      	bne.n	8003a9a <HAL_RCC_OscConfig+0x48a>
=======
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8087 	beq.w	8003b52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a44:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d061      	beq.n	8003b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d146      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x48a>
>>>>>>> majorchng
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8003a0c:	4b33      	ldr	r3, [pc, #204]	; (8003adc <HAL_RCC_OscConfig+0x4cc>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a12:	f7ff faf5 	bl	8003000 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1a:	f7ff faf1 	bl	8003000 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e06d      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2c:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f0      	bne.n	8003a1a <HAL_RCC_OscConfig+0x40a>
=======
 8003a58:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <HAL_RCC_OscConfig+0x4cc>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5e:	f7ff faf5 	bl	800304c <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a66:	f7ff faf1 	bl	800304c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e06d      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a78:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f0      	bne.n	8003a66 <HAL_RCC_OscConfig+0x40a>
>>>>>>> majorchng
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d108      	bne.n	8003a54 <HAL_RCC_OscConfig+0x444>
=======
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x444>
>>>>>>> majorchng
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4921      	ldr	r1, [pc, #132]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
=======
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	4921      	ldr	r1, [pc, #132]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
>>>>>>> majorchng
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8003a54:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a19      	ldr	r1, [r3, #32]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	430b      	orrs	r3, r1
 8003a66:	491b      	ldr	r1, [pc, #108]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_RCC_OscConfig+0x4cc>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a72:	f7ff fac5 	bl	8003000 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7a:	f7ff fac1 	bl	8003000 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e03d      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x46a>
 8003a98:	e035      	b.n	8003b06 <HAL_RCC_OscConfig+0x4f6>
=======
 8003aa0:	4b1f      	ldr	r3, [pc, #124]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a19      	ldr	r1, [r3, #32]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	491b      	ldr	r1, [pc, #108]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x4cc>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7ff fac5 	bl	800304c <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7ff fac1 	bl	800304c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e03d      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x46a>
 8003ae4:	e035      	b.n	8003b52 <HAL_RCC_OscConfig+0x4f6>
>>>>>>> majorchng
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_RCC_OscConfig+0x4cc>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7ff faae 	bl	8003000 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7ff faaa 	bl	8003000 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e026      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x498>
 8003ac6:	e01e      	b.n	8003b06 <HAL_RCC_OscConfig+0x4f6>
=======
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <HAL_RCC_OscConfig+0x4cc>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7ff faae 	bl	800304c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7ff faaa 	bl	800304c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e026      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x498>
 8003b12:	e01e      	b.n	8003b52 <HAL_RCC_OscConfig+0x4f6>
>>>>>>> majorchng
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e019      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	42420060 	.word	0x42420060
=======
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e019      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40007000 	.word	0x40007000
 8003b28:	42420060 	.word	0x42420060
>>>>>>> majorchng
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <HAL_RCC_OscConfig+0x500>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_RCC_OscConfig+0x4f8>
=======
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_OscConfig+0x500>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> majorchng
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000

08003b14 <HAL_RCC_ClockConfig>:
=======
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_RCC_ClockConfig>:
>>>>>>> majorchng
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
=======
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
>>>>>>> majorchng
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0d0      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
=======
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0d0      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> majorchng
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003b28:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d910      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b67      	ldr	r3, [pc, #412]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 0207 	bic.w	r2, r3, #7
 8003b3e:	4965      	ldr	r1, [pc, #404]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
=======
 8003b74:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <HAL_RCC_ClockConfig+0x1c0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d910      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0207 	bic.w	r2, r3, #7
 8003b8a:	4965      	ldr	r1, [pc, #404]	; (8003d20 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
>>>>>>> majorchng

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003b46:	4b63      	ldr	r3, [pc, #396]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0b8      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
=======
 8003b92:	4b63      	ldr	r3, [pc, #396]	; (8003d20 <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0b8      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> majorchng
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x92>
=======
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d020      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x92>
>>>>>>> majorchng
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b70:	4b59      	ldr	r3, [pc, #356]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b88:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a52      	ldr	r2, [pc, #328]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b92:	6053      	str	r3, [r2, #4]
=======
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bbc:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a58      	ldr	r2, [pc, #352]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd4:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a52      	ldr	r2, [pc, #328]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bde:	6053      	str	r3, [r2, #4]
>>>>>>> majorchng
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8003b94:	4b50      	ldr	r3, [pc, #320]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	494d      	ldr	r1, [pc, #308]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
=======
 8003be0:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	494d      	ldr	r1, [pc, #308]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
>>>>>>> majorchng
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d040      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x120>
=======
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d040      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x120>
>>>>>>> majorchng
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d115      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e07f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
=======
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d115      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e07f      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> majorchng
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e073      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
=======
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e073      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> majorchng
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8003be2:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e06b      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf2:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4936      	ldr	r1, [pc, #216]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c04:	f7ff f9fc 	bl	8003000 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7ff f9f8 	bl	8003000 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e053      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	4b2d      	ldr	r3, [pc, #180]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 020c 	and.w	r2, r3, #12
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1eb      	bne.n	8003c0c <HAL_RCC_ClockConfig+0xf8>
=======
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e06b      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3e:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f023 0203 	bic.w	r2, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4936      	ldr	r1, [pc, #216]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c50:	f7ff f9fc 	bl	800304c <HAL_GetTick>
 8003c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c58:	f7ff f9f8 	bl	800304c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e053      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 020c 	and.w	r2, r3, #12
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d1eb      	bne.n	8003c58 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> majorchng
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d210      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 0207 	bic.w	r2, r3, #7
 8003c4a:	4922      	ldr	r1, [pc, #136]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
=======
 8003c80:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <HAL_RCC_ClockConfig+0x1c0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d210      	bcs.n	8003cb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 0207 	bic.w	r2, r3, #7
 8003c96:	4922      	ldr	r1, [pc, #136]	; (8003d20 <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]
>>>>>>> majorchng

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e032      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
=======
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e032      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> majorchng
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4916      	ldr	r1, [pc, #88]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
=======
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4916      	ldr	r1, [pc, #88]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	604b      	str	r3, [r1, #4]
>>>>>>> majorchng
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c8e:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	490e      	ldr	r1, [pc, #56]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
=======
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cda:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	490e      	ldr	r1, [pc, #56]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]
>>>>>>> majorchng
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8003ca2:	f000 f821 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	490a      	ldr	r1, [pc, #40]	; (8003cdc <HAL_RCC_ClockConfig+0x1c8>)
 8003cb4:	5ccb      	ldrb	r3, [r1, r3]
 8003cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cba:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8003cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff f95a 	bl	8002f7c <HAL_InitTick>

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40022000 	.word	0x40022000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	080083b8 	.word	0x080083b8
 8003ce0:	2000000c 	.word	0x2000000c
 8003ce4:	20000010 	.word	0x20000010

08003ce8 <HAL_RCC_GetSysClockFreq>:
=======
 8003cee:	f000 f821 	bl	8003d34 <HAL_RCC_GetSysClockFreq>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	490a      	ldr	r1, [pc, #40]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003d00:	5ccb      	ldrb	r3, [r1, r3]
 8003d02:	fa22 f303 	lsr.w	r3, r2, r3
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x1cc>)
 8003d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_RCC_ClockConfig+0x1d0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff f95a 	bl	8002fc8 <HAL_InitTick>

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40021000 	.word	0x40021000
 8003d28:	080083fc 	.word	0x080083fc
 8003d2c:	2000000c 	.word	0x2000000c
 8003d30:	20000010 	.word	0x20000010

08003d34 <HAL_RCC_GetSysClockFreq>:
>>>>>>> majorchng
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8003ce8:	b490      	push	{r4, r7}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
=======
 8003d34:	b490      	push	{r4, r7}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
>>>>>>> majorchng
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 8003cee:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xac>)
 8003cf0:	1d3c      	adds	r4, r7, #4
 8003cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8003d3a:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003d3c:	1d3c      	adds	r4, r7, #4
 8003d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> majorchng
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 8003cf8:	f240 2301 	movw	r3, #513	; 0x201
 8003cfc:	803b      	strh	r3, [r7, #0]
=======
 8003d44:	f240 2301 	movw	r3, #513	; 0x201
 8003d48:	803b      	strh	r3, [r7, #0]
>>>>>>> majorchng
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	2300      	movs	r3, #0
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	623b      	str	r3, [r7, #32]
=======
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	623b      	str	r3, [r7, #32]
>>>>>>> majorchng
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8003d12:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d002      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x40>
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x46>
 8003d26:	e02b      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x98>
=======
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d002      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x40>
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d003      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x46>
 8003d72:	e02b      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x98>
>>>>>>> majorchng
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8003d28:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d2a:	623b      	str	r3, [r7, #32]
      break;
 8003d2c:	e02b      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x9e>
=======
 8003d74:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d76:	623b      	str	r3, [r7, #32]
      break;
 8003d78:	e02b      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x9e>
>>>>>>> majorchng
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	0c9b      	lsrs	r3, r3, #18
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3328      	adds	r3, #40	; 0x28
 8003d38:	443b      	add	r3, r7
 8003d3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d012      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x88>
=======
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	0c9b      	lsrs	r3, r3, #18
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	3328      	adds	r3, #40	; 0x28
 8003d84:	443b      	add	r3, r7
 8003d86:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d8a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d012      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x88>
>>>>>>> majorchng
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	0c5b      	lsrs	r3, r3, #17
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	3328      	adds	r3, #40	; 0x28
 8003d56:	443b      	add	r3, r7
 8003d58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d5c:	61bb      	str	r3, [r7, #24]
=======
 8003d96:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	0c5b      	lsrs	r3, r3, #17
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	3328      	adds	r3, #40	; 0x28
 8003da2:	443b      	add	r3, r7
 8003da4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003da8:	61bb      	str	r3, [r7, #24]
>>>>>>> majorchng
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4a0e      	ldr	r2, [pc, #56]	; (8003d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d62:	fb03 f202 	mul.w	r2, r3, r2
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6e:	e004      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x92>
=======
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	4a0e      	ldr	r2, [pc, #56]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dae:	fb03 f202 	mul.w	r2, r3, r2
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dba:	e004      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x92>
>>>>>>> majorchng
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	623b      	str	r3, [r7, #32]
      break;
 8003d7e:	e002      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x9e>
=======
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4a0b      	ldr	r2, [pc, #44]	; (8003dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	623b      	str	r3, [r7, #32]
      break;
 8003dca:	e002      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x9e>
>>>>>>> majorchng
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d82:	623b      	str	r3, [r7, #32]
      break;
 8003d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d86:	6a3b      	ldr	r3, [r7, #32]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3728      	adds	r7, #40	; 0x28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc90      	pop	{r4, r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	080083a8 	.word	0x080083a8
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	007a1200 	.word	0x007a1200
 8003da0:	003d0900 	.word	0x003d0900

08003da4 <HAL_RCC_GetHCLKFreq>:
=======
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dce:	623b      	str	r3, [r7, #32]
      break;
 8003dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3728      	adds	r7, #40	; 0x28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc90      	pop	{r4, r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	080083ec 	.word	0x080083ec
 8003de4:	40021000 	.word	0x40021000
 8003de8:	007a1200 	.word	0x007a1200
 8003dec:	003d0900 	.word	0x003d0900

08003df0 <HAL_RCC_GetHCLKFreq>:
>>>>>>> majorchng
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da8:	4b02      	ldr	r3, [pc, #8]	; (8003db4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	2000000c 	.word	0x2000000c

08003db8 <HAL_RCC_GetPCLK1Freq>:
=======
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	2000000c 	.word	0x2000000c

08003e04 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> majorchng
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dbc:	f7ff fff2 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	080083c8 	.word	0x080083c8

08003de0 <HAL_RCC_GetPCLK2Freq>:
=======
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e08:	f7ff fff2 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	4903      	ldr	r1, [pc, #12]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000
 8003e28:	0800840c 	.word	0x0800840c

08003e2c <HAL_RCC_GetPCLK2Freq>:
>>>>>>> majorchng
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003de4:	f7ff ffde 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	0adb      	lsrs	r3, r3, #11
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4903      	ldr	r1, [pc, #12]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	080083c8 	.word	0x080083c8

08003e08 <RCC_Delay>:
=======
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e30:	f7ff ffde 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	0adb      	lsrs	r3, r3, #11
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	4903      	ldr	r1, [pc, #12]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	0800840c 	.word	0x0800840c

08003e54 <RCC_Delay>:
>>>>>>> majorchng
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <RCC_Delay+0x34>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <RCC_Delay+0x38>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0a5b      	lsrs	r3, r3, #9
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e24:	bf00      	nop
  }
  while (Delay --);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e5a      	subs	r2, r3, #1
 8003e2a:	60fa      	str	r2, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f9      	bne.n	8003e24 <RCC_Delay+0x1c>
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	10624dd3 	.word	0x10624dd3

08003e44 <HAL_SPI_Init>:
=======
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <RCC_Delay+0x34>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <RCC_Delay+0x38>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0a5b      	lsrs	r3, r3, #9
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e70:	bf00      	nop
  }
  while (Delay --);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1e5a      	subs	r2, r3, #1
 8003e76:	60fa      	str	r2, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f9      	bne.n	8003e70 <RCC_Delay+0x1c>
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	2000000c 	.word	0x2000000c
 8003e8c:	10624dd3 	.word	0x10624dd3

08003e90 <HAL_SPI_Init>:
>>>>>>> majorchng
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e076      	b.n	8003f44 <HAL_SPI_Init+0x100>
=======
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e076      	b.n	8003f90 <HAL_SPI_Init+0x100>
>>>>>>> majorchng
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d108      	bne.n	8003e70 <HAL_SPI_Init+0x2c>
=======
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d108      	bne.n	8003ebc <HAL_SPI_Init+0x2c>
>>>>>>> majorchng
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e66:	d009      	beq.n	8003e7c <HAL_SPI_Init+0x38>
=======
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb2:	d009      	beq.n	8003ec8 <HAL_SPI_Init+0x38>
>>>>>>> majorchng
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	61da      	str	r2, [r3, #28]
 8003e6e:	e005      	b.n	8003e7c <HAL_SPI_Init+0x38>
=======
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	61da      	str	r2, [r3, #28]
 8003eba:	e005      	b.n	8003ec8 <HAL_SPI_Init+0x38>
>>>>>>> majorchng
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	615a      	str	r2, [r3, #20]
=======
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	615a      	str	r2, [r3, #20]
>>>>>>> majorchng
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> majorchng

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fe fe02 	bl	8002aa0 <HAL_SPI_MspInit>
=======
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fe fe02 	bl	8002aec <HAL_SPI_MspInit>
>>>>>>> majorchng
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb2:	601a      	str	r2, [r3, #0]
=======
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efe:	601a      	str	r2, [r3, #0]
>>>>>>> majorchng

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	ea42 0103 	orr.w	r1, r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
=======
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	ea42 0103 	orr.w	r1, r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
>>>>>>> majorchng
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
<<<<<<< HEAD
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	0c1a      	lsrs	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f002 0204 	and.w	r2, r2, #4
 8003f22:	605a      	str	r2, [r3, #4]
=======
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	0c1a      	lsrs	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f002 0204 	and.w	r2, r2, #4
 8003f6e:	605a      	str	r2, [r3, #4]
>>>>>>> majorchng
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_SPI_Receive>:
=======
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_SPI_Receive>:
>>>>>>> majorchng
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	80fb      	strh	r3, [r7, #6]
=======
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	80fb      	strh	r3, [r7, #6]
>>>>>>> majorchng
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
<<<<<<< HEAD
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f68:	d112      	bne.n	8003f90 <HAL_SPI_Receive+0x44>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10e      	bne.n	8003f90 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2204      	movs	r2, #4
 8003f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f8f1 	bl	800416e <HAL_SPI_TransmitReceive>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	e0ea      	b.n	8004166 <HAL_SPI_Receive+0x21a>
=======
 8003fa8:	2300      	movs	r3, #0
 8003faa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb4:	d112      	bne.n	8003fdc <HAL_SPI_Receive+0x44>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10e      	bne.n	8003fdc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f8f1 	bl	80041ba <HAL_SPI_TransmitReceive>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	e0ea      	b.n	80041b2 <HAL_SPI_Receive+0x21a>
>>>>>>> majorchng
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_SPI_Receive+0x52>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e0e3      	b.n	8004166 <HAL_SPI_Receive+0x21a>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa6:	f7ff f82b 	bl	8003000 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d002      	beq.n	8003fbe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fbc:	e0ca      	b.n	8004154 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Receive+0x7e>
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fce:	e0c1      	b.n	8004154 <HAL_SPI_Receive+0x208>
=======
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_SPI_Receive+0x52>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e0e3      	b.n	80041b2 <HAL_SPI_Receive+0x21a>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff2:	f7ff f82b 	bl	800304c <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d002      	beq.n	800400a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004004:	2302      	movs	r3, #2
 8004006:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004008:	e0ca      	b.n	80041a0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_SPI_Receive+0x7e>
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]
    goto error;
 800401a:	e0c1      	b.n	80041a0 <HAL_SPI_Receive+0x208>
>>>>>>> majorchng
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
<<<<<<< HEAD
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2204      	movs	r2, #4
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	88fa      	ldrh	r2, [r7, #6]
 8004034:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> majorchng
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
<<<<<<< HEAD
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004016:	d10f      	bne.n	8004038 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004026:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004036:	601a      	str	r2, [r3, #0]
=======
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004062:	d10f      	bne.n	8004084 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004072:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004082:	601a      	str	r2, [r3, #0]
>>>>>>> majorchng
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d007      	beq.n	8004056 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004054:	601a      	str	r2, [r3, #0]
=======
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d007      	beq.n	80040a2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a0:	601a      	str	r2, [r3, #0]
>>>>>>> majorchng
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d162      	bne.n	8004124 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800405e:	e02e      	b.n	80040be <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d115      	bne.n	800409a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f103 020c 	add.w	r2, r3, #12
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004098:	e011      	b.n	80040be <HAL_SPI_Receive+0x172>
=======
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d162      	bne.n	8004170 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040aa:	e02e      	b.n	800410a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d115      	bne.n	80040e6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f103 020c 	add.w	r2, r3, #12
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040e4:	e011      	b.n	800410a <HAL_SPI_Receive+0x172>
>>>>>>> majorchng
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 800409a:	f7fe ffb1 	bl	8003000 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d803      	bhi.n	80040b2 <HAL_SPI_Receive+0x166>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d102      	bne.n	80040b8 <HAL_SPI_Receive+0x16c>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040bc:	e04a      	b.n	8004154 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1cb      	bne.n	8004060 <HAL_SPI_Receive+0x114>
 80040c8:	e031      	b.n	800412e <HAL_SPI_Receive+0x1e2>
=======
 80040e6:	f7fe ffb1 	bl	800304c <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d803      	bhi.n	80040fe <HAL_SPI_Receive+0x166>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d102      	bne.n	8004104 <HAL_SPI_Receive+0x16c>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004108:	e04a      	b.n	80041a0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1cb      	bne.n	80040ac <HAL_SPI_Receive+0x114>
 8004114:	e031      	b.n	800417a <HAL_SPI_Receive+0x1e2>
>>>>>>> majorchng
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
<<<<<<< HEAD
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d113      	bne.n	8004100 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	b292      	uxth	r2, r2
 80040e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	1c9a      	adds	r2, r3, #2
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040fe:	e011      	b.n	8004124 <HAL_SPI_Receive+0x1d8>
=======
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	d113      	bne.n	800414c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	b292      	uxth	r2, r2
 8004130:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	1c9a      	adds	r2, r3, #2
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	87da      	strh	r2, [r3, #62]	; 0x3e
 800414a:	e011      	b.n	8004170 <HAL_SPI_Receive+0x1d8>
>>>>>>> majorchng
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8004100:	f7fe ff7e 	bl	8003000 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d803      	bhi.n	8004118 <HAL_SPI_Receive+0x1cc>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d102      	bne.n	800411e <HAL_SPI_Receive+0x1d2>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004122:	e017      	b.n	8004154 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1cd      	bne.n	80040ca <HAL_SPI_Receive+0x17e>
=======
 800414c:	f7fe ff7e 	bl	800304c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d803      	bhi.n	8004164 <HAL_SPI_Receive+0x1cc>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d102      	bne.n	800416a <HAL_SPI_Receive+0x1d2>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800416e:	e017      	b.n	80041a0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1cd      	bne.n	8004116 <HAL_SPI_Receive+0x17e>
>>>>>>> majorchng
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fa46 	bl	80045c4 <SPI_EndRxTransaction>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fa46 	bl	8004610 <SPI_EndRxTransaction>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> majorchng
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< HEAD
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
 8004150:	e000      	b.n	8004154 <HAL_SPI_Receive+0x208>
  }

error :
 8004152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_SPI_TransmitReceive>:
=======
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
 800419c:	e000      	b.n	80041a0 <HAL_SPI_Receive+0x208>
  }

error :
 800419e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_SPI_TransmitReceive>:
>>>>>>> majorchng
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< HEAD
 800416e:	b580      	push	{r7, lr}
 8004170:	b08c      	sub	sp, #48	; 0x30
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	807b      	strh	r3, [r7, #2]
=======
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b08c      	sub	sp, #48	; 0x30
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	807b      	strh	r3, [r7, #2]
>>>>>>> majorchng
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< HEAD
 800417c:	2301      	movs	r3, #1
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 80041c8:	2301      	movs	r3, #1
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> majorchng

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_SPI_TransmitReceive+0x26>
 8004190:	2302      	movs	r3, #2
 8004192:	e18a      	b.n	80044aa <HAL_SPI_TransmitReceive+0x33c>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800419c:	f7fe ff30 	bl	8003000 <HAL_GetTick>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041b2:	887b      	ldrh	r3, [r7, #2]
 80041b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d00f      	beq.n	80041de <HAL_SPI_TransmitReceive+0x70>
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c4:	d107      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x68>
 80041ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d003      	beq.n	80041de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
 80041d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041dc:	e15b      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x82>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x82>
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041f6:	e14e      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
=======
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x26>
 80041dc:	2302      	movs	r3, #2
 80041de:	e18a      	b.n	80044f6 <HAL_SPI_TransmitReceive+0x33c>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e8:	f7fe ff30 	bl	800304c <HAL_GetTick>
 80041ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041fe:	887b      	ldrh	r3, [r7, #2]
 8004200:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004206:	2b01      	cmp	r3, #1
 8004208:	d00f      	beq.n	800422a <HAL_SPI_TransmitReceive+0x70>
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004210:	d107      	bne.n	8004222 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <HAL_SPI_TransmitReceive+0x68>
 800421a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800421e:	2b04      	cmp	r3, #4
 8004220:	d003      	beq.n	800422a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004222:	2302      	movs	r3, #2
 8004224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004228:	e15b      	b.n	80044e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_SPI_TransmitReceive+0x82>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_SPI_TransmitReceive+0x82>
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d103      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004242:	e14e      	b.n	80044e2 <HAL_SPI_TransmitReceive+0x328>
>>>>>>> majorchng
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b04      	cmp	r3, #4
 8004202:	d003      	beq.n	800420c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2205      	movs	r2, #5
 8004208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b04      	cmp	r3, #4
 800424e:	d003      	beq.n	8004258 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2205      	movs	r2, #5
 8004254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> majorchng
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	887a      	ldrh	r2, [r7, #2]
 800421c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	887a      	ldrh	r2, [r7, #2]
 8004222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	887a      	ldrh	r2, [r7, #2]
 800422e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	887a      	ldrh	r2, [r7, #2]
 800426e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	887a      	ldrh	r2, [r7, #2]
 800427a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> majorchng
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d007      	beq.n	8004260 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800425e:	601a      	str	r2, [r3, #0]
=======
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d007      	beq.n	80042ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042aa:	601a      	str	r2, [r3, #0]
>>>>>>> majorchng
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004268:	d178      	bne.n	800435c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x10a>
 8004272:	8b7b      	ldrh	r3, [r7, #26]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d166      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	881a      	ldrh	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	1c9a      	adds	r2, r3, #2
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429c:	e053      	b.n	8004346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d11b      	bne.n	80042e4 <HAL_SPI_TransmitReceive+0x176>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x176>
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d113      	bne.n	80042e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	881a      	ldrh	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	1c9a      	adds	r2, r3, #2
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b4:	d178      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x10a>
 80042be:	8b7b      	ldrh	r3, [r7, #26]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d166      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	1c9a      	adds	r2, r3, #2
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e8:	e053      	b.n	8004392 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d11b      	bne.n	8004330 <HAL_SPI_TransmitReceive+0x176>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d016      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x176>
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d113      	bne.n	8004330 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	881a      	ldrh	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	1c9a      	adds	r2, r3, #2
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> majorchng
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d119      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x1b8>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d014      	beq.n	8004326 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	b292      	uxth	r2, r2
 8004308:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	1c9a      	adds	r2, r3, #2
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004322:	2301      	movs	r3, #1
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004326:	f7fe fe6b 	bl	8003000 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004332:	429a      	cmp	r2, r3
 8004334:	d807      	bhi.n	8004346 <HAL_SPI_TransmitReceive+0x1d8>
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d003      	beq.n	8004346 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004344:	e0a7      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1a6      	bne.n	800429e <HAL_SPI_TransmitReceive+0x130>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1a1      	bne.n	800429e <HAL_SPI_TransmitReceive+0x130>
 800435a:	e07c      	b.n	8004456 <HAL_SPI_TransmitReceive+0x2e8>
=======
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d119      	bne.n	8004372 <HAL_SPI_TransmitReceive+0x1b8>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d014      	beq.n	8004372 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	b292      	uxth	r2, r2
 8004354:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	1c9a      	adds	r2, r3, #2
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800436e:	2301      	movs	r3, #1
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004372:	f7fe fe6b 	bl	800304c <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800437e:	429a      	cmp	r2, r3
 8004380:	d807      	bhi.n	8004392 <HAL_SPI_TransmitReceive+0x1d8>
 8004382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d003      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004390:	e0a7      	b.n	80044e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1a6      	bne.n	80042ea <HAL_SPI_TransmitReceive+0x130>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1a1      	bne.n	80042ea <HAL_SPI_TransmitReceive+0x130>
 80043a6:	e07c      	b.n	80044a2 <HAL_SPI_TransmitReceive+0x2e8>
>>>>>>> majorchng
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_SPI_TransmitReceive+0x1fc>
 8004364:	8b7b      	ldrh	r3, [r7, #26]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d16b      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004390:	e057      	b.n	8004442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d11c      	bne.n	80043da <HAL_SPI_TransmitReceive+0x26c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <HAL_SPI_TransmitReceive+0x26c>
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d114      	bne.n	80043da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x1fc>
 80043b0:	8b7b      	ldrh	r3, [r7, #26]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d16b      	bne.n	800448e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	330c      	adds	r3, #12
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043dc:	e057      	b.n	800448e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d11c      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x26c>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d017      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x26c>
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d114      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	7812      	ldrb	r2, [r2, #0]
 8004408:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> majorchng
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d119      	bne.n	800441c <HAL_SPI_TransmitReceive+0x2ae>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d014      	beq.n	800441c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004418:	2301      	movs	r3, #1
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800441c:	f7fe fdf0 	bl	8003000 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004428:	429a      	cmp	r2, r3
 800442a:	d803      	bhi.n	8004434 <HAL_SPI_TransmitReceive+0x2c6>
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004432:	d102      	bne.n	800443a <HAL_SPI_TransmitReceive+0x2cc>
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004440:	e029      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1a2      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x224>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d19d      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x224>
=======
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b01      	cmp	r3, #1
 8004432:	d119      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x2ae>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d014      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004464:	2301      	movs	r3, #1
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004468:	f7fe fdf0 	bl	800304c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004474:	429a      	cmp	r2, r3
 8004476:	d803      	bhi.n	8004480 <HAL_SPI_TransmitReceive+0x2c6>
 8004478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d102      	bne.n	8004486 <HAL_SPI_TransmitReceive+0x2cc>
 8004480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800448c:	e029      	b.n	80044e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1a2      	bne.n	80043de <HAL_SPI_TransmitReceive+0x224>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d19d      	bne.n	80043de <HAL_SPI_TransmitReceive+0x224>
>>>>>>> majorchng
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f904 	bl	8004668 <SPI_EndRxTxTransaction>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d006      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004472:	e010      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
=======
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f904 	bl	80046b4 <SPI_EndRxTxTransaction>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d006      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80044be:	e010      	b.n	80044e2 <HAL_SPI_TransmitReceive+0x328>
>>>>>>> majorchng
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	e000      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004494:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3730      	adds	r7, #48	; 0x30
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <SPI_WaitFlagStateUntilTimeout>:
=======
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	e000      	b.n	80044e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3730      	adds	r7, #48	; 0x30
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> majorchng
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	71fb      	strb	r3, [r7, #7]
=======
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	71fb      	strb	r3, [r7, #7]
>>>>>>> majorchng
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 80044c4:	f7fe fd9c 	bl	8003000 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	4413      	add	r3, r2
 80044d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044d4:	f7fe fd94 	bl	8003000 <HAL_GetTick>
 80044d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044da:	4b39      	ldr	r3, [pc, #228]	; (80045c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	015b      	lsls	r3, r3, #5
 80044e0:	0d1b      	lsrs	r3, r3, #20
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ea:	e054      	b.n	8004596 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d050      	beq.n	8004596 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044f4:	f7fe fd84 	bl	8003000 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	429a      	cmp	r2, r3
 8004502:	d902      	bls.n	800450a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d13d      	bne.n	8004586 <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 8004510:	f7fe fd9c 	bl	800304c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	4413      	add	r3, r2
 800451e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004520:	f7fe fd94 	bl	800304c <HAL_GetTick>
 8004524:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	015b      	lsls	r3, r3, #5
 800452c:	0d1b      	lsrs	r3, r3, #20
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	fb02 f303 	mul.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004536:	e054      	b.n	80045e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d050      	beq.n	80045e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004540:	f7fe fd84 	bl	800304c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	429a      	cmp	r2, r3
 800454e:	d902      	bls.n	8004556 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d13d      	bne.n	80045d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> majorchng
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004522:	d111      	bne.n	8004548 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452c:	d004      	beq.n	8004538 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004536:	d107      	bne.n	8004548 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004546:	601a      	str	r2, [r3, #0]
=======
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004564:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800456e:	d111      	bne.n	8004594 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004578:	d004      	beq.n	8004584 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004582:	d107      	bne.n	8004594 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004592:	601a      	str	r2, [r3, #0]
>>>>>>> majorchng
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004550:	d10f      	bne.n	8004572 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e017      	b.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	3b01      	subs	r3, #1
 8004594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d19b      	bne.n	80044ec <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459c:	d10f      	bne.n	80045be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e017      	b.n	8004602 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	3b01      	subs	r3, #1
 80045e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4013      	ands	r3, r2
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	bf0c      	ite	eq
 80045f2:	2301      	moveq	r3, #1
 80045f4:	2300      	movne	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d19b      	bne.n	8004538 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> majorchng
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	2000000c 	.word	0x2000000c

080045c4 <SPI_EndRxTransaction>:
=======
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	2000000c 	.word	0x2000000c

08004610 <SPI_EndRxTransaction>:
>>>>>>> majorchng
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d8:	d111      	bne.n	80045fe <SPI_EndRxTransaction+0x3a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e2:	d004      	beq.n	80045ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ec:	d107      	bne.n	80045fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004606:	d117      	bne.n	8004638 <SPI_EndRxTransaction+0x74>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004610:	d112      	bne.n	8004638 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2200      	movs	r2, #0
 800461a:	2101      	movs	r1, #1
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff ff49 	bl	80044b4 <SPI_WaitFlagStateUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01a      	beq.n	800465e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e013      	b.n	8004660 <SPI_EndRxTransaction+0x9c>
=======
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004624:	d111      	bne.n	800464a <SPI_EndRxTransaction+0x3a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462e:	d004      	beq.n	800463a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004638:	d107      	bne.n	800464a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004648:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004652:	d117      	bne.n	8004684 <SPI_EndRxTransaction+0x74>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465c:	d112      	bne.n	8004684 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2200      	movs	r2, #0
 8004666:	2101      	movs	r1, #1
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff ff49 	bl	8004500 <SPI_WaitFlagStateUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01a      	beq.n	80046aa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e013      	b.n	80046ac <SPI_EndRxTransaction+0x9c>
>>>>>>> majorchng
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	2180      	movs	r1, #128	; 0x80
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff ff36 	bl	80044b4 <SPI_WaitFlagStateUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e000      	b.n	8004660 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <SPI_EndRxTxTransaction>:
=======
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2200      	movs	r2, #0
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff ff36 	bl	8004500 <SPI_WaitFlagStateUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e000      	b.n	80046ac <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <SPI_EndRxTxTransaction>:
>>>>>>> majorchng
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2200      	movs	r2, #0
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff ff18 	bl	80044b4 <SPI_WaitFlagStateUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468e:	f043 0220 	orr.w	r2, r3, #32
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e000      	b.n	800469c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_TIM_Base_Init>:
=======
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2200      	movs	r2, #0
 80046c8:	2180      	movs	r1, #128	; 0x80
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff ff18 	bl	8004500 <SPI_WaitFlagStateUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	f043 0220 	orr.w	r2, r3, #32
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e000      	b.n	80046e8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_Base_Init>:
>>>>>>> majorchng
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e041      	b.n	800473a <HAL_TIM_Base_Init+0x96>
=======
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e041      	b.n	8004786 <HAL_TIM_Base_Init+0x96>
>>>>>>> majorchng
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> majorchng
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f839 	bl	8004742 <HAL_TIM_Base_MspInit>
=======
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f839 	bl	800478e <HAL_TIM_Base_MspInit>
>>>>>>> majorchng
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f000 faa6 	bl	8004c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_TIM_Base_MspInit>:
=======
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 faa6 	bl	8004c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_Base_MspInit>:
>>>>>>> majorchng
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
=======
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <HAL_TIM_Base_Start_IT>:
=======
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_Base_Start_IT>:
>>>>>>> majorchng
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
=======
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	d001      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e03a      	b.n	80047e2 <HAL_TIM_Base_Start_IT+0x8e>
=======
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d001      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e03a      	b.n	800482e <HAL_TIM_Base_Start_IT+0x8e>
>>>>>>> majorchng
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a18      	ldr	r2, [pc, #96]	; (80047ec <HAL_TIM_Base_Start_IT+0x98>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0x58>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d009      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0x58>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a14      	ldr	r2, [pc, #80]	; (80047f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0x58>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d111      	bne.n	80047d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d010      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ce:	e007      	b.n	80047e0 <HAL_TIM_Base_Start_IT+0x8c>
=======
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_TIM_Base_Start_IT+0x98>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x58>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d009      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x58>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <HAL_TIM_Base_Start_IT+0x9c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x58>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a13      	ldr	r2, [pc, #76]	; (8004840 <HAL_TIM_Base_Start_IT+0xa0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d111      	bne.n	800481c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b06      	cmp	r3, #6
 8004808:	d010      	beq.n	800482c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	e007      	b.n	800482c <HAL_TIM_Base_Start_IT+0x8c>
>>>>>>> majorchng
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
=======
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
>>>>>>> majorchng
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr
 80047ec:	40012c00 	.word	0x40012c00
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800

080047f8 <HAL_TIM_Base_Stop_IT>:
=======
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800

08004844 <HAL_TIM_Base_Stop_IT>:
>>>>>>> majorchng
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
=======
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6a1a      	ldr	r2, [r3, #32]
 8004816:	f241 1311 	movw	r3, #4369	; 0x1111
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10f      	bne.n	8004840 <HAL_TIM_Base_Stop_IT+0x48>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	f240 4344 	movw	r3, #1092	; 0x444
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d107      	bne.n	8004840 <HAL_TIM_Base_Stop_IT+0x48>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0201 	bic.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_IRQHandler>:
=======
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a1a      	ldr	r2, [r3, #32]
 8004862:	f241 1311 	movw	r3, #4369	; 0x1111
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10f      	bne.n	800488c <HAL_TIM_Base_Stop_IT+0x48>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a1a      	ldr	r2, [r3, #32]
 8004872:	f240 4344 	movw	r3, #1092	; 0x444
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d107      	bne.n	800488c <HAL_TIM_Base_Stop_IT+0x48>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <HAL_TIM_IRQHandler>:
>>>>>>> majorchng
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0202 	mvn.w	r2, #2
 8004880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x4a>
=======
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d122      	bne.n	80048fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d11b      	bne.n	80048fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0202 	mvn.w	r2, #2
 80048cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_TIM_IRQHandler+0x4a>
>>>>>>> majorchng
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9b1 	bl	8004bfe <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x56>
=======
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9b1 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 80048e8:	e005      	b.n	80048f6 <HAL_TIM_IRQHandler+0x56>
>>>>>>> majorchng
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f9a4 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f9b3 	bl	8004c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
=======
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f9a4 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f9b3 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	771a      	strb	r2, [r3, #28]
>>>>>>> majorchng
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0204 	mvn.w	r2, #4
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x9e>
=======
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b04      	cmp	r3, #4
 8004908:	d122      	bne.n	8004950 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b04      	cmp	r3, #4
 8004916:	d11b      	bne.n	8004950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0204 	mvn.w	r2, #4
 8004920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_TIM_IRQHandler+0x9e>
>>>>>>> majorchng
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f987 	bl	8004bfe <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0xaa>
=======
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f987 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 800493c:	e005      	b.n	800494a <HAL_TIM_IRQHandler+0xaa>
>>>>>>> majorchng
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f97a 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f989 	bl	8004c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
=======
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f97a 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f989 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
>>>>>>> majorchng
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b08      	cmp	r3, #8
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0208 	mvn.w	r2, #8
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2204      	movs	r2, #4
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0xf2>
=======
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b08      	cmp	r3, #8
 800495c:	d122      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b08      	cmp	r3, #8
 800496a:	d11b      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0208 	mvn.w	r2, #8
 8004974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2204      	movs	r2, #4
 800497a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> majorchng
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f95d 	bl	8004bfe <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0xfe>
=======
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f95d 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 8004990:	e005      	b.n	800499e <HAL_TIM_IRQHandler+0xfe>
>>>>>>> majorchng
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f950 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f95f 	bl	8004c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
=======
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f950 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f95f 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]
>>>>>>> majorchng
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b10      	cmp	r3, #16
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0210 	mvn.w	r2, #16
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2208      	movs	r2, #8
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0x146>
=======
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d122      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d11b      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0210 	mvn.w	r2, #16
 80049c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2208      	movs	r2, #8
 80049ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x146>
>>>>>>> majorchng
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f933 	bl	8004bfe <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0x152>
=======
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f933 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 80049e4:	e005      	b.n	80049f2 <HAL_TIM_IRQHandler+0x152>
>>>>>>> majorchng
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f926 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f935 	bl	8004c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
=======
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f926 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f935 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
>>>>>>> majorchng
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0201 	mvn.w	r2, #1
 80049d0:	611a      	str	r2, [r3, #16]
=======
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10e      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d107      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0201 	mvn.w	r2, #1
 8004a1c:	611a      	str	r2, [r3, #16]
>>>>>>> majorchng
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fd fef8 	bl	80027c8 <HAL_TIM_PeriodElapsedCallback>
=======
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fd fee0 	bl	80027e4 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> majorchng
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049fc:	611a      	str	r2, [r3, #16]
=======
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b80      	cmp	r3, #128	; 0x80
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a48:	611a      	str	r2, [r3, #16]
>>>>>>> majorchng
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa77 	bl	8004ef2 <HAL_TIMEx_BreakCallback>
=======
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fa77 	bl	8004f3e <HAL_TIMEx_BreakCallback>
>>>>>>> majorchng
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a28:	611a      	str	r2, [r3, #16]
=======
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d10e      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d107      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a74:	611a      	str	r2, [r3, #16]
>>>>>>> majorchng
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f8f9 	bl	8004c22 <HAL_TIM_TriggerCallback>
=======
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8f9 	bl	8004c6e <HAL_TIM_TriggerCallback>
>>>>>>> majorchng
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0220 	mvn.w	r2, #32
 8004a54:	611a      	str	r2, [r3, #16]
=======
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d10e      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d107      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0220 	mvn.w	r2, #32
 8004aa0:	611a      	str	r2, [r3, #16]
>>>>>>> majorchng
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa42 	bl	8004ee0 <HAL_TIMEx_CommutCallback>
=======
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fa42 	bl	8004f2c <HAL_TIMEx_CommutCallback>
>>>>>>> majorchng
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_ConfigClockSource>:
=======
 8004aa8:	bf00      	nop
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_TIM_ConfigClockSource>:
>>>>>>> majorchng
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
=======
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
>>>>>>> majorchng
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_TIM_ConfigClockSource+0x18>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e0b3      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x180>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIM_ConfigClockSource+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e0b3      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x180>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> majorchng

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab4:	d03e      	beq.n	8004b34 <HAL_TIM_ConfigClockSource+0xd0>
 8004ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aba:	f200 8087 	bhi.w	8004bcc <HAL_TIM_ConfigClockSource+0x168>
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	f000 8085 	beq.w	8004bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aca:	d87f      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x168>
 8004acc:	2b70      	cmp	r3, #112	; 0x70
 8004ace:	d01a      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0xa2>
 8004ad0:	2b70      	cmp	r3, #112	; 0x70
 8004ad2:	d87b      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x168>
 8004ad4:	2b60      	cmp	r3, #96	; 0x60
 8004ad6:	d050      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x116>
 8004ad8:	2b60      	cmp	r3, #96	; 0x60
 8004ada:	d877      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x168>
 8004adc:	2b50      	cmp	r3, #80	; 0x50
 8004ade:	d03c      	beq.n	8004b5a <HAL_TIM_ConfigClockSource+0xf6>
 8004ae0:	2b50      	cmp	r3, #80	; 0x50
 8004ae2:	d873      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x168>
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d058      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x136>
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d86f      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x168>
 8004aec:	2b30      	cmp	r3, #48	; 0x30
 8004aee:	d064      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x156>
 8004af0:	2b30      	cmp	r3, #48	; 0x30
 8004af2:	d86b      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x168>
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d060      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x156>
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d867      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x168>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d05c      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x156>
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d05a      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x156>
=======
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b00:	d03e      	beq.n	8004b80 <HAL_TIM_ConfigClockSource+0xd0>
 8004b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b06:	f200 8087 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	f000 8085 	beq.w	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b16:	d87f      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b18:	2b70      	cmp	r3, #112	; 0x70
 8004b1a:	d01a      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0xa2>
 8004b1c:	2b70      	cmp	r3, #112	; 0x70
 8004b1e:	d87b      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b20:	2b60      	cmp	r3, #96	; 0x60
 8004b22:	d050      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x116>
 8004b24:	2b60      	cmp	r3, #96	; 0x60
 8004b26:	d877      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b28:	2b50      	cmp	r3, #80	; 0x50
 8004b2a:	d03c      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0xf6>
 8004b2c:	2b50      	cmp	r3, #80	; 0x50
 8004b2e:	d873      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d058      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x136>
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d86f      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b38:	2b30      	cmp	r3, #48	; 0x30
 8004b3a:	d064      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x156>
 8004b3c:	2b30      	cmp	r3, #48	; 0x30
 8004b3e:	d86b      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d060      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x156>
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d867      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d05c      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x156>
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d05a      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> majorchng
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
<<<<<<< HEAD
 8004b04:	e062      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6899      	ldr	r1, [r3, #8]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f000 f966 	bl	8004de6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	609a      	str	r2, [r3, #8]
      break;
 8004b32:	e04e      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	6899      	ldr	r1, [r3, #8]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f000 f94f 	bl	8004de6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b56:	609a      	str	r2, [r3, #8]
      break;
 8004b58:	e03b      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6859      	ldr	r1, [r3, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f000 f8c6 	bl	8004cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2150      	movs	r1, #80	; 0x50
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 f91d 	bl	8004db2 <TIM_ITRx_SetConfig>
      break;
 8004b78:	e02b      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6859      	ldr	r1, [r3, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f000 f8e4 	bl	8004d54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2160      	movs	r1, #96	; 0x60
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f90d 	bl	8004db2 <TIM_ITRx_SetConfig>
      break;
 8004b98:	e01b      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6859      	ldr	r1, [r3, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f000 f8a6 	bl	8004cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2140      	movs	r1, #64	; 0x40
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f8fd 	bl	8004db2 <TIM_ITRx_SetConfig>
      break;
 8004bb8:	e00b      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f000 f8f4 	bl	8004db2 <TIM_ITRx_SetConfig>
        break;
 8004bca:	e002      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bcc:	bf00      	nop
 8004bce:	e000      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8004b50:	e062      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6899      	ldr	r1, [r3, #8]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f000 f966 	bl	8004e32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	609a      	str	r2, [r3, #8]
      break;
 8004b7e:	e04e      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6899      	ldr	r1, [r3, #8]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f000 f94f 	bl	8004e32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba2:	609a      	str	r2, [r3, #8]
      break;
 8004ba4:	e03b      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6859      	ldr	r1, [r3, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f000 f8c6 	bl	8004d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2150      	movs	r1, #80	; 0x50
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f91d 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004bc4:	e02b      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 f8e4 	bl	8004da0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2160      	movs	r1, #96	; 0x60
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f90d 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004be4:	e01b      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 f8a6 	bl	8004d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2140      	movs	r1, #64	; 0x40
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f8fd 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004c04:	e00b      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f000 f8f4 	bl	8004dfe <TIM_ITRx_SetConfig>
        break;
 8004c16:	e002      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c18:	bf00      	nop
 8004c1a:	e000      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> majorchng
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
=======
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <HAL_TIM_IC_CaptureCallback>:
=======
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_IC_CaptureCallback>:
>>>>>>> majorchng
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
=======
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> majorchng
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
=======
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr

08004c22 <HAL_TIM_TriggerCallback>:
=======
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_TriggerCallback>:
>>>>>>> majorchng
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
=======
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <TIM_Base_SetConfig>:
=======
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <TIM_Base_SetConfig>:
>>>>>>> majorchng
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a29      	ldr	r2, [pc, #164]	; (8004cec <TIM_Base_SetConfig+0xb8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00b      	beq.n	8004c64 <TIM_Base_SetConfig+0x30>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c52:	d007      	beq.n	8004c64 <TIM_Base_SetConfig+0x30>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <TIM_Base_SetConfig+0xbc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_Base_SetConfig+0x30>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <TIM_Base_SetConfig+0xc0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d108      	bne.n	8004c76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <TIM_Base_SetConfig+0xb8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00b      	beq.n	8004c96 <TIM_Base_SetConfig+0x62>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d007      	beq.n	8004c96 <TIM_Base_SetConfig+0x62>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a19      	ldr	r2, [pc, #100]	; (8004cf0 <TIM_Base_SetConfig+0xbc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d003      	beq.n	8004c96 <TIM_Base_SetConfig+0x62>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <TIM_Base_SetConfig+0xc0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d108      	bne.n	8004ca8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
=======
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <TIM_Base_SetConfig+0xb8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <TIM_Base_SetConfig+0x30>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d007      	beq.n	8004cb0 <TIM_Base_SetConfig+0x30>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <TIM_Base_SetConfig+0xbc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0x30>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a25      	ldr	r2, [pc, #148]	; (8004d40 <TIM_Base_SetConfig+0xc0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d108      	bne.n	8004cc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <TIM_Base_SetConfig+0xb8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00b      	beq.n	8004ce2 <TIM_Base_SetConfig+0x62>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd0:	d007      	beq.n	8004ce2 <TIM_Base_SetConfig+0x62>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <TIM_Base_SetConfig+0xbc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_Base_SetConfig+0x62>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <TIM_Base_SetConfig+0xc0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d108      	bne.n	8004cf4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
>>>>>>> majorchng
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a07      	ldr	r2, [pc, #28]	; (8004cec <TIM_Base_SetConfig+0xb8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d103      	bne.n	8004cdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a07      	ldr	r2, [pc, #28]	; (8004d38 <TIM_Base_SetConfig+0xb8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d103      	bne.n	8004d28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> majorchng
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	615a      	str	r2, [r3, #20]
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr
 8004cec:	40012c00 	.word	0x40012c00
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800

08004cf8 <TIM_TI1_ConfigInputStage>:
=======
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800

08004d44 <TIM_TI1_ConfigInputStage>:
>>>>>>> majorchng
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
=======
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
>>>>>>> majorchng
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f023 0201 	bic.w	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f023 030a 	bic.w	r3, r3, #10
 8004d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <TIM_TI2_ConfigInputStage>:
=======
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f023 030a 	bic.w	r3, r3, #10
 8004d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <TIM_TI2_ConfigInputStage>:
>>>>>>> majorchng
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
=======
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
>>>>>>> majorchng
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f023 0210 	bic.w	r2, r3, #16
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	031b      	lsls	r3, r3, #12
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	621a      	str	r2, [r3, #32]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr

08004db2 <TIM_ITRx_SetConfig>:
=======
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f023 0210 	bic.w	r2, r3, #16
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	031b      	lsls	r3, r3, #12
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ddc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	621a      	str	r2, [r3, #32]
}
 8004df4:	bf00      	nop
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr

08004dfe <TIM_ITRx_SetConfig>:
>>>>>>> majorchng
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]
=======
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
>>>>>>> majorchng
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f043 0307 	orr.w	r3, r3, #7
 8004dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	609a      	str	r2, [r3, #8]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <TIM_ETR_SetConfig>:
=======
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f043 0307 	orr.w	r3, r3, #7
 8004e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	609a      	str	r2, [r3, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <TIM_ETR_SetConfig>:
>>>>>>> majorchng
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
 8004df2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	021a      	lsls	r2, r3, #8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	609a      	str	r2, [r3, #8]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8004e32:	b480      	push	{r7}
 8004e34:	b087      	sub	sp, #28
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	021a      	lsls	r2, r3, #8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	609a      	str	r2, [r3, #8]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> majorchng
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
=======
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
>>>>>>> majorchng
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e046      	b.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e88:	d009      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a10      	ldr	r2, [pc, #64]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]
=======
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e046      	b.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00e      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed4:	d009      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d10c      	bne.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	609a      	str	r2, [r3, #8]
>>>>>>> majorchng
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800

08004ee0 <HAL_TIMEx_CommutCallback>:
=======
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800

08004f2c <HAL_TIMEx_CommutCallback>:
>>>>>>> majorchng
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
=======
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_TIMEx_BreakCallback>:
=======
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr

08004f3e <HAL_TIMEx_BreakCallback>:
>>>>>>> majorchng
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
=======
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr

08004f04 <HAL_UART_Init>:
=======
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <HAL_UART_Init>:
>>>>>>> majorchng
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e03f      	b.n	8004f96 <HAL_UART_Init+0x92>
=======
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e03f      	b.n	8004fe2 <HAL_UART_Init+0x92>
>>>>>>> majorchng
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> majorchng

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fd ff9e 	bl	8002e6c <HAL_UART_MspInit>
=======
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fd ff9e 	bl	8002eb8 <HAL_UART_MspInit>
>>>>>>> majorchng
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2224      	movs	r2, #36	; 0x24
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f905 	bl	8005158 <UART_SetConfig>
=======
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2224      	movs	r2, #36	; 0x24
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f905 	bl	80051a4 <UART_SetConfig>
>>>>>>> majorchng

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_UART_Transmit>:
=======
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_UART_Transmit>:
>>>>>>> majorchng
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b08a      	sub	sp, #40	; 0x28
 8004fa2:	af02      	add	r7, sp, #8
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d17c      	bne.n	80050b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_UART_Transmit+0x2c>
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e075      	b.n	80050ba <HAL_UART_Transmit+0x11c>
=======
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b08a      	sub	sp, #40	; 0x28
 8004fee:	af02      	add	r7, sp, #8
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b20      	cmp	r3, #32
 8005008:	d17c      	bne.n	8005104 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_UART_Transmit+0x2c>
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e075      	b.n	8005106 <HAL_UART_Transmit+0x11c>
>>>>>>> majorchng
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Transmit+0x3e>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e06e      	b.n	80050ba <HAL_UART_Transmit+0x11c>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2221      	movs	r2, #33	; 0x21
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ff2:	f7fe f805 	bl	8003000 <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500c:	d108      	bne.n	8005020 <HAL_UART_Transmit+0x82>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e003      	b.n	8005028 <HAL_UART_Transmit+0x8a>
=======
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_UART_Transmit+0x3e>
 8005024:	2302      	movs	r3, #2
 8005026:	e06e      	b.n	8005106 <HAL_UART_Transmit+0x11c>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2221      	movs	r2, #33	; 0x21
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503e:	f7fe f805 	bl	800304c <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	88fa      	ldrh	r2, [r7, #6]
 800504e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005058:	d108      	bne.n	800506c <HAL_UART_Transmit+0x82>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e003      	b.n	8005074 <HAL_UART_Transmit+0x8a>
>>>>>>> majorchng
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	61bb      	str	r3, [r7, #24]
=======
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
>>>>>>> majorchng
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005030:	e02a      	b.n	8005088 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f840 	bl	80050c2 <UART_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e036      	b.n	80050ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	3302      	adds	r3, #2
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e007      	b.n	800507a <HAL_UART_Transmit+0xdc>
=======
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800507c:	e02a      	b.n	80050d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f840 	bl	800510e <UART_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e036      	b.n	8005106 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	3302      	adds	r3, #2
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e007      	b.n	80050c6 <HAL_UART_Transmit+0xdc>
>>>>>>> majorchng
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3301      	adds	r3, #1
 8005078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1cf      	bne.n	8005032 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	2140      	movs	r1, #64	; 0x40
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f810 	bl	80050c2 <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e006      	b.n	80050ba <HAL_UART_Transmit+0x11c>
=======
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1cf      	bne.n	800507e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2140      	movs	r1, #64	; 0x40
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f810 	bl	800510e <UART_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e006      	b.n	8005106 <HAL_UART_Transmit+0x11c>
>>>>>>> majorchng
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e000      	b.n	80050ba <HAL_UART_Transmit+0x11c>
=======
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_UART_Transmit+0x11c>
>>>>>>> majorchng
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80050b8:	2302      	movs	r3, #2
  }
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3720      	adds	r7, #32
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <UART_WaitOnFlagUntilTimeout>:
=======
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_WaitOnFlagUntilTimeout>:
>>>>>>> majorchng
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	603b      	str	r3, [r7, #0]
 80050ce:	4613      	mov	r3, r2
 80050d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d2:	e02c      	b.n	800512e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d028      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80050e2:	f7fd ff8d 	bl	8003000 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d21d      	bcs.n	800512e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005100:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0201 	bic.w	r2, r2, #1
 8005110:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00f      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	429a      	cmp	r2, r3
 800514a:	d0c3      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	603b      	str	r3, [r7, #0]
 800511a:	4613      	mov	r3, r2
 800511c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511e:	e02c      	b.n	800517a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d028      	beq.n	800517a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d007      	beq.n	800513e <UART_WaitOnFlagUntilTimeout+0x30>
 800512e:	f7fd ff8d 	bl	800304c <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	429a      	cmp	r2, r3
 800513c:	d21d      	bcs.n	800517a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800514c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e00f      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4013      	ands	r3, r2
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	429a      	cmp	r2, r3
 8005196:	d0c3      	beq.n	8005120 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> majorchng
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UART_SetConfig>:
=======
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <UART_SetConfig>:
>>>>>>> majorchng
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
=======
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
>>>>>>> majorchng
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	611a      	str	r2, [r3, #16]
=======
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	611a      	str	r2, [r3, #16]
>>>>>>> majorchng
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005192:	f023 030c 	bic.w	r3, r3, #12
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	430b      	orrs	r3, r1
 800519e:	60d3      	str	r3, [r2, #12]
=======
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80051de:	f023 030c 	bic.w	r3, r3, #12
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	60d3      	str	r3, [r2, #12]
>>>>>>> majorchng
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2c      	ldr	r2, [pc, #176]	; (800526c <UART_SetConfig+0x114>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d103      	bne.n	80051c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7fe fe0e 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	e002      	b.n	80051ce <UART_SetConfig+0x76>
=======
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2c      	ldr	r2, [pc, #176]	; (80052b8 <UART_SetConfig+0x114>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d103      	bne.n	8005214 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7fe fe0e 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	e002      	b.n	800521a <UART_SetConfig+0x76>
>>>>>>> majorchng
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 80051c8:	f7fe fdf6 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 80051cc:	60f8      	str	r0, [r7, #12]
=======
 8005214:	f7fe fdf6 	bl	8003e04 <HAL_RCC_GetPCLK1Freq>
 8005218:	60f8      	str	r0, [r7, #12]
>>>>>>> majorchng
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <UART_SetConfig+0x118>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	0119      	lsls	r1, r3, #4
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009a      	lsls	r2, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fbb2 f2f3 	udiv	r2, r2, r3
 8005204:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <UART_SetConfig+0x118>)
 8005206:	fba3 0302 	umull	r0, r3, r3, r2
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2064      	movs	r0, #100	; 0x64
 800520e:	fb00 f303 	mul.w	r3, r0, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	3332      	adds	r3, #50	; 0x32
 8005218:	4a15      	ldr	r2, [pc, #84]	; (8005270 <UART_SetConfig+0x118>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005224:	4419      	add	r1, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009a      	lsls	r2, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	fbb2 f2f3 	udiv	r2, r2, r3
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <UART_SetConfig+0x118>)
 800523e:	fba3 0302 	umull	r0, r3, r3, r2
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2064      	movs	r0, #100	; 0x64
 8005246:	fb00 f303 	mul.w	r3, r0, r3
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	3332      	adds	r3, #50	; 0x32
 8005250:	4a07      	ldr	r2, [pc, #28]	; (8005270 <UART_SetConfig+0x118>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	f003 020f 	and.w	r2, r3, #15
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	440a      	add	r2, r1
 8005262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40013800 	.word	0x40013800
 8005270:	51eb851f 	.word	0x51eb851f

08005274 <__errno>:
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <__errno+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000018 	.word	0x20000018

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	2600      	movs	r6, #0
 8005284:	4d0c      	ldr	r5, [pc, #48]	; (80052b8 <__libc_init_array+0x38>)
 8005286:	4c0d      	ldr	r4, [pc, #52]	; (80052bc <__libc_init_array+0x3c>)
 8005288:	1b64      	subs	r4, r4, r5
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	42a6      	cmp	r6, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	f002 ff8a 	bl	80081a8 <_init>
 8005294:	2600      	movs	r6, #0
 8005296:	4d0a      	ldr	r5, [pc, #40]	; (80052c0 <__libc_init_array+0x40>)
 8005298:	4c0a      	ldr	r4, [pc, #40]	; (80052c4 <__libc_init_array+0x44>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	42a6      	cmp	r6, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a8:	4798      	blx	r3
 80052aa:	3601      	adds	r6, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b2:	4798      	blx	r3
 80052b4:	3601      	adds	r6, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	080087ac 	.word	0x080087ac
 80052bc:	080087ac 	.word	0x080087ac
 80052c0:	080087ac 	.word	0x080087ac
 80052c4:	080087b0 	.word	0x080087b0

080052c8 <memset>:
 80052c8:	4603      	mov	r3, r0
 80052ca:	4402      	add	r2, r0
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d100      	bne.n	80052d2 <memset+0xa>
 80052d0:	4770      	bx	lr
 80052d2:	f803 1b01 	strb.w	r1, [r3], #1
 80052d6:	e7f9      	b.n	80052cc <memset+0x4>

080052d8 <__cvt>:
 80052d8:	2b00      	cmp	r3, #0
 80052da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052de:	461f      	mov	r7, r3
 80052e0:	bfbb      	ittet	lt
 80052e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	461f      	movlt	r7, r3
 80052e8:	2300      	movge	r3, #0
 80052ea:	232d      	movlt	r3, #45	; 0x2d
 80052ec:	b088      	sub	sp, #32
 80052ee:	4614      	mov	r4, r2
 80052f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80052f4:	7013      	strb	r3, [r2, #0]
 80052f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80052f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80052fc:	f023 0820 	bic.w	r8, r3, #32
 8005300:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005304:	d005      	beq.n	8005312 <__cvt+0x3a>
 8005306:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800530a:	d100      	bne.n	800530e <__cvt+0x36>
 800530c:	3501      	adds	r5, #1
 800530e:	2302      	movs	r3, #2
 8005310:	e000      	b.n	8005314 <__cvt+0x3c>
 8005312:	2303      	movs	r3, #3
 8005314:	aa07      	add	r2, sp, #28
 8005316:	9204      	str	r2, [sp, #16]
 8005318:	aa06      	add	r2, sp, #24
 800531a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800531e:	e9cd 3500 	strd	r3, r5, [sp]
 8005322:	4622      	mov	r2, r4
 8005324:	463b      	mov	r3, r7
 8005326:	f000 fe33 	bl	8005f90 <_dtoa_r>
 800532a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800532e:	4606      	mov	r6, r0
 8005330:	d102      	bne.n	8005338 <__cvt+0x60>
 8005332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005334:	07db      	lsls	r3, r3, #31
 8005336:	d522      	bpl.n	800537e <__cvt+0xa6>
 8005338:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800533c:	eb06 0905 	add.w	r9, r6, r5
 8005340:	d110      	bne.n	8005364 <__cvt+0x8c>
 8005342:	7833      	ldrb	r3, [r6, #0]
 8005344:	2b30      	cmp	r3, #48	; 0x30
 8005346:	d10a      	bne.n	800535e <__cvt+0x86>
 8005348:	2200      	movs	r2, #0
 800534a:	2300      	movs	r3, #0
 800534c:	4620      	mov	r0, r4
 800534e:	4639      	mov	r1, r7
 8005350:	f7fb fbde 	bl	8000b10 <__aeabi_dcmpeq>
 8005354:	b918      	cbnz	r0, 800535e <__cvt+0x86>
 8005356:	f1c5 0501 	rsb	r5, r5, #1
 800535a:	f8ca 5000 	str.w	r5, [sl]
 800535e:	f8da 3000 	ldr.w	r3, [sl]
 8005362:	4499      	add	r9, r3
 8005364:	2200      	movs	r2, #0
 8005366:	2300      	movs	r3, #0
 8005368:	4620      	mov	r0, r4
 800536a:	4639      	mov	r1, r7
 800536c:	f7fb fbd0 	bl	8000b10 <__aeabi_dcmpeq>
 8005370:	b108      	cbz	r0, 8005376 <__cvt+0x9e>
 8005372:	f8cd 901c 	str.w	r9, [sp, #28]
 8005376:	2230      	movs	r2, #48	; 0x30
 8005378:	9b07      	ldr	r3, [sp, #28]
 800537a:	454b      	cmp	r3, r9
 800537c:	d307      	bcc.n	800538e <__cvt+0xb6>
 800537e:	4630      	mov	r0, r6
 8005380:	9b07      	ldr	r3, [sp, #28]
 8005382:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005384:	1b9b      	subs	r3, r3, r6
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	b008      	add	sp, #32
 800538a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538e:	1c59      	adds	r1, r3, #1
 8005390:	9107      	str	r1, [sp, #28]
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	e7f0      	b.n	8005378 <__cvt+0xa0>

08005396 <__exponent>:
 8005396:	4603      	mov	r3, r0
 8005398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800539a:	2900      	cmp	r1, #0
 800539c:	f803 2b02 	strb.w	r2, [r3], #2
 80053a0:	bfb6      	itet	lt
 80053a2:	222d      	movlt	r2, #45	; 0x2d
 80053a4:	222b      	movge	r2, #43	; 0x2b
 80053a6:	4249      	neglt	r1, r1
 80053a8:	2909      	cmp	r1, #9
 80053aa:	7042      	strb	r2, [r0, #1]
 80053ac:	dd2b      	ble.n	8005406 <__exponent+0x70>
 80053ae:	f10d 0407 	add.w	r4, sp, #7
 80053b2:	46a4      	mov	ip, r4
 80053b4:	270a      	movs	r7, #10
 80053b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80053ba:	460a      	mov	r2, r1
 80053bc:	46a6      	mov	lr, r4
 80053be:	fb07 1516 	mls	r5, r7, r6, r1
 80053c2:	2a63      	cmp	r2, #99	; 0x63
 80053c4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80053c8:	4631      	mov	r1, r6
 80053ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80053ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053d2:	dcf0      	bgt.n	80053b6 <__exponent+0x20>
 80053d4:	3130      	adds	r1, #48	; 0x30
 80053d6:	f1ae 0502 	sub.w	r5, lr, #2
 80053da:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053de:	4629      	mov	r1, r5
 80053e0:	1c44      	adds	r4, r0, #1
 80053e2:	4561      	cmp	r1, ip
 80053e4:	d30a      	bcc.n	80053fc <__exponent+0x66>
 80053e6:	f10d 0209 	add.w	r2, sp, #9
 80053ea:	eba2 020e 	sub.w	r2, r2, lr
 80053ee:	4565      	cmp	r5, ip
 80053f0:	bf88      	it	hi
 80053f2:	2200      	movhi	r2, #0
 80053f4:	4413      	add	r3, r2
 80053f6:	1a18      	subs	r0, r3, r0
 80053f8:	b003      	add	sp, #12
 80053fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005400:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005404:	e7ed      	b.n	80053e2 <__exponent+0x4c>
 8005406:	2330      	movs	r3, #48	; 0x30
 8005408:	3130      	adds	r1, #48	; 0x30
 800540a:	7083      	strb	r3, [r0, #2]
 800540c:	70c1      	strb	r1, [r0, #3]
 800540e:	1d03      	adds	r3, r0, #4
 8005410:	e7f1      	b.n	80053f6 <__exponent+0x60>
	...

08005414 <_printf_float>:
 8005414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005418:	b091      	sub	sp, #68	; 0x44
 800541a:	460c      	mov	r4, r1
 800541c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005420:	4616      	mov	r6, r2
 8005422:	461f      	mov	r7, r3
 8005424:	4605      	mov	r5, r0
 8005426:	f001 fd55 	bl	8006ed4 <_localeconv_r>
 800542a:	6803      	ldr	r3, [r0, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	9309      	str	r3, [sp, #36]	; 0x24
 8005430:	f7fa fe8e 	bl	8000150 <strlen>
 8005434:	2300      	movs	r3, #0
 8005436:	930e      	str	r3, [sp, #56]	; 0x38
 8005438:	f8d8 3000 	ldr.w	r3, [r8]
 800543c:	900a      	str	r0, [sp, #40]	; 0x28
 800543e:	3307      	adds	r3, #7
 8005440:	f023 0307 	bic.w	r3, r3, #7
 8005444:	f103 0208 	add.w	r2, r3, #8
 8005448:	f894 9018 	ldrb.w	r9, [r4, #24]
 800544c:	f8d4 b000 	ldr.w	fp, [r4]
 8005450:	f8c8 2000 	str.w	r2, [r8]
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800545c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005460:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005464:	930b      	str	r3, [sp, #44]	; 0x2c
 8005466:	f04f 32ff 	mov.w	r2, #4294967295
 800546a:	4640      	mov	r0, r8
 800546c:	4b9c      	ldr	r3, [pc, #624]	; (80056e0 <_printf_float+0x2cc>)
 800546e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005470:	f7fb fb80 	bl	8000b74 <__aeabi_dcmpun>
 8005474:	bb70      	cbnz	r0, 80054d4 <_printf_float+0xc0>
 8005476:	f04f 32ff 	mov.w	r2, #4294967295
 800547a:	4640      	mov	r0, r8
 800547c:	4b98      	ldr	r3, [pc, #608]	; (80056e0 <_printf_float+0x2cc>)
 800547e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005480:	f7fb fb5a 	bl	8000b38 <__aeabi_dcmple>
 8005484:	bb30      	cbnz	r0, 80054d4 <_printf_float+0xc0>
 8005486:	2200      	movs	r2, #0
 8005488:	2300      	movs	r3, #0
 800548a:	4640      	mov	r0, r8
 800548c:	4651      	mov	r1, sl
 800548e:	f7fb fb49 	bl	8000b24 <__aeabi_dcmplt>
 8005492:	b110      	cbz	r0, 800549a <_printf_float+0x86>
 8005494:	232d      	movs	r3, #45	; 0x2d
 8005496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800549a:	4b92      	ldr	r3, [pc, #584]	; (80056e4 <_printf_float+0x2d0>)
 800549c:	4892      	ldr	r0, [pc, #584]	; (80056e8 <_printf_float+0x2d4>)
 800549e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80054a2:	bf94      	ite	ls
 80054a4:	4698      	movls	r8, r3
 80054a6:	4680      	movhi	r8, r0
 80054a8:	2303      	movs	r3, #3
 80054aa:	f04f 0a00 	mov.w	sl, #0
 80054ae:	6123      	str	r3, [r4, #16]
 80054b0:	f02b 0304 	bic.w	r3, fp, #4
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	4633      	mov	r3, r6
 80054b8:	4621      	mov	r1, r4
 80054ba:	4628      	mov	r0, r5
 80054bc:	9700      	str	r7, [sp, #0]
 80054be:	aa0f      	add	r2, sp, #60	; 0x3c
 80054c0:	f000 f9d4 	bl	800586c <_printf_common>
 80054c4:	3001      	adds	r0, #1
 80054c6:	f040 8090 	bne.w	80055ea <_printf_float+0x1d6>
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295
 80054ce:	b011      	add	sp, #68	; 0x44
 80054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d4:	4642      	mov	r2, r8
 80054d6:	4653      	mov	r3, sl
 80054d8:	4640      	mov	r0, r8
 80054da:	4651      	mov	r1, sl
 80054dc:	f7fb fb4a 	bl	8000b74 <__aeabi_dcmpun>
 80054e0:	b148      	cbz	r0, 80054f6 <_printf_float+0xe2>
 80054e2:	f1ba 0f00 	cmp.w	sl, #0
 80054e6:	bfb8      	it	lt
 80054e8:	232d      	movlt	r3, #45	; 0x2d
 80054ea:	4880      	ldr	r0, [pc, #512]	; (80056ec <_printf_float+0x2d8>)
 80054ec:	bfb8      	it	lt
 80054ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054f2:	4b7f      	ldr	r3, [pc, #508]	; (80056f0 <_printf_float+0x2dc>)
 80054f4:	e7d3      	b.n	800549e <_printf_float+0x8a>
 80054f6:	6863      	ldr	r3, [r4, #4]
 80054f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	d142      	bne.n	8005586 <_printf_float+0x172>
 8005500:	2306      	movs	r3, #6
 8005502:	6063      	str	r3, [r4, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	9206      	str	r2, [sp, #24]
 8005508:	aa0e      	add	r2, sp, #56	; 0x38
 800550a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800550e:	aa0d      	add	r2, sp, #52	; 0x34
 8005510:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005514:	9203      	str	r2, [sp, #12]
 8005516:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800551a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	6863      	ldr	r3, [r4, #4]
 8005522:	4642      	mov	r2, r8
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	4628      	mov	r0, r5
 8005528:	4653      	mov	r3, sl
 800552a:	910b      	str	r1, [sp, #44]	; 0x2c
 800552c:	f7ff fed4 	bl	80052d8 <__cvt>
 8005530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005532:	4680      	mov	r8, r0
 8005534:	2947      	cmp	r1, #71	; 0x47
 8005536:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005538:	d108      	bne.n	800554c <_printf_float+0x138>
 800553a:	1cc8      	adds	r0, r1, #3
 800553c:	db02      	blt.n	8005544 <_printf_float+0x130>
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	4299      	cmp	r1, r3
 8005542:	dd40      	ble.n	80055c6 <_printf_float+0x1b2>
 8005544:	f1a9 0902 	sub.w	r9, r9, #2
 8005548:	fa5f f989 	uxtb.w	r9, r9
 800554c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005550:	d81f      	bhi.n	8005592 <_printf_float+0x17e>
 8005552:	464a      	mov	r2, r9
 8005554:	3901      	subs	r1, #1
 8005556:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800555a:	910d      	str	r1, [sp, #52]	; 0x34
 800555c:	f7ff ff1b 	bl	8005396 <__exponent>
 8005560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005562:	4682      	mov	sl, r0
 8005564:	1813      	adds	r3, r2, r0
 8005566:	2a01      	cmp	r2, #1
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	dc02      	bgt.n	8005572 <_printf_float+0x15e>
 800556c:	6822      	ldr	r2, [r4, #0]
 800556e:	07d2      	lsls	r2, r2, #31
 8005570:	d501      	bpl.n	8005576 <_printf_float+0x162>
 8005572:	3301      	adds	r3, #1
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800557a:	2b00      	cmp	r3, #0
 800557c:	d09b      	beq.n	80054b6 <_printf_float+0xa2>
 800557e:	232d      	movs	r3, #45	; 0x2d
 8005580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005584:	e797      	b.n	80054b6 <_printf_float+0xa2>
 8005586:	2947      	cmp	r1, #71	; 0x47
 8005588:	d1bc      	bne.n	8005504 <_printf_float+0xf0>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1ba      	bne.n	8005504 <_printf_float+0xf0>
 800558e:	2301      	movs	r3, #1
 8005590:	e7b7      	b.n	8005502 <_printf_float+0xee>
 8005592:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005596:	d118      	bne.n	80055ca <_printf_float+0x1b6>
 8005598:	2900      	cmp	r1, #0
 800559a:	6863      	ldr	r3, [r4, #4]
 800559c:	dd0b      	ble.n	80055b6 <_printf_float+0x1a2>
 800559e:	6121      	str	r1, [r4, #16]
 80055a0:	b913      	cbnz	r3, 80055a8 <_printf_float+0x194>
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	07d0      	lsls	r0, r2, #31
 80055a6:	d502      	bpl.n	80055ae <_printf_float+0x19a>
 80055a8:	3301      	adds	r3, #1
 80055aa:	440b      	add	r3, r1
 80055ac:	6123      	str	r3, [r4, #16]
 80055ae:	f04f 0a00 	mov.w	sl, #0
 80055b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80055b4:	e7df      	b.n	8005576 <_printf_float+0x162>
 80055b6:	b913      	cbnz	r3, 80055be <_printf_float+0x1aa>
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	07d2      	lsls	r2, r2, #31
 80055bc:	d501      	bpl.n	80055c2 <_printf_float+0x1ae>
 80055be:	3302      	adds	r3, #2
 80055c0:	e7f4      	b.n	80055ac <_printf_float+0x198>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e7f2      	b.n	80055ac <_printf_float+0x198>
 80055c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80055ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055cc:	4299      	cmp	r1, r3
 80055ce:	db05      	blt.n	80055dc <_printf_float+0x1c8>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	6121      	str	r1, [r4, #16]
 80055d4:	07d8      	lsls	r0, r3, #31
 80055d6:	d5ea      	bpl.n	80055ae <_printf_float+0x19a>
 80055d8:	1c4b      	adds	r3, r1, #1
 80055da:	e7e7      	b.n	80055ac <_printf_float+0x198>
 80055dc:	2900      	cmp	r1, #0
 80055de:	bfcc      	ite	gt
 80055e0:	2201      	movgt	r2, #1
 80055e2:	f1c1 0202 	rsble	r2, r1, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	e7e0      	b.n	80055ac <_printf_float+0x198>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	055a      	lsls	r2, r3, #21
 80055ee:	d407      	bmi.n	8005600 <_printf_float+0x1ec>
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	4642      	mov	r2, r8
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	d12b      	bne.n	8005656 <_printf_float+0x242>
 80055fe:	e764      	b.n	80054ca <_printf_float+0xb6>
 8005600:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005604:	f240 80dd 	bls.w	80057c2 <_printf_float+0x3ae>
 8005608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800560c:	2200      	movs	r2, #0
 800560e:	2300      	movs	r3, #0
 8005610:	f7fb fa7e 	bl	8000b10 <__aeabi_dcmpeq>
 8005614:	2800      	cmp	r0, #0
 8005616:	d033      	beq.n	8005680 <_printf_float+0x26c>
 8005618:	2301      	movs	r3, #1
 800561a:	4631      	mov	r1, r6
 800561c:	4628      	mov	r0, r5
 800561e:	4a35      	ldr	r2, [pc, #212]	; (80056f4 <_printf_float+0x2e0>)
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f af51 	beq.w	80054ca <_printf_float+0xb6>
 8005628:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800562c:	429a      	cmp	r2, r3
 800562e:	db02      	blt.n	8005636 <_printf_float+0x222>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	07d8      	lsls	r0, r3, #31
 8005634:	d50f      	bpl.n	8005656 <_printf_float+0x242>
 8005636:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f af42 	beq.w	80054ca <_printf_float+0xb6>
 8005646:	f04f 0800 	mov.w	r8, #0
 800564a:	f104 091a 	add.w	r9, r4, #26
 800564e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005650:	3b01      	subs	r3, #1
 8005652:	4543      	cmp	r3, r8
 8005654:	dc09      	bgt.n	800566a <_printf_float+0x256>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	079b      	lsls	r3, r3, #30
 800565a:	f100 8102 	bmi.w	8005862 <_printf_float+0x44e>
 800565e:	68e0      	ldr	r0, [r4, #12]
 8005660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005662:	4298      	cmp	r0, r3
 8005664:	bfb8      	it	lt
 8005666:	4618      	movlt	r0, r3
 8005668:	e731      	b.n	80054ce <_printf_float+0xba>
 800566a:	2301      	movs	r3, #1
 800566c:	464a      	mov	r2, r9
 800566e:	4631      	mov	r1, r6
 8005670:	4628      	mov	r0, r5
 8005672:	47b8      	blx	r7
 8005674:	3001      	adds	r0, #1
 8005676:	f43f af28 	beq.w	80054ca <_printf_float+0xb6>
 800567a:	f108 0801 	add.w	r8, r8, #1
 800567e:	e7e6      	b.n	800564e <_printf_float+0x23a>
 8005680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005682:	2b00      	cmp	r3, #0
 8005684:	dc38      	bgt.n	80056f8 <_printf_float+0x2e4>
 8005686:	2301      	movs	r3, #1
 8005688:	4631      	mov	r1, r6
 800568a:	4628      	mov	r0, r5
 800568c:	4a19      	ldr	r2, [pc, #100]	; (80056f4 <_printf_float+0x2e0>)
 800568e:	47b8      	blx	r7
 8005690:	3001      	adds	r0, #1
 8005692:	f43f af1a 	beq.w	80054ca <_printf_float+0xb6>
 8005696:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800569a:	4313      	orrs	r3, r2
 800569c:	d102      	bne.n	80056a4 <_printf_float+0x290>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	07d9      	lsls	r1, r3, #31
 80056a2:	d5d8      	bpl.n	8005656 <_printf_float+0x242>
 80056a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f af0b 	beq.w	80054ca <_printf_float+0xb6>
 80056b4:	f04f 0900 	mov.w	r9, #0
 80056b8:	f104 0a1a 	add.w	sl, r4, #26
 80056bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056be:	425b      	negs	r3, r3
 80056c0:	454b      	cmp	r3, r9
 80056c2:	dc01      	bgt.n	80056c8 <_printf_float+0x2b4>
 80056c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056c6:	e794      	b.n	80055f2 <_printf_float+0x1de>
 80056c8:	2301      	movs	r3, #1
 80056ca:	4652      	mov	r2, sl
 80056cc:	4631      	mov	r1, r6
 80056ce:	4628      	mov	r0, r5
 80056d0:	47b8      	blx	r7
 80056d2:	3001      	adds	r0, #1
 80056d4:	f43f aef9 	beq.w	80054ca <_printf_float+0xb6>
 80056d8:	f109 0901 	add.w	r9, r9, #1
 80056dc:	e7ee      	b.n	80056bc <_printf_float+0x2a8>
 80056de:	bf00      	nop
 80056e0:	7fefffff 	.word	0x7fefffff
 80056e4:	080083d4 	.word	0x080083d4
 80056e8:	080083d8 	.word	0x080083d8
 80056ec:	080083e0 	.word	0x080083e0
 80056f0:	080083dc 	.word	0x080083dc
 80056f4:	080083e4 	.word	0x080083e4
 80056f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056fc:	429a      	cmp	r2, r3
 80056fe:	bfa8      	it	ge
 8005700:	461a      	movge	r2, r3
 8005702:	2a00      	cmp	r2, #0
 8005704:	4691      	mov	r9, r2
 8005706:	dc37      	bgt.n	8005778 <_printf_float+0x364>
 8005708:	f04f 0b00 	mov.w	fp, #0
 800570c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005710:	f104 021a 	add.w	r2, r4, #26
 8005714:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005718:	ebaa 0309 	sub.w	r3, sl, r9
 800571c:	455b      	cmp	r3, fp
 800571e:	dc33      	bgt.n	8005788 <_printf_float+0x374>
 8005720:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005724:	429a      	cmp	r2, r3
 8005726:	db3b      	blt.n	80057a0 <_printf_float+0x38c>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	07da      	lsls	r2, r3, #31
 800572c:	d438      	bmi.n	80057a0 <_printf_float+0x38c>
 800572e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005730:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005732:	eba3 020a 	sub.w	r2, r3, sl
 8005736:	eba3 0901 	sub.w	r9, r3, r1
 800573a:	4591      	cmp	r9, r2
 800573c:	bfa8      	it	ge
 800573e:	4691      	movge	r9, r2
 8005740:	f1b9 0f00 	cmp.w	r9, #0
 8005744:	dc34      	bgt.n	80057b0 <_printf_float+0x39c>
 8005746:	f04f 0800 	mov.w	r8, #0
 800574a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800574e:	f104 0a1a 	add.w	sl, r4, #26
 8005752:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	eba3 0309 	sub.w	r3, r3, r9
 800575c:	4543      	cmp	r3, r8
 800575e:	f77f af7a 	ble.w	8005656 <_printf_float+0x242>
 8005762:	2301      	movs	r3, #1
 8005764:	4652      	mov	r2, sl
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	f43f aeac 	beq.w	80054ca <_printf_float+0xb6>
 8005772:	f108 0801 	add.w	r8, r8, #1
 8005776:	e7ec      	b.n	8005752 <_printf_float+0x33e>
 8005778:	4613      	mov	r3, r2
 800577a:	4631      	mov	r1, r6
 800577c:	4642      	mov	r2, r8
 800577e:	4628      	mov	r0, r5
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	d1c0      	bne.n	8005708 <_printf_float+0x2f4>
 8005786:	e6a0      	b.n	80054ca <_printf_float+0xb6>
 8005788:	2301      	movs	r3, #1
 800578a:	4631      	mov	r1, r6
 800578c:	4628      	mov	r0, r5
 800578e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	f43f ae99 	beq.w	80054ca <_printf_float+0xb6>
 8005798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800579a:	f10b 0b01 	add.w	fp, fp, #1
 800579e:	e7b9      	b.n	8005714 <_printf_float+0x300>
 80057a0:	4631      	mov	r1, r6
 80057a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b8      	blx	r7
 80057aa:	3001      	adds	r0, #1
 80057ac:	d1bf      	bne.n	800572e <_printf_float+0x31a>
 80057ae:	e68c      	b.n	80054ca <_printf_float+0xb6>
 80057b0:	464b      	mov	r3, r9
 80057b2:	4631      	mov	r1, r6
 80057b4:	4628      	mov	r0, r5
 80057b6:	eb08 020a 	add.w	r2, r8, sl
 80057ba:	47b8      	blx	r7
 80057bc:	3001      	adds	r0, #1
 80057be:	d1c2      	bne.n	8005746 <_printf_float+0x332>
 80057c0:	e683      	b.n	80054ca <_printf_float+0xb6>
 80057c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057c4:	2a01      	cmp	r2, #1
 80057c6:	dc01      	bgt.n	80057cc <_printf_float+0x3b8>
 80057c8:	07db      	lsls	r3, r3, #31
 80057ca:	d537      	bpl.n	800583c <_printf_float+0x428>
 80057cc:	2301      	movs	r3, #1
 80057ce:	4642      	mov	r2, r8
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b8      	blx	r7
 80057d6:	3001      	adds	r0, #1
 80057d8:	f43f ae77 	beq.w	80054ca <_printf_float+0xb6>
 80057dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057e0:	4631      	mov	r1, r6
 80057e2:	4628      	mov	r0, r5
 80057e4:	47b8      	blx	r7
 80057e6:	3001      	adds	r0, #1
 80057e8:	f43f ae6f 	beq.w	80054ca <_printf_float+0xb6>
 80057ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	f7fb f98c 	bl	8000b10 <__aeabi_dcmpeq>
 80057f8:	b9d8      	cbnz	r0, 8005832 <_printf_float+0x41e>
 80057fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057fc:	f108 0201 	add.w	r2, r8, #1
 8005800:	3b01      	subs	r3, #1
 8005802:	4631      	mov	r1, r6
 8005804:	4628      	mov	r0, r5
 8005806:	47b8      	blx	r7
 8005808:	3001      	adds	r0, #1
 800580a:	d10e      	bne.n	800582a <_printf_float+0x416>
 800580c:	e65d      	b.n	80054ca <_printf_float+0xb6>
 800580e:	2301      	movs	r3, #1
 8005810:	464a      	mov	r2, r9
 8005812:	4631      	mov	r1, r6
 8005814:	4628      	mov	r0, r5
 8005816:	47b8      	blx	r7
 8005818:	3001      	adds	r0, #1
 800581a:	f43f ae56 	beq.w	80054ca <_printf_float+0xb6>
 800581e:	f108 0801 	add.w	r8, r8, #1
 8005822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005824:	3b01      	subs	r3, #1
 8005826:	4543      	cmp	r3, r8
 8005828:	dcf1      	bgt.n	800580e <_printf_float+0x3fa>
 800582a:	4653      	mov	r3, sl
 800582c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005830:	e6e0      	b.n	80055f4 <_printf_float+0x1e0>
 8005832:	f04f 0800 	mov.w	r8, #0
 8005836:	f104 091a 	add.w	r9, r4, #26
 800583a:	e7f2      	b.n	8005822 <_printf_float+0x40e>
 800583c:	2301      	movs	r3, #1
 800583e:	4642      	mov	r2, r8
 8005840:	e7df      	b.n	8005802 <_printf_float+0x3ee>
 8005842:	2301      	movs	r3, #1
 8005844:	464a      	mov	r2, r9
 8005846:	4631      	mov	r1, r6
 8005848:	4628      	mov	r0, r5
 800584a:	47b8      	blx	r7
 800584c:	3001      	adds	r0, #1
 800584e:	f43f ae3c 	beq.w	80054ca <_printf_float+0xb6>
 8005852:	f108 0801 	add.w	r8, r8, #1
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800585a:	1a5b      	subs	r3, r3, r1
 800585c:	4543      	cmp	r3, r8
 800585e:	dcf0      	bgt.n	8005842 <_printf_float+0x42e>
 8005860:	e6fd      	b.n	800565e <_printf_float+0x24a>
 8005862:	f04f 0800 	mov.w	r8, #0
 8005866:	f104 0919 	add.w	r9, r4, #25
 800586a:	e7f4      	b.n	8005856 <_printf_float+0x442>

0800586c <_printf_common>:
 800586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	4616      	mov	r6, r2
 8005872:	4699      	mov	r9, r3
 8005874:	688a      	ldr	r2, [r1, #8]
 8005876:	690b      	ldr	r3, [r1, #16]
 8005878:	4607      	mov	r7, r0
 800587a:	4293      	cmp	r3, r2
 800587c:	bfb8      	it	lt
 800587e:	4613      	movlt	r3, r2
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005886:	460c      	mov	r4, r1
 8005888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800588c:	b10a      	cbz	r2, 8005892 <_printf_common+0x26>
 800588e:	3301      	adds	r3, #1
 8005890:	6033      	str	r3, [r6, #0]
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	0699      	lsls	r1, r3, #26
 8005896:	bf42      	ittt	mi
 8005898:	6833      	ldrmi	r3, [r6, #0]
 800589a:	3302      	addmi	r3, #2
 800589c:	6033      	strmi	r3, [r6, #0]
 800589e:	6825      	ldr	r5, [r4, #0]
 80058a0:	f015 0506 	ands.w	r5, r5, #6
 80058a4:	d106      	bne.n	80058b4 <_printf_common+0x48>
 80058a6:	f104 0a19 	add.w	sl, r4, #25
 80058aa:	68e3      	ldr	r3, [r4, #12]
 80058ac:	6832      	ldr	r2, [r6, #0]
 80058ae:	1a9b      	subs	r3, r3, r2
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	dc28      	bgt.n	8005906 <_printf_common+0x9a>
 80058b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058b8:	1e13      	subs	r3, r2, #0
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	bf18      	it	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	0692      	lsls	r2, r2, #26
 80058c2:	d42d      	bmi.n	8005920 <_printf_common+0xb4>
 80058c4:	4649      	mov	r1, r9
 80058c6:	4638      	mov	r0, r7
 80058c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058cc:	47c0      	blx	r8
 80058ce:	3001      	adds	r0, #1
 80058d0:	d020      	beq.n	8005914 <_printf_common+0xa8>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	68e5      	ldr	r5, [r4, #12]
 80058d6:	f003 0306 	and.w	r3, r3, #6
 80058da:	2b04      	cmp	r3, #4
 80058dc:	bf18      	it	ne
 80058de:	2500      	movne	r5, #0
 80058e0:	6832      	ldr	r2, [r6, #0]
 80058e2:	f04f 0600 	mov.w	r6, #0
 80058e6:	68a3      	ldr	r3, [r4, #8]
 80058e8:	bf08      	it	eq
 80058ea:	1aad      	subeq	r5, r5, r2
 80058ec:	6922      	ldr	r2, [r4, #16]
 80058ee:	bf08      	it	eq
 80058f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f4:	4293      	cmp	r3, r2
 80058f6:	bfc4      	itt	gt
 80058f8:	1a9b      	subgt	r3, r3, r2
 80058fa:	18ed      	addgt	r5, r5, r3
 80058fc:	341a      	adds	r4, #26
 80058fe:	42b5      	cmp	r5, r6
 8005900:	d11a      	bne.n	8005938 <_printf_common+0xcc>
 8005902:	2000      	movs	r0, #0
 8005904:	e008      	b.n	8005918 <_printf_common+0xac>
 8005906:	2301      	movs	r3, #1
 8005908:	4652      	mov	r2, sl
 800590a:	4649      	mov	r1, r9
 800590c:	4638      	mov	r0, r7
 800590e:	47c0      	blx	r8
 8005910:	3001      	adds	r0, #1
 8005912:	d103      	bne.n	800591c <_printf_common+0xb0>
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591c:	3501      	adds	r5, #1
 800591e:	e7c4      	b.n	80058aa <_printf_common+0x3e>
 8005920:	2030      	movs	r0, #48	; 0x30
 8005922:	18e1      	adds	r1, r4, r3
 8005924:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800592e:	4422      	add	r2, r4
 8005930:	3302      	adds	r3, #2
 8005932:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005936:	e7c5      	b.n	80058c4 <_printf_common+0x58>
 8005938:	2301      	movs	r3, #1
 800593a:	4622      	mov	r2, r4
 800593c:	4649      	mov	r1, r9
 800593e:	4638      	mov	r0, r7
 8005940:	47c0      	blx	r8
 8005942:	3001      	adds	r0, #1
 8005944:	d0e6      	beq.n	8005914 <_printf_common+0xa8>
 8005946:	3601      	adds	r6, #1
 8005948:	e7d9      	b.n	80058fe <_printf_common+0x92>
	...

0800594c <_printf_i>:
 800594c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005950:	7e0f      	ldrb	r7, [r1, #24]
 8005952:	4691      	mov	r9, r2
 8005954:	2f78      	cmp	r7, #120	; 0x78
 8005956:	4680      	mov	r8, r0
 8005958:	460c      	mov	r4, r1
 800595a:	469a      	mov	sl, r3
 800595c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800595e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005962:	d807      	bhi.n	8005974 <_printf_i+0x28>
 8005964:	2f62      	cmp	r7, #98	; 0x62
 8005966:	d80a      	bhi.n	800597e <_printf_i+0x32>
 8005968:	2f00      	cmp	r7, #0
 800596a:	f000 80d9 	beq.w	8005b20 <_printf_i+0x1d4>
 800596e:	2f58      	cmp	r7, #88	; 0x58
 8005970:	f000 80a4 	beq.w	8005abc <_printf_i+0x170>
 8005974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800597c:	e03a      	b.n	80059f4 <_printf_i+0xa8>
 800597e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005982:	2b15      	cmp	r3, #21
 8005984:	d8f6      	bhi.n	8005974 <_printf_i+0x28>
 8005986:	a101      	add	r1, pc, #4	; (adr r1, 800598c <_printf_i+0x40>)
 8005988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800598c:	080059e5 	.word	0x080059e5
 8005990:	080059f9 	.word	0x080059f9
 8005994:	08005975 	.word	0x08005975
 8005998:	08005975 	.word	0x08005975
 800599c:	08005975 	.word	0x08005975
 80059a0:	08005975 	.word	0x08005975
 80059a4:	080059f9 	.word	0x080059f9
 80059a8:	08005975 	.word	0x08005975
 80059ac:	08005975 	.word	0x08005975
 80059b0:	08005975 	.word	0x08005975
 80059b4:	08005975 	.word	0x08005975
 80059b8:	08005b07 	.word	0x08005b07
 80059bc:	08005a29 	.word	0x08005a29
 80059c0:	08005ae9 	.word	0x08005ae9
 80059c4:	08005975 	.word	0x08005975
 80059c8:	08005975 	.word	0x08005975
 80059cc:	08005b29 	.word	0x08005b29
 80059d0:	08005975 	.word	0x08005975
 80059d4:	08005a29 	.word	0x08005a29
 80059d8:	08005975 	.word	0x08005975
 80059dc:	08005975 	.word	0x08005975
 80059e0:	08005af1 	.word	0x08005af1
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	1d1a      	adds	r2, r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	602a      	str	r2, [r5, #0]
 80059ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0a4      	b.n	8005b42 <_printf_i+0x1f6>
 80059f8:	6820      	ldr	r0, [r4, #0]
 80059fa:	6829      	ldr	r1, [r5, #0]
 80059fc:	0606      	lsls	r6, r0, #24
 80059fe:	f101 0304 	add.w	r3, r1, #4
 8005a02:	d50a      	bpl.n	8005a1a <_printf_i+0xce>
 8005a04:	680e      	ldr	r6, [r1, #0]
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	2e00      	cmp	r6, #0
 8005a0a:	da03      	bge.n	8005a14 <_printf_i+0xc8>
 8005a0c:	232d      	movs	r3, #45	; 0x2d
 8005a0e:	4276      	negs	r6, r6
 8005a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a14:	230a      	movs	r3, #10
 8005a16:	485e      	ldr	r0, [pc, #376]	; (8005b90 <_printf_i+0x244>)
 8005a18:	e019      	b.n	8005a4e <_printf_i+0x102>
 8005a1a:	680e      	ldr	r6, [r1, #0]
 8005a1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a20:	602b      	str	r3, [r5, #0]
 8005a22:	bf18      	it	ne
 8005a24:	b236      	sxthne	r6, r6
 8005a26:	e7ef      	b.n	8005a08 <_printf_i+0xbc>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	1d19      	adds	r1, r3, #4
 8005a2e:	6029      	str	r1, [r5, #0]
 8005a30:	0601      	lsls	r1, r0, #24
 8005a32:	d501      	bpl.n	8005a38 <_printf_i+0xec>
 8005a34:	681e      	ldr	r6, [r3, #0]
 8005a36:	e002      	b.n	8005a3e <_printf_i+0xf2>
 8005a38:	0646      	lsls	r6, r0, #25
 8005a3a:	d5fb      	bpl.n	8005a34 <_printf_i+0xe8>
 8005a3c:	881e      	ldrh	r6, [r3, #0]
 8005a3e:	2f6f      	cmp	r7, #111	; 0x6f
 8005a40:	bf0c      	ite	eq
 8005a42:	2308      	moveq	r3, #8
 8005a44:	230a      	movne	r3, #10
 8005a46:	4852      	ldr	r0, [pc, #328]	; (8005b90 <_printf_i+0x244>)
 8005a48:	2100      	movs	r1, #0
 8005a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a4e:	6865      	ldr	r5, [r4, #4]
 8005a50:	2d00      	cmp	r5, #0
 8005a52:	bfa8      	it	ge
 8005a54:	6821      	ldrge	r1, [r4, #0]
 8005a56:	60a5      	str	r5, [r4, #8]
 8005a58:	bfa4      	itt	ge
 8005a5a:	f021 0104 	bicge.w	r1, r1, #4
 8005a5e:	6021      	strge	r1, [r4, #0]
 8005a60:	b90e      	cbnz	r6, 8005a66 <_printf_i+0x11a>
 8005a62:	2d00      	cmp	r5, #0
 8005a64:	d04d      	beq.n	8005b02 <_printf_i+0x1b6>
 8005a66:	4615      	mov	r5, r2
 8005a68:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a6c:	fb03 6711 	mls	r7, r3, r1, r6
 8005a70:	5dc7      	ldrb	r7, [r0, r7]
 8005a72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a76:	4637      	mov	r7, r6
 8005a78:	42bb      	cmp	r3, r7
 8005a7a:	460e      	mov	r6, r1
 8005a7c:	d9f4      	bls.n	8005a68 <_printf_i+0x11c>
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d10b      	bne.n	8005a9a <_printf_i+0x14e>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	07de      	lsls	r6, r3, #31
 8005a86:	d508      	bpl.n	8005a9a <_printf_i+0x14e>
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	6861      	ldr	r1, [r4, #4]
 8005a8c:	4299      	cmp	r1, r3
 8005a8e:	bfde      	ittt	le
 8005a90:	2330      	movle	r3, #48	; 0x30
 8005a92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a9a:	1b52      	subs	r2, r2, r5
 8005a9c:	6122      	str	r2, [r4, #16]
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	f8cd a000 	str.w	sl, [sp]
 8005aa8:	aa03      	add	r2, sp, #12
 8005aaa:	f7ff fedf 	bl	800586c <_printf_common>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d14c      	bne.n	8005b4c <_printf_i+0x200>
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	b004      	add	sp, #16
 8005ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abc:	4834      	ldr	r0, [pc, #208]	; (8005b90 <_printf_i+0x244>)
 8005abe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ac2:	6829      	ldr	r1, [r5, #0]
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	f851 6b04 	ldr.w	r6, [r1], #4
 8005aca:	6029      	str	r1, [r5, #0]
 8005acc:	061d      	lsls	r5, r3, #24
 8005ace:	d514      	bpl.n	8005afa <_printf_i+0x1ae>
 8005ad0:	07df      	lsls	r7, r3, #31
 8005ad2:	bf44      	itt	mi
 8005ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ad8:	6023      	strmi	r3, [r4, #0]
 8005ada:	b91e      	cbnz	r6, 8005ae4 <_printf_i+0x198>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	f023 0320 	bic.w	r3, r3, #32
 8005ae2:	6023      	str	r3, [r4, #0]
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	e7af      	b.n	8005a48 <_printf_i+0xfc>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	f043 0320 	orr.w	r3, r3, #32
 8005aee:	6023      	str	r3, [r4, #0]
 8005af0:	2378      	movs	r3, #120	; 0x78
 8005af2:	4828      	ldr	r0, [pc, #160]	; (8005b94 <_printf_i+0x248>)
 8005af4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005af8:	e7e3      	b.n	8005ac2 <_printf_i+0x176>
 8005afa:	0659      	lsls	r1, r3, #25
 8005afc:	bf48      	it	mi
 8005afe:	b2b6      	uxthmi	r6, r6
 8005b00:	e7e6      	b.n	8005ad0 <_printf_i+0x184>
 8005b02:	4615      	mov	r5, r2
 8005b04:	e7bb      	b.n	8005a7e <_printf_i+0x132>
 8005b06:	682b      	ldr	r3, [r5, #0]
 8005b08:	6826      	ldr	r6, [r4, #0]
 8005b0a:	1d18      	adds	r0, r3, #4
 8005b0c:	6961      	ldr	r1, [r4, #20]
 8005b0e:	6028      	str	r0, [r5, #0]
 8005b10:	0635      	lsls	r5, r6, #24
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	d501      	bpl.n	8005b1a <_printf_i+0x1ce>
 8005b16:	6019      	str	r1, [r3, #0]
 8005b18:	e002      	b.n	8005b20 <_printf_i+0x1d4>
 8005b1a:	0670      	lsls	r0, r6, #25
 8005b1c:	d5fb      	bpl.n	8005b16 <_printf_i+0x1ca>
 8005b1e:	8019      	strh	r1, [r3, #0]
 8005b20:	2300      	movs	r3, #0
 8005b22:	4615      	mov	r5, r2
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	e7ba      	b.n	8005a9e <_printf_i+0x152>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	1d1a      	adds	r2, r3, #4
 8005b2e:	602a      	str	r2, [r5, #0]
 8005b30:	681d      	ldr	r5, [r3, #0]
 8005b32:	6862      	ldr	r2, [r4, #4]
 8005b34:	4628      	mov	r0, r5
 8005b36:	f001 fa41 	bl	8006fbc <memchr>
 8005b3a:	b108      	cbz	r0, 8005b40 <_printf_i+0x1f4>
 8005b3c:	1b40      	subs	r0, r0, r5
 8005b3e:	6060      	str	r0, [r4, #4]
 8005b40:	6863      	ldr	r3, [r4, #4]
 8005b42:	6123      	str	r3, [r4, #16]
 8005b44:	2300      	movs	r3, #0
 8005b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b4a:	e7a8      	b.n	8005a9e <_printf_i+0x152>
 8005b4c:	462a      	mov	r2, r5
 8005b4e:	4649      	mov	r1, r9
 8005b50:	4640      	mov	r0, r8
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	47d0      	blx	sl
 8005b56:	3001      	adds	r0, #1
 8005b58:	d0ab      	beq.n	8005ab2 <_printf_i+0x166>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	079b      	lsls	r3, r3, #30
 8005b5e:	d413      	bmi.n	8005b88 <_printf_i+0x23c>
 8005b60:	68e0      	ldr	r0, [r4, #12]
 8005b62:	9b03      	ldr	r3, [sp, #12]
 8005b64:	4298      	cmp	r0, r3
 8005b66:	bfb8      	it	lt
 8005b68:	4618      	movlt	r0, r3
 8005b6a:	e7a4      	b.n	8005ab6 <_printf_i+0x16a>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	4632      	mov	r2, r6
 8005b70:	4649      	mov	r1, r9
 8005b72:	4640      	mov	r0, r8
 8005b74:	47d0      	blx	sl
 8005b76:	3001      	adds	r0, #1
 8005b78:	d09b      	beq.n	8005ab2 <_printf_i+0x166>
 8005b7a:	3501      	adds	r5, #1
 8005b7c:	68e3      	ldr	r3, [r4, #12]
 8005b7e:	9903      	ldr	r1, [sp, #12]
 8005b80:	1a5b      	subs	r3, r3, r1
 8005b82:	42ab      	cmp	r3, r5
 8005b84:	dcf2      	bgt.n	8005b6c <_printf_i+0x220>
 8005b86:	e7eb      	b.n	8005b60 <_printf_i+0x214>
 8005b88:	2500      	movs	r5, #0
 8005b8a:	f104 0619 	add.w	r6, r4, #25
 8005b8e:	e7f5      	b.n	8005b7c <_printf_i+0x230>
 8005b90:	080083e6 	.word	0x080083e6
 8005b94:	080083f7 	.word	0x080083f7

08005b98 <iprintf>:
 8005b98:	b40f      	push	{r0, r1, r2, r3}
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <iprintf+0x2c>)
 8005b9c:	b513      	push	{r0, r1, r4, lr}
 8005b9e:	681c      	ldr	r4, [r3, #0]
 8005ba0:	b124      	cbz	r4, 8005bac <iprintf+0x14>
 8005ba2:	69a3      	ldr	r3, [r4, #24]
 8005ba4:	b913      	cbnz	r3, 8005bac <iprintf+0x14>
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f001 f8f6 	bl	8006d98 <__sinit>
 8005bac:	ab05      	add	r3, sp, #20
 8005bae:	4620      	mov	r0, r4
 8005bb0:	9a04      	ldr	r2, [sp, #16]
 8005bb2:	68a1      	ldr	r1, [r4, #8]
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	f002 f813 	bl	8007be0 <_vfiprintf_r>
 8005bba:	b002      	add	sp, #8
 8005bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc0:	b004      	add	sp, #16
 8005bc2:	4770      	bx	lr
 8005bc4:	20000018 	.word	0x20000018

08005bc8 <_puts_r>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	460e      	mov	r6, r1
 8005bcc:	4605      	mov	r5, r0
 8005bce:	b118      	cbz	r0, 8005bd8 <_puts_r+0x10>
 8005bd0:	6983      	ldr	r3, [r0, #24]
 8005bd2:	b90b      	cbnz	r3, 8005bd8 <_puts_r+0x10>
 8005bd4:	f001 f8e0 	bl	8006d98 <__sinit>
 8005bd8:	69ab      	ldr	r3, [r5, #24]
 8005bda:	68ac      	ldr	r4, [r5, #8]
 8005bdc:	b913      	cbnz	r3, 8005be4 <_puts_r+0x1c>
 8005bde:	4628      	mov	r0, r5
 8005be0:	f001 f8da 	bl	8006d98 <__sinit>
 8005be4:	4b2c      	ldr	r3, [pc, #176]	; (8005c98 <_puts_r+0xd0>)
 8005be6:	429c      	cmp	r4, r3
 8005be8:	d120      	bne.n	8005c2c <_puts_r+0x64>
 8005bea:	686c      	ldr	r4, [r5, #4]
 8005bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bee:	07db      	lsls	r3, r3, #31
 8005bf0:	d405      	bmi.n	8005bfe <_puts_r+0x36>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	0598      	lsls	r0, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_puts_r+0x36>
 8005bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfa:	f001 f970 	bl	8006ede <__retarget_lock_acquire_recursive>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	0719      	lsls	r1, r3, #28
 8005c02:	d51d      	bpl.n	8005c40 <_puts_r+0x78>
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	b1db      	cbz	r3, 8005c40 <_puts_r+0x78>
 8005c08:	3e01      	subs	r6, #1
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c10:	3b01      	subs	r3, #1
 8005c12:	60a3      	str	r3, [r4, #8]
 8005c14:	bb39      	cbnz	r1, 8005c66 <_puts_r+0x9e>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da38      	bge.n	8005c8c <_puts_r+0xc4>
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	210a      	movs	r1, #10
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 f868 	bl	8005cf4 <__swbuf_r>
 8005c24:	3001      	adds	r0, #1
 8005c26:	d011      	beq.n	8005c4c <_puts_r+0x84>
 8005c28:	250a      	movs	r5, #10
 8005c2a:	e011      	b.n	8005c50 <_puts_r+0x88>
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <_puts_r+0xd4>)
 8005c2e:	429c      	cmp	r4, r3
 8005c30:	d101      	bne.n	8005c36 <_puts_r+0x6e>
 8005c32:	68ac      	ldr	r4, [r5, #8]
 8005c34:	e7da      	b.n	8005bec <_puts_r+0x24>
 8005c36:	4b1a      	ldr	r3, [pc, #104]	; (8005ca0 <_puts_r+0xd8>)
 8005c38:	429c      	cmp	r4, r3
 8005c3a:	bf08      	it	eq
 8005c3c:	68ec      	ldreq	r4, [r5, #12]
 8005c3e:	e7d5      	b.n	8005bec <_puts_r+0x24>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 f8a8 	bl	8005d98 <__swsetup_r>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d0dd      	beq.n	8005c08 <_puts_r+0x40>
 8005c4c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c52:	07da      	lsls	r2, r3, #31
 8005c54:	d405      	bmi.n	8005c62 <_puts_r+0x9a>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	059b      	lsls	r3, r3, #22
 8005c5a:	d402      	bmi.n	8005c62 <_puts_r+0x9a>
 8005c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5e:	f001 f93f 	bl	8006ee0 <__retarget_lock_release_recursive>
 8005c62:	4628      	mov	r0, r5
 8005c64:	bd70      	pop	{r4, r5, r6, pc}
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	da04      	bge.n	8005c74 <_puts_r+0xac>
 8005c6a:	69a2      	ldr	r2, [r4, #24]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	dc06      	bgt.n	8005c7e <_puts_r+0xb6>
 8005c70:	290a      	cmp	r1, #10
 8005c72:	d004      	beq.n	8005c7e <_puts_r+0xb6>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	6022      	str	r2, [r4, #0]
 8005c7a:	7019      	strb	r1, [r3, #0]
 8005c7c:	e7c5      	b.n	8005c0a <_puts_r+0x42>
 8005c7e:	4622      	mov	r2, r4
 8005c80:	4628      	mov	r0, r5
 8005c82:	f000 f837 	bl	8005cf4 <__swbuf_r>
 8005c86:	3001      	adds	r0, #1
 8005c88:	d1bf      	bne.n	8005c0a <_puts_r+0x42>
 8005c8a:	e7df      	b.n	8005c4c <_puts_r+0x84>
 8005c8c:	250a      	movs	r5, #10
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	6022      	str	r2, [r4, #0]
 8005c94:	701d      	strb	r5, [r3, #0]
 8005c96:	e7db      	b.n	8005c50 <_puts_r+0x88>
 8005c98:	080084b8 	.word	0x080084b8
 8005c9c:	080084d8 	.word	0x080084d8
 8005ca0:	08008498 	.word	0x08008498

08005ca4 <puts>:
 8005ca4:	4b02      	ldr	r3, [pc, #8]	; (8005cb0 <puts+0xc>)
 8005ca6:	4601      	mov	r1, r0
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	f7ff bf8d 	b.w	8005bc8 <_puts_r>
 8005cae:	bf00      	nop
 8005cb0:	20000018 	.word	0x20000018

08005cb4 <siprintf>:
 8005cb4:	b40e      	push	{r1, r2, r3}
 8005cb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cba:	b500      	push	{lr}
 8005cbc:	b09c      	sub	sp, #112	; 0x70
 8005cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8005cc0:	9002      	str	r0, [sp, #8]
 8005cc2:	9006      	str	r0, [sp, #24]
 8005cc4:	9107      	str	r1, [sp, #28]
 8005cc6:	9104      	str	r1, [sp, #16]
 8005cc8:	4808      	ldr	r0, [pc, #32]	; (8005cec <siprintf+0x38>)
 8005cca:	4909      	ldr	r1, [pc, #36]	; (8005cf0 <siprintf+0x3c>)
 8005ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd0:	9105      	str	r1, [sp, #20]
 8005cd2:	6800      	ldr	r0, [r0, #0]
 8005cd4:	a902      	add	r1, sp, #8
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	f001 fe5a 	bl	8007990 <_svfiprintf_r>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	9b02      	ldr	r3, [sp, #8]
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	b01c      	add	sp, #112	; 0x70
 8005ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ce8:	b003      	add	sp, #12
 8005cea:	4770      	bx	lr
 8005cec:	20000018 	.word	0x20000018
 8005cf0:	ffff0208 	.word	0xffff0208

08005cf4 <__swbuf_r>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	460e      	mov	r6, r1
 8005cf8:	4614      	mov	r4, r2
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	b118      	cbz	r0, 8005d06 <__swbuf_r+0x12>
 8005cfe:	6983      	ldr	r3, [r0, #24]
 8005d00:	b90b      	cbnz	r3, 8005d06 <__swbuf_r+0x12>
 8005d02:	f001 f849 	bl	8006d98 <__sinit>
 8005d06:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <__swbuf_r+0x98>)
 8005d08:	429c      	cmp	r4, r3
 8005d0a:	d12b      	bne.n	8005d64 <__swbuf_r+0x70>
 8005d0c:	686c      	ldr	r4, [r5, #4]
 8005d0e:	69a3      	ldr	r3, [r4, #24]
 8005d10:	60a3      	str	r3, [r4, #8]
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	071a      	lsls	r2, r3, #28
 8005d16:	d52f      	bpl.n	8005d78 <__swbuf_r+0x84>
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	b36b      	cbz	r3, 8005d78 <__swbuf_r+0x84>
 8005d1c:	6923      	ldr	r3, [r4, #16]
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	b2f6      	uxtb	r6, r6
 8005d22:	1ac0      	subs	r0, r0, r3
 8005d24:	6963      	ldr	r3, [r4, #20]
 8005d26:	4637      	mov	r7, r6
 8005d28:	4283      	cmp	r3, r0
 8005d2a:	dc04      	bgt.n	8005d36 <__swbuf_r+0x42>
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 ff9e 	bl	8006c70 <_fflush_r>
 8005d34:	bb30      	cbnz	r0, 8005d84 <__swbuf_r+0x90>
 8005d36:	68a3      	ldr	r3, [r4, #8]
 8005d38:	3001      	adds	r0, #1
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	60a3      	str	r3, [r4, #8]
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	6022      	str	r2, [r4, #0]
 8005d44:	701e      	strb	r6, [r3, #0]
 8005d46:	6963      	ldr	r3, [r4, #20]
 8005d48:	4283      	cmp	r3, r0
 8005d4a:	d004      	beq.n	8005d56 <__swbuf_r+0x62>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	07db      	lsls	r3, r3, #31
 8005d50:	d506      	bpl.n	8005d60 <__swbuf_r+0x6c>
 8005d52:	2e0a      	cmp	r6, #10
 8005d54:	d104      	bne.n	8005d60 <__swbuf_r+0x6c>
 8005d56:	4621      	mov	r1, r4
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f000 ff89 	bl	8006c70 <_fflush_r>
 8005d5e:	b988      	cbnz	r0, 8005d84 <__swbuf_r+0x90>
 8005d60:	4638      	mov	r0, r7
 8005d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d64:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <__swbuf_r+0x9c>)
 8005d66:	429c      	cmp	r4, r3
 8005d68:	d101      	bne.n	8005d6e <__swbuf_r+0x7a>
 8005d6a:	68ac      	ldr	r4, [r5, #8]
 8005d6c:	e7cf      	b.n	8005d0e <__swbuf_r+0x1a>
 8005d6e:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <__swbuf_r+0xa0>)
 8005d70:	429c      	cmp	r4, r3
 8005d72:	bf08      	it	eq
 8005d74:	68ec      	ldreq	r4, [r5, #12]
 8005d76:	e7ca      	b.n	8005d0e <__swbuf_r+0x1a>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 f80c 	bl	8005d98 <__swsetup_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d0cb      	beq.n	8005d1c <__swbuf_r+0x28>
 8005d84:	f04f 37ff 	mov.w	r7, #4294967295
 8005d88:	e7ea      	b.n	8005d60 <__swbuf_r+0x6c>
 8005d8a:	bf00      	nop
 8005d8c:	080084b8 	.word	0x080084b8
 8005d90:	080084d8 	.word	0x080084d8
 8005d94:	08008498 	.word	0x08008498

08005d98 <__swsetup_r>:
 8005d98:	4b32      	ldr	r3, [pc, #200]	; (8005e64 <__swsetup_r+0xcc>)
 8005d9a:	b570      	push	{r4, r5, r6, lr}
 8005d9c:	681d      	ldr	r5, [r3, #0]
 8005d9e:	4606      	mov	r6, r0
 8005da0:	460c      	mov	r4, r1
 8005da2:	b125      	cbz	r5, 8005dae <__swsetup_r+0x16>
 8005da4:	69ab      	ldr	r3, [r5, #24]
 8005da6:	b913      	cbnz	r3, 8005dae <__swsetup_r+0x16>
 8005da8:	4628      	mov	r0, r5
 8005daa:	f000 fff5 	bl	8006d98 <__sinit>
 8005dae:	4b2e      	ldr	r3, [pc, #184]	; (8005e68 <__swsetup_r+0xd0>)
 8005db0:	429c      	cmp	r4, r3
 8005db2:	d10f      	bne.n	8005dd4 <__swsetup_r+0x3c>
 8005db4:	686c      	ldr	r4, [r5, #4]
 8005db6:	89a3      	ldrh	r3, [r4, #12]
 8005db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dbc:	0719      	lsls	r1, r3, #28
 8005dbe:	d42c      	bmi.n	8005e1a <__swsetup_r+0x82>
 8005dc0:	06dd      	lsls	r5, r3, #27
 8005dc2:	d411      	bmi.n	8005de8 <__swsetup_r+0x50>
 8005dc4:	2309      	movs	r3, #9
 8005dc6:	6033      	str	r3, [r6, #0]
 8005dc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	81a3      	strh	r3, [r4, #12]
 8005dd2:	e03e      	b.n	8005e52 <__swsetup_r+0xba>
 8005dd4:	4b25      	ldr	r3, [pc, #148]	; (8005e6c <__swsetup_r+0xd4>)
 8005dd6:	429c      	cmp	r4, r3
 8005dd8:	d101      	bne.n	8005dde <__swsetup_r+0x46>
 8005dda:	68ac      	ldr	r4, [r5, #8]
 8005ddc:	e7eb      	b.n	8005db6 <__swsetup_r+0x1e>
 8005dde:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <__swsetup_r+0xd8>)
 8005de0:	429c      	cmp	r4, r3
 8005de2:	bf08      	it	eq
 8005de4:	68ec      	ldreq	r4, [r5, #12]
 8005de6:	e7e6      	b.n	8005db6 <__swsetup_r+0x1e>
 8005de8:	0758      	lsls	r0, r3, #29
 8005dea:	d512      	bpl.n	8005e12 <__swsetup_r+0x7a>
 8005dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dee:	b141      	cbz	r1, 8005e02 <__swsetup_r+0x6a>
 8005df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005df4:	4299      	cmp	r1, r3
 8005df6:	d002      	beq.n	8005dfe <__swsetup_r+0x66>
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f001 fc91 	bl	8007720 <_free_r>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	6363      	str	r3, [r4, #52]	; 0x34
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	6063      	str	r3, [r4, #4]
 8005e0e:	6923      	ldr	r3, [r4, #16]
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	f043 0308 	orr.w	r3, r3, #8
 8005e18:	81a3      	strh	r3, [r4, #12]
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	b94b      	cbnz	r3, 8005e32 <__swsetup_r+0x9a>
 8005e1e:	89a3      	ldrh	r3, [r4, #12]
 8005e20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e28:	d003      	beq.n	8005e32 <__swsetup_r+0x9a>
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f001 f87d 	bl	8006f2c <__smakebuf_r>
 8005e32:	89a0      	ldrh	r0, [r4, #12]
 8005e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e38:	f010 0301 	ands.w	r3, r0, #1
 8005e3c:	d00a      	beq.n	8005e54 <__swsetup_r+0xbc>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60a3      	str	r3, [r4, #8]
 8005e42:	6963      	ldr	r3, [r4, #20]
 8005e44:	425b      	negs	r3, r3
 8005e46:	61a3      	str	r3, [r4, #24]
 8005e48:	6923      	ldr	r3, [r4, #16]
 8005e4a:	b943      	cbnz	r3, 8005e5e <__swsetup_r+0xc6>
 8005e4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e50:	d1ba      	bne.n	8005dc8 <__swsetup_r+0x30>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	0781      	lsls	r1, r0, #30
 8005e56:	bf58      	it	pl
 8005e58:	6963      	ldrpl	r3, [r4, #20]
 8005e5a:	60a3      	str	r3, [r4, #8]
 8005e5c:	e7f4      	b.n	8005e48 <__swsetup_r+0xb0>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e7f7      	b.n	8005e52 <__swsetup_r+0xba>
 8005e62:	bf00      	nop
 8005e64:	20000018 	.word	0x20000018
 8005e68:	080084b8 	.word	0x080084b8
 8005e6c:	080084d8 	.word	0x080084d8
 8005e70:	08008498 	.word	0x08008498

08005e74 <quorem>:
 8005e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	6903      	ldr	r3, [r0, #16]
 8005e7a:	690c      	ldr	r4, [r1, #16]
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	f2c0 8082 	blt.w	8005f88 <quorem+0x114>
 8005e84:	3c01      	subs	r4, #1
 8005e86:	f100 0514 	add.w	r5, r0, #20
 8005e8a:	f101 0814 	add.w	r8, r1, #20
 8005e8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ea4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ea8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005eac:	d331      	bcc.n	8005f12 <quorem+0x9e>
 8005eae:	f04f 0e00 	mov.w	lr, #0
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	46ac      	mov	ip, r5
 8005eb6:	46f2      	mov	sl, lr
 8005eb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ebc:	b293      	uxth	r3, r2
 8005ebe:	fb06 e303 	mla	r3, r6, r3, lr
 8005ec2:	0c12      	lsrs	r2, r2, #16
 8005ec4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	fb06 e202 	mla	r2, r6, r2, lr
 8005ece:	ebaa 0303 	sub.w	r3, sl, r3
 8005ed2:	f8dc a000 	ldr.w	sl, [ip]
 8005ed6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005eda:	fa1f fa8a 	uxth.w	sl, sl
 8005ede:	4453      	add	r3, sl
 8005ee0:	f8dc a000 	ldr.w	sl, [ip]
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005eea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ef4:	4581      	cmp	r9, r0
 8005ef6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005efa:	f84c 3b04 	str.w	r3, [ip], #4
 8005efe:	d2db      	bcs.n	8005eb8 <quorem+0x44>
 8005f00:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f04:	b92b      	cbnz	r3, 8005f12 <quorem+0x9e>
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	429d      	cmp	r5, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	d32f      	bcc.n	8005f70 <quorem+0xfc>
 8005f10:	613c      	str	r4, [r7, #16]
 8005f12:	4638      	mov	r0, r7
 8005f14:	f001 faec 	bl	80074f0 <__mcmp>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	db25      	blt.n	8005f68 <quorem+0xf4>
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f04f 0c00 	mov.w	ip, #0
 8005f22:	3601      	adds	r6, #1
 8005f24:	f858 1b04 	ldr.w	r1, [r8], #4
 8005f28:	f8d0 e000 	ldr.w	lr, [r0]
 8005f2c:	b28b      	uxth	r3, r1
 8005f2e:	ebac 0303 	sub.w	r3, ip, r3
 8005f32:	fa1f f28e 	uxth.w	r2, lr
 8005f36:	4413      	add	r3, r2
 8005f38:	0c0a      	lsrs	r2, r1, #16
 8005f3a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f48:	45c1      	cmp	r9, r8
 8005f4a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f4e:	f840 3b04 	str.w	r3, [r0], #4
 8005f52:	d2e7      	bcs.n	8005f24 <quorem+0xb0>
 8005f54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f5c:	b922      	cbnz	r2, 8005f68 <quorem+0xf4>
 8005f5e:	3b04      	subs	r3, #4
 8005f60:	429d      	cmp	r5, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	d30a      	bcc.n	8005f7c <quorem+0x108>
 8005f66:	613c      	str	r4, [r7, #16]
 8005f68:	4630      	mov	r0, r6
 8005f6a:	b003      	add	sp, #12
 8005f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	3b04      	subs	r3, #4
 8005f74:	2a00      	cmp	r2, #0
 8005f76:	d1cb      	bne.n	8005f10 <quorem+0x9c>
 8005f78:	3c01      	subs	r4, #1
 8005f7a:	e7c6      	b.n	8005f0a <quorem+0x96>
 8005f7c:	6812      	ldr	r2, [r2, #0]
 8005f7e:	3b04      	subs	r3, #4
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	d1f0      	bne.n	8005f66 <quorem+0xf2>
 8005f84:	3c01      	subs	r4, #1
 8005f86:	e7eb      	b.n	8005f60 <quorem+0xec>
 8005f88:	2000      	movs	r0, #0
 8005f8a:	e7ee      	b.n	8005f6a <quorem+0xf6>
 8005f8c:	0000      	movs	r0, r0
	...

08005f90 <_dtoa_r>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	4616      	mov	r6, r2
 8005f96:	461f      	mov	r7, r3
 8005f98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f9a:	b099      	sub	sp, #100	; 0x64
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005fa2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005fa6:	b974      	cbnz	r4, 8005fc6 <_dtoa_r+0x36>
 8005fa8:	2010      	movs	r0, #16
 8005faa:	f000 ffff 	bl	8006fac <malloc>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	6268      	str	r0, [r5, #36]	; 0x24
 8005fb2:	b920      	cbnz	r0, 8005fbe <_dtoa_r+0x2e>
 8005fb4:	21ea      	movs	r1, #234	; 0xea
 8005fb6:	4ba8      	ldr	r3, [pc, #672]	; (8006258 <_dtoa_r+0x2c8>)
 8005fb8:	48a8      	ldr	r0, [pc, #672]	; (800625c <_dtoa_r+0x2cc>)
 8005fba:	f001 ffa7 	bl	8007f0c <__assert_func>
 8005fbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fc2:	6004      	str	r4, [r0, #0]
 8005fc4:	60c4      	str	r4, [r0, #12]
 8005fc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fc8:	6819      	ldr	r1, [r3, #0]
 8005fca:	b151      	cbz	r1, 8005fe2 <_dtoa_r+0x52>
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4093      	lsls	r3, r2
 8005fd2:	604a      	str	r2, [r1, #4]
 8005fd4:	608b      	str	r3, [r1, #8]
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f001 f84c 	bl	8007074 <_Bfree>
 8005fdc:	2200      	movs	r2, #0
 8005fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	1e3b      	subs	r3, r7, #0
 8005fe4:	bfaf      	iteee	ge
 8005fe6:	2300      	movge	r3, #0
 8005fe8:	2201      	movlt	r2, #1
 8005fea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fee:	9305      	strlt	r3, [sp, #20]
 8005ff0:	bfa8      	it	ge
 8005ff2:	f8c8 3000 	strge.w	r3, [r8]
 8005ff6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005ffa:	4b99      	ldr	r3, [pc, #612]	; (8006260 <_dtoa_r+0x2d0>)
 8005ffc:	bfb8      	it	lt
 8005ffe:	f8c8 2000 	strlt.w	r2, [r8]
 8006002:	ea33 0309 	bics.w	r3, r3, r9
 8006006:	d119      	bne.n	800603c <_dtoa_r+0xac>
 8006008:	f242 730f 	movw	r3, #9999	; 0x270f
 800600c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006014:	4333      	orrs	r3, r6
 8006016:	f000 857f 	beq.w	8006b18 <_dtoa_r+0xb88>
 800601a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800601c:	b953      	cbnz	r3, 8006034 <_dtoa_r+0xa4>
 800601e:	4b91      	ldr	r3, [pc, #580]	; (8006264 <_dtoa_r+0x2d4>)
 8006020:	e022      	b.n	8006068 <_dtoa_r+0xd8>
 8006022:	4b91      	ldr	r3, [pc, #580]	; (8006268 <_dtoa_r+0x2d8>)
 8006024:	9303      	str	r3, [sp, #12]
 8006026:	3308      	adds	r3, #8
 8006028:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	9803      	ldr	r0, [sp, #12]
 800602e:	b019      	add	sp, #100	; 0x64
 8006030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006034:	4b8b      	ldr	r3, [pc, #556]	; (8006264 <_dtoa_r+0x2d4>)
 8006036:	9303      	str	r3, [sp, #12]
 8006038:	3303      	adds	r3, #3
 800603a:	e7f5      	b.n	8006028 <_dtoa_r+0x98>
 800603c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006040:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006048:	2200      	movs	r2, #0
 800604a:	2300      	movs	r3, #0
 800604c:	f7fa fd60 	bl	8000b10 <__aeabi_dcmpeq>
 8006050:	4680      	mov	r8, r0
 8006052:	b158      	cbz	r0, 800606c <_dtoa_r+0xdc>
 8006054:	2301      	movs	r3, #1
 8006056:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8558 	beq.w	8006b12 <_dtoa_r+0xb82>
 8006062:	4882      	ldr	r0, [pc, #520]	; (800626c <_dtoa_r+0x2dc>)
 8006064:	6018      	str	r0, [r3, #0]
 8006066:	1e43      	subs	r3, r0, #1
 8006068:	9303      	str	r3, [sp, #12]
 800606a:	e7df      	b.n	800602c <_dtoa_r+0x9c>
 800606c:	ab16      	add	r3, sp, #88	; 0x58
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	ab17      	add	r3, sp, #92	; 0x5c
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	4628      	mov	r0, r5
 8006076:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800607a:	f001 fae1 	bl	8007640 <__d2b>
 800607e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006082:	4683      	mov	fp, r0
 8006084:	2c00      	cmp	r4, #0
 8006086:	d07f      	beq.n	8006188 <_dtoa_r+0x1f8>
 8006088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800608c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800608e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006096:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800609a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800609e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80060a2:	2200      	movs	r2, #0
 80060a4:	4b72      	ldr	r3, [pc, #456]	; (8006270 <_dtoa_r+0x2e0>)
 80060a6:	f7fa f913 	bl	80002d0 <__aeabi_dsub>
 80060aa:	a365      	add	r3, pc, #404	; (adr r3, 8006240 <_dtoa_r+0x2b0>)
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f7fa fac6 	bl	8000640 <__aeabi_dmul>
 80060b4:	a364      	add	r3, pc, #400	; (adr r3, 8006248 <_dtoa_r+0x2b8>)
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f7fa f90b 	bl	80002d4 <__adddf3>
 80060be:	4606      	mov	r6, r0
 80060c0:	4620      	mov	r0, r4
 80060c2:	460f      	mov	r7, r1
 80060c4:	f7fa fa52 	bl	800056c <__aeabi_i2d>
 80060c8:	a361      	add	r3, pc, #388	; (adr r3, 8006250 <_dtoa_r+0x2c0>)
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f7fa fab7 	bl	8000640 <__aeabi_dmul>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4630      	mov	r0, r6
 80060d8:	4639      	mov	r1, r7
 80060da:	f7fa f8fb 	bl	80002d4 <__adddf3>
 80060de:	4606      	mov	r6, r0
 80060e0:	460f      	mov	r7, r1
 80060e2:	f7fa fd5d 	bl	8000ba0 <__aeabi_d2iz>
 80060e6:	2200      	movs	r2, #0
 80060e8:	4682      	mov	sl, r0
 80060ea:	2300      	movs	r3, #0
 80060ec:	4630      	mov	r0, r6
 80060ee:	4639      	mov	r1, r7
 80060f0:	f7fa fd18 	bl	8000b24 <__aeabi_dcmplt>
 80060f4:	b148      	cbz	r0, 800610a <_dtoa_r+0x17a>
 80060f6:	4650      	mov	r0, sl
 80060f8:	f7fa fa38 	bl	800056c <__aeabi_i2d>
 80060fc:	4632      	mov	r2, r6
 80060fe:	463b      	mov	r3, r7
 8006100:	f7fa fd06 	bl	8000b10 <__aeabi_dcmpeq>
 8006104:	b908      	cbnz	r0, 800610a <_dtoa_r+0x17a>
 8006106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800610a:	f1ba 0f16 	cmp.w	sl, #22
 800610e:	d858      	bhi.n	80061c2 <_dtoa_r+0x232>
 8006110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006114:	4b57      	ldr	r3, [pc, #348]	; (8006274 <_dtoa_r+0x2e4>)
 8006116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f7fa fd01 	bl	8000b24 <__aeabi_dcmplt>
 8006122:	2800      	cmp	r0, #0
 8006124:	d04f      	beq.n	80061c6 <_dtoa_r+0x236>
 8006126:	2300      	movs	r3, #0
 8006128:	f10a 3aff 	add.w	sl, sl, #4294967295
 800612c:	930f      	str	r3, [sp, #60]	; 0x3c
 800612e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006130:	1b1c      	subs	r4, r3, r4
 8006132:	1e63      	subs	r3, r4, #1
 8006134:	9309      	str	r3, [sp, #36]	; 0x24
 8006136:	bf49      	itett	mi
 8006138:	f1c4 0301 	rsbmi	r3, r4, #1
 800613c:	2300      	movpl	r3, #0
 800613e:	9306      	strmi	r3, [sp, #24]
 8006140:	2300      	movmi	r3, #0
 8006142:	bf54      	ite	pl
 8006144:	9306      	strpl	r3, [sp, #24]
 8006146:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006148:	f1ba 0f00 	cmp.w	sl, #0
 800614c:	db3d      	blt.n	80061ca <_dtoa_r+0x23a>
 800614e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006150:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006154:	4453      	add	r3, sl
 8006156:	9309      	str	r3, [sp, #36]	; 0x24
 8006158:	2300      	movs	r3, #0
 800615a:	930a      	str	r3, [sp, #40]	; 0x28
 800615c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800615e:	2b09      	cmp	r3, #9
 8006160:	f200 808c 	bhi.w	800627c <_dtoa_r+0x2ec>
 8006164:	2b05      	cmp	r3, #5
 8006166:	bfc4      	itt	gt
 8006168:	3b04      	subgt	r3, #4
 800616a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800616c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800616e:	bfc8      	it	gt
 8006170:	2400      	movgt	r4, #0
 8006172:	f1a3 0302 	sub.w	r3, r3, #2
 8006176:	bfd8      	it	le
 8006178:	2401      	movle	r4, #1
 800617a:	2b03      	cmp	r3, #3
 800617c:	f200 808a 	bhi.w	8006294 <_dtoa_r+0x304>
 8006180:	e8df f003 	tbb	[pc, r3]
 8006184:	5b4d4f2d 	.word	0x5b4d4f2d
 8006188:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800618c:	441c      	add	r4, r3
 800618e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006192:	2b20      	cmp	r3, #32
 8006194:	bfc3      	ittte	gt
 8006196:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800619a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800619e:	fa09 f303 	lslgt.w	r3, r9, r3
 80061a2:	f1c3 0320 	rsble	r3, r3, #32
 80061a6:	bfc6      	itte	gt
 80061a8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80061ac:	4318      	orrgt	r0, r3
 80061ae:	fa06 f003 	lslle.w	r0, r6, r3
 80061b2:	f7fa f9cb 	bl	800054c <__aeabi_ui2d>
 80061b6:	2301      	movs	r3, #1
 80061b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80061bc:	3c01      	subs	r4, #1
 80061be:	9313      	str	r3, [sp, #76]	; 0x4c
 80061c0:	e76f      	b.n	80060a2 <_dtoa_r+0x112>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e7b2      	b.n	800612c <_dtoa_r+0x19c>
 80061c6:	900f      	str	r0, [sp, #60]	; 0x3c
 80061c8:	e7b1      	b.n	800612e <_dtoa_r+0x19e>
 80061ca:	9b06      	ldr	r3, [sp, #24]
 80061cc:	eba3 030a 	sub.w	r3, r3, sl
 80061d0:	9306      	str	r3, [sp, #24]
 80061d2:	f1ca 0300 	rsb	r3, sl, #0
 80061d6:	930a      	str	r3, [sp, #40]	; 0x28
 80061d8:	2300      	movs	r3, #0
 80061da:	930e      	str	r3, [sp, #56]	; 0x38
 80061dc:	e7be      	b.n	800615c <_dtoa_r+0x1cc>
 80061de:	2300      	movs	r3, #0
 80061e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80061e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	dc58      	bgt.n	800629a <_dtoa_r+0x30a>
 80061e8:	f04f 0901 	mov.w	r9, #1
 80061ec:	464b      	mov	r3, r9
 80061ee:	f8cd 9020 	str.w	r9, [sp, #32]
 80061f2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80061f6:	2200      	movs	r2, #0
 80061f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80061fa:	6042      	str	r2, [r0, #4]
 80061fc:	2204      	movs	r2, #4
 80061fe:	f102 0614 	add.w	r6, r2, #20
 8006202:	429e      	cmp	r6, r3
 8006204:	6841      	ldr	r1, [r0, #4]
 8006206:	d94e      	bls.n	80062a6 <_dtoa_r+0x316>
 8006208:	4628      	mov	r0, r5
 800620a:	f000 fef3 	bl	8006ff4 <_Balloc>
 800620e:	9003      	str	r0, [sp, #12]
 8006210:	2800      	cmp	r0, #0
 8006212:	d14c      	bne.n	80062ae <_dtoa_r+0x31e>
 8006214:	4602      	mov	r2, r0
 8006216:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800621a:	4b17      	ldr	r3, [pc, #92]	; (8006278 <_dtoa_r+0x2e8>)
 800621c:	e6cc      	b.n	8005fb8 <_dtoa_r+0x28>
 800621e:	2301      	movs	r3, #1
 8006220:	e7de      	b.n	80061e0 <_dtoa_r+0x250>
 8006222:	2300      	movs	r3, #0
 8006224:	930b      	str	r3, [sp, #44]	; 0x2c
 8006226:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006228:	eb0a 0903 	add.w	r9, sl, r3
 800622c:	f109 0301 	add.w	r3, r9, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	9308      	str	r3, [sp, #32]
 8006234:	bfb8      	it	lt
 8006236:	2301      	movlt	r3, #1
 8006238:	e7dd      	b.n	80061f6 <_dtoa_r+0x266>
 800623a:	2301      	movs	r3, #1
 800623c:	e7f2      	b.n	8006224 <_dtoa_r+0x294>
 800623e:	bf00      	nop
 8006240:	636f4361 	.word	0x636f4361
 8006244:	3fd287a7 	.word	0x3fd287a7
 8006248:	8b60c8b3 	.word	0x8b60c8b3
 800624c:	3fc68a28 	.word	0x3fc68a28
 8006250:	509f79fb 	.word	0x509f79fb
 8006254:	3fd34413 	.word	0x3fd34413
 8006258:	08008415 	.word	0x08008415
 800625c:	0800842c 	.word	0x0800842c
 8006260:	7ff00000 	.word	0x7ff00000
 8006264:	08008411 	.word	0x08008411
 8006268:	08008408 	.word	0x08008408
 800626c:	080083e5 	.word	0x080083e5
 8006270:	3ff80000 	.word	0x3ff80000
 8006274:	08008580 	.word	0x08008580
 8006278:	08008487 	.word	0x08008487
 800627c:	2401      	movs	r4, #1
 800627e:	2300      	movs	r3, #0
 8006280:	940b      	str	r4, [sp, #44]	; 0x2c
 8006282:	9322      	str	r3, [sp, #136]	; 0x88
 8006284:	f04f 39ff 	mov.w	r9, #4294967295
 8006288:	2200      	movs	r2, #0
 800628a:	2312      	movs	r3, #18
 800628c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006290:	9223      	str	r2, [sp, #140]	; 0x8c
 8006292:	e7b0      	b.n	80061f6 <_dtoa_r+0x266>
 8006294:	2301      	movs	r3, #1
 8006296:	930b      	str	r3, [sp, #44]	; 0x2c
 8006298:	e7f4      	b.n	8006284 <_dtoa_r+0x2f4>
 800629a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800629e:	464b      	mov	r3, r9
 80062a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80062a4:	e7a7      	b.n	80061f6 <_dtoa_r+0x266>
 80062a6:	3101      	adds	r1, #1
 80062a8:	6041      	str	r1, [r0, #4]
 80062aa:	0052      	lsls	r2, r2, #1
 80062ac:	e7a7      	b.n	80061fe <_dtoa_r+0x26e>
 80062ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062b0:	9a03      	ldr	r2, [sp, #12]
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	9b08      	ldr	r3, [sp, #32]
 80062b6:	2b0e      	cmp	r3, #14
 80062b8:	f200 80a8 	bhi.w	800640c <_dtoa_r+0x47c>
 80062bc:	2c00      	cmp	r4, #0
 80062be:	f000 80a5 	beq.w	800640c <_dtoa_r+0x47c>
 80062c2:	f1ba 0f00 	cmp.w	sl, #0
 80062c6:	dd34      	ble.n	8006332 <_dtoa_r+0x3a2>
 80062c8:	4a9a      	ldr	r2, [pc, #616]	; (8006534 <_dtoa_r+0x5a4>)
 80062ca:	f00a 030f 	and.w	r3, sl, #15
 80062ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062d2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80062d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80062e2:	d016      	beq.n	8006312 <_dtoa_r+0x382>
 80062e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062e8:	4b93      	ldr	r3, [pc, #588]	; (8006538 <_dtoa_r+0x5a8>)
 80062ea:	2703      	movs	r7, #3
 80062ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062f0:	f7fa fad0 	bl	8000894 <__aeabi_ddiv>
 80062f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062f8:	f004 040f 	and.w	r4, r4, #15
 80062fc:	4e8e      	ldr	r6, [pc, #568]	; (8006538 <_dtoa_r+0x5a8>)
 80062fe:	b954      	cbnz	r4, 8006316 <_dtoa_r+0x386>
 8006300:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006308:	f7fa fac4 	bl	8000894 <__aeabi_ddiv>
 800630c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006310:	e029      	b.n	8006366 <_dtoa_r+0x3d6>
 8006312:	2702      	movs	r7, #2
 8006314:	e7f2      	b.n	80062fc <_dtoa_r+0x36c>
 8006316:	07e1      	lsls	r1, r4, #31
 8006318:	d508      	bpl.n	800632c <_dtoa_r+0x39c>
 800631a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800631e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006322:	f7fa f98d 	bl	8000640 <__aeabi_dmul>
 8006326:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800632a:	3701      	adds	r7, #1
 800632c:	1064      	asrs	r4, r4, #1
 800632e:	3608      	adds	r6, #8
 8006330:	e7e5      	b.n	80062fe <_dtoa_r+0x36e>
 8006332:	f000 80a5 	beq.w	8006480 <_dtoa_r+0x4f0>
 8006336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800633a:	f1ca 0400 	rsb	r4, sl, #0
 800633e:	4b7d      	ldr	r3, [pc, #500]	; (8006534 <_dtoa_r+0x5a4>)
 8006340:	f004 020f 	and.w	r2, r4, #15
 8006344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7fa f978 	bl	8000640 <__aeabi_dmul>
 8006350:	2702      	movs	r7, #2
 8006352:	2300      	movs	r3, #0
 8006354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006358:	4e77      	ldr	r6, [pc, #476]	; (8006538 <_dtoa_r+0x5a8>)
 800635a:	1124      	asrs	r4, r4, #4
 800635c:	2c00      	cmp	r4, #0
 800635e:	f040 8084 	bne.w	800646a <_dtoa_r+0x4da>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1d2      	bne.n	800630c <_dtoa_r+0x37c>
 8006366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 808b 	beq.w	8006484 <_dtoa_r+0x4f4>
 800636e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006372:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006376:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800637a:	2200      	movs	r2, #0
 800637c:	4b6f      	ldr	r3, [pc, #444]	; (800653c <_dtoa_r+0x5ac>)
 800637e:	f7fa fbd1 	bl	8000b24 <__aeabi_dcmplt>
 8006382:	2800      	cmp	r0, #0
 8006384:	d07e      	beq.n	8006484 <_dtoa_r+0x4f4>
 8006386:	9b08      	ldr	r3, [sp, #32]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d07b      	beq.n	8006484 <_dtoa_r+0x4f4>
 800638c:	f1b9 0f00 	cmp.w	r9, #0
 8006390:	dd38      	ble.n	8006404 <_dtoa_r+0x474>
 8006392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006396:	2200      	movs	r2, #0
 8006398:	4b69      	ldr	r3, [pc, #420]	; (8006540 <_dtoa_r+0x5b0>)
 800639a:	f7fa f951 	bl	8000640 <__aeabi_dmul>
 800639e:	464c      	mov	r4, r9
 80063a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063a4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80063a8:	3701      	adds	r7, #1
 80063aa:	4638      	mov	r0, r7
 80063ac:	f7fa f8de 	bl	800056c <__aeabi_i2d>
 80063b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063b4:	f7fa f944 	bl	8000640 <__aeabi_dmul>
 80063b8:	2200      	movs	r2, #0
 80063ba:	4b62      	ldr	r3, [pc, #392]	; (8006544 <_dtoa_r+0x5b4>)
 80063bc:	f7f9 ff8a 	bl	80002d4 <__adddf3>
 80063c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80063c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063c8:	9611      	str	r6, [sp, #68]	; 0x44
 80063ca:	2c00      	cmp	r4, #0
 80063cc:	d15d      	bne.n	800648a <_dtoa_r+0x4fa>
 80063ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063d2:	2200      	movs	r2, #0
 80063d4:	4b5c      	ldr	r3, [pc, #368]	; (8006548 <_dtoa_r+0x5b8>)
 80063d6:	f7f9 ff7b 	bl	80002d0 <__aeabi_dsub>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063e2:	4633      	mov	r3, r6
 80063e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063e6:	f7fa fbbb 	bl	8000b60 <__aeabi_dcmpgt>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	f040 829c 	bne.w	8006928 <_dtoa_r+0x998>
 80063f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80063fa:	f7fa fb93 	bl	8000b24 <__aeabi_dcmplt>
 80063fe:	2800      	cmp	r0, #0
 8006400:	f040 8290 	bne.w	8006924 <_dtoa_r+0x994>
 8006404:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006408:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800640c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800640e:	2b00      	cmp	r3, #0
 8006410:	f2c0 8152 	blt.w	80066b8 <_dtoa_r+0x728>
 8006414:	f1ba 0f0e 	cmp.w	sl, #14
 8006418:	f300 814e 	bgt.w	80066b8 <_dtoa_r+0x728>
 800641c:	4b45      	ldr	r3, [pc, #276]	; (8006534 <_dtoa_r+0x5a4>)
 800641e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006422:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006426:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800642a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800642c:	2b00      	cmp	r3, #0
 800642e:	f280 80db 	bge.w	80065e8 <_dtoa_r+0x658>
 8006432:	9b08      	ldr	r3, [sp, #32]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f300 80d7 	bgt.w	80065e8 <_dtoa_r+0x658>
 800643a:	f040 8272 	bne.w	8006922 <_dtoa_r+0x992>
 800643e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006442:	2200      	movs	r2, #0
 8006444:	4b40      	ldr	r3, [pc, #256]	; (8006548 <_dtoa_r+0x5b8>)
 8006446:	f7fa f8fb 	bl	8000640 <__aeabi_dmul>
 800644a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800644e:	f7fa fb7d 	bl	8000b4c <__aeabi_dcmpge>
 8006452:	9c08      	ldr	r4, [sp, #32]
 8006454:	4626      	mov	r6, r4
 8006456:	2800      	cmp	r0, #0
 8006458:	f040 8248 	bne.w	80068ec <_dtoa_r+0x95c>
 800645c:	2331      	movs	r3, #49	; 0x31
 800645e:	9f03      	ldr	r7, [sp, #12]
 8006460:	f10a 0a01 	add.w	sl, sl, #1
 8006464:	f807 3b01 	strb.w	r3, [r7], #1
 8006468:	e244      	b.n	80068f4 <_dtoa_r+0x964>
 800646a:	07e2      	lsls	r2, r4, #31
 800646c:	d505      	bpl.n	800647a <_dtoa_r+0x4ea>
 800646e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006472:	f7fa f8e5 	bl	8000640 <__aeabi_dmul>
 8006476:	2301      	movs	r3, #1
 8006478:	3701      	adds	r7, #1
 800647a:	1064      	asrs	r4, r4, #1
 800647c:	3608      	adds	r6, #8
 800647e:	e76d      	b.n	800635c <_dtoa_r+0x3cc>
 8006480:	2702      	movs	r7, #2
 8006482:	e770      	b.n	8006366 <_dtoa_r+0x3d6>
 8006484:	46d0      	mov	r8, sl
 8006486:	9c08      	ldr	r4, [sp, #32]
 8006488:	e78f      	b.n	80063aa <_dtoa_r+0x41a>
 800648a:	9903      	ldr	r1, [sp, #12]
 800648c:	4b29      	ldr	r3, [pc, #164]	; (8006534 <_dtoa_r+0x5a4>)
 800648e:	4421      	add	r1, r4
 8006490:	9112      	str	r1, [sp, #72]	; 0x48
 8006492:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006494:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006498:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800649c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064a0:	2900      	cmp	r1, #0
 80064a2:	d055      	beq.n	8006550 <_dtoa_r+0x5c0>
 80064a4:	2000      	movs	r0, #0
 80064a6:	4929      	ldr	r1, [pc, #164]	; (800654c <_dtoa_r+0x5bc>)
 80064a8:	f7fa f9f4 	bl	8000894 <__aeabi_ddiv>
 80064ac:	463b      	mov	r3, r7
 80064ae:	4632      	mov	r2, r6
 80064b0:	f7f9 ff0e 	bl	80002d0 <__aeabi_dsub>
 80064b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064b8:	9f03      	ldr	r7, [sp, #12]
 80064ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064be:	f7fa fb6f 	bl	8000ba0 <__aeabi_d2iz>
 80064c2:	4604      	mov	r4, r0
 80064c4:	f7fa f852 	bl	800056c <__aeabi_i2d>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064d0:	f7f9 fefe 	bl	80002d0 <__aeabi_dsub>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	3430      	adds	r4, #48	; 0x30
 80064da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064e2:	f807 4b01 	strb.w	r4, [r7], #1
 80064e6:	f7fa fb1d 	bl	8000b24 <__aeabi_dcmplt>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d174      	bne.n	80065d8 <_dtoa_r+0x648>
 80064ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064f2:	2000      	movs	r0, #0
 80064f4:	4911      	ldr	r1, [pc, #68]	; (800653c <_dtoa_r+0x5ac>)
 80064f6:	f7f9 feeb 	bl	80002d0 <__aeabi_dsub>
 80064fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064fe:	f7fa fb11 	bl	8000b24 <__aeabi_dcmplt>
 8006502:	2800      	cmp	r0, #0
 8006504:	f040 80b7 	bne.w	8006676 <_dtoa_r+0x6e6>
 8006508:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800650a:	429f      	cmp	r7, r3
 800650c:	f43f af7a 	beq.w	8006404 <_dtoa_r+0x474>
 8006510:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006514:	2200      	movs	r2, #0
 8006516:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <_dtoa_r+0x5b0>)
 8006518:	f7fa f892 	bl	8000640 <__aeabi_dmul>
 800651c:	2200      	movs	r2, #0
 800651e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006526:	4b06      	ldr	r3, [pc, #24]	; (8006540 <_dtoa_r+0x5b0>)
 8006528:	f7fa f88a 	bl	8000640 <__aeabi_dmul>
 800652c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006530:	e7c3      	b.n	80064ba <_dtoa_r+0x52a>
 8006532:	bf00      	nop
 8006534:	08008580 	.word	0x08008580
 8006538:	08008558 	.word	0x08008558
 800653c:	3ff00000 	.word	0x3ff00000
 8006540:	40240000 	.word	0x40240000
 8006544:	401c0000 	.word	0x401c0000
 8006548:	40140000 	.word	0x40140000
 800654c:	3fe00000 	.word	0x3fe00000
 8006550:	4630      	mov	r0, r6
 8006552:	4639      	mov	r1, r7
 8006554:	f7fa f874 	bl	8000640 <__aeabi_dmul>
 8006558:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800655a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800655e:	9c03      	ldr	r4, [sp, #12]
 8006560:	9314      	str	r3, [sp, #80]	; 0x50
 8006562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006566:	f7fa fb1b 	bl	8000ba0 <__aeabi_d2iz>
 800656a:	9015      	str	r0, [sp, #84]	; 0x54
 800656c:	f7f9 fffe 	bl	800056c <__aeabi_i2d>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006578:	f7f9 feaa 	bl	80002d0 <__aeabi_dsub>
 800657c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800657e:	4606      	mov	r6, r0
 8006580:	3330      	adds	r3, #48	; 0x30
 8006582:	f804 3b01 	strb.w	r3, [r4], #1
 8006586:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006588:	460f      	mov	r7, r1
 800658a:	429c      	cmp	r4, r3
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	d124      	bne.n	80065dc <_dtoa_r+0x64c>
 8006592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006596:	4bb0      	ldr	r3, [pc, #704]	; (8006858 <_dtoa_r+0x8c8>)
 8006598:	f7f9 fe9c 	bl	80002d4 <__adddf3>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4630      	mov	r0, r6
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7fa fadc 	bl	8000b60 <__aeabi_dcmpgt>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d163      	bne.n	8006674 <_dtoa_r+0x6e4>
 80065ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065b0:	2000      	movs	r0, #0
 80065b2:	49a9      	ldr	r1, [pc, #676]	; (8006858 <_dtoa_r+0x8c8>)
 80065b4:	f7f9 fe8c 	bl	80002d0 <__aeabi_dsub>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7fa fab0 	bl	8000b24 <__aeabi_dcmplt>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	f43f af1d 	beq.w	8006404 <_dtoa_r+0x474>
 80065ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065cc:	1e7b      	subs	r3, r7, #1
 80065ce:	9314      	str	r3, [sp, #80]	; 0x50
 80065d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80065d4:	2b30      	cmp	r3, #48	; 0x30
 80065d6:	d0f8      	beq.n	80065ca <_dtoa_r+0x63a>
 80065d8:	46c2      	mov	sl, r8
 80065da:	e03b      	b.n	8006654 <_dtoa_r+0x6c4>
 80065dc:	4b9f      	ldr	r3, [pc, #636]	; (800685c <_dtoa_r+0x8cc>)
 80065de:	f7fa f82f 	bl	8000640 <__aeabi_dmul>
 80065e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065e6:	e7bc      	b.n	8006562 <_dtoa_r+0x5d2>
 80065e8:	9f03      	ldr	r7, [sp, #12]
 80065ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80065ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065f2:	4640      	mov	r0, r8
 80065f4:	4649      	mov	r1, r9
 80065f6:	f7fa f94d 	bl	8000894 <__aeabi_ddiv>
 80065fa:	f7fa fad1 	bl	8000ba0 <__aeabi_d2iz>
 80065fe:	4604      	mov	r4, r0
 8006600:	f7f9 ffb4 	bl	800056c <__aeabi_i2d>
 8006604:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006608:	f7fa f81a 	bl	8000640 <__aeabi_dmul>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4640      	mov	r0, r8
 8006612:	4649      	mov	r1, r9
 8006614:	f7f9 fe5c 	bl	80002d0 <__aeabi_dsub>
 8006618:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800661c:	f807 6b01 	strb.w	r6, [r7], #1
 8006620:	9e03      	ldr	r6, [sp, #12]
 8006622:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006626:	1bbe      	subs	r6, r7, r6
 8006628:	45b4      	cmp	ip, r6
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	d136      	bne.n	800669e <_dtoa_r+0x70e>
 8006630:	f7f9 fe50 	bl	80002d4 <__adddf3>
 8006634:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006638:	4680      	mov	r8, r0
 800663a:	4689      	mov	r9, r1
 800663c:	f7fa fa90 	bl	8000b60 <__aeabi_dcmpgt>
 8006640:	bb58      	cbnz	r0, 800669a <_dtoa_r+0x70a>
 8006642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006646:	4640      	mov	r0, r8
 8006648:	4649      	mov	r1, r9
 800664a:	f7fa fa61 	bl	8000b10 <__aeabi_dcmpeq>
 800664e:	b108      	cbz	r0, 8006654 <_dtoa_r+0x6c4>
 8006650:	07e1      	lsls	r1, r4, #31
 8006652:	d422      	bmi.n	800669a <_dtoa_r+0x70a>
 8006654:	4628      	mov	r0, r5
 8006656:	4659      	mov	r1, fp
 8006658:	f000 fd0c 	bl	8007074 <_Bfree>
 800665c:	2300      	movs	r3, #0
 800665e:	703b      	strb	r3, [r7, #0]
 8006660:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006662:	f10a 0001 	add.w	r0, sl, #1
 8006666:	6018      	str	r0, [r3, #0]
 8006668:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800666a:	2b00      	cmp	r3, #0
 800666c:	f43f acde 	beq.w	800602c <_dtoa_r+0x9c>
 8006670:	601f      	str	r7, [r3, #0]
 8006672:	e4db      	b.n	800602c <_dtoa_r+0x9c>
 8006674:	4627      	mov	r7, r4
 8006676:	463b      	mov	r3, r7
 8006678:	461f      	mov	r7, r3
 800667a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800667e:	2a39      	cmp	r2, #57	; 0x39
 8006680:	d107      	bne.n	8006692 <_dtoa_r+0x702>
 8006682:	9a03      	ldr	r2, [sp, #12]
 8006684:	429a      	cmp	r2, r3
 8006686:	d1f7      	bne.n	8006678 <_dtoa_r+0x6e8>
 8006688:	2230      	movs	r2, #48	; 0x30
 800668a:	9903      	ldr	r1, [sp, #12]
 800668c:	f108 0801 	add.w	r8, r8, #1
 8006690:	700a      	strb	r2, [r1, #0]
 8006692:	781a      	ldrb	r2, [r3, #0]
 8006694:	3201      	adds	r2, #1
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e79e      	b.n	80065d8 <_dtoa_r+0x648>
 800669a:	46d0      	mov	r8, sl
 800669c:	e7eb      	b.n	8006676 <_dtoa_r+0x6e6>
 800669e:	2200      	movs	r2, #0
 80066a0:	4b6e      	ldr	r3, [pc, #440]	; (800685c <_dtoa_r+0x8cc>)
 80066a2:	f7f9 ffcd 	bl	8000640 <__aeabi_dmul>
 80066a6:	2200      	movs	r2, #0
 80066a8:	2300      	movs	r3, #0
 80066aa:	4680      	mov	r8, r0
 80066ac:	4689      	mov	r9, r1
 80066ae:	f7fa fa2f 	bl	8000b10 <__aeabi_dcmpeq>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d09b      	beq.n	80065ee <_dtoa_r+0x65e>
 80066b6:	e7cd      	b.n	8006654 <_dtoa_r+0x6c4>
 80066b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066ba:	2a00      	cmp	r2, #0
 80066bc:	f000 80d0 	beq.w	8006860 <_dtoa_r+0x8d0>
 80066c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066c2:	2a01      	cmp	r2, #1
 80066c4:	f300 80ae 	bgt.w	8006824 <_dtoa_r+0x894>
 80066c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	f000 80a6 	beq.w	800681c <_dtoa_r+0x88c>
 80066d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066d6:	9f06      	ldr	r7, [sp, #24]
 80066d8:	9a06      	ldr	r2, [sp, #24]
 80066da:	2101      	movs	r1, #1
 80066dc:	441a      	add	r2, r3
 80066de:	9206      	str	r2, [sp, #24]
 80066e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e2:	4628      	mov	r0, r5
 80066e4:	441a      	add	r2, r3
 80066e6:	9209      	str	r2, [sp, #36]	; 0x24
 80066e8:	f000 fd7a 	bl	80071e0 <__i2b>
 80066ec:	4606      	mov	r6, r0
 80066ee:	2f00      	cmp	r7, #0
 80066f0:	dd0c      	ble.n	800670c <_dtoa_r+0x77c>
 80066f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dd09      	ble.n	800670c <_dtoa_r+0x77c>
 80066f8:	42bb      	cmp	r3, r7
 80066fa:	bfa8      	it	ge
 80066fc:	463b      	movge	r3, r7
 80066fe:	9a06      	ldr	r2, [sp, #24]
 8006700:	1aff      	subs	r7, r7, r3
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	9206      	str	r2, [sp, #24]
 8006706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	9309      	str	r3, [sp, #36]	; 0x24
 800670c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670e:	b1f3      	cbz	r3, 800674e <_dtoa_r+0x7be>
 8006710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80a8 	beq.w	8006868 <_dtoa_r+0x8d8>
 8006718:	2c00      	cmp	r4, #0
 800671a:	dd10      	ble.n	800673e <_dtoa_r+0x7ae>
 800671c:	4631      	mov	r1, r6
 800671e:	4622      	mov	r2, r4
 8006720:	4628      	mov	r0, r5
 8006722:	f000 fe1b 	bl	800735c <__pow5mult>
 8006726:	465a      	mov	r2, fp
 8006728:	4601      	mov	r1, r0
 800672a:	4606      	mov	r6, r0
 800672c:	4628      	mov	r0, r5
 800672e:	f000 fd6d 	bl	800720c <__multiply>
 8006732:	4680      	mov	r8, r0
 8006734:	4659      	mov	r1, fp
 8006736:	4628      	mov	r0, r5
 8006738:	f000 fc9c 	bl	8007074 <_Bfree>
 800673c:	46c3      	mov	fp, r8
 800673e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006740:	1b1a      	subs	r2, r3, r4
 8006742:	d004      	beq.n	800674e <_dtoa_r+0x7be>
 8006744:	4659      	mov	r1, fp
 8006746:	4628      	mov	r0, r5
 8006748:	f000 fe08 	bl	800735c <__pow5mult>
 800674c:	4683      	mov	fp, r0
 800674e:	2101      	movs	r1, #1
 8006750:	4628      	mov	r0, r5
 8006752:	f000 fd45 	bl	80071e0 <__i2b>
 8006756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006758:	4604      	mov	r4, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	f340 8086 	ble.w	800686c <_dtoa_r+0x8dc>
 8006760:	461a      	mov	r2, r3
 8006762:	4601      	mov	r1, r0
 8006764:	4628      	mov	r0, r5
 8006766:	f000 fdf9 	bl	800735c <__pow5mult>
 800676a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800676c:	4604      	mov	r4, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	dd7f      	ble.n	8006872 <_dtoa_r+0x8e2>
 8006772:	f04f 0800 	mov.w	r8, #0
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800677c:	6918      	ldr	r0, [r3, #16]
 800677e:	f000 fce1 	bl	8007144 <__hi0bits>
 8006782:	f1c0 0020 	rsb	r0, r0, #32
 8006786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006788:	4418      	add	r0, r3
 800678a:	f010 001f 	ands.w	r0, r0, #31
 800678e:	f000 8092 	beq.w	80068b6 <_dtoa_r+0x926>
 8006792:	f1c0 0320 	rsb	r3, r0, #32
 8006796:	2b04      	cmp	r3, #4
 8006798:	f340 808a 	ble.w	80068b0 <_dtoa_r+0x920>
 800679c:	f1c0 001c 	rsb	r0, r0, #28
 80067a0:	9b06      	ldr	r3, [sp, #24]
 80067a2:	4407      	add	r7, r0
 80067a4:	4403      	add	r3, r0
 80067a6:	9306      	str	r3, [sp, #24]
 80067a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067aa:	4403      	add	r3, r0
 80067ac:	9309      	str	r3, [sp, #36]	; 0x24
 80067ae:	9b06      	ldr	r3, [sp, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dd05      	ble.n	80067c0 <_dtoa_r+0x830>
 80067b4:	4659      	mov	r1, fp
 80067b6:	461a      	mov	r2, r3
 80067b8:	4628      	mov	r0, r5
 80067ba:	f000 fe29 	bl	8007410 <__lshift>
 80067be:	4683      	mov	fp, r0
 80067c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dd05      	ble.n	80067d2 <_dtoa_r+0x842>
 80067c6:	4621      	mov	r1, r4
 80067c8:	461a      	mov	r2, r3
 80067ca:	4628      	mov	r0, r5
 80067cc:	f000 fe20 	bl	8007410 <__lshift>
 80067d0:	4604      	mov	r4, r0
 80067d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d070      	beq.n	80068ba <_dtoa_r+0x92a>
 80067d8:	4621      	mov	r1, r4
 80067da:	4658      	mov	r0, fp
 80067dc:	f000 fe88 	bl	80074f0 <__mcmp>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	da6a      	bge.n	80068ba <_dtoa_r+0x92a>
 80067e4:	2300      	movs	r3, #0
 80067e6:	4659      	mov	r1, fp
 80067e8:	220a      	movs	r2, #10
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 fc64 	bl	80070b8 <__multadd>
 80067f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067f2:	4683      	mov	fp, r0
 80067f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 8194 	beq.w	8006b26 <_dtoa_r+0xb96>
 80067fe:	4631      	mov	r1, r6
 8006800:	2300      	movs	r3, #0
 8006802:	220a      	movs	r2, #10
 8006804:	4628      	mov	r0, r5
 8006806:	f000 fc57 	bl	80070b8 <__multadd>
 800680a:	f1b9 0f00 	cmp.w	r9, #0
 800680e:	4606      	mov	r6, r0
 8006810:	f300 8093 	bgt.w	800693a <_dtoa_r+0x9aa>
 8006814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006816:	2b02      	cmp	r3, #2
 8006818:	dc57      	bgt.n	80068ca <_dtoa_r+0x93a>
 800681a:	e08e      	b.n	800693a <_dtoa_r+0x9aa>
 800681c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800681e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006822:	e757      	b.n	80066d4 <_dtoa_r+0x744>
 8006824:	9b08      	ldr	r3, [sp, #32]
 8006826:	1e5c      	subs	r4, r3, #1
 8006828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682a:	42a3      	cmp	r3, r4
 800682c:	bfb7      	itett	lt
 800682e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006830:	1b1c      	subge	r4, r3, r4
 8006832:	1ae2      	sublt	r2, r4, r3
 8006834:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006836:	bfbe      	ittt	lt
 8006838:	940a      	strlt	r4, [sp, #40]	; 0x28
 800683a:	189b      	addlt	r3, r3, r2
 800683c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800683e:	9b08      	ldr	r3, [sp, #32]
 8006840:	bfb8      	it	lt
 8006842:	2400      	movlt	r4, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	bfbb      	ittet	lt
 8006848:	9b06      	ldrlt	r3, [sp, #24]
 800684a:	9a08      	ldrlt	r2, [sp, #32]
 800684c:	9f06      	ldrge	r7, [sp, #24]
 800684e:	1a9f      	sublt	r7, r3, r2
 8006850:	bfac      	ite	ge
 8006852:	9b08      	ldrge	r3, [sp, #32]
 8006854:	2300      	movlt	r3, #0
 8006856:	e73f      	b.n	80066d8 <_dtoa_r+0x748>
 8006858:	3fe00000 	.word	0x3fe00000
 800685c:	40240000 	.word	0x40240000
 8006860:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006862:	9f06      	ldr	r7, [sp, #24]
 8006864:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006866:	e742      	b.n	80066ee <_dtoa_r+0x75e>
 8006868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800686a:	e76b      	b.n	8006744 <_dtoa_r+0x7b4>
 800686c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800686e:	2b01      	cmp	r3, #1
 8006870:	dc19      	bgt.n	80068a6 <_dtoa_r+0x916>
 8006872:	9b04      	ldr	r3, [sp, #16]
 8006874:	b9bb      	cbnz	r3, 80068a6 <_dtoa_r+0x916>
 8006876:	9b05      	ldr	r3, [sp, #20]
 8006878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800687c:	b99b      	cbnz	r3, 80068a6 <_dtoa_r+0x916>
 800687e:	9b05      	ldr	r3, [sp, #20]
 8006880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006884:	0d1b      	lsrs	r3, r3, #20
 8006886:	051b      	lsls	r3, r3, #20
 8006888:	b183      	cbz	r3, 80068ac <_dtoa_r+0x91c>
 800688a:	f04f 0801 	mov.w	r8, #1
 800688e:	9b06      	ldr	r3, [sp, #24]
 8006890:	3301      	adds	r3, #1
 8006892:	9306      	str	r3, [sp, #24]
 8006894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006896:	3301      	adds	r3, #1
 8006898:	9309      	str	r3, [sp, #36]	; 0x24
 800689a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	f47f af6a 	bne.w	8006776 <_dtoa_r+0x7e6>
 80068a2:	2001      	movs	r0, #1
 80068a4:	e76f      	b.n	8006786 <_dtoa_r+0x7f6>
 80068a6:	f04f 0800 	mov.w	r8, #0
 80068aa:	e7f6      	b.n	800689a <_dtoa_r+0x90a>
 80068ac:	4698      	mov	r8, r3
 80068ae:	e7f4      	b.n	800689a <_dtoa_r+0x90a>
 80068b0:	f43f af7d 	beq.w	80067ae <_dtoa_r+0x81e>
 80068b4:	4618      	mov	r0, r3
 80068b6:	301c      	adds	r0, #28
 80068b8:	e772      	b.n	80067a0 <_dtoa_r+0x810>
 80068ba:	9b08      	ldr	r3, [sp, #32]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	dc36      	bgt.n	800692e <_dtoa_r+0x99e>
 80068c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	dd33      	ble.n	800692e <_dtoa_r+0x99e>
 80068c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068ca:	f1b9 0f00 	cmp.w	r9, #0
 80068ce:	d10d      	bne.n	80068ec <_dtoa_r+0x95c>
 80068d0:	4621      	mov	r1, r4
 80068d2:	464b      	mov	r3, r9
 80068d4:	2205      	movs	r2, #5
 80068d6:	4628      	mov	r0, r5
 80068d8:	f000 fbee 	bl	80070b8 <__multadd>
 80068dc:	4601      	mov	r1, r0
 80068de:	4604      	mov	r4, r0
 80068e0:	4658      	mov	r0, fp
 80068e2:	f000 fe05 	bl	80074f0 <__mcmp>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f73f adb8 	bgt.w	800645c <_dtoa_r+0x4cc>
 80068ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068ee:	9f03      	ldr	r7, [sp, #12]
 80068f0:	ea6f 0a03 	mvn.w	sl, r3
 80068f4:	f04f 0800 	mov.w	r8, #0
 80068f8:	4621      	mov	r1, r4
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 fbba 	bl	8007074 <_Bfree>
 8006900:	2e00      	cmp	r6, #0
 8006902:	f43f aea7 	beq.w	8006654 <_dtoa_r+0x6c4>
 8006906:	f1b8 0f00 	cmp.w	r8, #0
 800690a:	d005      	beq.n	8006918 <_dtoa_r+0x988>
 800690c:	45b0      	cmp	r8, r6
 800690e:	d003      	beq.n	8006918 <_dtoa_r+0x988>
 8006910:	4641      	mov	r1, r8
 8006912:	4628      	mov	r0, r5
 8006914:	f000 fbae 	bl	8007074 <_Bfree>
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	f000 fbaa 	bl	8007074 <_Bfree>
 8006920:	e698      	b.n	8006654 <_dtoa_r+0x6c4>
 8006922:	2400      	movs	r4, #0
 8006924:	4626      	mov	r6, r4
 8006926:	e7e1      	b.n	80068ec <_dtoa_r+0x95c>
 8006928:	46c2      	mov	sl, r8
 800692a:	4626      	mov	r6, r4
 800692c:	e596      	b.n	800645c <_dtoa_r+0x4cc>
 800692e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80fd 	beq.w	8006b34 <_dtoa_r+0xba4>
 800693a:	2f00      	cmp	r7, #0
 800693c:	dd05      	ble.n	800694a <_dtoa_r+0x9ba>
 800693e:	4631      	mov	r1, r6
 8006940:	463a      	mov	r2, r7
 8006942:	4628      	mov	r0, r5
 8006944:	f000 fd64 	bl	8007410 <__lshift>
 8006948:	4606      	mov	r6, r0
 800694a:	f1b8 0f00 	cmp.w	r8, #0
 800694e:	d05c      	beq.n	8006a0a <_dtoa_r+0xa7a>
 8006950:	4628      	mov	r0, r5
 8006952:	6871      	ldr	r1, [r6, #4]
 8006954:	f000 fb4e 	bl	8006ff4 <_Balloc>
 8006958:	4607      	mov	r7, r0
 800695a:	b928      	cbnz	r0, 8006968 <_dtoa_r+0x9d8>
 800695c:	4602      	mov	r2, r0
 800695e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006962:	4b7f      	ldr	r3, [pc, #508]	; (8006b60 <_dtoa_r+0xbd0>)
 8006964:	f7ff bb28 	b.w	8005fb8 <_dtoa_r+0x28>
 8006968:	6932      	ldr	r2, [r6, #16]
 800696a:	f106 010c 	add.w	r1, r6, #12
 800696e:	3202      	adds	r2, #2
 8006970:	0092      	lsls	r2, r2, #2
 8006972:	300c      	adds	r0, #12
 8006974:	f000 fb30 	bl	8006fd8 <memcpy>
 8006978:	2201      	movs	r2, #1
 800697a:	4639      	mov	r1, r7
 800697c:	4628      	mov	r0, r5
 800697e:	f000 fd47 	bl	8007410 <__lshift>
 8006982:	46b0      	mov	r8, r6
 8006984:	4606      	mov	r6, r0
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	9308      	str	r3, [sp, #32]
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	444b      	add	r3, r9
 8006990:	930a      	str	r3, [sp, #40]	; 0x28
 8006992:	9b04      	ldr	r3, [sp, #16]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	9309      	str	r3, [sp, #36]	; 0x24
 800699a:	9b08      	ldr	r3, [sp, #32]
 800699c:	4621      	mov	r1, r4
 800699e:	3b01      	subs	r3, #1
 80069a0:	4658      	mov	r0, fp
 80069a2:	9304      	str	r3, [sp, #16]
 80069a4:	f7ff fa66 	bl	8005e74 <quorem>
 80069a8:	4603      	mov	r3, r0
 80069aa:	4641      	mov	r1, r8
 80069ac:	3330      	adds	r3, #48	; 0x30
 80069ae:	9006      	str	r0, [sp, #24]
 80069b0:	4658      	mov	r0, fp
 80069b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80069b4:	f000 fd9c 	bl	80074f0 <__mcmp>
 80069b8:	4632      	mov	r2, r6
 80069ba:	4681      	mov	r9, r0
 80069bc:	4621      	mov	r1, r4
 80069be:	4628      	mov	r0, r5
 80069c0:	f000 fdb2 	bl	8007528 <__mdiff>
 80069c4:	68c2      	ldr	r2, [r0, #12]
 80069c6:	4607      	mov	r7, r0
 80069c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ca:	bb02      	cbnz	r2, 8006a0e <_dtoa_r+0xa7e>
 80069cc:	4601      	mov	r1, r0
 80069ce:	4658      	mov	r0, fp
 80069d0:	f000 fd8e 	bl	80074f0 <__mcmp>
 80069d4:	4602      	mov	r2, r0
 80069d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d8:	4639      	mov	r1, r7
 80069da:	4628      	mov	r0, r5
 80069dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80069e0:	f000 fb48 	bl	8007074 <_Bfree>
 80069e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069e8:	9f08      	ldr	r7, [sp, #32]
 80069ea:	ea43 0102 	orr.w	r1, r3, r2
 80069ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f0:	430b      	orrs	r3, r1
 80069f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f4:	d10d      	bne.n	8006a12 <_dtoa_r+0xa82>
 80069f6:	2b39      	cmp	r3, #57	; 0x39
 80069f8:	d029      	beq.n	8006a4e <_dtoa_r+0xabe>
 80069fa:	f1b9 0f00 	cmp.w	r9, #0
 80069fe:	dd01      	ble.n	8006a04 <_dtoa_r+0xa74>
 8006a00:	9b06      	ldr	r3, [sp, #24]
 8006a02:	3331      	adds	r3, #49	; 0x31
 8006a04:	9a04      	ldr	r2, [sp, #16]
 8006a06:	7013      	strb	r3, [r2, #0]
 8006a08:	e776      	b.n	80068f8 <_dtoa_r+0x968>
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	e7b9      	b.n	8006982 <_dtoa_r+0x9f2>
 8006a0e:	2201      	movs	r2, #1
 8006a10:	e7e2      	b.n	80069d8 <_dtoa_r+0xa48>
 8006a12:	f1b9 0f00 	cmp.w	r9, #0
 8006a16:	db06      	blt.n	8006a26 <_dtoa_r+0xa96>
 8006a18:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006a1a:	ea41 0909 	orr.w	r9, r1, r9
 8006a1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a20:	ea59 0101 	orrs.w	r1, r9, r1
 8006a24:	d120      	bne.n	8006a68 <_dtoa_r+0xad8>
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	ddec      	ble.n	8006a04 <_dtoa_r+0xa74>
 8006a2a:	4659      	mov	r1, fp
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	4628      	mov	r0, r5
 8006a30:	9308      	str	r3, [sp, #32]
 8006a32:	f000 fced 	bl	8007410 <__lshift>
 8006a36:	4621      	mov	r1, r4
 8006a38:	4683      	mov	fp, r0
 8006a3a:	f000 fd59 	bl	80074f0 <__mcmp>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	9b08      	ldr	r3, [sp, #32]
 8006a42:	dc02      	bgt.n	8006a4a <_dtoa_r+0xaba>
 8006a44:	d1de      	bne.n	8006a04 <_dtoa_r+0xa74>
 8006a46:	07da      	lsls	r2, r3, #31
 8006a48:	d5dc      	bpl.n	8006a04 <_dtoa_r+0xa74>
 8006a4a:	2b39      	cmp	r3, #57	; 0x39
 8006a4c:	d1d8      	bne.n	8006a00 <_dtoa_r+0xa70>
 8006a4e:	2339      	movs	r3, #57	; 0x39
 8006a50:	9a04      	ldr	r2, [sp, #16]
 8006a52:	7013      	strb	r3, [r2, #0]
 8006a54:	463b      	mov	r3, r7
 8006a56:	461f      	mov	r7, r3
 8006a58:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	2a39      	cmp	r2, #57	; 0x39
 8006a60:	d050      	beq.n	8006b04 <_dtoa_r+0xb74>
 8006a62:	3201      	adds	r2, #1
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e747      	b.n	80068f8 <_dtoa_r+0x968>
 8006a68:	2a00      	cmp	r2, #0
 8006a6a:	dd03      	ble.n	8006a74 <_dtoa_r+0xae4>
 8006a6c:	2b39      	cmp	r3, #57	; 0x39
 8006a6e:	d0ee      	beq.n	8006a4e <_dtoa_r+0xabe>
 8006a70:	3301      	adds	r3, #1
 8006a72:	e7c7      	b.n	8006a04 <_dtoa_r+0xa74>
 8006a74:	9a08      	ldr	r2, [sp, #32]
 8006a76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a78:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a7c:	428a      	cmp	r2, r1
 8006a7e:	d02a      	beq.n	8006ad6 <_dtoa_r+0xb46>
 8006a80:	4659      	mov	r1, fp
 8006a82:	2300      	movs	r3, #0
 8006a84:	220a      	movs	r2, #10
 8006a86:	4628      	mov	r0, r5
 8006a88:	f000 fb16 	bl	80070b8 <__multadd>
 8006a8c:	45b0      	cmp	r8, r6
 8006a8e:	4683      	mov	fp, r0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	f04f 020a 	mov.w	r2, #10
 8006a98:	4641      	mov	r1, r8
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	d107      	bne.n	8006aae <_dtoa_r+0xb1e>
 8006a9e:	f000 fb0b 	bl	80070b8 <__multadd>
 8006aa2:	4680      	mov	r8, r0
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	9b08      	ldr	r3, [sp, #32]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	9308      	str	r3, [sp, #32]
 8006aac:	e775      	b.n	800699a <_dtoa_r+0xa0a>
 8006aae:	f000 fb03 	bl	80070b8 <__multadd>
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	220a      	movs	r2, #10
 8006aba:	4628      	mov	r0, r5
 8006abc:	f000 fafc 	bl	80070b8 <__multadd>
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	e7f0      	b.n	8006aa6 <_dtoa_r+0xb16>
 8006ac4:	f1b9 0f00 	cmp.w	r9, #0
 8006ac8:	bfcc      	ite	gt
 8006aca:	464f      	movgt	r7, r9
 8006acc:	2701      	movle	r7, #1
 8006ace:	f04f 0800 	mov.w	r8, #0
 8006ad2:	9a03      	ldr	r2, [sp, #12]
 8006ad4:	4417      	add	r7, r2
 8006ad6:	4659      	mov	r1, fp
 8006ad8:	2201      	movs	r2, #1
 8006ada:	4628      	mov	r0, r5
 8006adc:	9308      	str	r3, [sp, #32]
 8006ade:	f000 fc97 	bl	8007410 <__lshift>
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4683      	mov	fp, r0
 8006ae6:	f000 fd03 	bl	80074f0 <__mcmp>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	dcb2      	bgt.n	8006a54 <_dtoa_r+0xac4>
 8006aee:	d102      	bne.n	8006af6 <_dtoa_r+0xb66>
 8006af0:	9b08      	ldr	r3, [sp, #32]
 8006af2:	07db      	lsls	r3, r3, #31
 8006af4:	d4ae      	bmi.n	8006a54 <_dtoa_r+0xac4>
 8006af6:	463b      	mov	r3, r7
 8006af8:	461f      	mov	r7, r3
 8006afa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006afe:	2a30      	cmp	r2, #48	; 0x30
 8006b00:	d0fa      	beq.n	8006af8 <_dtoa_r+0xb68>
 8006b02:	e6f9      	b.n	80068f8 <_dtoa_r+0x968>
 8006b04:	9a03      	ldr	r2, [sp, #12]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d1a5      	bne.n	8006a56 <_dtoa_r+0xac6>
 8006b0a:	2331      	movs	r3, #49	; 0x31
 8006b0c:	f10a 0a01 	add.w	sl, sl, #1
 8006b10:	e779      	b.n	8006a06 <_dtoa_r+0xa76>
 8006b12:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <_dtoa_r+0xbd4>)
 8006b14:	f7ff baa8 	b.w	8006068 <_dtoa_r+0xd8>
 8006b18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f47f aa81 	bne.w	8006022 <_dtoa_r+0x92>
 8006b20:	4b11      	ldr	r3, [pc, #68]	; (8006b68 <_dtoa_r+0xbd8>)
 8006b22:	f7ff baa1 	b.w	8006068 <_dtoa_r+0xd8>
 8006b26:	f1b9 0f00 	cmp.w	r9, #0
 8006b2a:	dc03      	bgt.n	8006b34 <_dtoa_r+0xba4>
 8006b2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	f73f aecb 	bgt.w	80068ca <_dtoa_r+0x93a>
 8006b34:	9f03      	ldr	r7, [sp, #12]
 8006b36:	4621      	mov	r1, r4
 8006b38:	4658      	mov	r0, fp
 8006b3a:	f7ff f99b 	bl	8005e74 <quorem>
 8006b3e:	9a03      	ldr	r2, [sp, #12]
 8006b40:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b44:	f807 3b01 	strb.w	r3, [r7], #1
 8006b48:	1aba      	subs	r2, r7, r2
 8006b4a:	4591      	cmp	r9, r2
 8006b4c:	ddba      	ble.n	8006ac4 <_dtoa_r+0xb34>
 8006b4e:	4659      	mov	r1, fp
 8006b50:	2300      	movs	r3, #0
 8006b52:	220a      	movs	r2, #10
 8006b54:	4628      	mov	r0, r5
 8006b56:	f000 faaf 	bl	80070b8 <__multadd>
 8006b5a:	4683      	mov	fp, r0
 8006b5c:	e7eb      	b.n	8006b36 <_dtoa_r+0xba6>
 8006b5e:	bf00      	nop
 8006b60:	08008487 	.word	0x08008487
 8006b64:	080083e4 	.word	0x080083e4
 8006b68:	08008408 	.word	0x08008408

08006b6c <__sflush_r>:
 8006b6c:	898a      	ldrh	r2, [r1, #12]
 8006b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b70:	4605      	mov	r5, r0
 8006b72:	0710      	lsls	r0, r2, #28
 8006b74:	460c      	mov	r4, r1
 8006b76:	d457      	bmi.n	8006c28 <__sflush_r+0xbc>
 8006b78:	684b      	ldr	r3, [r1, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dc04      	bgt.n	8006b88 <__sflush_r+0x1c>
 8006b7e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dc01      	bgt.n	8006b88 <__sflush_r+0x1c>
 8006b84:	2000      	movs	r0, #0
 8006b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b8a:	2e00      	cmp	r6, #0
 8006b8c:	d0fa      	beq.n	8006b84 <__sflush_r+0x18>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b94:	682f      	ldr	r7, [r5, #0]
 8006b96:	602b      	str	r3, [r5, #0]
 8006b98:	d032      	beq.n	8006c00 <__sflush_r+0x94>
 8006b9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	075a      	lsls	r2, r3, #29
 8006ba0:	d505      	bpl.n	8006bae <__sflush_r+0x42>
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	1ac0      	subs	r0, r0, r3
 8006ba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ba8:	b10b      	cbz	r3, 8006bae <__sflush_r+0x42>
 8006baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bac:	1ac0      	subs	r0, r0, r3
 8006bae:	2300      	movs	r3, #0
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	6a21      	ldr	r1, [r4, #32]
 8006bb8:	47b0      	blx	r6
 8006bba:	1c43      	adds	r3, r0, #1
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	d106      	bne.n	8006bce <__sflush_r+0x62>
 8006bc0:	6829      	ldr	r1, [r5, #0]
 8006bc2:	291d      	cmp	r1, #29
 8006bc4:	d82c      	bhi.n	8006c20 <__sflush_r+0xb4>
 8006bc6:	4a29      	ldr	r2, [pc, #164]	; (8006c6c <__sflush_r+0x100>)
 8006bc8:	40ca      	lsrs	r2, r1
 8006bca:	07d6      	lsls	r6, r2, #31
 8006bcc:	d528      	bpl.n	8006c20 <__sflush_r+0xb4>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	6062      	str	r2, [r4, #4]
 8006bd2:	6922      	ldr	r2, [r4, #16]
 8006bd4:	04d9      	lsls	r1, r3, #19
 8006bd6:	6022      	str	r2, [r4, #0]
 8006bd8:	d504      	bpl.n	8006be4 <__sflush_r+0x78>
 8006bda:	1c42      	adds	r2, r0, #1
 8006bdc:	d101      	bne.n	8006be2 <__sflush_r+0x76>
 8006bde:	682b      	ldr	r3, [r5, #0]
 8006be0:	b903      	cbnz	r3, 8006be4 <__sflush_r+0x78>
 8006be2:	6560      	str	r0, [r4, #84]	; 0x54
 8006be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006be6:	602f      	str	r7, [r5, #0]
 8006be8:	2900      	cmp	r1, #0
 8006bea:	d0cb      	beq.n	8006b84 <__sflush_r+0x18>
 8006bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf0:	4299      	cmp	r1, r3
 8006bf2:	d002      	beq.n	8006bfa <__sflush_r+0x8e>
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	f000 fd93 	bl	8007720 <_free_r>
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	6360      	str	r0, [r4, #52]	; 0x34
 8006bfe:	e7c2      	b.n	8006b86 <__sflush_r+0x1a>
 8006c00:	6a21      	ldr	r1, [r4, #32]
 8006c02:	2301      	movs	r3, #1
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b0      	blx	r6
 8006c08:	1c41      	adds	r1, r0, #1
 8006c0a:	d1c7      	bne.n	8006b9c <__sflush_r+0x30>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0c4      	beq.n	8006b9c <__sflush_r+0x30>
 8006c12:	2b1d      	cmp	r3, #29
 8006c14:	d001      	beq.n	8006c1a <__sflush_r+0xae>
 8006c16:	2b16      	cmp	r3, #22
 8006c18:	d101      	bne.n	8006c1e <__sflush_r+0xb2>
 8006c1a:	602f      	str	r7, [r5, #0]
 8006c1c:	e7b2      	b.n	8006b84 <__sflush_r+0x18>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c24:	81a3      	strh	r3, [r4, #12]
 8006c26:	e7ae      	b.n	8006b86 <__sflush_r+0x1a>
 8006c28:	690f      	ldr	r7, [r1, #16]
 8006c2a:	2f00      	cmp	r7, #0
 8006c2c:	d0aa      	beq.n	8006b84 <__sflush_r+0x18>
 8006c2e:	0793      	lsls	r3, r2, #30
 8006c30:	bf18      	it	ne
 8006c32:	2300      	movne	r3, #0
 8006c34:	680e      	ldr	r6, [r1, #0]
 8006c36:	bf08      	it	eq
 8006c38:	694b      	ldreq	r3, [r1, #20]
 8006c3a:	1bf6      	subs	r6, r6, r7
 8006c3c:	600f      	str	r7, [r1, #0]
 8006c3e:	608b      	str	r3, [r1, #8]
 8006c40:	2e00      	cmp	r6, #0
 8006c42:	dd9f      	ble.n	8006b84 <__sflush_r+0x18>
 8006c44:	4633      	mov	r3, r6
 8006c46:	463a      	mov	r2, r7
 8006c48:	4628      	mov	r0, r5
 8006c4a:	6a21      	ldr	r1, [r4, #32]
 8006c4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c50:	47e0      	blx	ip
 8006c52:	2800      	cmp	r0, #0
 8006c54:	dc06      	bgt.n	8006c64 <__sflush_r+0xf8>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	e790      	b.n	8006b86 <__sflush_r+0x1a>
 8006c64:	4407      	add	r7, r0
 8006c66:	1a36      	subs	r6, r6, r0
 8006c68:	e7ea      	b.n	8006c40 <__sflush_r+0xd4>
 8006c6a:	bf00      	nop
 8006c6c:	20400001 	.word	0x20400001

08006c70 <_fflush_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	690b      	ldr	r3, [r1, #16]
 8006c74:	4605      	mov	r5, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	b913      	cbnz	r3, 8006c80 <_fflush_r+0x10>
 8006c7a:	2500      	movs	r5, #0
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	b118      	cbz	r0, 8006c8a <_fflush_r+0x1a>
 8006c82:	6983      	ldr	r3, [r0, #24]
 8006c84:	b90b      	cbnz	r3, 8006c8a <_fflush_r+0x1a>
 8006c86:	f000 f887 	bl	8006d98 <__sinit>
 8006c8a:	4b14      	ldr	r3, [pc, #80]	; (8006cdc <_fflush_r+0x6c>)
 8006c8c:	429c      	cmp	r4, r3
 8006c8e:	d11b      	bne.n	8006cc8 <_fflush_r+0x58>
 8006c90:	686c      	ldr	r4, [r5, #4]
 8006c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0ef      	beq.n	8006c7a <_fflush_r+0xa>
 8006c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c9c:	07d0      	lsls	r0, r2, #31
 8006c9e:	d404      	bmi.n	8006caa <_fflush_r+0x3a>
 8006ca0:	0599      	lsls	r1, r3, #22
 8006ca2:	d402      	bmi.n	8006caa <_fflush_r+0x3a>
 8006ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ca6:	f000 f91a 	bl	8006ede <__retarget_lock_acquire_recursive>
 8006caa:	4628      	mov	r0, r5
 8006cac:	4621      	mov	r1, r4
 8006cae:	f7ff ff5d 	bl	8006b6c <__sflush_r>
 8006cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	07da      	lsls	r2, r3, #31
 8006cb8:	d4e0      	bmi.n	8006c7c <_fflush_r+0xc>
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	059b      	lsls	r3, r3, #22
 8006cbe:	d4dd      	bmi.n	8006c7c <_fflush_r+0xc>
 8006cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cc2:	f000 f90d 	bl	8006ee0 <__retarget_lock_release_recursive>
 8006cc6:	e7d9      	b.n	8006c7c <_fflush_r+0xc>
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <_fflush_r+0x70>)
 8006cca:	429c      	cmp	r4, r3
 8006ccc:	d101      	bne.n	8006cd2 <_fflush_r+0x62>
 8006cce:	68ac      	ldr	r4, [r5, #8]
 8006cd0:	e7df      	b.n	8006c92 <_fflush_r+0x22>
 8006cd2:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <_fflush_r+0x74>)
 8006cd4:	429c      	cmp	r4, r3
 8006cd6:	bf08      	it	eq
 8006cd8:	68ec      	ldreq	r4, [r5, #12]
 8006cda:	e7da      	b.n	8006c92 <_fflush_r+0x22>
 8006cdc:	080084b8 	.word	0x080084b8
 8006ce0:	080084d8 	.word	0x080084d8
 8006ce4:	08008498 	.word	0x08008498

08006ce8 <std>:
 8006ce8:	2300      	movs	r3, #0
 8006cea:	b510      	push	{r4, lr}
 8006cec:	4604      	mov	r4, r0
 8006cee:	e9c0 3300 	strd	r3, r3, [r0]
 8006cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cf6:	6083      	str	r3, [r0, #8]
 8006cf8:	8181      	strh	r1, [r0, #12]
 8006cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8006cfc:	81c2      	strh	r2, [r0, #14]
 8006cfe:	6183      	str	r3, [r0, #24]
 8006d00:	4619      	mov	r1, r3
 8006d02:	2208      	movs	r2, #8
 8006d04:	305c      	adds	r0, #92	; 0x5c
 8006d06:	f7fe fadf 	bl	80052c8 <memset>
 8006d0a:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <std+0x38>)
 8006d0c:	6224      	str	r4, [r4, #32]
 8006d0e:	6263      	str	r3, [r4, #36]	; 0x24
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <std+0x3c>)
 8006d12:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d14:	4b04      	ldr	r3, [pc, #16]	; (8006d28 <std+0x40>)
 8006d16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d18:	4b04      	ldr	r3, [pc, #16]	; (8006d2c <std+0x44>)
 8006d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop
 8006d20:	08007e61 	.word	0x08007e61
 8006d24:	08007e83 	.word	0x08007e83
 8006d28:	08007ebb 	.word	0x08007ebb
 8006d2c:	08007edf 	.word	0x08007edf

08006d30 <_cleanup_r>:
 8006d30:	4901      	ldr	r1, [pc, #4]	; (8006d38 <_cleanup_r+0x8>)
 8006d32:	f000 b8af 	b.w	8006e94 <_fwalk_reent>
 8006d36:	bf00      	nop
 8006d38:	08006c71 	.word	0x08006c71

08006d3c <__sfmoreglue>:
 8006d3c:	2268      	movs	r2, #104	; 0x68
 8006d3e:	b570      	push	{r4, r5, r6, lr}
 8006d40:	1e4d      	subs	r5, r1, #1
 8006d42:	4355      	muls	r5, r2
 8006d44:	460e      	mov	r6, r1
 8006d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d4a:	f000 fd51 	bl	80077f0 <_malloc_r>
 8006d4e:	4604      	mov	r4, r0
 8006d50:	b140      	cbz	r0, 8006d64 <__sfmoreglue+0x28>
 8006d52:	2100      	movs	r1, #0
 8006d54:	e9c0 1600 	strd	r1, r6, [r0]
 8006d58:	300c      	adds	r0, #12
 8006d5a:	60a0      	str	r0, [r4, #8]
 8006d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d60:	f7fe fab2 	bl	80052c8 <memset>
 8006d64:	4620      	mov	r0, r4
 8006d66:	bd70      	pop	{r4, r5, r6, pc}

08006d68 <__sfp_lock_acquire>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__sfp_lock_acquire+0x8>)
 8006d6a:	f000 b8b8 	b.w	8006ede <__retarget_lock_acquire_recursive>
 8006d6e:	bf00      	nop
 8006d70:	200003a5 	.word	0x200003a5

08006d74 <__sfp_lock_release>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__sfp_lock_release+0x8>)
 8006d76:	f000 b8b3 	b.w	8006ee0 <__retarget_lock_release_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	200003a5 	.word	0x200003a5

08006d80 <__sinit_lock_acquire>:
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <__sinit_lock_acquire+0x8>)
 8006d82:	f000 b8ac 	b.w	8006ede <__retarget_lock_acquire_recursive>
 8006d86:	bf00      	nop
 8006d88:	200003a6 	.word	0x200003a6

08006d8c <__sinit_lock_release>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	; (8006d94 <__sinit_lock_release+0x8>)
 8006d8e:	f000 b8a7 	b.w	8006ee0 <__retarget_lock_release_recursive>
 8006d92:	bf00      	nop
 8006d94:	200003a6 	.word	0x200003a6

08006d98 <__sinit>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	f7ff fff0 	bl	8006d80 <__sinit_lock_acquire>
 8006da0:	69a3      	ldr	r3, [r4, #24]
 8006da2:	b11b      	cbz	r3, 8006dac <__sinit+0x14>
 8006da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da8:	f7ff bff0 	b.w	8006d8c <__sinit_lock_release>
 8006dac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006db0:	6523      	str	r3, [r4, #80]	; 0x50
 8006db2:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <__sinit+0x68>)
 8006db4:	4a13      	ldr	r2, [pc, #76]	; (8006e04 <__sinit+0x6c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	bf08      	it	eq
 8006dbe:	2301      	moveq	r3, #1
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	bf08      	it	eq
 8006dc4:	61a3      	streq	r3, [r4, #24]
 8006dc6:	f000 f81f 	bl	8006e08 <__sfp>
 8006dca:	6060      	str	r0, [r4, #4]
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 f81b 	bl	8006e08 <__sfp>
 8006dd2:	60a0      	str	r0, [r4, #8]
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 f817 	bl	8006e08 <__sfp>
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2104      	movs	r1, #4
 8006dde:	60e0      	str	r0, [r4, #12]
 8006de0:	6860      	ldr	r0, [r4, #4]
 8006de2:	f7ff ff81 	bl	8006ce8 <std>
 8006de6:	2201      	movs	r2, #1
 8006de8:	2109      	movs	r1, #9
 8006dea:	68a0      	ldr	r0, [r4, #8]
 8006dec:	f7ff ff7c 	bl	8006ce8 <std>
 8006df0:	2202      	movs	r2, #2
 8006df2:	2112      	movs	r1, #18
 8006df4:	68e0      	ldr	r0, [r4, #12]
 8006df6:	f7ff ff77 	bl	8006ce8 <std>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	61a3      	str	r3, [r4, #24]
 8006dfe:	e7d1      	b.n	8006da4 <__sinit+0xc>
 8006e00:	080083d0 	.word	0x080083d0
 8006e04:	08006d31 	.word	0x08006d31

08006e08 <__sfp>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	f7ff ffac 	bl	8006d68 <__sfp_lock_acquire>
 8006e10:	4b1e      	ldr	r3, [pc, #120]	; (8006e8c <__sfp+0x84>)
 8006e12:	681e      	ldr	r6, [r3, #0]
 8006e14:	69b3      	ldr	r3, [r6, #24]
 8006e16:	b913      	cbnz	r3, 8006e1e <__sfp+0x16>
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f7ff ffbd 	bl	8006d98 <__sinit>
 8006e1e:	3648      	adds	r6, #72	; 0x48
 8006e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	d503      	bpl.n	8006e30 <__sfp+0x28>
 8006e28:	6833      	ldr	r3, [r6, #0]
 8006e2a:	b30b      	cbz	r3, 8006e70 <__sfp+0x68>
 8006e2c:	6836      	ldr	r6, [r6, #0]
 8006e2e:	e7f7      	b.n	8006e20 <__sfp+0x18>
 8006e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e34:	b9d5      	cbnz	r5, 8006e6c <__sfp+0x64>
 8006e36:	4b16      	ldr	r3, [pc, #88]	; (8006e90 <__sfp+0x88>)
 8006e38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e3c:	60e3      	str	r3, [r4, #12]
 8006e3e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e40:	f000 f84c 	bl	8006edc <__retarget_lock_init_recursive>
 8006e44:	f7ff ff96 	bl	8006d74 <__sfp_lock_release>
 8006e48:	2208      	movs	r2, #8
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e54:	6025      	str	r5, [r4, #0]
 8006e56:	61a5      	str	r5, [r4, #24]
 8006e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e5c:	f7fe fa34 	bl	80052c8 <memset>
 8006e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e68:	4620      	mov	r0, r4
 8006e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e6c:	3468      	adds	r4, #104	; 0x68
 8006e6e:	e7d9      	b.n	8006e24 <__sfp+0x1c>
 8006e70:	2104      	movs	r1, #4
 8006e72:	4638      	mov	r0, r7
 8006e74:	f7ff ff62 	bl	8006d3c <__sfmoreglue>
 8006e78:	4604      	mov	r4, r0
 8006e7a:	6030      	str	r0, [r6, #0]
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d1d5      	bne.n	8006e2c <__sfp+0x24>
 8006e80:	f7ff ff78 	bl	8006d74 <__sfp_lock_release>
 8006e84:	230c      	movs	r3, #12
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	e7ee      	b.n	8006e68 <__sfp+0x60>
 8006e8a:	bf00      	nop
 8006e8c:	080083d0 	.word	0x080083d0
 8006e90:	ffff0001 	.word	0xffff0001

08006e94 <_fwalk_reent>:
 8006e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e98:	4606      	mov	r6, r0
 8006e9a:	4688      	mov	r8, r1
 8006e9c:	2700      	movs	r7, #0
 8006e9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ea2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ea6:	f1b9 0901 	subs.w	r9, r9, #1
 8006eaa:	d505      	bpl.n	8006eb8 <_fwalk_reent+0x24>
 8006eac:	6824      	ldr	r4, [r4, #0]
 8006eae:	2c00      	cmp	r4, #0
 8006eb0:	d1f7      	bne.n	8006ea2 <_fwalk_reent+0xe>
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb8:	89ab      	ldrh	r3, [r5, #12]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d907      	bls.n	8006ece <_fwalk_reent+0x3a>
 8006ebe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	d003      	beq.n	8006ece <_fwalk_reent+0x3a>
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	4630      	mov	r0, r6
 8006eca:	47c0      	blx	r8
 8006ecc:	4307      	orrs	r7, r0
 8006ece:	3568      	adds	r5, #104	; 0x68
 8006ed0:	e7e9      	b.n	8006ea6 <_fwalk_reent+0x12>
	...

08006ed4 <_localeconv_r>:
 8006ed4:	4800      	ldr	r0, [pc, #0]	; (8006ed8 <_localeconv_r+0x4>)
 8006ed6:	4770      	bx	lr
 8006ed8:	2000016c 	.word	0x2000016c

08006edc <__retarget_lock_init_recursive>:
 8006edc:	4770      	bx	lr

08006ede <__retarget_lock_acquire_recursive>:
 8006ede:	4770      	bx	lr

08006ee0 <__retarget_lock_release_recursive>:
 8006ee0:	4770      	bx	lr

08006ee2 <__swhatbuf_r>:
 8006ee2:	b570      	push	{r4, r5, r6, lr}
 8006ee4:	460e      	mov	r6, r1
 8006ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eea:	4614      	mov	r4, r2
 8006eec:	2900      	cmp	r1, #0
 8006eee:	461d      	mov	r5, r3
 8006ef0:	b096      	sub	sp, #88	; 0x58
 8006ef2:	da08      	bge.n	8006f06 <__swhatbuf_r+0x24>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006efa:	602a      	str	r2, [r5, #0]
 8006efc:	061a      	lsls	r2, r3, #24
 8006efe:	d410      	bmi.n	8006f22 <__swhatbuf_r+0x40>
 8006f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f04:	e00e      	b.n	8006f24 <__swhatbuf_r+0x42>
 8006f06:	466a      	mov	r2, sp
 8006f08:	f001 f840 	bl	8007f8c <_fstat_r>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	dbf1      	blt.n	8006ef4 <__swhatbuf_r+0x12>
 8006f10:	9a01      	ldr	r2, [sp, #4]
 8006f12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f1a:	425a      	negs	r2, r3
 8006f1c:	415a      	adcs	r2, r3
 8006f1e:	602a      	str	r2, [r5, #0]
 8006f20:	e7ee      	b.n	8006f00 <__swhatbuf_r+0x1e>
 8006f22:	2340      	movs	r3, #64	; 0x40
 8006f24:	2000      	movs	r0, #0
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	b016      	add	sp, #88	; 0x58
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}

08006f2c <__smakebuf_r>:
 8006f2c:	898b      	ldrh	r3, [r1, #12]
 8006f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f30:	079d      	lsls	r5, r3, #30
 8006f32:	4606      	mov	r6, r0
 8006f34:	460c      	mov	r4, r1
 8006f36:	d507      	bpl.n	8006f48 <__smakebuf_r+0x1c>
 8006f38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	6123      	str	r3, [r4, #16]
 8006f40:	2301      	movs	r3, #1
 8006f42:	6163      	str	r3, [r4, #20]
 8006f44:	b002      	add	sp, #8
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	466a      	mov	r2, sp
 8006f4a:	ab01      	add	r3, sp, #4
 8006f4c:	f7ff ffc9 	bl	8006ee2 <__swhatbuf_r>
 8006f50:	9900      	ldr	r1, [sp, #0]
 8006f52:	4605      	mov	r5, r0
 8006f54:	4630      	mov	r0, r6
 8006f56:	f000 fc4b 	bl	80077f0 <_malloc_r>
 8006f5a:	b948      	cbnz	r0, 8006f70 <__smakebuf_r+0x44>
 8006f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f60:	059a      	lsls	r2, r3, #22
 8006f62:	d4ef      	bmi.n	8006f44 <__smakebuf_r+0x18>
 8006f64:	f023 0303 	bic.w	r3, r3, #3
 8006f68:	f043 0302 	orr.w	r3, r3, #2
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	e7e3      	b.n	8006f38 <__smakebuf_r+0xc>
 8006f70:	4b0d      	ldr	r3, [pc, #52]	; (8006fa8 <__smakebuf_r+0x7c>)
 8006f72:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	6020      	str	r0, [r4, #0]
 8006f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7c:	81a3      	strh	r3, [r4, #12]
 8006f7e:	9b00      	ldr	r3, [sp, #0]
 8006f80:	6120      	str	r0, [r4, #16]
 8006f82:	6163      	str	r3, [r4, #20]
 8006f84:	9b01      	ldr	r3, [sp, #4]
 8006f86:	b15b      	cbz	r3, 8006fa0 <__smakebuf_r+0x74>
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f8e:	f001 f80f 	bl	8007fb0 <_isatty_r>
 8006f92:	b128      	cbz	r0, 8006fa0 <__smakebuf_r+0x74>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f023 0303 	bic.w	r3, r3, #3
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	89a0      	ldrh	r0, [r4, #12]
 8006fa2:	4305      	orrs	r5, r0
 8006fa4:	81a5      	strh	r5, [r4, #12]
 8006fa6:	e7cd      	b.n	8006f44 <__smakebuf_r+0x18>
 8006fa8:	08006d31 	.word	0x08006d31

08006fac <malloc>:
 8006fac:	4b02      	ldr	r3, [pc, #8]	; (8006fb8 <malloc+0xc>)
 8006fae:	4601      	mov	r1, r0
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	f000 bc1d 	b.w	80077f0 <_malloc_r>
 8006fb6:	bf00      	nop
 8006fb8:	20000018 	.word	0x20000018

08006fbc <memchr>:
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	b510      	push	{r4, lr}
 8006fc0:	b2c9      	uxtb	r1, r1
 8006fc2:	4402      	add	r2, r0
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	d101      	bne.n	8006fce <memchr+0x12>
 8006fca:	2000      	movs	r0, #0
 8006fcc:	e003      	b.n	8006fd6 <memchr+0x1a>
 8006fce:	7804      	ldrb	r4, [r0, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	428c      	cmp	r4, r1
 8006fd4:	d1f6      	bne.n	8006fc4 <memchr+0x8>
 8006fd6:	bd10      	pop	{r4, pc}

08006fd8 <memcpy>:
 8006fd8:	440a      	add	r2, r1
 8006fda:	4291      	cmp	r1, r2
 8006fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fe0:	d100      	bne.n	8006fe4 <memcpy+0xc>
 8006fe2:	4770      	bx	lr
 8006fe4:	b510      	push	{r4, lr}
 8006fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fea:	4291      	cmp	r1, r2
 8006fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ff0:	d1f9      	bne.n	8006fe6 <memcpy+0xe>
 8006ff2:	bd10      	pop	{r4, pc}

08006ff4 <_Balloc>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	b976      	cbnz	r6, 800701c <_Balloc+0x28>
 8006ffe:	2010      	movs	r0, #16
 8007000:	f7ff ffd4 	bl	8006fac <malloc>
 8007004:	4602      	mov	r2, r0
 8007006:	6260      	str	r0, [r4, #36]	; 0x24
 8007008:	b920      	cbnz	r0, 8007014 <_Balloc+0x20>
 800700a:	2166      	movs	r1, #102	; 0x66
 800700c:	4b17      	ldr	r3, [pc, #92]	; (800706c <_Balloc+0x78>)
 800700e:	4818      	ldr	r0, [pc, #96]	; (8007070 <_Balloc+0x7c>)
 8007010:	f000 ff7c 	bl	8007f0c <__assert_func>
 8007014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007018:	6006      	str	r6, [r0, #0]
 800701a:	60c6      	str	r6, [r0, #12]
 800701c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800701e:	68f3      	ldr	r3, [r6, #12]
 8007020:	b183      	cbz	r3, 8007044 <_Balloc+0x50>
 8007022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800702a:	b9b8      	cbnz	r0, 800705c <_Balloc+0x68>
 800702c:	2101      	movs	r1, #1
 800702e:	fa01 f605 	lsl.w	r6, r1, r5
 8007032:	1d72      	adds	r2, r6, #5
 8007034:	4620      	mov	r0, r4
 8007036:	0092      	lsls	r2, r2, #2
 8007038:	f000 fb5e 	bl	80076f8 <_calloc_r>
 800703c:	b160      	cbz	r0, 8007058 <_Balloc+0x64>
 800703e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007042:	e00e      	b.n	8007062 <_Balloc+0x6e>
 8007044:	2221      	movs	r2, #33	; 0x21
 8007046:	2104      	movs	r1, #4
 8007048:	4620      	mov	r0, r4
 800704a:	f000 fb55 	bl	80076f8 <_calloc_r>
 800704e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007050:	60f0      	str	r0, [r6, #12]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e4      	bne.n	8007022 <_Balloc+0x2e>
 8007058:	2000      	movs	r0, #0
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	6802      	ldr	r2, [r0, #0]
 800705e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007062:	2300      	movs	r3, #0
 8007064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007068:	e7f7      	b.n	800705a <_Balloc+0x66>
 800706a:	bf00      	nop
 800706c:	08008415 	.word	0x08008415
 8007070:	080084f8 	.word	0x080084f8

08007074 <_Bfree>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007078:	4605      	mov	r5, r0
 800707a:	460c      	mov	r4, r1
 800707c:	b976      	cbnz	r6, 800709c <_Bfree+0x28>
 800707e:	2010      	movs	r0, #16
 8007080:	f7ff ff94 	bl	8006fac <malloc>
 8007084:	4602      	mov	r2, r0
 8007086:	6268      	str	r0, [r5, #36]	; 0x24
 8007088:	b920      	cbnz	r0, 8007094 <_Bfree+0x20>
 800708a:	218a      	movs	r1, #138	; 0x8a
 800708c:	4b08      	ldr	r3, [pc, #32]	; (80070b0 <_Bfree+0x3c>)
 800708e:	4809      	ldr	r0, [pc, #36]	; (80070b4 <_Bfree+0x40>)
 8007090:	f000 ff3c 	bl	8007f0c <__assert_func>
 8007094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007098:	6006      	str	r6, [r0, #0]
 800709a:	60c6      	str	r6, [r0, #12]
 800709c:	b13c      	cbz	r4, 80070ae <_Bfree+0x3a>
 800709e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070a0:	6862      	ldr	r2, [r4, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070a8:	6021      	str	r1, [r4, #0]
 80070aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	08008415 	.word	0x08008415
 80070b4:	080084f8 	.word	0x080084f8

080070b8 <__multadd>:
 80070b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070bc:	4607      	mov	r7, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	461e      	mov	r6, r3
 80070c2:	2000      	movs	r0, #0
 80070c4:	690d      	ldr	r5, [r1, #16]
 80070c6:	f101 0c14 	add.w	ip, r1, #20
 80070ca:	f8dc 3000 	ldr.w	r3, [ip]
 80070ce:	3001      	adds	r0, #1
 80070d0:	b299      	uxth	r1, r3
 80070d2:	fb02 6101 	mla	r1, r2, r1, r6
 80070d6:	0c1e      	lsrs	r6, r3, #16
 80070d8:	0c0b      	lsrs	r3, r1, #16
 80070da:	fb02 3306 	mla	r3, r2, r6, r3
 80070de:	b289      	uxth	r1, r1
 80070e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070e4:	4285      	cmp	r5, r0
 80070e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070ea:	f84c 1b04 	str.w	r1, [ip], #4
 80070ee:	dcec      	bgt.n	80070ca <__multadd+0x12>
 80070f0:	b30e      	cbz	r6, 8007136 <__multadd+0x7e>
 80070f2:	68a3      	ldr	r3, [r4, #8]
 80070f4:	42ab      	cmp	r3, r5
 80070f6:	dc19      	bgt.n	800712c <__multadd+0x74>
 80070f8:	6861      	ldr	r1, [r4, #4]
 80070fa:	4638      	mov	r0, r7
 80070fc:	3101      	adds	r1, #1
 80070fe:	f7ff ff79 	bl	8006ff4 <_Balloc>
 8007102:	4680      	mov	r8, r0
 8007104:	b928      	cbnz	r0, 8007112 <__multadd+0x5a>
 8007106:	4602      	mov	r2, r0
 8007108:	21b5      	movs	r1, #181	; 0xb5
 800710a:	4b0c      	ldr	r3, [pc, #48]	; (800713c <__multadd+0x84>)
 800710c:	480c      	ldr	r0, [pc, #48]	; (8007140 <__multadd+0x88>)
 800710e:	f000 fefd 	bl	8007f0c <__assert_func>
 8007112:	6922      	ldr	r2, [r4, #16]
 8007114:	f104 010c 	add.w	r1, r4, #12
 8007118:	3202      	adds	r2, #2
 800711a:	0092      	lsls	r2, r2, #2
 800711c:	300c      	adds	r0, #12
 800711e:	f7ff ff5b 	bl	8006fd8 <memcpy>
 8007122:	4621      	mov	r1, r4
 8007124:	4638      	mov	r0, r7
 8007126:	f7ff ffa5 	bl	8007074 <_Bfree>
 800712a:	4644      	mov	r4, r8
 800712c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007130:	3501      	adds	r5, #1
 8007132:	615e      	str	r6, [r3, #20]
 8007134:	6125      	str	r5, [r4, #16]
 8007136:	4620      	mov	r0, r4
 8007138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800713c:	08008487 	.word	0x08008487
 8007140:	080084f8 	.word	0x080084f8

08007144 <__hi0bits>:
 8007144:	0c02      	lsrs	r2, r0, #16
 8007146:	0412      	lsls	r2, r2, #16
 8007148:	4603      	mov	r3, r0
 800714a:	b9ca      	cbnz	r2, 8007180 <__hi0bits+0x3c>
 800714c:	0403      	lsls	r3, r0, #16
 800714e:	2010      	movs	r0, #16
 8007150:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007154:	bf04      	itt	eq
 8007156:	021b      	lsleq	r3, r3, #8
 8007158:	3008      	addeq	r0, #8
 800715a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800715e:	bf04      	itt	eq
 8007160:	011b      	lsleq	r3, r3, #4
 8007162:	3004      	addeq	r0, #4
 8007164:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007168:	bf04      	itt	eq
 800716a:	009b      	lsleq	r3, r3, #2
 800716c:	3002      	addeq	r0, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	db05      	blt.n	800717e <__hi0bits+0x3a>
 8007172:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007176:	f100 0001 	add.w	r0, r0, #1
 800717a:	bf08      	it	eq
 800717c:	2020      	moveq	r0, #32
 800717e:	4770      	bx	lr
 8007180:	2000      	movs	r0, #0
 8007182:	e7e5      	b.n	8007150 <__hi0bits+0xc>

08007184 <__lo0bits>:
 8007184:	6803      	ldr	r3, [r0, #0]
 8007186:	4602      	mov	r2, r0
 8007188:	f013 0007 	ands.w	r0, r3, #7
 800718c:	d00b      	beq.n	80071a6 <__lo0bits+0x22>
 800718e:	07d9      	lsls	r1, r3, #31
 8007190:	d421      	bmi.n	80071d6 <__lo0bits+0x52>
 8007192:	0798      	lsls	r0, r3, #30
 8007194:	bf49      	itett	mi
 8007196:	085b      	lsrmi	r3, r3, #1
 8007198:	089b      	lsrpl	r3, r3, #2
 800719a:	2001      	movmi	r0, #1
 800719c:	6013      	strmi	r3, [r2, #0]
 800719e:	bf5c      	itt	pl
 80071a0:	2002      	movpl	r0, #2
 80071a2:	6013      	strpl	r3, [r2, #0]
 80071a4:	4770      	bx	lr
 80071a6:	b299      	uxth	r1, r3
 80071a8:	b909      	cbnz	r1, 80071ae <__lo0bits+0x2a>
 80071aa:	2010      	movs	r0, #16
 80071ac:	0c1b      	lsrs	r3, r3, #16
 80071ae:	b2d9      	uxtb	r1, r3
 80071b0:	b909      	cbnz	r1, 80071b6 <__lo0bits+0x32>
 80071b2:	3008      	adds	r0, #8
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	0719      	lsls	r1, r3, #28
 80071b8:	bf04      	itt	eq
 80071ba:	091b      	lsreq	r3, r3, #4
 80071bc:	3004      	addeq	r0, #4
 80071be:	0799      	lsls	r1, r3, #30
 80071c0:	bf04      	itt	eq
 80071c2:	089b      	lsreq	r3, r3, #2
 80071c4:	3002      	addeq	r0, #2
 80071c6:	07d9      	lsls	r1, r3, #31
 80071c8:	d403      	bmi.n	80071d2 <__lo0bits+0x4e>
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	f100 0001 	add.w	r0, r0, #1
 80071d0:	d003      	beq.n	80071da <__lo0bits+0x56>
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	4770      	bx	lr
 80071d6:	2000      	movs	r0, #0
 80071d8:	4770      	bx	lr
 80071da:	2020      	movs	r0, #32
 80071dc:	4770      	bx	lr
	...

080071e0 <__i2b>:
 80071e0:	b510      	push	{r4, lr}
 80071e2:	460c      	mov	r4, r1
 80071e4:	2101      	movs	r1, #1
 80071e6:	f7ff ff05 	bl	8006ff4 <_Balloc>
 80071ea:	4602      	mov	r2, r0
 80071ec:	b928      	cbnz	r0, 80071fa <__i2b+0x1a>
 80071ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80071f2:	4b04      	ldr	r3, [pc, #16]	; (8007204 <__i2b+0x24>)
 80071f4:	4804      	ldr	r0, [pc, #16]	; (8007208 <__i2b+0x28>)
 80071f6:	f000 fe89 	bl	8007f0c <__assert_func>
 80071fa:	2301      	movs	r3, #1
 80071fc:	6144      	str	r4, [r0, #20]
 80071fe:	6103      	str	r3, [r0, #16]
 8007200:	bd10      	pop	{r4, pc}
 8007202:	bf00      	nop
 8007204:	08008487 	.word	0x08008487
 8007208:	080084f8 	.word	0x080084f8

0800720c <__multiply>:
 800720c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007210:	4691      	mov	r9, r2
 8007212:	690a      	ldr	r2, [r1, #16]
 8007214:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007218:	460c      	mov	r4, r1
 800721a:	429a      	cmp	r2, r3
 800721c:	bfbe      	ittt	lt
 800721e:	460b      	movlt	r3, r1
 8007220:	464c      	movlt	r4, r9
 8007222:	4699      	movlt	r9, r3
 8007224:	6927      	ldr	r7, [r4, #16]
 8007226:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	6861      	ldr	r1, [r4, #4]
 800722e:	eb07 060a 	add.w	r6, r7, sl
 8007232:	42b3      	cmp	r3, r6
 8007234:	b085      	sub	sp, #20
 8007236:	bfb8      	it	lt
 8007238:	3101      	addlt	r1, #1
 800723a:	f7ff fedb 	bl	8006ff4 <_Balloc>
 800723e:	b930      	cbnz	r0, 800724e <__multiply+0x42>
 8007240:	4602      	mov	r2, r0
 8007242:	f240 115d 	movw	r1, #349	; 0x15d
 8007246:	4b43      	ldr	r3, [pc, #268]	; (8007354 <__multiply+0x148>)
 8007248:	4843      	ldr	r0, [pc, #268]	; (8007358 <__multiply+0x14c>)
 800724a:	f000 fe5f 	bl	8007f0c <__assert_func>
 800724e:	f100 0514 	add.w	r5, r0, #20
 8007252:	462b      	mov	r3, r5
 8007254:	2200      	movs	r2, #0
 8007256:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800725a:	4543      	cmp	r3, r8
 800725c:	d321      	bcc.n	80072a2 <__multiply+0x96>
 800725e:	f104 0314 	add.w	r3, r4, #20
 8007262:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007266:	f109 0314 	add.w	r3, r9, #20
 800726a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800726e:	9202      	str	r2, [sp, #8]
 8007270:	1b3a      	subs	r2, r7, r4
 8007272:	3a15      	subs	r2, #21
 8007274:	f022 0203 	bic.w	r2, r2, #3
 8007278:	3204      	adds	r2, #4
 800727a:	f104 0115 	add.w	r1, r4, #21
 800727e:	428f      	cmp	r7, r1
 8007280:	bf38      	it	cc
 8007282:	2204      	movcc	r2, #4
 8007284:	9201      	str	r2, [sp, #4]
 8007286:	9a02      	ldr	r2, [sp, #8]
 8007288:	9303      	str	r3, [sp, #12]
 800728a:	429a      	cmp	r2, r3
 800728c:	d80c      	bhi.n	80072a8 <__multiply+0x9c>
 800728e:	2e00      	cmp	r6, #0
 8007290:	dd03      	ble.n	800729a <__multiply+0x8e>
 8007292:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007296:	2b00      	cmp	r3, #0
 8007298:	d059      	beq.n	800734e <__multiply+0x142>
 800729a:	6106      	str	r6, [r0, #16]
 800729c:	b005      	add	sp, #20
 800729e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a2:	f843 2b04 	str.w	r2, [r3], #4
 80072a6:	e7d8      	b.n	800725a <__multiply+0x4e>
 80072a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80072ac:	f1ba 0f00 	cmp.w	sl, #0
 80072b0:	d023      	beq.n	80072fa <__multiply+0xee>
 80072b2:	46a9      	mov	r9, r5
 80072b4:	f04f 0c00 	mov.w	ip, #0
 80072b8:	f104 0e14 	add.w	lr, r4, #20
 80072bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072c0:	f8d9 1000 	ldr.w	r1, [r9]
 80072c4:	fa1f fb82 	uxth.w	fp, r2
 80072c8:	b289      	uxth	r1, r1
 80072ca:	fb0a 110b 	mla	r1, sl, fp, r1
 80072ce:	4461      	add	r1, ip
 80072d0:	f8d9 c000 	ldr.w	ip, [r9]
 80072d4:	0c12      	lsrs	r2, r2, #16
 80072d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80072da:	fb0a c202 	mla	r2, sl, r2, ip
 80072de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072e2:	b289      	uxth	r1, r1
 80072e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072e8:	4577      	cmp	r7, lr
 80072ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072ee:	f849 1b04 	str.w	r1, [r9], #4
 80072f2:	d8e3      	bhi.n	80072bc <__multiply+0xb0>
 80072f4:	9a01      	ldr	r2, [sp, #4]
 80072f6:	f845 c002 	str.w	ip, [r5, r2]
 80072fa:	9a03      	ldr	r2, [sp, #12]
 80072fc:	3304      	adds	r3, #4
 80072fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007302:	f1b9 0f00 	cmp.w	r9, #0
 8007306:	d020      	beq.n	800734a <__multiply+0x13e>
 8007308:	46ae      	mov	lr, r5
 800730a:	f04f 0a00 	mov.w	sl, #0
 800730e:	6829      	ldr	r1, [r5, #0]
 8007310:	f104 0c14 	add.w	ip, r4, #20
 8007314:	f8bc b000 	ldrh.w	fp, [ip]
 8007318:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800731c:	b289      	uxth	r1, r1
 800731e:	fb09 220b 	mla	r2, r9, fp, r2
 8007322:	4492      	add	sl, r2
 8007324:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007328:	f84e 1b04 	str.w	r1, [lr], #4
 800732c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007330:	f8be 1000 	ldrh.w	r1, [lr]
 8007334:	0c12      	lsrs	r2, r2, #16
 8007336:	fb09 1102 	mla	r1, r9, r2, r1
 800733a:	4567      	cmp	r7, ip
 800733c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007340:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007344:	d8e6      	bhi.n	8007314 <__multiply+0x108>
 8007346:	9a01      	ldr	r2, [sp, #4]
 8007348:	50a9      	str	r1, [r5, r2]
 800734a:	3504      	adds	r5, #4
 800734c:	e79b      	b.n	8007286 <__multiply+0x7a>
 800734e:	3e01      	subs	r6, #1
 8007350:	e79d      	b.n	800728e <__multiply+0x82>
 8007352:	bf00      	nop
 8007354:	08008487 	.word	0x08008487
 8007358:	080084f8 	.word	0x080084f8

0800735c <__pow5mult>:
 800735c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007360:	4615      	mov	r5, r2
 8007362:	f012 0203 	ands.w	r2, r2, #3
 8007366:	4606      	mov	r6, r0
 8007368:	460f      	mov	r7, r1
 800736a:	d007      	beq.n	800737c <__pow5mult+0x20>
 800736c:	4c25      	ldr	r4, [pc, #148]	; (8007404 <__pow5mult+0xa8>)
 800736e:	3a01      	subs	r2, #1
 8007370:	2300      	movs	r3, #0
 8007372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007376:	f7ff fe9f 	bl	80070b8 <__multadd>
 800737a:	4607      	mov	r7, r0
 800737c:	10ad      	asrs	r5, r5, #2
 800737e:	d03d      	beq.n	80073fc <__pow5mult+0xa0>
 8007380:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007382:	b97c      	cbnz	r4, 80073a4 <__pow5mult+0x48>
 8007384:	2010      	movs	r0, #16
 8007386:	f7ff fe11 	bl	8006fac <malloc>
 800738a:	4602      	mov	r2, r0
 800738c:	6270      	str	r0, [r6, #36]	; 0x24
 800738e:	b928      	cbnz	r0, 800739c <__pow5mult+0x40>
 8007390:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007394:	4b1c      	ldr	r3, [pc, #112]	; (8007408 <__pow5mult+0xac>)
 8007396:	481d      	ldr	r0, [pc, #116]	; (800740c <__pow5mult+0xb0>)
 8007398:	f000 fdb8 	bl	8007f0c <__assert_func>
 800739c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073a0:	6004      	str	r4, [r0, #0]
 80073a2:	60c4      	str	r4, [r0, #12]
 80073a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073ac:	b94c      	cbnz	r4, 80073c2 <__pow5mult+0x66>
 80073ae:	f240 2171 	movw	r1, #625	; 0x271
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ff14 	bl	80071e0 <__i2b>
 80073b8:	2300      	movs	r3, #0
 80073ba:	4604      	mov	r4, r0
 80073bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80073c0:	6003      	str	r3, [r0, #0]
 80073c2:	f04f 0900 	mov.w	r9, #0
 80073c6:	07eb      	lsls	r3, r5, #31
 80073c8:	d50a      	bpl.n	80073e0 <__pow5mult+0x84>
 80073ca:	4639      	mov	r1, r7
 80073cc:	4622      	mov	r2, r4
 80073ce:	4630      	mov	r0, r6
 80073d0:	f7ff ff1c 	bl	800720c <__multiply>
 80073d4:	4680      	mov	r8, r0
 80073d6:	4639      	mov	r1, r7
 80073d8:	4630      	mov	r0, r6
 80073da:	f7ff fe4b 	bl	8007074 <_Bfree>
 80073de:	4647      	mov	r7, r8
 80073e0:	106d      	asrs	r5, r5, #1
 80073e2:	d00b      	beq.n	80073fc <__pow5mult+0xa0>
 80073e4:	6820      	ldr	r0, [r4, #0]
 80073e6:	b938      	cbnz	r0, 80073f8 <__pow5mult+0x9c>
 80073e8:	4622      	mov	r2, r4
 80073ea:	4621      	mov	r1, r4
 80073ec:	4630      	mov	r0, r6
 80073ee:	f7ff ff0d 	bl	800720c <__multiply>
 80073f2:	6020      	str	r0, [r4, #0]
 80073f4:	f8c0 9000 	str.w	r9, [r0]
 80073f8:	4604      	mov	r4, r0
 80073fa:	e7e4      	b.n	80073c6 <__pow5mult+0x6a>
 80073fc:	4638      	mov	r0, r7
 80073fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007402:	bf00      	nop
 8007404:	08008648 	.word	0x08008648
 8007408:	08008415 	.word	0x08008415
 800740c:	080084f8 	.word	0x080084f8

08007410 <__lshift>:
 8007410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007414:	460c      	mov	r4, r1
 8007416:	4607      	mov	r7, r0
 8007418:	4691      	mov	r9, r2
 800741a:	6923      	ldr	r3, [r4, #16]
 800741c:	6849      	ldr	r1, [r1, #4]
 800741e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007422:	68a3      	ldr	r3, [r4, #8]
 8007424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007428:	f108 0601 	add.w	r6, r8, #1
 800742c:	42b3      	cmp	r3, r6
 800742e:	db0b      	blt.n	8007448 <__lshift+0x38>
 8007430:	4638      	mov	r0, r7
 8007432:	f7ff fddf 	bl	8006ff4 <_Balloc>
 8007436:	4605      	mov	r5, r0
 8007438:	b948      	cbnz	r0, 800744e <__lshift+0x3e>
 800743a:	4602      	mov	r2, r0
 800743c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007440:	4b29      	ldr	r3, [pc, #164]	; (80074e8 <__lshift+0xd8>)
 8007442:	482a      	ldr	r0, [pc, #168]	; (80074ec <__lshift+0xdc>)
 8007444:	f000 fd62 	bl	8007f0c <__assert_func>
 8007448:	3101      	adds	r1, #1
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	e7ee      	b.n	800742c <__lshift+0x1c>
 800744e:	2300      	movs	r3, #0
 8007450:	f100 0114 	add.w	r1, r0, #20
 8007454:	f100 0210 	add.w	r2, r0, #16
 8007458:	4618      	mov	r0, r3
 800745a:	4553      	cmp	r3, sl
 800745c:	db37      	blt.n	80074ce <__lshift+0xbe>
 800745e:	6920      	ldr	r0, [r4, #16]
 8007460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007464:	f104 0314 	add.w	r3, r4, #20
 8007468:	f019 091f 	ands.w	r9, r9, #31
 800746c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007470:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007474:	d02f      	beq.n	80074d6 <__lshift+0xc6>
 8007476:	468a      	mov	sl, r1
 8007478:	f04f 0c00 	mov.w	ip, #0
 800747c:	f1c9 0e20 	rsb	lr, r9, #32
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	fa02 f209 	lsl.w	r2, r2, r9
 8007486:	ea42 020c 	orr.w	r2, r2, ip
 800748a:	f84a 2b04 	str.w	r2, [sl], #4
 800748e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007492:	4298      	cmp	r0, r3
 8007494:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007498:	d8f2      	bhi.n	8007480 <__lshift+0x70>
 800749a:	1b03      	subs	r3, r0, r4
 800749c:	3b15      	subs	r3, #21
 800749e:	f023 0303 	bic.w	r3, r3, #3
 80074a2:	3304      	adds	r3, #4
 80074a4:	f104 0215 	add.w	r2, r4, #21
 80074a8:	4290      	cmp	r0, r2
 80074aa:	bf38      	it	cc
 80074ac:	2304      	movcc	r3, #4
 80074ae:	f841 c003 	str.w	ip, [r1, r3]
 80074b2:	f1bc 0f00 	cmp.w	ip, #0
 80074b6:	d001      	beq.n	80074bc <__lshift+0xac>
 80074b8:	f108 0602 	add.w	r6, r8, #2
 80074bc:	3e01      	subs	r6, #1
 80074be:	4638      	mov	r0, r7
 80074c0:	4621      	mov	r1, r4
 80074c2:	612e      	str	r6, [r5, #16]
 80074c4:	f7ff fdd6 	bl	8007074 <_Bfree>
 80074c8:	4628      	mov	r0, r5
 80074ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80074d2:	3301      	adds	r3, #1
 80074d4:	e7c1      	b.n	800745a <__lshift+0x4a>
 80074d6:	3904      	subs	r1, #4
 80074d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074dc:	4298      	cmp	r0, r3
 80074de:	f841 2f04 	str.w	r2, [r1, #4]!
 80074e2:	d8f9      	bhi.n	80074d8 <__lshift+0xc8>
 80074e4:	e7ea      	b.n	80074bc <__lshift+0xac>
 80074e6:	bf00      	nop
 80074e8:	08008487 	.word	0x08008487
 80074ec:	080084f8 	.word	0x080084f8

080074f0 <__mcmp>:
 80074f0:	4603      	mov	r3, r0
 80074f2:	690a      	ldr	r2, [r1, #16]
 80074f4:	6900      	ldr	r0, [r0, #16]
 80074f6:	b530      	push	{r4, r5, lr}
 80074f8:	1a80      	subs	r0, r0, r2
 80074fa:	d10d      	bne.n	8007518 <__mcmp+0x28>
 80074fc:	3314      	adds	r3, #20
 80074fe:	3114      	adds	r1, #20
 8007500:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007504:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007508:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800750c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007510:	4295      	cmp	r5, r2
 8007512:	d002      	beq.n	800751a <__mcmp+0x2a>
 8007514:	d304      	bcc.n	8007520 <__mcmp+0x30>
 8007516:	2001      	movs	r0, #1
 8007518:	bd30      	pop	{r4, r5, pc}
 800751a:	42a3      	cmp	r3, r4
 800751c:	d3f4      	bcc.n	8007508 <__mcmp+0x18>
 800751e:	e7fb      	b.n	8007518 <__mcmp+0x28>
 8007520:	f04f 30ff 	mov.w	r0, #4294967295
 8007524:	e7f8      	b.n	8007518 <__mcmp+0x28>
	...

08007528 <__mdiff>:
 8007528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	460d      	mov	r5, r1
 800752e:	4607      	mov	r7, r0
 8007530:	4611      	mov	r1, r2
 8007532:	4628      	mov	r0, r5
 8007534:	4614      	mov	r4, r2
 8007536:	f7ff ffdb 	bl	80074f0 <__mcmp>
 800753a:	1e06      	subs	r6, r0, #0
 800753c:	d111      	bne.n	8007562 <__mdiff+0x3a>
 800753e:	4631      	mov	r1, r6
 8007540:	4638      	mov	r0, r7
 8007542:	f7ff fd57 	bl	8006ff4 <_Balloc>
 8007546:	4602      	mov	r2, r0
 8007548:	b928      	cbnz	r0, 8007556 <__mdiff+0x2e>
 800754a:	f240 2132 	movw	r1, #562	; 0x232
 800754e:	4b3a      	ldr	r3, [pc, #232]	; (8007638 <__mdiff+0x110>)
 8007550:	483a      	ldr	r0, [pc, #232]	; (800763c <__mdiff+0x114>)
 8007552:	f000 fcdb 	bl	8007f0c <__assert_func>
 8007556:	2301      	movs	r3, #1
 8007558:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800755c:	4610      	mov	r0, r2
 800755e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007562:	bfa4      	itt	ge
 8007564:	4623      	movge	r3, r4
 8007566:	462c      	movge	r4, r5
 8007568:	4638      	mov	r0, r7
 800756a:	6861      	ldr	r1, [r4, #4]
 800756c:	bfa6      	itte	ge
 800756e:	461d      	movge	r5, r3
 8007570:	2600      	movge	r6, #0
 8007572:	2601      	movlt	r6, #1
 8007574:	f7ff fd3e 	bl	8006ff4 <_Balloc>
 8007578:	4602      	mov	r2, r0
 800757a:	b918      	cbnz	r0, 8007584 <__mdiff+0x5c>
 800757c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007580:	4b2d      	ldr	r3, [pc, #180]	; (8007638 <__mdiff+0x110>)
 8007582:	e7e5      	b.n	8007550 <__mdiff+0x28>
 8007584:	f102 0814 	add.w	r8, r2, #20
 8007588:	46c2      	mov	sl, r8
 800758a:	f04f 0c00 	mov.w	ip, #0
 800758e:	6927      	ldr	r7, [r4, #16]
 8007590:	60c6      	str	r6, [r0, #12]
 8007592:	692e      	ldr	r6, [r5, #16]
 8007594:	f104 0014 	add.w	r0, r4, #20
 8007598:	f105 0914 	add.w	r9, r5, #20
 800759c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80075a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075a4:	3410      	adds	r4, #16
 80075a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80075aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80075ae:	fa1f f18b 	uxth.w	r1, fp
 80075b2:	448c      	add	ip, r1
 80075b4:	b299      	uxth	r1, r3
 80075b6:	0c1b      	lsrs	r3, r3, #16
 80075b8:	ebac 0101 	sub.w	r1, ip, r1
 80075bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80075c4:	b289      	uxth	r1, r1
 80075c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80075ca:	454e      	cmp	r6, r9
 80075cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80075d0:	f84a 3b04 	str.w	r3, [sl], #4
 80075d4:	d8e7      	bhi.n	80075a6 <__mdiff+0x7e>
 80075d6:	1b73      	subs	r3, r6, r5
 80075d8:	3b15      	subs	r3, #21
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	3515      	adds	r5, #21
 80075e0:	3304      	adds	r3, #4
 80075e2:	42ae      	cmp	r6, r5
 80075e4:	bf38      	it	cc
 80075e6:	2304      	movcc	r3, #4
 80075e8:	4418      	add	r0, r3
 80075ea:	4443      	add	r3, r8
 80075ec:	461e      	mov	r6, r3
 80075ee:	4605      	mov	r5, r0
 80075f0:	4575      	cmp	r5, lr
 80075f2:	d30e      	bcc.n	8007612 <__mdiff+0xea>
 80075f4:	f10e 0103 	add.w	r1, lr, #3
 80075f8:	1a09      	subs	r1, r1, r0
 80075fa:	f021 0103 	bic.w	r1, r1, #3
 80075fe:	3803      	subs	r0, #3
 8007600:	4586      	cmp	lr, r0
 8007602:	bf38      	it	cc
 8007604:	2100      	movcc	r1, #0
 8007606:	4419      	add	r1, r3
 8007608:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800760c:	b18b      	cbz	r3, 8007632 <__mdiff+0x10a>
 800760e:	6117      	str	r7, [r2, #16]
 8007610:	e7a4      	b.n	800755c <__mdiff+0x34>
 8007612:	f855 8b04 	ldr.w	r8, [r5], #4
 8007616:	fa1f f188 	uxth.w	r1, r8
 800761a:	4461      	add	r1, ip
 800761c:	140c      	asrs	r4, r1, #16
 800761e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007622:	b289      	uxth	r1, r1
 8007624:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007628:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800762c:	f846 1b04 	str.w	r1, [r6], #4
 8007630:	e7de      	b.n	80075f0 <__mdiff+0xc8>
 8007632:	3f01      	subs	r7, #1
 8007634:	e7e8      	b.n	8007608 <__mdiff+0xe0>
 8007636:	bf00      	nop
 8007638:	08008487 	.word	0x08008487
 800763c:	080084f8 	.word	0x080084f8

08007640 <__d2b>:
 8007640:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007644:	2101      	movs	r1, #1
 8007646:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800764a:	4690      	mov	r8, r2
 800764c:	461d      	mov	r5, r3
 800764e:	f7ff fcd1 	bl	8006ff4 <_Balloc>
 8007652:	4604      	mov	r4, r0
 8007654:	b930      	cbnz	r0, 8007664 <__d2b+0x24>
 8007656:	4602      	mov	r2, r0
 8007658:	f240 310a 	movw	r1, #778	; 0x30a
 800765c:	4b24      	ldr	r3, [pc, #144]	; (80076f0 <__d2b+0xb0>)
 800765e:	4825      	ldr	r0, [pc, #148]	; (80076f4 <__d2b+0xb4>)
 8007660:	f000 fc54 	bl	8007f0c <__assert_func>
 8007664:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007668:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800766c:	bb2d      	cbnz	r5, 80076ba <__d2b+0x7a>
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	f1b8 0300 	subs.w	r3, r8, #0
 8007674:	d026      	beq.n	80076c4 <__d2b+0x84>
 8007676:	4668      	mov	r0, sp
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	f7ff fd83 	bl	8007184 <__lo0bits>
 800767e:	9900      	ldr	r1, [sp, #0]
 8007680:	b1f0      	cbz	r0, 80076c0 <__d2b+0x80>
 8007682:	9a01      	ldr	r2, [sp, #4]
 8007684:	f1c0 0320 	rsb	r3, r0, #32
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	430b      	orrs	r3, r1
 800768e:	40c2      	lsrs	r2, r0
 8007690:	6163      	str	r3, [r4, #20]
 8007692:	9201      	str	r2, [sp, #4]
 8007694:	9b01      	ldr	r3, [sp, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	bf14      	ite	ne
 800769a:	2102      	movne	r1, #2
 800769c:	2101      	moveq	r1, #1
 800769e:	61a3      	str	r3, [r4, #24]
 80076a0:	6121      	str	r1, [r4, #16]
 80076a2:	b1c5      	cbz	r5, 80076d6 <__d2b+0x96>
 80076a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076a8:	4405      	add	r5, r0
 80076aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076ae:	603d      	str	r5, [r7, #0]
 80076b0:	6030      	str	r0, [r6, #0]
 80076b2:	4620      	mov	r0, r4
 80076b4:	b002      	add	sp, #8
 80076b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076be:	e7d6      	b.n	800766e <__d2b+0x2e>
 80076c0:	6161      	str	r1, [r4, #20]
 80076c2:	e7e7      	b.n	8007694 <__d2b+0x54>
 80076c4:	a801      	add	r0, sp, #4
 80076c6:	f7ff fd5d 	bl	8007184 <__lo0bits>
 80076ca:	2101      	movs	r1, #1
 80076cc:	9b01      	ldr	r3, [sp, #4]
 80076ce:	6121      	str	r1, [r4, #16]
 80076d0:	6163      	str	r3, [r4, #20]
 80076d2:	3020      	adds	r0, #32
 80076d4:	e7e5      	b.n	80076a2 <__d2b+0x62>
 80076d6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80076da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076de:	6038      	str	r0, [r7, #0]
 80076e0:	6918      	ldr	r0, [r3, #16]
 80076e2:	f7ff fd2f 	bl	8007144 <__hi0bits>
 80076e6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80076ea:	6031      	str	r1, [r6, #0]
 80076ec:	e7e1      	b.n	80076b2 <__d2b+0x72>
 80076ee:	bf00      	nop
 80076f0:	08008487 	.word	0x08008487
 80076f4:	080084f8 	.word	0x080084f8

080076f8 <_calloc_r>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	fba1 5402 	umull	r5, r4, r1, r2
 80076fe:	b934      	cbnz	r4, 800770e <_calloc_r+0x16>
 8007700:	4629      	mov	r1, r5
 8007702:	f000 f875 	bl	80077f0 <_malloc_r>
 8007706:	4606      	mov	r6, r0
 8007708:	b928      	cbnz	r0, 8007716 <_calloc_r+0x1e>
 800770a:	4630      	mov	r0, r6
 800770c:	bd70      	pop	{r4, r5, r6, pc}
 800770e:	220c      	movs	r2, #12
 8007710:	2600      	movs	r6, #0
 8007712:	6002      	str	r2, [r0, #0]
 8007714:	e7f9      	b.n	800770a <_calloc_r+0x12>
 8007716:	462a      	mov	r2, r5
 8007718:	4621      	mov	r1, r4
 800771a:	f7fd fdd5 	bl	80052c8 <memset>
 800771e:	e7f4      	b.n	800770a <_calloc_r+0x12>

08007720 <_free_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4605      	mov	r5, r0
 8007724:	2900      	cmp	r1, #0
 8007726:	d040      	beq.n	80077aa <_free_r+0x8a>
 8007728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800772c:	1f0c      	subs	r4, r1, #4
 800772e:	2b00      	cmp	r3, #0
 8007730:	bfb8      	it	lt
 8007732:	18e4      	addlt	r4, r4, r3
 8007734:	f000 fc8a 	bl	800804c <__malloc_lock>
 8007738:	4a1c      	ldr	r2, [pc, #112]	; (80077ac <_free_r+0x8c>)
 800773a:	6813      	ldr	r3, [r2, #0]
 800773c:	b933      	cbnz	r3, 800774c <_free_r+0x2c>
 800773e:	6063      	str	r3, [r4, #4]
 8007740:	6014      	str	r4, [r2, #0]
 8007742:	4628      	mov	r0, r5
 8007744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007748:	f000 bc86 	b.w	8008058 <__malloc_unlock>
 800774c:	42a3      	cmp	r3, r4
 800774e:	d908      	bls.n	8007762 <_free_r+0x42>
 8007750:	6820      	ldr	r0, [r4, #0]
 8007752:	1821      	adds	r1, r4, r0
 8007754:	428b      	cmp	r3, r1
 8007756:	bf01      	itttt	eq
 8007758:	6819      	ldreq	r1, [r3, #0]
 800775a:	685b      	ldreq	r3, [r3, #4]
 800775c:	1809      	addeq	r1, r1, r0
 800775e:	6021      	streq	r1, [r4, #0]
 8007760:	e7ed      	b.n	800773e <_free_r+0x1e>
 8007762:	461a      	mov	r2, r3
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	b10b      	cbz	r3, 800776c <_free_r+0x4c>
 8007768:	42a3      	cmp	r3, r4
 800776a:	d9fa      	bls.n	8007762 <_free_r+0x42>
 800776c:	6811      	ldr	r1, [r2, #0]
 800776e:	1850      	adds	r0, r2, r1
 8007770:	42a0      	cmp	r0, r4
 8007772:	d10b      	bne.n	800778c <_free_r+0x6c>
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	4401      	add	r1, r0
 8007778:	1850      	adds	r0, r2, r1
 800777a:	4283      	cmp	r3, r0
 800777c:	6011      	str	r1, [r2, #0]
 800777e:	d1e0      	bne.n	8007742 <_free_r+0x22>
 8007780:	6818      	ldr	r0, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	4401      	add	r1, r0
 8007786:	6011      	str	r1, [r2, #0]
 8007788:	6053      	str	r3, [r2, #4]
 800778a:	e7da      	b.n	8007742 <_free_r+0x22>
 800778c:	d902      	bls.n	8007794 <_free_r+0x74>
 800778e:	230c      	movs	r3, #12
 8007790:	602b      	str	r3, [r5, #0]
 8007792:	e7d6      	b.n	8007742 <_free_r+0x22>
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	1821      	adds	r1, r4, r0
 8007798:	428b      	cmp	r3, r1
 800779a:	bf01      	itttt	eq
 800779c:	6819      	ldreq	r1, [r3, #0]
 800779e:	685b      	ldreq	r3, [r3, #4]
 80077a0:	1809      	addeq	r1, r1, r0
 80077a2:	6021      	streq	r1, [r4, #0]
 80077a4:	6063      	str	r3, [r4, #4]
 80077a6:	6054      	str	r4, [r2, #4]
 80077a8:	e7cb      	b.n	8007742 <_free_r+0x22>
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	200003a8 	.word	0x200003a8

080077b0 <sbrk_aligned>:
 80077b0:	b570      	push	{r4, r5, r6, lr}
 80077b2:	4e0e      	ldr	r6, [pc, #56]	; (80077ec <sbrk_aligned+0x3c>)
 80077b4:	460c      	mov	r4, r1
 80077b6:	6831      	ldr	r1, [r6, #0]
 80077b8:	4605      	mov	r5, r0
 80077ba:	b911      	cbnz	r1, 80077c2 <sbrk_aligned+0x12>
 80077bc:	f000 fb40 	bl	8007e40 <_sbrk_r>
 80077c0:	6030      	str	r0, [r6, #0]
 80077c2:	4621      	mov	r1, r4
 80077c4:	4628      	mov	r0, r5
 80077c6:	f000 fb3b 	bl	8007e40 <_sbrk_r>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d00a      	beq.n	80077e4 <sbrk_aligned+0x34>
 80077ce:	1cc4      	adds	r4, r0, #3
 80077d0:	f024 0403 	bic.w	r4, r4, #3
 80077d4:	42a0      	cmp	r0, r4
 80077d6:	d007      	beq.n	80077e8 <sbrk_aligned+0x38>
 80077d8:	1a21      	subs	r1, r4, r0
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 fb30 	bl	8007e40 <_sbrk_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d101      	bne.n	80077e8 <sbrk_aligned+0x38>
 80077e4:	f04f 34ff 	mov.w	r4, #4294967295
 80077e8:	4620      	mov	r0, r4
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	200003ac 	.word	0x200003ac

080077f0 <_malloc_r>:
 80077f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f4:	1ccd      	adds	r5, r1, #3
 80077f6:	f025 0503 	bic.w	r5, r5, #3
 80077fa:	3508      	adds	r5, #8
 80077fc:	2d0c      	cmp	r5, #12
 80077fe:	bf38      	it	cc
 8007800:	250c      	movcc	r5, #12
 8007802:	2d00      	cmp	r5, #0
 8007804:	4607      	mov	r7, r0
 8007806:	db01      	blt.n	800780c <_malloc_r+0x1c>
 8007808:	42a9      	cmp	r1, r5
 800780a:	d905      	bls.n	8007818 <_malloc_r+0x28>
 800780c:	230c      	movs	r3, #12
 800780e:	2600      	movs	r6, #0
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	4630      	mov	r0, r6
 8007814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007818:	4e2e      	ldr	r6, [pc, #184]	; (80078d4 <_malloc_r+0xe4>)
 800781a:	f000 fc17 	bl	800804c <__malloc_lock>
 800781e:	6833      	ldr	r3, [r6, #0]
 8007820:	461c      	mov	r4, r3
 8007822:	bb34      	cbnz	r4, 8007872 <_malloc_r+0x82>
 8007824:	4629      	mov	r1, r5
 8007826:	4638      	mov	r0, r7
 8007828:	f7ff ffc2 	bl	80077b0 <sbrk_aligned>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	4604      	mov	r4, r0
 8007830:	d14d      	bne.n	80078ce <_malloc_r+0xde>
 8007832:	6834      	ldr	r4, [r6, #0]
 8007834:	4626      	mov	r6, r4
 8007836:	2e00      	cmp	r6, #0
 8007838:	d140      	bne.n	80078bc <_malloc_r+0xcc>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	4631      	mov	r1, r6
 800783e:	4638      	mov	r0, r7
 8007840:	eb04 0803 	add.w	r8, r4, r3
 8007844:	f000 fafc 	bl	8007e40 <_sbrk_r>
 8007848:	4580      	cmp	r8, r0
 800784a:	d13a      	bne.n	80078c2 <_malloc_r+0xd2>
 800784c:	6821      	ldr	r1, [r4, #0]
 800784e:	3503      	adds	r5, #3
 8007850:	1a6d      	subs	r5, r5, r1
 8007852:	f025 0503 	bic.w	r5, r5, #3
 8007856:	3508      	adds	r5, #8
 8007858:	2d0c      	cmp	r5, #12
 800785a:	bf38      	it	cc
 800785c:	250c      	movcc	r5, #12
 800785e:	4638      	mov	r0, r7
 8007860:	4629      	mov	r1, r5
 8007862:	f7ff ffa5 	bl	80077b0 <sbrk_aligned>
 8007866:	3001      	adds	r0, #1
 8007868:	d02b      	beq.n	80078c2 <_malloc_r+0xd2>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	442b      	add	r3, r5
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	e00e      	b.n	8007890 <_malloc_r+0xa0>
 8007872:	6822      	ldr	r2, [r4, #0]
 8007874:	1b52      	subs	r2, r2, r5
 8007876:	d41e      	bmi.n	80078b6 <_malloc_r+0xc6>
 8007878:	2a0b      	cmp	r2, #11
 800787a:	d916      	bls.n	80078aa <_malloc_r+0xba>
 800787c:	1961      	adds	r1, r4, r5
 800787e:	42a3      	cmp	r3, r4
 8007880:	6025      	str	r5, [r4, #0]
 8007882:	bf18      	it	ne
 8007884:	6059      	strne	r1, [r3, #4]
 8007886:	6863      	ldr	r3, [r4, #4]
 8007888:	bf08      	it	eq
 800788a:	6031      	streq	r1, [r6, #0]
 800788c:	5162      	str	r2, [r4, r5]
 800788e:	604b      	str	r3, [r1, #4]
 8007890:	4638      	mov	r0, r7
 8007892:	f104 060b 	add.w	r6, r4, #11
 8007896:	f000 fbdf 	bl	8008058 <__malloc_unlock>
 800789a:	f026 0607 	bic.w	r6, r6, #7
 800789e:	1d23      	adds	r3, r4, #4
 80078a0:	1af2      	subs	r2, r6, r3
 80078a2:	d0b6      	beq.n	8007812 <_malloc_r+0x22>
 80078a4:	1b9b      	subs	r3, r3, r6
 80078a6:	50a3      	str	r3, [r4, r2]
 80078a8:	e7b3      	b.n	8007812 <_malloc_r+0x22>
 80078aa:	6862      	ldr	r2, [r4, #4]
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	bf0c      	ite	eq
 80078b0:	6032      	streq	r2, [r6, #0]
 80078b2:	605a      	strne	r2, [r3, #4]
 80078b4:	e7ec      	b.n	8007890 <_malloc_r+0xa0>
 80078b6:	4623      	mov	r3, r4
 80078b8:	6864      	ldr	r4, [r4, #4]
 80078ba:	e7b2      	b.n	8007822 <_malloc_r+0x32>
 80078bc:	4634      	mov	r4, r6
 80078be:	6876      	ldr	r6, [r6, #4]
 80078c0:	e7b9      	b.n	8007836 <_malloc_r+0x46>
 80078c2:	230c      	movs	r3, #12
 80078c4:	4638      	mov	r0, r7
 80078c6:	603b      	str	r3, [r7, #0]
 80078c8:	f000 fbc6 	bl	8008058 <__malloc_unlock>
 80078cc:	e7a1      	b.n	8007812 <_malloc_r+0x22>
 80078ce:	6025      	str	r5, [r4, #0]
 80078d0:	e7de      	b.n	8007890 <_malloc_r+0xa0>
 80078d2:	bf00      	nop
 80078d4:	200003a8 	.word	0x200003a8

080078d8 <__ssputs_r>:
 80078d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078dc:	688e      	ldr	r6, [r1, #8]
 80078de:	4682      	mov	sl, r0
 80078e0:	429e      	cmp	r6, r3
 80078e2:	460c      	mov	r4, r1
 80078e4:	4690      	mov	r8, r2
 80078e6:	461f      	mov	r7, r3
 80078e8:	d838      	bhi.n	800795c <__ssputs_r+0x84>
 80078ea:	898a      	ldrh	r2, [r1, #12]
 80078ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078f0:	d032      	beq.n	8007958 <__ssputs_r+0x80>
 80078f2:	6825      	ldr	r5, [r4, #0]
 80078f4:	6909      	ldr	r1, [r1, #16]
 80078f6:	3301      	adds	r3, #1
 80078f8:	eba5 0901 	sub.w	r9, r5, r1
 80078fc:	6965      	ldr	r5, [r4, #20]
 80078fe:	444b      	add	r3, r9
 8007900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007904:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007908:	106d      	asrs	r5, r5, #1
 800790a:	429d      	cmp	r5, r3
 800790c:	bf38      	it	cc
 800790e:	461d      	movcc	r5, r3
 8007910:	0553      	lsls	r3, r2, #21
 8007912:	d531      	bpl.n	8007978 <__ssputs_r+0xa0>
 8007914:	4629      	mov	r1, r5
 8007916:	f7ff ff6b 	bl	80077f0 <_malloc_r>
 800791a:	4606      	mov	r6, r0
 800791c:	b950      	cbnz	r0, 8007934 <__ssputs_r+0x5c>
 800791e:	230c      	movs	r3, #12
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	f8ca 3000 	str.w	r3, [sl]
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800792e:	81a3      	strh	r3, [r4, #12]
 8007930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007934:	464a      	mov	r2, r9
 8007936:	6921      	ldr	r1, [r4, #16]
 8007938:	f7ff fb4e 	bl	8006fd8 <memcpy>
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007946:	81a3      	strh	r3, [r4, #12]
 8007948:	6126      	str	r6, [r4, #16]
 800794a:	444e      	add	r6, r9
 800794c:	6026      	str	r6, [r4, #0]
 800794e:	463e      	mov	r6, r7
 8007950:	6165      	str	r5, [r4, #20]
 8007952:	eba5 0509 	sub.w	r5, r5, r9
 8007956:	60a5      	str	r5, [r4, #8]
 8007958:	42be      	cmp	r6, r7
 800795a:	d900      	bls.n	800795e <__ssputs_r+0x86>
 800795c:	463e      	mov	r6, r7
 800795e:	4632      	mov	r2, r6
 8007960:	4641      	mov	r1, r8
 8007962:	6820      	ldr	r0, [r4, #0]
 8007964:	f000 fb58 	bl	8008018 <memmove>
 8007968:	68a3      	ldr	r3, [r4, #8]
 800796a:	2000      	movs	r0, #0
 800796c:	1b9b      	subs	r3, r3, r6
 800796e:	60a3      	str	r3, [r4, #8]
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	4433      	add	r3, r6
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	e7db      	b.n	8007930 <__ssputs_r+0x58>
 8007978:	462a      	mov	r2, r5
 800797a:	f000 fb73 	bl	8008064 <_realloc_r>
 800797e:	4606      	mov	r6, r0
 8007980:	2800      	cmp	r0, #0
 8007982:	d1e1      	bne.n	8007948 <__ssputs_r+0x70>
 8007984:	4650      	mov	r0, sl
 8007986:	6921      	ldr	r1, [r4, #16]
 8007988:	f7ff feca 	bl	8007720 <_free_r>
 800798c:	e7c7      	b.n	800791e <__ssputs_r+0x46>
	...

08007990 <_svfiprintf_r>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	4698      	mov	r8, r3
 8007996:	898b      	ldrh	r3, [r1, #12]
 8007998:	4607      	mov	r7, r0
 800799a:	061b      	lsls	r3, r3, #24
 800799c:	460d      	mov	r5, r1
 800799e:	4614      	mov	r4, r2
 80079a0:	b09d      	sub	sp, #116	; 0x74
 80079a2:	d50e      	bpl.n	80079c2 <_svfiprintf_r+0x32>
 80079a4:	690b      	ldr	r3, [r1, #16]
 80079a6:	b963      	cbnz	r3, 80079c2 <_svfiprintf_r+0x32>
 80079a8:	2140      	movs	r1, #64	; 0x40
 80079aa:	f7ff ff21 	bl	80077f0 <_malloc_r>
 80079ae:	6028      	str	r0, [r5, #0]
 80079b0:	6128      	str	r0, [r5, #16]
 80079b2:	b920      	cbnz	r0, 80079be <_svfiprintf_r+0x2e>
 80079b4:	230c      	movs	r3, #12
 80079b6:	603b      	str	r3, [r7, #0]
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	e0d1      	b.n	8007b62 <_svfiprintf_r+0x1d2>
 80079be:	2340      	movs	r3, #64	; 0x40
 80079c0:	616b      	str	r3, [r5, #20]
 80079c2:	2300      	movs	r3, #0
 80079c4:	9309      	str	r3, [sp, #36]	; 0x24
 80079c6:	2320      	movs	r3, #32
 80079c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079cc:	2330      	movs	r3, #48	; 0x30
 80079ce:	f04f 0901 	mov.w	r9, #1
 80079d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80079d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b7c <_svfiprintf_r+0x1ec>
 80079da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079de:	4623      	mov	r3, r4
 80079e0:	469a      	mov	sl, r3
 80079e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079e6:	b10a      	cbz	r2, 80079ec <_svfiprintf_r+0x5c>
 80079e8:	2a25      	cmp	r2, #37	; 0x25
 80079ea:	d1f9      	bne.n	80079e0 <_svfiprintf_r+0x50>
 80079ec:	ebba 0b04 	subs.w	fp, sl, r4
 80079f0:	d00b      	beq.n	8007a0a <_svfiprintf_r+0x7a>
 80079f2:	465b      	mov	r3, fp
 80079f4:	4622      	mov	r2, r4
 80079f6:	4629      	mov	r1, r5
 80079f8:	4638      	mov	r0, r7
 80079fa:	f7ff ff6d 	bl	80078d8 <__ssputs_r>
 80079fe:	3001      	adds	r0, #1
 8007a00:	f000 80aa 	beq.w	8007b58 <_svfiprintf_r+0x1c8>
 8007a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a06:	445a      	add	r2, fp
 8007a08:	9209      	str	r2, [sp, #36]	; 0x24
 8007a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 80a2 	beq.w	8007b58 <_svfiprintf_r+0x1c8>
 8007a14:	2300      	movs	r3, #0
 8007a16:	f04f 32ff 	mov.w	r2, #4294967295
 8007a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a1e:	f10a 0a01 	add.w	sl, sl, #1
 8007a22:	9304      	str	r3, [sp, #16]
 8007a24:	9307      	str	r3, [sp, #28]
 8007a26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a2c:	4654      	mov	r4, sl
 8007a2e:	2205      	movs	r2, #5
 8007a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a34:	4851      	ldr	r0, [pc, #324]	; (8007b7c <_svfiprintf_r+0x1ec>)
 8007a36:	f7ff fac1 	bl	8006fbc <memchr>
 8007a3a:	9a04      	ldr	r2, [sp, #16]
 8007a3c:	b9d8      	cbnz	r0, 8007a76 <_svfiprintf_r+0xe6>
 8007a3e:	06d0      	lsls	r0, r2, #27
 8007a40:	bf44      	itt	mi
 8007a42:	2320      	movmi	r3, #32
 8007a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a48:	0711      	lsls	r1, r2, #28
 8007a4a:	bf44      	itt	mi
 8007a4c:	232b      	movmi	r3, #43	; 0x2b
 8007a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a52:	f89a 3000 	ldrb.w	r3, [sl]
 8007a56:	2b2a      	cmp	r3, #42	; 0x2a
 8007a58:	d015      	beq.n	8007a86 <_svfiprintf_r+0xf6>
 8007a5a:	4654      	mov	r4, sl
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	f04f 0c0a 	mov.w	ip, #10
 8007a62:	9a07      	ldr	r2, [sp, #28]
 8007a64:	4621      	mov	r1, r4
 8007a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a6a:	3b30      	subs	r3, #48	; 0x30
 8007a6c:	2b09      	cmp	r3, #9
 8007a6e:	d94e      	bls.n	8007b0e <_svfiprintf_r+0x17e>
 8007a70:	b1b0      	cbz	r0, 8007aa0 <_svfiprintf_r+0x110>
 8007a72:	9207      	str	r2, [sp, #28]
 8007a74:	e014      	b.n	8007aa0 <_svfiprintf_r+0x110>
 8007a76:	eba0 0308 	sub.w	r3, r0, r8
 8007a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	46a2      	mov	sl, r4
 8007a82:	9304      	str	r3, [sp, #16]
 8007a84:	e7d2      	b.n	8007a2c <_svfiprintf_r+0x9c>
 8007a86:	9b03      	ldr	r3, [sp, #12]
 8007a88:	1d19      	adds	r1, r3, #4
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	9103      	str	r1, [sp, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	bfbb      	ittet	lt
 8007a92:	425b      	neglt	r3, r3
 8007a94:	f042 0202 	orrlt.w	r2, r2, #2
 8007a98:	9307      	strge	r3, [sp, #28]
 8007a9a:	9307      	strlt	r3, [sp, #28]
 8007a9c:	bfb8      	it	lt
 8007a9e:	9204      	strlt	r2, [sp, #16]
 8007aa0:	7823      	ldrb	r3, [r4, #0]
 8007aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8007aa4:	d10c      	bne.n	8007ac0 <_svfiprintf_r+0x130>
 8007aa6:	7863      	ldrb	r3, [r4, #1]
 8007aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aaa:	d135      	bne.n	8007b18 <_svfiprintf_r+0x188>
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	3402      	adds	r4, #2
 8007ab0:	1d1a      	adds	r2, r3, #4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	9203      	str	r2, [sp, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	bfb8      	it	lt
 8007aba:	f04f 33ff 	movlt.w	r3, #4294967295
 8007abe:	9305      	str	r3, [sp, #20]
 8007ac0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007b80 <_svfiprintf_r+0x1f0>
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	4650      	mov	r0, sl
 8007ac8:	7821      	ldrb	r1, [r4, #0]
 8007aca:	f7ff fa77 	bl	8006fbc <memchr>
 8007ace:	b140      	cbz	r0, 8007ae2 <_svfiprintf_r+0x152>
 8007ad0:	2340      	movs	r3, #64	; 0x40
 8007ad2:	eba0 000a 	sub.w	r0, r0, sl
 8007ad6:	fa03 f000 	lsl.w	r0, r3, r0
 8007ada:	9b04      	ldr	r3, [sp, #16]
 8007adc:	3401      	adds	r4, #1
 8007ade:	4303      	orrs	r3, r0
 8007ae0:	9304      	str	r3, [sp, #16]
 8007ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae6:	2206      	movs	r2, #6
 8007ae8:	4826      	ldr	r0, [pc, #152]	; (8007b84 <_svfiprintf_r+0x1f4>)
 8007aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aee:	f7ff fa65 	bl	8006fbc <memchr>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d038      	beq.n	8007b68 <_svfiprintf_r+0x1d8>
 8007af6:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <_svfiprintf_r+0x1f8>)
 8007af8:	bb1b      	cbnz	r3, 8007b42 <_svfiprintf_r+0x1b2>
 8007afa:	9b03      	ldr	r3, [sp, #12]
 8007afc:	3307      	adds	r3, #7
 8007afe:	f023 0307 	bic.w	r3, r3, #7
 8007b02:	3308      	adds	r3, #8
 8007b04:	9303      	str	r3, [sp, #12]
 8007b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b08:	4433      	add	r3, r6
 8007b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0c:	e767      	b.n	80079de <_svfiprintf_r+0x4e>
 8007b0e:	460c      	mov	r4, r1
 8007b10:	2001      	movs	r0, #1
 8007b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b16:	e7a5      	b.n	8007a64 <_svfiprintf_r+0xd4>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f04f 0c0a 	mov.w	ip, #10
 8007b1e:	4619      	mov	r1, r3
 8007b20:	3401      	adds	r4, #1
 8007b22:	9305      	str	r3, [sp, #20]
 8007b24:	4620      	mov	r0, r4
 8007b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b2a:	3a30      	subs	r2, #48	; 0x30
 8007b2c:	2a09      	cmp	r2, #9
 8007b2e:	d903      	bls.n	8007b38 <_svfiprintf_r+0x1a8>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0c5      	beq.n	8007ac0 <_svfiprintf_r+0x130>
 8007b34:	9105      	str	r1, [sp, #20]
 8007b36:	e7c3      	b.n	8007ac0 <_svfiprintf_r+0x130>
 8007b38:	4604      	mov	r4, r0
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b40:	e7f0      	b.n	8007b24 <_svfiprintf_r+0x194>
 8007b42:	ab03      	add	r3, sp, #12
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	462a      	mov	r2, r5
 8007b48:	4638      	mov	r0, r7
 8007b4a:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <_svfiprintf_r+0x1fc>)
 8007b4c:	a904      	add	r1, sp, #16
 8007b4e:	f7fd fc61 	bl	8005414 <_printf_float>
 8007b52:	1c42      	adds	r2, r0, #1
 8007b54:	4606      	mov	r6, r0
 8007b56:	d1d6      	bne.n	8007b06 <_svfiprintf_r+0x176>
 8007b58:	89ab      	ldrh	r3, [r5, #12]
 8007b5a:	065b      	lsls	r3, r3, #25
 8007b5c:	f53f af2c 	bmi.w	80079b8 <_svfiprintf_r+0x28>
 8007b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b62:	b01d      	add	sp, #116	; 0x74
 8007b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b68:	ab03      	add	r3, sp, #12
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	462a      	mov	r2, r5
 8007b6e:	4638      	mov	r0, r7
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <_svfiprintf_r+0x1fc>)
 8007b72:	a904      	add	r1, sp, #16
 8007b74:	f7fd feea 	bl	800594c <_printf_i>
 8007b78:	e7eb      	b.n	8007b52 <_svfiprintf_r+0x1c2>
 8007b7a:	bf00      	nop
 8007b7c:	08008654 	.word	0x08008654
 8007b80:	0800865a 	.word	0x0800865a
 8007b84:	0800865e 	.word	0x0800865e
 8007b88:	08005415 	.word	0x08005415
 8007b8c:	080078d9 	.word	0x080078d9

08007b90 <__sfputc_r>:
 8007b90:	6893      	ldr	r3, [r2, #8]
 8007b92:	b410      	push	{r4}
 8007b94:	3b01      	subs	r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	6093      	str	r3, [r2, #8]
 8007b9a:	da07      	bge.n	8007bac <__sfputc_r+0x1c>
 8007b9c:	6994      	ldr	r4, [r2, #24]
 8007b9e:	42a3      	cmp	r3, r4
 8007ba0:	db01      	blt.n	8007ba6 <__sfputc_r+0x16>
 8007ba2:	290a      	cmp	r1, #10
 8007ba4:	d102      	bne.n	8007bac <__sfputc_r+0x1c>
 8007ba6:	bc10      	pop	{r4}
 8007ba8:	f7fe b8a4 	b.w	8005cf4 <__swbuf_r>
 8007bac:	6813      	ldr	r3, [r2, #0]
 8007bae:	1c58      	adds	r0, r3, #1
 8007bb0:	6010      	str	r0, [r2, #0]
 8007bb2:	7019      	strb	r1, [r3, #0]
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	bc10      	pop	{r4}
 8007bb8:	4770      	bx	lr

08007bba <__sfputs_r>:
 8007bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	460f      	mov	r7, r1
 8007bc0:	4614      	mov	r4, r2
 8007bc2:	18d5      	adds	r5, r2, r3
 8007bc4:	42ac      	cmp	r4, r5
 8007bc6:	d101      	bne.n	8007bcc <__sfputs_r+0x12>
 8007bc8:	2000      	movs	r0, #0
 8007bca:	e007      	b.n	8007bdc <__sfputs_r+0x22>
 8007bcc:	463a      	mov	r2, r7
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd4:	f7ff ffdc 	bl	8007b90 <__sfputc_r>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d1f3      	bne.n	8007bc4 <__sfputs_r+0xa>
 8007bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007be0 <_vfiprintf_r>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	460d      	mov	r5, r1
 8007be6:	4614      	mov	r4, r2
 8007be8:	4698      	mov	r8, r3
 8007bea:	4606      	mov	r6, r0
 8007bec:	b09d      	sub	sp, #116	; 0x74
 8007bee:	b118      	cbz	r0, 8007bf8 <_vfiprintf_r+0x18>
 8007bf0:	6983      	ldr	r3, [r0, #24]
 8007bf2:	b90b      	cbnz	r3, 8007bf8 <_vfiprintf_r+0x18>
 8007bf4:	f7ff f8d0 	bl	8006d98 <__sinit>
 8007bf8:	4b89      	ldr	r3, [pc, #548]	; (8007e20 <_vfiprintf_r+0x240>)
 8007bfa:	429d      	cmp	r5, r3
 8007bfc:	d11b      	bne.n	8007c36 <_vfiprintf_r+0x56>
 8007bfe:	6875      	ldr	r5, [r6, #4]
 8007c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c02:	07d9      	lsls	r1, r3, #31
 8007c04:	d405      	bmi.n	8007c12 <_vfiprintf_r+0x32>
 8007c06:	89ab      	ldrh	r3, [r5, #12]
 8007c08:	059a      	lsls	r2, r3, #22
 8007c0a:	d402      	bmi.n	8007c12 <_vfiprintf_r+0x32>
 8007c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c0e:	f7ff f966 	bl	8006ede <__retarget_lock_acquire_recursive>
 8007c12:	89ab      	ldrh	r3, [r5, #12]
 8007c14:	071b      	lsls	r3, r3, #28
 8007c16:	d501      	bpl.n	8007c1c <_vfiprintf_r+0x3c>
 8007c18:	692b      	ldr	r3, [r5, #16]
 8007c1a:	b9eb      	cbnz	r3, 8007c58 <_vfiprintf_r+0x78>
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7fe f8ba 	bl	8005d98 <__swsetup_r>
 8007c24:	b1c0      	cbz	r0, 8007c58 <_vfiprintf_r+0x78>
 8007c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c28:	07dc      	lsls	r4, r3, #31
 8007c2a:	d50e      	bpl.n	8007c4a <_vfiprintf_r+0x6a>
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	b01d      	add	sp, #116	; 0x74
 8007c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c36:	4b7b      	ldr	r3, [pc, #492]	; (8007e24 <_vfiprintf_r+0x244>)
 8007c38:	429d      	cmp	r5, r3
 8007c3a:	d101      	bne.n	8007c40 <_vfiprintf_r+0x60>
 8007c3c:	68b5      	ldr	r5, [r6, #8]
 8007c3e:	e7df      	b.n	8007c00 <_vfiprintf_r+0x20>
 8007c40:	4b79      	ldr	r3, [pc, #484]	; (8007e28 <_vfiprintf_r+0x248>)
 8007c42:	429d      	cmp	r5, r3
 8007c44:	bf08      	it	eq
 8007c46:	68f5      	ldreq	r5, [r6, #12]
 8007c48:	e7da      	b.n	8007c00 <_vfiprintf_r+0x20>
 8007c4a:	89ab      	ldrh	r3, [r5, #12]
 8007c4c:	0598      	lsls	r0, r3, #22
 8007c4e:	d4ed      	bmi.n	8007c2c <_vfiprintf_r+0x4c>
 8007c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c52:	f7ff f945 	bl	8006ee0 <__retarget_lock_release_recursive>
 8007c56:	e7e9      	b.n	8007c2c <_vfiprintf_r+0x4c>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c5c:	2320      	movs	r3, #32
 8007c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c62:	2330      	movs	r3, #48	; 0x30
 8007c64:	f04f 0901 	mov.w	r9, #1
 8007c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c6c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007e2c <_vfiprintf_r+0x24c>
 8007c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c74:	4623      	mov	r3, r4
 8007c76:	469a      	mov	sl, r3
 8007c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c7c:	b10a      	cbz	r2, 8007c82 <_vfiprintf_r+0xa2>
 8007c7e:	2a25      	cmp	r2, #37	; 0x25
 8007c80:	d1f9      	bne.n	8007c76 <_vfiprintf_r+0x96>
 8007c82:	ebba 0b04 	subs.w	fp, sl, r4
 8007c86:	d00b      	beq.n	8007ca0 <_vfiprintf_r+0xc0>
 8007c88:	465b      	mov	r3, fp
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7ff ff93 	bl	8007bba <__sfputs_r>
 8007c94:	3001      	adds	r0, #1
 8007c96:	f000 80aa 	beq.w	8007dee <_vfiprintf_r+0x20e>
 8007c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c9c:	445a      	add	r2, fp
 8007c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8007ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 80a2 	beq.w	8007dee <_vfiprintf_r+0x20e>
 8007caa:	2300      	movs	r3, #0
 8007cac:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cb4:	f10a 0a01 	add.w	sl, sl, #1
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	9307      	str	r3, [sp, #28]
 8007cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8007cc2:	4654      	mov	r4, sl
 8007cc4:	2205      	movs	r2, #5
 8007cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cca:	4858      	ldr	r0, [pc, #352]	; (8007e2c <_vfiprintf_r+0x24c>)
 8007ccc:	f7ff f976 	bl	8006fbc <memchr>
 8007cd0:	9a04      	ldr	r2, [sp, #16]
 8007cd2:	b9d8      	cbnz	r0, 8007d0c <_vfiprintf_r+0x12c>
 8007cd4:	06d1      	lsls	r1, r2, #27
 8007cd6:	bf44      	itt	mi
 8007cd8:	2320      	movmi	r3, #32
 8007cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cde:	0713      	lsls	r3, r2, #28
 8007ce0:	bf44      	itt	mi
 8007ce2:	232b      	movmi	r3, #43	; 0x2b
 8007ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cec:	2b2a      	cmp	r3, #42	; 0x2a
 8007cee:	d015      	beq.n	8007d1c <_vfiprintf_r+0x13c>
 8007cf0:	4654      	mov	r4, sl
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	f04f 0c0a 	mov.w	ip, #10
 8007cf8:	9a07      	ldr	r2, [sp, #28]
 8007cfa:	4621      	mov	r1, r4
 8007cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d00:	3b30      	subs	r3, #48	; 0x30
 8007d02:	2b09      	cmp	r3, #9
 8007d04:	d94e      	bls.n	8007da4 <_vfiprintf_r+0x1c4>
 8007d06:	b1b0      	cbz	r0, 8007d36 <_vfiprintf_r+0x156>
 8007d08:	9207      	str	r2, [sp, #28]
 8007d0a:	e014      	b.n	8007d36 <_vfiprintf_r+0x156>
 8007d0c:	eba0 0308 	sub.w	r3, r0, r8
 8007d10:	fa09 f303 	lsl.w	r3, r9, r3
 8007d14:	4313      	orrs	r3, r2
 8007d16:	46a2      	mov	sl, r4
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	e7d2      	b.n	8007cc2 <_vfiprintf_r+0xe2>
 8007d1c:	9b03      	ldr	r3, [sp, #12]
 8007d1e:	1d19      	adds	r1, r3, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	9103      	str	r1, [sp, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bfbb      	ittet	lt
 8007d28:	425b      	neglt	r3, r3
 8007d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d2e:	9307      	strge	r3, [sp, #28]
 8007d30:	9307      	strlt	r3, [sp, #28]
 8007d32:	bfb8      	it	lt
 8007d34:	9204      	strlt	r2, [sp, #16]
 8007d36:	7823      	ldrb	r3, [r4, #0]
 8007d38:	2b2e      	cmp	r3, #46	; 0x2e
 8007d3a:	d10c      	bne.n	8007d56 <_vfiprintf_r+0x176>
 8007d3c:	7863      	ldrb	r3, [r4, #1]
 8007d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d40:	d135      	bne.n	8007dae <_vfiprintf_r+0x1ce>
 8007d42:	9b03      	ldr	r3, [sp, #12]
 8007d44:	3402      	adds	r4, #2
 8007d46:	1d1a      	adds	r2, r3, #4
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	9203      	str	r2, [sp, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	bfb8      	it	lt
 8007d50:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d54:	9305      	str	r3, [sp, #20]
 8007d56:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007e30 <_vfiprintf_r+0x250>
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	4650      	mov	r0, sl
 8007d5e:	7821      	ldrb	r1, [r4, #0]
 8007d60:	f7ff f92c 	bl	8006fbc <memchr>
 8007d64:	b140      	cbz	r0, 8007d78 <_vfiprintf_r+0x198>
 8007d66:	2340      	movs	r3, #64	; 0x40
 8007d68:	eba0 000a 	sub.w	r0, r0, sl
 8007d6c:	fa03 f000 	lsl.w	r0, r3, r0
 8007d70:	9b04      	ldr	r3, [sp, #16]
 8007d72:	3401      	adds	r4, #1
 8007d74:	4303      	orrs	r3, r0
 8007d76:	9304      	str	r3, [sp, #16]
 8007d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d7c:	2206      	movs	r2, #6
 8007d7e:	482d      	ldr	r0, [pc, #180]	; (8007e34 <_vfiprintf_r+0x254>)
 8007d80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d84:	f7ff f91a 	bl	8006fbc <memchr>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d03f      	beq.n	8007e0c <_vfiprintf_r+0x22c>
 8007d8c:	4b2a      	ldr	r3, [pc, #168]	; (8007e38 <_vfiprintf_r+0x258>)
 8007d8e:	bb1b      	cbnz	r3, 8007dd8 <_vfiprintf_r+0x1f8>
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	3307      	adds	r3, #7
 8007d94:	f023 0307 	bic.w	r3, r3, #7
 8007d98:	3308      	adds	r3, #8
 8007d9a:	9303      	str	r3, [sp, #12]
 8007d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d9e:	443b      	add	r3, r7
 8007da0:	9309      	str	r3, [sp, #36]	; 0x24
 8007da2:	e767      	b.n	8007c74 <_vfiprintf_r+0x94>
 8007da4:	460c      	mov	r4, r1
 8007da6:	2001      	movs	r0, #1
 8007da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dac:	e7a5      	b.n	8007cfa <_vfiprintf_r+0x11a>
 8007dae:	2300      	movs	r3, #0
 8007db0:	f04f 0c0a 	mov.w	ip, #10
 8007db4:	4619      	mov	r1, r3
 8007db6:	3401      	adds	r4, #1
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc0:	3a30      	subs	r2, #48	; 0x30
 8007dc2:	2a09      	cmp	r2, #9
 8007dc4:	d903      	bls.n	8007dce <_vfiprintf_r+0x1ee>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0c5      	beq.n	8007d56 <_vfiprintf_r+0x176>
 8007dca:	9105      	str	r1, [sp, #20]
 8007dcc:	e7c3      	b.n	8007d56 <_vfiprintf_r+0x176>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dd6:	e7f0      	b.n	8007dba <_vfiprintf_r+0x1da>
 8007dd8:	ab03      	add	r3, sp, #12
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	462a      	mov	r2, r5
 8007dde:	4630      	mov	r0, r6
 8007de0:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <_vfiprintf_r+0x25c>)
 8007de2:	a904      	add	r1, sp, #16
 8007de4:	f7fd fb16 	bl	8005414 <_printf_float>
 8007de8:	4607      	mov	r7, r0
 8007dea:	1c78      	adds	r0, r7, #1
 8007dec:	d1d6      	bne.n	8007d9c <_vfiprintf_r+0x1bc>
 8007dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df0:	07d9      	lsls	r1, r3, #31
 8007df2:	d405      	bmi.n	8007e00 <_vfiprintf_r+0x220>
 8007df4:	89ab      	ldrh	r3, [r5, #12]
 8007df6:	059a      	lsls	r2, r3, #22
 8007df8:	d402      	bmi.n	8007e00 <_vfiprintf_r+0x220>
 8007dfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dfc:	f7ff f870 	bl	8006ee0 <__retarget_lock_release_recursive>
 8007e00:	89ab      	ldrh	r3, [r5, #12]
 8007e02:	065b      	lsls	r3, r3, #25
 8007e04:	f53f af12 	bmi.w	8007c2c <_vfiprintf_r+0x4c>
 8007e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e0a:	e711      	b.n	8007c30 <_vfiprintf_r+0x50>
 8007e0c:	ab03      	add	r3, sp, #12
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	462a      	mov	r2, r5
 8007e12:	4630      	mov	r0, r6
 8007e14:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <_vfiprintf_r+0x25c>)
 8007e16:	a904      	add	r1, sp, #16
 8007e18:	f7fd fd98 	bl	800594c <_printf_i>
 8007e1c:	e7e4      	b.n	8007de8 <_vfiprintf_r+0x208>
 8007e1e:	bf00      	nop
 8007e20:	080084b8 	.word	0x080084b8
 8007e24:	080084d8 	.word	0x080084d8
 8007e28:	08008498 	.word	0x08008498
 8007e2c:	08008654 	.word	0x08008654
 8007e30:	0800865a 	.word	0x0800865a
 8007e34:	0800865e 	.word	0x0800865e
 8007e38:	08005415 	.word	0x08005415
 8007e3c:	08007bbb 	.word	0x08007bbb

08007e40 <_sbrk_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	2300      	movs	r3, #0
 8007e44:	4d05      	ldr	r5, [pc, #20]	; (8007e5c <_sbrk_r+0x1c>)
 8007e46:	4604      	mov	r4, r0
 8007e48:	4608      	mov	r0, r1
 8007e4a:	602b      	str	r3, [r5, #0]
 8007e4c:	f7fa ff46 	bl	8002cdc <_sbrk>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_sbrk_r+0x1a>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_sbrk_r+0x1a>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	200003b0 	.word	0x200003b0

08007e60 <__sread>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	460c      	mov	r4, r1
 8007e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e68:	f000 f92c 	bl	80080c4 <_read_r>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	bfab      	itete	ge
 8007e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e72:	89a3      	ldrhlt	r3, [r4, #12]
 8007e74:	181b      	addge	r3, r3, r0
 8007e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e7a:	bfac      	ite	ge
 8007e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e7e:	81a3      	strhlt	r3, [r4, #12]
 8007e80:	bd10      	pop	{r4, pc}

08007e82 <__swrite>:
 8007e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e86:	461f      	mov	r7, r3
 8007e88:	898b      	ldrh	r3, [r1, #12]
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	05db      	lsls	r3, r3, #23
 8007e8e:	460c      	mov	r4, r1
 8007e90:	4616      	mov	r6, r2
 8007e92:	d505      	bpl.n	8007ea0 <__swrite+0x1e>
 8007e94:	2302      	movs	r3, #2
 8007e96:	2200      	movs	r2, #0
 8007e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9c:	f000 f898 	bl	8007fd0 <_lseek_r>
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	4632      	mov	r2, r6
 8007ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ea8:	81a3      	strh	r3, [r4, #12]
 8007eaa:	4628      	mov	r0, r5
 8007eac:	463b      	mov	r3, r7
 8007eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb6:	f000 b817 	b.w	8007ee8 <_write_r>

08007eba <__sseek>:
 8007eba:	b510      	push	{r4, lr}
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec2:	f000 f885 	bl	8007fd0 <_lseek_r>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	89a3      	ldrh	r3, [r4, #12]
 8007eca:	bf15      	itete	ne
 8007ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ed6:	81a3      	strheq	r3, [r4, #12]
 8007ed8:	bf18      	it	ne
 8007eda:	81a3      	strhne	r3, [r4, #12]
 8007edc:	bd10      	pop	{r4, pc}

08007ede <__sclose>:
 8007ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee2:	f000 b831 	b.w	8007f48 <_close_r>
	...

08007ee8 <_write_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4604      	mov	r4, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	4611      	mov	r1, r2
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4d05      	ldr	r5, [pc, #20]	; (8007f08 <_write_r+0x20>)
 8007ef4:	602a      	str	r2, [r5, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f7fa fea3 	bl	8002c42 <_write>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d102      	bne.n	8007f06 <_write_r+0x1e>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	b103      	cbz	r3, 8007f06 <_write_r+0x1e>
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	200003b0 	.word	0x200003b0

08007f0c <__assert_func>:
 8007f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f0e:	4614      	mov	r4, r2
 8007f10:	461a      	mov	r2, r3
 8007f12:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <__assert_func+0x2c>)
 8007f14:	4605      	mov	r5, r0
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68d8      	ldr	r0, [r3, #12]
 8007f1a:	b14c      	cbz	r4, 8007f30 <__assert_func+0x24>
 8007f1c:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <__assert_func+0x30>)
 8007f1e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f22:	9100      	str	r1, [sp, #0]
 8007f24:	462b      	mov	r3, r5
 8007f26:	4906      	ldr	r1, [pc, #24]	; (8007f40 <__assert_func+0x34>)
 8007f28:	f000 f81e 	bl	8007f68 <fiprintf>
 8007f2c:	f000 f8e9 	bl	8008102 <abort>
 8007f30:	4b04      	ldr	r3, [pc, #16]	; (8007f44 <__assert_func+0x38>)
 8007f32:	461c      	mov	r4, r3
 8007f34:	e7f3      	b.n	8007f1e <__assert_func+0x12>
 8007f36:	bf00      	nop
 8007f38:	20000018 	.word	0x20000018
 8007f3c:	08008665 	.word	0x08008665
 8007f40:	08008672 	.word	0x08008672
 8007f44:	080086a0 	.word	0x080086a0

08007f48 <_close_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4d05      	ldr	r5, [pc, #20]	; (8007f64 <_close_r+0x1c>)
 8007f4e:	4604      	mov	r4, r0
 8007f50:	4608      	mov	r0, r1
 8007f52:	602b      	str	r3, [r5, #0]
 8007f54:	f7fa fe91 	bl	8002c7a <_close>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_close_r+0x1a>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_close_r+0x1a>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	200003b0 	.word	0x200003b0

08007f68 <fiprintf>:
 8007f68:	b40e      	push	{r1, r2, r3}
 8007f6a:	b503      	push	{r0, r1, lr}
 8007f6c:	4601      	mov	r1, r0
 8007f6e:	ab03      	add	r3, sp, #12
 8007f70:	4805      	ldr	r0, [pc, #20]	; (8007f88 <fiprintf+0x20>)
 8007f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f76:	6800      	ldr	r0, [r0, #0]
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	f7ff fe31 	bl	8007be0 <_vfiprintf_r>
 8007f7e:	b002      	add	sp, #8
 8007f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f84:	b003      	add	sp, #12
 8007f86:	4770      	bx	lr
 8007f88:	20000018 	.word	0x20000018

08007f8c <_fstat_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4d06      	ldr	r5, [pc, #24]	; (8007fac <_fstat_r+0x20>)
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	f7fa fe79 	bl	8002c90 <_fstat>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	d102      	bne.n	8007fa8 <_fstat_r+0x1c>
 8007fa2:	682b      	ldr	r3, [r5, #0]
 8007fa4:	b103      	cbz	r3, 8007fa8 <_fstat_r+0x1c>
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	bf00      	nop
 8007fac:	200003b0 	.word	0x200003b0

08007fb0 <_isatty_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	4d05      	ldr	r5, [pc, #20]	; (8007fcc <_isatty_r+0x1c>)
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	f7fa fe77 	bl	8002cae <_isatty>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_isatty_r+0x1a>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_isatty_r+0x1a>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	200003b0 	.word	0x200003b0

08007fd0 <_lseek_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4d05      	ldr	r5, [pc, #20]	; (8007ff0 <_lseek_r+0x20>)
 8007fdc:	602a      	str	r2, [r5, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f7fa fe6f 	bl	8002cc2 <_lseek>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_lseek_r+0x1e>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_lseek_r+0x1e>
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	200003b0 	.word	0x200003b0

08007ff4 <__ascii_mbtowc>:
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	b901      	cbnz	r1, 8007ffa <__ascii_mbtowc+0x6>
 8007ff8:	a901      	add	r1, sp, #4
 8007ffa:	b142      	cbz	r2, 800800e <__ascii_mbtowc+0x1a>
 8007ffc:	b14b      	cbz	r3, 8008012 <__ascii_mbtowc+0x1e>
 8007ffe:	7813      	ldrb	r3, [r2, #0]
 8008000:	600b      	str	r3, [r1, #0]
 8008002:	7812      	ldrb	r2, [r2, #0]
 8008004:	1e10      	subs	r0, r2, #0
 8008006:	bf18      	it	ne
 8008008:	2001      	movne	r0, #1
 800800a:	b002      	add	sp, #8
 800800c:	4770      	bx	lr
 800800e:	4610      	mov	r0, r2
 8008010:	e7fb      	b.n	800800a <__ascii_mbtowc+0x16>
 8008012:	f06f 0001 	mvn.w	r0, #1
 8008016:	e7f8      	b.n	800800a <__ascii_mbtowc+0x16>

08008018 <memmove>:
 8008018:	4288      	cmp	r0, r1
 800801a:	b510      	push	{r4, lr}
 800801c:	eb01 0402 	add.w	r4, r1, r2
 8008020:	d902      	bls.n	8008028 <memmove+0x10>
 8008022:	4284      	cmp	r4, r0
 8008024:	4623      	mov	r3, r4
 8008026:	d807      	bhi.n	8008038 <memmove+0x20>
 8008028:	1e43      	subs	r3, r0, #1
 800802a:	42a1      	cmp	r1, r4
 800802c:	d008      	beq.n	8008040 <memmove+0x28>
 800802e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008036:	e7f8      	b.n	800802a <memmove+0x12>
 8008038:	4601      	mov	r1, r0
 800803a:	4402      	add	r2, r0
 800803c:	428a      	cmp	r2, r1
 800803e:	d100      	bne.n	8008042 <memmove+0x2a>
 8008040:	bd10      	pop	{r4, pc}
 8008042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800804a:	e7f7      	b.n	800803c <memmove+0x24>

0800804c <__malloc_lock>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__malloc_lock+0x8>)
 800804e:	f7fe bf46 	b.w	8006ede <__retarget_lock_acquire_recursive>
 8008052:	bf00      	nop
 8008054:	200003a4 	.word	0x200003a4

08008058 <__malloc_unlock>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__malloc_unlock+0x8>)
 800805a:	f7fe bf41 	b.w	8006ee0 <__retarget_lock_release_recursive>
 800805e:	bf00      	nop
 8008060:	200003a4 	.word	0x200003a4

08008064 <_realloc_r>:
 8008064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008068:	4680      	mov	r8, r0
 800806a:	4614      	mov	r4, r2
 800806c:	460e      	mov	r6, r1
 800806e:	b921      	cbnz	r1, 800807a <_realloc_r+0x16>
 8008070:	4611      	mov	r1, r2
 8008072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008076:	f7ff bbbb 	b.w	80077f0 <_malloc_r>
 800807a:	b92a      	cbnz	r2, 8008088 <_realloc_r+0x24>
 800807c:	f7ff fb50 	bl	8007720 <_free_r>
 8008080:	4625      	mov	r5, r4
 8008082:	4628      	mov	r0, r5
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	f000 f842 	bl	8008110 <_malloc_usable_size_r>
 800808c:	4284      	cmp	r4, r0
 800808e:	4607      	mov	r7, r0
 8008090:	d802      	bhi.n	8008098 <_realloc_r+0x34>
 8008092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008096:	d812      	bhi.n	80080be <_realloc_r+0x5a>
 8008098:	4621      	mov	r1, r4
 800809a:	4640      	mov	r0, r8
 800809c:	f7ff fba8 	bl	80077f0 <_malloc_r>
 80080a0:	4605      	mov	r5, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0ed      	beq.n	8008082 <_realloc_r+0x1e>
 80080a6:	42bc      	cmp	r4, r7
 80080a8:	4622      	mov	r2, r4
 80080aa:	4631      	mov	r1, r6
 80080ac:	bf28      	it	cs
 80080ae:	463a      	movcs	r2, r7
 80080b0:	f7fe ff92 	bl	8006fd8 <memcpy>
 80080b4:	4631      	mov	r1, r6
 80080b6:	4640      	mov	r0, r8
 80080b8:	f7ff fb32 	bl	8007720 <_free_r>
 80080bc:	e7e1      	b.n	8008082 <_realloc_r+0x1e>
 80080be:	4635      	mov	r5, r6
 80080c0:	e7df      	b.n	8008082 <_realloc_r+0x1e>
	...

080080c4 <_read_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	4611      	mov	r1, r2
 80080cc:	2200      	movs	r2, #0
 80080ce:	4d05      	ldr	r5, [pc, #20]	; (80080e4 <_read_r+0x20>)
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f7fa fd98 	bl	8002c08 <_read>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_read_r+0x1e>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_read_r+0x1e>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	200003b0 	.word	0x200003b0

080080e8 <__ascii_wctomb>:
 80080e8:	4603      	mov	r3, r0
 80080ea:	4608      	mov	r0, r1
 80080ec:	b141      	cbz	r1, 8008100 <__ascii_wctomb+0x18>
 80080ee:	2aff      	cmp	r2, #255	; 0xff
 80080f0:	d904      	bls.n	80080fc <__ascii_wctomb+0x14>
 80080f2:	228a      	movs	r2, #138	; 0x8a
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	4770      	bx	lr
 80080fc:	2001      	movs	r0, #1
 80080fe:	700a      	strb	r2, [r1, #0]
 8008100:	4770      	bx	lr

08008102 <abort>:
 8008102:	2006      	movs	r0, #6
 8008104:	b508      	push	{r3, lr}
 8008106:	f000 f833 	bl	8008170 <raise>
 800810a:	2001      	movs	r0, #1
 800810c:	f7fa fd72 	bl	8002bf4 <_exit>

08008110 <_malloc_usable_size_r>:
 8008110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008114:	1f18      	subs	r0, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	bfbc      	itt	lt
 800811a:	580b      	ldrlt	r3, [r1, r0]
 800811c:	18c0      	addlt	r0, r0, r3
 800811e:	4770      	bx	lr

08008120 <_raise_r>:
 8008120:	291f      	cmp	r1, #31
 8008122:	b538      	push	{r3, r4, r5, lr}
 8008124:	4604      	mov	r4, r0
 8008126:	460d      	mov	r5, r1
 8008128:	d904      	bls.n	8008134 <_raise_r+0x14>
 800812a:	2316      	movs	r3, #22
 800812c:	6003      	str	r3, [r0, #0]
 800812e:	f04f 30ff 	mov.w	r0, #4294967295
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008136:	b112      	cbz	r2, 800813e <_raise_r+0x1e>
 8008138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800813c:	b94b      	cbnz	r3, 8008152 <_raise_r+0x32>
 800813e:	4620      	mov	r0, r4
 8008140:	f000 f830 	bl	80081a4 <_getpid_r>
 8008144:	462a      	mov	r2, r5
 8008146:	4601      	mov	r1, r0
 8008148:	4620      	mov	r0, r4
 800814a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800814e:	f000 b817 	b.w	8008180 <_kill_r>
 8008152:	2b01      	cmp	r3, #1
 8008154:	d00a      	beq.n	800816c <_raise_r+0x4c>
 8008156:	1c59      	adds	r1, r3, #1
 8008158:	d103      	bne.n	8008162 <_raise_r+0x42>
 800815a:	2316      	movs	r3, #22
 800815c:	6003      	str	r3, [r0, #0]
 800815e:	2001      	movs	r0, #1
 8008160:	e7e7      	b.n	8008132 <_raise_r+0x12>
 8008162:	2400      	movs	r4, #0
 8008164:	4628      	mov	r0, r5
 8008166:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800816a:	4798      	blx	r3
 800816c:	2000      	movs	r0, #0
 800816e:	e7e0      	b.n	8008132 <_raise_r+0x12>

08008170 <raise>:
 8008170:	4b02      	ldr	r3, [pc, #8]	; (800817c <raise+0xc>)
 8008172:	4601      	mov	r1, r0
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	f7ff bfd3 	b.w	8008120 <_raise_r>
 800817a:	bf00      	nop
 800817c:	20000018 	.word	0x20000018

08008180 <_kill_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	2300      	movs	r3, #0
 8008184:	4d06      	ldr	r5, [pc, #24]	; (80081a0 <_kill_r+0x20>)
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	4611      	mov	r1, r2
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	f7fa fd21 	bl	8002bd4 <_kill>
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	d102      	bne.n	800819c <_kill_r+0x1c>
 8008196:	682b      	ldr	r3, [r5, #0]
 8008198:	b103      	cbz	r3, 800819c <_kill_r+0x1c>
 800819a:	6023      	str	r3, [r4, #0]
 800819c:	bd38      	pop	{r3, r4, r5, pc}
 800819e:	bf00      	nop
 80081a0:	200003b0 	.word	0x200003b0

080081a4 <_getpid_r>:
 80081a4:	f7fa bd0f 	b.w	8002bc6 <_getpid>

080081a8 <_init>:
 80081a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081aa:	bf00      	nop
 80081ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ae:	bc08      	pop	{r3}
 80081b0:	469e      	mov	lr, r3
 80081b2:	4770      	bx	lr

080081b4 <_fini>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	bf00      	nop
 80081b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ba:	bc08      	pop	{r3}
 80081bc:	469e      	mov	lr, r3
 80081be:	4770      	bx	lr
=======
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009a      	lsls	r2, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <UART_SetConfig+0x118>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	0119      	lsls	r1, r3, #4
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009a      	lsls	r2, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005250:	4b1a      	ldr	r3, [pc, #104]	; (80052bc <UART_SetConfig+0x118>)
 8005252:	fba3 0302 	umull	r0, r3, r3, r2
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2064      	movs	r0, #100	; 0x64
 800525a:	fb00 f303 	mul.w	r3, r0, r3
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	3332      	adds	r3, #50	; 0x32
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <UART_SetConfig+0x118>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005270:	4419      	add	r1, r3
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	009a      	lsls	r2, r3, #2
 800527c:	441a      	add	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	fbb2 f2f3 	udiv	r2, r2, r3
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <UART_SetConfig+0x118>)
 800528a:	fba3 0302 	umull	r0, r3, r3, r2
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	2064      	movs	r0, #100	; 0x64
 8005292:	fb00 f303 	mul.w	r3, r0, r3
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	3332      	adds	r3, #50	; 0x32
 800529c:	4a07      	ldr	r2, [pc, #28]	; (80052bc <UART_SetConfig+0x118>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	f003 020f 	and.w	r2, r3, #15
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	440a      	add	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052b0:	bf00      	nop
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40013800 	.word	0x40013800
 80052bc:	51eb851f 	.word	0x51eb851f

080052c0 <__errno>:
 80052c0:	4b01      	ldr	r3, [pc, #4]	; (80052c8 <__errno+0x8>)
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000018 	.word	0x20000018

080052cc <__libc_init_array>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	2600      	movs	r6, #0
 80052d0:	4d0c      	ldr	r5, [pc, #48]	; (8005304 <__libc_init_array+0x38>)
 80052d2:	4c0d      	ldr	r4, [pc, #52]	; (8005308 <__libc_init_array+0x3c>)
 80052d4:	1b64      	subs	r4, r4, r5
 80052d6:	10a4      	asrs	r4, r4, #2
 80052d8:	42a6      	cmp	r6, r4
 80052da:	d109      	bne.n	80052f0 <__libc_init_array+0x24>
 80052dc:	f002 ff88 	bl	80081f0 <_init>
 80052e0:	2600      	movs	r6, #0
 80052e2:	4d0a      	ldr	r5, [pc, #40]	; (800530c <__libc_init_array+0x40>)
 80052e4:	4c0a      	ldr	r4, [pc, #40]	; (8005310 <__libc_init_array+0x44>)
 80052e6:	1b64      	subs	r4, r4, r5
 80052e8:	10a4      	asrs	r4, r4, #2
 80052ea:	42a6      	cmp	r6, r4
 80052ec:	d105      	bne.n	80052fa <__libc_init_array+0x2e>
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f4:	4798      	blx	r3
 80052f6:	3601      	adds	r6, #1
 80052f8:	e7ee      	b.n	80052d8 <__libc_init_array+0xc>
 80052fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fe:	4798      	blx	r3
 8005300:	3601      	adds	r6, #1
 8005302:	e7f2      	b.n	80052ea <__libc_init_array+0x1e>
 8005304:	080087ec 	.word	0x080087ec
 8005308:	080087ec 	.word	0x080087ec
 800530c:	080087ec 	.word	0x080087ec
 8005310:	080087f0 	.word	0x080087f0

08005314 <memset>:
 8005314:	4603      	mov	r3, r0
 8005316:	4402      	add	r2, r0
 8005318:	4293      	cmp	r3, r2
 800531a:	d100      	bne.n	800531e <memset+0xa>
 800531c:	4770      	bx	lr
 800531e:	f803 1b01 	strb.w	r1, [r3], #1
 8005322:	e7f9      	b.n	8005318 <memset+0x4>

08005324 <__cvt>:
 8005324:	2b00      	cmp	r3, #0
 8005326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800532a:	461f      	mov	r7, r3
 800532c:	bfbb      	ittet	lt
 800532e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005332:	461f      	movlt	r7, r3
 8005334:	2300      	movge	r3, #0
 8005336:	232d      	movlt	r3, #45	; 0x2d
 8005338:	b088      	sub	sp, #32
 800533a:	4614      	mov	r4, r2
 800533c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800533e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005340:	7013      	strb	r3, [r2, #0]
 8005342:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005344:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005348:	f023 0820 	bic.w	r8, r3, #32
 800534c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005350:	d005      	beq.n	800535e <__cvt+0x3a>
 8005352:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005356:	d100      	bne.n	800535a <__cvt+0x36>
 8005358:	3501      	adds	r5, #1
 800535a:	2302      	movs	r3, #2
 800535c:	e000      	b.n	8005360 <__cvt+0x3c>
 800535e:	2303      	movs	r3, #3
 8005360:	aa07      	add	r2, sp, #28
 8005362:	9204      	str	r2, [sp, #16]
 8005364:	aa06      	add	r2, sp, #24
 8005366:	e9cd a202 	strd	sl, r2, [sp, #8]
 800536a:	e9cd 3500 	strd	r3, r5, [sp]
 800536e:	4622      	mov	r2, r4
 8005370:	463b      	mov	r3, r7
 8005372:	f000 fe31 	bl	8005fd8 <_dtoa_r>
 8005376:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800537a:	4606      	mov	r6, r0
 800537c:	d102      	bne.n	8005384 <__cvt+0x60>
 800537e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005380:	07db      	lsls	r3, r3, #31
 8005382:	d522      	bpl.n	80053ca <__cvt+0xa6>
 8005384:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005388:	eb06 0905 	add.w	r9, r6, r5
 800538c:	d110      	bne.n	80053b0 <__cvt+0x8c>
 800538e:	7833      	ldrb	r3, [r6, #0]
 8005390:	2b30      	cmp	r3, #48	; 0x30
 8005392:	d10a      	bne.n	80053aa <__cvt+0x86>
 8005394:	2200      	movs	r2, #0
 8005396:	2300      	movs	r3, #0
 8005398:	4620      	mov	r0, r4
 800539a:	4639      	mov	r1, r7
 800539c:	f7fb fbb8 	bl	8000b10 <__aeabi_dcmpeq>
 80053a0:	b918      	cbnz	r0, 80053aa <__cvt+0x86>
 80053a2:	f1c5 0501 	rsb	r5, r5, #1
 80053a6:	f8ca 5000 	str.w	r5, [sl]
 80053aa:	f8da 3000 	ldr.w	r3, [sl]
 80053ae:	4499      	add	r9, r3
 80053b0:	2200      	movs	r2, #0
 80053b2:	2300      	movs	r3, #0
 80053b4:	4620      	mov	r0, r4
 80053b6:	4639      	mov	r1, r7
 80053b8:	f7fb fbaa 	bl	8000b10 <__aeabi_dcmpeq>
 80053bc:	b108      	cbz	r0, 80053c2 <__cvt+0x9e>
 80053be:	f8cd 901c 	str.w	r9, [sp, #28]
 80053c2:	2230      	movs	r2, #48	; 0x30
 80053c4:	9b07      	ldr	r3, [sp, #28]
 80053c6:	454b      	cmp	r3, r9
 80053c8:	d307      	bcc.n	80053da <__cvt+0xb6>
 80053ca:	4630      	mov	r0, r6
 80053cc:	9b07      	ldr	r3, [sp, #28]
 80053ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80053d0:	1b9b      	subs	r3, r3, r6
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	b008      	add	sp, #32
 80053d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053da:	1c59      	adds	r1, r3, #1
 80053dc:	9107      	str	r1, [sp, #28]
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	e7f0      	b.n	80053c4 <__cvt+0xa0>

080053e2 <__exponent>:
 80053e2:	4603      	mov	r3, r0
 80053e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053e6:	2900      	cmp	r1, #0
 80053e8:	f803 2b02 	strb.w	r2, [r3], #2
 80053ec:	bfb6      	itet	lt
 80053ee:	222d      	movlt	r2, #45	; 0x2d
 80053f0:	222b      	movge	r2, #43	; 0x2b
 80053f2:	4249      	neglt	r1, r1
 80053f4:	2909      	cmp	r1, #9
 80053f6:	7042      	strb	r2, [r0, #1]
 80053f8:	dd2b      	ble.n	8005452 <__exponent+0x70>
 80053fa:	f10d 0407 	add.w	r4, sp, #7
 80053fe:	46a4      	mov	ip, r4
 8005400:	270a      	movs	r7, #10
 8005402:	fb91 f6f7 	sdiv	r6, r1, r7
 8005406:	460a      	mov	r2, r1
 8005408:	46a6      	mov	lr, r4
 800540a:	fb07 1516 	mls	r5, r7, r6, r1
 800540e:	2a63      	cmp	r2, #99	; 0x63
 8005410:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005414:	4631      	mov	r1, r6
 8005416:	f104 34ff 	add.w	r4, r4, #4294967295
 800541a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800541e:	dcf0      	bgt.n	8005402 <__exponent+0x20>
 8005420:	3130      	adds	r1, #48	; 0x30
 8005422:	f1ae 0502 	sub.w	r5, lr, #2
 8005426:	f804 1c01 	strb.w	r1, [r4, #-1]
 800542a:	4629      	mov	r1, r5
 800542c:	1c44      	adds	r4, r0, #1
 800542e:	4561      	cmp	r1, ip
 8005430:	d30a      	bcc.n	8005448 <__exponent+0x66>
 8005432:	f10d 0209 	add.w	r2, sp, #9
 8005436:	eba2 020e 	sub.w	r2, r2, lr
 800543a:	4565      	cmp	r5, ip
 800543c:	bf88      	it	hi
 800543e:	2200      	movhi	r2, #0
 8005440:	4413      	add	r3, r2
 8005442:	1a18      	subs	r0, r3, r0
 8005444:	b003      	add	sp, #12
 8005446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005448:	f811 2b01 	ldrb.w	r2, [r1], #1
 800544c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005450:	e7ed      	b.n	800542e <__exponent+0x4c>
 8005452:	2330      	movs	r3, #48	; 0x30
 8005454:	3130      	adds	r1, #48	; 0x30
 8005456:	7083      	strb	r3, [r0, #2]
 8005458:	70c1      	strb	r1, [r0, #3]
 800545a:	1d03      	adds	r3, r0, #4
 800545c:	e7f1      	b.n	8005442 <__exponent+0x60>
	...

08005460 <_printf_float>:
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	b091      	sub	sp, #68	; 0x44
 8005466:	460c      	mov	r4, r1
 8005468:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800546c:	4616      	mov	r6, r2
 800546e:	461f      	mov	r7, r3
 8005470:	4605      	mov	r5, r0
 8005472:	f001 fd53 	bl	8006f1c <_localeconv_r>
 8005476:	6803      	ldr	r3, [r0, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	9309      	str	r3, [sp, #36]	; 0x24
 800547c:	f7fa fe68 	bl	8000150 <strlen>
 8005480:	2300      	movs	r3, #0
 8005482:	930e      	str	r3, [sp, #56]	; 0x38
 8005484:	f8d8 3000 	ldr.w	r3, [r8]
 8005488:	900a      	str	r0, [sp, #40]	; 0x28
 800548a:	3307      	adds	r3, #7
 800548c:	f023 0307 	bic.w	r3, r3, #7
 8005490:	f103 0208 	add.w	r2, r3, #8
 8005494:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005498:	f8d4 b000 	ldr.w	fp, [r4]
 800549c:	f8c8 2000 	str.w	r2, [r8]
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054a8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80054ac:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80054b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80054b2:	f04f 32ff 	mov.w	r2, #4294967295
 80054b6:	4640      	mov	r0, r8
 80054b8:	4b9c      	ldr	r3, [pc, #624]	; (800572c <_printf_float+0x2cc>)
 80054ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054bc:	f7fb fb5a 	bl	8000b74 <__aeabi_dcmpun>
 80054c0:	bb70      	cbnz	r0, 8005520 <_printf_float+0xc0>
 80054c2:	f04f 32ff 	mov.w	r2, #4294967295
 80054c6:	4640      	mov	r0, r8
 80054c8:	4b98      	ldr	r3, [pc, #608]	; (800572c <_printf_float+0x2cc>)
 80054ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054cc:	f7fb fb34 	bl	8000b38 <__aeabi_dcmple>
 80054d0:	bb30      	cbnz	r0, 8005520 <_printf_float+0xc0>
 80054d2:	2200      	movs	r2, #0
 80054d4:	2300      	movs	r3, #0
 80054d6:	4640      	mov	r0, r8
 80054d8:	4651      	mov	r1, sl
 80054da:	f7fb fb23 	bl	8000b24 <__aeabi_dcmplt>
 80054de:	b110      	cbz	r0, 80054e6 <_printf_float+0x86>
 80054e0:	232d      	movs	r3, #45	; 0x2d
 80054e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e6:	4b92      	ldr	r3, [pc, #584]	; (8005730 <_printf_float+0x2d0>)
 80054e8:	4892      	ldr	r0, [pc, #584]	; (8005734 <_printf_float+0x2d4>)
 80054ea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80054ee:	bf94      	ite	ls
 80054f0:	4698      	movls	r8, r3
 80054f2:	4680      	movhi	r8, r0
 80054f4:	2303      	movs	r3, #3
 80054f6:	f04f 0a00 	mov.w	sl, #0
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	f02b 0304 	bic.w	r3, fp, #4
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	4633      	mov	r3, r6
 8005504:	4621      	mov	r1, r4
 8005506:	4628      	mov	r0, r5
 8005508:	9700      	str	r7, [sp, #0]
 800550a:	aa0f      	add	r2, sp, #60	; 0x3c
 800550c:	f000 f9d4 	bl	80058b8 <_printf_common>
 8005510:	3001      	adds	r0, #1
 8005512:	f040 8090 	bne.w	8005636 <_printf_float+0x1d6>
 8005516:	f04f 30ff 	mov.w	r0, #4294967295
 800551a:	b011      	add	sp, #68	; 0x44
 800551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005520:	4642      	mov	r2, r8
 8005522:	4653      	mov	r3, sl
 8005524:	4640      	mov	r0, r8
 8005526:	4651      	mov	r1, sl
 8005528:	f7fb fb24 	bl	8000b74 <__aeabi_dcmpun>
 800552c:	b148      	cbz	r0, 8005542 <_printf_float+0xe2>
 800552e:	f1ba 0f00 	cmp.w	sl, #0
 8005532:	bfb8      	it	lt
 8005534:	232d      	movlt	r3, #45	; 0x2d
 8005536:	4880      	ldr	r0, [pc, #512]	; (8005738 <_printf_float+0x2d8>)
 8005538:	bfb8      	it	lt
 800553a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800553e:	4b7f      	ldr	r3, [pc, #508]	; (800573c <_printf_float+0x2dc>)
 8005540:	e7d3      	b.n	80054ea <_printf_float+0x8a>
 8005542:	6863      	ldr	r3, [r4, #4]
 8005544:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	d142      	bne.n	80055d2 <_printf_float+0x172>
 800554c:	2306      	movs	r3, #6
 800554e:	6063      	str	r3, [r4, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	9206      	str	r2, [sp, #24]
 8005554:	aa0e      	add	r2, sp, #56	; 0x38
 8005556:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800555a:	aa0d      	add	r2, sp, #52	; 0x34
 800555c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005560:	9203      	str	r2, [sp, #12]
 8005562:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005566:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	4642      	mov	r2, r8
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4628      	mov	r0, r5
 8005574:	4653      	mov	r3, sl
 8005576:	910b      	str	r1, [sp, #44]	; 0x2c
 8005578:	f7ff fed4 	bl	8005324 <__cvt>
 800557c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800557e:	4680      	mov	r8, r0
 8005580:	2947      	cmp	r1, #71	; 0x47
 8005582:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005584:	d108      	bne.n	8005598 <_printf_float+0x138>
 8005586:	1cc8      	adds	r0, r1, #3
 8005588:	db02      	blt.n	8005590 <_printf_float+0x130>
 800558a:	6863      	ldr	r3, [r4, #4]
 800558c:	4299      	cmp	r1, r3
 800558e:	dd40      	ble.n	8005612 <_printf_float+0x1b2>
 8005590:	f1a9 0902 	sub.w	r9, r9, #2
 8005594:	fa5f f989 	uxtb.w	r9, r9
 8005598:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800559c:	d81f      	bhi.n	80055de <_printf_float+0x17e>
 800559e:	464a      	mov	r2, r9
 80055a0:	3901      	subs	r1, #1
 80055a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055a6:	910d      	str	r1, [sp, #52]	; 0x34
 80055a8:	f7ff ff1b 	bl	80053e2 <__exponent>
 80055ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055ae:	4682      	mov	sl, r0
 80055b0:	1813      	adds	r3, r2, r0
 80055b2:	2a01      	cmp	r2, #1
 80055b4:	6123      	str	r3, [r4, #16]
 80055b6:	dc02      	bgt.n	80055be <_printf_float+0x15e>
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	07d2      	lsls	r2, r2, #31
 80055bc:	d501      	bpl.n	80055c2 <_printf_float+0x162>
 80055be:	3301      	adds	r3, #1
 80055c0:	6123      	str	r3, [r4, #16]
 80055c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d09b      	beq.n	8005502 <_printf_float+0xa2>
 80055ca:	232d      	movs	r3, #45	; 0x2d
 80055cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d0:	e797      	b.n	8005502 <_printf_float+0xa2>
 80055d2:	2947      	cmp	r1, #71	; 0x47
 80055d4:	d1bc      	bne.n	8005550 <_printf_float+0xf0>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1ba      	bne.n	8005550 <_printf_float+0xf0>
 80055da:	2301      	movs	r3, #1
 80055dc:	e7b7      	b.n	800554e <_printf_float+0xee>
 80055de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80055e2:	d118      	bne.n	8005616 <_printf_float+0x1b6>
 80055e4:	2900      	cmp	r1, #0
 80055e6:	6863      	ldr	r3, [r4, #4]
 80055e8:	dd0b      	ble.n	8005602 <_printf_float+0x1a2>
 80055ea:	6121      	str	r1, [r4, #16]
 80055ec:	b913      	cbnz	r3, 80055f4 <_printf_float+0x194>
 80055ee:	6822      	ldr	r2, [r4, #0]
 80055f0:	07d0      	lsls	r0, r2, #31
 80055f2:	d502      	bpl.n	80055fa <_printf_float+0x19a>
 80055f4:	3301      	adds	r3, #1
 80055f6:	440b      	add	r3, r1
 80055f8:	6123      	str	r3, [r4, #16]
 80055fa:	f04f 0a00 	mov.w	sl, #0
 80055fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005600:	e7df      	b.n	80055c2 <_printf_float+0x162>
 8005602:	b913      	cbnz	r3, 800560a <_printf_float+0x1aa>
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	07d2      	lsls	r2, r2, #31
 8005608:	d501      	bpl.n	800560e <_printf_float+0x1ae>
 800560a:	3302      	adds	r3, #2
 800560c:	e7f4      	b.n	80055f8 <_printf_float+0x198>
 800560e:	2301      	movs	r3, #1
 8005610:	e7f2      	b.n	80055f8 <_printf_float+0x198>
 8005612:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005618:	4299      	cmp	r1, r3
 800561a:	db05      	blt.n	8005628 <_printf_float+0x1c8>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	6121      	str	r1, [r4, #16]
 8005620:	07d8      	lsls	r0, r3, #31
 8005622:	d5ea      	bpl.n	80055fa <_printf_float+0x19a>
 8005624:	1c4b      	adds	r3, r1, #1
 8005626:	e7e7      	b.n	80055f8 <_printf_float+0x198>
 8005628:	2900      	cmp	r1, #0
 800562a:	bfcc      	ite	gt
 800562c:	2201      	movgt	r2, #1
 800562e:	f1c1 0202 	rsble	r2, r1, #2
 8005632:	4413      	add	r3, r2
 8005634:	e7e0      	b.n	80055f8 <_printf_float+0x198>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	055a      	lsls	r2, r3, #21
 800563a:	d407      	bmi.n	800564c <_printf_float+0x1ec>
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	4642      	mov	r2, r8
 8005640:	4631      	mov	r1, r6
 8005642:	4628      	mov	r0, r5
 8005644:	47b8      	blx	r7
 8005646:	3001      	adds	r0, #1
 8005648:	d12b      	bne.n	80056a2 <_printf_float+0x242>
 800564a:	e764      	b.n	8005516 <_printf_float+0xb6>
 800564c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005650:	f240 80dd 	bls.w	800580e <_printf_float+0x3ae>
 8005654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005658:	2200      	movs	r2, #0
 800565a:	2300      	movs	r3, #0
 800565c:	f7fb fa58 	bl	8000b10 <__aeabi_dcmpeq>
 8005660:	2800      	cmp	r0, #0
 8005662:	d033      	beq.n	80056cc <_printf_float+0x26c>
 8005664:	2301      	movs	r3, #1
 8005666:	4631      	mov	r1, r6
 8005668:	4628      	mov	r0, r5
 800566a:	4a35      	ldr	r2, [pc, #212]	; (8005740 <_printf_float+0x2e0>)
 800566c:	47b8      	blx	r7
 800566e:	3001      	adds	r0, #1
 8005670:	f43f af51 	beq.w	8005516 <_printf_float+0xb6>
 8005674:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005678:	429a      	cmp	r2, r3
 800567a:	db02      	blt.n	8005682 <_printf_float+0x222>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	07d8      	lsls	r0, r3, #31
 8005680:	d50f      	bpl.n	80056a2 <_printf_float+0x242>
 8005682:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005686:	4631      	mov	r1, r6
 8005688:	4628      	mov	r0, r5
 800568a:	47b8      	blx	r7
 800568c:	3001      	adds	r0, #1
 800568e:	f43f af42 	beq.w	8005516 <_printf_float+0xb6>
 8005692:	f04f 0800 	mov.w	r8, #0
 8005696:	f104 091a 	add.w	r9, r4, #26
 800569a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800569c:	3b01      	subs	r3, #1
 800569e:	4543      	cmp	r3, r8
 80056a0:	dc09      	bgt.n	80056b6 <_printf_float+0x256>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	079b      	lsls	r3, r3, #30
 80056a6:	f100 8102 	bmi.w	80058ae <_printf_float+0x44e>
 80056aa:	68e0      	ldr	r0, [r4, #12]
 80056ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056ae:	4298      	cmp	r0, r3
 80056b0:	bfb8      	it	lt
 80056b2:	4618      	movlt	r0, r3
 80056b4:	e731      	b.n	800551a <_printf_float+0xba>
 80056b6:	2301      	movs	r3, #1
 80056b8:	464a      	mov	r2, r9
 80056ba:	4631      	mov	r1, r6
 80056bc:	4628      	mov	r0, r5
 80056be:	47b8      	blx	r7
 80056c0:	3001      	adds	r0, #1
 80056c2:	f43f af28 	beq.w	8005516 <_printf_float+0xb6>
 80056c6:	f108 0801 	add.w	r8, r8, #1
 80056ca:	e7e6      	b.n	800569a <_printf_float+0x23a>
 80056cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	dc38      	bgt.n	8005744 <_printf_float+0x2e4>
 80056d2:	2301      	movs	r3, #1
 80056d4:	4631      	mov	r1, r6
 80056d6:	4628      	mov	r0, r5
 80056d8:	4a19      	ldr	r2, [pc, #100]	; (8005740 <_printf_float+0x2e0>)
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	f43f af1a 	beq.w	8005516 <_printf_float+0xb6>
 80056e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056e6:	4313      	orrs	r3, r2
 80056e8:	d102      	bne.n	80056f0 <_printf_float+0x290>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	07d9      	lsls	r1, r3, #31
 80056ee:	d5d8      	bpl.n	80056a2 <_printf_float+0x242>
 80056f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056f4:	4631      	mov	r1, r6
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b8      	blx	r7
 80056fa:	3001      	adds	r0, #1
 80056fc:	f43f af0b 	beq.w	8005516 <_printf_float+0xb6>
 8005700:	f04f 0900 	mov.w	r9, #0
 8005704:	f104 0a1a 	add.w	sl, r4, #26
 8005708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800570a:	425b      	negs	r3, r3
 800570c:	454b      	cmp	r3, r9
 800570e:	dc01      	bgt.n	8005714 <_printf_float+0x2b4>
 8005710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005712:	e794      	b.n	800563e <_printf_float+0x1de>
 8005714:	2301      	movs	r3, #1
 8005716:	4652      	mov	r2, sl
 8005718:	4631      	mov	r1, r6
 800571a:	4628      	mov	r0, r5
 800571c:	47b8      	blx	r7
 800571e:	3001      	adds	r0, #1
 8005720:	f43f aef9 	beq.w	8005516 <_printf_float+0xb6>
 8005724:	f109 0901 	add.w	r9, r9, #1
 8005728:	e7ee      	b.n	8005708 <_printf_float+0x2a8>
 800572a:	bf00      	nop
 800572c:	7fefffff 	.word	0x7fefffff
 8005730:	08008418 	.word	0x08008418
 8005734:	0800841c 	.word	0x0800841c
 8005738:	08008424 	.word	0x08008424
 800573c:	08008420 	.word	0x08008420
 8005740:	08008428 	.word	0x08008428
 8005744:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005748:	429a      	cmp	r2, r3
 800574a:	bfa8      	it	ge
 800574c:	461a      	movge	r2, r3
 800574e:	2a00      	cmp	r2, #0
 8005750:	4691      	mov	r9, r2
 8005752:	dc37      	bgt.n	80057c4 <_printf_float+0x364>
 8005754:	f04f 0b00 	mov.w	fp, #0
 8005758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800575c:	f104 021a 	add.w	r2, r4, #26
 8005760:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005764:	ebaa 0309 	sub.w	r3, sl, r9
 8005768:	455b      	cmp	r3, fp
 800576a:	dc33      	bgt.n	80057d4 <_printf_float+0x374>
 800576c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005770:	429a      	cmp	r2, r3
 8005772:	db3b      	blt.n	80057ec <_printf_float+0x38c>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	07da      	lsls	r2, r3, #31
 8005778:	d438      	bmi.n	80057ec <_printf_float+0x38c>
 800577a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800577c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800577e:	eba3 020a 	sub.w	r2, r3, sl
 8005782:	eba3 0901 	sub.w	r9, r3, r1
 8005786:	4591      	cmp	r9, r2
 8005788:	bfa8      	it	ge
 800578a:	4691      	movge	r9, r2
 800578c:	f1b9 0f00 	cmp.w	r9, #0
 8005790:	dc34      	bgt.n	80057fc <_printf_float+0x39c>
 8005792:	f04f 0800 	mov.w	r8, #0
 8005796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800579a:	f104 0a1a 	add.w	sl, r4, #26
 800579e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	eba3 0309 	sub.w	r3, r3, r9
 80057a8:	4543      	cmp	r3, r8
 80057aa:	f77f af7a 	ble.w	80056a2 <_printf_float+0x242>
 80057ae:	2301      	movs	r3, #1
 80057b0:	4652      	mov	r2, sl
 80057b2:	4631      	mov	r1, r6
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b8      	blx	r7
 80057b8:	3001      	adds	r0, #1
 80057ba:	f43f aeac 	beq.w	8005516 <_printf_float+0xb6>
 80057be:	f108 0801 	add.w	r8, r8, #1
 80057c2:	e7ec      	b.n	800579e <_printf_float+0x33e>
 80057c4:	4613      	mov	r3, r2
 80057c6:	4631      	mov	r1, r6
 80057c8:	4642      	mov	r2, r8
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	d1c0      	bne.n	8005754 <_printf_float+0x2f4>
 80057d2:	e6a0      	b.n	8005516 <_printf_float+0xb6>
 80057d4:	2301      	movs	r3, #1
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	920b      	str	r2, [sp, #44]	; 0x2c
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f ae99 	beq.w	8005516 <_printf_float+0xb6>
 80057e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057e6:	f10b 0b01 	add.w	fp, fp, #1
 80057ea:	e7b9      	b.n	8005760 <_printf_float+0x300>
 80057ec:	4631      	mov	r1, r6
 80057ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057f2:	4628      	mov	r0, r5
 80057f4:	47b8      	blx	r7
 80057f6:	3001      	adds	r0, #1
 80057f8:	d1bf      	bne.n	800577a <_printf_float+0x31a>
 80057fa:	e68c      	b.n	8005516 <_printf_float+0xb6>
 80057fc:	464b      	mov	r3, r9
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	eb08 020a 	add.w	r2, r8, sl
 8005806:	47b8      	blx	r7
 8005808:	3001      	adds	r0, #1
 800580a:	d1c2      	bne.n	8005792 <_printf_float+0x332>
 800580c:	e683      	b.n	8005516 <_printf_float+0xb6>
 800580e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005810:	2a01      	cmp	r2, #1
 8005812:	dc01      	bgt.n	8005818 <_printf_float+0x3b8>
 8005814:	07db      	lsls	r3, r3, #31
 8005816:	d537      	bpl.n	8005888 <_printf_float+0x428>
 8005818:	2301      	movs	r3, #1
 800581a:	4642      	mov	r2, r8
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f ae77 	beq.w	8005516 <_printf_float+0xb6>
 8005828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800582c:	4631      	mov	r1, r6
 800582e:	4628      	mov	r0, r5
 8005830:	47b8      	blx	r7
 8005832:	3001      	adds	r0, #1
 8005834:	f43f ae6f 	beq.w	8005516 <_printf_float+0xb6>
 8005838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800583c:	2200      	movs	r2, #0
 800583e:	2300      	movs	r3, #0
 8005840:	f7fb f966 	bl	8000b10 <__aeabi_dcmpeq>
 8005844:	b9d8      	cbnz	r0, 800587e <_printf_float+0x41e>
 8005846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005848:	f108 0201 	add.w	r2, r8, #1
 800584c:	3b01      	subs	r3, #1
 800584e:	4631      	mov	r1, r6
 8005850:	4628      	mov	r0, r5
 8005852:	47b8      	blx	r7
 8005854:	3001      	adds	r0, #1
 8005856:	d10e      	bne.n	8005876 <_printf_float+0x416>
 8005858:	e65d      	b.n	8005516 <_printf_float+0xb6>
 800585a:	2301      	movs	r3, #1
 800585c:	464a      	mov	r2, r9
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	f43f ae56 	beq.w	8005516 <_printf_float+0xb6>
 800586a:	f108 0801 	add.w	r8, r8, #1
 800586e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005870:	3b01      	subs	r3, #1
 8005872:	4543      	cmp	r3, r8
 8005874:	dcf1      	bgt.n	800585a <_printf_float+0x3fa>
 8005876:	4653      	mov	r3, sl
 8005878:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800587c:	e6e0      	b.n	8005640 <_printf_float+0x1e0>
 800587e:	f04f 0800 	mov.w	r8, #0
 8005882:	f104 091a 	add.w	r9, r4, #26
 8005886:	e7f2      	b.n	800586e <_printf_float+0x40e>
 8005888:	2301      	movs	r3, #1
 800588a:	4642      	mov	r2, r8
 800588c:	e7df      	b.n	800584e <_printf_float+0x3ee>
 800588e:	2301      	movs	r3, #1
 8005890:	464a      	mov	r2, r9
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	47b8      	blx	r7
 8005898:	3001      	adds	r0, #1
 800589a:	f43f ae3c 	beq.w	8005516 <_printf_float+0xb6>
 800589e:	f108 0801 	add.w	r8, r8, #1
 80058a2:	68e3      	ldr	r3, [r4, #12]
 80058a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058a6:	1a5b      	subs	r3, r3, r1
 80058a8:	4543      	cmp	r3, r8
 80058aa:	dcf0      	bgt.n	800588e <_printf_float+0x42e>
 80058ac:	e6fd      	b.n	80056aa <_printf_float+0x24a>
 80058ae:	f04f 0800 	mov.w	r8, #0
 80058b2:	f104 0919 	add.w	r9, r4, #25
 80058b6:	e7f4      	b.n	80058a2 <_printf_float+0x442>

080058b8 <_printf_common>:
 80058b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058bc:	4616      	mov	r6, r2
 80058be:	4699      	mov	r9, r3
 80058c0:	688a      	ldr	r2, [r1, #8]
 80058c2:	690b      	ldr	r3, [r1, #16]
 80058c4:	4607      	mov	r7, r0
 80058c6:	4293      	cmp	r3, r2
 80058c8:	bfb8      	it	lt
 80058ca:	4613      	movlt	r3, r2
 80058cc:	6033      	str	r3, [r6, #0]
 80058ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058d2:	460c      	mov	r4, r1
 80058d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058d8:	b10a      	cbz	r2, 80058de <_printf_common+0x26>
 80058da:	3301      	adds	r3, #1
 80058dc:	6033      	str	r3, [r6, #0]
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	0699      	lsls	r1, r3, #26
 80058e2:	bf42      	ittt	mi
 80058e4:	6833      	ldrmi	r3, [r6, #0]
 80058e6:	3302      	addmi	r3, #2
 80058e8:	6033      	strmi	r3, [r6, #0]
 80058ea:	6825      	ldr	r5, [r4, #0]
 80058ec:	f015 0506 	ands.w	r5, r5, #6
 80058f0:	d106      	bne.n	8005900 <_printf_common+0x48>
 80058f2:	f104 0a19 	add.w	sl, r4, #25
 80058f6:	68e3      	ldr	r3, [r4, #12]
 80058f8:	6832      	ldr	r2, [r6, #0]
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	42ab      	cmp	r3, r5
 80058fe:	dc28      	bgt.n	8005952 <_printf_common+0x9a>
 8005900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005904:	1e13      	subs	r3, r2, #0
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	bf18      	it	ne
 800590a:	2301      	movne	r3, #1
 800590c:	0692      	lsls	r2, r2, #26
 800590e:	d42d      	bmi.n	800596c <_printf_common+0xb4>
 8005910:	4649      	mov	r1, r9
 8005912:	4638      	mov	r0, r7
 8005914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005918:	47c0      	blx	r8
 800591a:	3001      	adds	r0, #1
 800591c:	d020      	beq.n	8005960 <_printf_common+0xa8>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	68e5      	ldr	r5, [r4, #12]
 8005922:	f003 0306 	and.w	r3, r3, #6
 8005926:	2b04      	cmp	r3, #4
 8005928:	bf18      	it	ne
 800592a:	2500      	movne	r5, #0
 800592c:	6832      	ldr	r2, [r6, #0]
 800592e:	f04f 0600 	mov.w	r6, #0
 8005932:	68a3      	ldr	r3, [r4, #8]
 8005934:	bf08      	it	eq
 8005936:	1aad      	subeq	r5, r5, r2
 8005938:	6922      	ldr	r2, [r4, #16]
 800593a:	bf08      	it	eq
 800593c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005940:	4293      	cmp	r3, r2
 8005942:	bfc4      	itt	gt
 8005944:	1a9b      	subgt	r3, r3, r2
 8005946:	18ed      	addgt	r5, r5, r3
 8005948:	341a      	adds	r4, #26
 800594a:	42b5      	cmp	r5, r6
 800594c:	d11a      	bne.n	8005984 <_printf_common+0xcc>
 800594e:	2000      	movs	r0, #0
 8005950:	e008      	b.n	8005964 <_printf_common+0xac>
 8005952:	2301      	movs	r3, #1
 8005954:	4652      	mov	r2, sl
 8005956:	4649      	mov	r1, r9
 8005958:	4638      	mov	r0, r7
 800595a:	47c0      	blx	r8
 800595c:	3001      	adds	r0, #1
 800595e:	d103      	bne.n	8005968 <_printf_common+0xb0>
 8005960:	f04f 30ff 	mov.w	r0, #4294967295
 8005964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005968:	3501      	adds	r5, #1
 800596a:	e7c4      	b.n	80058f6 <_printf_common+0x3e>
 800596c:	2030      	movs	r0, #48	; 0x30
 800596e:	18e1      	adds	r1, r4, r3
 8005970:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800597a:	4422      	add	r2, r4
 800597c:	3302      	adds	r3, #2
 800597e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005982:	e7c5      	b.n	8005910 <_printf_common+0x58>
 8005984:	2301      	movs	r3, #1
 8005986:	4622      	mov	r2, r4
 8005988:	4649      	mov	r1, r9
 800598a:	4638      	mov	r0, r7
 800598c:	47c0      	blx	r8
 800598e:	3001      	adds	r0, #1
 8005990:	d0e6      	beq.n	8005960 <_printf_common+0xa8>
 8005992:	3601      	adds	r6, #1
 8005994:	e7d9      	b.n	800594a <_printf_common+0x92>
	...

08005998 <_printf_i>:
 8005998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800599c:	7e0f      	ldrb	r7, [r1, #24]
 800599e:	4691      	mov	r9, r2
 80059a0:	2f78      	cmp	r7, #120	; 0x78
 80059a2:	4680      	mov	r8, r0
 80059a4:	460c      	mov	r4, r1
 80059a6:	469a      	mov	sl, r3
 80059a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ae:	d807      	bhi.n	80059c0 <_printf_i+0x28>
 80059b0:	2f62      	cmp	r7, #98	; 0x62
 80059b2:	d80a      	bhi.n	80059ca <_printf_i+0x32>
 80059b4:	2f00      	cmp	r7, #0
 80059b6:	f000 80d9 	beq.w	8005b6c <_printf_i+0x1d4>
 80059ba:	2f58      	cmp	r7, #88	; 0x58
 80059bc:	f000 80a4 	beq.w	8005b08 <_printf_i+0x170>
 80059c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059c8:	e03a      	b.n	8005a40 <_printf_i+0xa8>
 80059ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ce:	2b15      	cmp	r3, #21
 80059d0:	d8f6      	bhi.n	80059c0 <_printf_i+0x28>
 80059d2:	a101      	add	r1, pc, #4	; (adr r1, 80059d8 <_printf_i+0x40>)
 80059d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059d8:	08005a31 	.word	0x08005a31
 80059dc:	08005a45 	.word	0x08005a45
 80059e0:	080059c1 	.word	0x080059c1
 80059e4:	080059c1 	.word	0x080059c1
 80059e8:	080059c1 	.word	0x080059c1
 80059ec:	080059c1 	.word	0x080059c1
 80059f0:	08005a45 	.word	0x08005a45
 80059f4:	080059c1 	.word	0x080059c1
 80059f8:	080059c1 	.word	0x080059c1
 80059fc:	080059c1 	.word	0x080059c1
 8005a00:	080059c1 	.word	0x080059c1
 8005a04:	08005b53 	.word	0x08005b53
 8005a08:	08005a75 	.word	0x08005a75
 8005a0c:	08005b35 	.word	0x08005b35
 8005a10:	080059c1 	.word	0x080059c1
 8005a14:	080059c1 	.word	0x080059c1
 8005a18:	08005b75 	.word	0x08005b75
 8005a1c:	080059c1 	.word	0x080059c1
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	080059c1 	.word	0x080059c1
 8005a28:	080059c1 	.word	0x080059c1
 8005a2c:	08005b3d 	.word	0x08005b3d
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	1d1a      	adds	r2, r3, #4
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	602a      	str	r2, [r5, #0]
 8005a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0a4      	b.n	8005b8e <_printf_i+0x1f6>
 8005a44:	6820      	ldr	r0, [r4, #0]
 8005a46:	6829      	ldr	r1, [r5, #0]
 8005a48:	0606      	lsls	r6, r0, #24
 8005a4a:	f101 0304 	add.w	r3, r1, #4
 8005a4e:	d50a      	bpl.n	8005a66 <_printf_i+0xce>
 8005a50:	680e      	ldr	r6, [r1, #0]
 8005a52:	602b      	str	r3, [r5, #0]
 8005a54:	2e00      	cmp	r6, #0
 8005a56:	da03      	bge.n	8005a60 <_printf_i+0xc8>
 8005a58:	232d      	movs	r3, #45	; 0x2d
 8005a5a:	4276      	negs	r6, r6
 8005a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a60:	230a      	movs	r3, #10
 8005a62:	485e      	ldr	r0, [pc, #376]	; (8005bdc <_printf_i+0x244>)
 8005a64:	e019      	b.n	8005a9a <_printf_i+0x102>
 8005a66:	680e      	ldr	r6, [r1, #0]
 8005a68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a6c:	602b      	str	r3, [r5, #0]
 8005a6e:	bf18      	it	ne
 8005a70:	b236      	sxthne	r6, r6
 8005a72:	e7ef      	b.n	8005a54 <_printf_i+0xbc>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	1d19      	adds	r1, r3, #4
 8005a7a:	6029      	str	r1, [r5, #0]
 8005a7c:	0601      	lsls	r1, r0, #24
 8005a7e:	d501      	bpl.n	8005a84 <_printf_i+0xec>
 8005a80:	681e      	ldr	r6, [r3, #0]
 8005a82:	e002      	b.n	8005a8a <_printf_i+0xf2>
 8005a84:	0646      	lsls	r6, r0, #25
 8005a86:	d5fb      	bpl.n	8005a80 <_printf_i+0xe8>
 8005a88:	881e      	ldrh	r6, [r3, #0]
 8005a8a:	2f6f      	cmp	r7, #111	; 0x6f
 8005a8c:	bf0c      	ite	eq
 8005a8e:	2308      	moveq	r3, #8
 8005a90:	230a      	movne	r3, #10
 8005a92:	4852      	ldr	r0, [pc, #328]	; (8005bdc <_printf_i+0x244>)
 8005a94:	2100      	movs	r1, #0
 8005a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a9a:	6865      	ldr	r5, [r4, #4]
 8005a9c:	2d00      	cmp	r5, #0
 8005a9e:	bfa8      	it	ge
 8005aa0:	6821      	ldrge	r1, [r4, #0]
 8005aa2:	60a5      	str	r5, [r4, #8]
 8005aa4:	bfa4      	itt	ge
 8005aa6:	f021 0104 	bicge.w	r1, r1, #4
 8005aaa:	6021      	strge	r1, [r4, #0]
 8005aac:	b90e      	cbnz	r6, 8005ab2 <_printf_i+0x11a>
 8005aae:	2d00      	cmp	r5, #0
 8005ab0:	d04d      	beq.n	8005b4e <_printf_i+0x1b6>
 8005ab2:	4615      	mov	r5, r2
 8005ab4:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ab8:	fb03 6711 	mls	r7, r3, r1, r6
 8005abc:	5dc7      	ldrb	r7, [r0, r7]
 8005abe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ac2:	4637      	mov	r7, r6
 8005ac4:	42bb      	cmp	r3, r7
 8005ac6:	460e      	mov	r6, r1
 8005ac8:	d9f4      	bls.n	8005ab4 <_printf_i+0x11c>
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d10b      	bne.n	8005ae6 <_printf_i+0x14e>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	07de      	lsls	r6, r3, #31
 8005ad2:	d508      	bpl.n	8005ae6 <_printf_i+0x14e>
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	6861      	ldr	r1, [r4, #4]
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	bfde      	ittt	le
 8005adc:	2330      	movle	r3, #48	; 0x30
 8005ade:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ae2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ae6:	1b52      	subs	r2, r2, r5
 8005ae8:	6122      	str	r2, [r4, #16]
 8005aea:	464b      	mov	r3, r9
 8005aec:	4621      	mov	r1, r4
 8005aee:	4640      	mov	r0, r8
 8005af0:	f8cd a000 	str.w	sl, [sp]
 8005af4:	aa03      	add	r2, sp, #12
 8005af6:	f7ff fedf 	bl	80058b8 <_printf_common>
 8005afa:	3001      	adds	r0, #1
 8005afc:	d14c      	bne.n	8005b98 <_printf_i+0x200>
 8005afe:	f04f 30ff 	mov.w	r0, #4294967295
 8005b02:	b004      	add	sp, #16
 8005b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b08:	4834      	ldr	r0, [pc, #208]	; (8005bdc <_printf_i+0x244>)
 8005b0a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b0e:	6829      	ldr	r1, [r5, #0]
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b16:	6029      	str	r1, [r5, #0]
 8005b18:	061d      	lsls	r5, r3, #24
 8005b1a:	d514      	bpl.n	8005b46 <_printf_i+0x1ae>
 8005b1c:	07df      	lsls	r7, r3, #31
 8005b1e:	bf44      	itt	mi
 8005b20:	f043 0320 	orrmi.w	r3, r3, #32
 8005b24:	6023      	strmi	r3, [r4, #0]
 8005b26:	b91e      	cbnz	r6, 8005b30 <_printf_i+0x198>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	f023 0320 	bic.w	r3, r3, #32
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	2310      	movs	r3, #16
 8005b32:	e7af      	b.n	8005a94 <_printf_i+0xfc>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	f043 0320 	orr.w	r3, r3, #32
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	2378      	movs	r3, #120	; 0x78
 8005b3e:	4828      	ldr	r0, [pc, #160]	; (8005be0 <_printf_i+0x248>)
 8005b40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b44:	e7e3      	b.n	8005b0e <_printf_i+0x176>
 8005b46:	0659      	lsls	r1, r3, #25
 8005b48:	bf48      	it	mi
 8005b4a:	b2b6      	uxthmi	r6, r6
 8005b4c:	e7e6      	b.n	8005b1c <_printf_i+0x184>
 8005b4e:	4615      	mov	r5, r2
 8005b50:	e7bb      	b.n	8005aca <_printf_i+0x132>
 8005b52:	682b      	ldr	r3, [r5, #0]
 8005b54:	6826      	ldr	r6, [r4, #0]
 8005b56:	1d18      	adds	r0, r3, #4
 8005b58:	6961      	ldr	r1, [r4, #20]
 8005b5a:	6028      	str	r0, [r5, #0]
 8005b5c:	0635      	lsls	r5, r6, #24
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	d501      	bpl.n	8005b66 <_printf_i+0x1ce>
 8005b62:	6019      	str	r1, [r3, #0]
 8005b64:	e002      	b.n	8005b6c <_printf_i+0x1d4>
 8005b66:	0670      	lsls	r0, r6, #25
 8005b68:	d5fb      	bpl.n	8005b62 <_printf_i+0x1ca>
 8005b6a:	8019      	strh	r1, [r3, #0]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4615      	mov	r5, r2
 8005b70:	6123      	str	r3, [r4, #16]
 8005b72:	e7ba      	b.n	8005aea <_printf_i+0x152>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	2100      	movs	r1, #0
 8005b78:	1d1a      	adds	r2, r3, #4
 8005b7a:	602a      	str	r2, [r5, #0]
 8005b7c:	681d      	ldr	r5, [r3, #0]
 8005b7e:	6862      	ldr	r2, [r4, #4]
 8005b80:	4628      	mov	r0, r5
 8005b82:	f001 fa3f 	bl	8007004 <memchr>
 8005b86:	b108      	cbz	r0, 8005b8c <_printf_i+0x1f4>
 8005b88:	1b40      	subs	r0, r0, r5
 8005b8a:	6060      	str	r0, [r4, #4]
 8005b8c:	6863      	ldr	r3, [r4, #4]
 8005b8e:	6123      	str	r3, [r4, #16]
 8005b90:	2300      	movs	r3, #0
 8005b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b96:	e7a8      	b.n	8005aea <_printf_i+0x152>
 8005b98:	462a      	mov	r2, r5
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	4640      	mov	r0, r8
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	47d0      	blx	sl
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d0ab      	beq.n	8005afe <_printf_i+0x166>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	079b      	lsls	r3, r3, #30
 8005baa:	d413      	bmi.n	8005bd4 <_printf_i+0x23c>
 8005bac:	68e0      	ldr	r0, [r4, #12]
 8005bae:	9b03      	ldr	r3, [sp, #12]
 8005bb0:	4298      	cmp	r0, r3
 8005bb2:	bfb8      	it	lt
 8005bb4:	4618      	movlt	r0, r3
 8005bb6:	e7a4      	b.n	8005b02 <_printf_i+0x16a>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	4632      	mov	r2, r6
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	47d0      	blx	sl
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d09b      	beq.n	8005afe <_printf_i+0x166>
 8005bc6:	3501      	adds	r5, #1
 8005bc8:	68e3      	ldr	r3, [r4, #12]
 8005bca:	9903      	ldr	r1, [sp, #12]
 8005bcc:	1a5b      	subs	r3, r3, r1
 8005bce:	42ab      	cmp	r3, r5
 8005bd0:	dcf2      	bgt.n	8005bb8 <_printf_i+0x220>
 8005bd2:	e7eb      	b.n	8005bac <_printf_i+0x214>
 8005bd4:	2500      	movs	r5, #0
 8005bd6:	f104 0619 	add.w	r6, r4, #25
 8005bda:	e7f5      	b.n	8005bc8 <_printf_i+0x230>
 8005bdc:	0800842a 	.word	0x0800842a
 8005be0:	0800843b 	.word	0x0800843b

08005be4 <iprintf>:
 8005be4:	b40f      	push	{r0, r1, r2, r3}
 8005be6:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <iprintf+0x2c>)
 8005be8:	b513      	push	{r0, r1, r4, lr}
 8005bea:	681c      	ldr	r4, [r3, #0]
 8005bec:	b124      	cbz	r4, 8005bf8 <iprintf+0x14>
 8005bee:	69a3      	ldr	r3, [r4, #24]
 8005bf0:	b913      	cbnz	r3, 8005bf8 <iprintf+0x14>
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f001 f8f4 	bl	8006de0 <__sinit>
 8005bf8:	ab05      	add	r3, sp, #20
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	9a04      	ldr	r2, [sp, #16]
 8005bfe:	68a1      	ldr	r1, [r4, #8]
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	f002 f811 	bl	8007c28 <_vfiprintf_r>
 8005c06:	b002      	add	sp, #8
 8005c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0c:	b004      	add	sp, #16
 8005c0e:	4770      	bx	lr
 8005c10:	20000018 	.word	0x20000018

08005c14 <_puts_r>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	460e      	mov	r6, r1
 8005c18:	4605      	mov	r5, r0
 8005c1a:	b118      	cbz	r0, 8005c24 <_puts_r+0x10>
 8005c1c:	6983      	ldr	r3, [r0, #24]
 8005c1e:	b90b      	cbnz	r3, 8005c24 <_puts_r+0x10>
 8005c20:	f001 f8de 	bl	8006de0 <__sinit>
 8005c24:	69ab      	ldr	r3, [r5, #24]
 8005c26:	68ac      	ldr	r4, [r5, #8]
 8005c28:	b913      	cbnz	r3, 8005c30 <_puts_r+0x1c>
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f001 f8d8 	bl	8006de0 <__sinit>
 8005c30:	4b2c      	ldr	r3, [pc, #176]	; (8005ce4 <_puts_r+0xd0>)
 8005c32:	429c      	cmp	r4, r3
 8005c34:	d120      	bne.n	8005c78 <_puts_r+0x64>
 8005c36:	686c      	ldr	r4, [r5, #4]
 8005c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c3a:	07db      	lsls	r3, r3, #31
 8005c3c:	d405      	bmi.n	8005c4a <_puts_r+0x36>
 8005c3e:	89a3      	ldrh	r3, [r4, #12]
 8005c40:	0598      	lsls	r0, r3, #22
 8005c42:	d402      	bmi.n	8005c4a <_puts_r+0x36>
 8005c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c46:	f001 f96e 	bl	8006f26 <__retarget_lock_acquire_recursive>
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	0719      	lsls	r1, r3, #28
 8005c4e:	d51d      	bpl.n	8005c8c <_puts_r+0x78>
 8005c50:	6923      	ldr	r3, [r4, #16]
 8005c52:	b1db      	cbz	r3, 8005c8c <_puts_r+0x78>
 8005c54:	3e01      	subs	r6, #1
 8005c56:	68a3      	ldr	r3, [r4, #8]
 8005c58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	60a3      	str	r3, [r4, #8]
 8005c60:	bb39      	cbnz	r1, 8005cb2 <_puts_r+0x9e>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	da38      	bge.n	8005cd8 <_puts_r+0xc4>
 8005c66:	4622      	mov	r2, r4
 8005c68:	210a      	movs	r1, #10
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	f000 f868 	bl	8005d40 <__swbuf_r>
 8005c70:	3001      	adds	r0, #1
 8005c72:	d011      	beq.n	8005c98 <_puts_r+0x84>
 8005c74:	250a      	movs	r5, #10
 8005c76:	e011      	b.n	8005c9c <_puts_r+0x88>
 8005c78:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <_puts_r+0xd4>)
 8005c7a:	429c      	cmp	r4, r3
 8005c7c:	d101      	bne.n	8005c82 <_puts_r+0x6e>
 8005c7e:	68ac      	ldr	r4, [r5, #8]
 8005c80:	e7da      	b.n	8005c38 <_puts_r+0x24>
 8005c82:	4b1a      	ldr	r3, [pc, #104]	; (8005cec <_puts_r+0xd8>)
 8005c84:	429c      	cmp	r4, r3
 8005c86:	bf08      	it	eq
 8005c88:	68ec      	ldreq	r4, [r5, #12]
 8005c8a:	e7d5      	b.n	8005c38 <_puts_r+0x24>
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 f8a8 	bl	8005de4 <__swsetup_r>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d0dd      	beq.n	8005c54 <_puts_r+0x40>
 8005c98:	f04f 35ff 	mov.w	r5, #4294967295
 8005c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c9e:	07da      	lsls	r2, r3, #31
 8005ca0:	d405      	bmi.n	8005cae <_puts_r+0x9a>
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	059b      	lsls	r3, r3, #22
 8005ca6:	d402      	bmi.n	8005cae <_puts_r+0x9a>
 8005ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005caa:	f001 f93d 	bl	8006f28 <__retarget_lock_release_recursive>
 8005cae:	4628      	mov	r0, r5
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	da04      	bge.n	8005cc0 <_puts_r+0xac>
 8005cb6:	69a2      	ldr	r2, [r4, #24]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	dc06      	bgt.n	8005cca <_puts_r+0xb6>
 8005cbc:	290a      	cmp	r1, #10
 8005cbe:	d004      	beq.n	8005cca <_puts_r+0xb6>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	6022      	str	r2, [r4, #0]
 8005cc6:	7019      	strb	r1, [r3, #0]
 8005cc8:	e7c5      	b.n	8005c56 <_puts_r+0x42>
 8005cca:	4622      	mov	r2, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f000 f837 	bl	8005d40 <__swbuf_r>
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d1bf      	bne.n	8005c56 <_puts_r+0x42>
 8005cd6:	e7df      	b.n	8005c98 <_puts_r+0x84>
 8005cd8:	250a      	movs	r5, #10
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	6022      	str	r2, [r4, #0]
 8005ce0:	701d      	strb	r5, [r3, #0]
 8005ce2:	e7db      	b.n	8005c9c <_puts_r+0x88>
 8005ce4:	080084fc 	.word	0x080084fc
 8005ce8:	0800851c 	.word	0x0800851c
 8005cec:	080084dc 	.word	0x080084dc

08005cf0 <puts>:
 8005cf0:	4b02      	ldr	r3, [pc, #8]	; (8005cfc <puts+0xc>)
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	f7ff bf8d 	b.w	8005c14 <_puts_r>
 8005cfa:	bf00      	nop
 8005cfc:	20000018 	.word	0x20000018

08005d00 <siprintf>:
 8005d00:	b40e      	push	{r1, r2, r3}
 8005d02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d06:	b500      	push	{lr}
 8005d08:	b09c      	sub	sp, #112	; 0x70
 8005d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d0c:	9002      	str	r0, [sp, #8]
 8005d0e:	9006      	str	r0, [sp, #24]
 8005d10:	9107      	str	r1, [sp, #28]
 8005d12:	9104      	str	r1, [sp, #16]
 8005d14:	4808      	ldr	r0, [pc, #32]	; (8005d38 <siprintf+0x38>)
 8005d16:	4909      	ldr	r1, [pc, #36]	; (8005d3c <siprintf+0x3c>)
 8005d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1c:	9105      	str	r1, [sp, #20]
 8005d1e:	6800      	ldr	r0, [r0, #0]
 8005d20:	a902      	add	r1, sp, #8
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	f001 fe58 	bl	80079d8 <_svfiprintf_r>
 8005d28:	2200      	movs	r2, #0
 8005d2a:	9b02      	ldr	r3, [sp, #8]
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	b01c      	add	sp, #112	; 0x70
 8005d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d34:	b003      	add	sp, #12
 8005d36:	4770      	bx	lr
 8005d38:	20000018 	.word	0x20000018
 8005d3c:	ffff0208 	.word	0xffff0208

08005d40 <__swbuf_r>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	460e      	mov	r6, r1
 8005d44:	4614      	mov	r4, r2
 8005d46:	4605      	mov	r5, r0
 8005d48:	b118      	cbz	r0, 8005d52 <__swbuf_r+0x12>
 8005d4a:	6983      	ldr	r3, [r0, #24]
 8005d4c:	b90b      	cbnz	r3, 8005d52 <__swbuf_r+0x12>
 8005d4e:	f001 f847 	bl	8006de0 <__sinit>
 8005d52:	4b21      	ldr	r3, [pc, #132]	; (8005dd8 <__swbuf_r+0x98>)
 8005d54:	429c      	cmp	r4, r3
 8005d56:	d12b      	bne.n	8005db0 <__swbuf_r+0x70>
 8005d58:	686c      	ldr	r4, [r5, #4]
 8005d5a:	69a3      	ldr	r3, [r4, #24]
 8005d5c:	60a3      	str	r3, [r4, #8]
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	071a      	lsls	r2, r3, #28
 8005d62:	d52f      	bpl.n	8005dc4 <__swbuf_r+0x84>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	b36b      	cbz	r3, 8005dc4 <__swbuf_r+0x84>
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	6820      	ldr	r0, [r4, #0]
 8005d6c:	b2f6      	uxtb	r6, r6
 8005d6e:	1ac0      	subs	r0, r0, r3
 8005d70:	6963      	ldr	r3, [r4, #20]
 8005d72:	4637      	mov	r7, r6
 8005d74:	4283      	cmp	r3, r0
 8005d76:	dc04      	bgt.n	8005d82 <__swbuf_r+0x42>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 ff9c 	bl	8006cb8 <_fflush_r>
 8005d80:	bb30      	cbnz	r0, 8005dd0 <__swbuf_r+0x90>
 8005d82:	68a3      	ldr	r3, [r4, #8]
 8005d84:	3001      	adds	r0, #1
 8005d86:	3b01      	subs	r3, #1
 8005d88:	60a3      	str	r3, [r4, #8]
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	6022      	str	r2, [r4, #0]
 8005d90:	701e      	strb	r6, [r3, #0]
 8005d92:	6963      	ldr	r3, [r4, #20]
 8005d94:	4283      	cmp	r3, r0
 8005d96:	d004      	beq.n	8005da2 <__swbuf_r+0x62>
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	07db      	lsls	r3, r3, #31
 8005d9c:	d506      	bpl.n	8005dac <__swbuf_r+0x6c>
 8005d9e:	2e0a      	cmp	r6, #10
 8005da0:	d104      	bne.n	8005dac <__swbuf_r+0x6c>
 8005da2:	4621      	mov	r1, r4
 8005da4:	4628      	mov	r0, r5
 8005da6:	f000 ff87 	bl	8006cb8 <_fflush_r>
 8005daa:	b988      	cbnz	r0, 8005dd0 <__swbuf_r+0x90>
 8005dac:	4638      	mov	r0, r7
 8005dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <__swbuf_r+0x9c>)
 8005db2:	429c      	cmp	r4, r3
 8005db4:	d101      	bne.n	8005dba <__swbuf_r+0x7a>
 8005db6:	68ac      	ldr	r4, [r5, #8]
 8005db8:	e7cf      	b.n	8005d5a <__swbuf_r+0x1a>
 8005dba:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <__swbuf_r+0xa0>)
 8005dbc:	429c      	cmp	r4, r3
 8005dbe:	bf08      	it	eq
 8005dc0:	68ec      	ldreq	r4, [r5, #12]
 8005dc2:	e7ca      	b.n	8005d5a <__swbuf_r+0x1a>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f000 f80c 	bl	8005de4 <__swsetup_r>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d0cb      	beq.n	8005d68 <__swbuf_r+0x28>
 8005dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8005dd4:	e7ea      	b.n	8005dac <__swbuf_r+0x6c>
 8005dd6:	bf00      	nop
 8005dd8:	080084fc 	.word	0x080084fc
 8005ddc:	0800851c 	.word	0x0800851c
 8005de0:	080084dc 	.word	0x080084dc

08005de4 <__swsetup_r>:
 8005de4:	4b32      	ldr	r3, [pc, #200]	; (8005eb0 <__swsetup_r+0xcc>)
 8005de6:	b570      	push	{r4, r5, r6, lr}
 8005de8:	681d      	ldr	r5, [r3, #0]
 8005dea:	4606      	mov	r6, r0
 8005dec:	460c      	mov	r4, r1
 8005dee:	b125      	cbz	r5, 8005dfa <__swsetup_r+0x16>
 8005df0:	69ab      	ldr	r3, [r5, #24]
 8005df2:	b913      	cbnz	r3, 8005dfa <__swsetup_r+0x16>
 8005df4:	4628      	mov	r0, r5
 8005df6:	f000 fff3 	bl	8006de0 <__sinit>
 8005dfa:	4b2e      	ldr	r3, [pc, #184]	; (8005eb4 <__swsetup_r+0xd0>)
 8005dfc:	429c      	cmp	r4, r3
 8005dfe:	d10f      	bne.n	8005e20 <__swsetup_r+0x3c>
 8005e00:	686c      	ldr	r4, [r5, #4]
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e08:	0719      	lsls	r1, r3, #28
 8005e0a:	d42c      	bmi.n	8005e66 <__swsetup_r+0x82>
 8005e0c:	06dd      	lsls	r5, r3, #27
 8005e0e:	d411      	bmi.n	8005e34 <__swsetup_r+0x50>
 8005e10:	2309      	movs	r3, #9
 8005e12:	6033      	str	r3, [r6, #0]
 8005e14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1c:	81a3      	strh	r3, [r4, #12]
 8005e1e:	e03e      	b.n	8005e9e <__swsetup_r+0xba>
 8005e20:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <__swsetup_r+0xd4>)
 8005e22:	429c      	cmp	r4, r3
 8005e24:	d101      	bne.n	8005e2a <__swsetup_r+0x46>
 8005e26:	68ac      	ldr	r4, [r5, #8]
 8005e28:	e7eb      	b.n	8005e02 <__swsetup_r+0x1e>
 8005e2a:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <__swsetup_r+0xd8>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	bf08      	it	eq
 8005e30:	68ec      	ldreq	r4, [r5, #12]
 8005e32:	e7e6      	b.n	8005e02 <__swsetup_r+0x1e>
 8005e34:	0758      	lsls	r0, r3, #29
 8005e36:	d512      	bpl.n	8005e5e <__swsetup_r+0x7a>
 8005e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e3a:	b141      	cbz	r1, 8005e4e <__swsetup_r+0x6a>
 8005e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e40:	4299      	cmp	r1, r3
 8005e42:	d002      	beq.n	8005e4a <__swsetup_r+0x66>
 8005e44:	4630      	mov	r0, r6
 8005e46:	f001 fc8f 	bl	8007768 <_free_r>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	2300      	movs	r3, #0
 8005e58:	6063      	str	r3, [r4, #4]
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	f043 0308 	orr.w	r3, r3, #8
 8005e64:	81a3      	strh	r3, [r4, #12]
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	b94b      	cbnz	r3, 8005e7e <__swsetup_r+0x9a>
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e74:	d003      	beq.n	8005e7e <__swsetup_r+0x9a>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f001 f87b 	bl	8006f74 <__smakebuf_r>
 8005e7e:	89a0      	ldrh	r0, [r4, #12]
 8005e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e84:	f010 0301 	ands.w	r3, r0, #1
 8005e88:	d00a      	beq.n	8005ea0 <__swsetup_r+0xbc>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60a3      	str	r3, [r4, #8]
 8005e8e:	6963      	ldr	r3, [r4, #20]
 8005e90:	425b      	negs	r3, r3
 8005e92:	61a3      	str	r3, [r4, #24]
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	b943      	cbnz	r3, 8005eaa <__swsetup_r+0xc6>
 8005e98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e9c:	d1ba      	bne.n	8005e14 <__swsetup_r+0x30>
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	0781      	lsls	r1, r0, #30
 8005ea2:	bf58      	it	pl
 8005ea4:	6963      	ldrpl	r3, [r4, #20]
 8005ea6:	60a3      	str	r3, [r4, #8]
 8005ea8:	e7f4      	b.n	8005e94 <__swsetup_r+0xb0>
 8005eaa:	2000      	movs	r0, #0
 8005eac:	e7f7      	b.n	8005e9e <__swsetup_r+0xba>
 8005eae:	bf00      	nop
 8005eb0:	20000018 	.word	0x20000018
 8005eb4:	080084fc 	.word	0x080084fc
 8005eb8:	0800851c 	.word	0x0800851c
 8005ebc:	080084dc 	.word	0x080084dc

08005ec0 <quorem>:
 8005ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	6903      	ldr	r3, [r0, #16]
 8005ec6:	690c      	ldr	r4, [r1, #16]
 8005ec8:	4607      	mov	r7, r0
 8005eca:	42a3      	cmp	r3, r4
 8005ecc:	f2c0 8082 	blt.w	8005fd4 <quorem+0x114>
 8005ed0:	3c01      	subs	r4, #1
 8005ed2:	f100 0514 	add.w	r5, r0, #20
 8005ed6:	f101 0814 	add.w	r8, r1, #20
 8005eda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	429a      	cmp	r2, r3
 8005eec:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ef8:	d331      	bcc.n	8005f5e <quorem+0x9e>
 8005efa:	f04f 0e00 	mov.w	lr, #0
 8005efe:	4640      	mov	r0, r8
 8005f00:	46ac      	mov	ip, r5
 8005f02:	46f2      	mov	sl, lr
 8005f04:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f08:	b293      	uxth	r3, r2
 8005f0a:	fb06 e303 	mla	r3, r6, r3, lr
 8005f0e:	0c12      	lsrs	r2, r2, #16
 8005f10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	fb06 e202 	mla	r2, r6, r2, lr
 8005f1a:	ebaa 0303 	sub.w	r3, sl, r3
 8005f1e:	f8dc a000 	ldr.w	sl, [ip]
 8005f22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f26:	fa1f fa8a 	uxth.w	sl, sl
 8005f2a:	4453      	add	r3, sl
 8005f2c:	f8dc a000 	ldr.w	sl, [ip]
 8005f30:	b292      	uxth	r2, r2
 8005f32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f40:	4581      	cmp	r9, r0
 8005f42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f46:	f84c 3b04 	str.w	r3, [ip], #4
 8005f4a:	d2db      	bcs.n	8005f04 <quorem+0x44>
 8005f4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f50:	b92b      	cbnz	r3, 8005f5e <quorem+0x9e>
 8005f52:	9b01      	ldr	r3, [sp, #4]
 8005f54:	3b04      	subs	r3, #4
 8005f56:	429d      	cmp	r5, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	d32f      	bcc.n	8005fbc <quorem+0xfc>
 8005f5c:	613c      	str	r4, [r7, #16]
 8005f5e:	4638      	mov	r0, r7
 8005f60:	f001 faea 	bl	8007538 <__mcmp>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	db25      	blt.n	8005fb4 <quorem+0xf4>
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f04f 0c00 	mov.w	ip, #0
 8005f6e:	3601      	adds	r6, #1
 8005f70:	f858 1b04 	ldr.w	r1, [r8], #4
 8005f74:	f8d0 e000 	ldr.w	lr, [r0]
 8005f78:	b28b      	uxth	r3, r1
 8005f7a:	ebac 0303 	sub.w	r3, ip, r3
 8005f7e:	fa1f f28e 	uxth.w	r2, lr
 8005f82:	4413      	add	r3, r2
 8005f84:	0c0a      	lsrs	r2, r1, #16
 8005f86:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f94:	45c1      	cmp	r9, r8
 8005f96:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f9a:	f840 3b04 	str.w	r3, [r0], #4
 8005f9e:	d2e7      	bcs.n	8005f70 <quorem+0xb0>
 8005fa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fa8:	b922      	cbnz	r2, 8005fb4 <quorem+0xf4>
 8005faa:	3b04      	subs	r3, #4
 8005fac:	429d      	cmp	r5, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	d30a      	bcc.n	8005fc8 <quorem+0x108>
 8005fb2:	613c      	str	r4, [r7, #16]
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	b003      	add	sp, #12
 8005fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	6812      	ldr	r2, [r2, #0]
 8005fbe:	3b04      	subs	r3, #4
 8005fc0:	2a00      	cmp	r2, #0
 8005fc2:	d1cb      	bne.n	8005f5c <quorem+0x9c>
 8005fc4:	3c01      	subs	r4, #1
 8005fc6:	e7c6      	b.n	8005f56 <quorem+0x96>
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	3b04      	subs	r3, #4
 8005fcc:	2a00      	cmp	r2, #0
 8005fce:	d1f0      	bne.n	8005fb2 <quorem+0xf2>
 8005fd0:	3c01      	subs	r4, #1
 8005fd2:	e7eb      	b.n	8005fac <quorem+0xec>
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	e7ee      	b.n	8005fb6 <quorem+0xf6>

08005fd8 <_dtoa_r>:
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	4616      	mov	r6, r2
 8005fde:	461f      	mov	r7, r3
 8005fe0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005fe2:	b099      	sub	sp, #100	; 0x64
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005fea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005fee:	b974      	cbnz	r4, 800600e <_dtoa_r+0x36>
 8005ff0:	2010      	movs	r0, #16
 8005ff2:	f000 ffff 	bl	8006ff4 <malloc>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6268      	str	r0, [r5, #36]	; 0x24
 8005ffa:	b920      	cbnz	r0, 8006006 <_dtoa_r+0x2e>
 8005ffc:	21ea      	movs	r1, #234	; 0xea
 8005ffe:	4ba8      	ldr	r3, [pc, #672]	; (80062a0 <_dtoa_r+0x2c8>)
 8006000:	48a8      	ldr	r0, [pc, #672]	; (80062a4 <_dtoa_r+0x2cc>)
 8006002:	f001 ffa7 	bl	8007f54 <__assert_func>
 8006006:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800600a:	6004      	str	r4, [r0, #0]
 800600c:	60c4      	str	r4, [r0, #12]
 800600e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006010:	6819      	ldr	r1, [r3, #0]
 8006012:	b151      	cbz	r1, 800602a <_dtoa_r+0x52>
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	2301      	movs	r3, #1
 8006018:	4093      	lsls	r3, r2
 800601a:	604a      	str	r2, [r1, #4]
 800601c:	608b      	str	r3, [r1, #8]
 800601e:	4628      	mov	r0, r5
 8006020:	f001 f84c 	bl	80070bc <_Bfree>
 8006024:	2200      	movs	r2, #0
 8006026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	1e3b      	subs	r3, r7, #0
 800602c:	bfaf      	iteee	ge
 800602e:	2300      	movge	r3, #0
 8006030:	2201      	movlt	r2, #1
 8006032:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006036:	9305      	strlt	r3, [sp, #20]
 8006038:	bfa8      	it	ge
 800603a:	f8c8 3000 	strge.w	r3, [r8]
 800603e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006042:	4b99      	ldr	r3, [pc, #612]	; (80062a8 <_dtoa_r+0x2d0>)
 8006044:	bfb8      	it	lt
 8006046:	f8c8 2000 	strlt.w	r2, [r8]
 800604a:	ea33 0309 	bics.w	r3, r3, r9
 800604e:	d119      	bne.n	8006084 <_dtoa_r+0xac>
 8006050:	f242 730f 	movw	r3, #9999	; 0x270f
 8006054:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800605c:	4333      	orrs	r3, r6
 800605e:	f000 857f 	beq.w	8006b60 <_dtoa_r+0xb88>
 8006062:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006064:	b953      	cbnz	r3, 800607c <_dtoa_r+0xa4>
 8006066:	4b91      	ldr	r3, [pc, #580]	; (80062ac <_dtoa_r+0x2d4>)
 8006068:	e022      	b.n	80060b0 <_dtoa_r+0xd8>
 800606a:	4b91      	ldr	r3, [pc, #580]	; (80062b0 <_dtoa_r+0x2d8>)
 800606c:	9303      	str	r3, [sp, #12]
 800606e:	3308      	adds	r3, #8
 8006070:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	9803      	ldr	r0, [sp, #12]
 8006076:	b019      	add	sp, #100	; 0x64
 8006078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607c:	4b8b      	ldr	r3, [pc, #556]	; (80062ac <_dtoa_r+0x2d4>)
 800607e:	9303      	str	r3, [sp, #12]
 8006080:	3303      	adds	r3, #3
 8006082:	e7f5      	b.n	8006070 <_dtoa_r+0x98>
 8006084:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006088:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800608c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006090:	2200      	movs	r2, #0
 8006092:	2300      	movs	r3, #0
 8006094:	f7fa fd3c 	bl	8000b10 <__aeabi_dcmpeq>
 8006098:	4680      	mov	r8, r0
 800609a:	b158      	cbz	r0, 80060b4 <_dtoa_r+0xdc>
 800609c:	2301      	movs	r3, #1
 800609e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8558 	beq.w	8006b5a <_dtoa_r+0xb82>
 80060aa:	4882      	ldr	r0, [pc, #520]	; (80062b4 <_dtoa_r+0x2dc>)
 80060ac:	6018      	str	r0, [r3, #0]
 80060ae:	1e43      	subs	r3, r0, #1
 80060b0:	9303      	str	r3, [sp, #12]
 80060b2:	e7df      	b.n	8006074 <_dtoa_r+0x9c>
 80060b4:	ab16      	add	r3, sp, #88	; 0x58
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	ab17      	add	r3, sp, #92	; 0x5c
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	4628      	mov	r0, r5
 80060be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060c2:	f001 fae1 	bl	8007688 <__d2b>
 80060c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80060ca:	4683      	mov	fp, r0
 80060cc:	2c00      	cmp	r4, #0
 80060ce:	d07f      	beq.n	80061d0 <_dtoa_r+0x1f8>
 80060d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80060da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80060e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80060e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80060ea:	2200      	movs	r2, #0
 80060ec:	4b72      	ldr	r3, [pc, #456]	; (80062b8 <_dtoa_r+0x2e0>)
 80060ee:	f7fa f8ef 	bl	80002d0 <__aeabi_dsub>
 80060f2:	a365      	add	r3, pc, #404	; (adr r3, 8006288 <_dtoa_r+0x2b0>)
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f7fa faa2 	bl	8000640 <__aeabi_dmul>
 80060fc:	a364      	add	r3, pc, #400	; (adr r3, 8006290 <_dtoa_r+0x2b8>)
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	f7fa f8e7 	bl	80002d4 <__adddf3>
 8006106:	4606      	mov	r6, r0
 8006108:	4620      	mov	r0, r4
 800610a:	460f      	mov	r7, r1
 800610c:	f7fa fa2e 	bl	800056c <__aeabi_i2d>
 8006110:	a361      	add	r3, pc, #388	; (adr r3, 8006298 <_dtoa_r+0x2c0>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f7fa fa93 	bl	8000640 <__aeabi_dmul>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4630      	mov	r0, r6
 8006120:	4639      	mov	r1, r7
 8006122:	f7fa f8d7 	bl	80002d4 <__adddf3>
 8006126:	4606      	mov	r6, r0
 8006128:	460f      	mov	r7, r1
 800612a:	f7fa fd39 	bl	8000ba0 <__aeabi_d2iz>
 800612e:	2200      	movs	r2, #0
 8006130:	4682      	mov	sl, r0
 8006132:	2300      	movs	r3, #0
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	f7fa fcf4 	bl	8000b24 <__aeabi_dcmplt>
 800613c:	b148      	cbz	r0, 8006152 <_dtoa_r+0x17a>
 800613e:	4650      	mov	r0, sl
 8006140:	f7fa fa14 	bl	800056c <__aeabi_i2d>
 8006144:	4632      	mov	r2, r6
 8006146:	463b      	mov	r3, r7
 8006148:	f7fa fce2 	bl	8000b10 <__aeabi_dcmpeq>
 800614c:	b908      	cbnz	r0, 8006152 <_dtoa_r+0x17a>
 800614e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006152:	f1ba 0f16 	cmp.w	sl, #22
 8006156:	d858      	bhi.n	800620a <_dtoa_r+0x232>
 8006158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800615c:	4b57      	ldr	r3, [pc, #348]	; (80062bc <_dtoa_r+0x2e4>)
 800615e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f7fa fcdd 	bl	8000b24 <__aeabi_dcmplt>
 800616a:	2800      	cmp	r0, #0
 800616c:	d04f      	beq.n	800620e <_dtoa_r+0x236>
 800616e:	2300      	movs	r3, #0
 8006170:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006174:	930f      	str	r3, [sp, #60]	; 0x3c
 8006176:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006178:	1b1c      	subs	r4, r3, r4
 800617a:	1e63      	subs	r3, r4, #1
 800617c:	9309      	str	r3, [sp, #36]	; 0x24
 800617e:	bf49      	itett	mi
 8006180:	f1c4 0301 	rsbmi	r3, r4, #1
 8006184:	2300      	movpl	r3, #0
 8006186:	9306      	strmi	r3, [sp, #24]
 8006188:	2300      	movmi	r3, #0
 800618a:	bf54      	ite	pl
 800618c:	9306      	strpl	r3, [sp, #24]
 800618e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006190:	f1ba 0f00 	cmp.w	sl, #0
 8006194:	db3d      	blt.n	8006212 <_dtoa_r+0x23a>
 8006196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006198:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800619c:	4453      	add	r3, sl
 800619e:	9309      	str	r3, [sp, #36]	; 0x24
 80061a0:	2300      	movs	r3, #0
 80061a2:	930a      	str	r3, [sp, #40]	; 0x28
 80061a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061a6:	2b09      	cmp	r3, #9
 80061a8:	f200 808c 	bhi.w	80062c4 <_dtoa_r+0x2ec>
 80061ac:	2b05      	cmp	r3, #5
 80061ae:	bfc4      	itt	gt
 80061b0:	3b04      	subgt	r3, #4
 80061b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80061b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061b6:	bfc8      	it	gt
 80061b8:	2400      	movgt	r4, #0
 80061ba:	f1a3 0302 	sub.w	r3, r3, #2
 80061be:	bfd8      	it	le
 80061c0:	2401      	movle	r4, #1
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	f200 808a 	bhi.w	80062dc <_dtoa_r+0x304>
 80061c8:	e8df f003 	tbb	[pc, r3]
 80061cc:	5b4d4f2d 	.word	0x5b4d4f2d
 80061d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80061d4:	441c      	add	r4, r3
 80061d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80061da:	2b20      	cmp	r3, #32
 80061dc:	bfc3      	ittte	gt
 80061de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80061e6:	fa09 f303 	lslgt.w	r3, r9, r3
 80061ea:	f1c3 0320 	rsble	r3, r3, #32
 80061ee:	bfc6      	itte	gt
 80061f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80061f4:	4318      	orrgt	r0, r3
 80061f6:	fa06 f003 	lslle.w	r0, r6, r3
 80061fa:	f7fa f9a7 	bl	800054c <__aeabi_ui2d>
 80061fe:	2301      	movs	r3, #1
 8006200:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006204:	3c01      	subs	r4, #1
 8006206:	9313      	str	r3, [sp, #76]	; 0x4c
 8006208:	e76f      	b.n	80060ea <_dtoa_r+0x112>
 800620a:	2301      	movs	r3, #1
 800620c:	e7b2      	b.n	8006174 <_dtoa_r+0x19c>
 800620e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006210:	e7b1      	b.n	8006176 <_dtoa_r+0x19e>
 8006212:	9b06      	ldr	r3, [sp, #24]
 8006214:	eba3 030a 	sub.w	r3, r3, sl
 8006218:	9306      	str	r3, [sp, #24]
 800621a:	f1ca 0300 	rsb	r3, sl, #0
 800621e:	930a      	str	r3, [sp, #40]	; 0x28
 8006220:	2300      	movs	r3, #0
 8006222:	930e      	str	r3, [sp, #56]	; 0x38
 8006224:	e7be      	b.n	80061a4 <_dtoa_r+0x1cc>
 8006226:	2300      	movs	r3, #0
 8006228:	930b      	str	r3, [sp, #44]	; 0x2c
 800622a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800622c:	2b00      	cmp	r3, #0
 800622e:	dc58      	bgt.n	80062e2 <_dtoa_r+0x30a>
 8006230:	f04f 0901 	mov.w	r9, #1
 8006234:	464b      	mov	r3, r9
 8006236:	f8cd 9020 	str.w	r9, [sp, #32]
 800623a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800623e:	2200      	movs	r2, #0
 8006240:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006242:	6042      	str	r2, [r0, #4]
 8006244:	2204      	movs	r2, #4
 8006246:	f102 0614 	add.w	r6, r2, #20
 800624a:	429e      	cmp	r6, r3
 800624c:	6841      	ldr	r1, [r0, #4]
 800624e:	d94e      	bls.n	80062ee <_dtoa_r+0x316>
 8006250:	4628      	mov	r0, r5
 8006252:	f000 fef3 	bl	800703c <_Balloc>
 8006256:	9003      	str	r0, [sp, #12]
 8006258:	2800      	cmp	r0, #0
 800625a:	d14c      	bne.n	80062f6 <_dtoa_r+0x31e>
 800625c:	4602      	mov	r2, r0
 800625e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006262:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <_dtoa_r+0x2e8>)
 8006264:	e6cc      	b.n	8006000 <_dtoa_r+0x28>
 8006266:	2301      	movs	r3, #1
 8006268:	e7de      	b.n	8006228 <_dtoa_r+0x250>
 800626a:	2300      	movs	r3, #0
 800626c:	930b      	str	r3, [sp, #44]	; 0x2c
 800626e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006270:	eb0a 0903 	add.w	r9, sl, r3
 8006274:	f109 0301 	add.w	r3, r9, #1
 8006278:	2b01      	cmp	r3, #1
 800627a:	9308      	str	r3, [sp, #32]
 800627c:	bfb8      	it	lt
 800627e:	2301      	movlt	r3, #1
 8006280:	e7dd      	b.n	800623e <_dtoa_r+0x266>
 8006282:	2301      	movs	r3, #1
 8006284:	e7f2      	b.n	800626c <_dtoa_r+0x294>
 8006286:	bf00      	nop
 8006288:	636f4361 	.word	0x636f4361
 800628c:	3fd287a7 	.word	0x3fd287a7
 8006290:	8b60c8b3 	.word	0x8b60c8b3
 8006294:	3fc68a28 	.word	0x3fc68a28
 8006298:	509f79fb 	.word	0x509f79fb
 800629c:	3fd34413 	.word	0x3fd34413
 80062a0:	08008459 	.word	0x08008459
 80062a4:	08008470 	.word	0x08008470
 80062a8:	7ff00000 	.word	0x7ff00000
 80062ac:	08008455 	.word	0x08008455
 80062b0:	0800844c 	.word	0x0800844c
 80062b4:	08008429 	.word	0x08008429
 80062b8:	3ff80000 	.word	0x3ff80000
 80062bc:	080085c0 	.word	0x080085c0
 80062c0:	080084cb 	.word	0x080084cb
 80062c4:	2401      	movs	r4, #1
 80062c6:	2300      	movs	r3, #0
 80062c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80062ca:	9322      	str	r3, [sp, #136]	; 0x88
 80062cc:	f04f 39ff 	mov.w	r9, #4294967295
 80062d0:	2200      	movs	r2, #0
 80062d2:	2312      	movs	r3, #18
 80062d4:	f8cd 9020 	str.w	r9, [sp, #32]
 80062d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80062da:	e7b0      	b.n	800623e <_dtoa_r+0x266>
 80062dc:	2301      	movs	r3, #1
 80062de:	930b      	str	r3, [sp, #44]	; 0x2c
 80062e0:	e7f4      	b.n	80062cc <_dtoa_r+0x2f4>
 80062e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80062e6:	464b      	mov	r3, r9
 80062e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80062ec:	e7a7      	b.n	800623e <_dtoa_r+0x266>
 80062ee:	3101      	adds	r1, #1
 80062f0:	6041      	str	r1, [r0, #4]
 80062f2:	0052      	lsls	r2, r2, #1
 80062f4:	e7a7      	b.n	8006246 <_dtoa_r+0x26e>
 80062f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062f8:	9a03      	ldr	r2, [sp, #12]
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	9b08      	ldr	r3, [sp, #32]
 80062fe:	2b0e      	cmp	r3, #14
 8006300:	f200 80a8 	bhi.w	8006454 <_dtoa_r+0x47c>
 8006304:	2c00      	cmp	r4, #0
 8006306:	f000 80a5 	beq.w	8006454 <_dtoa_r+0x47c>
 800630a:	f1ba 0f00 	cmp.w	sl, #0
 800630e:	dd34      	ble.n	800637a <_dtoa_r+0x3a2>
 8006310:	4a9a      	ldr	r2, [pc, #616]	; (800657c <_dtoa_r+0x5a4>)
 8006312:	f00a 030f 	and.w	r3, sl, #15
 8006316:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800631a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800631e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006322:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006326:	ea4f 142a 	mov.w	r4, sl, asr #4
 800632a:	d016      	beq.n	800635a <_dtoa_r+0x382>
 800632c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006330:	4b93      	ldr	r3, [pc, #588]	; (8006580 <_dtoa_r+0x5a8>)
 8006332:	2703      	movs	r7, #3
 8006334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006338:	f7fa faac 	bl	8000894 <__aeabi_ddiv>
 800633c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006340:	f004 040f 	and.w	r4, r4, #15
 8006344:	4e8e      	ldr	r6, [pc, #568]	; (8006580 <_dtoa_r+0x5a8>)
 8006346:	b954      	cbnz	r4, 800635e <_dtoa_r+0x386>
 8006348:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800634c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006350:	f7fa faa0 	bl	8000894 <__aeabi_ddiv>
 8006354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006358:	e029      	b.n	80063ae <_dtoa_r+0x3d6>
 800635a:	2702      	movs	r7, #2
 800635c:	e7f2      	b.n	8006344 <_dtoa_r+0x36c>
 800635e:	07e1      	lsls	r1, r4, #31
 8006360:	d508      	bpl.n	8006374 <_dtoa_r+0x39c>
 8006362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006366:	e9d6 2300 	ldrd	r2, r3, [r6]
 800636a:	f7fa f969 	bl	8000640 <__aeabi_dmul>
 800636e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006372:	3701      	adds	r7, #1
 8006374:	1064      	asrs	r4, r4, #1
 8006376:	3608      	adds	r6, #8
 8006378:	e7e5      	b.n	8006346 <_dtoa_r+0x36e>
 800637a:	f000 80a5 	beq.w	80064c8 <_dtoa_r+0x4f0>
 800637e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006382:	f1ca 0400 	rsb	r4, sl, #0
 8006386:	4b7d      	ldr	r3, [pc, #500]	; (800657c <_dtoa_r+0x5a4>)
 8006388:	f004 020f 	and.w	r2, r4, #15
 800638c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f7fa f954 	bl	8000640 <__aeabi_dmul>
 8006398:	2702      	movs	r7, #2
 800639a:	2300      	movs	r3, #0
 800639c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063a0:	4e77      	ldr	r6, [pc, #476]	; (8006580 <_dtoa_r+0x5a8>)
 80063a2:	1124      	asrs	r4, r4, #4
 80063a4:	2c00      	cmp	r4, #0
 80063a6:	f040 8084 	bne.w	80064b2 <_dtoa_r+0x4da>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1d2      	bne.n	8006354 <_dtoa_r+0x37c>
 80063ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 808b 	beq.w	80064cc <_dtoa_r+0x4f4>
 80063b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80063ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80063be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063c2:	2200      	movs	r2, #0
 80063c4:	4b6f      	ldr	r3, [pc, #444]	; (8006584 <_dtoa_r+0x5ac>)
 80063c6:	f7fa fbad 	bl	8000b24 <__aeabi_dcmplt>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d07e      	beq.n	80064cc <_dtoa_r+0x4f4>
 80063ce:	9b08      	ldr	r3, [sp, #32]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d07b      	beq.n	80064cc <_dtoa_r+0x4f4>
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	dd38      	ble.n	800644c <_dtoa_r+0x474>
 80063da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063de:	2200      	movs	r2, #0
 80063e0:	4b69      	ldr	r3, [pc, #420]	; (8006588 <_dtoa_r+0x5b0>)
 80063e2:	f7fa f92d 	bl	8000640 <__aeabi_dmul>
 80063e6:	464c      	mov	r4, r9
 80063e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 80063f0:	3701      	adds	r7, #1
 80063f2:	4638      	mov	r0, r7
 80063f4:	f7fa f8ba 	bl	800056c <__aeabi_i2d>
 80063f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063fc:	f7fa f920 	bl	8000640 <__aeabi_dmul>
 8006400:	2200      	movs	r2, #0
 8006402:	4b62      	ldr	r3, [pc, #392]	; (800658c <_dtoa_r+0x5b4>)
 8006404:	f7f9 ff66 	bl	80002d4 <__adddf3>
 8006408:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800640c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006410:	9611      	str	r6, [sp, #68]	; 0x44
 8006412:	2c00      	cmp	r4, #0
 8006414:	d15d      	bne.n	80064d2 <_dtoa_r+0x4fa>
 8006416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800641a:	2200      	movs	r2, #0
 800641c:	4b5c      	ldr	r3, [pc, #368]	; (8006590 <_dtoa_r+0x5b8>)
 800641e:	f7f9 ff57 	bl	80002d0 <__aeabi_dsub>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800642a:	4633      	mov	r3, r6
 800642c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800642e:	f7fa fb97 	bl	8000b60 <__aeabi_dcmpgt>
 8006432:	2800      	cmp	r0, #0
 8006434:	f040 829c 	bne.w	8006970 <_dtoa_r+0x998>
 8006438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800643c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800643e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006442:	f7fa fb6f 	bl	8000b24 <__aeabi_dcmplt>
 8006446:	2800      	cmp	r0, #0
 8006448:	f040 8290 	bne.w	800696c <_dtoa_r+0x994>
 800644c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006450:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006456:	2b00      	cmp	r3, #0
 8006458:	f2c0 8152 	blt.w	8006700 <_dtoa_r+0x728>
 800645c:	f1ba 0f0e 	cmp.w	sl, #14
 8006460:	f300 814e 	bgt.w	8006700 <_dtoa_r+0x728>
 8006464:	4b45      	ldr	r3, [pc, #276]	; (800657c <_dtoa_r+0x5a4>)
 8006466:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800646a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800646e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006472:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006474:	2b00      	cmp	r3, #0
 8006476:	f280 80db 	bge.w	8006630 <_dtoa_r+0x658>
 800647a:	9b08      	ldr	r3, [sp, #32]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f300 80d7 	bgt.w	8006630 <_dtoa_r+0x658>
 8006482:	f040 8272 	bne.w	800696a <_dtoa_r+0x992>
 8006486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800648a:	2200      	movs	r2, #0
 800648c:	4b40      	ldr	r3, [pc, #256]	; (8006590 <_dtoa_r+0x5b8>)
 800648e:	f7fa f8d7 	bl	8000640 <__aeabi_dmul>
 8006492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006496:	f7fa fb59 	bl	8000b4c <__aeabi_dcmpge>
 800649a:	9c08      	ldr	r4, [sp, #32]
 800649c:	4626      	mov	r6, r4
 800649e:	2800      	cmp	r0, #0
 80064a0:	f040 8248 	bne.w	8006934 <_dtoa_r+0x95c>
 80064a4:	2331      	movs	r3, #49	; 0x31
 80064a6:	9f03      	ldr	r7, [sp, #12]
 80064a8:	f10a 0a01 	add.w	sl, sl, #1
 80064ac:	f807 3b01 	strb.w	r3, [r7], #1
 80064b0:	e244      	b.n	800693c <_dtoa_r+0x964>
 80064b2:	07e2      	lsls	r2, r4, #31
 80064b4:	d505      	bpl.n	80064c2 <_dtoa_r+0x4ea>
 80064b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064ba:	f7fa f8c1 	bl	8000640 <__aeabi_dmul>
 80064be:	2301      	movs	r3, #1
 80064c0:	3701      	adds	r7, #1
 80064c2:	1064      	asrs	r4, r4, #1
 80064c4:	3608      	adds	r6, #8
 80064c6:	e76d      	b.n	80063a4 <_dtoa_r+0x3cc>
 80064c8:	2702      	movs	r7, #2
 80064ca:	e770      	b.n	80063ae <_dtoa_r+0x3d6>
 80064cc:	46d0      	mov	r8, sl
 80064ce:	9c08      	ldr	r4, [sp, #32]
 80064d0:	e78f      	b.n	80063f2 <_dtoa_r+0x41a>
 80064d2:	9903      	ldr	r1, [sp, #12]
 80064d4:	4b29      	ldr	r3, [pc, #164]	; (800657c <_dtoa_r+0x5a4>)
 80064d6:	4421      	add	r1, r4
 80064d8:	9112      	str	r1, [sp, #72]	; 0x48
 80064da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064e8:	2900      	cmp	r1, #0
 80064ea:	d055      	beq.n	8006598 <_dtoa_r+0x5c0>
 80064ec:	2000      	movs	r0, #0
 80064ee:	4929      	ldr	r1, [pc, #164]	; (8006594 <_dtoa_r+0x5bc>)
 80064f0:	f7fa f9d0 	bl	8000894 <__aeabi_ddiv>
 80064f4:	463b      	mov	r3, r7
 80064f6:	4632      	mov	r2, r6
 80064f8:	f7f9 feea 	bl	80002d0 <__aeabi_dsub>
 80064fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006500:	9f03      	ldr	r7, [sp, #12]
 8006502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006506:	f7fa fb4b 	bl	8000ba0 <__aeabi_d2iz>
 800650a:	4604      	mov	r4, r0
 800650c:	f7fa f82e 	bl	800056c <__aeabi_i2d>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006518:	f7f9 feda 	bl	80002d0 <__aeabi_dsub>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	3430      	adds	r4, #48	; 0x30
 8006522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006526:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800652a:	f807 4b01 	strb.w	r4, [r7], #1
 800652e:	f7fa faf9 	bl	8000b24 <__aeabi_dcmplt>
 8006532:	2800      	cmp	r0, #0
 8006534:	d174      	bne.n	8006620 <_dtoa_r+0x648>
 8006536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800653a:	2000      	movs	r0, #0
 800653c:	4911      	ldr	r1, [pc, #68]	; (8006584 <_dtoa_r+0x5ac>)
 800653e:	f7f9 fec7 	bl	80002d0 <__aeabi_dsub>
 8006542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006546:	f7fa faed 	bl	8000b24 <__aeabi_dcmplt>
 800654a:	2800      	cmp	r0, #0
 800654c:	f040 80b7 	bne.w	80066be <_dtoa_r+0x6e6>
 8006550:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006552:	429f      	cmp	r7, r3
 8006554:	f43f af7a 	beq.w	800644c <_dtoa_r+0x474>
 8006558:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800655c:	2200      	movs	r2, #0
 800655e:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <_dtoa_r+0x5b0>)
 8006560:	f7fa f86e 	bl	8000640 <__aeabi_dmul>
 8006564:	2200      	movs	r2, #0
 8006566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800656a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <_dtoa_r+0x5b0>)
 8006570:	f7fa f866 	bl	8000640 <__aeabi_dmul>
 8006574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006578:	e7c3      	b.n	8006502 <_dtoa_r+0x52a>
 800657a:	bf00      	nop
 800657c:	080085c0 	.word	0x080085c0
 8006580:	08008598 	.word	0x08008598
 8006584:	3ff00000 	.word	0x3ff00000
 8006588:	40240000 	.word	0x40240000
 800658c:	401c0000 	.word	0x401c0000
 8006590:	40140000 	.word	0x40140000
 8006594:	3fe00000 	.word	0x3fe00000
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7fa f850 	bl	8000640 <__aeabi_dmul>
 80065a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065a6:	9c03      	ldr	r4, [sp, #12]
 80065a8:	9314      	str	r3, [sp, #80]	; 0x50
 80065aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065ae:	f7fa faf7 	bl	8000ba0 <__aeabi_d2iz>
 80065b2:	9015      	str	r0, [sp, #84]	; 0x54
 80065b4:	f7f9 ffda 	bl	800056c <__aeabi_i2d>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065c0:	f7f9 fe86 	bl	80002d0 <__aeabi_dsub>
 80065c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065c6:	4606      	mov	r6, r0
 80065c8:	3330      	adds	r3, #48	; 0x30
 80065ca:	f804 3b01 	strb.w	r3, [r4], #1
 80065ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065d0:	460f      	mov	r7, r1
 80065d2:	429c      	cmp	r4, r3
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	d124      	bne.n	8006624 <_dtoa_r+0x64c>
 80065da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065de:	4bb0      	ldr	r3, [pc, #704]	; (80068a0 <_dtoa_r+0x8c8>)
 80065e0:	f7f9 fe78 	bl	80002d4 <__adddf3>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4630      	mov	r0, r6
 80065ea:	4639      	mov	r1, r7
 80065ec:	f7fa fab8 	bl	8000b60 <__aeabi_dcmpgt>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d163      	bne.n	80066bc <_dtoa_r+0x6e4>
 80065f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065f8:	2000      	movs	r0, #0
 80065fa:	49a9      	ldr	r1, [pc, #676]	; (80068a0 <_dtoa_r+0x8c8>)
 80065fc:	f7f9 fe68 	bl	80002d0 <__aeabi_dsub>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4630      	mov	r0, r6
 8006606:	4639      	mov	r1, r7
 8006608:	f7fa fa8c 	bl	8000b24 <__aeabi_dcmplt>
 800660c:	2800      	cmp	r0, #0
 800660e:	f43f af1d 	beq.w	800644c <_dtoa_r+0x474>
 8006612:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006614:	1e7b      	subs	r3, r7, #1
 8006616:	9314      	str	r3, [sp, #80]	; 0x50
 8006618:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800661c:	2b30      	cmp	r3, #48	; 0x30
 800661e:	d0f8      	beq.n	8006612 <_dtoa_r+0x63a>
 8006620:	46c2      	mov	sl, r8
 8006622:	e03b      	b.n	800669c <_dtoa_r+0x6c4>
 8006624:	4b9f      	ldr	r3, [pc, #636]	; (80068a4 <_dtoa_r+0x8cc>)
 8006626:	f7fa f80b 	bl	8000640 <__aeabi_dmul>
 800662a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800662e:	e7bc      	b.n	80065aa <_dtoa_r+0x5d2>
 8006630:	9f03      	ldr	r7, [sp, #12]
 8006632:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	f7fa f929 	bl	8000894 <__aeabi_ddiv>
 8006642:	f7fa faad 	bl	8000ba0 <__aeabi_d2iz>
 8006646:	4604      	mov	r4, r0
 8006648:	f7f9 ff90 	bl	800056c <__aeabi_i2d>
 800664c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006650:	f7f9 fff6 	bl	8000640 <__aeabi_dmul>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4640      	mov	r0, r8
 800665a:	4649      	mov	r1, r9
 800665c:	f7f9 fe38 	bl	80002d0 <__aeabi_dsub>
 8006660:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006664:	f807 6b01 	strb.w	r6, [r7], #1
 8006668:	9e03      	ldr	r6, [sp, #12]
 800666a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800666e:	1bbe      	subs	r6, r7, r6
 8006670:	45b4      	cmp	ip, r6
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	d136      	bne.n	80066e6 <_dtoa_r+0x70e>
 8006678:	f7f9 fe2c 	bl	80002d4 <__adddf3>
 800667c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006680:	4680      	mov	r8, r0
 8006682:	4689      	mov	r9, r1
 8006684:	f7fa fa6c 	bl	8000b60 <__aeabi_dcmpgt>
 8006688:	bb58      	cbnz	r0, 80066e2 <_dtoa_r+0x70a>
 800668a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800668e:	4640      	mov	r0, r8
 8006690:	4649      	mov	r1, r9
 8006692:	f7fa fa3d 	bl	8000b10 <__aeabi_dcmpeq>
 8006696:	b108      	cbz	r0, 800669c <_dtoa_r+0x6c4>
 8006698:	07e1      	lsls	r1, r4, #31
 800669a:	d422      	bmi.n	80066e2 <_dtoa_r+0x70a>
 800669c:	4628      	mov	r0, r5
 800669e:	4659      	mov	r1, fp
 80066a0:	f000 fd0c 	bl	80070bc <_Bfree>
 80066a4:	2300      	movs	r3, #0
 80066a6:	703b      	strb	r3, [r7, #0]
 80066a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80066aa:	f10a 0001 	add.w	r0, sl, #1
 80066ae:	6018      	str	r0, [r3, #0]
 80066b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f43f acde 	beq.w	8006074 <_dtoa_r+0x9c>
 80066b8:	601f      	str	r7, [r3, #0]
 80066ba:	e4db      	b.n	8006074 <_dtoa_r+0x9c>
 80066bc:	4627      	mov	r7, r4
 80066be:	463b      	mov	r3, r7
 80066c0:	461f      	mov	r7, r3
 80066c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066c6:	2a39      	cmp	r2, #57	; 0x39
 80066c8:	d107      	bne.n	80066da <_dtoa_r+0x702>
 80066ca:	9a03      	ldr	r2, [sp, #12]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d1f7      	bne.n	80066c0 <_dtoa_r+0x6e8>
 80066d0:	2230      	movs	r2, #48	; 0x30
 80066d2:	9903      	ldr	r1, [sp, #12]
 80066d4:	f108 0801 	add.w	r8, r8, #1
 80066d8:	700a      	strb	r2, [r1, #0]
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	3201      	adds	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	e79e      	b.n	8006620 <_dtoa_r+0x648>
 80066e2:	46d0      	mov	r8, sl
 80066e4:	e7eb      	b.n	80066be <_dtoa_r+0x6e6>
 80066e6:	2200      	movs	r2, #0
 80066e8:	4b6e      	ldr	r3, [pc, #440]	; (80068a4 <_dtoa_r+0x8cc>)
 80066ea:	f7f9 ffa9 	bl	8000640 <__aeabi_dmul>
 80066ee:	2200      	movs	r2, #0
 80066f0:	2300      	movs	r3, #0
 80066f2:	4680      	mov	r8, r0
 80066f4:	4689      	mov	r9, r1
 80066f6:	f7fa fa0b 	bl	8000b10 <__aeabi_dcmpeq>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d09b      	beq.n	8006636 <_dtoa_r+0x65e>
 80066fe:	e7cd      	b.n	800669c <_dtoa_r+0x6c4>
 8006700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006702:	2a00      	cmp	r2, #0
 8006704:	f000 80d0 	beq.w	80068a8 <_dtoa_r+0x8d0>
 8006708:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800670a:	2a01      	cmp	r2, #1
 800670c:	f300 80ae 	bgt.w	800686c <_dtoa_r+0x894>
 8006710:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006712:	2a00      	cmp	r2, #0
 8006714:	f000 80a6 	beq.w	8006864 <_dtoa_r+0x88c>
 8006718:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800671c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800671e:	9f06      	ldr	r7, [sp, #24]
 8006720:	9a06      	ldr	r2, [sp, #24]
 8006722:	2101      	movs	r1, #1
 8006724:	441a      	add	r2, r3
 8006726:	9206      	str	r2, [sp, #24]
 8006728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800672a:	4628      	mov	r0, r5
 800672c:	441a      	add	r2, r3
 800672e:	9209      	str	r2, [sp, #36]	; 0x24
 8006730:	f000 fd7a 	bl	8007228 <__i2b>
 8006734:	4606      	mov	r6, r0
 8006736:	2f00      	cmp	r7, #0
 8006738:	dd0c      	ble.n	8006754 <_dtoa_r+0x77c>
 800673a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	dd09      	ble.n	8006754 <_dtoa_r+0x77c>
 8006740:	42bb      	cmp	r3, r7
 8006742:	bfa8      	it	ge
 8006744:	463b      	movge	r3, r7
 8006746:	9a06      	ldr	r2, [sp, #24]
 8006748:	1aff      	subs	r7, r7, r3
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	9206      	str	r2, [sp, #24]
 800674e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	9309      	str	r3, [sp, #36]	; 0x24
 8006754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006756:	b1f3      	cbz	r3, 8006796 <_dtoa_r+0x7be>
 8006758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 80a8 	beq.w	80068b0 <_dtoa_r+0x8d8>
 8006760:	2c00      	cmp	r4, #0
 8006762:	dd10      	ble.n	8006786 <_dtoa_r+0x7ae>
 8006764:	4631      	mov	r1, r6
 8006766:	4622      	mov	r2, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f000 fe1b 	bl	80073a4 <__pow5mult>
 800676e:	465a      	mov	r2, fp
 8006770:	4601      	mov	r1, r0
 8006772:	4606      	mov	r6, r0
 8006774:	4628      	mov	r0, r5
 8006776:	f000 fd6d 	bl	8007254 <__multiply>
 800677a:	4680      	mov	r8, r0
 800677c:	4659      	mov	r1, fp
 800677e:	4628      	mov	r0, r5
 8006780:	f000 fc9c 	bl	80070bc <_Bfree>
 8006784:	46c3      	mov	fp, r8
 8006786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006788:	1b1a      	subs	r2, r3, r4
 800678a:	d004      	beq.n	8006796 <_dtoa_r+0x7be>
 800678c:	4659      	mov	r1, fp
 800678e:	4628      	mov	r0, r5
 8006790:	f000 fe08 	bl	80073a4 <__pow5mult>
 8006794:	4683      	mov	fp, r0
 8006796:	2101      	movs	r1, #1
 8006798:	4628      	mov	r0, r5
 800679a:	f000 fd45 	bl	8007228 <__i2b>
 800679e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067a0:	4604      	mov	r4, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f340 8086 	ble.w	80068b4 <_dtoa_r+0x8dc>
 80067a8:	461a      	mov	r2, r3
 80067aa:	4601      	mov	r1, r0
 80067ac:	4628      	mov	r0, r5
 80067ae:	f000 fdf9 	bl	80073a4 <__pow5mult>
 80067b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067b4:	4604      	mov	r4, r0
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	dd7f      	ble.n	80068ba <_dtoa_r+0x8e2>
 80067ba:	f04f 0800 	mov.w	r8, #0
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067c4:	6918      	ldr	r0, [r3, #16]
 80067c6:	f000 fce1 	bl	800718c <__hi0bits>
 80067ca:	f1c0 0020 	rsb	r0, r0, #32
 80067ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d0:	4418      	add	r0, r3
 80067d2:	f010 001f 	ands.w	r0, r0, #31
 80067d6:	f000 8092 	beq.w	80068fe <_dtoa_r+0x926>
 80067da:	f1c0 0320 	rsb	r3, r0, #32
 80067de:	2b04      	cmp	r3, #4
 80067e0:	f340 808a 	ble.w	80068f8 <_dtoa_r+0x920>
 80067e4:	f1c0 001c 	rsb	r0, r0, #28
 80067e8:	9b06      	ldr	r3, [sp, #24]
 80067ea:	4407      	add	r7, r0
 80067ec:	4403      	add	r3, r0
 80067ee:	9306      	str	r3, [sp, #24]
 80067f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f2:	4403      	add	r3, r0
 80067f4:	9309      	str	r3, [sp, #36]	; 0x24
 80067f6:	9b06      	ldr	r3, [sp, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	dd05      	ble.n	8006808 <_dtoa_r+0x830>
 80067fc:	4659      	mov	r1, fp
 80067fe:	461a      	mov	r2, r3
 8006800:	4628      	mov	r0, r5
 8006802:	f000 fe29 	bl	8007458 <__lshift>
 8006806:	4683      	mov	fp, r0
 8006808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680a:	2b00      	cmp	r3, #0
 800680c:	dd05      	ble.n	800681a <_dtoa_r+0x842>
 800680e:	4621      	mov	r1, r4
 8006810:	461a      	mov	r2, r3
 8006812:	4628      	mov	r0, r5
 8006814:	f000 fe20 	bl	8007458 <__lshift>
 8006818:	4604      	mov	r4, r0
 800681a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d070      	beq.n	8006902 <_dtoa_r+0x92a>
 8006820:	4621      	mov	r1, r4
 8006822:	4658      	mov	r0, fp
 8006824:	f000 fe88 	bl	8007538 <__mcmp>
 8006828:	2800      	cmp	r0, #0
 800682a:	da6a      	bge.n	8006902 <_dtoa_r+0x92a>
 800682c:	2300      	movs	r3, #0
 800682e:	4659      	mov	r1, fp
 8006830:	220a      	movs	r2, #10
 8006832:	4628      	mov	r0, r5
 8006834:	f000 fc64 	bl	8007100 <__multadd>
 8006838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800683a:	4683      	mov	fp, r0
 800683c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8194 	beq.w	8006b6e <_dtoa_r+0xb96>
 8006846:	4631      	mov	r1, r6
 8006848:	2300      	movs	r3, #0
 800684a:	220a      	movs	r2, #10
 800684c:	4628      	mov	r0, r5
 800684e:	f000 fc57 	bl	8007100 <__multadd>
 8006852:	f1b9 0f00 	cmp.w	r9, #0
 8006856:	4606      	mov	r6, r0
 8006858:	f300 8093 	bgt.w	8006982 <_dtoa_r+0x9aa>
 800685c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800685e:	2b02      	cmp	r3, #2
 8006860:	dc57      	bgt.n	8006912 <_dtoa_r+0x93a>
 8006862:	e08e      	b.n	8006982 <_dtoa_r+0x9aa>
 8006864:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800686a:	e757      	b.n	800671c <_dtoa_r+0x744>
 800686c:	9b08      	ldr	r3, [sp, #32]
 800686e:	1e5c      	subs	r4, r3, #1
 8006870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006872:	42a3      	cmp	r3, r4
 8006874:	bfb7      	itett	lt
 8006876:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006878:	1b1c      	subge	r4, r3, r4
 800687a:	1ae2      	sublt	r2, r4, r3
 800687c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800687e:	bfbe      	ittt	lt
 8006880:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006882:	189b      	addlt	r3, r3, r2
 8006884:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006886:	9b08      	ldr	r3, [sp, #32]
 8006888:	bfb8      	it	lt
 800688a:	2400      	movlt	r4, #0
 800688c:	2b00      	cmp	r3, #0
 800688e:	bfbb      	ittet	lt
 8006890:	9b06      	ldrlt	r3, [sp, #24]
 8006892:	9a08      	ldrlt	r2, [sp, #32]
 8006894:	9f06      	ldrge	r7, [sp, #24]
 8006896:	1a9f      	sublt	r7, r3, r2
 8006898:	bfac      	ite	ge
 800689a:	9b08      	ldrge	r3, [sp, #32]
 800689c:	2300      	movlt	r3, #0
 800689e:	e73f      	b.n	8006720 <_dtoa_r+0x748>
 80068a0:	3fe00000 	.word	0x3fe00000
 80068a4:	40240000 	.word	0x40240000
 80068a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068aa:	9f06      	ldr	r7, [sp, #24]
 80068ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80068ae:	e742      	b.n	8006736 <_dtoa_r+0x75e>
 80068b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b2:	e76b      	b.n	800678c <_dtoa_r+0x7b4>
 80068b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	dc19      	bgt.n	80068ee <_dtoa_r+0x916>
 80068ba:	9b04      	ldr	r3, [sp, #16]
 80068bc:	b9bb      	cbnz	r3, 80068ee <_dtoa_r+0x916>
 80068be:	9b05      	ldr	r3, [sp, #20]
 80068c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068c4:	b99b      	cbnz	r3, 80068ee <_dtoa_r+0x916>
 80068c6:	9b05      	ldr	r3, [sp, #20]
 80068c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068cc:	0d1b      	lsrs	r3, r3, #20
 80068ce:	051b      	lsls	r3, r3, #20
 80068d0:	b183      	cbz	r3, 80068f4 <_dtoa_r+0x91c>
 80068d2:	f04f 0801 	mov.w	r8, #1
 80068d6:	9b06      	ldr	r3, [sp, #24]
 80068d8:	3301      	adds	r3, #1
 80068da:	9306      	str	r3, [sp, #24]
 80068dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068de:	3301      	adds	r3, #1
 80068e0:	9309      	str	r3, [sp, #36]	; 0x24
 80068e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f47f af6a 	bne.w	80067be <_dtoa_r+0x7e6>
 80068ea:	2001      	movs	r0, #1
 80068ec:	e76f      	b.n	80067ce <_dtoa_r+0x7f6>
 80068ee:	f04f 0800 	mov.w	r8, #0
 80068f2:	e7f6      	b.n	80068e2 <_dtoa_r+0x90a>
 80068f4:	4698      	mov	r8, r3
 80068f6:	e7f4      	b.n	80068e2 <_dtoa_r+0x90a>
 80068f8:	f43f af7d 	beq.w	80067f6 <_dtoa_r+0x81e>
 80068fc:	4618      	mov	r0, r3
 80068fe:	301c      	adds	r0, #28
 8006900:	e772      	b.n	80067e8 <_dtoa_r+0x810>
 8006902:	9b08      	ldr	r3, [sp, #32]
 8006904:	2b00      	cmp	r3, #0
 8006906:	dc36      	bgt.n	8006976 <_dtoa_r+0x99e>
 8006908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800690a:	2b02      	cmp	r3, #2
 800690c:	dd33      	ble.n	8006976 <_dtoa_r+0x99e>
 800690e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006912:	f1b9 0f00 	cmp.w	r9, #0
 8006916:	d10d      	bne.n	8006934 <_dtoa_r+0x95c>
 8006918:	4621      	mov	r1, r4
 800691a:	464b      	mov	r3, r9
 800691c:	2205      	movs	r2, #5
 800691e:	4628      	mov	r0, r5
 8006920:	f000 fbee 	bl	8007100 <__multadd>
 8006924:	4601      	mov	r1, r0
 8006926:	4604      	mov	r4, r0
 8006928:	4658      	mov	r0, fp
 800692a:	f000 fe05 	bl	8007538 <__mcmp>
 800692e:	2800      	cmp	r0, #0
 8006930:	f73f adb8 	bgt.w	80064a4 <_dtoa_r+0x4cc>
 8006934:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006936:	9f03      	ldr	r7, [sp, #12]
 8006938:	ea6f 0a03 	mvn.w	sl, r3
 800693c:	f04f 0800 	mov.w	r8, #0
 8006940:	4621      	mov	r1, r4
 8006942:	4628      	mov	r0, r5
 8006944:	f000 fbba 	bl	80070bc <_Bfree>
 8006948:	2e00      	cmp	r6, #0
 800694a:	f43f aea7 	beq.w	800669c <_dtoa_r+0x6c4>
 800694e:	f1b8 0f00 	cmp.w	r8, #0
 8006952:	d005      	beq.n	8006960 <_dtoa_r+0x988>
 8006954:	45b0      	cmp	r8, r6
 8006956:	d003      	beq.n	8006960 <_dtoa_r+0x988>
 8006958:	4641      	mov	r1, r8
 800695a:	4628      	mov	r0, r5
 800695c:	f000 fbae 	bl	80070bc <_Bfree>
 8006960:	4631      	mov	r1, r6
 8006962:	4628      	mov	r0, r5
 8006964:	f000 fbaa 	bl	80070bc <_Bfree>
 8006968:	e698      	b.n	800669c <_dtoa_r+0x6c4>
 800696a:	2400      	movs	r4, #0
 800696c:	4626      	mov	r6, r4
 800696e:	e7e1      	b.n	8006934 <_dtoa_r+0x95c>
 8006970:	46c2      	mov	sl, r8
 8006972:	4626      	mov	r6, r4
 8006974:	e596      	b.n	80064a4 <_dtoa_r+0x4cc>
 8006976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80fd 	beq.w	8006b7c <_dtoa_r+0xba4>
 8006982:	2f00      	cmp	r7, #0
 8006984:	dd05      	ble.n	8006992 <_dtoa_r+0x9ba>
 8006986:	4631      	mov	r1, r6
 8006988:	463a      	mov	r2, r7
 800698a:	4628      	mov	r0, r5
 800698c:	f000 fd64 	bl	8007458 <__lshift>
 8006990:	4606      	mov	r6, r0
 8006992:	f1b8 0f00 	cmp.w	r8, #0
 8006996:	d05c      	beq.n	8006a52 <_dtoa_r+0xa7a>
 8006998:	4628      	mov	r0, r5
 800699a:	6871      	ldr	r1, [r6, #4]
 800699c:	f000 fb4e 	bl	800703c <_Balloc>
 80069a0:	4607      	mov	r7, r0
 80069a2:	b928      	cbnz	r0, 80069b0 <_dtoa_r+0x9d8>
 80069a4:	4602      	mov	r2, r0
 80069a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069aa:	4b7f      	ldr	r3, [pc, #508]	; (8006ba8 <_dtoa_r+0xbd0>)
 80069ac:	f7ff bb28 	b.w	8006000 <_dtoa_r+0x28>
 80069b0:	6932      	ldr	r2, [r6, #16]
 80069b2:	f106 010c 	add.w	r1, r6, #12
 80069b6:	3202      	adds	r2, #2
 80069b8:	0092      	lsls	r2, r2, #2
 80069ba:	300c      	adds	r0, #12
 80069bc:	f000 fb30 	bl	8007020 <memcpy>
 80069c0:	2201      	movs	r2, #1
 80069c2:	4639      	mov	r1, r7
 80069c4:	4628      	mov	r0, r5
 80069c6:	f000 fd47 	bl	8007458 <__lshift>
 80069ca:	46b0      	mov	r8, r6
 80069cc:	4606      	mov	r6, r0
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	3301      	adds	r3, #1
 80069d2:	9308      	str	r3, [sp, #32]
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	444b      	add	r3, r9
 80069d8:	930a      	str	r3, [sp, #40]	; 0x28
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	9309      	str	r3, [sp, #36]	; 0x24
 80069e2:	9b08      	ldr	r3, [sp, #32]
 80069e4:	4621      	mov	r1, r4
 80069e6:	3b01      	subs	r3, #1
 80069e8:	4658      	mov	r0, fp
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	f7ff fa68 	bl	8005ec0 <quorem>
 80069f0:	4603      	mov	r3, r0
 80069f2:	4641      	mov	r1, r8
 80069f4:	3330      	adds	r3, #48	; 0x30
 80069f6:	9006      	str	r0, [sp, #24]
 80069f8:	4658      	mov	r0, fp
 80069fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80069fc:	f000 fd9c 	bl	8007538 <__mcmp>
 8006a00:	4632      	mov	r2, r6
 8006a02:	4681      	mov	r9, r0
 8006a04:	4621      	mov	r1, r4
 8006a06:	4628      	mov	r0, r5
 8006a08:	f000 fdb2 	bl	8007570 <__mdiff>
 8006a0c:	68c2      	ldr	r2, [r0, #12]
 8006a0e:	4607      	mov	r7, r0
 8006a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a12:	bb02      	cbnz	r2, 8006a56 <_dtoa_r+0xa7e>
 8006a14:	4601      	mov	r1, r0
 8006a16:	4658      	mov	r0, fp
 8006a18:	f000 fd8e 	bl	8007538 <__mcmp>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a20:	4639      	mov	r1, r7
 8006a22:	4628      	mov	r0, r5
 8006a24:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006a28:	f000 fb48 	bl	80070bc <_Bfree>
 8006a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a30:	9f08      	ldr	r7, [sp, #32]
 8006a32:	ea43 0102 	orr.w	r1, r3, r2
 8006a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a3c:	d10d      	bne.n	8006a5a <_dtoa_r+0xa82>
 8006a3e:	2b39      	cmp	r3, #57	; 0x39
 8006a40:	d029      	beq.n	8006a96 <_dtoa_r+0xabe>
 8006a42:	f1b9 0f00 	cmp.w	r9, #0
 8006a46:	dd01      	ble.n	8006a4c <_dtoa_r+0xa74>
 8006a48:	9b06      	ldr	r3, [sp, #24]
 8006a4a:	3331      	adds	r3, #49	; 0x31
 8006a4c:	9a04      	ldr	r2, [sp, #16]
 8006a4e:	7013      	strb	r3, [r2, #0]
 8006a50:	e776      	b.n	8006940 <_dtoa_r+0x968>
 8006a52:	4630      	mov	r0, r6
 8006a54:	e7b9      	b.n	80069ca <_dtoa_r+0x9f2>
 8006a56:	2201      	movs	r2, #1
 8006a58:	e7e2      	b.n	8006a20 <_dtoa_r+0xa48>
 8006a5a:	f1b9 0f00 	cmp.w	r9, #0
 8006a5e:	db06      	blt.n	8006a6e <_dtoa_r+0xa96>
 8006a60:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006a62:	ea41 0909 	orr.w	r9, r1, r9
 8006a66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a68:	ea59 0101 	orrs.w	r1, r9, r1
 8006a6c:	d120      	bne.n	8006ab0 <_dtoa_r+0xad8>
 8006a6e:	2a00      	cmp	r2, #0
 8006a70:	ddec      	ble.n	8006a4c <_dtoa_r+0xa74>
 8006a72:	4659      	mov	r1, fp
 8006a74:	2201      	movs	r2, #1
 8006a76:	4628      	mov	r0, r5
 8006a78:	9308      	str	r3, [sp, #32]
 8006a7a:	f000 fced 	bl	8007458 <__lshift>
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4683      	mov	fp, r0
 8006a82:	f000 fd59 	bl	8007538 <__mcmp>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	9b08      	ldr	r3, [sp, #32]
 8006a8a:	dc02      	bgt.n	8006a92 <_dtoa_r+0xaba>
 8006a8c:	d1de      	bne.n	8006a4c <_dtoa_r+0xa74>
 8006a8e:	07da      	lsls	r2, r3, #31
 8006a90:	d5dc      	bpl.n	8006a4c <_dtoa_r+0xa74>
 8006a92:	2b39      	cmp	r3, #57	; 0x39
 8006a94:	d1d8      	bne.n	8006a48 <_dtoa_r+0xa70>
 8006a96:	2339      	movs	r3, #57	; 0x39
 8006a98:	9a04      	ldr	r2, [sp, #16]
 8006a9a:	7013      	strb	r3, [r2, #0]
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	461f      	mov	r7, r3
 8006aa0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	2a39      	cmp	r2, #57	; 0x39
 8006aa8:	d050      	beq.n	8006b4c <_dtoa_r+0xb74>
 8006aaa:	3201      	adds	r2, #1
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	e747      	b.n	8006940 <_dtoa_r+0x968>
 8006ab0:	2a00      	cmp	r2, #0
 8006ab2:	dd03      	ble.n	8006abc <_dtoa_r+0xae4>
 8006ab4:	2b39      	cmp	r3, #57	; 0x39
 8006ab6:	d0ee      	beq.n	8006a96 <_dtoa_r+0xabe>
 8006ab8:	3301      	adds	r3, #1
 8006aba:	e7c7      	b.n	8006a4c <_dtoa_r+0xa74>
 8006abc:	9a08      	ldr	r2, [sp, #32]
 8006abe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ac0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ac4:	428a      	cmp	r2, r1
 8006ac6:	d02a      	beq.n	8006b1e <_dtoa_r+0xb46>
 8006ac8:	4659      	mov	r1, fp
 8006aca:	2300      	movs	r3, #0
 8006acc:	220a      	movs	r2, #10
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f000 fb16 	bl	8007100 <__multadd>
 8006ad4:	45b0      	cmp	r8, r6
 8006ad6:	4683      	mov	fp, r0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	f04f 020a 	mov.w	r2, #10
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	d107      	bne.n	8006af6 <_dtoa_r+0xb1e>
 8006ae6:	f000 fb0b 	bl	8007100 <__multadd>
 8006aea:	4680      	mov	r8, r0
 8006aec:	4606      	mov	r6, r0
 8006aee:	9b08      	ldr	r3, [sp, #32]
 8006af0:	3301      	adds	r3, #1
 8006af2:	9308      	str	r3, [sp, #32]
 8006af4:	e775      	b.n	80069e2 <_dtoa_r+0xa0a>
 8006af6:	f000 fb03 	bl	8007100 <__multadd>
 8006afa:	4631      	mov	r1, r6
 8006afc:	4680      	mov	r8, r0
 8006afe:	2300      	movs	r3, #0
 8006b00:	220a      	movs	r2, #10
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 fafc 	bl	8007100 <__multadd>
 8006b08:	4606      	mov	r6, r0
 8006b0a:	e7f0      	b.n	8006aee <_dtoa_r+0xb16>
 8006b0c:	f1b9 0f00 	cmp.w	r9, #0
 8006b10:	bfcc      	ite	gt
 8006b12:	464f      	movgt	r7, r9
 8006b14:	2701      	movle	r7, #1
 8006b16:	f04f 0800 	mov.w	r8, #0
 8006b1a:	9a03      	ldr	r2, [sp, #12]
 8006b1c:	4417      	add	r7, r2
 8006b1e:	4659      	mov	r1, fp
 8006b20:	2201      	movs	r2, #1
 8006b22:	4628      	mov	r0, r5
 8006b24:	9308      	str	r3, [sp, #32]
 8006b26:	f000 fc97 	bl	8007458 <__lshift>
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	4683      	mov	fp, r0
 8006b2e:	f000 fd03 	bl	8007538 <__mcmp>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	dcb2      	bgt.n	8006a9c <_dtoa_r+0xac4>
 8006b36:	d102      	bne.n	8006b3e <_dtoa_r+0xb66>
 8006b38:	9b08      	ldr	r3, [sp, #32]
 8006b3a:	07db      	lsls	r3, r3, #31
 8006b3c:	d4ae      	bmi.n	8006a9c <_dtoa_r+0xac4>
 8006b3e:	463b      	mov	r3, r7
 8006b40:	461f      	mov	r7, r3
 8006b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b46:	2a30      	cmp	r2, #48	; 0x30
 8006b48:	d0fa      	beq.n	8006b40 <_dtoa_r+0xb68>
 8006b4a:	e6f9      	b.n	8006940 <_dtoa_r+0x968>
 8006b4c:	9a03      	ldr	r2, [sp, #12]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d1a5      	bne.n	8006a9e <_dtoa_r+0xac6>
 8006b52:	2331      	movs	r3, #49	; 0x31
 8006b54:	f10a 0a01 	add.w	sl, sl, #1
 8006b58:	e779      	b.n	8006a4e <_dtoa_r+0xa76>
 8006b5a:	4b14      	ldr	r3, [pc, #80]	; (8006bac <_dtoa_r+0xbd4>)
 8006b5c:	f7ff baa8 	b.w	80060b0 <_dtoa_r+0xd8>
 8006b60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f47f aa81 	bne.w	800606a <_dtoa_r+0x92>
 8006b68:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <_dtoa_r+0xbd8>)
 8006b6a:	f7ff baa1 	b.w	80060b0 <_dtoa_r+0xd8>
 8006b6e:	f1b9 0f00 	cmp.w	r9, #0
 8006b72:	dc03      	bgt.n	8006b7c <_dtoa_r+0xba4>
 8006b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	f73f aecb 	bgt.w	8006912 <_dtoa_r+0x93a>
 8006b7c:	9f03      	ldr	r7, [sp, #12]
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4658      	mov	r0, fp
 8006b82:	f7ff f99d 	bl	8005ec0 <quorem>
 8006b86:	9a03      	ldr	r2, [sp, #12]
 8006b88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b8c:	f807 3b01 	strb.w	r3, [r7], #1
 8006b90:	1aba      	subs	r2, r7, r2
 8006b92:	4591      	cmp	r9, r2
 8006b94:	ddba      	ble.n	8006b0c <_dtoa_r+0xb34>
 8006b96:	4659      	mov	r1, fp
 8006b98:	2300      	movs	r3, #0
 8006b9a:	220a      	movs	r2, #10
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f000 faaf 	bl	8007100 <__multadd>
 8006ba2:	4683      	mov	fp, r0
 8006ba4:	e7eb      	b.n	8006b7e <_dtoa_r+0xba6>
 8006ba6:	bf00      	nop
 8006ba8:	080084cb 	.word	0x080084cb
 8006bac:	08008428 	.word	0x08008428
 8006bb0:	0800844c 	.word	0x0800844c

08006bb4 <__sflush_r>:
 8006bb4:	898a      	ldrh	r2, [r1, #12]
 8006bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb8:	4605      	mov	r5, r0
 8006bba:	0710      	lsls	r0, r2, #28
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	d457      	bmi.n	8006c70 <__sflush_r+0xbc>
 8006bc0:	684b      	ldr	r3, [r1, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	dc04      	bgt.n	8006bd0 <__sflush_r+0x1c>
 8006bc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc01      	bgt.n	8006bd0 <__sflush_r+0x1c>
 8006bcc:	2000      	movs	r0, #0
 8006bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bd2:	2e00      	cmp	r6, #0
 8006bd4:	d0fa      	beq.n	8006bcc <__sflush_r+0x18>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bdc:	682f      	ldr	r7, [r5, #0]
 8006bde:	602b      	str	r3, [r5, #0]
 8006be0:	d032      	beq.n	8006c48 <__sflush_r+0x94>
 8006be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	075a      	lsls	r2, r3, #29
 8006be8:	d505      	bpl.n	8006bf6 <__sflush_r+0x42>
 8006bea:	6863      	ldr	r3, [r4, #4]
 8006bec:	1ac0      	subs	r0, r0, r3
 8006bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bf0:	b10b      	cbz	r3, 8006bf6 <__sflush_r+0x42>
 8006bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bf4:	1ac0      	subs	r0, r0, r3
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	6a21      	ldr	r1, [r4, #32]
 8006c00:	47b0      	blx	r6
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	d106      	bne.n	8006c16 <__sflush_r+0x62>
 8006c08:	6829      	ldr	r1, [r5, #0]
 8006c0a:	291d      	cmp	r1, #29
 8006c0c:	d82c      	bhi.n	8006c68 <__sflush_r+0xb4>
 8006c0e:	4a29      	ldr	r2, [pc, #164]	; (8006cb4 <__sflush_r+0x100>)
 8006c10:	40ca      	lsrs	r2, r1
 8006c12:	07d6      	lsls	r6, r2, #31
 8006c14:	d528      	bpl.n	8006c68 <__sflush_r+0xb4>
 8006c16:	2200      	movs	r2, #0
 8006c18:	6062      	str	r2, [r4, #4]
 8006c1a:	6922      	ldr	r2, [r4, #16]
 8006c1c:	04d9      	lsls	r1, r3, #19
 8006c1e:	6022      	str	r2, [r4, #0]
 8006c20:	d504      	bpl.n	8006c2c <__sflush_r+0x78>
 8006c22:	1c42      	adds	r2, r0, #1
 8006c24:	d101      	bne.n	8006c2a <__sflush_r+0x76>
 8006c26:	682b      	ldr	r3, [r5, #0]
 8006c28:	b903      	cbnz	r3, 8006c2c <__sflush_r+0x78>
 8006c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8006c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c2e:	602f      	str	r7, [r5, #0]
 8006c30:	2900      	cmp	r1, #0
 8006c32:	d0cb      	beq.n	8006bcc <__sflush_r+0x18>
 8006c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	d002      	beq.n	8006c42 <__sflush_r+0x8e>
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f000 fd93 	bl	8007768 <_free_r>
 8006c42:	2000      	movs	r0, #0
 8006c44:	6360      	str	r0, [r4, #52]	; 0x34
 8006c46:	e7c2      	b.n	8006bce <__sflush_r+0x1a>
 8006c48:	6a21      	ldr	r1, [r4, #32]
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b0      	blx	r6
 8006c50:	1c41      	adds	r1, r0, #1
 8006c52:	d1c7      	bne.n	8006be4 <__sflush_r+0x30>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0c4      	beq.n	8006be4 <__sflush_r+0x30>
 8006c5a:	2b1d      	cmp	r3, #29
 8006c5c:	d001      	beq.n	8006c62 <__sflush_r+0xae>
 8006c5e:	2b16      	cmp	r3, #22
 8006c60:	d101      	bne.n	8006c66 <__sflush_r+0xb2>
 8006c62:	602f      	str	r7, [r5, #0]
 8006c64:	e7b2      	b.n	8006bcc <__sflush_r+0x18>
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c6c:	81a3      	strh	r3, [r4, #12]
 8006c6e:	e7ae      	b.n	8006bce <__sflush_r+0x1a>
 8006c70:	690f      	ldr	r7, [r1, #16]
 8006c72:	2f00      	cmp	r7, #0
 8006c74:	d0aa      	beq.n	8006bcc <__sflush_r+0x18>
 8006c76:	0793      	lsls	r3, r2, #30
 8006c78:	bf18      	it	ne
 8006c7a:	2300      	movne	r3, #0
 8006c7c:	680e      	ldr	r6, [r1, #0]
 8006c7e:	bf08      	it	eq
 8006c80:	694b      	ldreq	r3, [r1, #20]
 8006c82:	1bf6      	subs	r6, r6, r7
 8006c84:	600f      	str	r7, [r1, #0]
 8006c86:	608b      	str	r3, [r1, #8]
 8006c88:	2e00      	cmp	r6, #0
 8006c8a:	dd9f      	ble.n	8006bcc <__sflush_r+0x18>
 8006c8c:	4633      	mov	r3, r6
 8006c8e:	463a      	mov	r2, r7
 8006c90:	4628      	mov	r0, r5
 8006c92:	6a21      	ldr	r1, [r4, #32]
 8006c94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c98:	47e0      	blx	ip
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	dc06      	bgt.n	8006cac <__sflush_r+0xf8>
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	e790      	b.n	8006bce <__sflush_r+0x1a>
 8006cac:	4407      	add	r7, r0
 8006cae:	1a36      	subs	r6, r6, r0
 8006cb0:	e7ea      	b.n	8006c88 <__sflush_r+0xd4>
 8006cb2:	bf00      	nop
 8006cb4:	20400001 	.word	0x20400001

08006cb8 <_fflush_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	690b      	ldr	r3, [r1, #16]
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	b913      	cbnz	r3, 8006cc8 <_fflush_r+0x10>
 8006cc2:	2500      	movs	r5, #0
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	b118      	cbz	r0, 8006cd2 <_fflush_r+0x1a>
 8006cca:	6983      	ldr	r3, [r0, #24]
 8006ccc:	b90b      	cbnz	r3, 8006cd2 <_fflush_r+0x1a>
 8006cce:	f000 f887 	bl	8006de0 <__sinit>
 8006cd2:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <_fflush_r+0x6c>)
 8006cd4:	429c      	cmp	r4, r3
 8006cd6:	d11b      	bne.n	8006d10 <_fflush_r+0x58>
 8006cd8:	686c      	ldr	r4, [r5, #4]
 8006cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0ef      	beq.n	8006cc2 <_fflush_r+0xa>
 8006ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ce4:	07d0      	lsls	r0, r2, #31
 8006ce6:	d404      	bmi.n	8006cf2 <_fflush_r+0x3a>
 8006ce8:	0599      	lsls	r1, r3, #22
 8006cea:	d402      	bmi.n	8006cf2 <_fflush_r+0x3a>
 8006cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cee:	f000 f91a 	bl	8006f26 <__retarget_lock_acquire_recursive>
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	f7ff ff5d 	bl	8006bb4 <__sflush_r>
 8006cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	07da      	lsls	r2, r3, #31
 8006d00:	d4e0      	bmi.n	8006cc4 <_fflush_r+0xc>
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	059b      	lsls	r3, r3, #22
 8006d06:	d4dd      	bmi.n	8006cc4 <_fflush_r+0xc>
 8006d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d0a:	f000 f90d 	bl	8006f28 <__retarget_lock_release_recursive>
 8006d0e:	e7d9      	b.n	8006cc4 <_fflush_r+0xc>
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <_fflush_r+0x70>)
 8006d12:	429c      	cmp	r4, r3
 8006d14:	d101      	bne.n	8006d1a <_fflush_r+0x62>
 8006d16:	68ac      	ldr	r4, [r5, #8]
 8006d18:	e7df      	b.n	8006cda <_fflush_r+0x22>
 8006d1a:	4b04      	ldr	r3, [pc, #16]	; (8006d2c <_fflush_r+0x74>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	bf08      	it	eq
 8006d20:	68ec      	ldreq	r4, [r5, #12]
 8006d22:	e7da      	b.n	8006cda <_fflush_r+0x22>
 8006d24:	080084fc 	.word	0x080084fc
 8006d28:	0800851c 	.word	0x0800851c
 8006d2c:	080084dc 	.word	0x080084dc

08006d30 <std>:
 8006d30:	2300      	movs	r3, #0
 8006d32:	b510      	push	{r4, lr}
 8006d34:	4604      	mov	r4, r0
 8006d36:	e9c0 3300 	strd	r3, r3, [r0]
 8006d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d3e:	6083      	str	r3, [r0, #8]
 8006d40:	8181      	strh	r1, [r0, #12]
 8006d42:	6643      	str	r3, [r0, #100]	; 0x64
 8006d44:	81c2      	strh	r2, [r0, #14]
 8006d46:	6183      	str	r3, [r0, #24]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	2208      	movs	r2, #8
 8006d4c:	305c      	adds	r0, #92	; 0x5c
 8006d4e:	f7fe fae1 	bl	8005314 <memset>
 8006d52:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <std+0x38>)
 8006d54:	6224      	str	r4, [r4, #32]
 8006d56:	6263      	str	r3, [r4, #36]	; 0x24
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <std+0x3c>)
 8006d5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d5c:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <std+0x40>)
 8006d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <std+0x44>)
 8006d62:	6323      	str	r3, [r4, #48]	; 0x30
 8006d64:	bd10      	pop	{r4, pc}
 8006d66:	bf00      	nop
 8006d68:	08007ea9 	.word	0x08007ea9
 8006d6c:	08007ecb 	.word	0x08007ecb
 8006d70:	08007f03 	.word	0x08007f03
 8006d74:	08007f27 	.word	0x08007f27

08006d78 <_cleanup_r>:
 8006d78:	4901      	ldr	r1, [pc, #4]	; (8006d80 <_cleanup_r+0x8>)
 8006d7a:	f000 b8af 	b.w	8006edc <_fwalk_reent>
 8006d7e:	bf00      	nop
 8006d80:	08006cb9 	.word	0x08006cb9

08006d84 <__sfmoreglue>:
 8006d84:	2268      	movs	r2, #104	; 0x68
 8006d86:	b570      	push	{r4, r5, r6, lr}
 8006d88:	1e4d      	subs	r5, r1, #1
 8006d8a:	4355      	muls	r5, r2
 8006d8c:	460e      	mov	r6, r1
 8006d8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d92:	f000 fd51 	bl	8007838 <_malloc_r>
 8006d96:	4604      	mov	r4, r0
 8006d98:	b140      	cbz	r0, 8006dac <__sfmoreglue+0x28>
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	e9c0 1600 	strd	r1, r6, [r0]
 8006da0:	300c      	adds	r0, #12
 8006da2:	60a0      	str	r0, [r4, #8]
 8006da4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006da8:	f7fe fab4 	bl	8005314 <memset>
 8006dac:	4620      	mov	r0, r4
 8006dae:	bd70      	pop	{r4, r5, r6, pc}

08006db0 <__sfp_lock_acquire>:
 8006db0:	4801      	ldr	r0, [pc, #4]	; (8006db8 <__sfp_lock_acquire+0x8>)
 8006db2:	f000 b8b8 	b.w	8006f26 <__retarget_lock_acquire_recursive>
 8006db6:	bf00      	nop
 8006db8:	200003a5 	.word	0x200003a5

08006dbc <__sfp_lock_release>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	; (8006dc4 <__sfp_lock_release+0x8>)
 8006dbe:	f000 b8b3 	b.w	8006f28 <__retarget_lock_release_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	200003a5 	.word	0x200003a5

08006dc8 <__sinit_lock_acquire>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	; (8006dd0 <__sinit_lock_acquire+0x8>)
 8006dca:	f000 b8ac 	b.w	8006f26 <__retarget_lock_acquire_recursive>
 8006dce:	bf00      	nop
 8006dd0:	200003a6 	.word	0x200003a6

08006dd4 <__sinit_lock_release>:
 8006dd4:	4801      	ldr	r0, [pc, #4]	; (8006ddc <__sinit_lock_release+0x8>)
 8006dd6:	f000 b8a7 	b.w	8006f28 <__retarget_lock_release_recursive>
 8006dda:	bf00      	nop
 8006ddc:	200003a6 	.word	0x200003a6

08006de0 <__sinit>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	4604      	mov	r4, r0
 8006de4:	f7ff fff0 	bl	8006dc8 <__sinit_lock_acquire>
 8006de8:	69a3      	ldr	r3, [r4, #24]
 8006dea:	b11b      	cbz	r3, 8006df4 <__sinit+0x14>
 8006dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df0:	f7ff bff0 	b.w	8006dd4 <__sinit_lock_release>
 8006df4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006df8:	6523      	str	r3, [r4, #80]	; 0x50
 8006dfa:	4b13      	ldr	r3, [pc, #76]	; (8006e48 <__sinit+0x68>)
 8006dfc:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <__sinit+0x6c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e02:	42a3      	cmp	r3, r4
 8006e04:	bf08      	it	eq
 8006e06:	2301      	moveq	r3, #1
 8006e08:	4620      	mov	r0, r4
 8006e0a:	bf08      	it	eq
 8006e0c:	61a3      	streq	r3, [r4, #24]
 8006e0e:	f000 f81f 	bl	8006e50 <__sfp>
 8006e12:	6060      	str	r0, [r4, #4]
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 f81b 	bl	8006e50 <__sfp>
 8006e1a:	60a0      	str	r0, [r4, #8]
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 f817 	bl	8006e50 <__sfp>
 8006e22:	2200      	movs	r2, #0
 8006e24:	2104      	movs	r1, #4
 8006e26:	60e0      	str	r0, [r4, #12]
 8006e28:	6860      	ldr	r0, [r4, #4]
 8006e2a:	f7ff ff81 	bl	8006d30 <std>
 8006e2e:	2201      	movs	r2, #1
 8006e30:	2109      	movs	r1, #9
 8006e32:	68a0      	ldr	r0, [r4, #8]
 8006e34:	f7ff ff7c 	bl	8006d30 <std>
 8006e38:	2202      	movs	r2, #2
 8006e3a:	2112      	movs	r1, #18
 8006e3c:	68e0      	ldr	r0, [r4, #12]
 8006e3e:	f7ff ff77 	bl	8006d30 <std>
 8006e42:	2301      	movs	r3, #1
 8006e44:	61a3      	str	r3, [r4, #24]
 8006e46:	e7d1      	b.n	8006dec <__sinit+0xc>
 8006e48:	08008414 	.word	0x08008414
 8006e4c:	08006d79 	.word	0x08006d79

08006e50 <__sfp>:
 8006e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e52:	4607      	mov	r7, r0
 8006e54:	f7ff ffac 	bl	8006db0 <__sfp_lock_acquire>
 8006e58:	4b1e      	ldr	r3, [pc, #120]	; (8006ed4 <__sfp+0x84>)
 8006e5a:	681e      	ldr	r6, [r3, #0]
 8006e5c:	69b3      	ldr	r3, [r6, #24]
 8006e5e:	b913      	cbnz	r3, 8006e66 <__sfp+0x16>
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7ff ffbd 	bl	8006de0 <__sinit>
 8006e66:	3648      	adds	r6, #72	; 0x48
 8006e68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	d503      	bpl.n	8006e78 <__sfp+0x28>
 8006e70:	6833      	ldr	r3, [r6, #0]
 8006e72:	b30b      	cbz	r3, 8006eb8 <__sfp+0x68>
 8006e74:	6836      	ldr	r6, [r6, #0]
 8006e76:	e7f7      	b.n	8006e68 <__sfp+0x18>
 8006e78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e7c:	b9d5      	cbnz	r5, 8006eb4 <__sfp+0x64>
 8006e7e:	4b16      	ldr	r3, [pc, #88]	; (8006ed8 <__sfp+0x88>)
 8006e80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e84:	60e3      	str	r3, [r4, #12]
 8006e86:	6665      	str	r5, [r4, #100]	; 0x64
 8006e88:	f000 f84c 	bl	8006f24 <__retarget_lock_init_recursive>
 8006e8c:	f7ff ff96 	bl	8006dbc <__sfp_lock_release>
 8006e90:	2208      	movs	r2, #8
 8006e92:	4629      	mov	r1, r5
 8006e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e9c:	6025      	str	r5, [r4, #0]
 8006e9e:	61a5      	str	r5, [r4, #24]
 8006ea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ea4:	f7fe fa36 	bl	8005314 <memset>
 8006ea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006eac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb4:	3468      	adds	r4, #104	; 0x68
 8006eb6:	e7d9      	b.n	8006e6c <__sfp+0x1c>
 8006eb8:	2104      	movs	r1, #4
 8006eba:	4638      	mov	r0, r7
 8006ebc:	f7ff ff62 	bl	8006d84 <__sfmoreglue>
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	6030      	str	r0, [r6, #0]
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d1d5      	bne.n	8006e74 <__sfp+0x24>
 8006ec8:	f7ff ff78 	bl	8006dbc <__sfp_lock_release>
 8006ecc:	230c      	movs	r3, #12
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	e7ee      	b.n	8006eb0 <__sfp+0x60>
 8006ed2:	bf00      	nop
 8006ed4:	08008414 	.word	0x08008414
 8006ed8:	ffff0001 	.word	0xffff0001

08006edc <_fwalk_reent>:
 8006edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee0:	4606      	mov	r6, r0
 8006ee2:	4688      	mov	r8, r1
 8006ee4:	2700      	movs	r7, #0
 8006ee6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006eea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eee:	f1b9 0901 	subs.w	r9, r9, #1
 8006ef2:	d505      	bpl.n	8006f00 <_fwalk_reent+0x24>
 8006ef4:	6824      	ldr	r4, [r4, #0]
 8006ef6:	2c00      	cmp	r4, #0
 8006ef8:	d1f7      	bne.n	8006eea <_fwalk_reent+0xe>
 8006efa:	4638      	mov	r0, r7
 8006efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f00:	89ab      	ldrh	r3, [r5, #12]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d907      	bls.n	8006f16 <_fwalk_reent+0x3a>
 8006f06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	d003      	beq.n	8006f16 <_fwalk_reent+0x3a>
 8006f0e:	4629      	mov	r1, r5
 8006f10:	4630      	mov	r0, r6
 8006f12:	47c0      	blx	r8
 8006f14:	4307      	orrs	r7, r0
 8006f16:	3568      	adds	r5, #104	; 0x68
 8006f18:	e7e9      	b.n	8006eee <_fwalk_reent+0x12>
	...

08006f1c <_localeconv_r>:
 8006f1c:	4800      	ldr	r0, [pc, #0]	; (8006f20 <_localeconv_r+0x4>)
 8006f1e:	4770      	bx	lr
 8006f20:	2000016c 	.word	0x2000016c

08006f24 <__retarget_lock_init_recursive>:
 8006f24:	4770      	bx	lr

08006f26 <__retarget_lock_acquire_recursive>:
 8006f26:	4770      	bx	lr

08006f28 <__retarget_lock_release_recursive>:
 8006f28:	4770      	bx	lr

08006f2a <__swhatbuf_r>:
 8006f2a:	b570      	push	{r4, r5, r6, lr}
 8006f2c:	460e      	mov	r6, r1
 8006f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f32:	4614      	mov	r4, r2
 8006f34:	2900      	cmp	r1, #0
 8006f36:	461d      	mov	r5, r3
 8006f38:	b096      	sub	sp, #88	; 0x58
 8006f3a:	da08      	bge.n	8006f4e <__swhatbuf_r+0x24>
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f42:	602a      	str	r2, [r5, #0]
 8006f44:	061a      	lsls	r2, r3, #24
 8006f46:	d410      	bmi.n	8006f6a <__swhatbuf_r+0x40>
 8006f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f4c:	e00e      	b.n	8006f6c <__swhatbuf_r+0x42>
 8006f4e:	466a      	mov	r2, sp
 8006f50:	f001 f840 	bl	8007fd4 <_fstat_r>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	dbf1      	blt.n	8006f3c <__swhatbuf_r+0x12>
 8006f58:	9a01      	ldr	r2, [sp, #4]
 8006f5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f62:	425a      	negs	r2, r3
 8006f64:	415a      	adcs	r2, r3
 8006f66:	602a      	str	r2, [r5, #0]
 8006f68:	e7ee      	b.n	8006f48 <__swhatbuf_r+0x1e>
 8006f6a:	2340      	movs	r3, #64	; 0x40
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	b016      	add	sp, #88	; 0x58
 8006f72:	bd70      	pop	{r4, r5, r6, pc}

08006f74 <__smakebuf_r>:
 8006f74:	898b      	ldrh	r3, [r1, #12]
 8006f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f78:	079d      	lsls	r5, r3, #30
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	d507      	bpl.n	8006f90 <__smakebuf_r+0x1c>
 8006f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	6123      	str	r3, [r4, #16]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	6163      	str	r3, [r4, #20]
 8006f8c:	b002      	add	sp, #8
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	466a      	mov	r2, sp
 8006f92:	ab01      	add	r3, sp, #4
 8006f94:	f7ff ffc9 	bl	8006f2a <__swhatbuf_r>
 8006f98:	9900      	ldr	r1, [sp, #0]
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 fc4b 	bl	8007838 <_malloc_r>
 8006fa2:	b948      	cbnz	r0, 8006fb8 <__smakebuf_r+0x44>
 8006fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa8:	059a      	lsls	r2, r3, #22
 8006faa:	d4ef      	bmi.n	8006f8c <__smakebuf_r+0x18>
 8006fac:	f023 0303 	bic.w	r3, r3, #3
 8006fb0:	f043 0302 	orr.w	r3, r3, #2
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	e7e3      	b.n	8006f80 <__smakebuf_r+0xc>
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <__smakebuf_r+0x7c>)
 8006fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	6020      	str	r0, [r4, #0]
 8006fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	9b00      	ldr	r3, [sp, #0]
 8006fc8:	6120      	str	r0, [r4, #16]
 8006fca:	6163      	str	r3, [r4, #20]
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	b15b      	cbz	r3, 8006fe8 <__smakebuf_r+0x74>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd6:	f001 f80f 	bl	8007ff8 <_isatty_r>
 8006fda:	b128      	cbz	r0, 8006fe8 <__smakebuf_r+0x74>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	f023 0303 	bic.w	r3, r3, #3
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	89a0      	ldrh	r0, [r4, #12]
 8006fea:	4305      	orrs	r5, r0
 8006fec:	81a5      	strh	r5, [r4, #12]
 8006fee:	e7cd      	b.n	8006f8c <__smakebuf_r+0x18>
 8006ff0:	08006d79 	.word	0x08006d79

08006ff4 <malloc>:
 8006ff4:	4b02      	ldr	r3, [pc, #8]	; (8007000 <malloc+0xc>)
 8006ff6:	4601      	mov	r1, r0
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	f000 bc1d 	b.w	8007838 <_malloc_r>
 8006ffe:	bf00      	nop
 8007000:	20000018 	.word	0x20000018

08007004 <memchr>:
 8007004:	4603      	mov	r3, r0
 8007006:	b510      	push	{r4, lr}
 8007008:	b2c9      	uxtb	r1, r1
 800700a:	4402      	add	r2, r0
 800700c:	4293      	cmp	r3, r2
 800700e:	4618      	mov	r0, r3
 8007010:	d101      	bne.n	8007016 <memchr+0x12>
 8007012:	2000      	movs	r0, #0
 8007014:	e003      	b.n	800701e <memchr+0x1a>
 8007016:	7804      	ldrb	r4, [r0, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	428c      	cmp	r4, r1
 800701c:	d1f6      	bne.n	800700c <memchr+0x8>
 800701e:	bd10      	pop	{r4, pc}

08007020 <memcpy>:
 8007020:	440a      	add	r2, r1
 8007022:	4291      	cmp	r1, r2
 8007024:	f100 33ff 	add.w	r3, r0, #4294967295
 8007028:	d100      	bne.n	800702c <memcpy+0xc>
 800702a:	4770      	bx	lr
 800702c:	b510      	push	{r4, lr}
 800702e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007032:	4291      	cmp	r1, r2
 8007034:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007038:	d1f9      	bne.n	800702e <memcpy+0xe>
 800703a:	bd10      	pop	{r4, pc}

0800703c <_Balloc>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007040:	4604      	mov	r4, r0
 8007042:	460d      	mov	r5, r1
 8007044:	b976      	cbnz	r6, 8007064 <_Balloc+0x28>
 8007046:	2010      	movs	r0, #16
 8007048:	f7ff ffd4 	bl	8006ff4 <malloc>
 800704c:	4602      	mov	r2, r0
 800704e:	6260      	str	r0, [r4, #36]	; 0x24
 8007050:	b920      	cbnz	r0, 800705c <_Balloc+0x20>
 8007052:	2166      	movs	r1, #102	; 0x66
 8007054:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <_Balloc+0x78>)
 8007056:	4818      	ldr	r0, [pc, #96]	; (80070b8 <_Balloc+0x7c>)
 8007058:	f000 ff7c 	bl	8007f54 <__assert_func>
 800705c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007060:	6006      	str	r6, [r0, #0]
 8007062:	60c6      	str	r6, [r0, #12]
 8007064:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007066:	68f3      	ldr	r3, [r6, #12]
 8007068:	b183      	cbz	r3, 800708c <_Balloc+0x50>
 800706a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007072:	b9b8      	cbnz	r0, 80070a4 <_Balloc+0x68>
 8007074:	2101      	movs	r1, #1
 8007076:	fa01 f605 	lsl.w	r6, r1, r5
 800707a:	1d72      	adds	r2, r6, #5
 800707c:	4620      	mov	r0, r4
 800707e:	0092      	lsls	r2, r2, #2
 8007080:	f000 fb5e 	bl	8007740 <_calloc_r>
 8007084:	b160      	cbz	r0, 80070a0 <_Balloc+0x64>
 8007086:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800708a:	e00e      	b.n	80070aa <_Balloc+0x6e>
 800708c:	2221      	movs	r2, #33	; 0x21
 800708e:	2104      	movs	r1, #4
 8007090:	4620      	mov	r0, r4
 8007092:	f000 fb55 	bl	8007740 <_calloc_r>
 8007096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007098:	60f0      	str	r0, [r6, #12]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e4      	bne.n	800706a <_Balloc+0x2e>
 80070a0:	2000      	movs	r0, #0
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
 80070a4:	6802      	ldr	r2, [r0, #0]
 80070a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070aa:	2300      	movs	r3, #0
 80070ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070b0:	e7f7      	b.n	80070a2 <_Balloc+0x66>
 80070b2:	bf00      	nop
 80070b4:	08008459 	.word	0x08008459
 80070b8:	0800853c 	.word	0x0800853c

080070bc <_Bfree>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070c0:	4605      	mov	r5, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	b976      	cbnz	r6, 80070e4 <_Bfree+0x28>
 80070c6:	2010      	movs	r0, #16
 80070c8:	f7ff ff94 	bl	8006ff4 <malloc>
 80070cc:	4602      	mov	r2, r0
 80070ce:	6268      	str	r0, [r5, #36]	; 0x24
 80070d0:	b920      	cbnz	r0, 80070dc <_Bfree+0x20>
 80070d2:	218a      	movs	r1, #138	; 0x8a
 80070d4:	4b08      	ldr	r3, [pc, #32]	; (80070f8 <_Bfree+0x3c>)
 80070d6:	4809      	ldr	r0, [pc, #36]	; (80070fc <_Bfree+0x40>)
 80070d8:	f000 ff3c 	bl	8007f54 <__assert_func>
 80070dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070e0:	6006      	str	r6, [r0, #0]
 80070e2:	60c6      	str	r6, [r0, #12]
 80070e4:	b13c      	cbz	r4, 80070f6 <_Bfree+0x3a>
 80070e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070e8:	6862      	ldr	r2, [r4, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070f0:	6021      	str	r1, [r4, #0]
 80070f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	08008459 	.word	0x08008459
 80070fc:	0800853c 	.word	0x0800853c

08007100 <__multadd>:
 8007100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007104:	4607      	mov	r7, r0
 8007106:	460c      	mov	r4, r1
 8007108:	461e      	mov	r6, r3
 800710a:	2000      	movs	r0, #0
 800710c:	690d      	ldr	r5, [r1, #16]
 800710e:	f101 0c14 	add.w	ip, r1, #20
 8007112:	f8dc 3000 	ldr.w	r3, [ip]
 8007116:	3001      	adds	r0, #1
 8007118:	b299      	uxth	r1, r3
 800711a:	fb02 6101 	mla	r1, r2, r1, r6
 800711e:	0c1e      	lsrs	r6, r3, #16
 8007120:	0c0b      	lsrs	r3, r1, #16
 8007122:	fb02 3306 	mla	r3, r2, r6, r3
 8007126:	b289      	uxth	r1, r1
 8007128:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800712c:	4285      	cmp	r5, r0
 800712e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007132:	f84c 1b04 	str.w	r1, [ip], #4
 8007136:	dcec      	bgt.n	8007112 <__multadd+0x12>
 8007138:	b30e      	cbz	r6, 800717e <__multadd+0x7e>
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	42ab      	cmp	r3, r5
 800713e:	dc19      	bgt.n	8007174 <__multadd+0x74>
 8007140:	6861      	ldr	r1, [r4, #4]
 8007142:	4638      	mov	r0, r7
 8007144:	3101      	adds	r1, #1
 8007146:	f7ff ff79 	bl	800703c <_Balloc>
 800714a:	4680      	mov	r8, r0
 800714c:	b928      	cbnz	r0, 800715a <__multadd+0x5a>
 800714e:	4602      	mov	r2, r0
 8007150:	21b5      	movs	r1, #181	; 0xb5
 8007152:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <__multadd+0x84>)
 8007154:	480c      	ldr	r0, [pc, #48]	; (8007188 <__multadd+0x88>)
 8007156:	f000 fefd 	bl	8007f54 <__assert_func>
 800715a:	6922      	ldr	r2, [r4, #16]
 800715c:	f104 010c 	add.w	r1, r4, #12
 8007160:	3202      	adds	r2, #2
 8007162:	0092      	lsls	r2, r2, #2
 8007164:	300c      	adds	r0, #12
 8007166:	f7ff ff5b 	bl	8007020 <memcpy>
 800716a:	4621      	mov	r1, r4
 800716c:	4638      	mov	r0, r7
 800716e:	f7ff ffa5 	bl	80070bc <_Bfree>
 8007172:	4644      	mov	r4, r8
 8007174:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007178:	3501      	adds	r5, #1
 800717a:	615e      	str	r6, [r3, #20]
 800717c:	6125      	str	r5, [r4, #16]
 800717e:	4620      	mov	r0, r4
 8007180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007184:	080084cb 	.word	0x080084cb
 8007188:	0800853c 	.word	0x0800853c

0800718c <__hi0bits>:
 800718c:	0c02      	lsrs	r2, r0, #16
 800718e:	0412      	lsls	r2, r2, #16
 8007190:	4603      	mov	r3, r0
 8007192:	b9ca      	cbnz	r2, 80071c8 <__hi0bits+0x3c>
 8007194:	0403      	lsls	r3, r0, #16
 8007196:	2010      	movs	r0, #16
 8007198:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800719c:	bf04      	itt	eq
 800719e:	021b      	lsleq	r3, r3, #8
 80071a0:	3008      	addeq	r0, #8
 80071a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80071a6:	bf04      	itt	eq
 80071a8:	011b      	lsleq	r3, r3, #4
 80071aa:	3004      	addeq	r0, #4
 80071ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80071b0:	bf04      	itt	eq
 80071b2:	009b      	lsleq	r3, r3, #2
 80071b4:	3002      	addeq	r0, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	db05      	blt.n	80071c6 <__hi0bits+0x3a>
 80071ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80071be:	f100 0001 	add.w	r0, r0, #1
 80071c2:	bf08      	it	eq
 80071c4:	2020      	moveq	r0, #32
 80071c6:	4770      	bx	lr
 80071c8:	2000      	movs	r0, #0
 80071ca:	e7e5      	b.n	8007198 <__hi0bits+0xc>

080071cc <__lo0bits>:
 80071cc:	6803      	ldr	r3, [r0, #0]
 80071ce:	4602      	mov	r2, r0
 80071d0:	f013 0007 	ands.w	r0, r3, #7
 80071d4:	d00b      	beq.n	80071ee <__lo0bits+0x22>
 80071d6:	07d9      	lsls	r1, r3, #31
 80071d8:	d421      	bmi.n	800721e <__lo0bits+0x52>
 80071da:	0798      	lsls	r0, r3, #30
 80071dc:	bf49      	itett	mi
 80071de:	085b      	lsrmi	r3, r3, #1
 80071e0:	089b      	lsrpl	r3, r3, #2
 80071e2:	2001      	movmi	r0, #1
 80071e4:	6013      	strmi	r3, [r2, #0]
 80071e6:	bf5c      	itt	pl
 80071e8:	2002      	movpl	r0, #2
 80071ea:	6013      	strpl	r3, [r2, #0]
 80071ec:	4770      	bx	lr
 80071ee:	b299      	uxth	r1, r3
 80071f0:	b909      	cbnz	r1, 80071f6 <__lo0bits+0x2a>
 80071f2:	2010      	movs	r0, #16
 80071f4:	0c1b      	lsrs	r3, r3, #16
 80071f6:	b2d9      	uxtb	r1, r3
 80071f8:	b909      	cbnz	r1, 80071fe <__lo0bits+0x32>
 80071fa:	3008      	adds	r0, #8
 80071fc:	0a1b      	lsrs	r3, r3, #8
 80071fe:	0719      	lsls	r1, r3, #28
 8007200:	bf04      	itt	eq
 8007202:	091b      	lsreq	r3, r3, #4
 8007204:	3004      	addeq	r0, #4
 8007206:	0799      	lsls	r1, r3, #30
 8007208:	bf04      	itt	eq
 800720a:	089b      	lsreq	r3, r3, #2
 800720c:	3002      	addeq	r0, #2
 800720e:	07d9      	lsls	r1, r3, #31
 8007210:	d403      	bmi.n	800721a <__lo0bits+0x4e>
 8007212:	085b      	lsrs	r3, r3, #1
 8007214:	f100 0001 	add.w	r0, r0, #1
 8007218:	d003      	beq.n	8007222 <__lo0bits+0x56>
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	4770      	bx	lr
 800721e:	2000      	movs	r0, #0
 8007220:	4770      	bx	lr
 8007222:	2020      	movs	r0, #32
 8007224:	4770      	bx	lr
	...

08007228 <__i2b>:
 8007228:	b510      	push	{r4, lr}
 800722a:	460c      	mov	r4, r1
 800722c:	2101      	movs	r1, #1
 800722e:	f7ff ff05 	bl	800703c <_Balloc>
 8007232:	4602      	mov	r2, r0
 8007234:	b928      	cbnz	r0, 8007242 <__i2b+0x1a>
 8007236:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800723a:	4b04      	ldr	r3, [pc, #16]	; (800724c <__i2b+0x24>)
 800723c:	4804      	ldr	r0, [pc, #16]	; (8007250 <__i2b+0x28>)
 800723e:	f000 fe89 	bl	8007f54 <__assert_func>
 8007242:	2301      	movs	r3, #1
 8007244:	6144      	str	r4, [r0, #20]
 8007246:	6103      	str	r3, [r0, #16]
 8007248:	bd10      	pop	{r4, pc}
 800724a:	bf00      	nop
 800724c:	080084cb 	.word	0x080084cb
 8007250:	0800853c 	.word	0x0800853c

08007254 <__multiply>:
 8007254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	4691      	mov	r9, r2
 800725a:	690a      	ldr	r2, [r1, #16]
 800725c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007260:	460c      	mov	r4, r1
 8007262:	429a      	cmp	r2, r3
 8007264:	bfbe      	ittt	lt
 8007266:	460b      	movlt	r3, r1
 8007268:	464c      	movlt	r4, r9
 800726a:	4699      	movlt	r9, r3
 800726c:	6927      	ldr	r7, [r4, #16]
 800726e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	6861      	ldr	r1, [r4, #4]
 8007276:	eb07 060a 	add.w	r6, r7, sl
 800727a:	42b3      	cmp	r3, r6
 800727c:	b085      	sub	sp, #20
 800727e:	bfb8      	it	lt
 8007280:	3101      	addlt	r1, #1
 8007282:	f7ff fedb 	bl	800703c <_Balloc>
 8007286:	b930      	cbnz	r0, 8007296 <__multiply+0x42>
 8007288:	4602      	mov	r2, r0
 800728a:	f240 115d 	movw	r1, #349	; 0x15d
 800728e:	4b43      	ldr	r3, [pc, #268]	; (800739c <__multiply+0x148>)
 8007290:	4843      	ldr	r0, [pc, #268]	; (80073a0 <__multiply+0x14c>)
 8007292:	f000 fe5f 	bl	8007f54 <__assert_func>
 8007296:	f100 0514 	add.w	r5, r0, #20
 800729a:	462b      	mov	r3, r5
 800729c:	2200      	movs	r2, #0
 800729e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072a2:	4543      	cmp	r3, r8
 80072a4:	d321      	bcc.n	80072ea <__multiply+0x96>
 80072a6:	f104 0314 	add.w	r3, r4, #20
 80072aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072ae:	f109 0314 	add.w	r3, r9, #20
 80072b2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072b6:	9202      	str	r2, [sp, #8]
 80072b8:	1b3a      	subs	r2, r7, r4
 80072ba:	3a15      	subs	r2, #21
 80072bc:	f022 0203 	bic.w	r2, r2, #3
 80072c0:	3204      	adds	r2, #4
 80072c2:	f104 0115 	add.w	r1, r4, #21
 80072c6:	428f      	cmp	r7, r1
 80072c8:	bf38      	it	cc
 80072ca:	2204      	movcc	r2, #4
 80072cc:	9201      	str	r2, [sp, #4]
 80072ce:	9a02      	ldr	r2, [sp, #8]
 80072d0:	9303      	str	r3, [sp, #12]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d80c      	bhi.n	80072f0 <__multiply+0x9c>
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	dd03      	ble.n	80072e2 <__multiply+0x8e>
 80072da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d059      	beq.n	8007396 <__multiply+0x142>
 80072e2:	6106      	str	r6, [r0, #16]
 80072e4:	b005      	add	sp, #20
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ea:	f843 2b04 	str.w	r2, [r3], #4
 80072ee:	e7d8      	b.n	80072a2 <__multiply+0x4e>
 80072f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80072f4:	f1ba 0f00 	cmp.w	sl, #0
 80072f8:	d023      	beq.n	8007342 <__multiply+0xee>
 80072fa:	46a9      	mov	r9, r5
 80072fc:	f04f 0c00 	mov.w	ip, #0
 8007300:	f104 0e14 	add.w	lr, r4, #20
 8007304:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007308:	f8d9 1000 	ldr.w	r1, [r9]
 800730c:	fa1f fb82 	uxth.w	fp, r2
 8007310:	b289      	uxth	r1, r1
 8007312:	fb0a 110b 	mla	r1, sl, fp, r1
 8007316:	4461      	add	r1, ip
 8007318:	f8d9 c000 	ldr.w	ip, [r9]
 800731c:	0c12      	lsrs	r2, r2, #16
 800731e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007322:	fb0a c202 	mla	r2, sl, r2, ip
 8007326:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800732a:	b289      	uxth	r1, r1
 800732c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007330:	4577      	cmp	r7, lr
 8007332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007336:	f849 1b04 	str.w	r1, [r9], #4
 800733a:	d8e3      	bhi.n	8007304 <__multiply+0xb0>
 800733c:	9a01      	ldr	r2, [sp, #4]
 800733e:	f845 c002 	str.w	ip, [r5, r2]
 8007342:	9a03      	ldr	r2, [sp, #12]
 8007344:	3304      	adds	r3, #4
 8007346:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800734a:	f1b9 0f00 	cmp.w	r9, #0
 800734e:	d020      	beq.n	8007392 <__multiply+0x13e>
 8007350:	46ae      	mov	lr, r5
 8007352:	f04f 0a00 	mov.w	sl, #0
 8007356:	6829      	ldr	r1, [r5, #0]
 8007358:	f104 0c14 	add.w	ip, r4, #20
 800735c:	f8bc b000 	ldrh.w	fp, [ip]
 8007360:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007364:	b289      	uxth	r1, r1
 8007366:	fb09 220b 	mla	r2, r9, fp, r2
 800736a:	4492      	add	sl, r2
 800736c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007370:	f84e 1b04 	str.w	r1, [lr], #4
 8007374:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007378:	f8be 1000 	ldrh.w	r1, [lr]
 800737c:	0c12      	lsrs	r2, r2, #16
 800737e:	fb09 1102 	mla	r1, r9, r2, r1
 8007382:	4567      	cmp	r7, ip
 8007384:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007388:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800738c:	d8e6      	bhi.n	800735c <__multiply+0x108>
 800738e:	9a01      	ldr	r2, [sp, #4]
 8007390:	50a9      	str	r1, [r5, r2]
 8007392:	3504      	adds	r5, #4
 8007394:	e79b      	b.n	80072ce <__multiply+0x7a>
 8007396:	3e01      	subs	r6, #1
 8007398:	e79d      	b.n	80072d6 <__multiply+0x82>
 800739a:	bf00      	nop
 800739c:	080084cb 	.word	0x080084cb
 80073a0:	0800853c 	.word	0x0800853c

080073a4 <__pow5mult>:
 80073a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a8:	4615      	mov	r5, r2
 80073aa:	f012 0203 	ands.w	r2, r2, #3
 80073ae:	4606      	mov	r6, r0
 80073b0:	460f      	mov	r7, r1
 80073b2:	d007      	beq.n	80073c4 <__pow5mult+0x20>
 80073b4:	4c25      	ldr	r4, [pc, #148]	; (800744c <__pow5mult+0xa8>)
 80073b6:	3a01      	subs	r2, #1
 80073b8:	2300      	movs	r3, #0
 80073ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073be:	f7ff fe9f 	bl	8007100 <__multadd>
 80073c2:	4607      	mov	r7, r0
 80073c4:	10ad      	asrs	r5, r5, #2
 80073c6:	d03d      	beq.n	8007444 <__pow5mult+0xa0>
 80073c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073ca:	b97c      	cbnz	r4, 80073ec <__pow5mult+0x48>
 80073cc:	2010      	movs	r0, #16
 80073ce:	f7ff fe11 	bl	8006ff4 <malloc>
 80073d2:	4602      	mov	r2, r0
 80073d4:	6270      	str	r0, [r6, #36]	; 0x24
 80073d6:	b928      	cbnz	r0, 80073e4 <__pow5mult+0x40>
 80073d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073dc:	4b1c      	ldr	r3, [pc, #112]	; (8007450 <__pow5mult+0xac>)
 80073de:	481d      	ldr	r0, [pc, #116]	; (8007454 <__pow5mult+0xb0>)
 80073e0:	f000 fdb8 	bl	8007f54 <__assert_func>
 80073e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073e8:	6004      	str	r4, [r0, #0]
 80073ea:	60c4      	str	r4, [r0, #12]
 80073ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073f4:	b94c      	cbnz	r4, 800740a <__pow5mult+0x66>
 80073f6:	f240 2171 	movw	r1, #625	; 0x271
 80073fa:	4630      	mov	r0, r6
 80073fc:	f7ff ff14 	bl	8007228 <__i2b>
 8007400:	2300      	movs	r3, #0
 8007402:	4604      	mov	r4, r0
 8007404:	f8c8 0008 	str.w	r0, [r8, #8]
 8007408:	6003      	str	r3, [r0, #0]
 800740a:	f04f 0900 	mov.w	r9, #0
 800740e:	07eb      	lsls	r3, r5, #31
 8007410:	d50a      	bpl.n	8007428 <__pow5mult+0x84>
 8007412:	4639      	mov	r1, r7
 8007414:	4622      	mov	r2, r4
 8007416:	4630      	mov	r0, r6
 8007418:	f7ff ff1c 	bl	8007254 <__multiply>
 800741c:	4680      	mov	r8, r0
 800741e:	4639      	mov	r1, r7
 8007420:	4630      	mov	r0, r6
 8007422:	f7ff fe4b 	bl	80070bc <_Bfree>
 8007426:	4647      	mov	r7, r8
 8007428:	106d      	asrs	r5, r5, #1
 800742a:	d00b      	beq.n	8007444 <__pow5mult+0xa0>
 800742c:	6820      	ldr	r0, [r4, #0]
 800742e:	b938      	cbnz	r0, 8007440 <__pow5mult+0x9c>
 8007430:	4622      	mov	r2, r4
 8007432:	4621      	mov	r1, r4
 8007434:	4630      	mov	r0, r6
 8007436:	f7ff ff0d 	bl	8007254 <__multiply>
 800743a:	6020      	str	r0, [r4, #0]
 800743c:	f8c0 9000 	str.w	r9, [r0]
 8007440:	4604      	mov	r4, r0
 8007442:	e7e4      	b.n	800740e <__pow5mult+0x6a>
 8007444:	4638      	mov	r0, r7
 8007446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744a:	bf00      	nop
 800744c:	08008688 	.word	0x08008688
 8007450:	08008459 	.word	0x08008459
 8007454:	0800853c 	.word	0x0800853c

08007458 <__lshift>:
 8007458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800745c:	460c      	mov	r4, r1
 800745e:	4607      	mov	r7, r0
 8007460:	4691      	mov	r9, r2
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	6849      	ldr	r1, [r1, #4]
 8007466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800746a:	68a3      	ldr	r3, [r4, #8]
 800746c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007470:	f108 0601 	add.w	r6, r8, #1
 8007474:	42b3      	cmp	r3, r6
 8007476:	db0b      	blt.n	8007490 <__lshift+0x38>
 8007478:	4638      	mov	r0, r7
 800747a:	f7ff fddf 	bl	800703c <_Balloc>
 800747e:	4605      	mov	r5, r0
 8007480:	b948      	cbnz	r0, 8007496 <__lshift+0x3e>
 8007482:	4602      	mov	r2, r0
 8007484:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007488:	4b29      	ldr	r3, [pc, #164]	; (8007530 <__lshift+0xd8>)
 800748a:	482a      	ldr	r0, [pc, #168]	; (8007534 <__lshift+0xdc>)
 800748c:	f000 fd62 	bl	8007f54 <__assert_func>
 8007490:	3101      	adds	r1, #1
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	e7ee      	b.n	8007474 <__lshift+0x1c>
 8007496:	2300      	movs	r3, #0
 8007498:	f100 0114 	add.w	r1, r0, #20
 800749c:	f100 0210 	add.w	r2, r0, #16
 80074a0:	4618      	mov	r0, r3
 80074a2:	4553      	cmp	r3, sl
 80074a4:	db37      	blt.n	8007516 <__lshift+0xbe>
 80074a6:	6920      	ldr	r0, [r4, #16]
 80074a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074ac:	f104 0314 	add.w	r3, r4, #20
 80074b0:	f019 091f 	ands.w	r9, r9, #31
 80074b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074bc:	d02f      	beq.n	800751e <__lshift+0xc6>
 80074be:	468a      	mov	sl, r1
 80074c0:	f04f 0c00 	mov.w	ip, #0
 80074c4:	f1c9 0e20 	rsb	lr, r9, #32
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	fa02 f209 	lsl.w	r2, r2, r9
 80074ce:	ea42 020c 	orr.w	r2, r2, ip
 80074d2:	f84a 2b04 	str.w	r2, [sl], #4
 80074d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074da:	4298      	cmp	r0, r3
 80074dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80074e0:	d8f2      	bhi.n	80074c8 <__lshift+0x70>
 80074e2:	1b03      	subs	r3, r0, r4
 80074e4:	3b15      	subs	r3, #21
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	3304      	adds	r3, #4
 80074ec:	f104 0215 	add.w	r2, r4, #21
 80074f0:	4290      	cmp	r0, r2
 80074f2:	bf38      	it	cc
 80074f4:	2304      	movcc	r3, #4
 80074f6:	f841 c003 	str.w	ip, [r1, r3]
 80074fa:	f1bc 0f00 	cmp.w	ip, #0
 80074fe:	d001      	beq.n	8007504 <__lshift+0xac>
 8007500:	f108 0602 	add.w	r6, r8, #2
 8007504:	3e01      	subs	r6, #1
 8007506:	4638      	mov	r0, r7
 8007508:	4621      	mov	r1, r4
 800750a:	612e      	str	r6, [r5, #16]
 800750c:	f7ff fdd6 	bl	80070bc <_Bfree>
 8007510:	4628      	mov	r0, r5
 8007512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007516:	f842 0f04 	str.w	r0, [r2, #4]!
 800751a:	3301      	adds	r3, #1
 800751c:	e7c1      	b.n	80074a2 <__lshift+0x4a>
 800751e:	3904      	subs	r1, #4
 8007520:	f853 2b04 	ldr.w	r2, [r3], #4
 8007524:	4298      	cmp	r0, r3
 8007526:	f841 2f04 	str.w	r2, [r1, #4]!
 800752a:	d8f9      	bhi.n	8007520 <__lshift+0xc8>
 800752c:	e7ea      	b.n	8007504 <__lshift+0xac>
 800752e:	bf00      	nop
 8007530:	080084cb 	.word	0x080084cb
 8007534:	0800853c 	.word	0x0800853c

08007538 <__mcmp>:
 8007538:	4603      	mov	r3, r0
 800753a:	690a      	ldr	r2, [r1, #16]
 800753c:	6900      	ldr	r0, [r0, #16]
 800753e:	b530      	push	{r4, r5, lr}
 8007540:	1a80      	subs	r0, r0, r2
 8007542:	d10d      	bne.n	8007560 <__mcmp+0x28>
 8007544:	3314      	adds	r3, #20
 8007546:	3114      	adds	r1, #20
 8007548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800754c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007558:	4295      	cmp	r5, r2
 800755a:	d002      	beq.n	8007562 <__mcmp+0x2a>
 800755c:	d304      	bcc.n	8007568 <__mcmp+0x30>
 800755e:	2001      	movs	r0, #1
 8007560:	bd30      	pop	{r4, r5, pc}
 8007562:	42a3      	cmp	r3, r4
 8007564:	d3f4      	bcc.n	8007550 <__mcmp+0x18>
 8007566:	e7fb      	b.n	8007560 <__mcmp+0x28>
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	e7f8      	b.n	8007560 <__mcmp+0x28>
	...

08007570 <__mdiff>:
 8007570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007574:	460d      	mov	r5, r1
 8007576:	4607      	mov	r7, r0
 8007578:	4611      	mov	r1, r2
 800757a:	4628      	mov	r0, r5
 800757c:	4614      	mov	r4, r2
 800757e:	f7ff ffdb 	bl	8007538 <__mcmp>
 8007582:	1e06      	subs	r6, r0, #0
 8007584:	d111      	bne.n	80075aa <__mdiff+0x3a>
 8007586:	4631      	mov	r1, r6
 8007588:	4638      	mov	r0, r7
 800758a:	f7ff fd57 	bl	800703c <_Balloc>
 800758e:	4602      	mov	r2, r0
 8007590:	b928      	cbnz	r0, 800759e <__mdiff+0x2e>
 8007592:	f240 2132 	movw	r1, #562	; 0x232
 8007596:	4b3a      	ldr	r3, [pc, #232]	; (8007680 <__mdiff+0x110>)
 8007598:	483a      	ldr	r0, [pc, #232]	; (8007684 <__mdiff+0x114>)
 800759a:	f000 fcdb 	bl	8007f54 <__assert_func>
 800759e:	2301      	movs	r3, #1
 80075a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80075a4:	4610      	mov	r0, r2
 80075a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075aa:	bfa4      	itt	ge
 80075ac:	4623      	movge	r3, r4
 80075ae:	462c      	movge	r4, r5
 80075b0:	4638      	mov	r0, r7
 80075b2:	6861      	ldr	r1, [r4, #4]
 80075b4:	bfa6      	itte	ge
 80075b6:	461d      	movge	r5, r3
 80075b8:	2600      	movge	r6, #0
 80075ba:	2601      	movlt	r6, #1
 80075bc:	f7ff fd3e 	bl	800703c <_Balloc>
 80075c0:	4602      	mov	r2, r0
 80075c2:	b918      	cbnz	r0, 80075cc <__mdiff+0x5c>
 80075c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075c8:	4b2d      	ldr	r3, [pc, #180]	; (8007680 <__mdiff+0x110>)
 80075ca:	e7e5      	b.n	8007598 <__mdiff+0x28>
 80075cc:	f102 0814 	add.w	r8, r2, #20
 80075d0:	46c2      	mov	sl, r8
 80075d2:	f04f 0c00 	mov.w	ip, #0
 80075d6:	6927      	ldr	r7, [r4, #16]
 80075d8:	60c6      	str	r6, [r0, #12]
 80075da:	692e      	ldr	r6, [r5, #16]
 80075dc:	f104 0014 	add.w	r0, r4, #20
 80075e0:	f105 0914 	add.w	r9, r5, #20
 80075e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80075e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075ec:	3410      	adds	r4, #16
 80075ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80075f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80075f6:	fa1f f18b 	uxth.w	r1, fp
 80075fa:	448c      	add	ip, r1
 80075fc:	b299      	uxth	r1, r3
 80075fe:	0c1b      	lsrs	r3, r3, #16
 8007600:	ebac 0101 	sub.w	r1, ip, r1
 8007604:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007608:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800760c:	b289      	uxth	r1, r1
 800760e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007612:	454e      	cmp	r6, r9
 8007614:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007618:	f84a 3b04 	str.w	r3, [sl], #4
 800761c:	d8e7      	bhi.n	80075ee <__mdiff+0x7e>
 800761e:	1b73      	subs	r3, r6, r5
 8007620:	3b15      	subs	r3, #21
 8007622:	f023 0303 	bic.w	r3, r3, #3
 8007626:	3515      	adds	r5, #21
 8007628:	3304      	adds	r3, #4
 800762a:	42ae      	cmp	r6, r5
 800762c:	bf38      	it	cc
 800762e:	2304      	movcc	r3, #4
 8007630:	4418      	add	r0, r3
 8007632:	4443      	add	r3, r8
 8007634:	461e      	mov	r6, r3
 8007636:	4605      	mov	r5, r0
 8007638:	4575      	cmp	r5, lr
 800763a:	d30e      	bcc.n	800765a <__mdiff+0xea>
 800763c:	f10e 0103 	add.w	r1, lr, #3
 8007640:	1a09      	subs	r1, r1, r0
 8007642:	f021 0103 	bic.w	r1, r1, #3
 8007646:	3803      	subs	r0, #3
 8007648:	4586      	cmp	lr, r0
 800764a:	bf38      	it	cc
 800764c:	2100      	movcc	r1, #0
 800764e:	4419      	add	r1, r3
 8007650:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007654:	b18b      	cbz	r3, 800767a <__mdiff+0x10a>
 8007656:	6117      	str	r7, [r2, #16]
 8007658:	e7a4      	b.n	80075a4 <__mdiff+0x34>
 800765a:	f855 8b04 	ldr.w	r8, [r5], #4
 800765e:	fa1f f188 	uxth.w	r1, r8
 8007662:	4461      	add	r1, ip
 8007664:	140c      	asrs	r4, r1, #16
 8007666:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800766a:	b289      	uxth	r1, r1
 800766c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007670:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007674:	f846 1b04 	str.w	r1, [r6], #4
 8007678:	e7de      	b.n	8007638 <__mdiff+0xc8>
 800767a:	3f01      	subs	r7, #1
 800767c:	e7e8      	b.n	8007650 <__mdiff+0xe0>
 800767e:	bf00      	nop
 8007680:	080084cb 	.word	0x080084cb
 8007684:	0800853c 	.word	0x0800853c

08007688 <__d2b>:
 8007688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800768c:	2101      	movs	r1, #1
 800768e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007692:	4690      	mov	r8, r2
 8007694:	461d      	mov	r5, r3
 8007696:	f7ff fcd1 	bl	800703c <_Balloc>
 800769a:	4604      	mov	r4, r0
 800769c:	b930      	cbnz	r0, 80076ac <__d2b+0x24>
 800769e:	4602      	mov	r2, r0
 80076a0:	f240 310a 	movw	r1, #778	; 0x30a
 80076a4:	4b24      	ldr	r3, [pc, #144]	; (8007738 <__d2b+0xb0>)
 80076a6:	4825      	ldr	r0, [pc, #148]	; (800773c <__d2b+0xb4>)
 80076a8:	f000 fc54 	bl	8007f54 <__assert_func>
 80076ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80076b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80076b4:	bb2d      	cbnz	r5, 8007702 <__d2b+0x7a>
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	f1b8 0300 	subs.w	r3, r8, #0
 80076bc:	d026      	beq.n	800770c <__d2b+0x84>
 80076be:	4668      	mov	r0, sp
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	f7ff fd83 	bl	80071cc <__lo0bits>
 80076c6:	9900      	ldr	r1, [sp, #0]
 80076c8:	b1f0      	cbz	r0, 8007708 <__d2b+0x80>
 80076ca:	9a01      	ldr	r2, [sp, #4]
 80076cc:	f1c0 0320 	rsb	r3, r0, #32
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	430b      	orrs	r3, r1
 80076d6:	40c2      	lsrs	r2, r0
 80076d8:	6163      	str	r3, [r4, #20]
 80076da:	9201      	str	r2, [sp, #4]
 80076dc:	9b01      	ldr	r3, [sp, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bf14      	ite	ne
 80076e2:	2102      	movne	r1, #2
 80076e4:	2101      	moveq	r1, #1
 80076e6:	61a3      	str	r3, [r4, #24]
 80076e8:	6121      	str	r1, [r4, #16]
 80076ea:	b1c5      	cbz	r5, 800771e <__d2b+0x96>
 80076ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076f0:	4405      	add	r5, r0
 80076f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076f6:	603d      	str	r5, [r7, #0]
 80076f8:	6030      	str	r0, [r6, #0]
 80076fa:	4620      	mov	r0, r4
 80076fc:	b002      	add	sp, #8
 80076fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007706:	e7d6      	b.n	80076b6 <__d2b+0x2e>
 8007708:	6161      	str	r1, [r4, #20]
 800770a:	e7e7      	b.n	80076dc <__d2b+0x54>
 800770c:	a801      	add	r0, sp, #4
 800770e:	f7ff fd5d 	bl	80071cc <__lo0bits>
 8007712:	2101      	movs	r1, #1
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	6121      	str	r1, [r4, #16]
 8007718:	6163      	str	r3, [r4, #20]
 800771a:	3020      	adds	r0, #32
 800771c:	e7e5      	b.n	80076ea <__d2b+0x62>
 800771e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007722:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007726:	6038      	str	r0, [r7, #0]
 8007728:	6918      	ldr	r0, [r3, #16]
 800772a:	f7ff fd2f 	bl	800718c <__hi0bits>
 800772e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007732:	6031      	str	r1, [r6, #0]
 8007734:	e7e1      	b.n	80076fa <__d2b+0x72>
 8007736:	bf00      	nop
 8007738:	080084cb 	.word	0x080084cb
 800773c:	0800853c 	.word	0x0800853c

08007740 <_calloc_r>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	fba1 5402 	umull	r5, r4, r1, r2
 8007746:	b934      	cbnz	r4, 8007756 <_calloc_r+0x16>
 8007748:	4629      	mov	r1, r5
 800774a:	f000 f875 	bl	8007838 <_malloc_r>
 800774e:	4606      	mov	r6, r0
 8007750:	b928      	cbnz	r0, 800775e <_calloc_r+0x1e>
 8007752:	4630      	mov	r0, r6
 8007754:	bd70      	pop	{r4, r5, r6, pc}
 8007756:	220c      	movs	r2, #12
 8007758:	2600      	movs	r6, #0
 800775a:	6002      	str	r2, [r0, #0]
 800775c:	e7f9      	b.n	8007752 <_calloc_r+0x12>
 800775e:	462a      	mov	r2, r5
 8007760:	4621      	mov	r1, r4
 8007762:	f7fd fdd7 	bl	8005314 <memset>
 8007766:	e7f4      	b.n	8007752 <_calloc_r+0x12>

08007768 <_free_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4605      	mov	r5, r0
 800776c:	2900      	cmp	r1, #0
 800776e:	d040      	beq.n	80077f2 <_free_r+0x8a>
 8007770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007774:	1f0c      	subs	r4, r1, #4
 8007776:	2b00      	cmp	r3, #0
 8007778:	bfb8      	it	lt
 800777a:	18e4      	addlt	r4, r4, r3
 800777c:	f000 fc8a 	bl	8008094 <__malloc_lock>
 8007780:	4a1c      	ldr	r2, [pc, #112]	; (80077f4 <_free_r+0x8c>)
 8007782:	6813      	ldr	r3, [r2, #0]
 8007784:	b933      	cbnz	r3, 8007794 <_free_r+0x2c>
 8007786:	6063      	str	r3, [r4, #4]
 8007788:	6014      	str	r4, [r2, #0]
 800778a:	4628      	mov	r0, r5
 800778c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007790:	f000 bc86 	b.w	80080a0 <__malloc_unlock>
 8007794:	42a3      	cmp	r3, r4
 8007796:	d908      	bls.n	80077aa <_free_r+0x42>
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	1821      	adds	r1, r4, r0
 800779c:	428b      	cmp	r3, r1
 800779e:	bf01      	itttt	eq
 80077a0:	6819      	ldreq	r1, [r3, #0]
 80077a2:	685b      	ldreq	r3, [r3, #4]
 80077a4:	1809      	addeq	r1, r1, r0
 80077a6:	6021      	streq	r1, [r4, #0]
 80077a8:	e7ed      	b.n	8007786 <_free_r+0x1e>
 80077aa:	461a      	mov	r2, r3
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	b10b      	cbz	r3, 80077b4 <_free_r+0x4c>
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d9fa      	bls.n	80077aa <_free_r+0x42>
 80077b4:	6811      	ldr	r1, [r2, #0]
 80077b6:	1850      	adds	r0, r2, r1
 80077b8:	42a0      	cmp	r0, r4
 80077ba:	d10b      	bne.n	80077d4 <_free_r+0x6c>
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	4401      	add	r1, r0
 80077c0:	1850      	adds	r0, r2, r1
 80077c2:	4283      	cmp	r3, r0
 80077c4:	6011      	str	r1, [r2, #0]
 80077c6:	d1e0      	bne.n	800778a <_free_r+0x22>
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	4401      	add	r1, r0
 80077ce:	6011      	str	r1, [r2, #0]
 80077d0:	6053      	str	r3, [r2, #4]
 80077d2:	e7da      	b.n	800778a <_free_r+0x22>
 80077d4:	d902      	bls.n	80077dc <_free_r+0x74>
 80077d6:	230c      	movs	r3, #12
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	e7d6      	b.n	800778a <_free_r+0x22>
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	1821      	adds	r1, r4, r0
 80077e0:	428b      	cmp	r3, r1
 80077e2:	bf01      	itttt	eq
 80077e4:	6819      	ldreq	r1, [r3, #0]
 80077e6:	685b      	ldreq	r3, [r3, #4]
 80077e8:	1809      	addeq	r1, r1, r0
 80077ea:	6021      	streq	r1, [r4, #0]
 80077ec:	6063      	str	r3, [r4, #4]
 80077ee:	6054      	str	r4, [r2, #4]
 80077f0:	e7cb      	b.n	800778a <_free_r+0x22>
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	200003a8 	.word	0x200003a8

080077f8 <sbrk_aligned>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	4e0e      	ldr	r6, [pc, #56]	; (8007834 <sbrk_aligned+0x3c>)
 80077fc:	460c      	mov	r4, r1
 80077fe:	6831      	ldr	r1, [r6, #0]
 8007800:	4605      	mov	r5, r0
 8007802:	b911      	cbnz	r1, 800780a <sbrk_aligned+0x12>
 8007804:	f000 fb40 	bl	8007e88 <_sbrk_r>
 8007808:	6030      	str	r0, [r6, #0]
 800780a:	4621      	mov	r1, r4
 800780c:	4628      	mov	r0, r5
 800780e:	f000 fb3b 	bl	8007e88 <_sbrk_r>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	d00a      	beq.n	800782c <sbrk_aligned+0x34>
 8007816:	1cc4      	adds	r4, r0, #3
 8007818:	f024 0403 	bic.w	r4, r4, #3
 800781c:	42a0      	cmp	r0, r4
 800781e:	d007      	beq.n	8007830 <sbrk_aligned+0x38>
 8007820:	1a21      	subs	r1, r4, r0
 8007822:	4628      	mov	r0, r5
 8007824:	f000 fb30 	bl	8007e88 <_sbrk_r>
 8007828:	3001      	adds	r0, #1
 800782a:	d101      	bne.n	8007830 <sbrk_aligned+0x38>
 800782c:	f04f 34ff 	mov.w	r4, #4294967295
 8007830:	4620      	mov	r0, r4
 8007832:	bd70      	pop	{r4, r5, r6, pc}
 8007834:	200003ac 	.word	0x200003ac

08007838 <_malloc_r>:
 8007838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800783c:	1ccd      	adds	r5, r1, #3
 800783e:	f025 0503 	bic.w	r5, r5, #3
 8007842:	3508      	adds	r5, #8
 8007844:	2d0c      	cmp	r5, #12
 8007846:	bf38      	it	cc
 8007848:	250c      	movcc	r5, #12
 800784a:	2d00      	cmp	r5, #0
 800784c:	4607      	mov	r7, r0
 800784e:	db01      	blt.n	8007854 <_malloc_r+0x1c>
 8007850:	42a9      	cmp	r1, r5
 8007852:	d905      	bls.n	8007860 <_malloc_r+0x28>
 8007854:	230c      	movs	r3, #12
 8007856:	2600      	movs	r6, #0
 8007858:	603b      	str	r3, [r7, #0]
 800785a:	4630      	mov	r0, r6
 800785c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007860:	4e2e      	ldr	r6, [pc, #184]	; (800791c <_malloc_r+0xe4>)
 8007862:	f000 fc17 	bl	8008094 <__malloc_lock>
 8007866:	6833      	ldr	r3, [r6, #0]
 8007868:	461c      	mov	r4, r3
 800786a:	bb34      	cbnz	r4, 80078ba <_malloc_r+0x82>
 800786c:	4629      	mov	r1, r5
 800786e:	4638      	mov	r0, r7
 8007870:	f7ff ffc2 	bl	80077f8 <sbrk_aligned>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	4604      	mov	r4, r0
 8007878:	d14d      	bne.n	8007916 <_malloc_r+0xde>
 800787a:	6834      	ldr	r4, [r6, #0]
 800787c:	4626      	mov	r6, r4
 800787e:	2e00      	cmp	r6, #0
 8007880:	d140      	bne.n	8007904 <_malloc_r+0xcc>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	4631      	mov	r1, r6
 8007886:	4638      	mov	r0, r7
 8007888:	eb04 0803 	add.w	r8, r4, r3
 800788c:	f000 fafc 	bl	8007e88 <_sbrk_r>
 8007890:	4580      	cmp	r8, r0
 8007892:	d13a      	bne.n	800790a <_malloc_r+0xd2>
 8007894:	6821      	ldr	r1, [r4, #0]
 8007896:	3503      	adds	r5, #3
 8007898:	1a6d      	subs	r5, r5, r1
 800789a:	f025 0503 	bic.w	r5, r5, #3
 800789e:	3508      	adds	r5, #8
 80078a0:	2d0c      	cmp	r5, #12
 80078a2:	bf38      	it	cc
 80078a4:	250c      	movcc	r5, #12
 80078a6:	4638      	mov	r0, r7
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7ff ffa5 	bl	80077f8 <sbrk_aligned>
 80078ae:	3001      	adds	r0, #1
 80078b0:	d02b      	beq.n	800790a <_malloc_r+0xd2>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	442b      	add	r3, r5
 80078b6:	6023      	str	r3, [r4, #0]
 80078b8:	e00e      	b.n	80078d8 <_malloc_r+0xa0>
 80078ba:	6822      	ldr	r2, [r4, #0]
 80078bc:	1b52      	subs	r2, r2, r5
 80078be:	d41e      	bmi.n	80078fe <_malloc_r+0xc6>
 80078c0:	2a0b      	cmp	r2, #11
 80078c2:	d916      	bls.n	80078f2 <_malloc_r+0xba>
 80078c4:	1961      	adds	r1, r4, r5
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	6025      	str	r5, [r4, #0]
 80078ca:	bf18      	it	ne
 80078cc:	6059      	strne	r1, [r3, #4]
 80078ce:	6863      	ldr	r3, [r4, #4]
 80078d0:	bf08      	it	eq
 80078d2:	6031      	streq	r1, [r6, #0]
 80078d4:	5162      	str	r2, [r4, r5]
 80078d6:	604b      	str	r3, [r1, #4]
 80078d8:	4638      	mov	r0, r7
 80078da:	f104 060b 	add.w	r6, r4, #11
 80078de:	f000 fbdf 	bl	80080a0 <__malloc_unlock>
 80078e2:	f026 0607 	bic.w	r6, r6, #7
 80078e6:	1d23      	adds	r3, r4, #4
 80078e8:	1af2      	subs	r2, r6, r3
 80078ea:	d0b6      	beq.n	800785a <_malloc_r+0x22>
 80078ec:	1b9b      	subs	r3, r3, r6
 80078ee:	50a3      	str	r3, [r4, r2]
 80078f0:	e7b3      	b.n	800785a <_malloc_r+0x22>
 80078f2:	6862      	ldr	r2, [r4, #4]
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	bf0c      	ite	eq
 80078f8:	6032      	streq	r2, [r6, #0]
 80078fa:	605a      	strne	r2, [r3, #4]
 80078fc:	e7ec      	b.n	80078d8 <_malloc_r+0xa0>
 80078fe:	4623      	mov	r3, r4
 8007900:	6864      	ldr	r4, [r4, #4]
 8007902:	e7b2      	b.n	800786a <_malloc_r+0x32>
 8007904:	4634      	mov	r4, r6
 8007906:	6876      	ldr	r6, [r6, #4]
 8007908:	e7b9      	b.n	800787e <_malloc_r+0x46>
 800790a:	230c      	movs	r3, #12
 800790c:	4638      	mov	r0, r7
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	f000 fbc6 	bl	80080a0 <__malloc_unlock>
 8007914:	e7a1      	b.n	800785a <_malloc_r+0x22>
 8007916:	6025      	str	r5, [r4, #0]
 8007918:	e7de      	b.n	80078d8 <_malloc_r+0xa0>
 800791a:	bf00      	nop
 800791c:	200003a8 	.word	0x200003a8

08007920 <__ssputs_r>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	688e      	ldr	r6, [r1, #8]
 8007926:	4682      	mov	sl, r0
 8007928:	429e      	cmp	r6, r3
 800792a:	460c      	mov	r4, r1
 800792c:	4690      	mov	r8, r2
 800792e:	461f      	mov	r7, r3
 8007930:	d838      	bhi.n	80079a4 <__ssputs_r+0x84>
 8007932:	898a      	ldrh	r2, [r1, #12]
 8007934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007938:	d032      	beq.n	80079a0 <__ssputs_r+0x80>
 800793a:	6825      	ldr	r5, [r4, #0]
 800793c:	6909      	ldr	r1, [r1, #16]
 800793e:	3301      	adds	r3, #1
 8007940:	eba5 0901 	sub.w	r9, r5, r1
 8007944:	6965      	ldr	r5, [r4, #20]
 8007946:	444b      	add	r3, r9
 8007948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800794c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007950:	106d      	asrs	r5, r5, #1
 8007952:	429d      	cmp	r5, r3
 8007954:	bf38      	it	cc
 8007956:	461d      	movcc	r5, r3
 8007958:	0553      	lsls	r3, r2, #21
 800795a:	d531      	bpl.n	80079c0 <__ssputs_r+0xa0>
 800795c:	4629      	mov	r1, r5
 800795e:	f7ff ff6b 	bl	8007838 <_malloc_r>
 8007962:	4606      	mov	r6, r0
 8007964:	b950      	cbnz	r0, 800797c <__ssputs_r+0x5c>
 8007966:	230c      	movs	r3, #12
 8007968:	f04f 30ff 	mov.w	r0, #4294967295
 800796c:	f8ca 3000 	str.w	r3, [sl]
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797c:	464a      	mov	r2, r9
 800797e:	6921      	ldr	r1, [r4, #16]
 8007980:	f7ff fb4e 	bl	8007020 <memcpy>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800798a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	6126      	str	r6, [r4, #16]
 8007992:	444e      	add	r6, r9
 8007994:	6026      	str	r6, [r4, #0]
 8007996:	463e      	mov	r6, r7
 8007998:	6165      	str	r5, [r4, #20]
 800799a:	eba5 0509 	sub.w	r5, r5, r9
 800799e:	60a5      	str	r5, [r4, #8]
 80079a0:	42be      	cmp	r6, r7
 80079a2:	d900      	bls.n	80079a6 <__ssputs_r+0x86>
 80079a4:	463e      	mov	r6, r7
 80079a6:	4632      	mov	r2, r6
 80079a8:	4641      	mov	r1, r8
 80079aa:	6820      	ldr	r0, [r4, #0]
 80079ac:	f000 fb58 	bl	8008060 <memmove>
 80079b0:	68a3      	ldr	r3, [r4, #8]
 80079b2:	2000      	movs	r0, #0
 80079b4:	1b9b      	subs	r3, r3, r6
 80079b6:	60a3      	str	r3, [r4, #8]
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	4433      	add	r3, r6
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	e7db      	b.n	8007978 <__ssputs_r+0x58>
 80079c0:	462a      	mov	r2, r5
 80079c2:	f000 fb73 	bl	80080ac <_realloc_r>
 80079c6:	4606      	mov	r6, r0
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d1e1      	bne.n	8007990 <__ssputs_r+0x70>
 80079cc:	4650      	mov	r0, sl
 80079ce:	6921      	ldr	r1, [r4, #16]
 80079d0:	f7ff feca 	bl	8007768 <_free_r>
 80079d4:	e7c7      	b.n	8007966 <__ssputs_r+0x46>
	...

080079d8 <_svfiprintf_r>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	4698      	mov	r8, r3
 80079de:	898b      	ldrh	r3, [r1, #12]
 80079e0:	4607      	mov	r7, r0
 80079e2:	061b      	lsls	r3, r3, #24
 80079e4:	460d      	mov	r5, r1
 80079e6:	4614      	mov	r4, r2
 80079e8:	b09d      	sub	sp, #116	; 0x74
 80079ea:	d50e      	bpl.n	8007a0a <_svfiprintf_r+0x32>
 80079ec:	690b      	ldr	r3, [r1, #16]
 80079ee:	b963      	cbnz	r3, 8007a0a <_svfiprintf_r+0x32>
 80079f0:	2140      	movs	r1, #64	; 0x40
 80079f2:	f7ff ff21 	bl	8007838 <_malloc_r>
 80079f6:	6028      	str	r0, [r5, #0]
 80079f8:	6128      	str	r0, [r5, #16]
 80079fa:	b920      	cbnz	r0, 8007a06 <_svfiprintf_r+0x2e>
 80079fc:	230c      	movs	r3, #12
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	e0d1      	b.n	8007baa <_svfiprintf_r+0x1d2>
 8007a06:	2340      	movs	r3, #64	; 0x40
 8007a08:	616b      	str	r3, [r5, #20]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0e:	2320      	movs	r3, #32
 8007a10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a14:	2330      	movs	r3, #48	; 0x30
 8007a16:	f04f 0901 	mov.w	r9, #1
 8007a1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007bc4 <_svfiprintf_r+0x1ec>
 8007a22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a26:	4623      	mov	r3, r4
 8007a28:	469a      	mov	sl, r3
 8007a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a2e:	b10a      	cbz	r2, 8007a34 <_svfiprintf_r+0x5c>
 8007a30:	2a25      	cmp	r2, #37	; 0x25
 8007a32:	d1f9      	bne.n	8007a28 <_svfiprintf_r+0x50>
 8007a34:	ebba 0b04 	subs.w	fp, sl, r4
 8007a38:	d00b      	beq.n	8007a52 <_svfiprintf_r+0x7a>
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7ff ff6d 	bl	8007920 <__ssputs_r>
 8007a46:	3001      	adds	r0, #1
 8007a48:	f000 80aa 	beq.w	8007ba0 <_svfiprintf_r+0x1c8>
 8007a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a4e:	445a      	add	r2, fp
 8007a50:	9209      	str	r2, [sp, #36]	; 0x24
 8007a52:	f89a 3000 	ldrb.w	r3, [sl]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 80a2 	beq.w	8007ba0 <_svfiprintf_r+0x1c8>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a66:	f10a 0a01 	add.w	sl, sl, #1
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	9307      	str	r3, [sp, #28]
 8007a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a72:	931a      	str	r3, [sp, #104]	; 0x68
 8007a74:	4654      	mov	r4, sl
 8007a76:	2205      	movs	r2, #5
 8007a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7c:	4851      	ldr	r0, [pc, #324]	; (8007bc4 <_svfiprintf_r+0x1ec>)
 8007a7e:	f7ff fac1 	bl	8007004 <memchr>
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	b9d8      	cbnz	r0, 8007abe <_svfiprintf_r+0xe6>
 8007a86:	06d0      	lsls	r0, r2, #27
 8007a88:	bf44      	itt	mi
 8007a8a:	2320      	movmi	r3, #32
 8007a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a90:	0711      	lsls	r1, r2, #28
 8007a92:	bf44      	itt	mi
 8007a94:	232b      	movmi	r3, #43	; 0x2b
 8007a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa0:	d015      	beq.n	8007ace <_svfiprintf_r+0xf6>
 8007aa2:	4654      	mov	r4, sl
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	f04f 0c0a 	mov.w	ip, #10
 8007aaa:	9a07      	ldr	r2, [sp, #28]
 8007aac:	4621      	mov	r1, r4
 8007aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ab2:	3b30      	subs	r3, #48	; 0x30
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d94e      	bls.n	8007b56 <_svfiprintf_r+0x17e>
 8007ab8:	b1b0      	cbz	r0, 8007ae8 <_svfiprintf_r+0x110>
 8007aba:	9207      	str	r2, [sp, #28]
 8007abc:	e014      	b.n	8007ae8 <_svfiprintf_r+0x110>
 8007abe:	eba0 0308 	sub.w	r3, r0, r8
 8007ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	46a2      	mov	sl, r4
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	e7d2      	b.n	8007a74 <_svfiprintf_r+0x9c>
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	1d19      	adds	r1, r3, #4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	9103      	str	r1, [sp, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfbb      	ittet	lt
 8007ada:	425b      	neglt	r3, r3
 8007adc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ae0:	9307      	strge	r3, [sp, #28]
 8007ae2:	9307      	strlt	r3, [sp, #28]
 8007ae4:	bfb8      	it	lt
 8007ae6:	9204      	strlt	r2, [sp, #16]
 8007ae8:	7823      	ldrb	r3, [r4, #0]
 8007aea:	2b2e      	cmp	r3, #46	; 0x2e
 8007aec:	d10c      	bne.n	8007b08 <_svfiprintf_r+0x130>
 8007aee:	7863      	ldrb	r3, [r4, #1]
 8007af0:	2b2a      	cmp	r3, #42	; 0x2a
 8007af2:	d135      	bne.n	8007b60 <_svfiprintf_r+0x188>
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	3402      	adds	r4, #2
 8007af8:	1d1a      	adds	r2, r3, #4
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	9203      	str	r2, [sp, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bfb8      	it	lt
 8007b02:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b06:	9305      	str	r3, [sp, #20]
 8007b08:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007bc8 <_svfiprintf_r+0x1f0>
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	4650      	mov	r0, sl
 8007b10:	7821      	ldrb	r1, [r4, #0]
 8007b12:	f7ff fa77 	bl	8007004 <memchr>
 8007b16:	b140      	cbz	r0, 8007b2a <_svfiprintf_r+0x152>
 8007b18:	2340      	movs	r3, #64	; 0x40
 8007b1a:	eba0 000a 	sub.w	r0, r0, sl
 8007b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	3401      	adds	r4, #1
 8007b26:	4303      	orrs	r3, r0
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2e:	2206      	movs	r2, #6
 8007b30:	4826      	ldr	r0, [pc, #152]	; (8007bcc <_svfiprintf_r+0x1f4>)
 8007b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b36:	f7ff fa65 	bl	8007004 <memchr>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d038      	beq.n	8007bb0 <_svfiprintf_r+0x1d8>
 8007b3e:	4b24      	ldr	r3, [pc, #144]	; (8007bd0 <_svfiprintf_r+0x1f8>)
 8007b40:	bb1b      	cbnz	r3, 8007b8a <_svfiprintf_r+0x1b2>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	3307      	adds	r3, #7
 8007b46:	f023 0307 	bic.w	r3, r3, #7
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	9303      	str	r3, [sp, #12]
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	4433      	add	r3, r6
 8007b52:	9309      	str	r3, [sp, #36]	; 0x24
 8007b54:	e767      	b.n	8007a26 <_svfiprintf_r+0x4e>
 8007b56:	460c      	mov	r4, r1
 8007b58:	2001      	movs	r0, #1
 8007b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b5e:	e7a5      	b.n	8007aac <_svfiprintf_r+0xd4>
 8007b60:	2300      	movs	r3, #0
 8007b62:	f04f 0c0a 	mov.w	ip, #10
 8007b66:	4619      	mov	r1, r3
 8007b68:	3401      	adds	r4, #1
 8007b6a:	9305      	str	r3, [sp, #20]
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b72:	3a30      	subs	r2, #48	; 0x30
 8007b74:	2a09      	cmp	r2, #9
 8007b76:	d903      	bls.n	8007b80 <_svfiprintf_r+0x1a8>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0c5      	beq.n	8007b08 <_svfiprintf_r+0x130>
 8007b7c:	9105      	str	r1, [sp, #20]
 8007b7e:	e7c3      	b.n	8007b08 <_svfiprintf_r+0x130>
 8007b80:	4604      	mov	r4, r0
 8007b82:	2301      	movs	r3, #1
 8007b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b88:	e7f0      	b.n	8007b6c <_svfiprintf_r+0x194>
 8007b8a:	ab03      	add	r3, sp, #12
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	462a      	mov	r2, r5
 8007b90:	4638      	mov	r0, r7
 8007b92:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <_svfiprintf_r+0x1fc>)
 8007b94:	a904      	add	r1, sp, #16
 8007b96:	f7fd fc63 	bl	8005460 <_printf_float>
 8007b9a:	1c42      	adds	r2, r0, #1
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	d1d6      	bne.n	8007b4e <_svfiprintf_r+0x176>
 8007ba0:	89ab      	ldrh	r3, [r5, #12]
 8007ba2:	065b      	lsls	r3, r3, #25
 8007ba4:	f53f af2c 	bmi.w	8007a00 <_svfiprintf_r+0x28>
 8007ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007baa:	b01d      	add	sp, #116	; 0x74
 8007bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb0:	ab03      	add	r3, sp, #12
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <_svfiprintf_r+0x1fc>)
 8007bba:	a904      	add	r1, sp, #16
 8007bbc:	f7fd feec 	bl	8005998 <_printf_i>
 8007bc0:	e7eb      	b.n	8007b9a <_svfiprintf_r+0x1c2>
 8007bc2:	bf00      	nop
 8007bc4:	08008694 	.word	0x08008694
 8007bc8:	0800869a 	.word	0x0800869a
 8007bcc:	0800869e 	.word	0x0800869e
 8007bd0:	08005461 	.word	0x08005461
 8007bd4:	08007921 	.word	0x08007921

08007bd8 <__sfputc_r>:
 8007bd8:	6893      	ldr	r3, [r2, #8]
 8007bda:	b410      	push	{r4}
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	6093      	str	r3, [r2, #8]
 8007be2:	da07      	bge.n	8007bf4 <__sfputc_r+0x1c>
 8007be4:	6994      	ldr	r4, [r2, #24]
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	db01      	blt.n	8007bee <__sfputc_r+0x16>
 8007bea:	290a      	cmp	r1, #10
 8007bec:	d102      	bne.n	8007bf4 <__sfputc_r+0x1c>
 8007bee:	bc10      	pop	{r4}
 8007bf0:	f7fe b8a6 	b.w	8005d40 <__swbuf_r>
 8007bf4:	6813      	ldr	r3, [r2, #0]
 8007bf6:	1c58      	adds	r0, r3, #1
 8007bf8:	6010      	str	r0, [r2, #0]
 8007bfa:	7019      	strb	r1, [r3, #0]
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	bc10      	pop	{r4}
 8007c00:	4770      	bx	lr

08007c02 <__sfputs_r>:
 8007c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c04:	4606      	mov	r6, r0
 8007c06:	460f      	mov	r7, r1
 8007c08:	4614      	mov	r4, r2
 8007c0a:	18d5      	adds	r5, r2, r3
 8007c0c:	42ac      	cmp	r4, r5
 8007c0e:	d101      	bne.n	8007c14 <__sfputs_r+0x12>
 8007c10:	2000      	movs	r0, #0
 8007c12:	e007      	b.n	8007c24 <__sfputs_r+0x22>
 8007c14:	463a      	mov	r2, r7
 8007c16:	4630      	mov	r0, r6
 8007c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c1c:	f7ff ffdc 	bl	8007bd8 <__sfputc_r>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d1f3      	bne.n	8007c0c <__sfputs_r+0xa>
 8007c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c28 <_vfiprintf_r>:
 8007c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	460d      	mov	r5, r1
 8007c2e:	4614      	mov	r4, r2
 8007c30:	4698      	mov	r8, r3
 8007c32:	4606      	mov	r6, r0
 8007c34:	b09d      	sub	sp, #116	; 0x74
 8007c36:	b118      	cbz	r0, 8007c40 <_vfiprintf_r+0x18>
 8007c38:	6983      	ldr	r3, [r0, #24]
 8007c3a:	b90b      	cbnz	r3, 8007c40 <_vfiprintf_r+0x18>
 8007c3c:	f7ff f8d0 	bl	8006de0 <__sinit>
 8007c40:	4b89      	ldr	r3, [pc, #548]	; (8007e68 <_vfiprintf_r+0x240>)
 8007c42:	429d      	cmp	r5, r3
 8007c44:	d11b      	bne.n	8007c7e <_vfiprintf_r+0x56>
 8007c46:	6875      	ldr	r5, [r6, #4]
 8007c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c4a:	07d9      	lsls	r1, r3, #31
 8007c4c:	d405      	bmi.n	8007c5a <_vfiprintf_r+0x32>
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	059a      	lsls	r2, r3, #22
 8007c52:	d402      	bmi.n	8007c5a <_vfiprintf_r+0x32>
 8007c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c56:	f7ff f966 	bl	8006f26 <__retarget_lock_acquire_recursive>
 8007c5a:	89ab      	ldrh	r3, [r5, #12]
 8007c5c:	071b      	lsls	r3, r3, #28
 8007c5e:	d501      	bpl.n	8007c64 <_vfiprintf_r+0x3c>
 8007c60:	692b      	ldr	r3, [r5, #16]
 8007c62:	b9eb      	cbnz	r3, 8007ca0 <_vfiprintf_r+0x78>
 8007c64:	4629      	mov	r1, r5
 8007c66:	4630      	mov	r0, r6
 8007c68:	f7fe f8bc 	bl	8005de4 <__swsetup_r>
 8007c6c:	b1c0      	cbz	r0, 8007ca0 <_vfiprintf_r+0x78>
 8007c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c70:	07dc      	lsls	r4, r3, #31
 8007c72:	d50e      	bpl.n	8007c92 <_vfiprintf_r+0x6a>
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	b01d      	add	sp, #116	; 0x74
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	4b7b      	ldr	r3, [pc, #492]	; (8007e6c <_vfiprintf_r+0x244>)
 8007c80:	429d      	cmp	r5, r3
 8007c82:	d101      	bne.n	8007c88 <_vfiprintf_r+0x60>
 8007c84:	68b5      	ldr	r5, [r6, #8]
 8007c86:	e7df      	b.n	8007c48 <_vfiprintf_r+0x20>
 8007c88:	4b79      	ldr	r3, [pc, #484]	; (8007e70 <_vfiprintf_r+0x248>)
 8007c8a:	429d      	cmp	r5, r3
 8007c8c:	bf08      	it	eq
 8007c8e:	68f5      	ldreq	r5, [r6, #12]
 8007c90:	e7da      	b.n	8007c48 <_vfiprintf_r+0x20>
 8007c92:	89ab      	ldrh	r3, [r5, #12]
 8007c94:	0598      	lsls	r0, r3, #22
 8007c96:	d4ed      	bmi.n	8007c74 <_vfiprintf_r+0x4c>
 8007c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c9a:	f7ff f945 	bl	8006f28 <__retarget_lock_release_recursive>
 8007c9e:	e7e9      	b.n	8007c74 <_vfiprintf_r+0x4c>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca4:	2320      	movs	r3, #32
 8007ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007caa:	2330      	movs	r3, #48	; 0x30
 8007cac:	f04f 0901 	mov.w	r9, #1
 8007cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cb4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007e74 <_vfiprintf_r+0x24c>
 8007cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cbc:	4623      	mov	r3, r4
 8007cbe:	469a      	mov	sl, r3
 8007cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cc4:	b10a      	cbz	r2, 8007cca <_vfiprintf_r+0xa2>
 8007cc6:	2a25      	cmp	r2, #37	; 0x25
 8007cc8:	d1f9      	bne.n	8007cbe <_vfiprintf_r+0x96>
 8007cca:	ebba 0b04 	subs.w	fp, sl, r4
 8007cce:	d00b      	beq.n	8007ce8 <_vfiprintf_r+0xc0>
 8007cd0:	465b      	mov	r3, fp
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7ff ff93 	bl	8007c02 <__sfputs_r>
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f000 80aa 	beq.w	8007e36 <_vfiprintf_r+0x20e>
 8007ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ce4:	445a      	add	r2, fp
 8007ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 80a2 	beq.w	8007e36 <_vfiprintf_r+0x20e>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cfc:	f10a 0a01 	add.w	sl, sl, #1
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	9307      	str	r3, [sp, #28]
 8007d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d08:	931a      	str	r3, [sp, #104]	; 0x68
 8007d0a:	4654      	mov	r4, sl
 8007d0c:	2205      	movs	r2, #5
 8007d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d12:	4858      	ldr	r0, [pc, #352]	; (8007e74 <_vfiprintf_r+0x24c>)
 8007d14:	f7ff f976 	bl	8007004 <memchr>
 8007d18:	9a04      	ldr	r2, [sp, #16]
 8007d1a:	b9d8      	cbnz	r0, 8007d54 <_vfiprintf_r+0x12c>
 8007d1c:	06d1      	lsls	r1, r2, #27
 8007d1e:	bf44      	itt	mi
 8007d20:	2320      	movmi	r3, #32
 8007d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d26:	0713      	lsls	r3, r2, #28
 8007d28:	bf44      	itt	mi
 8007d2a:	232b      	movmi	r3, #43	; 0x2b
 8007d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d30:	f89a 3000 	ldrb.w	r3, [sl]
 8007d34:	2b2a      	cmp	r3, #42	; 0x2a
 8007d36:	d015      	beq.n	8007d64 <_vfiprintf_r+0x13c>
 8007d38:	4654      	mov	r4, sl
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	f04f 0c0a 	mov.w	ip, #10
 8007d40:	9a07      	ldr	r2, [sp, #28]
 8007d42:	4621      	mov	r1, r4
 8007d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d48:	3b30      	subs	r3, #48	; 0x30
 8007d4a:	2b09      	cmp	r3, #9
 8007d4c:	d94e      	bls.n	8007dec <_vfiprintf_r+0x1c4>
 8007d4e:	b1b0      	cbz	r0, 8007d7e <_vfiprintf_r+0x156>
 8007d50:	9207      	str	r2, [sp, #28]
 8007d52:	e014      	b.n	8007d7e <_vfiprintf_r+0x156>
 8007d54:	eba0 0308 	sub.w	r3, r0, r8
 8007d58:	fa09 f303 	lsl.w	r3, r9, r3
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	46a2      	mov	sl, r4
 8007d60:	9304      	str	r3, [sp, #16]
 8007d62:	e7d2      	b.n	8007d0a <_vfiprintf_r+0xe2>
 8007d64:	9b03      	ldr	r3, [sp, #12]
 8007d66:	1d19      	adds	r1, r3, #4
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	9103      	str	r1, [sp, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfbb      	ittet	lt
 8007d70:	425b      	neglt	r3, r3
 8007d72:	f042 0202 	orrlt.w	r2, r2, #2
 8007d76:	9307      	strge	r3, [sp, #28]
 8007d78:	9307      	strlt	r3, [sp, #28]
 8007d7a:	bfb8      	it	lt
 8007d7c:	9204      	strlt	r2, [sp, #16]
 8007d7e:	7823      	ldrb	r3, [r4, #0]
 8007d80:	2b2e      	cmp	r3, #46	; 0x2e
 8007d82:	d10c      	bne.n	8007d9e <_vfiprintf_r+0x176>
 8007d84:	7863      	ldrb	r3, [r4, #1]
 8007d86:	2b2a      	cmp	r3, #42	; 0x2a
 8007d88:	d135      	bne.n	8007df6 <_vfiprintf_r+0x1ce>
 8007d8a:	9b03      	ldr	r3, [sp, #12]
 8007d8c:	3402      	adds	r4, #2
 8007d8e:	1d1a      	adds	r2, r3, #4
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	9203      	str	r2, [sp, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	bfb8      	it	lt
 8007d98:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d9c:	9305      	str	r3, [sp, #20]
 8007d9e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007e78 <_vfiprintf_r+0x250>
 8007da2:	2203      	movs	r2, #3
 8007da4:	4650      	mov	r0, sl
 8007da6:	7821      	ldrb	r1, [r4, #0]
 8007da8:	f7ff f92c 	bl	8007004 <memchr>
 8007dac:	b140      	cbz	r0, 8007dc0 <_vfiprintf_r+0x198>
 8007dae:	2340      	movs	r3, #64	; 0x40
 8007db0:	eba0 000a 	sub.w	r0, r0, sl
 8007db4:	fa03 f000 	lsl.w	r0, r3, r0
 8007db8:	9b04      	ldr	r3, [sp, #16]
 8007dba:	3401      	adds	r4, #1
 8007dbc:	4303      	orrs	r3, r0
 8007dbe:	9304      	str	r3, [sp, #16]
 8007dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc4:	2206      	movs	r2, #6
 8007dc6:	482d      	ldr	r0, [pc, #180]	; (8007e7c <_vfiprintf_r+0x254>)
 8007dc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dcc:	f7ff f91a 	bl	8007004 <memchr>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d03f      	beq.n	8007e54 <_vfiprintf_r+0x22c>
 8007dd4:	4b2a      	ldr	r3, [pc, #168]	; (8007e80 <_vfiprintf_r+0x258>)
 8007dd6:	bb1b      	cbnz	r3, 8007e20 <_vfiprintf_r+0x1f8>
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	3307      	adds	r3, #7
 8007ddc:	f023 0307 	bic.w	r3, r3, #7
 8007de0:	3308      	adds	r3, #8
 8007de2:	9303      	str	r3, [sp, #12]
 8007de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de6:	443b      	add	r3, r7
 8007de8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dea:	e767      	b.n	8007cbc <_vfiprintf_r+0x94>
 8007dec:	460c      	mov	r4, r1
 8007dee:	2001      	movs	r0, #1
 8007df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007df4:	e7a5      	b.n	8007d42 <_vfiprintf_r+0x11a>
 8007df6:	2300      	movs	r3, #0
 8007df8:	f04f 0c0a 	mov.w	ip, #10
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	3401      	adds	r4, #1
 8007e00:	9305      	str	r3, [sp, #20]
 8007e02:	4620      	mov	r0, r4
 8007e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e08:	3a30      	subs	r2, #48	; 0x30
 8007e0a:	2a09      	cmp	r2, #9
 8007e0c:	d903      	bls.n	8007e16 <_vfiprintf_r+0x1ee>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0c5      	beq.n	8007d9e <_vfiprintf_r+0x176>
 8007e12:	9105      	str	r1, [sp, #20]
 8007e14:	e7c3      	b.n	8007d9e <_vfiprintf_r+0x176>
 8007e16:	4604      	mov	r4, r0
 8007e18:	2301      	movs	r3, #1
 8007e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e1e:	e7f0      	b.n	8007e02 <_vfiprintf_r+0x1da>
 8007e20:	ab03      	add	r3, sp, #12
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	462a      	mov	r2, r5
 8007e26:	4630      	mov	r0, r6
 8007e28:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <_vfiprintf_r+0x25c>)
 8007e2a:	a904      	add	r1, sp, #16
 8007e2c:	f7fd fb18 	bl	8005460 <_printf_float>
 8007e30:	4607      	mov	r7, r0
 8007e32:	1c78      	adds	r0, r7, #1
 8007e34:	d1d6      	bne.n	8007de4 <_vfiprintf_r+0x1bc>
 8007e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e38:	07d9      	lsls	r1, r3, #31
 8007e3a:	d405      	bmi.n	8007e48 <_vfiprintf_r+0x220>
 8007e3c:	89ab      	ldrh	r3, [r5, #12]
 8007e3e:	059a      	lsls	r2, r3, #22
 8007e40:	d402      	bmi.n	8007e48 <_vfiprintf_r+0x220>
 8007e42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e44:	f7ff f870 	bl	8006f28 <__retarget_lock_release_recursive>
 8007e48:	89ab      	ldrh	r3, [r5, #12]
 8007e4a:	065b      	lsls	r3, r3, #25
 8007e4c:	f53f af12 	bmi.w	8007c74 <_vfiprintf_r+0x4c>
 8007e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e52:	e711      	b.n	8007c78 <_vfiprintf_r+0x50>
 8007e54:	ab03      	add	r3, sp, #12
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	462a      	mov	r2, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <_vfiprintf_r+0x25c>)
 8007e5e:	a904      	add	r1, sp, #16
 8007e60:	f7fd fd9a 	bl	8005998 <_printf_i>
 8007e64:	e7e4      	b.n	8007e30 <_vfiprintf_r+0x208>
 8007e66:	bf00      	nop
 8007e68:	080084fc 	.word	0x080084fc
 8007e6c:	0800851c 	.word	0x0800851c
 8007e70:	080084dc 	.word	0x080084dc
 8007e74:	08008694 	.word	0x08008694
 8007e78:	0800869a 	.word	0x0800869a
 8007e7c:	0800869e 	.word	0x0800869e
 8007e80:	08005461 	.word	0x08005461
 8007e84:	08007c03 	.word	0x08007c03

08007e88 <_sbrk_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4d05      	ldr	r5, [pc, #20]	; (8007ea4 <_sbrk_r+0x1c>)
 8007e8e:	4604      	mov	r4, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	f7fa ff48 	bl	8002d28 <_sbrk>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_sbrk_r+0x1a>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_sbrk_r+0x1a>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	200003b0 	.word	0x200003b0

08007ea8 <__sread>:
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	460c      	mov	r4, r1
 8007eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb0:	f000 f92c 	bl	800810c <_read_r>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	bfab      	itete	ge
 8007eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eba:	89a3      	ldrhlt	r3, [r4, #12]
 8007ebc:	181b      	addge	r3, r3, r0
 8007ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ec2:	bfac      	ite	ge
 8007ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ec6:	81a3      	strhlt	r3, [r4, #12]
 8007ec8:	bd10      	pop	{r4, pc}

08007eca <__swrite>:
 8007eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ece:	461f      	mov	r7, r3
 8007ed0:	898b      	ldrh	r3, [r1, #12]
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	05db      	lsls	r3, r3, #23
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	4616      	mov	r6, r2
 8007eda:	d505      	bpl.n	8007ee8 <__swrite+0x1e>
 8007edc:	2302      	movs	r3, #2
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee4:	f000 f898 	bl	8008018 <_lseek_r>
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	4632      	mov	r2, r6
 8007eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	463b      	mov	r3, r7
 8007ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	f000 b817 	b.w	8007f30 <_write_r>

08007f02 <__sseek>:
 8007f02:	b510      	push	{r4, lr}
 8007f04:	460c      	mov	r4, r1
 8007f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0a:	f000 f885 	bl	8008018 <_lseek_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	bf15      	itete	ne
 8007f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f1e:	81a3      	strheq	r3, [r4, #12]
 8007f20:	bf18      	it	ne
 8007f22:	81a3      	strhne	r3, [r4, #12]
 8007f24:	bd10      	pop	{r4, pc}

08007f26 <__sclose>:
 8007f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2a:	f000 b831 	b.w	8007f90 <_close_r>
	...

08007f30 <_write_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4d05      	ldr	r5, [pc, #20]	; (8007f50 <_write_r+0x20>)
 8007f3c:	602a      	str	r2, [r5, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f7fa fea5 	bl	8002c8e <_write>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_write_r+0x1e>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_write_r+0x1e>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	200003b0 	.word	0x200003b0

08007f54 <__assert_func>:
 8007f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f56:	4614      	mov	r4, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <__assert_func+0x2c>)
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68d8      	ldr	r0, [r3, #12]
 8007f62:	b14c      	cbz	r4, 8007f78 <__assert_func+0x24>
 8007f64:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <__assert_func+0x30>)
 8007f66:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f6a:	9100      	str	r1, [sp, #0]
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	4906      	ldr	r1, [pc, #24]	; (8007f88 <__assert_func+0x34>)
 8007f70:	f000 f81e 	bl	8007fb0 <fiprintf>
 8007f74:	f000 f8e9 	bl	800814a <abort>
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <__assert_func+0x38>)
 8007f7a:	461c      	mov	r4, r3
 8007f7c:	e7f3      	b.n	8007f66 <__assert_func+0x12>
 8007f7e:	bf00      	nop
 8007f80:	20000018 	.word	0x20000018
 8007f84:	080086a5 	.word	0x080086a5
 8007f88:	080086b2 	.word	0x080086b2
 8007f8c:	080086e0 	.word	0x080086e0

08007f90 <_close_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	2300      	movs	r3, #0
 8007f94:	4d05      	ldr	r5, [pc, #20]	; (8007fac <_close_r+0x1c>)
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7fa fe93 	bl	8002cc6 <_close>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_close_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_close_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	200003b0 	.word	0x200003b0

08007fb0 <fiprintf>:
 8007fb0:	b40e      	push	{r1, r2, r3}
 8007fb2:	b503      	push	{r0, r1, lr}
 8007fb4:	4601      	mov	r1, r0
 8007fb6:	ab03      	add	r3, sp, #12
 8007fb8:	4805      	ldr	r0, [pc, #20]	; (8007fd0 <fiprintf+0x20>)
 8007fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fbe:	6800      	ldr	r0, [r0, #0]
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	f7ff fe31 	bl	8007c28 <_vfiprintf_r>
 8007fc6:	b002      	add	sp, #8
 8007fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fcc:	b003      	add	sp, #12
 8007fce:	4770      	bx	lr
 8007fd0:	20000018 	.word	0x20000018

08007fd4 <_fstat_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	4d06      	ldr	r5, [pc, #24]	; (8007ff4 <_fstat_r+0x20>)
 8007fda:	4604      	mov	r4, r0
 8007fdc:	4608      	mov	r0, r1
 8007fde:	4611      	mov	r1, r2
 8007fe0:	602b      	str	r3, [r5, #0]
 8007fe2:	f7fa fe7b 	bl	8002cdc <_fstat>
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	d102      	bne.n	8007ff0 <_fstat_r+0x1c>
 8007fea:	682b      	ldr	r3, [r5, #0]
 8007fec:	b103      	cbz	r3, 8007ff0 <_fstat_r+0x1c>
 8007fee:	6023      	str	r3, [r4, #0]
 8007ff0:	bd38      	pop	{r3, r4, r5, pc}
 8007ff2:	bf00      	nop
 8007ff4:	200003b0 	.word	0x200003b0

08007ff8 <_isatty_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	4d05      	ldr	r5, [pc, #20]	; (8008014 <_isatty_r+0x1c>)
 8007ffe:	4604      	mov	r4, r0
 8008000:	4608      	mov	r0, r1
 8008002:	602b      	str	r3, [r5, #0]
 8008004:	f7fa fe79 	bl	8002cfa <_isatty>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_isatty_r+0x1a>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_isatty_r+0x1a>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	200003b0 	.word	0x200003b0

08008018 <_lseek_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	4611      	mov	r1, r2
 8008020:	2200      	movs	r2, #0
 8008022:	4d05      	ldr	r5, [pc, #20]	; (8008038 <_lseek_r+0x20>)
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f7fa fe71 	bl	8002d0e <_lseek>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_lseek_r+0x1e>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_lseek_r+0x1e>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	200003b0 	.word	0x200003b0

0800803c <__ascii_mbtowc>:
 800803c:	b082      	sub	sp, #8
 800803e:	b901      	cbnz	r1, 8008042 <__ascii_mbtowc+0x6>
 8008040:	a901      	add	r1, sp, #4
 8008042:	b142      	cbz	r2, 8008056 <__ascii_mbtowc+0x1a>
 8008044:	b14b      	cbz	r3, 800805a <__ascii_mbtowc+0x1e>
 8008046:	7813      	ldrb	r3, [r2, #0]
 8008048:	600b      	str	r3, [r1, #0]
 800804a:	7812      	ldrb	r2, [r2, #0]
 800804c:	1e10      	subs	r0, r2, #0
 800804e:	bf18      	it	ne
 8008050:	2001      	movne	r0, #1
 8008052:	b002      	add	sp, #8
 8008054:	4770      	bx	lr
 8008056:	4610      	mov	r0, r2
 8008058:	e7fb      	b.n	8008052 <__ascii_mbtowc+0x16>
 800805a:	f06f 0001 	mvn.w	r0, #1
 800805e:	e7f8      	b.n	8008052 <__ascii_mbtowc+0x16>

08008060 <memmove>:
 8008060:	4288      	cmp	r0, r1
 8008062:	b510      	push	{r4, lr}
 8008064:	eb01 0402 	add.w	r4, r1, r2
 8008068:	d902      	bls.n	8008070 <memmove+0x10>
 800806a:	4284      	cmp	r4, r0
 800806c:	4623      	mov	r3, r4
 800806e:	d807      	bhi.n	8008080 <memmove+0x20>
 8008070:	1e43      	subs	r3, r0, #1
 8008072:	42a1      	cmp	r1, r4
 8008074:	d008      	beq.n	8008088 <memmove+0x28>
 8008076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800807a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800807e:	e7f8      	b.n	8008072 <memmove+0x12>
 8008080:	4601      	mov	r1, r0
 8008082:	4402      	add	r2, r0
 8008084:	428a      	cmp	r2, r1
 8008086:	d100      	bne.n	800808a <memmove+0x2a>
 8008088:	bd10      	pop	{r4, pc}
 800808a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800808e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008092:	e7f7      	b.n	8008084 <memmove+0x24>

08008094 <__malloc_lock>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__malloc_lock+0x8>)
 8008096:	f7fe bf46 	b.w	8006f26 <__retarget_lock_acquire_recursive>
 800809a:	bf00      	nop
 800809c:	200003a4 	.word	0x200003a4

080080a0 <__malloc_unlock>:
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__malloc_unlock+0x8>)
 80080a2:	f7fe bf41 	b.w	8006f28 <__retarget_lock_release_recursive>
 80080a6:	bf00      	nop
 80080a8:	200003a4 	.word	0x200003a4

080080ac <_realloc_r>:
 80080ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	4680      	mov	r8, r0
 80080b2:	4614      	mov	r4, r2
 80080b4:	460e      	mov	r6, r1
 80080b6:	b921      	cbnz	r1, 80080c2 <_realloc_r+0x16>
 80080b8:	4611      	mov	r1, r2
 80080ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080be:	f7ff bbbb 	b.w	8007838 <_malloc_r>
 80080c2:	b92a      	cbnz	r2, 80080d0 <_realloc_r+0x24>
 80080c4:	f7ff fb50 	bl	8007768 <_free_r>
 80080c8:	4625      	mov	r5, r4
 80080ca:	4628      	mov	r0, r5
 80080cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d0:	f000 f842 	bl	8008158 <_malloc_usable_size_r>
 80080d4:	4284      	cmp	r4, r0
 80080d6:	4607      	mov	r7, r0
 80080d8:	d802      	bhi.n	80080e0 <_realloc_r+0x34>
 80080da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080de:	d812      	bhi.n	8008106 <_realloc_r+0x5a>
 80080e0:	4621      	mov	r1, r4
 80080e2:	4640      	mov	r0, r8
 80080e4:	f7ff fba8 	bl	8007838 <_malloc_r>
 80080e8:	4605      	mov	r5, r0
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d0ed      	beq.n	80080ca <_realloc_r+0x1e>
 80080ee:	42bc      	cmp	r4, r7
 80080f0:	4622      	mov	r2, r4
 80080f2:	4631      	mov	r1, r6
 80080f4:	bf28      	it	cs
 80080f6:	463a      	movcs	r2, r7
 80080f8:	f7fe ff92 	bl	8007020 <memcpy>
 80080fc:	4631      	mov	r1, r6
 80080fe:	4640      	mov	r0, r8
 8008100:	f7ff fb32 	bl	8007768 <_free_r>
 8008104:	e7e1      	b.n	80080ca <_realloc_r+0x1e>
 8008106:	4635      	mov	r5, r6
 8008108:	e7df      	b.n	80080ca <_realloc_r+0x1e>
	...

0800810c <_read_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	4611      	mov	r1, r2
 8008114:	2200      	movs	r2, #0
 8008116:	4d05      	ldr	r5, [pc, #20]	; (800812c <_read_r+0x20>)
 8008118:	602a      	str	r2, [r5, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	f7fa fd9a 	bl	8002c54 <_read>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_read_r+0x1e>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_read_r+0x1e>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	200003b0 	.word	0x200003b0

08008130 <__ascii_wctomb>:
 8008130:	4603      	mov	r3, r0
 8008132:	4608      	mov	r0, r1
 8008134:	b141      	cbz	r1, 8008148 <__ascii_wctomb+0x18>
 8008136:	2aff      	cmp	r2, #255	; 0xff
 8008138:	d904      	bls.n	8008144 <__ascii_wctomb+0x14>
 800813a:	228a      	movs	r2, #138	; 0x8a
 800813c:	f04f 30ff 	mov.w	r0, #4294967295
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	4770      	bx	lr
 8008144:	2001      	movs	r0, #1
 8008146:	700a      	strb	r2, [r1, #0]
 8008148:	4770      	bx	lr

0800814a <abort>:
 800814a:	2006      	movs	r0, #6
 800814c:	b508      	push	{r3, lr}
 800814e:	f000 f833 	bl	80081b8 <raise>
 8008152:	2001      	movs	r0, #1
 8008154:	f7fa fd74 	bl	8002c40 <_exit>

08008158 <_malloc_usable_size_r>:
 8008158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800815c:	1f18      	subs	r0, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	bfbc      	itt	lt
 8008162:	580b      	ldrlt	r3, [r1, r0]
 8008164:	18c0      	addlt	r0, r0, r3
 8008166:	4770      	bx	lr

08008168 <_raise_r>:
 8008168:	291f      	cmp	r1, #31
 800816a:	b538      	push	{r3, r4, r5, lr}
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	d904      	bls.n	800817c <_raise_r+0x14>
 8008172:	2316      	movs	r3, #22
 8008174:	6003      	str	r3, [r0, #0]
 8008176:	f04f 30ff 	mov.w	r0, #4294967295
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800817e:	b112      	cbz	r2, 8008186 <_raise_r+0x1e>
 8008180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008184:	b94b      	cbnz	r3, 800819a <_raise_r+0x32>
 8008186:	4620      	mov	r0, r4
 8008188:	f000 f830 	bl	80081ec <_getpid_r>
 800818c:	462a      	mov	r2, r5
 800818e:	4601      	mov	r1, r0
 8008190:	4620      	mov	r0, r4
 8008192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008196:	f000 b817 	b.w	80081c8 <_kill_r>
 800819a:	2b01      	cmp	r3, #1
 800819c:	d00a      	beq.n	80081b4 <_raise_r+0x4c>
 800819e:	1c59      	adds	r1, r3, #1
 80081a0:	d103      	bne.n	80081aa <_raise_r+0x42>
 80081a2:	2316      	movs	r3, #22
 80081a4:	6003      	str	r3, [r0, #0]
 80081a6:	2001      	movs	r0, #1
 80081a8:	e7e7      	b.n	800817a <_raise_r+0x12>
 80081aa:	2400      	movs	r4, #0
 80081ac:	4628      	mov	r0, r5
 80081ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081b2:	4798      	blx	r3
 80081b4:	2000      	movs	r0, #0
 80081b6:	e7e0      	b.n	800817a <_raise_r+0x12>

080081b8 <raise>:
 80081b8:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <raise+0xc>)
 80081ba:	4601      	mov	r1, r0
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	f7ff bfd3 	b.w	8008168 <_raise_r>
 80081c2:	bf00      	nop
 80081c4:	20000018 	.word	0x20000018

080081c8 <_kill_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	2300      	movs	r3, #0
 80081cc:	4d06      	ldr	r5, [pc, #24]	; (80081e8 <_kill_r+0x20>)
 80081ce:	4604      	mov	r4, r0
 80081d0:	4608      	mov	r0, r1
 80081d2:	4611      	mov	r1, r2
 80081d4:	602b      	str	r3, [r5, #0]
 80081d6:	f7fa fd23 	bl	8002c20 <_kill>
 80081da:	1c43      	adds	r3, r0, #1
 80081dc:	d102      	bne.n	80081e4 <_kill_r+0x1c>
 80081de:	682b      	ldr	r3, [r5, #0]
 80081e0:	b103      	cbz	r3, 80081e4 <_kill_r+0x1c>
 80081e2:	6023      	str	r3, [r4, #0]
 80081e4:	bd38      	pop	{r3, r4, r5, pc}
 80081e6:	bf00      	nop
 80081e8:	200003b0 	.word	0x200003b0

080081ec <_getpid_r>:
 80081ec:	f7fa bd11 	b.w	8002c12 <_getpid>

080081f0 <_init>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr

080081fc <_fini>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr
>>>>>>> majorchng
