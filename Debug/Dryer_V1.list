
Dryer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e0  080050e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080050e0  080050e0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e0  080050e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080050e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000074  0800515c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  0800515c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be2c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002447  00000000  00000000  0002bec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  0002e310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  0002f108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001950d  00000000  00000000  0002fde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9c2  00000000  00000000  000492f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1a8  00000000  00000000  00058cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4e5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000416c  00000000  00000000  000e4eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e40 	.word	0x08004e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004e40 	.word	0x08004e40

0800014c <input_init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void input_init(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b31      	ldr	r3, [pc, #196]	; (8000218 <input_init+0xcc>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a30      	ldr	r2, [pc, #192]	; (8000218 <input_init+0xcc>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b2e      	ldr	r3, [pc, #184]	; (8000218 <input_init+0xcc>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b2b      	ldr	r3, [pc, #172]	; (8000218 <input_init+0xcc>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a2a      	ldr	r2, [pc, #168]	; (8000218 <input_init+0xcc>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b28      	ldr	r3, [pc, #160]	; (8000218 <input_init+0xcc>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000182:	4b25      	ldr	r3, [pc, #148]	; (8000218 <input_init+0xcc>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a24      	ldr	r2, [pc, #144]	; (8000218 <input_init+0xcc>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b22      	ldr	r3, [pc, #136]	; (8000218 <input_init+0xcc>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0310 	and.w	r3, r3, #16
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = { 0 };
 800019a:	f107 0310 	add.w	r3, r7, #16
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = DOOR_SW;
 80001a8:	2301      	movs	r3, #1
 80001aa:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001ac:	4b1b      	ldr	r3, [pc, #108]	; (800021c <input_init+0xd0>)
 80001ae:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 80001b0:	2301      	movs	r3, #1
 80001b2:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001b4:	2302      	movs	r3, #2
 80001b6:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001b8:	f107 0310 	add.w	r3, r7, #16
 80001bc:	4619      	mov	r1, r3
 80001be:	4818      	ldr	r0, [pc, #96]	; (8000220 <input_init+0xd4>)
 80001c0:	f002 f858 	bl	8002274 <HAL_GPIO_Init>

	GPIOx.Pin = LIMIT_SW | HEATER_SW | SEL_ROT_SW;
 80001c4:	230e      	movs	r3, #14
 80001c6:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_INPUT;
 80001c8:	2300      	movs	r3, #0
 80001ca:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLUP;
 80001cc:	2301      	movs	r3, #1
 80001ce:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001d0:	2302      	movs	r3, #2
 80001d2:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(INPUT_PORT, &GPIOx);
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	4619      	mov	r1, r3
 80001da:	4811      	ldr	r0, [pc, #68]	; (8000220 <input_init+0xd4>)
 80001dc:	f002 f84a 	bl	8002274 <HAL_GPIO_Init>

	GPIOx.Pin = LED;
 80001e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e4:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80001e6:	2301      	movs	r3, #1
 80001e8:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_NOPULL;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOC, &GPIOx);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	480a      	ldr	r0, [pc, #40]	; (8000224 <input_init+0xd8>)
 80001fa:	f002 f83b 	bl	8002274 <HAL_GPIO_Init>

	//HAL_GPIO_WritePin(GPIOC, LED, LOW);

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2100      	movs	r1, #0
 8000202:	2006      	movs	r0, #6
 8000204:	f001 ffff 	bl	8002206 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000208:	2006      	movs	r0, #6
 800020a:	f002 f818 	bl	800223e <HAL_NVIC_EnableIRQ>
}
 800020e:	bf00      	nop
 8000210:	3720      	adds	r7, #32
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000
 800021c:	10310000 	.word	0x10310000
 8000220:	40010800 	.word	0x40010800
 8000224:	40011000 	.word	0x40011000

08000228 <is_door_open>:

uint8_t is_door_open(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 800022c:	f001 fee6 	bl	8001ffc <HAL_GetTick>
 8000230:	4602      	mov	r2, r0
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <is_door_open+0x44>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	2b05      	cmp	r3, #5
 800023a:	d912      	bls.n	8000262 <is_door_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == GPIO_PIN_RESET) {
 800023c:	2101      	movs	r1, #1
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <is_door_open+0x48>)
 8000240:	f002 f99c 	bl	800257c <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d103      	bne.n	8000252 <is_door_open+0x2a>
			last_state = 0;
 800024a:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <is_door_open+0x4c>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
 8000250:	e002      	b.n	8000258 <is_door_open+0x30>
		} else {
			last_state = 1;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <is_door_open+0x4c>)
 8000254:	2201      	movs	r2, #1
 8000256:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000258:	f001 fed0 	bl	8001ffc <HAL_GetTick>
 800025c:	4603      	mov	r3, r0
 800025e:	4a03      	ldr	r2, [pc, #12]	; (800026c <is_door_open+0x44>)
 8000260:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 8000262:	4b04      	ldr	r3, [pc, #16]	; (8000274 <is_door_open+0x4c>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	b2db      	uxtb	r3, r3
}
 8000268:	4618      	mov	r0, r3
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000090 	.word	0x20000090
 8000270:	40010800 	.word	0x40010800
 8000274:	20000094 	.word	0x20000094

08000278 <is_coil_open>:

uint8_t is_coil_open(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 800027c:	f001 febe 	bl	8001ffc <HAL_GetTick>
 8000280:	4602      	mov	r2, r0
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <is_coil_open+0x44>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	1ad3      	subs	r3, r2, r3
 8000288:	2b05      	cmp	r3, #5
 800028a:	d912      	bls.n	80002b2 <is_coil_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, HEATER_SW) == GPIO_PIN_RESET) {
 800028c:	2108      	movs	r1, #8
 800028e:	480c      	ldr	r0, [pc, #48]	; (80002c0 <is_coil_open+0x48>)
 8000290:	f002 f974 	bl	800257c <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d103      	bne.n	80002a2 <is_coil_open+0x2a>
			last_state = 0;
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <is_coil_open+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
 80002a0:	e002      	b.n	80002a8 <is_coil_open+0x30>
		} else {
			last_state = 1;
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <is_coil_open+0x4c>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80002a8:	f001 fea8 	bl	8001ffc <HAL_GetTick>
 80002ac:	4603      	mov	r3, r0
 80002ae:	4a03      	ldr	r2, [pc, #12]	; (80002bc <is_coil_open+0x44>)
 80002b0:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <is_coil_open+0x4c>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b2db      	uxtb	r3, r3
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000098 	.word	0x20000098
 80002c0:	40010800 	.word	0x40010800
 80002c4:	2000009c 	.word	0x2000009c

080002c8 <limit_sw_open>:

uint8_t limit_sw_open(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 80002cc:	f001 fe96 	bl	8001ffc <HAL_GetTick>
 80002d0:	4602      	mov	r2, r0
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <limit_sw_open+0x44>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	2b05      	cmp	r3, #5
 80002da:	d912      	bls.n	8000302 <limit_sw_open+0x3a>
		if (HAL_GPIO_ReadPin(INPUT_PORT, LIMIT_SW) == GPIO_PIN_RESET) {
 80002dc:	2102      	movs	r1, #2
 80002de:	480c      	ldr	r0, [pc, #48]	; (8000310 <limit_sw_open+0x48>)
 80002e0:	f002 f94c 	bl	800257c <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d103      	bne.n	80002f2 <limit_sw_open+0x2a>
			last_state = 0;
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <limit_sw_open+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
 80002f0:	e002      	b.n	80002f8 <limit_sw_open+0x30>
		} else {
			last_state = 1;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <limit_sw_open+0x4c>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80002f8:	f001 fe80 	bl	8001ffc <HAL_GetTick>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4a03      	ldr	r2, [pc, #12]	; (800030c <limit_sw_open+0x44>)
 8000300:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 8000302:	4b04      	ldr	r3, [pc, #16]	; (8000314 <limit_sw_open+0x4c>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	b2db      	uxtb	r3, r3
}
 8000308:	4618      	mov	r0, r3
 800030a:	bd80      	pop	{r7, pc}
 800030c:	200000a0 	.word	0x200000a0
 8000310:	40010800 	.word	0x40010800
 8000314:	200000a4 	.word	0x200000a4

08000318 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(DOOR_SW);
 800031c:	2001      	movs	r0, #1
 800031e:	f002 f95d 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <keypad_init>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

void keypad_init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <keypad_init+0x54>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a12      	ldr	r2, [pc, #72]	; (800037c <keypad_init+0x54>)
 8000334:	f043 0308 	orr.w	r3, r3, #8
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <keypad_init+0x54>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 8000346:	f107 0308 	add.w	r3, r7, #8
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]

	GPIOx.Pin = LOW_KEY | MED_KEY | HIGH_KEY | FN_KEY;
 8000354:	f640 4303 	movw	r3, #3075	; 0xc03
 8000358:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_INPUT;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLUP;
 800035e:	2301      	movs	r3, #1
 8000360:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_HIGH;
 8000362:	2303      	movs	r3, #3
 8000364:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(KEYPAD_PORT, &GPIOx);
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	4619      	mov	r1, r3
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <keypad_init+0x58>)
 800036e:	f001 ff81 	bl	8002274 <HAL_GPIO_Init>
}
 8000372:	bf00      	nop
 8000374:	3718      	adds	r7, #24
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	40010c00 	.word	0x40010c00

08000384 <scan_keypad>:

uint8_t scan_keypad(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 8000388:	f000 f832 	bl	80003f0 <is_low_key_pressed>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d004      	beq.n	800039c <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 8000392:	4813      	ldr	r0, [pc, #76]	; (80003e0 <scan_keypad+0x5c>)
 8000394:	f003 fbf4 	bl	8003b80 <puts>
		return LOW_KEY_PRESSED;
 8000398:	2301      	movs	r3, #1
 800039a:	e01e      	b.n	80003da <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 800039c:	f000 f860 	bl	8000460 <is_med_key_pressed>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d004      	beq.n	80003b0 <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 80003a6:	480f      	ldr	r0, [pc, #60]	; (80003e4 <scan_keypad+0x60>)
 80003a8:	f003 fbea 	bl	8003b80 <puts>
		return MED_KEY_PRESSED;
 80003ac:	2302      	movs	r3, #2
 80003ae:	e014      	b.n	80003da <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 80003b0:	f000 f890 	bl	80004d4 <is_high_key_pressed>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d004      	beq.n	80003c4 <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 80003ba:	480b      	ldr	r0, [pc, #44]	; (80003e8 <scan_keypad+0x64>)
 80003bc:	f003 fbe0 	bl	8003b80 <puts>
		return HIGH_KEY_PRESSED;
 80003c0:	2303      	movs	r3, #3
 80003c2:	e00a      	b.n	80003da <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 80003c4:	f000 f8c0 	bl	8000548 <is_fn_key_pressed>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d004      	beq.n	80003d8 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <scan_keypad+0x68>)
 80003d0:	f003 fbd6 	bl	8003b80 <puts>
		return FN_KEY_PRESSED;
 80003d4:	2304      	movs	r3, #4
 80003d6:	e000      	b.n	80003da <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 80003d8:	2300      	movs	r3, #0
}
 80003da:	4618      	mov	r0, r3
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	08004e58 	.word	0x08004e58
 80003e4:	08004e6c 	.word	0x08004e6c
 80003e8:	08004e80 	.word	0x08004e80
 80003ec:	08004e94 	.word	0x08004e94

080003f0 <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 80003f4:	f001 fe02 	bl	8001ffc <HAL_GetTick>
 80003f8:	4602      	mov	r2, r0
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <is_low_key_pressed+0x64>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	1ad3      	subs	r3, r2, r3
 8000400:	2b05      	cmp	r3, #5
 8000402:	d923      	bls.n	800044c <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 8000404:	2102      	movs	r1, #2
 8000406:	4814      	ldr	r0, [pc, #80]	; (8000458 <is_low_key_pressed+0x68>)
 8000408:	f002 f8b8 	bl	800257c <HAL_GPIO_ReadPin>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d114      	bne.n	800043c <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <is_low_key_pressed+0x6c>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	2b01      	cmp	r3, #1
 800041a:	d112      	bne.n	8000442 <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, LOW_KEY) == GPIO_PIN_RESET)
 800041c:	2102      	movs	r1, #2
 800041e:	480e      	ldr	r0, [pc, #56]	; (8000458 <is_low_key_pressed+0x68>)
 8000420:	f002 f8ac 	bl	800257c <HAL_GPIO_ReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d104      	bne.n	8000434 <is_low_key_pressed+0x44>
				{
					last_state = 0;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <is_low_key_pressed+0x6c>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
					return 1;
 8000430:	2301      	movs	r3, #1
 8000432:	e00c      	b.n	800044e <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <is_low_key_pressed+0x6c>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
 800043a:	e002      	b.n	8000442 <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <is_low_key_pressed+0x6c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000442:	f001 fddb 	bl	8001ffc <HAL_GetTick>
 8000446:	4603      	mov	r3, r0
 8000448:	4a02      	ldr	r2, [pc, #8]	; (8000454 <is_low_key_pressed+0x64>)
 800044a:	6013      	str	r3, [r2, #0]
	}
	return 0;
 800044c:	2300      	movs	r3, #0
}
 800044e:	4618      	mov	r0, r3
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a8 	.word	0x200000a8
 8000458:	40010c00 	.word	0x40010c00
 800045c:	200000ac 	.word	0x200000ac

08000460 <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 8000464:	f001 fdca 	bl	8001ffc <HAL_GetTick>
 8000468:	4602      	mov	r2, r0
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <is_med_key_pressed+0x68>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	2b05      	cmp	r3, #5
 8000472:	d925      	bls.n	80004c0 <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 8000474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000478:	4814      	ldr	r0, [pc, #80]	; (80004cc <is_med_key_pressed+0x6c>)
 800047a:	f002 f87f 	bl	800257c <HAL_GPIO_ReadPin>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <is_med_key_pressed+0x70>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b01      	cmp	r3, #1
 800048c:	d113      	bne.n	80004b6 <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, MED_KEY) == GPIO_PIN_RESET)
 800048e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000492:	480e      	ldr	r0, [pc, #56]	; (80004cc <is_med_key_pressed+0x6c>)
 8000494:	f002 f872 	bl	800257c <HAL_GPIO_ReadPin>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d104      	bne.n	80004a8 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <is_med_key_pressed+0x70>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
					return 1;
 80004a4:	2301      	movs	r3, #1
 80004a6:	e00c      	b.n	80004c2 <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <is_med_key_pressed+0x70>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	e002      	b.n	80004b6 <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <is_med_key_pressed+0x70>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80004b6:	f001 fda1 	bl	8001ffc <HAL_GetTick>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4a02      	ldr	r2, [pc, #8]	; (80004c8 <is_med_key_pressed+0x68>)
 80004be:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80004c0:	2300      	movs	r3, #0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000b0 	.word	0x200000b0
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	200000b4 	.word	0x200000b4

080004d4 <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 80004d8:	f001 fd90 	bl	8001ffc <HAL_GetTick>
 80004dc:	4602      	mov	r2, r0
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <is_high_key_pressed+0x68>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	2b05      	cmp	r3, #5
 80004e6:	d925      	bls.n	8000534 <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 80004e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ec:	4814      	ldr	r0, [pc, #80]	; (8000540 <is_high_key_pressed+0x6c>)
 80004ee:	f002 f845 	bl	800257c <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d115      	bne.n	8000524 <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <is_high_key_pressed+0x70>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d113      	bne.n	800052a <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, HIGH_KEY) == GPIO_PIN_RESET)
 8000502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000506:	480e      	ldr	r0, [pc, #56]	; (8000540 <is_high_key_pressed+0x6c>)
 8000508:	f002 f838 	bl	800257c <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d104      	bne.n	800051c <is_high_key_pressed+0x48>
				{
					last_state = 0;
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <is_high_key_pressed+0x70>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
					return 1;
 8000518:	2301      	movs	r3, #1
 800051a:	e00c      	b.n	8000536 <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <is_high_key_pressed+0x70>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e002      	b.n	800052a <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <is_high_key_pressed+0x70>)
 8000526:	2201      	movs	r2, #1
 8000528:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800052a:	f001 fd67 	bl	8001ffc <HAL_GetTick>
 800052e:	4603      	mov	r3, r0
 8000530:	4a02      	ldr	r2, [pc, #8]	; (800053c <is_high_key_pressed+0x68>)
 8000532:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000b8 	.word	0x200000b8
 8000540:	40010c00 	.word	0x40010c00
 8000544:	200000bc 	.word	0x200000bc

08000548 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 5U)
 800054c:	f001 fd56 	bl	8001ffc <HAL_GetTick>
 8000550:	4602      	mov	r2, r0
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <is_fn_key_pressed+0x64>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	2b05      	cmp	r3, #5
 800055a:	d923      	bls.n	80005a4 <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 800055c:	2101      	movs	r1, #1
 800055e:	4814      	ldr	r0, [pc, #80]	; (80005b0 <is_fn_key_pressed+0x68>)
 8000560:	f002 f80c 	bl	800257c <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d114      	bne.n	8000594 <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <is_fn_key_pressed+0x6c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b01      	cmp	r3, #1
 8000572:	d112      	bne.n	800059a <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(KEYPAD_PORT, FN_KEY) == GPIO_PIN_RESET)
 8000574:	2101      	movs	r1, #1
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <is_fn_key_pressed+0x68>)
 8000578:	f002 f800 	bl	800257c <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d104      	bne.n	800058c <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <is_fn_key_pressed+0x6c>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
					return 1;
 8000588:	2301      	movs	r3, #1
 800058a:	e00c      	b.n	80005a6 <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <is_fn_key_pressed+0x6c>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e002      	b.n	800059a <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <is_fn_key_pressed+0x6c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800059a:	f001 fd2f 	bl	8001ffc <HAL_GetTick>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a02      	ldr	r2, [pc, #8]	; (80005ac <is_fn_key_pressed+0x64>)
 80005a2:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000c0 	.word	0x200000c0
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	200000c4 	.word	0x200000c4

080005b8 <lcd_gpio_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_gpio_init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0
	__HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b47      	ldr	r3, [pc, #284]	; (80006dc <lcd_gpio_init+0x124>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a46      	ldr	r2, [pc, #280]	; (80006dc <lcd_gpio_init+0x124>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b44      	ldr	r3, [pc, #272]	; (80006dc <lcd_gpio_init+0x124>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_AFIO_REMAP_SWJ_NONJTRST();
 80005d6:	4b42      	ldr	r3, [pc, #264]	; (80006e0 <lcd_gpio_init+0x128>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
 80005dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
 80005e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
 80005ec:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <lcd_gpio_init+0x128>)
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	6053      	str	r3, [r2, #4]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005f2:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <lcd_gpio_init+0x128>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	623b      	str	r3, [r7, #32]
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fe:	623b      	str	r3, [r7, #32]
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000606:	623b      	str	r3, [r7, #32]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <lcd_gpio_init+0x128>)
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	6053      	str	r3, [r2, #4]

	//__HAL_AFIO_REMAP_SWJ_DISABLE();

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b33      	ldr	r3, [pc, #204]	; (80006dc <lcd_gpio_init+0x124>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a32      	ldr	r2, [pc, #200]	; (80006dc <lcd_gpio_init+0x124>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b30      	ldr	r3, [pc, #192]	; (80006dc <lcd_gpio_init+0x124>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <lcd_gpio_init+0x124>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a2c      	ldr	r2, [pc, #176]	; (80006dc <lcd_gpio_init+0x124>)
 800062c:	f043 0308 	orr.w	r3, r3, #8
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <lcd_gpio_init+0x124>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIOx = {0};
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000652:	4824      	ldr	r0, [pc, #144]	; (80006e4 <lcd_gpio_init+0x12c>)
 8000654:	f001 ffa9 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	4821      	ldr	r0, [pc, #132]	; (80006e4 <lcd_gpio_init+0x12c>)
 8000660:	f001 ffa3 	bl	80025aa <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_RS | LCD_PIN_EN;
 8000664:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000668:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 800066e:	2302      	movs	r3, #2
 8000670:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2302      	movs	r3, #2
 8000674:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_CTRL, &GPIOx);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	4819      	ldr	r0, [pc, #100]	; (80006e4 <lcd_gpio_init+0x12c>)
 800067e:	f001 fdf9 	bl	8002274 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	21f8      	movs	r1, #248	; 0xf8
 8000686:	4817      	ldr	r0, [pc, #92]	; (80006e4 <lcd_gpio_init+0x12c>)
 8000688:	f001 ff8f 	bl	80025aa <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D0 | LCD_PIN_D1 | LCD_PIN_D2 | LCD_PIN_D3 | LCD_PIN_D4;
 800068c:	23f8      	movs	r3, #248	; 0xf8
 800068e:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 8000694:	2302      	movs	r3, #2
 8000696:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2302      	movs	r3, #2
 800069a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D0_4, &GPIOx);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	4810      	ldr	r0, [pc, #64]	; (80006e4 <lcd_gpio_init+0x12c>)
 80006a4:	f001 fde6 	bl	8002274 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <lcd_gpio_init+0x130>)
 80006b0:	f001 ff7b 	bl	80025aa <HAL_GPIO_WritePin>

	GPIOx.Pin = LCD_PIN_D5 | LCD_PIN_D6 | LCD_PIN_D7;
 80006b4:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80006b8:	613b      	str	r3, [r7, #16]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
	GPIOx.Pull = GPIO_PULLDOWN;
 80006be:	2302      	movs	r3, #2
 80006c0:	61bb      	str	r3, [r7, #24]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(LCD_PORT_D5_7, &GPIOx);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	4806      	ldr	r0, [pc, #24]	; (80006e8 <lcd_gpio_init+0x130>)
 80006ce:	f001 fdd1 	bl	8002274 <HAL_GPIO_Init>

}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000
 80006e4:	40010c00 	.word	0x40010c00
 80006e8:	40010800 	.word	0x40010800

080006ec <lcd_init>:

void lcd_init(uint8_t fourbitmode)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d003      	beq.n	8000704 <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <lcd_init+0x28>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 8000702:	e002      	b.n	800070a <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <lcd_init+0x28>)
 8000706:	2210      	movs	r2, #16
 8000708:	701a      	strb	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	200000c5 	.word	0x200000c5

08000718 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	460b      	mov	r3, r1
 8000724:	71bb      	strb	r3, [r7, #6]
 8000726:	4613      	mov	r3, r2
 8000728:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d906      	bls.n	800073e <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 8000730:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <lcd_begin+0xdc>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <lcd_begin+0xdc>)
 800073c:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 800073e:	4a2e      	ldr	r2, [pc, #184]	; (80007f8 <lcd_begin+0xe0>)
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 8000744:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <lcd_begin+0xe4>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 800074a:	797b      	ldrb	r3, [r7, #5]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d009      	beq.n	8000764 <lcd_begin+0x4c>
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d106      	bne.n	8000764 <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 8000756:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <lcd_begin+0xdc>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <lcd_begin+0xdc>)
 8000762:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000768:	f001 fc52 	bl	8002010 <HAL_Delay>
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS | LCD_PIN_EN, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000772:	4823      	ldr	r0, [pc, #140]	; (8000800 <lcd_begin+0xe8>)
 8000774:	f001 ff19 	bl	80025aa <HAL_GPIO_WritePin>
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <lcd_begin+0xdc>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f902 	bl	800098c <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 8000788:	200a      	movs	r0, #10
 800078a:	f001 fc41 	bl	8002010 <HAL_Delay>

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <lcd_begin+0xdc>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	f043 0320 	orr.w	r3, r3, #32
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f8f7 	bl	800098c <lcd_send_cmd>
	    HAL_Delay(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f001 fc36 	bl	8002010 <HAL_Delay>

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <lcd_begin+0xdc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f8ec 	bl	800098c <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <lcd_begin+0xdc>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0320 	orr.w	r3, r3, #32
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f8e4 	bl	800098c <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <lcd_begin+0xec>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 f828 	bl	8000820 <lcd_display>

	// clear it off
	lcd_clear();
 80007d0:	f000 f8f2 	bl	80009b8 <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <lcd_begin+0xf0>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <lcd_begin+0xf0>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f8d1 	bl	800098c <lcd_send_cmd>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000c5 	.word	0x200000c5
 80007f8:	200000c8 	.word	0x200000c8
 80007fc:	200000c9 	.word	0x200000c9
 8000800:	40010c00 	.word	0x40010c00
 8000804:	200000c6 	.word	0x200000c6
 8000808:	200000c7 	.word	0x200000c7

0800080c <lcd_home>:

void lcd_home(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
 8000810:	2002      	movs	r0, #2
 8000812:	f000 f8bb 	bl	800098c <lcd_send_cmd>
	HAL_Delay(2); // this command takes a long time!
 8000816:	2002      	movs	r0, #2
 8000818:	f001 fbfa 	bl	8002010 <HAL_Delay>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <lcd_display>:

void lcd_display(uint8_t state)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	if(state)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00f      	beq.n	8000850 <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <lcd_display+0x58>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <lcd_display+0x58>)
 800083c:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <lcd_display+0x58>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f89f 	bl	800098c <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 800084e:	e00e      	b.n	800086e <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <lcd_display+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	f023 0304 	bic.w	r3, r3, #4
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <lcd_display+0x58>)
 800085c:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <lcd_display+0x58>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f88f 	bl	800098c <lcd_send_cmd>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000c6 	.word	0x200000c6

0800087c <lcd_enable>:

void lcd_enable(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <lcd_enable+0x40>)
 8000888:	f001 fe8f 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f001 fbbf 	bl	8002010 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <lcd_enable+0x40>)
 800089a:	f001 fe86 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_Delay(1); // enable pulse must be >450ns
 800089e:	2001      	movs	r0, #1
 80008a0:	f001 fbb6 	bl	8002010 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_EN, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <lcd_enable+0x40>)
 80008ac:	f001 fe7d 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_Delay(1); // commands need > 37us to settle
 80008b0:	2001      	movs	r0, #1
 80008b2:	f001 fbad 	bl	8002010 <HAL_Delay>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40010c00 	.word	0x40010c00

080008c0 <write_8bit>:

void write_8bit(uint8_t value)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D7, (value >> 7) & 0x01);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	09db      	lsrs	r3, r3, #7
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d6:	482b      	ldr	r0, [pc, #172]	; (8000984 <write_8bit+0xc4>)
 80008d8:	f001 fe67 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D6, (value >> 6) & 0x01);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ee:	4825      	ldr	r0, [pc, #148]	; (8000984 <write_8bit+0xc4>)
 80008f0:	f001 fe5b 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D5_7, LCD_PIN_D5, (value >> 5) & 0x01);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000906:	481f      	ldr	r0, [pc, #124]	; (8000984 <write_8bit+0xc4>)
 8000908:	f001 fe4f 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D4, (value >> 4) & 0x01);
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	461a      	mov	r2, r3
 800091a:	2108      	movs	r1, #8
 800091c:	481a      	ldr	r0, [pc, #104]	; (8000988 <write_8bit+0xc8>)
 800091e:	f001 fe44 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D3, (value >> 3) & 0x01);
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	2110      	movs	r1, #16
 8000932:	4815      	ldr	r0, [pc, #84]	; (8000988 <write_8bit+0xc8>)
 8000934:	f001 fe39 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D2, (value >> 2) & 0x01);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	b2db      	uxtb	r3, r3
 8000944:	461a      	mov	r2, r3
 8000946:	2120      	movs	r1, #32
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <write_8bit+0xc8>)
 800094a:	f001 fe2e 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D1, (value >> 1) & 0x01);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	480a      	ldr	r0, [pc, #40]	; (8000988 <write_8bit+0xc8>)
 8000960:	f001 fe23 	bl	80025aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_D0_4, LCD_PIN_D0, (value >> 0) & 0x01);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <write_8bit+0xc8>)
 8000972:	f001 fe1a 	bl	80025aa <HAL_GPIO_WritePin>

	lcd_enable();
 8000976:	f7ff ff81 	bl	800087c <lcd_enable>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40010800 	.word	0x40010800
 8000988:	40010c00 	.word	0x40010c00

0800098c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <lcd_send_cmd+0x28>)
 800099e:	f001 fe04 	bl	80025aa <HAL_GPIO_WritePin>
	write_8bit(cmd);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff8b 	bl	80008c0 <write_8bit>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40010c00 	.word	0x40010c00

080009b8 <lcd_clear>:

void lcd_clear(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff ffe5 	bl	800098c <lcd_send_cmd>
	HAL_Delay(2);
 80009c2:	2002      	movs	r0, #2
 80009c4:	f001 fb24 	bl	8002010 <HAL_Delay>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CTRL, LCD_PIN_RS, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <lcd_send_data+0x28>)
 80009de:	f001 fde4 	bl	80025aa <HAL_GPIO_WritePin>
	write_8bit(data);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff6b 	bl	80008c0 <write_8bit>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ffe1 	bl	80009cc <lcd_send_data>
		str++;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f3      	bne.n	8000a00 <lcd_print+0x8>
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <lcd_set_cursor+0x58>)
 8000a36:	f107 0408 	add.w	r4, r7, #8
 8000a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _numlines) {
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <lcd_set_cursor+0x5c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	79ba      	ldrb	r2, [r7, #6]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d903      	bls.n	8000a52 <lcd_set_cursor+0x2e>
		row = _numlines - 1; // we count rows starting w/0
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <lcd_set_cursor+0x5c>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	71bb      	strb	r3, [r7, #6]
		}
	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	3318      	adds	r3, #24
 8000a58:	443b      	add	r3, r7
 8000a5a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	4413      	add	r3, r2
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff8d 	bl	800098c <lcd_send_cmd>
}
 8000a72:	bf00      	nop
 8000a74:	371c      	adds	r7, #28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd90      	pop	{r4, r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	08004ea4 	.word	0x08004ea4
 8000a80:	200000c8 	.word	0x200000c8

08000a84 <lcd_update>:
void mode_level_page(void);
void limit_sw_err_page(void);
void complete_page(void);

void lcd_update(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	switch(cur_page){
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <lcd_update+0x5c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b07      	cmp	r3, #7
 8000a8e:	d825      	bhi.n	8000adc <lcd_update+0x58>
 8000a90:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <lcd_update+0x14>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000ab9 	.word	0x08000ab9
 8000a9c:	08000abf 	.word	0x08000abf
 8000aa0:	08000abf 	.word	0x08000abf
 8000aa4:	08000abf 	.word	0x08000abf
 8000aa8:	08000ac5 	.word	0x08000ac5
 8000aac:	08000acb 	.word	0x08000acb
 8000ab0:	08000ad1 	.word	0x08000ad1
 8000ab4:	08000ad7 	.word	0x08000ad7
	case INIT_PAGE:
		welcome_page();
 8000ab8:	f000 f814 	bl	8000ae4 <welcome_page>
		break;
 8000abc:	e00e      	b.n	8000adc <lcd_update+0x58>
	case LOW_LEVEL_PAGE:
	case MED_LEVEL_PAGE:
	case HIGH_LEVEL_PAGE:
		mode_level_page();
 8000abe:	f000 f8eb 	bl	8000c98 <mode_level_page>
		break;
 8000ac2:	e00b      	b.n	8000adc <lcd_update+0x58>
	case COMPLETE_PAGE:
		complete_page();
 8000ac4:	f000 f8be 	bl	8000c44 <complete_page>
		break;
 8000ac8:	e008      	b.n	8000adc <lcd_update+0x58>
	case DOOR_OPEN_PAGE:
		door_open_page();
 8000aca:	f000 f83d 	bl	8000b48 <door_open_page>
		break;
 8000ace:	e005      	b.n	8000adc <lcd_update+0x58>
	case LIMIT_SW_ERR_PAGE:
		limit_sw_err_page();
 8000ad0:	f000 f88e 	bl	8000bf0 <limit_sw_err_page>
		break;
 8000ad4:	e002      	b.n	8000adc <lcd_update+0x58>
	case HEATER_COIL_PAGE:
		heater_coil_page();
 8000ad6:	f000 f861 	bl	8000b9c <heater_coil_page>
		break;
 8000ada:	bf00      	nop
	}

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000135 	.word	0x20000135

08000ae4 <welcome_page>:

void welcome_page(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <welcome_page+0x50>)
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <welcome_page+0x54>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d006      	beq.n	8000b02 <welcome_page+0x1e>
	{
		lcd_clear();
 8000af4:	f7ff ff60 	bl	80009b8 <lcd_clear>
		last_page = cur_page;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <welcome_page+0x54>)
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <welcome_page+0x50>)
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e001      	b.n	8000b06 <welcome_page+0x22>
	}
	else{
		lcd_home();
 8000b02:	f7ff fe83 	bl	800080c <lcd_home>
	}
	
	lcd_set_cursor(6, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2006      	movs	r0, #6
 8000b0a:	f7ff ff8b 	bl	8000a24 <lcd_set_cursor>
	lcd_print("WELCOME!");
 8000b0e:	480b      	ldr	r0, [pc, #44]	; (8000b3c <welcome_page+0x58>)
 8000b10:	f7ff ff72 	bl	80009f8 <lcd_print>
	lcd_set_cursor(3,2);
 8000b14:	2102      	movs	r1, #2
 8000b16:	2003      	movs	r0, #3
 8000b18:	f7ff ff84 	bl	8000a24 <lcd_set_cursor>
	lcd_print("Select a mode");
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <welcome_page+0x5c>)
 8000b1e:	f7ff ff6b 	bl	80009f8 <lcd_print>
	lcd_set_cursor(3,3);
 8000b22:	2103      	movs	r1, #3
 8000b24:	2003      	movs	r0, #3
 8000b26:	f7ff ff7d 	bl	8000a24 <lcd_set_cursor>
	lcd_print("to start dryer");
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <welcome_page+0x60>)
 8000b2c:	f7ff ff64 	bl	80009f8 <lcd_print>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000136 	.word	0x20000136
 8000b38:	20000135 	.word	0x20000135
 8000b3c:	08004eb4 	.word	0x08004eb4
 8000b40:	08004ec0 	.word	0x08004ec0
 8000b44:	08004ed0 	.word	0x08004ed0

08000b48 <door_open_page>:

void door_open_page(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <door_open_page+0x44>)
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <door_open_page+0x48>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d006      	beq.n	8000b66 <door_open_page+0x1e>
	{
		lcd_clear();
 8000b58:	f7ff ff2e 	bl	80009b8 <lcd_clear>
		last_page = cur_page;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <door_open_page+0x48>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <door_open_page+0x44>)
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e001      	b.n	8000b6a <door_open_page+0x22>
	}
	else{
		lcd_home();
 8000b66:	f7ff fe51 	bl	800080c <lcd_home>
	}

	lcd_set_cursor(6, 1);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2006      	movs	r0, #6
 8000b6e:	f7ff ff59 	bl	8000a24 <lcd_set_cursor>
	lcd_print("DOOR");
 8000b72:	4808      	ldr	r0, [pc, #32]	; (8000b94 <door_open_page+0x4c>)
 8000b74:	f7ff ff40 	bl	80009f8 <lcd_print>
	lcd_set_cursor(6,2);
 8000b78:	2102      	movs	r1, #2
 8000b7a:	2006      	movs	r0, #6
 8000b7c:	f7ff ff52 	bl	8000a24 <lcd_set_cursor>
	lcd_print("OPEN");
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <door_open_page+0x50>)
 8000b82:	f7ff ff39 	bl	80009f8 <lcd_print>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000136 	.word	0x20000136
 8000b90:	20000135 	.word	0x20000135
 8000b94:	08004ee0 	.word	0x08004ee0
 8000b98:	08004ee8 	.word	0x08004ee8

08000b9c <heater_coil_page>:

void heater_coil_page(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <heater_coil_page+0x44>)
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <heater_coil_page+0x48>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d006      	beq.n	8000bba <heater_coil_page+0x1e>
	{
		lcd_clear();
 8000bac:	f7ff ff04 	bl	80009b8 <lcd_clear>
		last_page = cur_page;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <heater_coil_page+0x48>)
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <heater_coil_page+0x44>)
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	e001      	b.n	8000bbe <heater_coil_page+0x22>
	}
	else{
		lcd_home();
 8000bba:	f7ff fe27 	bl	800080c <lcd_home>
	}

	lcd_set_cursor(5, 1);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	2005      	movs	r0, #5
 8000bc2:	f7ff ff2f 	bl	8000a24 <lcd_set_cursor>
	lcd_print("HEATER");
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <heater_coil_page+0x4c>)
 8000bc8:	f7ff ff16 	bl	80009f8 <lcd_print>
	lcd_set_cursor(5,2);
 8000bcc:	2102      	movs	r1, #2
 8000bce:	2005      	movs	r0, #5
 8000bd0:	f7ff ff28 	bl	8000a24 <lcd_set_cursor>
	lcd_print("ERROR");
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <heater_coil_page+0x50>)
 8000bd6:	f7ff ff0f 	bl	80009f8 <lcd_print>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000136 	.word	0x20000136
 8000be4:	20000135 	.word	0x20000135
 8000be8:	08004ef0 	.word	0x08004ef0
 8000bec:	08004ef8 	.word	0x08004ef8

08000bf0 <limit_sw_err_page>:

void limit_sw_err_page(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <limit_sw_err_page+0x44>)
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <limit_sw_err_page+0x48>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d006      	beq.n	8000c0e <limit_sw_err_page+0x1e>
	{
		lcd_clear();
 8000c00:	f7ff feda 	bl	80009b8 <lcd_clear>
		last_page = cur_page;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <limit_sw_err_page+0x48>)
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <limit_sw_err_page+0x44>)
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	e001      	b.n	8000c12 <limit_sw_err_page+0x22>
	}
	else{
		lcd_home();
 8000c0e:	f7ff fdfd 	bl	800080c <lcd_home>
	}

	lcd_set_cursor(5, 0);
 8000c12:	2100      	movs	r1, #0
 8000c14:	2005      	movs	r0, #5
 8000c16:	f7ff ff05 	bl	8000a24 <lcd_set_cursor>
	lcd_print("Limit");
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <limit_sw_err_page+0x4c>)
 8000c1c:	f7ff feec 	bl	80009f8 <lcd_print>
	lcd_set_cursor(2, 2);
 8000c20:	2102      	movs	r1, #2
 8000c22:	2002      	movs	r0, #2
 8000c24:	f7ff fefe 	bl	8000a24 <lcd_set_cursor>
	lcd_print("Err");
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <limit_sw_err_page+0x50>)
 8000c2a:	f7ff fee5 	bl	80009f8 <lcd_print>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000136 	.word	0x20000136
 8000c38:	20000135 	.word	0x20000135
 8000c3c:	08004f00 	.word	0x08004f00
 8000c40:	08004f08 	.word	0x08004f08

08000c44 <complete_page>:

void complete_page(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	if(last_page!=cur_page)
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <complete_page+0x44>)
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <complete_page+0x48>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d006      	beq.n	8000c62 <complete_page+0x1e>
	{
		lcd_clear();
 8000c54:	f7ff feb0 	bl	80009b8 <lcd_clear>
		last_page = cur_page;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <complete_page+0x48>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <complete_page+0x44>)
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e001      	b.n	8000c66 <complete_page+0x22>
	}
	else{
		lcd_home();
 8000c62:	f7ff fdd3 	bl	800080c <lcd_home>
	}

	lcd_set_cursor(4, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2004      	movs	r0, #4
 8000c6a:	f7ff fedb 	bl	8000a24 <lcd_set_cursor>
	lcd_print("PROCESS");
 8000c6e:	4808      	ldr	r0, [pc, #32]	; (8000c90 <complete_page+0x4c>)
 8000c70:	f7ff fec2 	bl	80009f8 <lcd_print>
	lcd_set_cursor(0, 2);
 8000c74:	2102      	movs	r1, #2
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fed4 	bl	8000a24 <lcd_set_cursor>
	lcd_print("COMPLETE");
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <complete_page+0x50>)
 8000c7e:	f7ff febb 	bl	80009f8 <lcd_print>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000136 	.word	0x20000136
 8000c8c:	20000135 	.word	0x20000135
 8000c90:	08004f0c 	.word	0x08004f0c
 8000c94:	08004f14 	.word	0x08004f14

08000c98 <mode_level_page>:

void mode_level_page(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	static uint16_t a = 0,b = 0;
	if(last_page!=cur_page)
 8000c9c:	4b4c      	ldr	r3, [pc, #304]	; (8000dd0 <mode_level_page+0x138>)
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	4b4c      	ldr	r3, [pc, #304]	; (8000dd4 <mode_level_page+0x13c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d006      	beq.n	8000cb6 <mode_level_page+0x1e>
	{
		lcd_clear();
 8000ca8:	f7ff fe86 	bl	80009b8 <lcd_clear>
		last_page = cur_page;
 8000cac:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <mode_level_page+0x13c>)
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <mode_level_page+0x138>)
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	e001      	b.n	8000cba <mode_level_page+0x22>
	}
	else lcd_home();
 8000cb6:	f7ff fda9 	bl	800080c <lcd_home>
	a = dryer.heatTime % 60;
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <mode_level_page+0x140>)
 8000cbc:	885a      	ldrh	r2, [r3, #2]
 8000cbe:	4b47      	ldr	r3, [pc, #284]	; (8000ddc <mode_level_page+0x144>)
 8000cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8000cc4:	0959      	lsrs	r1, r3, #5
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	1a5b      	subs	r3, r3, r1
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <mode_level_page+0x148>)
 8000cd4:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 8000cd6:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <mode_level_page+0x140>)
 8000cd8:	885b      	ldrh	r3, [r3, #2]
 8000cda:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <mode_level_page+0x144>)
 8000cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce0:	095b      	lsrs	r3, r3, #5
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <mode_level_page+0x14c>)
 8000ce6:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"h=%02d:%02d",b,a);
 8000ce8:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <mode_level_page+0x14c>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <mode_level_page+0x148>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	493d      	ldr	r1, [pc, #244]	; (8000de8 <mode_level_page+0x150>)
 8000cf4:	483d      	ldr	r0, [pc, #244]	; (8000dec <mode_level_page+0x154>)
 8000cf6:	f002 ff4b 	bl	8003b90 <siprintf>
	lcd_set_cursor(0, 0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fe91 	bl	8000a24 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d02:	483a      	ldr	r0, [pc, #232]	; (8000dec <mode_level_page+0x154>)
 8000d04:	f7ff fe78 	bl	80009f8 <lcd_print>

	a = dryer.coolTime % 60;
 8000d08:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <mode_level_page+0x140>)
 8000d0a:	889a      	ldrh	r2, [r3, #4]
 8000d0c:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <mode_level_page+0x144>)
 8000d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d12:	0959      	lsrs	r1, r3, #5
 8000d14:	460b      	mov	r3, r1
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <mode_level_page+0x148>)
 8000d22:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <mode_level_page+0x140>)
 8000d26:	889b      	ldrh	r3, [r3, #4]
 8000d28:	4a2c      	ldr	r2, [pc, #176]	; (8000ddc <mode_level_page+0x144>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <mode_level_page+0x14c>)
 8000d34:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"c=%02d:%02d",b,a);
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <mode_level_page+0x14c>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <mode_level_page+0x148>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	492b      	ldr	r1, [pc, #172]	; (8000df0 <mode_level_page+0x158>)
 8000d42:	482a      	ldr	r0, [pc, #168]	; (8000dec <mode_level_page+0x154>)
 8000d44:	f002 ff24 	bl	8003b90 <siprintf>
	lcd_set_cursor(13, 0);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	200d      	movs	r0, #13
 8000d4c:	f7ff fe6a 	bl	8000a24 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d50:	4826      	ldr	r0, [pc, #152]	; (8000dec <mode_level_page+0x154>)
 8000d52:	f7ff fe51 	bl	80009f8 <lcd_print>

	if(dryer.mode == LOW_LEVEL)sprintf(lcd_buf,"LEVEL: LOW");
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <mode_level_page+0x140>)
 8000d58:	785b      	ldrb	r3, [r3, #1]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d104      	bne.n	8000d68 <mode_level_page+0xd0>
 8000d5e:	4925      	ldr	r1, [pc, #148]	; (8000df4 <mode_level_page+0x15c>)
 8000d60:	4822      	ldr	r0, [pc, #136]	; (8000dec <mode_level_page+0x154>)
 8000d62:	f002 ff15 	bl	8003b90 <siprintf>
 8000d66:	e010      	b.n	8000d8a <mode_level_page+0xf2>
	else if(dryer.mode == MED_LEVEL)sprintf(lcd_buf,"LEVEL: MEDIUM");
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <mode_level_page+0x140>)
 8000d6a:	785b      	ldrb	r3, [r3, #1]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d104      	bne.n	8000d7a <mode_level_page+0xe2>
 8000d70:	4921      	ldr	r1, [pc, #132]	; (8000df8 <mode_level_page+0x160>)
 8000d72:	481e      	ldr	r0, [pc, #120]	; (8000dec <mode_level_page+0x154>)
 8000d74:	f002 ff0c 	bl	8003b90 <siprintf>
 8000d78:	e007      	b.n	8000d8a <mode_level_page+0xf2>
	else if(dryer.mode == HIGH_LEVEL)sprintf(lcd_buf,"LEVEL: HIGH");
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <mode_level_page+0x140>)
 8000d7c:	785b      	ldrb	r3, [r3, #1]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d103      	bne.n	8000d8a <mode_level_page+0xf2>
 8000d82:	491e      	ldr	r1, [pc, #120]	; (8000dfc <mode_level_page+0x164>)
 8000d84:	4819      	ldr	r0, [pc, #100]	; (8000dec <mode_level_page+0x154>)
 8000d86:	f002 ff03 	bl	8003b90 <siprintf>
	else;

	lcd_set_cursor(5, 1);
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	2005      	movs	r0, #5
 8000d8e:	f7ff fe49 	bl	8000a24 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <mode_level_page+0x154>)
 8000d94:	f7ff fe30 	bl	80009f8 <lcd_print>

	sprintf(lcd_buf,"Set:%02dC",dryer.setTemp);
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <mode_level_page+0x140>)
 8000d9a:	799b      	ldrb	r3, [r3, #6]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4918      	ldr	r1, [pc, #96]	; (8000e00 <mode_level_page+0x168>)
 8000da0:	4812      	ldr	r0, [pc, #72]	; (8000dec <mode_level_page+0x154>)
 8000da2:	f002 fef5 	bl	8003b90 <siprintf>
	lcd_set_cursor(0, 3);
 8000da6:	2103      	movs	r1, #3
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fe3b 	bl	8000a24 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000dae:	480f      	ldr	r0, [pc, #60]	; (8000dec <mode_level_page+0x154>)
 8000db0:	f7ff fe22 	bl	80009f8 <lcd_print>

	sprintf(lcd_buf,"Cur:ERR");
 8000db4:	4913      	ldr	r1, [pc, #76]	; (8000e04 <mode_level_page+0x16c>)
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <mode_level_page+0x154>)
 8000db8:	f002 feea 	bl	8003b90 <siprintf>
	lcd_set_cursor(13, 3);
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	200d      	movs	r0, #13
 8000dc0:	f7ff fe30 	bl	8000a24 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <mode_level_page+0x154>)
 8000dc6:	f7ff fe17 	bl	80009f8 <lcd_print>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000136 	.word	0x20000136
 8000dd4:	20000135 	.word	0x20000135
 8000dd8:	20000120 	.word	0x20000120
 8000ddc:	88888889 	.word	0x88888889
 8000de0:	2000011c 	.word	0x2000011c
 8000de4:	2000011e 	.word	0x2000011e
 8000de8:	08004f20 	.word	0x08004f20
 8000dec:	200000cc 	.word	0x200000cc
 8000df0:	08004f2c 	.word	0x08004f2c
 8000df4:	08004f38 	.word	0x08004f38
 8000df8:	08004f44 	.word	0x08004f44
 8000dfc:	08004f54 	.word	0x08004f54
 8000e00:	08004f60 	.word	0x08004f60
 8000e04:	08004f6c 	.word	0x08004f6c

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4906      	ldr	r1, [pc, #24]	; (8000e3c <__NVIC_EnableIRQ+0x34>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db12      	blt.n	8000e78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	490a      	ldr	r1, [pc, #40]	; (8000e84 <__NVIC_DisableIRQ+0x44>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	3320      	adds	r3, #32
 8000e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6c:	f3bf 8f4f 	dsb	sy
}
 8000e70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e72:	f3bf 8f6f 	isb	sy
}
 8000e76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 8000e90:	1d39      	adds	r1, r7, #4
 8000e92:	230a      	movs	r3, #10
 8000e94:	2201      	movs	r2, #1
 8000e96:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <__io_putchar+0x20>)
 8000e98:	f002 fc4f 	bl	800373a <HAL_UART_Transmit>
	return ch;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000188 	.word	0x20000188

08000eac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eb0:	f001 f84c 	bl	8001f4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eb4:	f000 fce2 	bl	800187c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_USART1_UART_Init();
 8000eb8:	f000 ffac 	bl	8001e14 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	input_init();
 8000ebc:	f7ff f946 	bl	800014c <input_init>
	output_init();
 8000ec0:	f000 fdea 	bl	8001a98 <output_init>
	keypad_init();
 8000ec4:	f7ff fa30 	bl	8000328 <keypad_init>
	timer_init();
 8000ec8:	f000 ff42 	bl	8001d50 <timer_init>

	lcd_gpio_init();
 8000ecc:	f7ff fb74 	bl	80005b8 <lcd_gpio_init>
	lcd_init(0);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fc0b 	bl	80006ec <lcd_init>
	lcd_begin(16, 4, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2104      	movs	r1, #4
 8000eda:	2010      	movs	r0, #16
 8000edc:	f7ff fc1c 	bl	8000718 <lcd_begin>

	//HAL_UART_Transmit(&huart1, (uint8_t*)"HELLO\r\n", sizeof("HELLO\r\n"), 10);
	printf("Hello\r\n");
 8000ee0:	48a4      	ldr	r0, [pc, #656]	; (8001174 <main+0x2c8>)
 8000ee2:	f002 fe4d 	bl	8003b80 <puts>
	dryer.state = INIT;
 8000ee6:	4ba4      	ldr	r3, [pc, #656]	; (8001178 <main+0x2cc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8000eec:	4ba2      	ldr	r3, [pc, #648]	; (8001178 <main+0x2cc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	705a      	strb	r2, [r3, #1]
	dryer.setTemp = 40U;
 8000ef2:	4ba1      	ldr	r3, [pc, #644]	; (8001178 <main+0x2cc>)
 8000ef4:	2228      	movs	r2, #40	; 0x28
 8000ef6:	719a      	strb	r2, [r3, #6]

	if (HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW) == HIGH) {
 8000ef8:	2101      	movs	r1, #1
 8000efa:	48a0      	ldr	r0, [pc, #640]	; (800117c <main+0x2d0>)
 8000efc:	f001 fb3e 	bl	800257c <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d108      	bne.n	8000f18 <main+0x6c>
		door_open_flag = 1U;
 8000f06:	4b9e      	ldr	r3, [pc, #632]	; (8001180 <main+0x2d4>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8000f0c:	4b9d      	ldr	r3, [pc, #628]	; (8001184 <main+0x2d8>)
 8000f0e:	2205      	movs	r2, #5
 8000f10:	701a      	strb	r2, [r3, #0]
		lcd_update_flag = 1U;
 8000f12:	4b9d      	ldr	r3, [pc, #628]	; (8001188 <main+0x2dc>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
	}

	lcd_update();
 8000f18:	f7ff fdb4 	bl	8000a84 <lcd_update>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		if (is_door_open() && (!door_open_flag)) {
 8000f1c:	f7ff f984 	bl	8000228 <is_door_open>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d009      	beq.n	8000f3a <main+0x8e>
 8000f26:	4b96      	ldr	r3, [pc, #600]	; (8001180 <main+0x2d4>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d105      	bne.n	8000f3a <main+0x8e>
			door_open_evt = 1U;
 8000f2e:	4b97      	ldr	r3, [pc, #604]	; (800118c <main+0x2e0>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
			door_open_flag = 1U;
 8000f34:	4b92      	ldr	r3, [pc, #584]	; (8001180 <main+0x2d4>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
		}

		if (door_open_evt) {
 8000f3a:	4b94      	ldr	r3, [pc, #592]	; (800118c <main+0x2e0>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 808f 	beq.w	8001062 <main+0x1b6>
			static volatile uint8_t temp_pin_state = 0U;

			temp_pin_state = HAL_GPIO_ReadPin(INPUT_PORT, DOOR_SW);
 8000f44:	2101      	movs	r1, #1
 8000f46:	488d      	ldr	r0, [pc, #564]	; (800117c <main+0x2d0>)
 8000f48:	f001 fb18 	bl	800257c <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b8f      	ldr	r3, [pc, #572]	; (8001190 <main+0x2e4>)
 8000f52:	701a      	strb	r2, [r3, #0]
			//printf("Pin: %d\r\n",temp_pin_state);

			if (temp_pin_state == HIGH) {
 8000f54:	4b8e      	ldr	r3, [pc, #568]	; (8001190 <main+0x2e4>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d13d      	bne.n	8000fda <main+0x12e>

				door_open_flag = 1U;
 8000f5e:	4b88      	ldr	r3, [pc, #544]	; (8001180 <main+0x2d4>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8000f64:	4b8b      	ldr	r3, [pc, #556]	; (8001194 <main+0x2e8>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
				cur_page = DOOR_OPEN_PAGE;
 8000f6a:	4b86      	ldr	r3, [pc, #536]	; (8001184 <main+0x2d8>)
 8000f6c:	2205      	movs	r2, #5
 8000f6e:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8000f70:	4b85      	ldr	r3, [pc, #532]	; (8001188 <main+0x2dc>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8000f76:	4b80      	ldr	r3, [pc, #512]	; (8001178 <main+0x2cc>)
 8000f78:	2203      	movs	r2, #3
 8000f7a:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f82:	4885      	ldr	r0, [pc, #532]	; (8001198 <main+0x2ec>)
 8000f84:	f001 fb11 	bl	80025aa <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	487b      	ldr	r0, [pc, #492]	; (800117c <main+0x2d0>)
 8000f90:	f001 fb0b 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9a:	4880      	ldr	r0, [pc, #512]	; (800119c <main+0x2f0>)
 8000f9c:	f001 fb05 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa6:	487d      	ldr	r0, [pc, #500]	; (800119c <main+0x2f0>)
 8000fa8:	f001 faff 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb2:	487a      	ldr	r0, [pc, #488]	; (800119c <main+0x2f0>)
 8000fb4:	f001 faf9 	bl	80025aa <HAL_GPIO_WritePin>

				if (dryer.state == COMPLETE) {
 8000fb8:	4b6f      	ldr	r3, [pc, #444]	; (8001178 <main+0x2cc>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d14d      	bne.n	800105c <main+0x1b0>
					//beep off
					timer_stop_evt = 1U;
 8000fc0:	4b74      	ldr	r3, [pc, #464]	; (8001194 <main+0x2e8>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
					dryer.beepTime = 0U;
 8000fc6:	4b6c      	ldr	r3, [pc, #432]	; (8001178 <main+0x2cc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	71da      	strb	r2, [r3, #7]
					dryer.state = INIT;
 8000fcc:	4b6a      	ldr	r3, [pc, #424]	; (8001178 <main+0x2cc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8000fd2:	4b69      	ldr	r3, [pc, #420]	; (8001178 <main+0x2cc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	705a      	strb	r2, [r3, #1]
 8000fd8:	e040      	b.n	800105c <main+0x1b0>
				}

				//stop

			} else {
				if (!limit_timeout_flag) {
 8000fda:	4b71      	ldr	r3, [pc, #452]	; (80011a0 <main+0x2f4>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d133      	bne.n	800104a <main+0x19e>
					switch (dryer.mode) {
 8000fe2:	4b65      	ldr	r3, [pc, #404]	; (8001178 <main+0x2cc>)
 8000fe4:	785b      	ldrb	r3, [r3, #1]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d832      	bhi.n	8001050 <main+0x1a4>
 8000fea:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <main+0x144>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	0800100f 	.word	0x0800100f
 8000ff8:	08001023 	.word	0x08001023
 8000ffc:	08001037 	.word	0x08001037
					case NO_MODE:
						cur_page = INIT_PAGE;
 8001000:	4b60      	ldr	r3, [pc, #384]	; (8001184 <main+0x2d8>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 8001006:	4b5c      	ldr	r3, [pc, #368]	; (8001178 <main+0x2cc>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
						break;
 800100c:	e020      	b.n	8001050 <main+0x1a4>
					case LOW_LEVEL:
						cur_page = LOW_LEVEL_PAGE;
 800100e:	4b5d      	ldr	r3, [pc, #372]	; (8001184 <main+0x2d8>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001014:	4b58      	ldr	r3, [pc, #352]	; (8001178 <main+0x2cc>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 800101a:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <main+0x2f8>)
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
						break;
 8001020:	e016      	b.n	8001050 <main+0x1a4>
					case MED_LEVEL:
						cur_page = MED_LEVEL_PAGE;
 8001022:	4b58      	ldr	r3, [pc, #352]	; (8001184 <main+0x2d8>)
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001028:	4b53      	ldr	r3, [pc, #332]	; (8001178 <main+0x2cc>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <main+0x2f8>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
						break;
 8001034:	e00c      	b.n	8001050 <main+0x1a4>
					case HIGH_LEVEL:
						cur_page = HIGH_LEVEL_PAGE;
 8001036:	4b53      	ldr	r3, [pc, #332]	; (8001184 <main+0x2d8>)
 8001038:	2203      	movs	r2, #3
 800103a:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 800103c:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <main+0x2cc>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001042:	4b58      	ldr	r3, [pc, #352]	; (80011a4 <main+0x2f8>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
						break;
 8001048:	e002      	b.n	8001050 <main+0x1a4>
					}
				} else
					cur_page = LIMIT_SW_ERR_PAGE;
 800104a:	4b4e      	ldr	r3, [pc, #312]	; (8001184 <main+0x2d8>)
 800104c:	2206      	movs	r2, #6
 800104e:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001050:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <main+0x2dc>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
				door_open_flag = 0U;
 8001056:	4b4a      	ldr	r3, [pc, #296]	; (8001180 <main+0x2d4>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
			}
			door_open_evt = 0U;
 800105c:	4b4b      	ldr	r3, [pc, #300]	; (800118c <main+0x2e0>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
		}

		/*************************************************************************************************************
		 *************************************************HERTER COIL CHECK*******************************************
		 *************************************************************************************************************/
		if (!door_open_flag && !limit_timeout_flag && dryer.state != COMPLETE) {
 8001062:	4b47      	ldr	r3, [pc, #284]	; (8001180 <main+0x2d4>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d16f      	bne.n	800114a <main+0x29e>
 800106a:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <main+0x2f4>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d16b      	bne.n	800114a <main+0x29e>
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <main+0x2cc>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d067      	beq.n	800114a <main+0x29e>

			if (is_coil_open()) {
 800107a:	f7ff f8fd 	bl	8000278 <is_coil_open>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d02d      	beq.n	80010e0 <main+0x234>

				coil_open_flag = 1U;
 8001084:	4b48      	ldr	r3, [pc, #288]	; (80011a8 <main+0x2fc>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <main+0x2e8>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
				cur_page = HEATER_COIL_PAGE;
 8001090:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <main+0x2d8>)
 8001092:	2207      	movs	r2, #7
 8001094:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 8001096:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <main+0x2dc>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <main+0x2cc>)
 800109e:	2203      	movs	r2, #3
 80010a0:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED, LOW);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a8:	483b      	ldr	r0, [pc, #236]	; (8001198 <main+0x2ec>)
 80010aa:	f001 fa7e 	bl	80025aa <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	4831      	ldr	r0, [pc, #196]	; (800117c <main+0x2d0>)
 80010b6:	f001 fa78 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c0:	4836      	ldr	r0, [pc, #216]	; (800119c <main+0x2f0>)
 80010c2:	f001 fa72 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010cc:	4833      	ldr	r0, [pc, #204]	; (800119c <main+0x2f0>)
 80010ce:	f001 fa6c 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	4830      	ldr	r0, [pc, #192]	; (800119c <main+0x2f0>)
 80010da:	f001 fa66 	bl	80025aa <HAL_GPIO_WritePin>
 80010de:	e034      	b.n	800114a <main+0x29e>

				//stop

			} else {
				switch (dryer.mode) {
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <main+0x2cc>)
 80010e2:	785b      	ldrb	r3, [r3, #1]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d827      	bhi.n	8001138 <main+0x28c>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <main+0x244>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001101 	.word	0x08001101
 80010f4:	0800110f 	.word	0x0800110f
 80010f8:	0800111d 	.word	0x0800111d
 80010fc:	0800112b 	.word	0x0800112b
				case NO_MODE:
					cur_page = INIT_PAGE;
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <main+0x2d8>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <main+0x2cc>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
					break;
 800110c:	e014      	b.n	8001138 <main+0x28c>
				case LOW_LEVEL:
					cur_page = LOW_LEVEL_PAGE;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <main+0x2d8>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <main+0x2cc>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
					break;
 800111a:	e00d      	b.n	8001138 <main+0x28c>
				case MED_LEVEL:
					cur_page = MED_LEVEL_PAGE;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <main+0x2d8>)
 800111e:	2202      	movs	r2, #2
 8001120:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <main+0x2cc>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
					break;
 8001128:	e006      	b.n	8001138 <main+0x28c>
				case HIGH_LEVEL:
					cur_page = HIGH_LEVEL_PAGE;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <main+0x2d8>)
 800112c:	2203      	movs	r2, #3
 800112e:	701a      	strb	r2, [r3, #0]
					dryer.state = START;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <main+0x2cc>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
					break;
 8001136:	bf00      	nop
				}
				timer_start_evt = 1U;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <main+0x2f8>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <main+0x2dc>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
				coil_open_flag = 0U;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <main+0x2fc>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
		}

		/**********************************************************************************************************
		 **************************************** LCD SCREEN UPDATE RUTINE ****************************************
		 **********************************************************************************************************/
		if (lcd_update_flag) {
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <main+0x2dc>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <main+0x2b0>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 8001152:	f7ff fc97 	bl	8000a84 <lcd_update>
			lcd_update_flag = 0U;
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <main+0x2dc>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* TIMER EVENT RUTINE ************************************************
		 ***************************************************************************************************************/
		if (timer_stop_evt) {
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <main+0x2e8>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d025      	beq.n	80011b0 <main+0x304>
			//printf("Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 8001164:	4811      	ldr	r0, [pc, #68]	; (80011ac <main+0x300>)
 8001166:	f001 ff15 	bl	8002f94 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <main+0x2e8>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e02c      	b.n	80011cc <main+0x320>
 8001172:	bf00      	nop
 8001174:	08004f74 	.word	0x08004f74
 8001178:	20000120 	.word	0x20000120
 800117c:	40010800 	.word	0x40010800
 8001180:	2000012a 	.word	0x2000012a
 8001184:	20000135 	.word	0x20000135
 8001188:	20000137 	.word	0x20000137
 800118c:	2000012b 	.word	0x2000012b
 8001190:	20000138 	.word	0x20000138
 8001194:	2000012d 	.word	0x2000012d
 8001198:	40011000 	.word	0x40011000
 800119c:	40010c00 	.word	0x40010c00
 80011a0:	20000130 	.word	0x20000130
 80011a4:	2000012e 	.word	0x2000012e
 80011a8:	2000012c 	.word	0x2000012c
 80011ac:	20000140 	.word	0x20000140

		} else if ((timer_start_evt) && (dryer.state == START)) {
 80011b0:	4b96      	ldr	r3, [pc, #600]	; (800140c <main+0x560>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <main+0x320>
 80011b8:	4b95      	ldr	r3, [pc, #596]	; (8001410 <main+0x564>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <main+0x320>
			HAL_TIM_Base_Start_IT(&htim4);
 80011c0:	4894      	ldr	r0, [pc, #592]	; (8001414 <main+0x568>)
 80011c2:	f001 fe95 	bl	8002ef0 <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 80011c6:	4b91      	ldr	r3, [pc, #580]	; (800140c <main+0x560>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]

		/***************************************************************************************************************
		 ********************************************* KEYBOARD SCANNING ***********************************************
		 ********************************** INCREMENT DECREMENT OF TIMER AND MODE SET **********************************
		 ***************************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 80011cc:	4b92      	ldr	r3, [pc, #584]	; (8001418 <main+0x56c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f040 81a3 	bne.w	800151c <main+0x670>
 80011d6:	4b91      	ldr	r3, [pc, #580]	; (800141c <main+0x570>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 819e 	bne.w	800151c <main+0x670>
 80011e0:	4b8f      	ldr	r3, [pc, #572]	; (8001420 <main+0x574>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f040 8199 	bne.w	800151c <main+0x670>

			HAL_GPIO_WritePin(GPIOC, LED, HIGH);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f0:	488c      	ldr	r0, [pc, #560]	; (8001424 <main+0x578>)
 80011f2:	f001 f9da 	bl	80025aa <HAL_GPIO_WritePin>

			if (dryer.state == START) {
 80011f6:	4b86      	ldr	r3, [pc, #536]	; (8001410 <main+0x564>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	f040 80bd 	bne.w	800137a <main+0x4ce>

				scaned_key = scan_keypad();
 8001200:	f7ff f8c0 	bl	8000384 <scan_keypad>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b87      	ldr	r3, [pc, #540]	; (8001428 <main+0x57c>)
 800120a:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 800120c:	4b86      	ldr	r3, [pc, #536]	; (8001428 <main+0x57c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	2b03      	cmp	r3, #3
 8001214:	f200 80ad 	bhi.w	8001372 <main+0x4c6>
 8001218:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <main+0x374>)
 800121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121e:	bf00      	nop
 8001220:	08001231 	.word	0x08001231
 8001224:	08001279 	.word	0x08001279
 8001228:	0800129f 	.word	0x0800129f
 800122c:	08001347 	.word	0x08001347
				case LOW_KEY_PRESSED:
					lcd_update_flag = 1U;
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <main+0x580>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <main+0x564>)
 8001238:	7a1b      	ldrb	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <main+0x398>
 800123e:	2b01      	cmp	r3, #1
 8001240:	d00b      	beq.n	800125a <main+0x3ae>
					case COOL_CYCLE:
						if (dryer.coolTime > 60U)
							dryer.coolTime -= 60U;
						break;
					}
					break;
 8001242:	e096      	b.n	8001372 <main+0x4c6>
						if (dryer.heatTime > 60U)
 8001244:	4b72      	ldr	r3, [pc, #456]	; (8001410 <main+0x564>)
 8001246:	885b      	ldrh	r3, [r3, #2]
 8001248:	2b3c      	cmp	r3, #60	; 0x3c
 800124a:	d911      	bls.n	8001270 <main+0x3c4>
							dryer.heatTime -= 60U;
 800124c:	4b70      	ldr	r3, [pc, #448]	; (8001410 <main+0x564>)
 800124e:	885b      	ldrh	r3, [r3, #2]
 8001250:	3b3c      	subs	r3, #60	; 0x3c
 8001252:	b29a      	uxth	r2, r3
 8001254:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <main+0x564>)
 8001256:	805a      	strh	r2, [r3, #2]
						break;
 8001258:	e00a      	b.n	8001270 <main+0x3c4>
						if (dryer.coolTime > 60U)
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <main+0x564>)
 800125c:	889b      	ldrh	r3, [r3, #4]
 800125e:	2b3c      	cmp	r3, #60	; 0x3c
 8001260:	d908      	bls.n	8001274 <main+0x3c8>
							dryer.coolTime -= 60U;
 8001262:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <main+0x564>)
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	3b3c      	subs	r3, #60	; 0x3c
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b69      	ldr	r3, [pc, #420]	; (8001410 <main+0x564>)
 800126c:	809a      	strh	r2, [r3, #4]
						break;
 800126e:	e001      	b.n	8001274 <main+0x3c8>
						break;
 8001270:	bf00      	nop
 8001272:	e07e      	b.n	8001372 <main+0x4c6>
						break;
 8001274:	bf00      	nop
					break;
 8001276:	e07c      	b.n	8001372 <main+0x4c6>

				case MED_KEY_PRESSED:
					lcd_update_flag = 1U;
 8001278:	4b6c      	ldr	r3, [pc, #432]	; (800142c <main+0x580>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <main+0x564>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001284:	4b62      	ldr	r3, [pc, #392]	; (8001410 <main+0x564>)
 8001286:	2200      	movs	r2, #0
 8001288:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 800128a:	4b69      	ldr	r3, [pc, #420]	; (8001430 <main+0x584>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001290:	4b66      	ldr	r3, [pc, #408]	; (800142c <main+0x580>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8001296:	4b67      	ldr	r3, [pc, #412]	; (8001434 <main+0x588>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
					break;
 800129c:	e069      	b.n	8001372 <main+0x4c6>

				case HIGH_KEY_PRESSED:
					lcd_update_flag = 1U;
 800129e:	4b63      	ldr	r3, [pc, #396]	; (800142c <main+0x580>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
					switch (dryer.cycle) {
 80012a4:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <main+0x564>)
 80012a6:	7a1b      	ldrb	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <main+0x406>
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d037      	beq.n	8001320 <main+0x474>
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
						break;
					}
					break;
 80012b0:	e05f      	b.n	8001372 <main+0x4c6>
						if ((dryer.heatTime < 1800U)
 80012b2:	4b57      	ldr	r3, [pc, #348]	; (8001410 <main+0x564>)
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80012ba:	d20a      	bcs.n	80012d2 <main+0x426>
								&& (dryer.mode == LOW_LEVEL))
 80012bc:	4b54      	ldr	r3, [pc, #336]	; (8001410 <main+0x564>)
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d106      	bne.n	80012d2 <main+0x426>
							dryer.heatTime += 60U;
 80012c4:	4b52      	ldr	r3, [pc, #328]	; (8001410 <main+0x564>)
 80012c6:	885b      	ldrh	r3, [r3, #2]
 80012c8:	333c      	adds	r3, #60	; 0x3c
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <main+0x564>)
 80012ce:	805a      	strh	r2, [r3, #2]
 80012d0:	e01f      	b.n	8001312 <main+0x466>
						else if ((dryer.heatTime < 2400U)
 80012d2:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <main+0x564>)
 80012d4:	885b      	ldrh	r3, [r3, #2]
 80012d6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80012da:	d20a      	bcs.n	80012f2 <main+0x446>
								&& (dryer.mode == MED_LEVEL))
 80012dc:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <main+0x564>)
 80012de:	785b      	ldrb	r3, [r3, #1]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d106      	bne.n	80012f2 <main+0x446>
							dryer.heatTime += 60U;
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <main+0x564>)
 80012e6:	885b      	ldrh	r3, [r3, #2]
 80012e8:	333c      	adds	r3, #60	; 0x3c
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <main+0x564>)
 80012ee:	805a      	strh	r2, [r3, #2]
 80012f0:	e00f      	b.n	8001312 <main+0x466>
						else if ((dryer.heatTime < 3000U)
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <main+0x564>)
 80012f4:	885b      	ldrh	r3, [r3, #2]
 80012f6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d809      	bhi.n	8001312 <main+0x466>
								&& (dryer.mode == HIGH_LEVEL))
 80012fe:	4b44      	ldr	r3, [pc, #272]	; (8001410 <main+0x564>)
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d105      	bne.n	8001312 <main+0x466>
							dryer.heatTime += 60U;
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <main+0x564>)
 8001308:	885b      	ldrh	r3, [r3, #2]
 800130a:	333c      	adds	r3, #60	; 0x3c
 800130c:	b29a      	uxth	r2, r3
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <main+0x564>)
 8001310:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <main+0x564>)
 8001314:	885b      	ldrh	r3, [r3, #2]
 8001316:	4619      	mov	r1, r3
 8001318:	4847      	ldr	r0, [pc, #284]	; (8001438 <main+0x58c>)
 800131a:	f002 fbab 	bl	8003a74 <iprintf>
						break;
 800131e:	e011      	b.n	8001344 <main+0x498>
						if (dryer.coolTime < 900U)
 8001320:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <main+0x564>)
 8001322:	889b      	ldrh	r3, [r3, #4]
 8001324:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001328:	d205      	bcs.n	8001336 <main+0x48a>
							dryer.coolTime += 60U;
 800132a:	4b39      	ldr	r3, [pc, #228]	; (8001410 <main+0x564>)
 800132c:	889b      	ldrh	r3, [r3, #4]
 800132e:	333c      	adds	r3, #60	; 0x3c
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <main+0x564>)
 8001334:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <main+0x564>)
 8001338:	889b      	ldrh	r3, [r3, #4]
 800133a:	4619      	mov	r1, r3
 800133c:	483f      	ldr	r0, [pc, #252]	; (800143c <main+0x590>)
 800133e:	f002 fb99 	bl	8003a74 <iprintf>
						break;
 8001342:	bf00      	nop
					break;
 8001344:	e015      	b.n	8001372 <main+0x4c6>

				case FN_KEY_PRESSED:
					lcd_update_flag = 1U;
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <main+0x580>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 0U;
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <main+0x564>)
 800134e:	2200      	movs	r2, #0
 8001350:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <main+0x564>)
 8001354:	2201      	movs	r2, #1
 8001356:	721a      	strb	r2, [r3, #8]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <main+0x564>)
 800135a:	885b      	ldrh	r3, [r3, #2]
 800135c:	4619      	mov	r1, r3
 800135e:	4836      	ldr	r0, [pc, #216]	; (8001438 <main+0x58c>)
 8001360:	f002 fb88 	bl	8003a74 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <main+0x564>)
 8001366:	889b      	ldrh	r3, [r3, #4]
 8001368:	4619      	mov	r1, r3
 800136a:	4834      	ldr	r0, [pc, #208]	; (800143c <main+0x590>)
 800136c:	f002 fb82 	bl	8003a74 <iprintf>
					break;
 8001370:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <main+0x57c>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e0d0      	b.n	800151c <main+0x670>

			} else if (dryer.state == INIT) {
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <main+0x564>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 80cc 	bne.w	800151c <main+0x670>

				scaned_key = scan_keypad();
 8001384:	f7fe fffe 	bl	8000384 <scan_keypad>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <main+0x57c>)
 800138e:	701a      	strb	r2, [r3, #0]

				switch (scaned_key) {
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <main+0x57c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b03      	cmp	r3, #3
 8001396:	f000 808d 	beq.w	80014b4 <main+0x608>
 800139a:	2b03      	cmp	r3, #3
 800139c:	f300 80ba 	bgt.w	8001514 <main+0x668>
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d002      	beq.n	80013aa <main+0x4fe>
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d055      	beq.n	8001454 <main+0x5a8>
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
							sizeof("HIGH_LEVEL\r\n"), 10);
					break;

				default:
					break;
 80013a8:	e0b4      	b.n	8001514 <main+0x668>
					dryer.mode = LOW_LEVEL;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <main+0x564>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <main+0x564>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 600U;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <main+0x564>)
 80013b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80013bc:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <main+0x564>)
 80013c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013c4:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <main+0x564>)
 80013c8:	221e      	movs	r2, #30
 80013ca:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 40U;
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <main+0x564>)
 80013ce:	2228      	movs	r2, #40	; 0x28
 80013d0:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <main+0x564>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <main+0x594>)
 80013da:	221e      	movs	r2, #30
 80013dc:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <main+0x598>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <main+0x59c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <main+0x560>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
					cur_page = LOW_LEVEL_PAGE;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <main+0x584>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <main+0x580>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "LOW_LEVEL\r\n",
 80013fc:	230a      	movs	r3, #10
 80013fe:	220c      	movs	r2, #12
 8001400:	4912      	ldr	r1, [pc, #72]	; (800144c <main+0x5a0>)
 8001402:	4813      	ldr	r0, [pc, #76]	; (8001450 <main+0x5a4>)
 8001404:	f002 f999 	bl	800373a <HAL_UART_Transmit>
					break;
 8001408:	e085      	b.n	8001516 <main+0x66a>
 800140a:	bf00      	nop
 800140c:	2000012e 	.word	0x2000012e
 8001410:	20000120 	.word	0x20000120
 8001414:	20000140 	.word	0x20000140
 8001418:	2000012a 	.word	0x2000012a
 800141c:	2000012c 	.word	0x2000012c
 8001420:	20000130 	.word	0x20000130
 8001424:	40011000 	.word	0x40011000
 8001428:	2000012f 	.word	0x2000012f
 800142c:	20000137 	.word	0x20000137
 8001430:	20000135 	.word	0x20000135
 8001434:	2000012d 	.word	0x2000012d
 8001438:	08004f7c 	.word	0x08004f7c
 800143c:	08004f8c 	.word	0x08004f8c
 8001440:	20000002 	.word	0x20000002
 8001444:	20000131 	.word	0x20000131
 8001448:	20000132 	.word	0x20000132
 800144c:	08004f9c 	.word	0x08004f9c
 8001450:	20000188 	.word	0x20000188
					dryer.mode = MED_LEVEL;
 8001454:	4baa      	ldr	r3, [pc, #680]	; (8001700 <main+0x854>)
 8001456:	2202      	movs	r2, #2
 8001458:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 800145a:	4ba9      	ldr	r3, [pc, #676]	; (8001700 <main+0x854>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1200U;
 8001460:	4ba7      	ldr	r3, [pc, #668]	; (8001700 <main+0x854>)
 8001462:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001466:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 8001468:	4ba5      	ldr	r3, [pc, #660]	; (8001700 <main+0x854>)
 800146a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800146e:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 8001470:	4ba3      	ldr	r3, [pc, #652]	; (8001700 <main+0x854>)
 8001472:	221e      	movs	r2, #30
 8001474:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 70U;
 8001476:	4ba2      	ldr	r3, [pc, #648]	; (8001700 <main+0x854>)
 8001478:	2246      	movs	r2, #70	; 0x46
 800147a:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 800147c:	4ba0      	ldr	r3, [pc, #640]	; (8001700 <main+0x854>)
 800147e:	2200      	movs	r2, #0
 8001480:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8001482:	4ba0      	ldr	r3, [pc, #640]	; (8001704 <main+0x858>)
 8001484:	221e      	movs	r2, #30
 8001486:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8001488:	4b9f      	ldr	r3, [pc, #636]	; (8001708 <main+0x85c>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 800148e:	4b9f      	ldr	r3, [pc, #636]	; (800170c <main+0x860>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8001494:	4b9e      	ldr	r3, [pc, #632]	; (8001710 <main+0x864>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
					cur_page = MED_LEVEL_PAGE;
 800149a:	4b9e      	ldr	r3, [pc, #632]	; (8001714 <main+0x868>)
 800149c:	2202      	movs	r2, #2
 800149e:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80014a0:	4b9d      	ldr	r3, [pc, #628]	; (8001718 <main+0x86c>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "MED_LEVEL\r\n",
 80014a6:	230a      	movs	r3, #10
 80014a8:	220c      	movs	r2, #12
 80014aa:	499c      	ldr	r1, [pc, #624]	; (800171c <main+0x870>)
 80014ac:	489c      	ldr	r0, [pc, #624]	; (8001720 <main+0x874>)
 80014ae:	f002 f944 	bl	800373a <HAL_UART_Transmit>
					break;
 80014b2:	e030      	b.n	8001516 <main+0x66a>
					dryer.mode = HIGH_LEVEL;
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <main+0x854>)
 80014b6:	2203      	movs	r2, #3
 80014b8:	705a      	strb	r2, [r3, #1]
					dryer.state = START;
 80014ba:	4b91      	ldr	r3, [pc, #580]	; (8001700 <main+0x854>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 1800U;
 80014c0:	4b8f      	ldr	r3, [pc, #572]	; (8001700 <main+0x854>)
 80014c2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80014c6:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = 300U;
 80014c8:	4b8d      	ldr	r3, [pc, #564]	; (8001700 <main+0x854>)
 80014ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014ce:	809a      	strh	r2, [r3, #4]
					dryer.beepTime = 30U;
 80014d0:	4b8b      	ldr	r3, [pc, #556]	; (8001700 <main+0x854>)
 80014d2:	221e      	movs	r2, #30
 80014d4:	71da      	strb	r2, [r3, #7]
					dryer.setTemp = 90U;
 80014d6:	4b8a      	ldr	r3, [pc, #552]	; (8001700 <main+0x854>)
 80014d8:	225a      	movs	r2, #90	; 0x5a
 80014da:	719a      	strb	r2, [r3, #6]
					dryer.cycle = HEAT_CYCLE;
 80014dc:	4b88      	ldr	r3, [pc, #544]	; (8001700 <main+0x854>)
 80014de:	2200      	movs	r2, #0
 80014e0:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 80014e2:	4b88      	ldr	r3, [pc, #544]	; (8001704 <main+0x858>)
 80014e4:	221e      	movs	r2, #30
 80014e6:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 80014e8:	4b87      	ldr	r3, [pc, #540]	; (8001708 <main+0x85c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 80014ee:	4b87      	ldr	r3, [pc, #540]	; (800170c <main+0x860>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 80014f4:	4b86      	ldr	r3, [pc, #536]	; (8001710 <main+0x864>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
					cur_page = HIGH_LEVEL_PAGE;
 80014fa:	4b86      	ldr	r3, [pc, #536]	; (8001714 <main+0x868>)
 80014fc:	2203      	movs	r2, #3
 80014fe:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001500:	4b85      	ldr	r3, [pc, #532]	; (8001718 <main+0x86c>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) "HIGH_LEVEL\r\n",
 8001506:	230a      	movs	r3, #10
 8001508:	220d      	movs	r2, #13
 800150a:	4986      	ldr	r1, [pc, #536]	; (8001724 <main+0x878>)
 800150c:	4884      	ldr	r0, [pc, #528]	; (8001720 <main+0x874>)
 800150e:	f002 f914 	bl	800373a <HAL_UART_Transmit>
					break;
 8001512:	e000      	b.n	8001516 <main+0x66a>
					break;
 8001514:	bf00      	nop
				}

				scaned_key = NO_KEY_PRESSED;
 8001516:	4b84      	ldr	r3, [pc, #528]	; (8001728 <main+0x87c>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
			}
		}

		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 800151c:	4b83      	ldr	r3, [pc, #524]	; (800172c <main+0x880>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d13d      	bne.n	80015a0 <main+0x6f4>
 8001524:	4b82      	ldr	r3, [pc, #520]	; (8001730 <main+0x884>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d139      	bne.n	80015a0 <main+0x6f4>
 800152c:	4b81      	ldr	r3, [pc, #516]	; (8001734 <main+0x888>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d135      	bne.n	80015a0 <main+0x6f4>
			if (dryer.state == START) {
 8001534:	4b72      	ldr	r3, [pc, #456]	; (8001700 <main+0x854>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d154      	bne.n	80015e6 <main+0x73a>
				if (limit_timeout == 0U) {
 800153c:	4b7e      	ldr	r3, [pc, #504]	; (8001738 <main+0x88c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d150      	bne.n	80015e6 <main+0x73a>
					limit_timeout = 30U;
 8001544:	4b7c      	ldr	r3, [pc, #496]	; (8001738 <main+0x88c>)
 8001546:	221e      	movs	r2, #30
 8001548:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 800154a:	4b7c      	ldr	r3, [pc, #496]	; (800173c <main+0x890>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]

					dryer.state = INIT;
 8001550:	4b6b      	ldr	r3, [pc, #428]	; (8001700 <main+0x854>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001556:	4b6a      	ldr	r3, [pc, #424]	; (8001700 <main+0x854>)
 8001558:	2200      	movs	r2, #0
 800155a:	705a      	strb	r2, [r3, #1]

					cur_page = LIMIT_SW_ERR_PAGE;
 800155c:	4b6d      	ldr	r3, [pc, #436]	; (8001714 <main+0x868>)
 800155e:	2206      	movs	r2, #6
 8001560:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001568:	4875      	ldr	r0, [pc, #468]	; (8001740 <main+0x894>)
 800156a:	f001 f81e 	bl	80025aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001574:	4873      	ldr	r0, [pc, #460]	; (8001744 <main+0x898>)
 8001576:	f001 f818 	bl	80025aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001580:	4870      	ldr	r0, [pc, #448]	; (8001744 <main+0x898>)
 8001582:	f001 f812 	bl	80025aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800158c:	486d      	ldr	r0, [pc, #436]	; (8001744 <main+0x898>)
 800158e:	f001 f80c 	bl	80025aa <HAL_GPIO_WritePin>

					limit_timeout_flag = 1U;
 8001592:	4b68      	ldr	r3, [pc, #416]	; (8001734 <main+0x888>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 8001598:	4b5f      	ldr	r3, [pc, #380]	; (8001718 <main+0x86c>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
			if (dryer.state == START) {
 800159e:	e022      	b.n	80015e6 <main+0x73a>
				}
			}
		} else if (!door_open_flag && !coil_open_flag && limit_timeout_flag) {
 80015a0:	4b62      	ldr	r3, [pc, #392]	; (800172c <main+0x880>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d11f      	bne.n	80015e8 <main+0x73c>
 80015a8:	4b61      	ldr	r3, [pc, #388]	; (8001730 <main+0x884>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11b      	bne.n	80015e8 <main+0x73c>
 80015b0:	4b60      	ldr	r3, [pc, #384]	; (8001734 <main+0x888>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d017      	beq.n	80015e8 <main+0x73c>
			scaned_key = scan_keypad();
 80015b8:	f7fe fee4 	bl	8000384 <scan_keypad>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <main+0x87c>)
 80015c2:	701a      	strb	r2, [r3, #0]
			if (scaned_key == MED_KEY_PRESSED) {
 80015c4:	4b58      	ldr	r3, [pc, #352]	; (8001728 <main+0x87c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d10d      	bne.n	80015e8 <main+0x73c>
				cur_page = INIT_PAGE;
 80015cc:	4b51      	ldr	r3, [pc, #324]	; (8001714 <main+0x868>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
				limit_timeout = 30U;
 80015d2:	4b59      	ldr	r3, [pc, #356]	; (8001738 <main+0x88c>)
 80015d4:	221e      	movs	r2, #30
 80015d6:	701a      	strb	r2, [r3, #0]
				lcd_update_flag = 1U;
 80015d8:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <main+0x86c>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
				limit_timeout_flag = 0U;
 80015de:	4b55      	ldr	r3, [pc, #340]	; (8001734 <main+0x888>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e000      	b.n	80015e8 <main+0x73c>
			if (dryer.state == START) {
 80015e6:	bf00      	nop
		 * @COMPLETE STATE
		 * 		->TURNS OFF FAN, DRUM MOTORS, HEATER
		 * 		->TRUNS ON/OFF BEEP EVERY 3s FOR 30s
		 * 		->WATCHS DOOR OPEN
		 **********************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <main+0x880>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f040 812e 	bne.w	800184e <main+0x9a2>
 80015f2:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <main+0x884>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 8129 	bne.w	800184e <main+0x9a2>
 80015fc:	4b4d      	ldr	r3, [pc, #308]	; (8001734 <main+0x888>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	f040 8124 	bne.w	800184e <main+0x9a2>

			if (dryer.state == START) {
 8001606:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <main+0x854>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	f040 80d1 	bne.w	80017b2 <main+0x906>

				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, HIGH);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001616:	484a      	ldr	r0, [pc, #296]	; (8001740 <main+0x894>)
 8001618:	f000 ffc7 	bl	80025aa <HAL_GPIO_WritePin>

				if (otp) {
 800161c:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <main+0x89c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <main+0x7ba>
					printf("HeaterTime = %d\r\n", dryer.heatTime);
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <main+0x854>)
 8001626:	885b      	ldrh	r3, [r3, #2]
 8001628:	4619      	mov	r1, r3
 800162a:	4848      	ldr	r0, [pc, #288]	; (800174c <main+0x8a0>)
 800162c:	f002 fa22 	bl	8003a74 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 8001630:	4b33      	ldr	r3, [pc, #204]	; (8001700 <main+0x854>)
 8001632:	889b      	ldrh	r3, [r3, #4]
 8001634:	4619      	mov	r1, r3
 8001636:	4846      	ldr	r0, [pc, #280]	; (8001750 <main+0x8a4>)
 8001638:	f002 fa1c 	bl	8003a74 <iprintf>
					printf("ROT_LEFT = %d\r\n", rot_left_cunt);
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <main+0x858>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	4844      	ldr	r0, [pc, #272]	; (8001754 <main+0x8a8>)
 8001644:	f002 fa16 	bl	8003a74 <iprintf>
					printf("PASUE = %d\r\n", pasue_cunt);
 8001648:	4b30      	ldr	r3, [pc, #192]	; (800170c <main+0x860>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	4842      	ldr	r0, [pc, #264]	; (8001758 <main+0x8ac>)
 8001650:	f002 fa10 	bl	8003a74 <iprintf>
					printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <main+0x85c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	4840      	ldr	r0, [pc, #256]	; (800175c <main+0x8b0>)
 800165c:	f002 fa0a 	bl	8003a74 <iprintf>
					otp = 0;
 8001660:	4b39      	ldr	r3, [pc, #228]	; (8001748 <main+0x89c>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
				}

				//start Flip Flop
				if (pasue_cunt > 0) {
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <main+0x860>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d034      	beq.n	80016d8 <main+0x82c>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001674:	4833      	ldr	r0, [pc, #204]	; (8001744 <main+0x898>)
 8001676:	f000 ff98 	bl	80025aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001680:	4830      	ldr	r0, [pc, #192]	; (8001744 <main+0x898>)
 8001682:	f000 ff92 	bl	80025aa <HAL_GPIO_WritePin>

					if (pasue_cunt <= 1) {
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <main+0x860>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d87f      	bhi.n	800178e <main+0x8e2>

						rot_sw_state = HAL_GPIO_ReadPin(INPUT_PORT,
 800168e:	2104      	movs	r1, #4
 8001690:	482b      	ldr	r0, [pc, #172]	; (8001740 <main+0x894>)
 8001692:	f000 ff73 	bl	800257c <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <main+0x8b4>)
 800169c:	701a      	strb	r2, [r3, #0]
						SEL_ROT_SW);

						if (rot_sw_state) {
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <main+0x8b4>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <main+0x808>

							rot_left_cunt = 30U;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <main+0x858>)
 80016a8:	221e      	movs	r2, #30
 80016aa:	701a      	strb	r2, [r3, #0]
							rot_right_cunt = 0U;
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <main+0x85c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e06c      	b.n	800178e <main+0x8e2>

						} else {

							if (flipflop) {
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <main+0x8b8>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <main+0x81e>

								rot_left_cunt = 0U;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <main+0x858>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 30U;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <main+0x85c>)
 80016c4:	221e      	movs	r2, #30
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e061      	b.n	800178e <main+0x8e2>

							} else {

								rot_left_cunt = 30U;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <main+0x858>)
 80016cc:	221e      	movs	r2, #30
 80016ce:	701a      	strb	r2, [r3, #0]
								rot_right_cunt = 0U;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <main+0x85c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e05a      	b.n	800178e <main+0x8e2>

							}
						}
					}
				} else if (rot_left_cunt > 0) {
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <main+0x858>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d043      	beq.n	8001768 <main+0x8bc>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, HIGH);
 80016e0:	2201      	movs	r2, #1
 80016e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e6:	4817      	ldr	r0, [pc, #92]	; (8001744 <main+0x898>)
 80016e8:	f000 ff5f 	bl	80025aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f2:	4814      	ldr	r0, [pc, #80]	; (8001744 <main+0x898>)
 80016f4:	f000 ff59 	bl	80025aa <HAL_GPIO_WritePin>
					flipflop = 1;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <main+0x8b8>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	e046      	b.n	800178e <main+0x8e2>
 8001700:	20000120 	.word	0x20000120
 8001704:	20000002 	.word	0x20000002
 8001708:	20000131 	.word	0x20000131
 800170c:	20000132 	.word	0x20000132
 8001710:	2000012e 	.word	0x2000012e
 8001714:	20000135 	.word	0x20000135
 8001718:	20000137 	.word	0x20000137
 800171c:	08004fa8 	.word	0x08004fa8
 8001720:	20000188 	.word	0x20000188
 8001724:	08004fb4 	.word	0x08004fb4
 8001728:	2000012f 	.word	0x2000012f
 800172c:	2000012a 	.word	0x2000012a
 8001730:	2000012c 	.word	0x2000012c
 8001734:	20000130 	.word	0x20000130
 8001738:	20000001 	.word	0x20000001
 800173c:	2000012d 	.word	0x2000012d
 8001740:	40010800 	.word	0x40010800
 8001744:	40010c00 	.word	0x40010c00
 8001748:	20000000 	.word	0x20000000
 800174c:	08004fc4 	.word	0x08004fc4
 8001750:	08004f8c 	.word	0x08004f8c
 8001754:	08004fd8 	.word	0x08004fd8
 8001758:	08004fe8 	.word	0x08004fe8
 800175c:	08004ff8 	.word	0x08004ff8
 8001760:	20000133 	.word	0x20000133
 8001764:	20000134 	.word	0x20000134

				} else if (rot_right_cunt > 0) {
 8001768:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <main+0x9ac>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00e      	beq.n	800178e <main+0x8e2>

					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001776:	4839      	ldr	r0, [pc, #228]	; (800185c <main+0x9b0>)
 8001778:	f000 ff17 	bl	80025aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, HIGH);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001782:	4836      	ldr	r0, [pc, #216]	; (800185c <main+0x9b0>)
 8001784:	f000 ff11 	bl	80025aa <HAL_GPIO_WritePin>
					flipflop = 0;
 8001788:	4b35      	ldr	r3, [pc, #212]	; (8001860 <main+0x9b4>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]

				}

				if (dryer.cycle == HEAT_CYCLE) {
 800178e:	4b35      	ldr	r3, [pc, #212]	; (8001864 <main+0x9b8>)
 8001790:	7a1b      	ldrb	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d106      	bne.n	80017a4 <main+0x8f8>

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, HIGH);
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179c:	482f      	ldr	r0, [pc, #188]	; (800185c <main+0x9b0>)
 800179e:	f000 ff04 	bl	80025aa <HAL_GPIO_WritePin>
 80017a2:	e054      	b.n	800184e <main+0x9a2>

				} else {

					HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017aa:	482c      	ldr	r0, [pc, #176]	; (800185c <main+0x9b0>)
 80017ac:	f000 fefd 	bl	80025aa <HAL_GPIO_WritePin>
 80017b0:	e04d      	b.n	800184e <main+0x9a2>

				}
			} else if (dryer.state == COMPLETE) {
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <main+0x9b8>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d131      	bne.n	800181e <main+0x972>

				if (dryer.beepTime == 0) {
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <main+0x9b8>)
 80017bc:	79db      	ldrb	r3, [r3, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d114      	bne.n	80017ec <main+0x940>
					HAL_GPIO_WritePin(GPIOC, LED, LOW);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c8:	4827      	ldr	r0, [pc, #156]	; (8001868 <main+0x9bc>)
 80017ca:	f000 feee 	bl	80025aa <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <main+0x9c0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
					lcd_update_flag = 1U;
 80017d4:	4b26      	ldr	r3, [pc, #152]	; (8001870 <main+0x9c4>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
					//beep off
					timer_stop_evt = 1U;
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <main+0x9c8>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <main+0x9b8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <main+0x9b8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	705a      	strb	r2, [r3, #1]
				} else if (dryer.beepTime % 3 == 0) {
					//beep toggle
				}
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f2:	4821      	ldr	r0, [pc, #132]	; (8001878 <main+0x9cc>)
 80017f4:	f000 fed9 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	4817      	ldr	r0, [pc, #92]	; (800185c <main+0x9b0>)
 8001800:	f000 fed3 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	4814      	ldr	r0, [pc, #80]	; (800185c <main+0x9b0>)
 800180c:	f000 fecd 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001816:	4811      	ldr	r0, [pc, #68]	; (800185c <main+0x9b0>)
 8001818:	f000 fec7 	bl	80025aa <HAL_GPIO_WritePin>
 800181c:	e017      	b.n	800184e <main+0x9a2>

			} else {
				//beep off
				HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, LOW);
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001824:	4814      	ldr	r0, [pc, #80]	; (8001878 <main+0x9cc>)
 8001826:	f000 fec0 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN, LOW);
 800182a:	2200      	movs	r2, #0
 800182c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001830:	480a      	ldr	r0, [pc, #40]	; (800185c <main+0x9b0>)
 8001832:	f000 feba 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_RIGHT_PIN, LOW);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183c:	4807      	ldr	r0, [pc, #28]	; (800185c <main+0x9b0>)
 800183e:	f000 feb4 	bl	80025aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_PORT, HEATER_PIN, LOW);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <main+0x9b0>)
 800184a:	f000 feae 	bl	80025aa <HAL_GPIO_WritePin>
			}
		}
		lcd_update_flag = 1U;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <main+0x9c4>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
		if (is_door_open() && (!door_open_flag)) {
 8001854:	f7ff bb62 	b.w	8000f1c <main+0x70>
 8001858:	20000131 	.word	0x20000131
 800185c:	40010c00 	.word	0x40010c00
 8001860:	20000134 	.word	0x20000134
 8001864:	20000120 	.word	0x20000120
 8001868:	40011000 	.word	0x40011000
 800186c:	20000135 	.word	0x20000135
 8001870:	20000137 	.word	0x20000137
 8001874:	2000012d 	.word	0x2000012d
 8001878:	40010800 	.word	0x40010800

0800187c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b090      	sub	sp, #64	; 0x40
 8001880:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001882:	f107 0318 	add.w	r3, r7, #24
 8001886:	2228      	movs	r2, #40	; 0x28
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f002 f8ea 	bl	8003a64 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a2:	2301      	movs	r3, #1
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a6:	2310      	movs	r3, #16
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018ae:	f107 0318 	add.w	r3, r7, #24
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 feaa 	bl	800260c <HAL_RCC_OscConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <SystemClock_Config+0x46>
		Error_Handler();
 80018be:	f000 f8e5 	bl	8001a8c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018c2:	230f      	movs	r3, #15
 80018c4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 f918 	bl	8002b10 <HAL_RCC_ClockConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0x6e>
		Error_Handler();
 80018e6:	f000 f8d1 	bl	8001a8c <Error_Handler>
	}
}
 80018ea:	bf00      	nop
 80018ec:	3740      	adds	r7, #64	; 0x40
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
//	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW) {
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d10b      	bne.n	800191c <HAL_GPIO_EXTI_Callback+0x28>
		NVIC_DisableIRQ(EXTI0_IRQn);
 8001904:	2006      	movs	r0, #6
 8001906:	f7ff fa9b 	bl	8000e40 <__NVIC_DisableIRQ>

		door_open_flag = 1U;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_GPIO_EXTI_Callback+0x30>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
		door_open_evt = 1U;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_GPIO_EXTI_Callback+0x34>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]

		NVIC_EnableIRQ(EXTI0_IRQn);
 8001916:	2006      	movs	r0, #6
 8001918:	f7ff fa76 	bl	8000e08 <__NVIC_EnableIRQ>
	}
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000012a 	.word	0x2000012a
 8001928:	2000012b 	.word	0x2000012b

0800192c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) "TIMER\r\n", sizeof("TIMER\r\n"), 10);
 8001934:	230a      	movs	r3, #10
 8001936:	2208      	movs	r2, #8
 8001938:	4948      	ldr	r1, [pc, #288]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800193a:	4849      	ldr	r0, [pc, #292]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800193c:	f001 fefd 	bl	800373a <HAL_UART_Transmit>

	if (dryer.heatTime > 0) {
 8001940:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001942:	885b      	ldrh	r3, [r3, #2]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x2a>
		dryer.heatTime--;
 8001948:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800194a:	885b      	ldrh	r3, [r3, #2]
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001952:	805a      	strh	r2, [r3, #2]
 8001954:	e014      	b.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x54>
	} else if (dryer.coolTime > 0) {
 8001956:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001958:	889b      	ldrh	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <HAL_TIM_PeriodElapsedCallback+0x40>
		dryer.coolTime--;
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001960:	889b      	ldrh	r3, [r3, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001968:	809a      	strh	r2, [r3, #4]
 800196a:	e009      	b.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x54>
	} else if (dryer.state == COMPLETE) {
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d105      	bne.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x54>
		dryer.beepTime--;
 8001974:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001976:	79db      	ldrb	r3, [r3, #7]
 8001978:	3b01      	subs	r3, #1
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800197e:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001982:	885b      	ldrh	r3, [r3, #2]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d107      	bne.n	8001998 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001988:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800198a:	7a1b      	ldrb	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d103      	bne.n	8001998 <HAL_TIM_PeriodElapsedCallback+0x6c>
		dryer.cycle = COOL_CYCLE;
 8001990:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001992:	2201      	movs	r2, #1
 8001994:	721a      	strb	r2, [r3, #8]
 8001996:	e013      	b.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x94>
	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8001998:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800199a:	889b      	ldrh	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10f      	bne.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x94>
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019a2:	7a1b      	ldrb	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d10b      	bne.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x94>
		printf("Complete\r\n");
 80019a8:	482f      	ldr	r0, [pc, #188]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80019aa:	f002 f8e9 	bl	8003b80 <puts>
		dryer.state = COMPLETE;
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80019bc:	2204      	movs	r2, #4
 80019be:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_TIM_PeriodElapsedCallback+0xaa>
		pasue_cunt--;
 80019c8:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	e022      	b.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0xf0>
	} else if (rot_left_cunt > 0) {
 80019d6:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00d      	beq.n	80019fa <HAL_TIM_PeriodElapsedCallback+0xce>
		rot_left_cunt--;
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80019e8:	701a      	strb	r2, [r3, #0]

		if (rot_left_cunt == 0) {
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d114      	bne.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0xf0>
			pasue_cunt = 3U;
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80019f4:	2203      	movs	r2, #3
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e010      	b.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
	} else if (rot_right_cunt > 0) {
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00c      	beq.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0xf0>
		rot_right_cunt--;
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001a0c:	701a      	strb	r2, [r3, #0]

		if (rot_right_cunt == 0) {
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0xf0>
			pasue_cunt = 3U;
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001a18:	2203      	movs	r2, #3
 8001a1a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (limit_sw_open()) {
 8001a1c:	f7fe fc54 	bl	80002c8 <limit_sw_open>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x110>
		if (limit_timeout > 0)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <HAL_TIM_PeriodElapsedCallback+0x11c>
			limit_timeout--;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e005      	b.n	8001a48 <HAL_TIM_PeriodElapsedCallback+0x11c>
	} else {
		limit_timeout = 30U;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a3e:	221e      	movs	r2, #30
 8001a40:	701a      	strb	r2, [r3, #0]
		limit_timeout_flag = 0U;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
	}
	otp = 1;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
	lcd_update_flag = 1U;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	0800500c 	.word	0x0800500c
 8001a60:	20000188 	.word	0x20000188
 8001a64:	20000120 	.word	0x20000120
 8001a68:	08005014 	.word	0x08005014
 8001a6c:	20000135 	.word	0x20000135
 8001a70:	20000132 	.word	0x20000132
 8001a74:	20000002 	.word	0x20000002
 8001a78:	20000131 	.word	0x20000131
 8001a7c:	20000001 	.word	0x20000001
 8001a80:	20000130 	.word	0x20000130
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000137 	.word	0x20000137

08001a8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a94:	e7fe      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a98 <output_init>:
 *  Created on: Mar 27, 2023
 *      Author: Yash
 */
#include "output.h"

void output_init(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <output_init+0xcc>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a30      	ldr	r2, [pc, #192]	; (8001b64 <output_init+0xcc>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <output_init+0xcc>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <output_init+0xcc>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <output_init+0xcc>)
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <output_init+0xcc>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOx = { 0 };
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(OUTPUT_PORT, DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001ae2:	4821      	ldr	r0, [pc, #132]	; (8001b68 <output_init+0xd0>)
 8001ae4:	f000 fd61 	bl	80025aa <HAL_GPIO_WritePin>

	GPIOx.Pin = DRUM_LEFT_PIN | DRUM_RIGHT_PIN | HEATER_PIN;
 8001ae8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001aec:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001af2:	2302      	movs	r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2302      	movs	r3, #2
 8001af8:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(OUTPUT_PORT, &GPIOx);
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	4619      	mov	r1, r3
 8001b00:	4819      	ldr	r0, [pc, #100]	; (8001b68 <output_init+0xd0>)
 8001b02:	f000 fbb7 	bl	8002274 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(FAN_PORT, FAN_PIN, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0c:	4817      	ldr	r0, [pc, #92]	; (8001b6c <output_init+0xd4>)
 8001b0e:	f000 fd4c 	bl	80025aa <HAL_GPIO_WritePin>

	GPIOx.Pin = FAN_PIN;
 8001b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b16:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2302      	movs	r3, #2
 8001b22:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(FAN_PORT, &GPIOx);
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4810      	ldr	r0, [pc, #64]	; (8001b6c <output_init+0xd4>)
 8001b2c:	f000 fba2 	bl	8002274 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b36:	480e      	ldr	r0, [pc, #56]	; (8001b70 <output_init+0xd8>)
 8001b38:	f000 fd37 	bl	80025aa <HAL_GPIO_WritePin>

	GPIOx.Pin = BUZZER_PIN;
 8001b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b40:	60bb      	str	r3, [r7, #8]
	GPIOx.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
	GPIOx.Pull = GPIO_PULLDOWN;
 8001b46:	2302      	movs	r3, #2
 8001b48:	613b      	str	r3, [r7, #16]
	GPIOx.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(BUZZER_PORT, &GPIOx);
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	4619      	mov	r1, r3
 8001b54:	4806      	ldr	r0, [pc, #24]	; (8001b70 <output_init+0xd8>)
 8001b56:	f000 fb8d 	bl	8002274 <HAL_GPIO_Init>

}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010c00 	.word	0x40010c00
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	40011000 	.word	0x40011000

08001b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_MspInit+0x40>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_MspInit+0x40>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6193      	str	r3, [r2, #24]
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_MspInit+0x40>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_MspInit+0x40>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_MspInit+0x40>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_MspInit+0x40>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <NMI_Handler+0x4>

08001bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <HardFault_Handler+0x4>

08001bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <MemManage_Handler+0x4>

08001bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <BusFault_Handler+0x4>

08001bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <UsageFault_Handler+0x4>

08001bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfe:	f000 f9eb 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e00a      	b.n	8001c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c18:	f3af 8000 	nop.w
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	60ba      	str	r2, [r7, #8]
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbf0      	blt.n	8001c18 <_read+0x12>
  }

  return len;
 8001c36:	687b      	ldr	r3, [r7, #4]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e009      	b.n	8001c66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	60ba      	str	r2, [r7, #8]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f914 	bl	8000e88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbf1      	blt.n	8001c52 <_write+0x12>
  }
  return len;
 8001c6e:	687b      	ldr	r3, [r7, #4]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_close>:

int _close(int file)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <_isatty>:

int _isatty(int file)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <_sbrk+0x5c>)
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <_sbrk+0x60>)
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <_sbrk+0x64>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <_sbrk+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d207      	bcs.n	8001d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d08:	f001 fe82 	bl	8003a10 <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	220c      	movs	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	e009      	b.n	8001d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <_sbrk+0x64>)
 8001d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20005000 	.word	0x20005000
 8001d38:	00000400 	.word	0x00000400
 8001d3c:	2000013c 	.word	0x2000013c
 8001d40:	200001e0 	.word	0x200001e0

08001d44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <timer_init>:
#include "timer.h"

TIM_HandleTypeDef htim4;

void timer_init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_CLK_ENABLE();
 8001d56:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <timer_init+0xa4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a26      	ldr	r2, [pc, #152]	; (8001df4 <timer_init+0xa4>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <timer_init+0xa4>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <timer_init+0xa8>)
 8001d88:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <timer_init+0xac>)
 8001d8a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7200;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <timer_init+0xa8>)
 8001d8e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001d92:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <timer_init+0xa8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1110+1;
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <timer_init+0xa8>)
 8001d9c:	f240 4257 	movw	r2, #1111	; 0x457
 8001da0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <timer_init+0xa8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <timer_init+0xa8>)
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim4);
 8001dae:	4812      	ldr	r0, [pc, #72]	; (8001df8 <timer_init+0xa8>)
 8001db0:	f001 f846 	bl	8002e40 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db8:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8001dba:	f107 0310 	add.w	r3, r7, #16
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480d      	ldr	r0, [pc, #52]	; (8001df8 <timer_init+0xa8>)
 8001dc2:	f001 fa1d 	bl	8003200 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4808      	ldr	r0, [pc, #32]	; (8001df8 <timer_init+0xa8>)
 8001dd6:	f001 fbf3 	bl	80035c0 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2101      	movs	r1, #1
 8001dde:	201e      	movs	r0, #30
 8001de0:	f000 fa11 	bl	8002206 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001de4:	201e      	movs	r0, #30
 8001de6:	f000 fa2a 	bl	800223e <HAL_NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	20000140 	.word	0x20000140
 8001dfc:	40000800 	.word	0x40000800

08001e00 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <TIM4_IRQHandler+0x10>)
 8001e06:	f001 f8f3 	bl	8002ff0 <HAL_TIM_IRQHandler>
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000140 	.word	0x20000140

08001e14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <MX_USART1_UART_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e4c:	f001 fc28 	bl	80036a0 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e56:	f7ff fe19 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000188 	.word	0x20000188
 8001e64:	40013800 	.word	0x40013800

08001e68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_UART_MspInit+0x8c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d131      	bne.n	8001eec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_UART_MspInit+0x90>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <HAL_UART_MspInit+0x90>)
 8001e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_UART_MspInit+0x90>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_UART_MspInit+0x90>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <HAL_UART_MspInit+0x90>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_UART_MspInit+0x90>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0310 	add.w	r3, r7, #16
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480b      	ldr	r0, [pc, #44]	; (8001efc <HAL_UART_MspInit+0x94>)
 8001ece:	f000 f9d1 	bl	8002274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <HAL_UART_MspInit+0x94>)
 8001ee8:	f000 f9c4 	bl	8002274 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001eec:	bf00      	nop
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010800 	.word	0x40010800

08001f00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f18:	4c0a      	ldr	r4, [pc, #40]	; (8001f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f26:	f7ff ff0d 	bl	8001d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f001 fd77 	bl	8003a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f2e:	f7fe ffbd 	bl	8000eac <main>
  bx lr
 8001f32:	4770      	bx	lr
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f3c:	080050e8 	.word	0x080050e8
  ldr r2, =_sbss
 8001f40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f44:	200001e0 	.word	0x200001e0

08001f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC1_2_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_Init+0x28>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_Init+0x28>)
 8001f56:	f043 0310 	orr.w	r3, r3, #16
 8001f5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f000 f947 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f62:	200f      	movs	r0, #15
 8001f64:	f000 f808 	bl	8001f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f68:	f7ff fe04 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_InitTick+0x54>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_InitTick+0x58>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f95f 	bl	800225a <HAL_SYSTICK_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00e      	b.n	8001fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d80a      	bhi.n	8001fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f000 f927 	bl	8002206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <HAL_InitTick+0x5c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	2000000c 	.word	0x2000000c
 8001fd4:	20000008 	.word	0x20000008

08001fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_IncTick+0x1c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	2000000c 	.word	0x2000000c
 8001ff8:	200001cc 	.word	0x200001cc

08001ffc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b02      	ldr	r3, [pc, #8]	; (800200c <HAL_GetTick+0x10>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	200001cc 	.word	0x200001cc

08002010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff fff0 	bl	8001ffc <HAL_GetTick>
 800201c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d005      	beq.n	8002036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_Delay+0x44>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002036:	bf00      	nop
 8002038:	f7ff ffe0 	bl	8001ffc <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d8f7      	bhi.n	8002038 <HAL_Delay+0x28>
  {
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000000c 	.word	0x2000000c

08002058 <__NVIC_SetPriorityGrouping>:
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002074:	4013      	ands	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	60d3      	str	r3, [r2, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_GetPriorityGrouping>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <__NVIC_GetPriorityGrouping+0x18>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	f003 0307 	and.w	r3, r3, #7
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_EnableIRQ>:
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	db0b      	blt.n	80020e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	f003 021f 	and.w	r2, r3, #31
 80020d4:	4906      	ldr	r1, [pc, #24]	; (80020f0 <__NVIC_EnableIRQ+0x34>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	2001      	movs	r0, #1
 80020de:	fa00 f202 	lsl.w	r2, r0, r2
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	e000e100 	.word	0xe000e100

080020f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db0a      	blt.n	800211e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	490c      	ldr	r1, [pc, #48]	; (8002140 <__NVIC_SetPriority+0x4c>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	440b      	add	r3, r1
 8002118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800211c:	e00a      	b.n	8002134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4908      	ldr	r1, [pc, #32]	; (8002144 <__NVIC_SetPriority+0x50>)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3b04      	subs	r3, #4
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	440b      	add	r3, r1
 8002132:	761a      	strb	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f1c3 0307 	rsb	r3, r3, #7
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf28      	it	cs
 8002166:	2304      	movcs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <NVIC_EncodePriority+0x30>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3b03      	subs	r3, #3
 8002176:	e000      	b.n	800217a <NVIC_EncodePriority+0x32>
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43d9      	mvns	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	4313      	orrs	r3, r2
         );
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff90 	bl	80020f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff2d 	bl	8002058 <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff42 	bl	80020a0 <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff90 	bl	8002148 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff5f 	bl	80020f4 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff35 	bl	80020bc <__NVIC_EnableIRQ>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffa2 	bl	80021ac <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b08b      	sub	sp, #44	; 0x2c
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002286:	e169      	b.n	800255c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002288:	2201      	movs	r2, #1
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f040 8158 	bne.w	8002556 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4a9a      	ldr	r2, [pc, #616]	; (8002514 <HAL_GPIO_Init+0x2a0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d05e      	beq.n	800236e <HAL_GPIO_Init+0xfa>
 80022b0:	4a98      	ldr	r2, [pc, #608]	; (8002514 <HAL_GPIO_Init+0x2a0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d875      	bhi.n	80023a2 <HAL_GPIO_Init+0x12e>
 80022b6:	4a98      	ldr	r2, [pc, #608]	; (8002518 <HAL_GPIO_Init+0x2a4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d058      	beq.n	800236e <HAL_GPIO_Init+0xfa>
 80022bc:	4a96      	ldr	r2, [pc, #600]	; (8002518 <HAL_GPIO_Init+0x2a4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d86f      	bhi.n	80023a2 <HAL_GPIO_Init+0x12e>
 80022c2:	4a96      	ldr	r2, [pc, #600]	; (800251c <HAL_GPIO_Init+0x2a8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d052      	beq.n	800236e <HAL_GPIO_Init+0xfa>
 80022c8:	4a94      	ldr	r2, [pc, #592]	; (800251c <HAL_GPIO_Init+0x2a8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d869      	bhi.n	80023a2 <HAL_GPIO_Init+0x12e>
 80022ce:	4a94      	ldr	r2, [pc, #592]	; (8002520 <HAL_GPIO_Init+0x2ac>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d04c      	beq.n	800236e <HAL_GPIO_Init+0xfa>
 80022d4:	4a92      	ldr	r2, [pc, #584]	; (8002520 <HAL_GPIO_Init+0x2ac>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d863      	bhi.n	80023a2 <HAL_GPIO_Init+0x12e>
 80022da:	4a92      	ldr	r2, [pc, #584]	; (8002524 <HAL_GPIO_Init+0x2b0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d046      	beq.n	800236e <HAL_GPIO_Init+0xfa>
 80022e0:	4a90      	ldr	r2, [pc, #576]	; (8002524 <HAL_GPIO_Init+0x2b0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d85d      	bhi.n	80023a2 <HAL_GPIO_Init+0x12e>
 80022e6:	2b12      	cmp	r3, #18
 80022e8:	d82a      	bhi.n	8002340 <HAL_GPIO_Init+0xcc>
 80022ea:	2b12      	cmp	r3, #18
 80022ec:	d859      	bhi.n	80023a2 <HAL_GPIO_Init+0x12e>
 80022ee:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <HAL_GPIO_Init+0x80>)
 80022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f4:	0800236f 	.word	0x0800236f
 80022f8:	08002349 	.word	0x08002349
 80022fc:	0800235b 	.word	0x0800235b
 8002300:	0800239d 	.word	0x0800239d
 8002304:	080023a3 	.word	0x080023a3
 8002308:	080023a3 	.word	0x080023a3
 800230c:	080023a3 	.word	0x080023a3
 8002310:	080023a3 	.word	0x080023a3
 8002314:	080023a3 	.word	0x080023a3
 8002318:	080023a3 	.word	0x080023a3
 800231c:	080023a3 	.word	0x080023a3
 8002320:	080023a3 	.word	0x080023a3
 8002324:	080023a3 	.word	0x080023a3
 8002328:	080023a3 	.word	0x080023a3
 800232c:	080023a3 	.word	0x080023a3
 8002330:	080023a3 	.word	0x080023a3
 8002334:	080023a3 	.word	0x080023a3
 8002338:	08002351 	.word	0x08002351
 800233c:	08002365 	.word	0x08002365
 8002340:	4a79      	ldr	r2, [pc, #484]	; (8002528 <HAL_GPIO_Init+0x2b4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002346:	e02c      	b.n	80023a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	623b      	str	r3, [r7, #32]
          break;
 800234e:	e029      	b.n	80023a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	3304      	adds	r3, #4
 8002356:	623b      	str	r3, [r7, #32]
          break;
 8002358:	e024      	b.n	80023a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	3308      	adds	r3, #8
 8002360:	623b      	str	r3, [r7, #32]
          break;
 8002362:	e01f      	b.n	80023a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	330c      	adds	r3, #12
 800236a:	623b      	str	r3, [r7, #32]
          break;
 800236c:	e01a      	b.n	80023a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002376:	2304      	movs	r3, #4
 8002378:	623b      	str	r3, [r7, #32]
          break;
 800237a:	e013      	b.n	80023a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002384:	2308      	movs	r3, #8
 8002386:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69fa      	ldr	r2, [r7, #28]
 800238c:	611a      	str	r2, [r3, #16]
          break;
 800238e:	e009      	b.n	80023a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002390:	2308      	movs	r3, #8
 8002392:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	615a      	str	r2, [r3, #20]
          break;
 800239a:	e003      	b.n	80023a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
          break;
 80023a0:	e000      	b.n	80023a4 <HAL_GPIO_Init+0x130>
          break;
 80023a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2bff      	cmp	r3, #255	; 0xff
 80023a8:	d801      	bhi.n	80023ae <HAL_GPIO_Init+0x13a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	e001      	b.n	80023b2 <HAL_GPIO_Init+0x13e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2bff      	cmp	r3, #255	; 0xff
 80023b8:	d802      	bhi.n	80023c0 <HAL_GPIO_Init+0x14c>
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	e002      	b.n	80023c6 <HAL_GPIO_Init+0x152>
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	3b08      	subs	r3, #8
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	210f      	movs	r1, #15
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	401a      	ands	r2, r3
 80023d8:	6a39      	ldr	r1, [r7, #32]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	431a      	orrs	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80b1 	beq.w	8002556 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023f4:	4b4d      	ldr	r3, [pc, #308]	; (800252c <HAL_GPIO_Init+0x2b8>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a4c      	ldr	r2, [pc, #304]	; (800252c <HAL_GPIO_Init+0x2b8>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_GPIO_Init+0x2b8>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800240c:	4a48      	ldr	r2, [pc, #288]	; (8002530 <HAL_GPIO_Init+0x2bc>)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002418:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a40      	ldr	r2, [pc, #256]	; (8002534 <HAL_GPIO_Init+0x2c0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d013      	beq.n	8002460 <HAL_GPIO_Init+0x1ec>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a3f      	ldr	r2, [pc, #252]	; (8002538 <HAL_GPIO_Init+0x2c4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00d      	beq.n	800245c <HAL_GPIO_Init+0x1e8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a3e      	ldr	r2, [pc, #248]	; (800253c <HAL_GPIO_Init+0x2c8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d007      	beq.n	8002458 <HAL_GPIO_Init+0x1e4>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <HAL_GPIO_Init+0x2cc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_GPIO_Init+0x1e0>
 8002450:	2303      	movs	r3, #3
 8002452:	e006      	b.n	8002462 <HAL_GPIO_Init+0x1ee>
 8002454:	2304      	movs	r3, #4
 8002456:	e004      	b.n	8002462 <HAL_GPIO_Init+0x1ee>
 8002458:	2302      	movs	r3, #2
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x1ee>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_GPIO_Init+0x1ee>
 8002460:	2300      	movs	r3, #0
 8002462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002464:	f002 0203 	and.w	r2, r2, #3
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	4093      	lsls	r3, r2
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002472:	492f      	ldr	r1, [pc, #188]	; (8002530 <HAL_GPIO_Init+0x2bc>)
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	492c      	ldr	r1, [pc, #176]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	4928      	ldr	r1, [pc, #160]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b4:	4b23      	ldr	r3, [pc, #140]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4922      	ldr	r1, [pc, #136]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	491e      	ldr	r1, [pc, #120]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	4918      	ldr	r1, [pc, #96]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4914      	ldr	r1, [pc, #80]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d021      	beq.n	8002548 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_GPIO_Init+0x2d0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	60cb      	str	r3, [r1, #12]
 8002510:	e021      	b.n	8002556 <HAL_GPIO_Init+0x2e2>
 8002512:	bf00      	nop
 8002514:	10320000 	.word	0x10320000
 8002518:	10310000 	.word	0x10310000
 800251c:	10220000 	.word	0x10220000
 8002520:	10210000 	.word	0x10210000
 8002524:	10120000 	.word	0x10120000
 8002528:	10110000 	.word	0x10110000
 800252c:	40021000 	.word	0x40021000
 8002530:	40010000 	.word	0x40010000
 8002534:	40010800 	.word	0x40010800
 8002538:	40010c00 	.word	0x40010c00
 800253c:	40011000 	.word	0x40011000
 8002540:	40011400 	.word	0x40011400
 8002544:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_GPIO_Init+0x304>)
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	43db      	mvns	r3, r3
 8002550:	4909      	ldr	r1, [pc, #36]	; (8002578 <HAL_GPIO_Init+0x304>)
 8002552:	4013      	ands	r3, r2
 8002554:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3301      	adds	r3, #1
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	f47f ae8e 	bne.w	8002288 <HAL_GPIO_Init+0x14>
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	372c      	adds	r7, #44	; 0x2c
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	40010400 	.word	0x40010400

0800257c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	887b      	ldrh	r3, [r7, #2]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e001      	b.n	800259e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	807b      	strh	r3, [r7, #2]
 80025b6:	4613      	mov	r3, r2
 80025b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025ba:	787b      	ldrb	r3, [r7, #1]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c0:	887a      	ldrh	r2, [r7, #2]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025c6:	e003      	b.n	80025d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	041a      	lsls	r2, r3, #16
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	611a      	str	r2, [r3, #16]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f97a 	bl	80018f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40010400 	.word	0x40010400

0800260c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e272      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8087 	beq.w	800273a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800262c:	4b92      	ldr	r3, [pc, #584]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b04      	cmp	r3, #4
 8002636:	d00c      	beq.n	8002652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002638:	4b8f      	ldr	r3, [pc, #572]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d112      	bne.n	800266a <HAL_RCC_OscConfig+0x5e>
 8002644:	4b8c      	ldr	r3, [pc, #560]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002650:	d10b      	bne.n	800266a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002652:	4b89      	ldr	r3, [pc, #548]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d06c      	beq.n	8002738 <HAL_RCC_OscConfig+0x12c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d168      	bne.n	8002738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e24c      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x76>
 8002674:	4b80      	ldr	r3, [pc, #512]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a7f      	ldr	r2, [pc, #508]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e02e      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x98>
 800268a:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7a      	ldr	r2, [pc, #488]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b78      	ldr	r3, [pc, #480]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a77      	ldr	r2, [pc, #476]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e01d      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0xbc>
 80026ae:	4b72      	ldr	r3, [pc, #456]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a71      	ldr	r2, [pc, #452]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6e      	ldr	r2, [pc, #440]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 80026c8:	4b6b      	ldr	r3, [pc, #428]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6a      	ldr	r2, [pc, #424]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b68      	ldr	r3, [pc, #416]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a67      	ldr	r2, [pc, #412]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff fc88 	bl	8001ffc <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff fc84 	bl	8001ffc <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e200      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xe4>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fc74 	bl	8001ffc <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7ff fc70 	bl	8001ffc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e1ec      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x10c>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d063      	beq.n	800280e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002746:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002752:	4b49      	ldr	r3, [pc, #292]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b08      	cmp	r3, #8
 800275c:	d11c      	bne.n	8002798 <HAL_RCC_OscConfig+0x18c>
 800275e:	4b46      	ldr	r3, [pc, #280]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x176>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1c0      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4939      	ldr	r1, [pc, #228]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	e03a      	b.n	800280e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7ff fc29 	bl	8001ffc <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7ff fc25 	bl	8001ffc <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1a1      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c0:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4927      	ldr	r1, [pc, #156]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <HAL_RCC_OscConfig+0x270>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fc08 	bl	8001ffc <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f0:	f7ff fc04 	bl	8001ffc <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e180      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d03a      	beq.n	8002890 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d019      	beq.n	8002856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <HAL_RCC_OscConfig+0x274>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7ff fbe8 	bl	8001ffc <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7ff fbe4 	bl	8001ffc <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e160      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800284e:	2001      	movs	r0, #1
 8002850:	f000 fad8 	bl	8002e04 <RCC_Delay>
 8002854:	e01c      	b.n	8002890 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_RCC_OscConfig+0x274>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285c:	f7ff fbce 	bl	8001ffc <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002862:	e00f      	b.n	8002884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002864:	f7ff fbca 	bl	8001ffc <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d908      	bls.n	8002884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e146      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	42420000 	.word	0x42420000
 8002880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002884:	4b92      	ldr	r3, [pc, #584]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e9      	bne.n	8002864 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a6 	beq.w	80029ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a2:	4b8b      	ldr	r3, [pc, #556]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10d      	bne.n	80028ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a87      	ldr	r2, [pc, #540]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b8:	61d3      	str	r3, [r2, #28]
 80028ba:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c6:	2301      	movs	r3, #1
 80028c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	4b82      	ldr	r3, [pc, #520]	; (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d6:	4b7f      	ldr	r3, [pc, #508]	; (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7e      	ldr	r2, [pc, #504]	; (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e2:	f7ff fb8b 	bl	8001ffc <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7ff fb87 	bl	8001ffc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b64      	cmp	r3, #100	; 0x64
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e103      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x312>
 8002910:	4b6f      	ldr	r3, [pc, #444]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a6e      	ldr	r2, [pc, #440]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	e02d      	b.n	800297a <HAL_RCC_OscConfig+0x36e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x334>
 8002926:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4a69      	ldr	r2, [pc, #420]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6213      	str	r3, [r2, #32]
 8002932:	4b67      	ldr	r3, [pc, #412]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a66      	ldr	r2, [pc, #408]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	e01c      	b.n	800297a <HAL_RCC_OscConfig+0x36e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b05      	cmp	r3, #5
 8002946:	d10c      	bne.n	8002962 <HAL_RCC_OscConfig+0x356>
 8002948:	4b61      	ldr	r3, [pc, #388]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4a60      	ldr	r2, [pc, #384]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	6213      	str	r3, [r2, #32]
 8002954:	4b5e      	ldr	r3, [pc, #376]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a5d      	ldr	r2, [pc, #372]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6213      	str	r3, [r2, #32]
 8002960:	e00b      	b.n	800297a <HAL_RCC_OscConfig+0x36e>
 8002962:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a5a      	ldr	r2, [pc, #360]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	6213      	str	r3, [r2, #32]
 800296e:	4b58      	ldr	r3, [pc, #352]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a57      	ldr	r2, [pc, #348]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d015      	beq.n	80029ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7ff fb3b 	bl	8001ffc <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7ff fb37 	bl	8001ffc <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0b1      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ee      	beq.n	800298a <HAL_RCC_OscConfig+0x37e>
 80029ac:	e014      	b.n	80029d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7ff fb25 	bl	8001ffc <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7ff fb21 	bl	8001ffc <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e09b      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029cc:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ee      	bne.n	80029b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d105      	bne.n	80029ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4b3c      	ldr	r3, [pc, #240]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4a3b      	ldr	r2, [pc, #236]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8087 	beq.w	8002b02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f4:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d061      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d146      	bne.n	8002a96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <HAL_RCC_OscConfig+0x4cc>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7ff faf5 	bl	8001ffc <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a16:	f7ff faf1 	bl	8001ffc <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e06d      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d108      	bne.n	8002a50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4921      	ldr	r1, [pc, #132]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a19      	ldr	r1, [r3, #32]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	430b      	orrs	r3, r1
 8002a62:	491b      	ldr	r1, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCC_OscConfig+0x4cc>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7ff fac5 	bl	8001ffc <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7ff fac1 	bl	8001ffc <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e03d      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x46a>
 8002a94:	e035      	b.n	8002b02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_RCC_OscConfig+0x4cc>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff faae 	bl	8001ffc <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7ff faaa 	bl	8001ffc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e026      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x498>
 8002ac2:	e01e      	b.n	8002b02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e019      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_OscConfig+0x500>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0d0      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d910      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0207 	bic.w	r2, r3, #7
 8002b3a:	4965      	ldr	r1, [pc, #404]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0b8      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b6c:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a58      	ldr	r2, [pc, #352]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b84:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	494d      	ldr	r1, [pc, #308]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d040      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d115      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e07f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e073      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b3d      	ldr	r3, [pc, #244]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e06b      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4936      	ldr	r1, [pc, #216]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7ff f9fc 	bl	8001ffc <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7ff f9f8 	bl	8001ffc <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e053      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d210      	bcs.n	8002c60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0207 	bic.w	r2, r3, #7
 8002c46:	4922      	ldr	r1, [pc, #136]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e032      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4916      	ldr	r1, [pc, #88]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	490e      	ldr	r1, [pc, #56]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c9e:	f000 f821 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	490a      	ldr	r1, [pc, #40]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	5ccb      	ldrb	r3, [r1, r3]
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	4a09      	ldr	r2, [pc, #36]	; (8002cdc <HAL_RCC_ClockConfig+0x1cc>)
 8002cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff f95a 	bl	8001f78 <HAL_InitTick>

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08005030 	.word	0x08005030
 8002cdc:	20000004 	.word	0x20000004
 8002ce0:	20000008 	.word	0x20000008

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	b490      	push	{r4, r7}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cea:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xac>)
 8002cec:	1d3c      	adds	r4, r7, #4
 8002cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cf4:	f240 2301 	movw	r3, #513	; 0x201
 8002cf8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d002      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x40>
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x46>
 8002d22:	e02b      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d24:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d26:	623b      	str	r3, [r7, #32]
      break;
 8002d28:	e02b      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	0c9b      	lsrs	r3, r3, #18
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3328      	adds	r3, #40	; 0x28
 8002d34:	443b      	add	r3, r7
 8002d36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d3a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d012      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0c5b      	lsrs	r3, r3, #17
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	3328      	adds	r3, #40	; 0x28
 8002d52:	443b      	add	r3, r7
 8002d54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d5e:	fb03 f202 	mul.w	r2, r3, r2
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6a:	e004      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	623b      	str	r3, [r7, #32]
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d7e:	623b      	str	r3, [r7, #32]
      break;
 8002d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d82:	6a3b      	ldr	r3, [r7, #32]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3728      	adds	r7, #40	; 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc90      	pop	{r4, r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	08005020 	.word	0x08005020
 8002d94:	40021000 	.word	0x40021000
 8002d98:	007a1200 	.word	0x007a1200
 8002d9c:	003d0900 	.word	0x003d0900

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b02      	ldr	r3, [pc, #8]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff2 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08005040 	.word	0x08005040

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffde 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	0adb      	lsrs	r3, r3, #11
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08005040 	.word	0x08005040

08002e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <RCC_Delay+0x34>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <RCC_Delay+0x38>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a5b      	lsrs	r3, r3, #9
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e20:	bf00      	nop
  }
  while (Delay --);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	60fa      	str	r2, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f9      	bne.n	8002e20 <RCC_Delay+0x1c>
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	20000004 	.word	0x20000004
 8002e3c:	10624dd3 	.word	0x10624dd3

08002e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e041      	b.n	8002ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f839 	bl	8002ede <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 faa6 	bl	80033d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d001      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e03a      	b.n	8002f7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <HAL_TIM_Base_Start_IT+0x98>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00e      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x58>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f32:	d009      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x58>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <HAL_TIM_Base_Start_IT+0x9c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x58>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d111      	bne.n	8002f6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d010      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6a:	e007      	b.n	8002f7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800

08002f94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6a1a      	ldr	r2, [r3, #32]
 8002fb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10f      	bne.n	8002fdc <HAL_TIM_Base_Stop_IT+0x48>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6a1a      	ldr	r2, [r3, #32]
 8002fc2:	f240 4344 	movw	r3, #1092	; 0x444
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d107      	bne.n	8002fdc <HAL_TIM_Base_Stop_IT+0x48>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d122      	bne.n	800304c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b02      	cmp	r3, #2
 8003012:	d11b      	bne.n	800304c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0202 	mvn.w	r2, #2
 800301c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f9b1 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9a4 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f9b3 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b04      	cmp	r3, #4
 8003058:	d122      	bne.n	80030a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b04      	cmp	r3, #4
 8003066:	d11b      	bne.n	80030a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0204 	mvn.w	r2, #4
 8003070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f987 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f97a 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f989 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d122      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d11b      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0208 	mvn.w	r2, #8
 80030c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2204      	movs	r2, #4
 80030ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f95d 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f950 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f95f 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d122      	bne.n	8003148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b10      	cmp	r3, #16
 800310e:	d11b      	bne.n	8003148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0210 	mvn.w	r2, #16
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2208      	movs	r2, #8
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f933 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f926 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f935 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d10e      	bne.n	8003174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d107      	bne.n	8003174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0201 	mvn.w	r2, #1
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe fbdc 	bl	800192c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	2b80      	cmp	r3, #128	; 0x80
 8003180:	d10e      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d107      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa77 	bl	800368e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b40      	cmp	r3, #64	; 0x40
 80031ac:	d10e      	bne.n	80031cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	d107      	bne.n	80031cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8f9 	bl	80033be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d10e      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d107      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0220 	mvn.w	r2, #32
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fa42 	bl	800367c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_TIM_ConfigClockSource+0x18>
 8003214:	2302      	movs	r3, #2
 8003216:	e0b3      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x180>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003236:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800323e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003250:	d03e      	beq.n	80032d0 <HAL_TIM_ConfigClockSource+0xd0>
 8003252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003256:	f200 8087 	bhi.w	8003368 <HAL_TIM_ConfigClockSource+0x168>
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325e:	f000 8085 	beq.w	800336c <HAL_TIM_ConfigClockSource+0x16c>
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	d87f      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x168>
 8003268:	2b70      	cmp	r3, #112	; 0x70
 800326a:	d01a      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0xa2>
 800326c:	2b70      	cmp	r3, #112	; 0x70
 800326e:	d87b      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x168>
 8003270:	2b60      	cmp	r3, #96	; 0x60
 8003272:	d050      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x116>
 8003274:	2b60      	cmp	r3, #96	; 0x60
 8003276:	d877      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x168>
 8003278:	2b50      	cmp	r3, #80	; 0x50
 800327a:	d03c      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0xf6>
 800327c:	2b50      	cmp	r3, #80	; 0x50
 800327e:	d873      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x168>
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d058      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x136>
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d86f      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x168>
 8003288:	2b30      	cmp	r3, #48	; 0x30
 800328a:	d064      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x156>
 800328c:	2b30      	cmp	r3, #48	; 0x30
 800328e:	d86b      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x168>
 8003290:	2b20      	cmp	r3, #32
 8003292:	d060      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x156>
 8003294:	2b20      	cmp	r3, #32
 8003296:	d867      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x168>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d05c      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x156>
 800329c:	2b10      	cmp	r3, #16
 800329e:	d05a      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032a0:	e062      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f000 f966 	bl	8003582 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	609a      	str	r2, [r3, #8]
      break;
 80032ce:	e04e      	b.n	800336e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6899      	ldr	r1, [r3, #8]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f000 f94f 	bl	8003582 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f2:	609a      	str	r2, [r3, #8]
      break;
 80032f4:	e03b      	b.n	800336e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	461a      	mov	r2, r3
 8003304:	f000 f8c6 	bl	8003494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2150      	movs	r1, #80	; 0x50
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f91d 	bl	800354e <TIM_ITRx_SetConfig>
      break;
 8003314:	e02b      	b.n	800336e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	461a      	mov	r2, r3
 8003324:	f000 f8e4 	bl	80034f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2160      	movs	r1, #96	; 0x60
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f90d 	bl	800354e <TIM_ITRx_SetConfig>
      break;
 8003334:	e01b      	b.n	800336e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	461a      	mov	r2, r3
 8003344:	f000 f8a6 	bl	8003494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2140      	movs	r1, #64	; 0x40
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f8fd 	bl	800354e <TIM_ITRx_SetConfig>
      break;
 8003354:	e00b      	b.n	800336e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f000 f8f4 	bl	800354e <TIM_ITRx_SetConfig>
        break;
 8003366:	e002      	b.n	800336e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800336c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a29      	ldr	r2, [pc, #164]	; (8003488 <TIM_Base_SetConfig+0xb8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00b      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d007      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a26      	ldr	r2, [pc, #152]	; (800348c <TIM_Base_SetConfig+0xbc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a25      	ldr	r2, [pc, #148]	; (8003490 <TIM_Base_SetConfig+0xc0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d108      	bne.n	8003412 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <TIM_Base_SetConfig+0xb8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00b      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d007      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <TIM_Base_SetConfig+0xbc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a18      	ldr	r2, [pc, #96]	; (8003490 <TIM_Base_SetConfig+0xc0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a07      	ldr	r2, [pc, #28]	; (8003488 <TIM_Base_SetConfig+0xb8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d103      	bne.n	8003478 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	615a      	str	r2, [r3, #20]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800

08003494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f023 030a 	bic.w	r3, r3, #10
 80034d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f023 0210 	bic.w	r2, r3, #16
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800351a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	031b      	lsls	r3, r3, #12
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800352c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	f043 0307 	orr.w	r3, r3, #7
 8003570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	609a      	str	r2, [r3, #8]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003582:	b480      	push	{r7}
 8003584:	b087      	sub	sp, #28
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	021a      	lsls	r2, r3, #8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	609a      	str	r2, [r3, #8]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e046      	b.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d009      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a10      	ldr	r2, [pc, #64]	; (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10c      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800

0800367c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e03f      	b.n	8003732 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fe fbce 	bl	8001e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f905 	bl	80038f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b08a      	sub	sp, #40	; 0x28
 800373e:	af02      	add	r7, sp, #8
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b20      	cmp	r3, #32
 8003758:	d17c      	bne.n	8003854 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_UART_Transmit+0x2c>
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e075      	b.n	8003856 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_UART_Transmit+0x3e>
 8003774:	2302      	movs	r3, #2
 8003776:	e06e      	b.n	8003856 <HAL_UART_Transmit+0x11c>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2221      	movs	r2, #33	; 0x21
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800378e:	f7fe fc35 	bl	8001ffc <HAL_GetTick>
 8003792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a8:	d108      	bne.n	80037bc <HAL_UART_Transmit+0x82>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d104      	bne.n	80037bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	e003      	b.n	80037c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037cc:	e02a      	b.n	8003824 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2180      	movs	r1, #128	; 0x80
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f840 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e036      	b.n	8003856 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	3302      	adds	r3, #2
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	e007      	b.n	8003816 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	3301      	adds	r3, #1
 8003814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1cf      	bne.n	80037ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2200      	movs	r2, #0
 8003836:	2140      	movs	r1, #64	; 0x40
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f810 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e006      	b.n	8003856 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386e:	e02c      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	d028      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x30>
 800387e:	f7fe fbbd 	bl	8001ffc <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	429a      	cmp	r2, r3
 800388c:	d21d      	bcs.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800389c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e00f      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d0c3      	beq.n	8003870 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800392e:	f023 030c 	bic.w	r3, r3, #12
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	430b      	orrs	r3, r1
 800393a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2c      	ldr	r2, [pc, #176]	; (8003a08 <UART_SetConfig+0x114>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d103      	bne.n	8003964 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800395c:	f7ff fa3e 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	e002      	b.n	800396a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003964:	f7ff fa26 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8003968:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009a      	lsls	r2, r3, #2
 8003974:	441a      	add	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <UART_SetConfig+0x118>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	0119      	lsls	r1, r3, #4
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009a      	lsls	r2, r3, #2
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <UART_SetConfig+0x118>)
 80039a2:	fba3 0302 	umull	r0, r3, r3, r2
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2064      	movs	r0, #100	; 0x64
 80039aa:	fb00 f303 	mul.w	r3, r0, r3
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	3332      	adds	r3, #50	; 0x32
 80039b4:	4a15      	ldr	r2, [pc, #84]	; (8003a0c <UART_SetConfig+0x118>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c0:	4419      	add	r1, r3
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009a      	lsls	r2, r3, #2
 80039cc:	441a      	add	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <UART_SetConfig+0x118>)
 80039da:	fba3 0302 	umull	r0, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2064      	movs	r0, #100	; 0x64
 80039e2:	fb00 f303 	mul.w	r3, r0, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	3332      	adds	r3, #50	; 0x32
 80039ec:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <UART_SetConfig+0x118>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	f003 020f 	and.w	r2, r3, #15
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	440a      	add	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40013800 	.word	0x40013800
 8003a0c:	51eb851f 	.word	0x51eb851f

08003a10 <__errno>:
 8003a10:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <__errno+0x8>)
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000010 	.word	0x20000010

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	2600      	movs	r6, #0
 8003a20:	4d0c      	ldr	r5, [pc, #48]	; (8003a54 <__libc_init_array+0x38>)
 8003a22:	4c0d      	ldr	r4, [pc, #52]	; (8003a58 <__libc_init_array+0x3c>)
 8003a24:	1b64      	subs	r4, r4, r5
 8003a26:	10a4      	asrs	r4, r4, #2
 8003a28:	42a6      	cmp	r6, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	f001 fa08 	bl	8004e40 <_init>
 8003a30:	2600      	movs	r6, #0
 8003a32:	4d0a      	ldr	r5, [pc, #40]	; (8003a5c <__libc_init_array+0x40>)
 8003a34:	4c0a      	ldr	r4, [pc, #40]	; (8003a60 <__libc_init_array+0x44>)
 8003a36:	1b64      	subs	r4, r4, r5
 8003a38:	10a4      	asrs	r4, r4, #2
 8003a3a:	42a6      	cmp	r6, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a44:	4798      	blx	r3
 8003a46:	3601      	adds	r6, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4e:	4798      	blx	r3
 8003a50:	3601      	adds	r6, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	080050e0 	.word	0x080050e0
 8003a58:	080050e0 	.word	0x080050e0
 8003a5c:	080050e0 	.word	0x080050e0
 8003a60:	080050e4 	.word	0x080050e4

08003a64 <memset>:
 8003a64:	4603      	mov	r3, r0
 8003a66:	4402      	add	r2, r0
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <memset+0xa>
 8003a6c:	4770      	bx	lr
 8003a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a72:	e7f9      	b.n	8003a68 <memset+0x4>

08003a74 <iprintf>:
 8003a74:	b40f      	push	{r0, r1, r2, r3}
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <iprintf+0x2c>)
 8003a78:	b513      	push	{r0, r1, r4, lr}
 8003a7a:	681c      	ldr	r4, [r3, #0]
 8003a7c:	b124      	cbz	r4, 8003a88 <iprintf+0x14>
 8003a7e:	69a3      	ldr	r3, [r4, #24]
 8003a80:	b913      	cbnz	r3, 8003a88 <iprintf+0x14>
 8003a82:	4620      	mov	r0, r4
 8003a84:	f000 fa7a 	bl	8003f7c <__sinit>
 8003a88:	ab05      	add	r3, sp, #20
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	9a04      	ldr	r2, [sp, #16]
 8003a8e:	68a1      	ldr	r1, [r4, #8]
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	f000 fdd9 	bl	8004648 <_vfiprintf_r>
 8003a96:	b002      	add	sp, #8
 8003a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a9c:	b004      	add	sp, #16
 8003a9e:	4770      	bx	lr
 8003aa0:	20000010 	.word	0x20000010

08003aa4 <_puts_r>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	460e      	mov	r6, r1
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	b118      	cbz	r0, 8003ab4 <_puts_r+0x10>
 8003aac:	6983      	ldr	r3, [r0, #24]
 8003aae:	b90b      	cbnz	r3, 8003ab4 <_puts_r+0x10>
 8003ab0:	f000 fa64 	bl	8003f7c <__sinit>
 8003ab4:	69ab      	ldr	r3, [r5, #24]
 8003ab6:	68ac      	ldr	r4, [r5, #8]
 8003ab8:	b913      	cbnz	r3, 8003ac0 <_puts_r+0x1c>
 8003aba:	4628      	mov	r0, r5
 8003abc:	f000 fa5e 	bl	8003f7c <__sinit>
 8003ac0:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <_puts_r+0xd0>)
 8003ac2:	429c      	cmp	r4, r3
 8003ac4:	d120      	bne.n	8003b08 <_puts_r+0x64>
 8003ac6:	686c      	ldr	r4, [r5, #4]
 8003ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aca:	07db      	lsls	r3, r3, #31
 8003acc:	d405      	bmi.n	8003ada <_puts_r+0x36>
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	0598      	lsls	r0, r3, #22
 8003ad2:	d402      	bmi.n	8003ada <_puts_r+0x36>
 8003ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ad6:	f000 faef 	bl	80040b8 <__retarget_lock_acquire_recursive>
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	0719      	lsls	r1, r3, #28
 8003ade:	d51d      	bpl.n	8003b1c <_puts_r+0x78>
 8003ae0:	6923      	ldr	r3, [r4, #16]
 8003ae2:	b1db      	cbz	r3, 8003b1c <_puts_r+0x78>
 8003ae4:	3e01      	subs	r6, #1
 8003ae6:	68a3      	ldr	r3, [r4, #8]
 8003ae8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003aec:	3b01      	subs	r3, #1
 8003aee:	60a3      	str	r3, [r4, #8]
 8003af0:	bb39      	cbnz	r1, 8003b42 <_puts_r+0x9e>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	da38      	bge.n	8003b68 <_puts_r+0xc4>
 8003af6:	4622      	mov	r2, r4
 8003af8:	210a      	movs	r1, #10
 8003afa:	4628      	mov	r0, r5
 8003afc:	f000 f868 	bl	8003bd0 <__swbuf_r>
 8003b00:	3001      	adds	r0, #1
 8003b02:	d011      	beq.n	8003b28 <_puts_r+0x84>
 8003b04:	250a      	movs	r5, #10
 8003b06:	e011      	b.n	8003b2c <_puts_r+0x88>
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <_puts_r+0xd4>)
 8003b0a:	429c      	cmp	r4, r3
 8003b0c:	d101      	bne.n	8003b12 <_puts_r+0x6e>
 8003b0e:	68ac      	ldr	r4, [r5, #8]
 8003b10:	e7da      	b.n	8003ac8 <_puts_r+0x24>
 8003b12:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <_puts_r+0xd8>)
 8003b14:	429c      	cmp	r4, r3
 8003b16:	bf08      	it	eq
 8003b18:	68ec      	ldreq	r4, [r5, #12]
 8003b1a:	e7d5      	b.n	8003ac8 <_puts_r+0x24>
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f000 f8a8 	bl	8003c74 <__swsetup_r>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d0dd      	beq.n	8003ae4 <_puts_r+0x40>
 8003b28:	f04f 35ff 	mov.w	r5, #4294967295
 8003b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b2e:	07da      	lsls	r2, r3, #31
 8003b30:	d405      	bmi.n	8003b3e <_puts_r+0x9a>
 8003b32:	89a3      	ldrh	r3, [r4, #12]
 8003b34:	059b      	lsls	r3, r3, #22
 8003b36:	d402      	bmi.n	8003b3e <_puts_r+0x9a>
 8003b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b3a:	f000 fabe 	bl	80040ba <__retarget_lock_release_recursive>
 8003b3e:	4628      	mov	r0, r5
 8003b40:	bd70      	pop	{r4, r5, r6, pc}
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da04      	bge.n	8003b50 <_puts_r+0xac>
 8003b46:	69a2      	ldr	r2, [r4, #24]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	dc06      	bgt.n	8003b5a <_puts_r+0xb6>
 8003b4c:	290a      	cmp	r1, #10
 8003b4e:	d004      	beq.n	8003b5a <_puts_r+0xb6>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	6022      	str	r2, [r4, #0]
 8003b56:	7019      	strb	r1, [r3, #0]
 8003b58:	e7c5      	b.n	8003ae6 <_puts_r+0x42>
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f000 f837 	bl	8003bd0 <__swbuf_r>
 8003b62:	3001      	adds	r0, #1
 8003b64:	d1bf      	bne.n	8003ae6 <_puts_r+0x42>
 8003b66:	e7df      	b.n	8003b28 <_puts_r+0x84>
 8003b68:	250a      	movs	r5, #10
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	6022      	str	r2, [r4, #0]
 8003b70:	701d      	strb	r5, [r3, #0]
 8003b72:	e7db      	b.n	8003b2c <_puts_r+0x88>
 8003b74:	0800506c 	.word	0x0800506c
 8003b78:	0800508c 	.word	0x0800508c
 8003b7c:	0800504c 	.word	0x0800504c

08003b80 <puts>:
 8003b80:	4b02      	ldr	r3, [pc, #8]	; (8003b8c <puts+0xc>)
 8003b82:	4601      	mov	r1, r0
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	f7ff bf8d 	b.w	8003aa4 <_puts_r>
 8003b8a:	bf00      	nop
 8003b8c:	20000010 	.word	0x20000010

08003b90 <siprintf>:
 8003b90:	b40e      	push	{r1, r2, r3}
 8003b92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b96:	b500      	push	{lr}
 8003b98:	b09c      	sub	sp, #112	; 0x70
 8003b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b9c:	9002      	str	r0, [sp, #8]
 8003b9e:	9006      	str	r0, [sp, #24]
 8003ba0:	9107      	str	r1, [sp, #28]
 8003ba2:	9104      	str	r1, [sp, #16]
 8003ba4:	4808      	ldr	r0, [pc, #32]	; (8003bc8 <siprintf+0x38>)
 8003ba6:	4909      	ldr	r1, [pc, #36]	; (8003bcc <siprintf+0x3c>)
 8003ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bac:	9105      	str	r1, [sp, #20]
 8003bae:	6800      	ldr	r0, [r0, #0]
 8003bb0:	a902      	add	r1, sp, #8
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	f000 fc20 	bl	80043f8 <_svfiprintf_r>
 8003bb8:	2200      	movs	r2, #0
 8003bba:	9b02      	ldr	r3, [sp, #8]
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	b01c      	add	sp, #112	; 0x70
 8003bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bc4:	b003      	add	sp, #12
 8003bc6:	4770      	bx	lr
 8003bc8:	20000010 	.word	0x20000010
 8003bcc:	ffff0208 	.word	0xffff0208

08003bd0 <__swbuf_r>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	460e      	mov	r6, r1
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	b118      	cbz	r0, 8003be2 <__swbuf_r+0x12>
 8003bda:	6983      	ldr	r3, [r0, #24]
 8003bdc:	b90b      	cbnz	r3, 8003be2 <__swbuf_r+0x12>
 8003bde:	f000 f9cd 	bl	8003f7c <__sinit>
 8003be2:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <__swbuf_r+0x98>)
 8003be4:	429c      	cmp	r4, r3
 8003be6:	d12b      	bne.n	8003c40 <__swbuf_r+0x70>
 8003be8:	686c      	ldr	r4, [r5, #4]
 8003bea:	69a3      	ldr	r3, [r4, #24]
 8003bec:	60a3      	str	r3, [r4, #8]
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	071a      	lsls	r2, r3, #28
 8003bf2:	d52f      	bpl.n	8003c54 <__swbuf_r+0x84>
 8003bf4:	6923      	ldr	r3, [r4, #16]
 8003bf6:	b36b      	cbz	r3, 8003c54 <__swbuf_r+0x84>
 8003bf8:	6923      	ldr	r3, [r4, #16]
 8003bfa:	6820      	ldr	r0, [r4, #0]
 8003bfc:	b2f6      	uxtb	r6, r6
 8003bfe:	1ac0      	subs	r0, r0, r3
 8003c00:	6963      	ldr	r3, [r4, #20]
 8003c02:	4637      	mov	r7, r6
 8003c04:	4283      	cmp	r3, r0
 8003c06:	dc04      	bgt.n	8003c12 <__swbuf_r+0x42>
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f000 f922 	bl	8003e54 <_fflush_r>
 8003c10:	bb30      	cbnz	r0, 8003c60 <__swbuf_r+0x90>
 8003c12:	68a3      	ldr	r3, [r4, #8]
 8003c14:	3001      	adds	r0, #1
 8003c16:	3b01      	subs	r3, #1
 8003c18:	60a3      	str	r3, [r4, #8]
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	6022      	str	r2, [r4, #0]
 8003c20:	701e      	strb	r6, [r3, #0]
 8003c22:	6963      	ldr	r3, [r4, #20]
 8003c24:	4283      	cmp	r3, r0
 8003c26:	d004      	beq.n	8003c32 <__swbuf_r+0x62>
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	07db      	lsls	r3, r3, #31
 8003c2c:	d506      	bpl.n	8003c3c <__swbuf_r+0x6c>
 8003c2e:	2e0a      	cmp	r6, #10
 8003c30:	d104      	bne.n	8003c3c <__swbuf_r+0x6c>
 8003c32:	4621      	mov	r1, r4
 8003c34:	4628      	mov	r0, r5
 8003c36:	f000 f90d 	bl	8003e54 <_fflush_r>
 8003c3a:	b988      	cbnz	r0, 8003c60 <__swbuf_r+0x90>
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <__swbuf_r+0x9c>)
 8003c42:	429c      	cmp	r4, r3
 8003c44:	d101      	bne.n	8003c4a <__swbuf_r+0x7a>
 8003c46:	68ac      	ldr	r4, [r5, #8]
 8003c48:	e7cf      	b.n	8003bea <__swbuf_r+0x1a>
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <__swbuf_r+0xa0>)
 8003c4c:	429c      	cmp	r4, r3
 8003c4e:	bf08      	it	eq
 8003c50:	68ec      	ldreq	r4, [r5, #12]
 8003c52:	e7ca      	b.n	8003bea <__swbuf_r+0x1a>
 8003c54:	4621      	mov	r1, r4
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 f80c 	bl	8003c74 <__swsetup_r>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d0cb      	beq.n	8003bf8 <__swbuf_r+0x28>
 8003c60:	f04f 37ff 	mov.w	r7, #4294967295
 8003c64:	e7ea      	b.n	8003c3c <__swbuf_r+0x6c>
 8003c66:	bf00      	nop
 8003c68:	0800506c 	.word	0x0800506c
 8003c6c:	0800508c 	.word	0x0800508c
 8003c70:	0800504c 	.word	0x0800504c

08003c74 <__swsetup_r>:
 8003c74:	4b32      	ldr	r3, [pc, #200]	; (8003d40 <__swsetup_r+0xcc>)
 8003c76:	b570      	push	{r4, r5, r6, lr}
 8003c78:	681d      	ldr	r5, [r3, #0]
 8003c7a:	4606      	mov	r6, r0
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	b125      	cbz	r5, 8003c8a <__swsetup_r+0x16>
 8003c80:	69ab      	ldr	r3, [r5, #24]
 8003c82:	b913      	cbnz	r3, 8003c8a <__swsetup_r+0x16>
 8003c84:	4628      	mov	r0, r5
 8003c86:	f000 f979 	bl	8003f7c <__sinit>
 8003c8a:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <__swsetup_r+0xd0>)
 8003c8c:	429c      	cmp	r4, r3
 8003c8e:	d10f      	bne.n	8003cb0 <__swsetup_r+0x3c>
 8003c90:	686c      	ldr	r4, [r5, #4]
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c98:	0719      	lsls	r1, r3, #28
 8003c9a:	d42c      	bmi.n	8003cf6 <__swsetup_r+0x82>
 8003c9c:	06dd      	lsls	r5, r3, #27
 8003c9e:	d411      	bmi.n	8003cc4 <__swsetup_r+0x50>
 8003ca0:	2309      	movs	r3, #9
 8003ca2:	6033      	str	r3, [r6, #0]
 8003ca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	81a3      	strh	r3, [r4, #12]
 8003cae:	e03e      	b.n	8003d2e <__swsetup_r+0xba>
 8003cb0:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <__swsetup_r+0xd4>)
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	d101      	bne.n	8003cba <__swsetup_r+0x46>
 8003cb6:	68ac      	ldr	r4, [r5, #8]
 8003cb8:	e7eb      	b.n	8003c92 <__swsetup_r+0x1e>
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <__swsetup_r+0xd8>)
 8003cbc:	429c      	cmp	r4, r3
 8003cbe:	bf08      	it	eq
 8003cc0:	68ec      	ldreq	r4, [r5, #12]
 8003cc2:	e7e6      	b.n	8003c92 <__swsetup_r+0x1e>
 8003cc4:	0758      	lsls	r0, r3, #29
 8003cc6:	d512      	bpl.n	8003cee <__swsetup_r+0x7a>
 8003cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cca:	b141      	cbz	r1, 8003cde <__swsetup_r+0x6a>
 8003ccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cd0:	4299      	cmp	r1, r3
 8003cd2:	d002      	beq.n	8003cda <__swsetup_r+0x66>
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f000 fa57 	bl	8004188 <_free_r>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6363      	str	r3, [r4, #52]	; 0x34
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	6063      	str	r3, [r4, #4]
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	f043 0308 	orr.w	r3, r3, #8
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	b94b      	cbnz	r3, 8003d0e <__swsetup_r+0x9a>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d04:	d003      	beq.n	8003d0e <__swsetup_r+0x9a>
 8003d06:	4621      	mov	r1, r4
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f000 f9fd 	bl	8004108 <__smakebuf_r>
 8003d0e:	89a0      	ldrh	r0, [r4, #12]
 8003d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d14:	f010 0301 	ands.w	r3, r0, #1
 8003d18:	d00a      	beq.n	8003d30 <__swsetup_r+0xbc>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60a3      	str	r3, [r4, #8]
 8003d1e:	6963      	ldr	r3, [r4, #20]
 8003d20:	425b      	negs	r3, r3
 8003d22:	61a3      	str	r3, [r4, #24]
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	b943      	cbnz	r3, 8003d3a <__swsetup_r+0xc6>
 8003d28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d2c:	d1ba      	bne.n	8003ca4 <__swsetup_r+0x30>
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
 8003d30:	0781      	lsls	r1, r0, #30
 8003d32:	bf58      	it	pl
 8003d34:	6963      	ldrpl	r3, [r4, #20]
 8003d36:	60a3      	str	r3, [r4, #8]
 8003d38:	e7f4      	b.n	8003d24 <__swsetup_r+0xb0>
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	e7f7      	b.n	8003d2e <__swsetup_r+0xba>
 8003d3e:	bf00      	nop
 8003d40:	20000010 	.word	0x20000010
 8003d44:	0800506c 	.word	0x0800506c
 8003d48:	0800508c 	.word	0x0800508c
 8003d4c:	0800504c 	.word	0x0800504c

08003d50 <__sflush_r>:
 8003d50:	898a      	ldrh	r2, [r1, #12]
 8003d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d54:	4605      	mov	r5, r0
 8003d56:	0710      	lsls	r0, r2, #28
 8003d58:	460c      	mov	r4, r1
 8003d5a:	d457      	bmi.n	8003e0c <__sflush_r+0xbc>
 8003d5c:	684b      	ldr	r3, [r1, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	dc04      	bgt.n	8003d6c <__sflush_r+0x1c>
 8003d62:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	dc01      	bgt.n	8003d6c <__sflush_r+0x1c>
 8003d68:	2000      	movs	r0, #0
 8003d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	d0fa      	beq.n	8003d68 <__sflush_r+0x18>
 8003d72:	2300      	movs	r3, #0
 8003d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d78:	682f      	ldr	r7, [r5, #0]
 8003d7a:	602b      	str	r3, [r5, #0]
 8003d7c:	d032      	beq.n	8003de4 <__sflush_r+0x94>
 8003d7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	075a      	lsls	r2, r3, #29
 8003d84:	d505      	bpl.n	8003d92 <__sflush_r+0x42>
 8003d86:	6863      	ldr	r3, [r4, #4]
 8003d88:	1ac0      	subs	r0, r0, r3
 8003d8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d8c:	b10b      	cbz	r3, 8003d92 <__sflush_r+0x42>
 8003d8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d90:	1ac0      	subs	r0, r0, r3
 8003d92:	2300      	movs	r3, #0
 8003d94:	4602      	mov	r2, r0
 8003d96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d98:	4628      	mov	r0, r5
 8003d9a:	6a21      	ldr	r1, [r4, #32]
 8003d9c:	47b0      	blx	r6
 8003d9e:	1c43      	adds	r3, r0, #1
 8003da0:	89a3      	ldrh	r3, [r4, #12]
 8003da2:	d106      	bne.n	8003db2 <__sflush_r+0x62>
 8003da4:	6829      	ldr	r1, [r5, #0]
 8003da6:	291d      	cmp	r1, #29
 8003da8:	d82c      	bhi.n	8003e04 <__sflush_r+0xb4>
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <__sflush_r+0x100>)
 8003dac:	40ca      	lsrs	r2, r1
 8003dae:	07d6      	lsls	r6, r2, #31
 8003db0:	d528      	bpl.n	8003e04 <__sflush_r+0xb4>
 8003db2:	2200      	movs	r2, #0
 8003db4:	6062      	str	r2, [r4, #4]
 8003db6:	6922      	ldr	r2, [r4, #16]
 8003db8:	04d9      	lsls	r1, r3, #19
 8003dba:	6022      	str	r2, [r4, #0]
 8003dbc:	d504      	bpl.n	8003dc8 <__sflush_r+0x78>
 8003dbe:	1c42      	adds	r2, r0, #1
 8003dc0:	d101      	bne.n	8003dc6 <__sflush_r+0x76>
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	b903      	cbnz	r3, 8003dc8 <__sflush_r+0x78>
 8003dc6:	6560      	str	r0, [r4, #84]	; 0x54
 8003dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dca:	602f      	str	r7, [r5, #0]
 8003dcc:	2900      	cmp	r1, #0
 8003dce:	d0cb      	beq.n	8003d68 <__sflush_r+0x18>
 8003dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dd4:	4299      	cmp	r1, r3
 8003dd6:	d002      	beq.n	8003dde <__sflush_r+0x8e>
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f000 f9d5 	bl	8004188 <_free_r>
 8003dde:	2000      	movs	r0, #0
 8003de0:	6360      	str	r0, [r4, #52]	; 0x34
 8003de2:	e7c2      	b.n	8003d6a <__sflush_r+0x1a>
 8003de4:	6a21      	ldr	r1, [r4, #32]
 8003de6:	2301      	movs	r3, #1
 8003de8:	4628      	mov	r0, r5
 8003dea:	47b0      	blx	r6
 8003dec:	1c41      	adds	r1, r0, #1
 8003dee:	d1c7      	bne.n	8003d80 <__sflush_r+0x30>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0c4      	beq.n	8003d80 <__sflush_r+0x30>
 8003df6:	2b1d      	cmp	r3, #29
 8003df8:	d001      	beq.n	8003dfe <__sflush_r+0xae>
 8003dfa:	2b16      	cmp	r3, #22
 8003dfc:	d101      	bne.n	8003e02 <__sflush_r+0xb2>
 8003dfe:	602f      	str	r7, [r5, #0]
 8003e00:	e7b2      	b.n	8003d68 <__sflush_r+0x18>
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e08:	81a3      	strh	r3, [r4, #12]
 8003e0a:	e7ae      	b.n	8003d6a <__sflush_r+0x1a>
 8003e0c:	690f      	ldr	r7, [r1, #16]
 8003e0e:	2f00      	cmp	r7, #0
 8003e10:	d0aa      	beq.n	8003d68 <__sflush_r+0x18>
 8003e12:	0793      	lsls	r3, r2, #30
 8003e14:	bf18      	it	ne
 8003e16:	2300      	movne	r3, #0
 8003e18:	680e      	ldr	r6, [r1, #0]
 8003e1a:	bf08      	it	eq
 8003e1c:	694b      	ldreq	r3, [r1, #20]
 8003e1e:	1bf6      	subs	r6, r6, r7
 8003e20:	600f      	str	r7, [r1, #0]
 8003e22:	608b      	str	r3, [r1, #8]
 8003e24:	2e00      	cmp	r6, #0
 8003e26:	dd9f      	ble.n	8003d68 <__sflush_r+0x18>
 8003e28:	4633      	mov	r3, r6
 8003e2a:	463a      	mov	r2, r7
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	6a21      	ldr	r1, [r4, #32]
 8003e30:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003e34:	47e0      	blx	ip
 8003e36:	2800      	cmp	r0, #0
 8003e38:	dc06      	bgt.n	8003e48 <__sflush_r+0xf8>
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e44:	81a3      	strh	r3, [r4, #12]
 8003e46:	e790      	b.n	8003d6a <__sflush_r+0x1a>
 8003e48:	4407      	add	r7, r0
 8003e4a:	1a36      	subs	r6, r6, r0
 8003e4c:	e7ea      	b.n	8003e24 <__sflush_r+0xd4>
 8003e4e:	bf00      	nop
 8003e50:	20400001 	.word	0x20400001

08003e54 <_fflush_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	690b      	ldr	r3, [r1, #16]
 8003e58:	4605      	mov	r5, r0
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	b913      	cbnz	r3, 8003e64 <_fflush_r+0x10>
 8003e5e:	2500      	movs	r5, #0
 8003e60:	4628      	mov	r0, r5
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	b118      	cbz	r0, 8003e6e <_fflush_r+0x1a>
 8003e66:	6983      	ldr	r3, [r0, #24]
 8003e68:	b90b      	cbnz	r3, 8003e6e <_fflush_r+0x1a>
 8003e6a:	f000 f887 	bl	8003f7c <__sinit>
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <_fflush_r+0x6c>)
 8003e70:	429c      	cmp	r4, r3
 8003e72:	d11b      	bne.n	8003eac <_fflush_r+0x58>
 8003e74:	686c      	ldr	r4, [r5, #4]
 8003e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ef      	beq.n	8003e5e <_fflush_r+0xa>
 8003e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e80:	07d0      	lsls	r0, r2, #31
 8003e82:	d404      	bmi.n	8003e8e <_fflush_r+0x3a>
 8003e84:	0599      	lsls	r1, r3, #22
 8003e86:	d402      	bmi.n	8003e8e <_fflush_r+0x3a>
 8003e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8a:	f000 f915 	bl	80040b8 <__retarget_lock_acquire_recursive>
 8003e8e:	4628      	mov	r0, r5
 8003e90:	4621      	mov	r1, r4
 8003e92:	f7ff ff5d 	bl	8003d50 <__sflush_r>
 8003e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e98:	4605      	mov	r5, r0
 8003e9a:	07da      	lsls	r2, r3, #31
 8003e9c:	d4e0      	bmi.n	8003e60 <_fflush_r+0xc>
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	059b      	lsls	r3, r3, #22
 8003ea2:	d4dd      	bmi.n	8003e60 <_fflush_r+0xc>
 8003ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ea6:	f000 f908 	bl	80040ba <__retarget_lock_release_recursive>
 8003eaa:	e7d9      	b.n	8003e60 <_fflush_r+0xc>
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <_fflush_r+0x70>)
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	d101      	bne.n	8003eb6 <_fflush_r+0x62>
 8003eb2:	68ac      	ldr	r4, [r5, #8]
 8003eb4:	e7df      	b.n	8003e76 <_fflush_r+0x22>
 8003eb6:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <_fflush_r+0x74>)
 8003eb8:	429c      	cmp	r4, r3
 8003eba:	bf08      	it	eq
 8003ebc:	68ec      	ldreq	r4, [r5, #12]
 8003ebe:	e7da      	b.n	8003e76 <_fflush_r+0x22>
 8003ec0:	0800506c 	.word	0x0800506c
 8003ec4:	0800508c 	.word	0x0800508c
 8003ec8:	0800504c 	.word	0x0800504c

08003ecc <std>:
 8003ecc:	2300      	movs	r3, #0
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eda:	6083      	str	r3, [r0, #8]
 8003edc:	8181      	strh	r1, [r0, #12]
 8003ede:	6643      	str	r3, [r0, #100]	; 0x64
 8003ee0:	81c2      	strh	r2, [r0, #14]
 8003ee2:	6183      	str	r3, [r0, #24]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	305c      	adds	r0, #92	; 0x5c
 8003eea:	f7ff fdbb 	bl	8003a64 <memset>
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <std+0x38>)
 8003ef0:	6224      	str	r4, [r4, #32]
 8003ef2:	6263      	str	r3, [r4, #36]	; 0x24
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <std+0x3c>)
 8003ef6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <std+0x40>)
 8003efa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <std+0x44>)
 8003efe:	6323      	str	r3, [r4, #48]	; 0x30
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	bf00      	nop
 8003f04:	08004bf5 	.word	0x08004bf5
 8003f08:	08004c17 	.word	0x08004c17
 8003f0c:	08004c4f 	.word	0x08004c4f
 8003f10:	08004c73 	.word	0x08004c73

08003f14 <_cleanup_r>:
 8003f14:	4901      	ldr	r1, [pc, #4]	; (8003f1c <_cleanup_r+0x8>)
 8003f16:	f000 b8af 	b.w	8004078 <_fwalk_reent>
 8003f1a:	bf00      	nop
 8003f1c:	08003e55 	.word	0x08003e55

08003f20 <__sfmoreglue>:
 8003f20:	2268      	movs	r2, #104	; 0x68
 8003f22:	b570      	push	{r4, r5, r6, lr}
 8003f24:	1e4d      	subs	r5, r1, #1
 8003f26:	4355      	muls	r5, r2
 8003f28:	460e      	mov	r6, r1
 8003f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f2e:	f000 f993 	bl	8004258 <_malloc_r>
 8003f32:	4604      	mov	r4, r0
 8003f34:	b140      	cbz	r0, 8003f48 <__sfmoreglue+0x28>
 8003f36:	2100      	movs	r1, #0
 8003f38:	e9c0 1600 	strd	r1, r6, [r0]
 8003f3c:	300c      	adds	r0, #12
 8003f3e:	60a0      	str	r0, [r4, #8]
 8003f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f44:	f7ff fd8e 	bl	8003a64 <memset>
 8003f48:	4620      	mov	r0, r4
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}

08003f4c <__sfp_lock_acquire>:
 8003f4c:	4801      	ldr	r0, [pc, #4]	; (8003f54 <__sfp_lock_acquire+0x8>)
 8003f4e:	f000 b8b3 	b.w	80040b8 <__retarget_lock_acquire_recursive>
 8003f52:	bf00      	nop
 8003f54:	200001d1 	.word	0x200001d1

08003f58 <__sfp_lock_release>:
 8003f58:	4801      	ldr	r0, [pc, #4]	; (8003f60 <__sfp_lock_release+0x8>)
 8003f5a:	f000 b8ae 	b.w	80040ba <__retarget_lock_release_recursive>
 8003f5e:	bf00      	nop
 8003f60:	200001d1 	.word	0x200001d1

08003f64 <__sinit_lock_acquire>:
 8003f64:	4801      	ldr	r0, [pc, #4]	; (8003f6c <__sinit_lock_acquire+0x8>)
 8003f66:	f000 b8a7 	b.w	80040b8 <__retarget_lock_acquire_recursive>
 8003f6a:	bf00      	nop
 8003f6c:	200001d2 	.word	0x200001d2

08003f70 <__sinit_lock_release>:
 8003f70:	4801      	ldr	r0, [pc, #4]	; (8003f78 <__sinit_lock_release+0x8>)
 8003f72:	f000 b8a2 	b.w	80040ba <__retarget_lock_release_recursive>
 8003f76:	bf00      	nop
 8003f78:	200001d2 	.word	0x200001d2

08003f7c <__sinit>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	4604      	mov	r4, r0
 8003f80:	f7ff fff0 	bl	8003f64 <__sinit_lock_acquire>
 8003f84:	69a3      	ldr	r3, [r4, #24]
 8003f86:	b11b      	cbz	r3, 8003f90 <__sinit+0x14>
 8003f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8c:	f7ff bff0 	b.w	8003f70 <__sinit_lock_release>
 8003f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f94:	6523      	str	r3, [r4, #80]	; 0x50
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <__sinit+0x68>)
 8003f98:	4a13      	ldr	r2, [pc, #76]	; (8003fe8 <__sinit+0x6c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f9e:	42a3      	cmp	r3, r4
 8003fa0:	bf08      	it	eq
 8003fa2:	2301      	moveq	r3, #1
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	bf08      	it	eq
 8003fa8:	61a3      	streq	r3, [r4, #24]
 8003faa:	f000 f81f 	bl	8003fec <__sfp>
 8003fae:	6060      	str	r0, [r4, #4]
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f000 f81b 	bl	8003fec <__sfp>
 8003fb6:	60a0      	str	r0, [r4, #8]
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f000 f817 	bl	8003fec <__sfp>
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	60e0      	str	r0, [r4, #12]
 8003fc4:	6860      	ldr	r0, [r4, #4]
 8003fc6:	f7ff ff81 	bl	8003ecc <std>
 8003fca:	2201      	movs	r2, #1
 8003fcc:	2109      	movs	r1, #9
 8003fce:	68a0      	ldr	r0, [r4, #8]
 8003fd0:	f7ff ff7c 	bl	8003ecc <std>
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	2112      	movs	r1, #18
 8003fd8:	68e0      	ldr	r0, [r4, #12]
 8003fda:	f7ff ff77 	bl	8003ecc <std>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61a3      	str	r3, [r4, #24]
 8003fe2:	e7d1      	b.n	8003f88 <__sinit+0xc>
 8003fe4:	08005048 	.word	0x08005048
 8003fe8:	08003f15 	.word	0x08003f15

08003fec <__sfp>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	4607      	mov	r7, r0
 8003ff0:	f7ff ffac 	bl	8003f4c <__sfp_lock_acquire>
 8003ff4:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <__sfp+0x84>)
 8003ff6:	681e      	ldr	r6, [r3, #0]
 8003ff8:	69b3      	ldr	r3, [r6, #24]
 8003ffa:	b913      	cbnz	r3, 8004002 <__sfp+0x16>
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f7ff ffbd 	bl	8003f7c <__sinit>
 8004002:	3648      	adds	r6, #72	; 0x48
 8004004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004008:	3b01      	subs	r3, #1
 800400a:	d503      	bpl.n	8004014 <__sfp+0x28>
 800400c:	6833      	ldr	r3, [r6, #0]
 800400e:	b30b      	cbz	r3, 8004054 <__sfp+0x68>
 8004010:	6836      	ldr	r6, [r6, #0]
 8004012:	e7f7      	b.n	8004004 <__sfp+0x18>
 8004014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004018:	b9d5      	cbnz	r5, 8004050 <__sfp+0x64>
 800401a:	4b16      	ldr	r3, [pc, #88]	; (8004074 <__sfp+0x88>)
 800401c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004020:	60e3      	str	r3, [r4, #12]
 8004022:	6665      	str	r5, [r4, #100]	; 0x64
 8004024:	f000 f847 	bl	80040b6 <__retarget_lock_init_recursive>
 8004028:	f7ff ff96 	bl	8003f58 <__sfp_lock_release>
 800402c:	2208      	movs	r2, #8
 800402e:	4629      	mov	r1, r5
 8004030:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004034:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004038:	6025      	str	r5, [r4, #0]
 800403a:	61a5      	str	r5, [r4, #24]
 800403c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004040:	f7ff fd10 	bl	8003a64 <memset>
 8004044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800404c:	4620      	mov	r0, r4
 800404e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004050:	3468      	adds	r4, #104	; 0x68
 8004052:	e7d9      	b.n	8004008 <__sfp+0x1c>
 8004054:	2104      	movs	r1, #4
 8004056:	4638      	mov	r0, r7
 8004058:	f7ff ff62 	bl	8003f20 <__sfmoreglue>
 800405c:	4604      	mov	r4, r0
 800405e:	6030      	str	r0, [r6, #0]
 8004060:	2800      	cmp	r0, #0
 8004062:	d1d5      	bne.n	8004010 <__sfp+0x24>
 8004064:	f7ff ff78 	bl	8003f58 <__sfp_lock_release>
 8004068:	230c      	movs	r3, #12
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	e7ee      	b.n	800404c <__sfp+0x60>
 800406e:	bf00      	nop
 8004070:	08005048 	.word	0x08005048
 8004074:	ffff0001 	.word	0xffff0001

08004078 <_fwalk_reent>:
 8004078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800407c:	4606      	mov	r6, r0
 800407e:	4688      	mov	r8, r1
 8004080:	2700      	movs	r7, #0
 8004082:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800408a:	f1b9 0901 	subs.w	r9, r9, #1
 800408e:	d505      	bpl.n	800409c <_fwalk_reent+0x24>
 8004090:	6824      	ldr	r4, [r4, #0]
 8004092:	2c00      	cmp	r4, #0
 8004094:	d1f7      	bne.n	8004086 <_fwalk_reent+0xe>
 8004096:	4638      	mov	r0, r7
 8004098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800409c:	89ab      	ldrh	r3, [r5, #12]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d907      	bls.n	80040b2 <_fwalk_reent+0x3a>
 80040a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040a6:	3301      	adds	r3, #1
 80040a8:	d003      	beq.n	80040b2 <_fwalk_reent+0x3a>
 80040aa:	4629      	mov	r1, r5
 80040ac:	4630      	mov	r0, r6
 80040ae:	47c0      	blx	r8
 80040b0:	4307      	orrs	r7, r0
 80040b2:	3568      	adds	r5, #104	; 0x68
 80040b4:	e7e9      	b.n	800408a <_fwalk_reent+0x12>

080040b6 <__retarget_lock_init_recursive>:
 80040b6:	4770      	bx	lr

080040b8 <__retarget_lock_acquire_recursive>:
 80040b8:	4770      	bx	lr

080040ba <__retarget_lock_release_recursive>:
 80040ba:	4770      	bx	lr

080040bc <__swhatbuf_r>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	460e      	mov	r6, r1
 80040c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c4:	4614      	mov	r4, r2
 80040c6:	2900      	cmp	r1, #0
 80040c8:	461d      	mov	r5, r3
 80040ca:	b096      	sub	sp, #88	; 0x58
 80040cc:	da08      	bge.n	80040e0 <__swhatbuf_r+0x24>
 80040ce:	2200      	movs	r2, #0
 80040d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80040d4:	602a      	str	r2, [r5, #0]
 80040d6:	061a      	lsls	r2, r3, #24
 80040d8:	d410      	bmi.n	80040fc <__swhatbuf_r+0x40>
 80040da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040de:	e00e      	b.n	80040fe <__swhatbuf_r+0x42>
 80040e0:	466a      	mov	r2, sp
 80040e2:	f000 fded 	bl	8004cc0 <_fstat_r>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	dbf1      	blt.n	80040ce <__swhatbuf_r+0x12>
 80040ea:	9a01      	ldr	r2, [sp, #4]
 80040ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040f4:	425a      	negs	r2, r3
 80040f6:	415a      	adcs	r2, r3
 80040f8:	602a      	str	r2, [r5, #0]
 80040fa:	e7ee      	b.n	80040da <__swhatbuf_r+0x1e>
 80040fc:	2340      	movs	r3, #64	; 0x40
 80040fe:	2000      	movs	r0, #0
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	b016      	add	sp, #88	; 0x58
 8004104:	bd70      	pop	{r4, r5, r6, pc}
	...

08004108 <__smakebuf_r>:
 8004108:	898b      	ldrh	r3, [r1, #12]
 800410a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800410c:	079d      	lsls	r5, r3, #30
 800410e:	4606      	mov	r6, r0
 8004110:	460c      	mov	r4, r1
 8004112:	d507      	bpl.n	8004124 <__smakebuf_r+0x1c>
 8004114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	6123      	str	r3, [r4, #16]
 800411c:	2301      	movs	r3, #1
 800411e:	6163      	str	r3, [r4, #20]
 8004120:	b002      	add	sp, #8
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	466a      	mov	r2, sp
 8004126:	ab01      	add	r3, sp, #4
 8004128:	f7ff ffc8 	bl	80040bc <__swhatbuf_r>
 800412c:	9900      	ldr	r1, [sp, #0]
 800412e:	4605      	mov	r5, r0
 8004130:	4630      	mov	r0, r6
 8004132:	f000 f891 	bl	8004258 <_malloc_r>
 8004136:	b948      	cbnz	r0, 800414c <__smakebuf_r+0x44>
 8004138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800413c:	059a      	lsls	r2, r3, #22
 800413e:	d4ef      	bmi.n	8004120 <__smakebuf_r+0x18>
 8004140:	f023 0303 	bic.w	r3, r3, #3
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	e7e3      	b.n	8004114 <__smakebuf_r+0xc>
 800414c:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <__smakebuf_r+0x7c>)
 800414e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	6020      	str	r0, [r4, #0]
 8004154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	9b00      	ldr	r3, [sp, #0]
 800415c:	6120      	str	r0, [r4, #16]
 800415e:	6163      	str	r3, [r4, #20]
 8004160:	9b01      	ldr	r3, [sp, #4]
 8004162:	b15b      	cbz	r3, 800417c <__smakebuf_r+0x74>
 8004164:	4630      	mov	r0, r6
 8004166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800416a:	f000 fdbb 	bl	8004ce4 <_isatty_r>
 800416e:	b128      	cbz	r0, 800417c <__smakebuf_r+0x74>
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	81a3      	strh	r3, [r4, #12]
 800417c:	89a0      	ldrh	r0, [r4, #12]
 800417e:	4305      	orrs	r5, r0
 8004180:	81a5      	strh	r5, [r4, #12]
 8004182:	e7cd      	b.n	8004120 <__smakebuf_r+0x18>
 8004184:	08003f15 	.word	0x08003f15

08004188 <_free_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4605      	mov	r5, r0
 800418c:	2900      	cmp	r1, #0
 800418e:	d040      	beq.n	8004212 <_free_r+0x8a>
 8004190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004194:	1f0c      	subs	r4, r1, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	bfb8      	it	lt
 800419a:	18e4      	addlt	r4, r4, r3
 800419c:	f000 fdfa 	bl	8004d94 <__malloc_lock>
 80041a0:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <_free_r+0x8c>)
 80041a2:	6813      	ldr	r3, [r2, #0]
 80041a4:	b933      	cbnz	r3, 80041b4 <_free_r+0x2c>
 80041a6:	6063      	str	r3, [r4, #4]
 80041a8:	6014      	str	r4, [r2, #0]
 80041aa:	4628      	mov	r0, r5
 80041ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b0:	f000 bdf6 	b.w	8004da0 <__malloc_unlock>
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	d908      	bls.n	80041ca <_free_r+0x42>
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	1821      	adds	r1, r4, r0
 80041bc:	428b      	cmp	r3, r1
 80041be:	bf01      	itttt	eq
 80041c0:	6819      	ldreq	r1, [r3, #0]
 80041c2:	685b      	ldreq	r3, [r3, #4]
 80041c4:	1809      	addeq	r1, r1, r0
 80041c6:	6021      	streq	r1, [r4, #0]
 80041c8:	e7ed      	b.n	80041a6 <_free_r+0x1e>
 80041ca:	461a      	mov	r2, r3
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b10b      	cbz	r3, 80041d4 <_free_r+0x4c>
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d9fa      	bls.n	80041ca <_free_r+0x42>
 80041d4:	6811      	ldr	r1, [r2, #0]
 80041d6:	1850      	adds	r0, r2, r1
 80041d8:	42a0      	cmp	r0, r4
 80041da:	d10b      	bne.n	80041f4 <_free_r+0x6c>
 80041dc:	6820      	ldr	r0, [r4, #0]
 80041de:	4401      	add	r1, r0
 80041e0:	1850      	adds	r0, r2, r1
 80041e2:	4283      	cmp	r3, r0
 80041e4:	6011      	str	r1, [r2, #0]
 80041e6:	d1e0      	bne.n	80041aa <_free_r+0x22>
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4401      	add	r1, r0
 80041ee:	6011      	str	r1, [r2, #0]
 80041f0:	6053      	str	r3, [r2, #4]
 80041f2:	e7da      	b.n	80041aa <_free_r+0x22>
 80041f4:	d902      	bls.n	80041fc <_free_r+0x74>
 80041f6:	230c      	movs	r3, #12
 80041f8:	602b      	str	r3, [r5, #0]
 80041fa:	e7d6      	b.n	80041aa <_free_r+0x22>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	1821      	adds	r1, r4, r0
 8004200:	428b      	cmp	r3, r1
 8004202:	bf01      	itttt	eq
 8004204:	6819      	ldreq	r1, [r3, #0]
 8004206:	685b      	ldreq	r3, [r3, #4]
 8004208:	1809      	addeq	r1, r1, r0
 800420a:	6021      	streq	r1, [r4, #0]
 800420c:	6063      	str	r3, [r4, #4]
 800420e:	6054      	str	r4, [r2, #4]
 8004210:	e7cb      	b.n	80041aa <_free_r+0x22>
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	200001d4 	.word	0x200001d4

08004218 <sbrk_aligned>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4e0e      	ldr	r6, [pc, #56]	; (8004254 <sbrk_aligned+0x3c>)
 800421c:	460c      	mov	r4, r1
 800421e:	6831      	ldr	r1, [r6, #0]
 8004220:	4605      	mov	r5, r0
 8004222:	b911      	cbnz	r1, 800422a <sbrk_aligned+0x12>
 8004224:	f000 fcd6 	bl	8004bd4 <_sbrk_r>
 8004228:	6030      	str	r0, [r6, #0]
 800422a:	4621      	mov	r1, r4
 800422c:	4628      	mov	r0, r5
 800422e:	f000 fcd1 	bl	8004bd4 <_sbrk_r>
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	d00a      	beq.n	800424c <sbrk_aligned+0x34>
 8004236:	1cc4      	adds	r4, r0, #3
 8004238:	f024 0403 	bic.w	r4, r4, #3
 800423c:	42a0      	cmp	r0, r4
 800423e:	d007      	beq.n	8004250 <sbrk_aligned+0x38>
 8004240:	1a21      	subs	r1, r4, r0
 8004242:	4628      	mov	r0, r5
 8004244:	f000 fcc6 	bl	8004bd4 <_sbrk_r>
 8004248:	3001      	adds	r0, #1
 800424a:	d101      	bne.n	8004250 <sbrk_aligned+0x38>
 800424c:	f04f 34ff 	mov.w	r4, #4294967295
 8004250:	4620      	mov	r0, r4
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	200001d8 	.word	0x200001d8

08004258 <_malloc_r>:
 8004258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800425c:	1ccd      	adds	r5, r1, #3
 800425e:	f025 0503 	bic.w	r5, r5, #3
 8004262:	3508      	adds	r5, #8
 8004264:	2d0c      	cmp	r5, #12
 8004266:	bf38      	it	cc
 8004268:	250c      	movcc	r5, #12
 800426a:	2d00      	cmp	r5, #0
 800426c:	4607      	mov	r7, r0
 800426e:	db01      	blt.n	8004274 <_malloc_r+0x1c>
 8004270:	42a9      	cmp	r1, r5
 8004272:	d905      	bls.n	8004280 <_malloc_r+0x28>
 8004274:	230c      	movs	r3, #12
 8004276:	2600      	movs	r6, #0
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4630      	mov	r0, r6
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	4e2e      	ldr	r6, [pc, #184]	; (800433c <_malloc_r+0xe4>)
 8004282:	f000 fd87 	bl	8004d94 <__malloc_lock>
 8004286:	6833      	ldr	r3, [r6, #0]
 8004288:	461c      	mov	r4, r3
 800428a:	bb34      	cbnz	r4, 80042da <_malloc_r+0x82>
 800428c:	4629      	mov	r1, r5
 800428e:	4638      	mov	r0, r7
 8004290:	f7ff ffc2 	bl	8004218 <sbrk_aligned>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	4604      	mov	r4, r0
 8004298:	d14d      	bne.n	8004336 <_malloc_r+0xde>
 800429a:	6834      	ldr	r4, [r6, #0]
 800429c:	4626      	mov	r6, r4
 800429e:	2e00      	cmp	r6, #0
 80042a0:	d140      	bne.n	8004324 <_malloc_r+0xcc>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	4631      	mov	r1, r6
 80042a6:	4638      	mov	r0, r7
 80042a8:	eb04 0803 	add.w	r8, r4, r3
 80042ac:	f000 fc92 	bl	8004bd4 <_sbrk_r>
 80042b0:	4580      	cmp	r8, r0
 80042b2:	d13a      	bne.n	800432a <_malloc_r+0xd2>
 80042b4:	6821      	ldr	r1, [r4, #0]
 80042b6:	3503      	adds	r5, #3
 80042b8:	1a6d      	subs	r5, r5, r1
 80042ba:	f025 0503 	bic.w	r5, r5, #3
 80042be:	3508      	adds	r5, #8
 80042c0:	2d0c      	cmp	r5, #12
 80042c2:	bf38      	it	cc
 80042c4:	250c      	movcc	r5, #12
 80042c6:	4638      	mov	r0, r7
 80042c8:	4629      	mov	r1, r5
 80042ca:	f7ff ffa5 	bl	8004218 <sbrk_aligned>
 80042ce:	3001      	adds	r0, #1
 80042d0:	d02b      	beq.n	800432a <_malloc_r+0xd2>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	442b      	add	r3, r5
 80042d6:	6023      	str	r3, [r4, #0]
 80042d8:	e00e      	b.n	80042f8 <_malloc_r+0xa0>
 80042da:	6822      	ldr	r2, [r4, #0]
 80042dc:	1b52      	subs	r2, r2, r5
 80042de:	d41e      	bmi.n	800431e <_malloc_r+0xc6>
 80042e0:	2a0b      	cmp	r2, #11
 80042e2:	d916      	bls.n	8004312 <_malloc_r+0xba>
 80042e4:	1961      	adds	r1, r4, r5
 80042e6:	42a3      	cmp	r3, r4
 80042e8:	6025      	str	r5, [r4, #0]
 80042ea:	bf18      	it	ne
 80042ec:	6059      	strne	r1, [r3, #4]
 80042ee:	6863      	ldr	r3, [r4, #4]
 80042f0:	bf08      	it	eq
 80042f2:	6031      	streq	r1, [r6, #0]
 80042f4:	5162      	str	r2, [r4, r5]
 80042f6:	604b      	str	r3, [r1, #4]
 80042f8:	4638      	mov	r0, r7
 80042fa:	f104 060b 	add.w	r6, r4, #11
 80042fe:	f000 fd4f 	bl	8004da0 <__malloc_unlock>
 8004302:	f026 0607 	bic.w	r6, r6, #7
 8004306:	1d23      	adds	r3, r4, #4
 8004308:	1af2      	subs	r2, r6, r3
 800430a:	d0b6      	beq.n	800427a <_malloc_r+0x22>
 800430c:	1b9b      	subs	r3, r3, r6
 800430e:	50a3      	str	r3, [r4, r2]
 8004310:	e7b3      	b.n	800427a <_malloc_r+0x22>
 8004312:	6862      	ldr	r2, [r4, #4]
 8004314:	42a3      	cmp	r3, r4
 8004316:	bf0c      	ite	eq
 8004318:	6032      	streq	r2, [r6, #0]
 800431a:	605a      	strne	r2, [r3, #4]
 800431c:	e7ec      	b.n	80042f8 <_malloc_r+0xa0>
 800431e:	4623      	mov	r3, r4
 8004320:	6864      	ldr	r4, [r4, #4]
 8004322:	e7b2      	b.n	800428a <_malloc_r+0x32>
 8004324:	4634      	mov	r4, r6
 8004326:	6876      	ldr	r6, [r6, #4]
 8004328:	e7b9      	b.n	800429e <_malloc_r+0x46>
 800432a:	230c      	movs	r3, #12
 800432c:	4638      	mov	r0, r7
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	f000 fd36 	bl	8004da0 <__malloc_unlock>
 8004334:	e7a1      	b.n	800427a <_malloc_r+0x22>
 8004336:	6025      	str	r5, [r4, #0]
 8004338:	e7de      	b.n	80042f8 <_malloc_r+0xa0>
 800433a:	bf00      	nop
 800433c:	200001d4 	.word	0x200001d4

08004340 <__ssputs_r>:
 8004340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004344:	688e      	ldr	r6, [r1, #8]
 8004346:	4682      	mov	sl, r0
 8004348:	429e      	cmp	r6, r3
 800434a:	460c      	mov	r4, r1
 800434c:	4690      	mov	r8, r2
 800434e:	461f      	mov	r7, r3
 8004350:	d838      	bhi.n	80043c4 <__ssputs_r+0x84>
 8004352:	898a      	ldrh	r2, [r1, #12]
 8004354:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004358:	d032      	beq.n	80043c0 <__ssputs_r+0x80>
 800435a:	6825      	ldr	r5, [r4, #0]
 800435c:	6909      	ldr	r1, [r1, #16]
 800435e:	3301      	adds	r3, #1
 8004360:	eba5 0901 	sub.w	r9, r5, r1
 8004364:	6965      	ldr	r5, [r4, #20]
 8004366:	444b      	add	r3, r9
 8004368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800436c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004370:	106d      	asrs	r5, r5, #1
 8004372:	429d      	cmp	r5, r3
 8004374:	bf38      	it	cc
 8004376:	461d      	movcc	r5, r3
 8004378:	0553      	lsls	r3, r2, #21
 800437a:	d531      	bpl.n	80043e0 <__ssputs_r+0xa0>
 800437c:	4629      	mov	r1, r5
 800437e:	f7ff ff6b 	bl	8004258 <_malloc_r>
 8004382:	4606      	mov	r6, r0
 8004384:	b950      	cbnz	r0, 800439c <__ssputs_r+0x5c>
 8004386:	230c      	movs	r3, #12
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	f8ca 3000 	str.w	r3, [sl]
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439c:	464a      	mov	r2, r9
 800439e:	6921      	ldr	r1, [r4, #16]
 80043a0:	f000 fcd0 	bl	8004d44 <memcpy>
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	6126      	str	r6, [r4, #16]
 80043b2:	444e      	add	r6, r9
 80043b4:	6026      	str	r6, [r4, #0]
 80043b6:	463e      	mov	r6, r7
 80043b8:	6165      	str	r5, [r4, #20]
 80043ba:	eba5 0509 	sub.w	r5, r5, r9
 80043be:	60a5      	str	r5, [r4, #8]
 80043c0:	42be      	cmp	r6, r7
 80043c2:	d900      	bls.n	80043c6 <__ssputs_r+0x86>
 80043c4:	463e      	mov	r6, r7
 80043c6:	4632      	mov	r2, r6
 80043c8:	4641      	mov	r1, r8
 80043ca:	6820      	ldr	r0, [r4, #0]
 80043cc:	f000 fcc8 	bl	8004d60 <memmove>
 80043d0:	68a3      	ldr	r3, [r4, #8]
 80043d2:	2000      	movs	r0, #0
 80043d4:	1b9b      	subs	r3, r3, r6
 80043d6:	60a3      	str	r3, [r4, #8]
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	4433      	add	r3, r6
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	e7db      	b.n	8004398 <__ssputs_r+0x58>
 80043e0:	462a      	mov	r2, r5
 80043e2:	f000 fce3 	bl	8004dac <_realloc_r>
 80043e6:	4606      	mov	r6, r0
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d1e1      	bne.n	80043b0 <__ssputs_r+0x70>
 80043ec:	4650      	mov	r0, sl
 80043ee:	6921      	ldr	r1, [r4, #16]
 80043f0:	f7ff feca 	bl	8004188 <_free_r>
 80043f4:	e7c7      	b.n	8004386 <__ssputs_r+0x46>
	...

080043f8 <_svfiprintf_r>:
 80043f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fc:	4698      	mov	r8, r3
 80043fe:	898b      	ldrh	r3, [r1, #12]
 8004400:	4607      	mov	r7, r0
 8004402:	061b      	lsls	r3, r3, #24
 8004404:	460d      	mov	r5, r1
 8004406:	4614      	mov	r4, r2
 8004408:	b09d      	sub	sp, #116	; 0x74
 800440a:	d50e      	bpl.n	800442a <_svfiprintf_r+0x32>
 800440c:	690b      	ldr	r3, [r1, #16]
 800440e:	b963      	cbnz	r3, 800442a <_svfiprintf_r+0x32>
 8004410:	2140      	movs	r1, #64	; 0x40
 8004412:	f7ff ff21 	bl	8004258 <_malloc_r>
 8004416:	6028      	str	r0, [r5, #0]
 8004418:	6128      	str	r0, [r5, #16]
 800441a:	b920      	cbnz	r0, 8004426 <_svfiprintf_r+0x2e>
 800441c:	230c      	movs	r3, #12
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	e0d1      	b.n	80045ca <_svfiprintf_r+0x1d2>
 8004426:	2340      	movs	r3, #64	; 0x40
 8004428:	616b      	str	r3, [r5, #20]
 800442a:	2300      	movs	r3, #0
 800442c:	9309      	str	r3, [sp, #36]	; 0x24
 800442e:	2320      	movs	r3, #32
 8004430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004434:	2330      	movs	r3, #48	; 0x30
 8004436:	f04f 0901 	mov.w	r9, #1
 800443a:	f8cd 800c 	str.w	r8, [sp, #12]
 800443e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045e4 <_svfiprintf_r+0x1ec>
 8004442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004446:	4623      	mov	r3, r4
 8004448:	469a      	mov	sl, r3
 800444a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800444e:	b10a      	cbz	r2, 8004454 <_svfiprintf_r+0x5c>
 8004450:	2a25      	cmp	r2, #37	; 0x25
 8004452:	d1f9      	bne.n	8004448 <_svfiprintf_r+0x50>
 8004454:	ebba 0b04 	subs.w	fp, sl, r4
 8004458:	d00b      	beq.n	8004472 <_svfiprintf_r+0x7a>
 800445a:	465b      	mov	r3, fp
 800445c:	4622      	mov	r2, r4
 800445e:	4629      	mov	r1, r5
 8004460:	4638      	mov	r0, r7
 8004462:	f7ff ff6d 	bl	8004340 <__ssputs_r>
 8004466:	3001      	adds	r0, #1
 8004468:	f000 80aa 	beq.w	80045c0 <_svfiprintf_r+0x1c8>
 800446c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800446e:	445a      	add	r2, fp
 8004470:	9209      	str	r2, [sp, #36]	; 0x24
 8004472:	f89a 3000 	ldrb.w	r3, [sl]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80a2 	beq.w	80045c0 <_svfiprintf_r+0x1c8>
 800447c:	2300      	movs	r3, #0
 800447e:	f04f 32ff 	mov.w	r2, #4294967295
 8004482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004486:	f10a 0a01 	add.w	sl, sl, #1
 800448a:	9304      	str	r3, [sp, #16]
 800448c:	9307      	str	r3, [sp, #28]
 800448e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004492:	931a      	str	r3, [sp, #104]	; 0x68
 8004494:	4654      	mov	r4, sl
 8004496:	2205      	movs	r2, #5
 8004498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800449c:	4851      	ldr	r0, [pc, #324]	; (80045e4 <_svfiprintf_r+0x1ec>)
 800449e:	f000 fc43 	bl	8004d28 <memchr>
 80044a2:	9a04      	ldr	r2, [sp, #16]
 80044a4:	b9d8      	cbnz	r0, 80044de <_svfiprintf_r+0xe6>
 80044a6:	06d0      	lsls	r0, r2, #27
 80044a8:	bf44      	itt	mi
 80044aa:	2320      	movmi	r3, #32
 80044ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044b0:	0711      	lsls	r1, r2, #28
 80044b2:	bf44      	itt	mi
 80044b4:	232b      	movmi	r3, #43	; 0x2b
 80044b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ba:	f89a 3000 	ldrb.w	r3, [sl]
 80044be:	2b2a      	cmp	r3, #42	; 0x2a
 80044c0:	d015      	beq.n	80044ee <_svfiprintf_r+0xf6>
 80044c2:	4654      	mov	r4, sl
 80044c4:	2000      	movs	r0, #0
 80044c6:	f04f 0c0a 	mov.w	ip, #10
 80044ca:	9a07      	ldr	r2, [sp, #28]
 80044cc:	4621      	mov	r1, r4
 80044ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044d2:	3b30      	subs	r3, #48	; 0x30
 80044d4:	2b09      	cmp	r3, #9
 80044d6:	d94e      	bls.n	8004576 <_svfiprintf_r+0x17e>
 80044d8:	b1b0      	cbz	r0, 8004508 <_svfiprintf_r+0x110>
 80044da:	9207      	str	r2, [sp, #28]
 80044dc:	e014      	b.n	8004508 <_svfiprintf_r+0x110>
 80044de:	eba0 0308 	sub.w	r3, r0, r8
 80044e2:	fa09 f303 	lsl.w	r3, r9, r3
 80044e6:	4313      	orrs	r3, r2
 80044e8:	46a2      	mov	sl, r4
 80044ea:	9304      	str	r3, [sp, #16]
 80044ec:	e7d2      	b.n	8004494 <_svfiprintf_r+0x9c>
 80044ee:	9b03      	ldr	r3, [sp, #12]
 80044f0:	1d19      	adds	r1, r3, #4
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	9103      	str	r1, [sp, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bfbb      	ittet	lt
 80044fa:	425b      	neglt	r3, r3
 80044fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004500:	9307      	strge	r3, [sp, #28]
 8004502:	9307      	strlt	r3, [sp, #28]
 8004504:	bfb8      	it	lt
 8004506:	9204      	strlt	r2, [sp, #16]
 8004508:	7823      	ldrb	r3, [r4, #0]
 800450a:	2b2e      	cmp	r3, #46	; 0x2e
 800450c:	d10c      	bne.n	8004528 <_svfiprintf_r+0x130>
 800450e:	7863      	ldrb	r3, [r4, #1]
 8004510:	2b2a      	cmp	r3, #42	; 0x2a
 8004512:	d135      	bne.n	8004580 <_svfiprintf_r+0x188>
 8004514:	9b03      	ldr	r3, [sp, #12]
 8004516:	3402      	adds	r4, #2
 8004518:	1d1a      	adds	r2, r3, #4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	9203      	str	r2, [sp, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	bfb8      	it	lt
 8004522:	f04f 33ff 	movlt.w	r3, #4294967295
 8004526:	9305      	str	r3, [sp, #20]
 8004528:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80045e8 <_svfiprintf_r+0x1f0>
 800452c:	2203      	movs	r2, #3
 800452e:	4650      	mov	r0, sl
 8004530:	7821      	ldrb	r1, [r4, #0]
 8004532:	f000 fbf9 	bl	8004d28 <memchr>
 8004536:	b140      	cbz	r0, 800454a <_svfiprintf_r+0x152>
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	eba0 000a 	sub.w	r0, r0, sl
 800453e:	fa03 f000 	lsl.w	r0, r3, r0
 8004542:	9b04      	ldr	r3, [sp, #16]
 8004544:	3401      	adds	r4, #1
 8004546:	4303      	orrs	r3, r0
 8004548:	9304      	str	r3, [sp, #16]
 800454a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454e:	2206      	movs	r2, #6
 8004550:	4826      	ldr	r0, [pc, #152]	; (80045ec <_svfiprintf_r+0x1f4>)
 8004552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004556:	f000 fbe7 	bl	8004d28 <memchr>
 800455a:	2800      	cmp	r0, #0
 800455c:	d038      	beq.n	80045d0 <_svfiprintf_r+0x1d8>
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <_svfiprintf_r+0x1f8>)
 8004560:	bb1b      	cbnz	r3, 80045aa <_svfiprintf_r+0x1b2>
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	3307      	adds	r3, #7
 8004566:	f023 0307 	bic.w	r3, r3, #7
 800456a:	3308      	adds	r3, #8
 800456c:	9303      	str	r3, [sp, #12]
 800456e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004570:	4433      	add	r3, r6
 8004572:	9309      	str	r3, [sp, #36]	; 0x24
 8004574:	e767      	b.n	8004446 <_svfiprintf_r+0x4e>
 8004576:	460c      	mov	r4, r1
 8004578:	2001      	movs	r0, #1
 800457a:	fb0c 3202 	mla	r2, ip, r2, r3
 800457e:	e7a5      	b.n	80044cc <_svfiprintf_r+0xd4>
 8004580:	2300      	movs	r3, #0
 8004582:	f04f 0c0a 	mov.w	ip, #10
 8004586:	4619      	mov	r1, r3
 8004588:	3401      	adds	r4, #1
 800458a:	9305      	str	r3, [sp, #20]
 800458c:	4620      	mov	r0, r4
 800458e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004592:	3a30      	subs	r2, #48	; 0x30
 8004594:	2a09      	cmp	r2, #9
 8004596:	d903      	bls.n	80045a0 <_svfiprintf_r+0x1a8>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0c5      	beq.n	8004528 <_svfiprintf_r+0x130>
 800459c:	9105      	str	r1, [sp, #20]
 800459e:	e7c3      	b.n	8004528 <_svfiprintf_r+0x130>
 80045a0:	4604      	mov	r4, r0
 80045a2:	2301      	movs	r3, #1
 80045a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80045a8:	e7f0      	b.n	800458c <_svfiprintf_r+0x194>
 80045aa:	ab03      	add	r3, sp, #12
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	462a      	mov	r2, r5
 80045b0:	4638      	mov	r0, r7
 80045b2:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <_svfiprintf_r+0x1fc>)
 80045b4:	a904      	add	r1, sp, #16
 80045b6:	f3af 8000 	nop.w
 80045ba:	1c42      	adds	r2, r0, #1
 80045bc:	4606      	mov	r6, r0
 80045be:	d1d6      	bne.n	800456e <_svfiprintf_r+0x176>
 80045c0:	89ab      	ldrh	r3, [r5, #12]
 80045c2:	065b      	lsls	r3, r3, #25
 80045c4:	f53f af2c 	bmi.w	8004420 <_svfiprintf_r+0x28>
 80045c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045ca:	b01d      	add	sp, #116	; 0x74
 80045cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d0:	ab03      	add	r3, sp, #12
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	462a      	mov	r2, r5
 80045d6:	4638      	mov	r0, r7
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <_svfiprintf_r+0x1fc>)
 80045da:	a904      	add	r1, sp, #16
 80045dc:	f000 f9d4 	bl	8004988 <_printf_i>
 80045e0:	e7eb      	b.n	80045ba <_svfiprintf_r+0x1c2>
 80045e2:	bf00      	nop
 80045e4:	080050ac 	.word	0x080050ac
 80045e8:	080050b2 	.word	0x080050b2
 80045ec:	080050b6 	.word	0x080050b6
 80045f0:	00000000 	.word	0x00000000
 80045f4:	08004341 	.word	0x08004341

080045f8 <__sfputc_r>:
 80045f8:	6893      	ldr	r3, [r2, #8]
 80045fa:	b410      	push	{r4}
 80045fc:	3b01      	subs	r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	6093      	str	r3, [r2, #8]
 8004602:	da07      	bge.n	8004614 <__sfputc_r+0x1c>
 8004604:	6994      	ldr	r4, [r2, #24]
 8004606:	42a3      	cmp	r3, r4
 8004608:	db01      	blt.n	800460e <__sfputc_r+0x16>
 800460a:	290a      	cmp	r1, #10
 800460c:	d102      	bne.n	8004614 <__sfputc_r+0x1c>
 800460e:	bc10      	pop	{r4}
 8004610:	f7ff bade 	b.w	8003bd0 <__swbuf_r>
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	1c58      	adds	r0, r3, #1
 8004618:	6010      	str	r0, [r2, #0]
 800461a:	7019      	strb	r1, [r3, #0]
 800461c:	4608      	mov	r0, r1
 800461e:	bc10      	pop	{r4}
 8004620:	4770      	bx	lr

08004622 <__sfputs_r>:
 8004622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004624:	4606      	mov	r6, r0
 8004626:	460f      	mov	r7, r1
 8004628:	4614      	mov	r4, r2
 800462a:	18d5      	adds	r5, r2, r3
 800462c:	42ac      	cmp	r4, r5
 800462e:	d101      	bne.n	8004634 <__sfputs_r+0x12>
 8004630:	2000      	movs	r0, #0
 8004632:	e007      	b.n	8004644 <__sfputs_r+0x22>
 8004634:	463a      	mov	r2, r7
 8004636:	4630      	mov	r0, r6
 8004638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463c:	f7ff ffdc 	bl	80045f8 <__sfputc_r>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d1f3      	bne.n	800462c <__sfputs_r+0xa>
 8004644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004648 <_vfiprintf_r>:
 8004648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464c:	460d      	mov	r5, r1
 800464e:	4614      	mov	r4, r2
 8004650:	4698      	mov	r8, r3
 8004652:	4606      	mov	r6, r0
 8004654:	b09d      	sub	sp, #116	; 0x74
 8004656:	b118      	cbz	r0, 8004660 <_vfiprintf_r+0x18>
 8004658:	6983      	ldr	r3, [r0, #24]
 800465a:	b90b      	cbnz	r3, 8004660 <_vfiprintf_r+0x18>
 800465c:	f7ff fc8e 	bl	8003f7c <__sinit>
 8004660:	4b89      	ldr	r3, [pc, #548]	; (8004888 <_vfiprintf_r+0x240>)
 8004662:	429d      	cmp	r5, r3
 8004664:	d11b      	bne.n	800469e <_vfiprintf_r+0x56>
 8004666:	6875      	ldr	r5, [r6, #4]
 8004668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800466a:	07d9      	lsls	r1, r3, #31
 800466c:	d405      	bmi.n	800467a <_vfiprintf_r+0x32>
 800466e:	89ab      	ldrh	r3, [r5, #12]
 8004670:	059a      	lsls	r2, r3, #22
 8004672:	d402      	bmi.n	800467a <_vfiprintf_r+0x32>
 8004674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004676:	f7ff fd1f 	bl	80040b8 <__retarget_lock_acquire_recursive>
 800467a:	89ab      	ldrh	r3, [r5, #12]
 800467c:	071b      	lsls	r3, r3, #28
 800467e:	d501      	bpl.n	8004684 <_vfiprintf_r+0x3c>
 8004680:	692b      	ldr	r3, [r5, #16]
 8004682:	b9eb      	cbnz	r3, 80046c0 <_vfiprintf_r+0x78>
 8004684:	4629      	mov	r1, r5
 8004686:	4630      	mov	r0, r6
 8004688:	f7ff faf4 	bl	8003c74 <__swsetup_r>
 800468c:	b1c0      	cbz	r0, 80046c0 <_vfiprintf_r+0x78>
 800468e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004690:	07dc      	lsls	r4, r3, #31
 8004692:	d50e      	bpl.n	80046b2 <_vfiprintf_r+0x6a>
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	b01d      	add	sp, #116	; 0x74
 800469a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469e:	4b7b      	ldr	r3, [pc, #492]	; (800488c <_vfiprintf_r+0x244>)
 80046a0:	429d      	cmp	r5, r3
 80046a2:	d101      	bne.n	80046a8 <_vfiprintf_r+0x60>
 80046a4:	68b5      	ldr	r5, [r6, #8]
 80046a6:	e7df      	b.n	8004668 <_vfiprintf_r+0x20>
 80046a8:	4b79      	ldr	r3, [pc, #484]	; (8004890 <_vfiprintf_r+0x248>)
 80046aa:	429d      	cmp	r5, r3
 80046ac:	bf08      	it	eq
 80046ae:	68f5      	ldreq	r5, [r6, #12]
 80046b0:	e7da      	b.n	8004668 <_vfiprintf_r+0x20>
 80046b2:	89ab      	ldrh	r3, [r5, #12]
 80046b4:	0598      	lsls	r0, r3, #22
 80046b6:	d4ed      	bmi.n	8004694 <_vfiprintf_r+0x4c>
 80046b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046ba:	f7ff fcfe 	bl	80040ba <__retarget_lock_release_recursive>
 80046be:	e7e9      	b.n	8004694 <_vfiprintf_r+0x4c>
 80046c0:	2300      	movs	r3, #0
 80046c2:	9309      	str	r3, [sp, #36]	; 0x24
 80046c4:	2320      	movs	r3, #32
 80046c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046ca:	2330      	movs	r3, #48	; 0x30
 80046cc:	f04f 0901 	mov.w	r9, #1
 80046d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004894 <_vfiprintf_r+0x24c>
 80046d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046dc:	4623      	mov	r3, r4
 80046de:	469a      	mov	sl, r3
 80046e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046e4:	b10a      	cbz	r2, 80046ea <_vfiprintf_r+0xa2>
 80046e6:	2a25      	cmp	r2, #37	; 0x25
 80046e8:	d1f9      	bne.n	80046de <_vfiprintf_r+0x96>
 80046ea:	ebba 0b04 	subs.w	fp, sl, r4
 80046ee:	d00b      	beq.n	8004708 <_vfiprintf_r+0xc0>
 80046f0:	465b      	mov	r3, fp
 80046f2:	4622      	mov	r2, r4
 80046f4:	4629      	mov	r1, r5
 80046f6:	4630      	mov	r0, r6
 80046f8:	f7ff ff93 	bl	8004622 <__sfputs_r>
 80046fc:	3001      	adds	r0, #1
 80046fe:	f000 80aa 	beq.w	8004856 <_vfiprintf_r+0x20e>
 8004702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004704:	445a      	add	r2, fp
 8004706:	9209      	str	r2, [sp, #36]	; 0x24
 8004708:	f89a 3000 	ldrb.w	r3, [sl]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80a2 	beq.w	8004856 <_vfiprintf_r+0x20e>
 8004712:	2300      	movs	r3, #0
 8004714:	f04f 32ff 	mov.w	r2, #4294967295
 8004718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800471c:	f10a 0a01 	add.w	sl, sl, #1
 8004720:	9304      	str	r3, [sp, #16]
 8004722:	9307      	str	r3, [sp, #28]
 8004724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004728:	931a      	str	r3, [sp, #104]	; 0x68
 800472a:	4654      	mov	r4, sl
 800472c:	2205      	movs	r2, #5
 800472e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004732:	4858      	ldr	r0, [pc, #352]	; (8004894 <_vfiprintf_r+0x24c>)
 8004734:	f000 faf8 	bl	8004d28 <memchr>
 8004738:	9a04      	ldr	r2, [sp, #16]
 800473a:	b9d8      	cbnz	r0, 8004774 <_vfiprintf_r+0x12c>
 800473c:	06d1      	lsls	r1, r2, #27
 800473e:	bf44      	itt	mi
 8004740:	2320      	movmi	r3, #32
 8004742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004746:	0713      	lsls	r3, r2, #28
 8004748:	bf44      	itt	mi
 800474a:	232b      	movmi	r3, #43	; 0x2b
 800474c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004750:	f89a 3000 	ldrb.w	r3, [sl]
 8004754:	2b2a      	cmp	r3, #42	; 0x2a
 8004756:	d015      	beq.n	8004784 <_vfiprintf_r+0x13c>
 8004758:	4654      	mov	r4, sl
 800475a:	2000      	movs	r0, #0
 800475c:	f04f 0c0a 	mov.w	ip, #10
 8004760:	9a07      	ldr	r2, [sp, #28]
 8004762:	4621      	mov	r1, r4
 8004764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004768:	3b30      	subs	r3, #48	; 0x30
 800476a:	2b09      	cmp	r3, #9
 800476c:	d94e      	bls.n	800480c <_vfiprintf_r+0x1c4>
 800476e:	b1b0      	cbz	r0, 800479e <_vfiprintf_r+0x156>
 8004770:	9207      	str	r2, [sp, #28]
 8004772:	e014      	b.n	800479e <_vfiprintf_r+0x156>
 8004774:	eba0 0308 	sub.w	r3, r0, r8
 8004778:	fa09 f303 	lsl.w	r3, r9, r3
 800477c:	4313      	orrs	r3, r2
 800477e:	46a2      	mov	sl, r4
 8004780:	9304      	str	r3, [sp, #16]
 8004782:	e7d2      	b.n	800472a <_vfiprintf_r+0xe2>
 8004784:	9b03      	ldr	r3, [sp, #12]
 8004786:	1d19      	adds	r1, r3, #4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	9103      	str	r1, [sp, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	bfbb      	ittet	lt
 8004790:	425b      	neglt	r3, r3
 8004792:	f042 0202 	orrlt.w	r2, r2, #2
 8004796:	9307      	strge	r3, [sp, #28]
 8004798:	9307      	strlt	r3, [sp, #28]
 800479a:	bfb8      	it	lt
 800479c:	9204      	strlt	r2, [sp, #16]
 800479e:	7823      	ldrb	r3, [r4, #0]
 80047a0:	2b2e      	cmp	r3, #46	; 0x2e
 80047a2:	d10c      	bne.n	80047be <_vfiprintf_r+0x176>
 80047a4:	7863      	ldrb	r3, [r4, #1]
 80047a6:	2b2a      	cmp	r3, #42	; 0x2a
 80047a8:	d135      	bne.n	8004816 <_vfiprintf_r+0x1ce>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	3402      	adds	r4, #2
 80047ae:	1d1a      	adds	r2, r3, #4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	9203      	str	r2, [sp, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bfb8      	it	lt
 80047b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80047bc:	9305      	str	r3, [sp, #20]
 80047be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004898 <_vfiprintf_r+0x250>
 80047c2:	2203      	movs	r2, #3
 80047c4:	4650      	mov	r0, sl
 80047c6:	7821      	ldrb	r1, [r4, #0]
 80047c8:	f000 faae 	bl	8004d28 <memchr>
 80047cc:	b140      	cbz	r0, 80047e0 <_vfiprintf_r+0x198>
 80047ce:	2340      	movs	r3, #64	; 0x40
 80047d0:	eba0 000a 	sub.w	r0, r0, sl
 80047d4:	fa03 f000 	lsl.w	r0, r3, r0
 80047d8:	9b04      	ldr	r3, [sp, #16]
 80047da:	3401      	adds	r4, #1
 80047dc:	4303      	orrs	r3, r0
 80047de:	9304      	str	r3, [sp, #16]
 80047e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e4:	2206      	movs	r2, #6
 80047e6:	482d      	ldr	r0, [pc, #180]	; (800489c <_vfiprintf_r+0x254>)
 80047e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ec:	f000 fa9c 	bl	8004d28 <memchr>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d03f      	beq.n	8004874 <_vfiprintf_r+0x22c>
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <_vfiprintf_r+0x258>)
 80047f6:	bb1b      	cbnz	r3, 8004840 <_vfiprintf_r+0x1f8>
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	3307      	adds	r3, #7
 80047fc:	f023 0307 	bic.w	r3, r3, #7
 8004800:	3308      	adds	r3, #8
 8004802:	9303      	str	r3, [sp, #12]
 8004804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004806:	443b      	add	r3, r7
 8004808:	9309      	str	r3, [sp, #36]	; 0x24
 800480a:	e767      	b.n	80046dc <_vfiprintf_r+0x94>
 800480c:	460c      	mov	r4, r1
 800480e:	2001      	movs	r0, #1
 8004810:	fb0c 3202 	mla	r2, ip, r2, r3
 8004814:	e7a5      	b.n	8004762 <_vfiprintf_r+0x11a>
 8004816:	2300      	movs	r3, #0
 8004818:	f04f 0c0a 	mov.w	ip, #10
 800481c:	4619      	mov	r1, r3
 800481e:	3401      	adds	r4, #1
 8004820:	9305      	str	r3, [sp, #20]
 8004822:	4620      	mov	r0, r4
 8004824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004828:	3a30      	subs	r2, #48	; 0x30
 800482a:	2a09      	cmp	r2, #9
 800482c:	d903      	bls.n	8004836 <_vfiprintf_r+0x1ee>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0c5      	beq.n	80047be <_vfiprintf_r+0x176>
 8004832:	9105      	str	r1, [sp, #20]
 8004834:	e7c3      	b.n	80047be <_vfiprintf_r+0x176>
 8004836:	4604      	mov	r4, r0
 8004838:	2301      	movs	r3, #1
 800483a:	fb0c 2101 	mla	r1, ip, r1, r2
 800483e:	e7f0      	b.n	8004822 <_vfiprintf_r+0x1da>
 8004840:	ab03      	add	r3, sp, #12
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	462a      	mov	r2, r5
 8004846:	4630      	mov	r0, r6
 8004848:	4b16      	ldr	r3, [pc, #88]	; (80048a4 <_vfiprintf_r+0x25c>)
 800484a:	a904      	add	r1, sp, #16
 800484c:	f3af 8000 	nop.w
 8004850:	4607      	mov	r7, r0
 8004852:	1c78      	adds	r0, r7, #1
 8004854:	d1d6      	bne.n	8004804 <_vfiprintf_r+0x1bc>
 8004856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004858:	07d9      	lsls	r1, r3, #31
 800485a:	d405      	bmi.n	8004868 <_vfiprintf_r+0x220>
 800485c:	89ab      	ldrh	r3, [r5, #12]
 800485e:	059a      	lsls	r2, r3, #22
 8004860:	d402      	bmi.n	8004868 <_vfiprintf_r+0x220>
 8004862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004864:	f7ff fc29 	bl	80040ba <__retarget_lock_release_recursive>
 8004868:	89ab      	ldrh	r3, [r5, #12]
 800486a:	065b      	lsls	r3, r3, #25
 800486c:	f53f af12 	bmi.w	8004694 <_vfiprintf_r+0x4c>
 8004870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004872:	e711      	b.n	8004698 <_vfiprintf_r+0x50>
 8004874:	ab03      	add	r3, sp, #12
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	462a      	mov	r2, r5
 800487a:	4630      	mov	r0, r6
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <_vfiprintf_r+0x25c>)
 800487e:	a904      	add	r1, sp, #16
 8004880:	f000 f882 	bl	8004988 <_printf_i>
 8004884:	e7e4      	b.n	8004850 <_vfiprintf_r+0x208>
 8004886:	bf00      	nop
 8004888:	0800506c 	.word	0x0800506c
 800488c:	0800508c 	.word	0x0800508c
 8004890:	0800504c 	.word	0x0800504c
 8004894:	080050ac 	.word	0x080050ac
 8004898:	080050b2 	.word	0x080050b2
 800489c:	080050b6 	.word	0x080050b6
 80048a0:	00000000 	.word	0x00000000
 80048a4:	08004623 	.word	0x08004623

080048a8 <_printf_common>:
 80048a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	4616      	mov	r6, r2
 80048ae:	4699      	mov	r9, r3
 80048b0:	688a      	ldr	r2, [r1, #8]
 80048b2:	690b      	ldr	r3, [r1, #16]
 80048b4:	4607      	mov	r7, r0
 80048b6:	4293      	cmp	r3, r2
 80048b8:	bfb8      	it	lt
 80048ba:	4613      	movlt	r3, r2
 80048bc:	6033      	str	r3, [r6, #0]
 80048be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048c2:	460c      	mov	r4, r1
 80048c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048c8:	b10a      	cbz	r2, 80048ce <_printf_common+0x26>
 80048ca:	3301      	adds	r3, #1
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	0699      	lsls	r1, r3, #26
 80048d2:	bf42      	ittt	mi
 80048d4:	6833      	ldrmi	r3, [r6, #0]
 80048d6:	3302      	addmi	r3, #2
 80048d8:	6033      	strmi	r3, [r6, #0]
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	f015 0506 	ands.w	r5, r5, #6
 80048e0:	d106      	bne.n	80048f0 <_printf_common+0x48>
 80048e2:	f104 0a19 	add.w	sl, r4, #25
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	6832      	ldr	r2, [r6, #0]
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	42ab      	cmp	r3, r5
 80048ee:	dc28      	bgt.n	8004942 <_printf_common+0x9a>
 80048f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048f4:	1e13      	subs	r3, r2, #0
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	bf18      	it	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	0692      	lsls	r2, r2, #26
 80048fe:	d42d      	bmi.n	800495c <_printf_common+0xb4>
 8004900:	4649      	mov	r1, r9
 8004902:	4638      	mov	r0, r7
 8004904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004908:	47c0      	blx	r8
 800490a:	3001      	adds	r0, #1
 800490c:	d020      	beq.n	8004950 <_printf_common+0xa8>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	68e5      	ldr	r5, [r4, #12]
 8004912:	f003 0306 	and.w	r3, r3, #6
 8004916:	2b04      	cmp	r3, #4
 8004918:	bf18      	it	ne
 800491a:	2500      	movne	r5, #0
 800491c:	6832      	ldr	r2, [r6, #0]
 800491e:	f04f 0600 	mov.w	r6, #0
 8004922:	68a3      	ldr	r3, [r4, #8]
 8004924:	bf08      	it	eq
 8004926:	1aad      	subeq	r5, r5, r2
 8004928:	6922      	ldr	r2, [r4, #16]
 800492a:	bf08      	it	eq
 800492c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004930:	4293      	cmp	r3, r2
 8004932:	bfc4      	itt	gt
 8004934:	1a9b      	subgt	r3, r3, r2
 8004936:	18ed      	addgt	r5, r5, r3
 8004938:	341a      	adds	r4, #26
 800493a:	42b5      	cmp	r5, r6
 800493c:	d11a      	bne.n	8004974 <_printf_common+0xcc>
 800493e:	2000      	movs	r0, #0
 8004940:	e008      	b.n	8004954 <_printf_common+0xac>
 8004942:	2301      	movs	r3, #1
 8004944:	4652      	mov	r2, sl
 8004946:	4649      	mov	r1, r9
 8004948:	4638      	mov	r0, r7
 800494a:	47c0      	blx	r8
 800494c:	3001      	adds	r0, #1
 800494e:	d103      	bne.n	8004958 <_printf_common+0xb0>
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004958:	3501      	adds	r5, #1
 800495a:	e7c4      	b.n	80048e6 <_printf_common+0x3e>
 800495c:	2030      	movs	r0, #48	; 0x30
 800495e:	18e1      	adds	r1, r4, r3
 8004960:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800496a:	4422      	add	r2, r4
 800496c:	3302      	adds	r3, #2
 800496e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004972:	e7c5      	b.n	8004900 <_printf_common+0x58>
 8004974:	2301      	movs	r3, #1
 8004976:	4622      	mov	r2, r4
 8004978:	4649      	mov	r1, r9
 800497a:	4638      	mov	r0, r7
 800497c:	47c0      	blx	r8
 800497e:	3001      	adds	r0, #1
 8004980:	d0e6      	beq.n	8004950 <_printf_common+0xa8>
 8004982:	3601      	adds	r6, #1
 8004984:	e7d9      	b.n	800493a <_printf_common+0x92>
	...

08004988 <_printf_i>:
 8004988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800498c:	7e0f      	ldrb	r7, [r1, #24]
 800498e:	4691      	mov	r9, r2
 8004990:	2f78      	cmp	r7, #120	; 0x78
 8004992:	4680      	mov	r8, r0
 8004994:	460c      	mov	r4, r1
 8004996:	469a      	mov	sl, r3
 8004998:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800499a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800499e:	d807      	bhi.n	80049b0 <_printf_i+0x28>
 80049a0:	2f62      	cmp	r7, #98	; 0x62
 80049a2:	d80a      	bhi.n	80049ba <_printf_i+0x32>
 80049a4:	2f00      	cmp	r7, #0
 80049a6:	f000 80d9 	beq.w	8004b5c <_printf_i+0x1d4>
 80049aa:	2f58      	cmp	r7, #88	; 0x58
 80049ac:	f000 80a4 	beq.w	8004af8 <_printf_i+0x170>
 80049b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049b8:	e03a      	b.n	8004a30 <_printf_i+0xa8>
 80049ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049be:	2b15      	cmp	r3, #21
 80049c0:	d8f6      	bhi.n	80049b0 <_printf_i+0x28>
 80049c2:	a101      	add	r1, pc, #4	; (adr r1, 80049c8 <_printf_i+0x40>)
 80049c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049c8:	08004a21 	.word	0x08004a21
 80049cc:	08004a35 	.word	0x08004a35
 80049d0:	080049b1 	.word	0x080049b1
 80049d4:	080049b1 	.word	0x080049b1
 80049d8:	080049b1 	.word	0x080049b1
 80049dc:	080049b1 	.word	0x080049b1
 80049e0:	08004a35 	.word	0x08004a35
 80049e4:	080049b1 	.word	0x080049b1
 80049e8:	080049b1 	.word	0x080049b1
 80049ec:	080049b1 	.word	0x080049b1
 80049f0:	080049b1 	.word	0x080049b1
 80049f4:	08004b43 	.word	0x08004b43
 80049f8:	08004a65 	.word	0x08004a65
 80049fc:	08004b25 	.word	0x08004b25
 8004a00:	080049b1 	.word	0x080049b1
 8004a04:	080049b1 	.word	0x080049b1
 8004a08:	08004b65 	.word	0x08004b65
 8004a0c:	080049b1 	.word	0x080049b1
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	080049b1 	.word	0x080049b1
 8004a18:	080049b1 	.word	0x080049b1
 8004a1c:	08004b2d 	.word	0x08004b2d
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	1d1a      	adds	r2, r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	602a      	str	r2, [r5, #0]
 8004a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0a4      	b.n	8004b7e <_printf_i+0x1f6>
 8004a34:	6820      	ldr	r0, [r4, #0]
 8004a36:	6829      	ldr	r1, [r5, #0]
 8004a38:	0606      	lsls	r6, r0, #24
 8004a3a:	f101 0304 	add.w	r3, r1, #4
 8004a3e:	d50a      	bpl.n	8004a56 <_printf_i+0xce>
 8004a40:	680e      	ldr	r6, [r1, #0]
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	2e00      	cmp	r6, #0
 8004a46:	da03      	bge.n	8004a50 <_printf_i+0xc8>
 8004a48:	232d      	movs	r3, #45	; 0x2d
 8004a4a:	4276      	negs	r6, r6
 8004a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a50:	230a      	movs	r3, #10
 8004a52:	485e      	ldr	r0, [pc, #376]	; (8004bcc <_printf_i+0x244>)
 8004a54:	e019      	b.n	8004a8a <_printf_i+0x102>
 8004a56:	680e      	ldr	r6, [r1, #0]
 8004a58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a5c:	602b      	str	r3, [r5, #0]
 8004a5e:	bf18      	it	ne
 8004a60:	b236      	sxthne	r6, r6
 8004a62:	e7ef      	b.n	8004a44 <_printf_i+0xbc>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	6820      	ldr	r0, [r4, #0]
 8004a68:	1d19      	adds	r1, r3, #4
 8004a6a:	6029      	str	r1, [r5, #0]
 8004a6c:	0601      	lsls	r1, r0, #24
 8004a6e:	d501      	bpl.n	8004a74 <_printf_i+0xec>
 8004a70:	681e      	ldr	r6, [r3, #0]
 8004a72:	e002      	b.n	8004a7a <_printf_i+0xf2>
 8004a74:	0646      	lsls	r6, r0, #25
 8004a76:	d5fb      	bpl.n	8004a70 <_printf_i+0xe8>
 8004a78:	881e      	ldrh	r6, [r3, #0]
 8004a7a:	2f6f      	cmp	r7, #111	; 0x6f
 8004a7c:	bf0c      	ite	eq
 8004a7e:	2308      	moveq	r3, #8
 8004a80:	230a      	movne	r3, #10
 8004a82:	4852      	ldr	r0, [pc, #328]	; (8004bcc <_printf_i+0x244>)
 8004a84:	2100      	movs	r1, #0
 8004a86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a8a:	6865      	ldr	r5, [r4, #4]
 8004a8c:	2d00      	cmp	r5, #0
 8004a8e:	bfa8      	it	ge
 8004a90:	6821      	ldrge	r1, [r4, #0]
 8004a92:	60a5      	str	r5, [r4, #8]
 8004a94:	bfa4      	itt	ge
 8004a96:	f021 0104 	bicge.w	r1, r1, #4
 8004a9a:	6021      	strge	r1, [r4, #0]
 8004a9c:	b90e      	cbnz	r6, 8004aa2 <_printf_i+0x11a>
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	d04d      	beq.n	8004b3e <_printf_i+0x1b6>
 8004aa2:	4615      	mov	r5, r2
 8004aa4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004aa8:	fb03 6711 	mls	r7, r3, r1, r6
 8004aac:	5dc7      	ldrb	r7, [r0, r7]
 8004aae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ab2:	4637      	mov	r7, r6
 8004ab4:	42bb      	cmp	r3, r7
 8004ab6:	460e      	mov	r6, r1
 8004ab8:	d9f4      	bls.n	8004aa4 <_printf_i+0x11c>
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d10b      	bne.n	8004ad6 <_printf_i+0x14e>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	07de      	lsls	r6, r3, #31
 8004ac2:	d508      	bpl.n	8004ad6 <_printf_i+0x14e>
 8004ac4:	6923      	ldr	r3, [r4, #16]
 8004ac6:	6861      	ldr	r1, [r4, #4]
 8004ac8:	4299      	cmp	r1, r3
 8004aca:	bfde      	ittt	le
 8004acc:	2330      	movle	r3, #48	; 0x30
 8004ace:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ad2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ad6:	1b52      	subs	r2, r2, r5
 8004ad8:	6122      	str	r2, [r4, #16]
 8004ada:	464b      	mov	r3, r9
 8004adc:	4621      	mov	r1, r4
 8004ade:	4640      	mov	r0, r8
 8004ae0:	f8cd a000 	str.w	sl, [sp]
 8004ae4:	aa03      	add	r2, sp, #12
 8004ae6:	f7ff fedf 	bl	80048a8 <_printf_common>
 8004aea:	3001      	adds	r0, #1
 8004aec:	d14c      	bne.n	8004b88 <_printf_i+0x200>
 8004aee:	f04f 30ff 	mov.w	r0, #4294967295
 8004af2:	b004      	add	sp, #16
 8004af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af8:	4834      	ldr	r0, [pc, #208]	; (8004bcc <_printf_i+0x244>)
 8004afa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004afe:	6829      	ldr	r1, [r5, #0]
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b06:	6029      	str	r1, [r5, #0]
 8004b08:	061d      	lsls	r5, r3, #24
 8004b0a:	d514      	bpl.n	8004b36 <_printf_i+0x1ae>
 8004b0c:	07df      	lsls	r7, r3, #31
 8004b0e:	bf44      	itt	mi
 8004b10:	f043 0320 	orrmi.w	r3, r3, #32
 8004b14:	6023      	strmi	r3, [r4, #0]
 8004b16:	b91e      	cbnz	r6, 8004b20 <_printf_i+0x198>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	f023 0320 	bic.w	r3, r3, #32
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	2310      	movs	r3, #16
 8004b22:	e7af      	b.n	8004a84 <_printf_i+0xfc>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	f043 0320 	orr.w	r3, r3, #32
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	2378      	movs	r3, #120	; 0x78
 8004b2e:	4828      	ldr	r0, [pc, #160]	; (8004bd0 <_printf_i+0x248>)
 8004b30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b34:	e7e3      	b.n	8004afe <_printf_i+0x176>
 8004b36:	0659      	lsls	r1, r3, #25
 8004b38:	bf48      	it	mi
 8004b3a:	b2b6      	uxthmi	r6, r6
 8004b3c:	e7e6      	b.n	8004b0c <_printf_i+0x184>
 8004b3e:	4615      	mov	r5, r2
 8004b40:	e7bb      	b.n	8004aba <_printf_i+0x132>
 8004b42:	682b      	ldr	r3, [r5, #0]
 8004b44:	6826      	ldr	r6, [r4, #0]
 8004b46:	1d18      	adds	r0, r3, #4
 8004b48:	6961      	ldr	r1, [r4, #20]
 8004b4a:	6028      	str	r0, [r5, #0]
 8004b4c:	0635      	lsls	r5, r6, #24
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	d501      	bpl.n	8004b56 <_printf_i+0x1ce>
 8004b52:	6019      	str	r1, [r3, #0]
 8004b54:	e002      	b.n	8004b5c <_printf_i+0x1d4>
 8004b56:	0670      	lsls	r0, r6, #25
 8004b58:	d5fb      	bpl.n	8004b52 <_printf_i+0x1ca>
 8004b5a:	8019      	strh	r1, [r3, #0]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4615      	mov	r5, r2
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	e7ba      	b.n	8004ada <_printf_i+0x152>
 8004b64:	682b      	ldr	r3, [r5, #0]
 8004b66:	2100      	movs	r1, #0
 8004b68:	1d1a      	adds	r2, r3, #4
 8004b6a:	602a      	str	r2, [r5, #0]
 8004b6c:	681d      	ldr	r5, [r3, #0]
 8004b6e:	6862      	ldr	r2, [r4, #4]
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f8d9 	bl	8004d28 <memchr>
 8004b76:	b108      	cbz	r0, 8004b7c <_printf_i+0x1f4>
 8004b78:	1b40      	subs	r0, r0, r5
 8004b7a:	6060      	str	r0, [r4, #4]
 8004b7c:	6863      	ldr	r3, [r4, #4]
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	2300      	movs	r3, #0
 8004b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b86:	e7a8      	b.n	8004ada <_printf_i+0x152>
 8004b88:	462a      	mov	r2, r5
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	6923      	ldr	r3, [r4, #16]
 8004b90:	47d0      	blx	sl
 8004b92:	3001      	adds	r0, #1
 8004b94:	d0ab      	beq.n	8004aee <_printf_i+0x166>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	079b      	lsls	r3, r3, #30
 8004b9a:	d413      	bmi.n	8004bc4 <_printf_i+0x23c>
 8004b9c:	68e0      	ldr	r0, [r4, #12]
 8004b9e:	9b03      	ldr	r3, [sp, #12]
 8004ba0:	4298      	cmp	r0, r3
 8004ba2:	bfb8      	it	lt
 8004ba4:	4618      	movlt	r0, r3
 8004ba6:	e7a4      	b.n	8004af2 <_printf_i+0x16a>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4632      	mov	r2, r6
 8004bac:	4649      	mov	r1, r9
 8004bae:	4640      	mov	r0, r8
 8004bb0:	47d0      	blx	sl
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d09b      	beq.n	8004aee <_printf_i+0x166>
 8004bb6:	3501      	adds	r5, #1
 8004bb8:	68e3      	ldr	r3, [r4, #12]
 8004bba:	9903      	ldr	r1, [sp, #12]
 8004bbc:	1a5b      	subs	r3, r3, r1
 8004bbe:	42ab      	cmp	r3, r5
 8004bc0:	dcf2      	bgt.n	8004ba8 <_printf_i+0x220>
 8004bc2:	e7eb      	b.n	8004b9c <_printf_i+0x214>
 8004bc4:	2500      	movs	r5, #0
 8004bc6:	f104 0619 	add.w	r6, r4, #25
 8004bca:	e7f5      	b.n	8004bb8 <_printf_i+0x230>
 8004bcc:	080050bd 	.word	0x080050bd
 8004bd0:	080050ce 	.word	0x080050ce

08004bd4 <_sbrk_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4d05      	ldr	r5, [pc, #20]	; (8004bf0 <_sbrk_r+0x1c>)
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	f7fd f87a 	bl	8001cd8 <_sbrk>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_sbrk_r+0x1a>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_sbrk_r+0x1a>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	200001dc 	.word	0x200001dc

08004bf4 <__sread>:
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfc:	f000 f906 	bl	8004e0c <_read_r>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	bfab      	itete	ge
 8004c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c06:	89a3      	ldrhlt	r3, [r4, #12]
 8004c08:	181b      	addge	r3, r3, r0
 8004c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c0e:	bfac      	ite	ge
 8004c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c12:	81a3      	strhlt	r3, [r4, #12]
 8004c14:	bd10      	pop	{r4, pc}

08004c16 <__swrite>:
 8004c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1a:	461f      	mov	r7, r3
 8004c1c:	898b      	ldrh	r3, [r1, #12]
 8004c1e:	4605      	mov	r5, r0
 8004c20:	05db      	lsls	r3, r3, #23
 8004c22:	460c      	mov	r4, r1
 8004c24:	4616      	mov	r6, r2
 8004c26:	d505      	bpl.n	8004c34 <__swrite+0x1e>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c30:	f000 f868 	bl	8004d04 <_lseek_r>
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	4632      	mov	r2, r6
 8004c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c3c:	81a3      	strh	r3, [r4, #12]
 8004c3e:	4628      	mov	r0, r5
 8004c40:	463b      	mov	r3, r7
 8004c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4a:	f000 b817 	b.w	8004c7c <_write_r>

08004c4e <__sseek>:
 8004c4e:	b510      	push	{r4, lr}
 8004c50:	460c      	mov	r4, r1
 8004c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c56:	f000 f855 	bl	8004d04 <_lseek_r>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	bf15      	itete	ne
 8004c60:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c6a:	81a3      	strheq	r3, [r4, #12]
 8004c6c:	bf18      	it	ne
 8004c6e:	81a3      	strhne	r3, [r4, #12]
 8004c70:	bd10      	pop	{r4, pc}

08004c72 <__sclose>:
 8004c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c76:	f000 b813 	b.w	8004ca0 <_close_r>
	...

08004c7c <_write_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	2200      	movs	r2, #0
 8004c86:	4d05      	ldr	r5, [pc, #20]	; (8004c9c <_write_r+0x20>)
 8004c88:	602a      	str	r2, [r5, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f7fc ffd8 	bl	8001c40 <_write>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d102      	bne.n	8004c9a <_write_r+0x1e>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	b103      	cbz	r3, 8004c9a <_write_r+0x1e>
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
 8004c9c:	200001dc 	.word	0x200001dc

08004ca0 <_close_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	4d05      	ldr	r5, [pc, #20]	; (8004cbc <_close_r+0x1c>)
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	f7fc ffe4 	bl	8001c78 <_close>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_close_r+0x1a>
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_close_r+0x1a>
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	200001dc 	.word	0x200001dc

08004cc0 <_fstat_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4d06      	ldr	r5, [pc, #24]	; (8004ce0 <_fstat_r+0x20>)
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	f7fc ffde 	bl	8001c8e <_fstat>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	d102      	bne.n	8004cdc <_fstat_r+0x1c>
 8004cd6:	682b      	ldr	r3, [r5, #0]
 8004cd8:	b103      	cbz	r3, 8004cdc <_fstat_r+0x1c>
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
 8004cde:	bf00      	nop
 8004ce0:	200001dc 	.word	0x200001dc

08004ce4 <_isatty_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	4d05      	ldr	r5, [pc, #20]	; (8004d00 <_isatty_r+0x1c>)
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	f7fc ffdc 	bl	8001cac <_isatty>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_isatty_r+0x1a>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_isatty_r+0x1a>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	200001dc 	.word	0x200001dc

08004d04 <_lseek_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4604      	mov	r4, r0
 8004d08:	4608      	mov	r0, r1
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4d05      	ldr	r5, [pc, #20]	; (8004d24 <_lseek_r+0x20>)
 8004d10:	602a      	str	r2, [r5, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f7fc ffd4 	bl	8001cc0 <_lseek>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_lseek_r+0x1e>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_lseek_r+0x1e>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	200001dc 	.word	0x200001dc

08004d28 <memchr>:
 8004d28:	4603      	mov	r3, r0
 8004d2a:	b510      	push	{r4, lr}
 8004d2c:	b2c9      	uxtb	r1, r1
 8004d2e:	4402      	add	r2, r0
 8004d30:	4293      	cmp	r3, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	d101      	bne.n	8004d3a <memchr+0x12>
 8004d36:	2000      	movs	r0, #0
 8004d38:	e003      	b.n	8004d42 <memchr+0x1a>
 8004d3a:	7804      	ldrb	r4, [r0, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	428c      	cmp	r4, r1
 8004d40:	d1f6      	bne.n	8004d30 <memchr+0x8>
 8004d42:	bd10      	pop	{r4, pc}

08004d44 <memcpy>:
 8004d44:	440a      	add	r2, r1
 8004d46:	4291      	cmp	r1, r2
 8004d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d4c:	d100      	bne.n	8004d50 <memcpy+0xc>
 8004d4e:	4770      	bx	lr
 8004d50:	b510      	push	{r4, lr}
 8004d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d56:	4291      	cmp	r1, r2
 8004d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d5c:	d1f9      	bne.n	8004d52 <memcpy+0xe>
 8004d5e:	bd10      	pop	{r4, pc}

08004d60 <memmove>:
 8004d60:	4288      	cmp	r0, r1
 8004d62:	b510      	push	{r4, lr}
 8004d64:	eb01 0402 	add.w	r4, r1, r2
 8004d68:	d902      	bls.n	8004d70 <memmove+0x10>
 8004d6a:	4284      	cmp	r4, r0
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	d807      	bhi.n	8004d80 <memmove+0x20>
 8004d70:	1e43      	subs	r3, r0, #1
 8004d72:	42a1      	cmp	r1, r4
 8004d74:	d008      	beq.n	8004d88 <memmove+0x28>
 8004d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d7e:	e7f8      	b.n	8004d72 <memmove+0x12>
 8004d80:	4601      	mov	r1, r0
 8004d82:	4402      	add	r2, r0
 8004d84:	428a      	cmp	r2, r1
 8004d86:	d100      	bne.n	8004d8a <memmove+0x2a>
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d92:	e7f7      	b.n	8004d84 <memmove+0x24>

08004d94 <__malloc_lock>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__malloc_lock+0x8>)
 8004d96:	f7ff b98f 	b.w	80040b8 <__retarget_lock_acquire_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	200001d0 	.word	0x200001d0

08004da0 <__malloc_unlock>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__malloc_unlock+0x8>)
 8004da2:	f7ff b98a 	b.w	80040ba <__retarget_lock_release_recursive>
 8004da6:	bf00      	nop
 8004da8:	200001d0 	.word	0x200001d0

08004dac <_realloc_r>:
 8004dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db0:	4680      	mov	r8, r0
 8004db2:	4614      	mov	r4, r2
 8004db4:	460e      	mov	r6, r1
 8004db6:	b921      	cbnz	r1, 8004dc2 <_realloc_r+0x16>
 8004db8:	4611      	mov	r1, r2
 8004dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbe:	f7ff ba4b 	b.w	8004258 <_malloc_r>
 8004dc2:	b92a      	cbnz	r2, 8004dd0 <_realloc_r+0x24>
 8004dc4:	f7ff f9e0 	bl	8004188 <_free_r>
 8004dc8:	4625      	mov	r5, r4
 8004dca:	4628      	mov	r0, r5
 8004dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dd0:	f000 f82e 	bl	8004e30 <_malloc_usable_size_r>
 8004dd4:	4284      	cmp	r4, r0
 8004dd6:	4607      	mov	r7, r0
 8004dd8:	d802      	bhi.n	8004de0 <_realloc_r+0x34>
 8004dda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004dde:	d812      	bhi.n	8004e06 <_realloc_r+0x5a>
 8004de0:	4621      	mov	r1, r4
 8004de2:	4640      	mov	r0, r8
 8004de4:	f7ff fa38 	bl	8004258 <_malloc_r>
 8004de8:	4605      	mov	r5, r0
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d0ed      	beq.n	8004dca <_realloc_r+0x1e>
 8004dee:	42bc      	cmp	r4, r7
 8004df0:	4622      	mov	r2, r4
 8004df2:	4631      	mov	r1, r6
 8004df4:	bf28      	it	cs
 8004df6:	463a      	movcs	r2, r7
 8004df8:	f7ff ffa4 	bl	8004d44 <memcpy>
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4640      	mov	r0, r8
 8004e00:	f7ff f9c2 	bl	8004188 <_free_r>
 8004e04:	e7e1      	b.n	8004dca <_realloc_r+0x1e>
 8004e06:	4635      	mov	r5, r6
 8004e08:	e7df      	b.n	8004dca <_realloc_r+0x1e>
	...

08004e0c <_read_r>:
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4608      	mov	r0, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	2200      	movs	r2, #0
 8004e16:	4d05      	ldr	r5, [pc, #20]	; (8004e2c <_read_r+0x20>)
 8004e18:	602a      	str	r2, [r5, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f7fc fef3 	bl	8001c06 <_read>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_read_r+0x1e>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_read_r+0x1e>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	200001dc 	.word	0x200001dc

08004e30 <_malloc_usable_size_r>:
 8004e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e34:	1f18      	subs	r0, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfbc      	itt	lt
 8004e3a:	580b      	ldrlt	r3, [r1, r0]
 8004e3c:	18c0      	addlt	r0, r0, r3
 8004e3e:	4770      	bx	lr

08004e40 <_init>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr

08004e4c <_fini>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr
