
Dryer_Build2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08005c44  08005c44  00015c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eac  08005eac  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005eac  08005eac  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eac  08005eac  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000078  08005f2c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005f2c  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e73e  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a27  00000000  00000000  0002e7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00031208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00032228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a978  00000000  00000000  00033100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001370e  00000000  00000000  0004da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e119  00000000  00000000  00061186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef29f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af4  00000000  00000000  000ef2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005c2c 	.word	0x08005c2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005c2c 	.word	0x08005c2c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <Max6675_Read_Temp>:
// ------------------- Variables ----------------
_Bool TCF = 0;                       // Thermocouple Connection acknowledge Flag
uint8_t DATARX[2];                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max6675_Read_Temp(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	float Temp = 0;                                      // Temperature Variable
 8000522:	f04f 0300 	mov.w	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8000528:	2200      	movs	r2, #0
 800052a:	2110      	movs	r1, #16
 800052c:	481f      	ldr	r0, [pc, #124]	; (80005ac <Max6675_Read_Temp+0x90>)
 800052e:	f002 faf2 	bl	8002b16 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, DATARX, 2, 50);                  // DATA Transfer
 8000532:	2332      	movs	r3, #50	; 0x32
 8000534:	2202      	movs	r2, #2
 8000536:	491e      	ldr	r1, [pc, #120]	; (80005b0 <Max6675_Read_Temp+0x94>)
 8000538:	481e      	ldr	r0, [pc, #120]	; (80005b4 <Max6675_Read_Temp+0x98>)
 800053a:	f002 ffd3 	bl	80034e4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 800053e:	2201      	movs	r2, #1
 8000540:	2110      	movs	r1, #16
 8000542:	481a      	ldr	r0, [pc, #104]	; (80005ac <Max6675_Read_Temp+0x90>)
 8000544:	f002 fae7 	bl	8002b16 <HAL_GPIO_WritePin>
//printf("Mix = %x\r\n",((DATARX[0] << 8)|DATARX[1]));
//printf("MSB = %x\r\n",DATARX[1]);

//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2) & 0x0001);        // State of Connecting
	TCF = ((((DATARX[0] << 8) | DATARX[1]) >> 2) & 0x0001);
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <Max6675_Read_Temp+0x94>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	4a18      	ldr	r2, [pc, #96]	; (80005b0 <Max6675_Read_Temp+0x94>)
 8000550:	7852      	ldrb	r2, [r2, #1]
 8000552:	4313      	orrs	r3, r2
 8000554:	109b      	asrs	r3, r3, #2
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <Max6675_Read_Temp+0x9c>)
 8000566:	701a      	strb	r2, [r3, #0]
//printf("TCF = %d\r\n",TCF);

//Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
	if (TCF == 0) {
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <Max6675_Read_Temp+0x9c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f083 0301 	eor.w	r3, r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d013      	beq.n	800059e <Max6675_Read_Temp+0x82>
		Temp = (((DATARX[0] << 8) | DATARX[1]) >> 3);
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <Max6675_Read_Temp+0x94>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <Max6675_Read_Temp+0x94>)
 800057e:	7852      	ldrb	r2, [r2, #1]
 8000580:	4313      	orrs	r3, r2
 8000582:	10db      	asrs	r3, r3, #3
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff4f 	bl	8000428 <__aeabi_i2f>
 800058a:	4603      	mov	r3, r0
 800058c:	607b      	str	r3, [r7, #4]
		Temp *= 0.25;                         // Data to Centigrade Conversation
 800058e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff fdda 	bl	800014c <__aeabi_fmul>
 8000598:	4603      	mov	r3, r0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e001      	b.n	80005a2 <Max6675_Read_Temp+0x86>
	} else
		Temp = -1;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <Max6675_Read_Temp+0xa0>)
 80005a0:	607b      	str	r3, [r7, #4]
	//HAL_Delay(250); // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
	return Temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010800 	.word	0x40010800
 80005b0:	20000098 	.word	0x20000098
 80005b4:	20000140 	.word	0x20000140
 80005b8:	20000094 	.word	0x20000094
 80005bc:	bf800000 	.word	0xbf800000

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d4:	4b61      	ldr	r3, [pc, #388]	; (800075c <MX_GPIO_Init+0x19c>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a60      	ldr	r2, [pc, #384]	; (800075c <MX_GPIO_Init+0x19c>)
 80005da:	f043 0310 	orr.w	r3, r3, #16
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b5e      	ldr	r3, [pc, #376]	; (800075c <MX_GPIO_Init+0x19c>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0310 	and.w	r3, r3, #16
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ec:	4b5b      	ldr	r3, [pc, #364]	; (800075c <MX_GPIO_Init+0x19c>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a5a      	ldr	r2, [pc, #360]	; (800075c <MX_GPIO_Init+0x19c>)
 80005f2:	f043 0320 	orr.w	r3, r3, #32
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b58      	ldr	r3, [pc, #352]	; (800075c <MX_GPIO_Init+0x19c>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0320 	and.w	r3, r3, #32
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b55      	ldr	r3, [pc, #340]	; (800075c <MX_GPIO_Init+0x19c>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a54      	ldr	r2, [pc, #336]	; (800075c <MX_GPIO_Init+0x19c>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b52      	ldr	r3, [pc, #328]	; (800075c <MX_GPIO_Init+0x19c>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	4b4f      	ldr	r3, [pc, #316]	; (800075c <MX_GPIO_Init+0x19c>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a4e      	ldr	r2, [pc, #312]	; (800075c <MX_GPIO_Init+0x19c>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b4c      	ldr	r3, [pc, #304]	; (800075c <MX_GPIO_Init+0x19c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|BUZZER_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800063a:	4849      	ldr	r0, [pc, #292]	; (8000760 <MX_GPIO_Init+0x1a0>)
 800063c:	f002 fa6b 	bl	8002b16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_Pin|FAN_Pin|LCD_D0_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f248 1110 	movw	r1, #33040	; 0x8110
 8000646:	4847      	ldr	r0, [pc, #284]	; (8000764 <MX_GPIO_Init+0x1a4>)
 8000648:	f002 fa65 	bl	8002b16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRUM_LEFT_Pin|DRUM_RIGHT_Pin|HEATER_Pin|LCD_D1_Pin
 800064c:	2200      	movs	r2, #0
 800064e:	f24e 31f8 	movw	r1, #58360	; 0xe3f8
 8000652:	4845      	ldr	r0, [pc, #276]	; (8000768 <MX_GPIO_Init+0x1a8>)
 8000654:	f002 fa5f 	bl	8002b16 <HAL_GPIO_WritePin>
                          |LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800065e:	4841      	ldr	r0, [pc, #260]	; (8000764 <MX_GPIO_Init+0x1a4>)
 8000660:	f002 fa59 	bl	8002b16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2302      	movs	r3, #2
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	4838      	ldr	r0, [pc, #224]	; (8000760 <MX_GPIO_Init+0x1a0>)
 800067e:	f002 f8af 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800068c:	2302      	movs	r3, #2
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4831      	ldr	r0, [pc, #196]	; (8000760 <MX_GPIO_Init+0x1a0>)
 800069c:	f002 f8a0 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DOOR_SW_Pin;
 80006a0:	2301      	movs	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006a4:	4b31      	ldr	r3, [pc, #196]	; (800076c <MX_GPIO_Init+0x1ac>)
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DOOR_SW_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	482c      	ldr	r0, [pc, #176]	; (8000764 <MX_GPIO_Init+0x1a4>)
 80006b4:	f002 f894 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin|SEL_ROT_SW_Pin|HEATER_SW_Pin;
 80006b8:	230e      	movs	r3, #14
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4826      	ldr	r0, [pc, #152]	; (8000764 <MX_GPIO_Init+0x1a4>)
 80006cc:	f002 f888 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SS_Pin;
 80006d0:	2310      	movs	r3, #16
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006d8:	2302      	movs	r3, #2
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	481f      	ldr	r0, [pc, #124]	; (8000764 <MX_GPIO_Init+0x1a4>)
 80006e8:	f002 f87a 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FN_KEY_Pin|LOW_KEY_Pin|MED_KEY_Pin|HIGH_KEY_Pin;
 80006ec:	f640 4303 	movw	r3, #3075	; 0xc03
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	4819      	ldr	r0, [pc, #100]	; (8000768 <MX_GPIO_Init+0x1a8>)
 8000702:	f002 f86d 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = DRUM_LEFT_Pin|DRUM_RIGHT_Pin|HEATER_Pin|LCD_D1_Pin
 8000706:	f24e 33f8 	movw	r3, #58360	; 0xe3f8
 800070a:	613b      	str	r3, [r7, #16]
                          |LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000710:	2302      	movs	r3, #2
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <MX_GPIO_Init+0x1a8>)
 8000720:	f002 f85e 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAN_Pin|LCD_RS_Pin|LCD_EN_Pin|LCD_D0_Pin;
 8000724:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800072e:	2302      	movs	r3, #2
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2302      	movs	r3, #2
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <MX_GPIO_Init+0x1a4>)
 800073e:	f002 f84f 	bl	80027e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2006      	movs	r0, #6
 8000748:	f002 f813 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800074c:	2006      	movs	r0, #6
 800074e:	f002 f82c 	bl	80027aa <HAL_NVIC_EnableIRQ>

}
 8000752:	bf00      	nop
 8000754:	3720      	adds	r7, #32
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000
 8000760:	40011000 	.word	0x40011000
 8000764:	40010800 	.word	0x40010800
 8000768:	40010c00 	.word	0x40010c00
 800076c:	10310000 	.word	0x10310000

08000770 <is_coil_open>:
		last_time = HAL_GetTick();
	}
	return last_state;
}

uint8_t is_coil_open(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 8000774:	f001 fef8 	bl	8002568 <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <is_coil_open+0x44>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	2b05      	cmp	r3, #5
 8000782:	d912      	bls.n	80007aa <is_coil_open+0x3a>
		if (HAL_GPIO_ReadPin(HEATER_SW_GPIO_Port, HEATER_SW_Pin) == GPIO_PIN_RESET) {
 8000784:	2108      	movs	r1, #8
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <is_coil_open+0x48>)
 8000788:	f002 f9ae 	bl	8002ae8 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <is_coil_open+0x2a>
			last_state = 0;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <is_coil_open+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	e002      	b.n	80007a0 <is_coil_open+0x30>
		} else {
			last_state = 1;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <is_coil_open+0x4c>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80007a0:	f001 fee2 	bl	8002568 <HAL_GetTick>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <is_coil_open+0x44>)
 80007a8:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <is_coil_open+0x4c>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000009c 	.word	0x2000009c
 80007b8:	40010800 	.word	0x40010800
 80007bc:	200000a0 	.word	0x200000a0

080007c0 <limit_sw_open>:

uint8_t limit_sw_open(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 80007c4:	f001 fed0 	bl	8002568 <HAL_GetTick>
 80007c8:	4602      	mov	r2, r0
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <limit_sw_open+0x44>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	2b05      	cmp	r3, #5
 80007d2:	d912      	bls.n	80007fa <limit_sw_open+0x3a>
		if (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_RESET) {
 80007d4:	2102      	movs	r1, #2
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <limit_sw_open+0x48>)
 80007d8:	f002 f986 	bl	8002ae8 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d103      	bne.n	80007ea <limit_sw_open+0x2a>
			last_state = 0;
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <limit_sw_open+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	e002      	b.n	80007f0 <limit_sw_open+0x30>
		} else {
			last_state = 1;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <limit_sw_open+0x4c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80007f0:	f001 feba 	bl	8002568 <HAL_GetTick>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a03      	ldr	r2, [pc, #12]	; (8000804 <limit_sw_open+0x44>)
 80007f8:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <limit_sw_open+0x4c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
}
 8000800:	4618      	mov	r0, r3
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000a4 	.word	0x200000a4
 8000808:	40010800 	.word	0x40010800
 800080c:	200000a8 	.word	0x200000a8

08000810 <scan_keypad>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

uint8_t scan_keypad(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 8000814:	f000 f832 	bl	800087c <is_low_key_pressed>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d004      	beq.n	8000828 <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 800081e:	4813      	ldr	r0, [pc, #76]	; (800086c <scan_keypad+0x5c>)
 8000820:	f004 f8a4 	bl	800496c <puts>
		return LOW_KEY_PRESSED;
 8000824:	2301      	movs	r3, #1
 8000826:	e01e      	b.n	8000866 <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 8000828:	f000 f860 	bl	80008ec <is_med_key_pressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d004      	beq.n	800083c <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 8000832:	480f      	ldr	r0, [pc, #60]	; (8000870 <scan_keypad+0x60>)
 8000834:	f004 f89a 	bl	800496c <puts>
		return MED_KEY_PRESSED;
 8000838:	2302      	movs	r3, #2
 800083a:	e014      	b.n	8000866 <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 800083c:	f000 f890 	bl	8000960 <is_high_key_pressed>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d004      	beq.n	8000850 <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <scan_keypad+0x64>)
 8000848:	f004 f890 	bl	800496c <puts>
		return HIGH_KEY_PRESSED;
 800084c:	2303      	movs	r3, #3
 800084e:	e00a      	b.n	8000866 <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 8000850:	f000 f8c0 	bl	80009d4 <is_fn_key_pressed>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <scan_keypad+0x68>)
 800085c:	f004 f886 	bl	800496c <puts>
		return FN_KEY_PRESSED;
 8000860:	2304      	movs	r3, #4
 8000862:	e000      	b.n	8000866 <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	08005c44 	.word	0x08005c44
 8000870:	08005c58 	.word	0x08005c58
 8000874:	08005c6c 	.word	0x08005c6c
 8000878:	08005c80 	.word	0x08005c80

0800087c <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 8000880:	f001 fe72 	bl	8002568 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <is_low_key_pressed+0x64>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	2b01      	cmp	r3, #1
 800088e:	d923      	bls.n	80008d8 <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(LOW_KEY_GPIO_Port, LOW_KEY_Pin) == GPIO_PIN_RESET)
 8000890:	2102      	movs	r1, #2
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <is_low_key_pressed+0x68>)
 8000894:	f002 f928 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d114      	bne.n	80008c8 <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <is_low_key_pressed+0x6c>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d112      	bne.n	80008ce <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(LOW_KEY_GPIO_Port, LOW_KEY_Pin) == GPIO_PIN_RESET)
 80008a8:	2102      	movs	r1, #2
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <is_low_key_pressed+0x68>)
 80008ac:	f002 f91c 	bl	8002ae8 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d104      	bne.n	80008c0 <is_low_key_pressed+0x44>
				{
					last_state = 0;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <is_low_key_pressed+0x6c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
					return 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	e00c      	b.n	80008da <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <is_low_key_pressed+0x6c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e002      	b.n	80008ce <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <is_low_key_pressed+0x6c>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80008ce:	f001 fe4b 	bl	8002568 <HAL_GetTick>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a02      	ldr	r2, [pc, #8]	; (80008e0 <is_low_key_pressed+0x64>)
 80008d6:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000ac 	.word	0x200000ac
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	200000b0 	.word	0x200000b0

080008ec <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 80008f0:	f001 fe3a 	bl	8002568 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <is_med_key_pressed+0x68>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d925      	bls.n	800094c <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(MED_KEY_GPIO_Port, MED_KEY_Pin) == GPIO_PIN_RESET)
 8000900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000904:	4814      	ldr	r0, [pc, #80]	; (8000958 <is_med_key_pressed+0x6c>)
 8000906:	f002 f8ef 	bl	8002ae8 <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d115      	bne.n	800093c <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <is_med_key_pressed+0x70>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b01      	cmp	r3, #1
 8000918:	d113      	bne.n	8000942 <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(MED_KEY_GPIO_Port, MED_KEY_Pin) == GPIO_PIN_RESET)
 800091a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091e:	480e      	ldr	r0, [pc, #56]	; (8000958 <is_med_key_pressed+0x6c>)
 8000920:	f002 f8e2 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d104      	bne.n	8000934 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <is_med_key_pressed+0x70>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
					return 1;
 8000930:	2301      	movs	r3, #1
 8000932:	e00c      	b.n	800094e <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <is_med_key_pressed+0x70>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	e002      	b.n	8000942 <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <is_med_key_pressed+0x70>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000942:	f001 fe11 	bl	8002568 <HAL_GetTick>
 8000946:	4603      	mov	r3, r0
 8000948:	4a02      	ldr	r2, [pc, #8]	; (8000954 <is_med_key_pressed+0x68>)
 800094a:	6013      	str	r3, [r2, #0]
	}
	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000b4 	.word	0x200000b4
 8000958:	40010c00 	.word	0x40010c00
 800095c:	200000b8 	.word	0x200000b8

08000960 <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 8000964:	f001 fe00 	bl	8002568 <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <is_high_key_pressed+0x68>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	2b01      	cmp	r3, #1
 8000972:	d925      	bls.n	80009c0 <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(HIGH_KEY_GPIO_Port, HIGH_KEY_Pin) == GPIO_PIN_RESET)
 8000974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000978:	4814      	ldr	r0, [pc, #80]	; (80009cc <is_high_key_pressed+0x6c>)
 800097a:	f002 f8b5 	bl	8002ae8 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d115      	bne.n	80009b0 <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <is_high_key_pressed+0x70>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b01      	cmp	r3, #1
 800098c:	d113      	bne.n	80009b6 <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(HIGH_KEY_GPIO_Port, HIGH_KEY_Pin) == GPIO_PIN_RESET)
 800098e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000992:	480e      	ldr	r0, [pc, #56]	; (80009cc <is_high_key_pressed+0x6c>)
 8000994:	f002 f8a8 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d104      	bne.n	80009a8 <is_high_key_pressed+0x48>
				{
					last_state = 0;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <is_high_key_pressed+0x70>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
					return 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e00c      	b.n	80009c2 <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <is_high_key_pressed+0x70>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e002      	b.n	80009b6 <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <is_high_key_pressed+0x70>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80009b6:	f001 fdd7 	bl	8002568 <HAL_GetTick>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a02      	ldr	r2, [pc, #8]	; (80009c8 <is_high_key_pressed+0x68>)
 80009be:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000bc 	.word	0x200000bc
 80009cc:	40010c00 	.word	0x40010c00
 80009d0:	200000c0 	.word	0x200000c0

080009d4 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 80009d8:	f001 fdc6 	bl	8002568 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <is_fn_key_pressed+0x64>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d923      	bls.n	8000a30 <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(FN_KEY_GPIO_Port, FN_KEY_Pin) == GPIO_PIN_RESET)
 80009e8:	2101      	movs	r1, #1
 80009ea:	4814      	ldr	r0, [pc, #80]	; (8000a3c <is_fn_key_pressed+0x68>)
 80009ec:	f002 f87c 	bl	8002ae8 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d114      	bne.n	8000a20 <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <is_fn_key_pressed+0x6c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d112      	bne.n	8000a26 <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(FN_KEY_GPIO_Port, FN_KEY_Pin) == GPIO_PIN_RESET)
 8000a00:	2101      	movs	r1, #1
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <is_fn_key_pressed+0x68>)
 8000a04:	f002 f870 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d104      	bne.n	8000a18 <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <is_fn_key_pressed+0x6c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
					return 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e00c      	b.n	8000a32 <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <is_fn_key_pressed+0x6c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	e002      	b.n	8000a26 <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <is_fn_key_pressed+0x6c>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000a26:	f001 fd9f 	bl	8002568 <HAL_GetTick>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a02      	ldr	r2, [pc, #8]	; (8000a38 <is_fn_key_pressed+0x64>)
 8000a2e:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000c4 	.word	0x200000c4
 8000a3c:	40010c00 	.word	0x40010c00
 8000a40:	200000c8 	.word	0x200000c8

08000a44 <lcd_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_init(uint8_t fourbitmode)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <lcd_init+0x28>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 8000a5a:	e002      	b.n	8000a62 <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <lcd_init+0x28>)
 8000a5e:	2210      	movs	r2, #16
 8000a60:	701a      	strb	r2, [r3, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	200000c9 	.word	0x200000c9

08000a70 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	71bb      	strb	r3, [r7, #6]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 8000a82:	79bb      	ldrb	r3, [r7, #6]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d906      	bls.n	8000a96 <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 8000a88:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <lcd_begin+0xe8>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <lcd_begin+0xe8>)
 8000a94:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 8000a96:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <lcd_begin+0xec>)
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 8000a9c:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <lcd_begin+0xf0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 8000aa2:	797b      	ldrb	r3, [r7, #5]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d009      	beq.n	8000abc <lcd_begin+0x4c>
 8000aa8:	79bb      	ldrb	r3, [r7, #6]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d106      	bne.n	8000abc <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 8000aae:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <lcd_begin+0xe8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <lcd_begin+0xe8>)
 8000aba:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 8000abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac0:	f001 fd5c 	bl	800257c <HAL_Delay>
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aca:	4826      	ldr	r0, [pc, #152]	; (8000b64 <lcd_begin+0xf4>)
 8000acc:	f002 f823 	bl	8002b16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad6:	4823      	ldr	r0, [pc, #140]	; (8000b64 <lcd_begin+0xf4>)
 8000ad8:	f002 f81d 	bl	8002b16 <HAL_GPIO_WritePin>
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <lcd_begin+0xe8>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f91e 	bl	8000d28 <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 8000aec:	200a      	movs	r0, #10
 8000aee:	f001 fd45 	bl	800257c <HAL_Delay>

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <lcd_begin+0xe8>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f043 0320 	orr.w	r3, r3, #32
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f913 	bl	8000d28 <lcd_send_cmd>
	    HAL_Delay(1);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f001 fd3a 	bl	800257c <HAL_Delay>

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <lcd_begin+0xe8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f043 0320 	orr.w	r3, r3, #32
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f908 	bl	8000d28 <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <lcd_begin+0xe8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f043 0320 	orr.w	r3, r3, #32
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f900 	bl	8000d28 <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <lcd_begin+0xf8>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 f828 	bl	8000b84 <lcd_display>

	// clear it off
	lcd_clear();
 8000b34:	f000 f90e 	bl	8000d54 <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <lcd_begin+0xfc>)
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <lcd_begin+0xfc>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f8ed 	bl	8000d28 <lcd_send_cmd>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000c9 	.word	0x200000c9
 8000b5c:	200000cc 	.word	0x200000cc
 8000b60:	200000cd 	.word	0x200000cd
 8000b64:	40010800 	.word	0x40010800
 8000b68:	200000ca 	.word	0x200000ca
 8000b6c:	200000cb 	.word	0x200000cb

08000b70 <lcd_home>:

void lcd_home(void){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 f8d7 	bl	8000d28 <lcd_send_cmd>
	HAL_Delay(2); // this command takes a long time!
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f001 fcfe 	bl	800257c <HAL_Delay>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <lcd_display>:

void lcd_display(uint8_t state)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	if(state)
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00f      	beq.n	8000bb4 <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <lcd_display+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <lcd_display+0x58>)
 8000ba0:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <lcd_display+0x58>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f8bb 	bl	8000d28 <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 8000bb2:	e00e      	b.n	8000bd2 <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <lcd_display+0x58>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	f023 0304 	bic.w	r3, r3, #4
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <lcd_display+0x58>)
 8000bc0:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <lcd_display+0x58>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f8ab 	bl	8000d28 <lcd_send_cmd>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000ca 	.word	0x200000ca

08000be0 <lcd_enable>:

void lcd_enable(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bec:	481a      	ldr	r0, [pc, #104]	; (8000c58 <lcd_enable+0x78>)
 8000bee:	f001 ff92 	bl	8002b16 <HAL_GPIO_WritePin>
	for(int i = 0;i<5000;i++);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e002      	b.n	8000bfe <lcd_enable+0x1e>
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c04:	4293      	cmp	r3, r2
 8000c06:	ddf7      	ble.n	8000bf8 <lcd_enable+0x18>
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0e:	4812      	ldr	r0, [pc, #72]	; (8000c58 <lcd_enable+0x78>)
 8000c10:	f001 ff81 	bl	8002b16 <HAL_GPIO_WritePin>
	for(int i = 0;i<5000;i++); // enable pulse must be >450ns
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	e002      	b.n	8000c20 <lcd_enable+0x40>
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c26:	4293      	cmp	r3, r2
 8000c28:	ddf7      	ble.n	8000c1a <lcd_enable+0x3a>
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	4809      	ldr	r0, [pc, #36]	; (8000c58 <lcd_enable+0x78>)
 8000c32:	f001 ff70 	bl	8002b16 <HAL_GPIO_WritePin>
	for(int i = 0;i<5000;i++); // commands need > 37us to settle
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	e002      	b.n	8000c42 <lcd_enable+0x62>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	ddf7      	ble.n	8000c3c <lcd_enable+0x5c>
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010800 	.word	0x40010800

08000c5c <write_8bit>:

void write_8bit(uint8_t value)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D7_Port, LCD_D7, (value >> 7) & 0x01);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	09db      	lsrs	r3, r3, #7
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c72:	482b      	ldr	r0, [pc, #172]	; (8000d20 <write_8bit+0xc4>)
 8000c74:	f001 ff4f 	bl	8002b16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_Port, LCD_D6, (value >> 6) & 0x01);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	099b      	lsrs	r3, r3, #6
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c8a:	4825      	ldr	r0, [pc, #148]	; (8000d20 <write_8bit+0xc4>)
 8000c8c:	f001 ff43 	bl	8002b16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_Port, LCD_D5, (value >> 5) & 0x01);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	481f      	ldr	r0, [pc, #124]	; (8000d20 <write_8bit+0xc4>)
 8000ca2:	f001 ff38 	bl	8002b16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_Port, LCD_D4, (value >> 4) & 0x01);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2140      	movs	r1, #64	; 0x40
 8000cb6:	481a      	ldr	r0, [pc, #104]	; (8000d20 <write_8bit+0xc4>)
 8000cb8:	f001 ff2d 	bl	8002b16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_Port, LCD_D3, (value >> 3) & 0x01);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	08db      	lsrs	r3, r3, #3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4814      	ldr	r0, [pc, #80]	; (8000d20 <write_8bit+0xc4>)
 8000cce:	f001 ff22 	bl	8002b16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_Port, LCD_D2, (value >> 2) & 0x01);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	480f      	ldr	r0, [pc, #60]	; (8000d20 <write_8bit+0xc4>)
 8000ce4:	f001 ff17 	bl	8002b16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_Port, LCD_D1, (value >> 1) & 0x01);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	085b      	lsrs	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <write_8bit+0xc4>)
 8000cfa:	f001 ff0c 	bl	8002b16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D0_Port, LCD_D0, (value >> 0) & 0x01);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <write_8bit+0xc8>)
 8000d0e:	f001 ff02 	bl	8002b16 <HAL_GPIO_WritePin>

	lcd_enable();
 8000d12:	f7ff ff65 	bl	8000be0 <lcd_enable>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40010800 	.word	0x40010800

08000d28 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <lcd_send_cmd+0x28>)
 8000d3a:	f001 feec 	bl	8002b16 <HAL_GPIO_WritePin>
	write_8bit(cmd);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff8b 	bl	8000c5c <write_8bit>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010800 	.word	0x40010800

08000d54 <lcd_clear>:

void lcd_clear(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff ffe5 	bl	8000d28 <lcd_send_cmd>
	HAL_Delay(2);
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f001 fc0c 	bl	800257c <HAL_Delay>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <lcd_send_data+0x28>)
 8000d7a:	f001 fecc 	bl	8002b16 <HAL_GPIO_WritePin>
	write_8bit(data);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff6b 	bl	8000c5c <write_8bit>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40010800 	.word	0x40010800

08000d94 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffe1 	bl	8000d68 <lcd_send_data>
		str++;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3301      	adds	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f3      	bne.n	8000d9c <lcd_print+0x8>
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <lcd_set_cursor>:

void lcd_set_cursor(int8_t col, int8_t row)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <lcd_set_cursor+0x5c>)
 8000dd2:	f107 0408 	add.w	r4, r7, #8
 8000dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _numlines) {
 8000ddc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000de0:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <lcd_set_cursor+0x60>)
 8000de2:	7812      	ldrb	r2, [r2, #0]
 8000de4:	4293      	cmp	r3, r2
 8000de6:	dd04      	ble.n	8000df2 <lcd_set_cursor+0x32>
		row = _numlines - 1; // we count rows starting w/0
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <lcd_set_cursor+0x60>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	71bb      	strb	r3, [r7, #6]
		}
	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
 8000df2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	3318      	adds	r3, #24
 8000dfa:	443b      	add	r3, r7
 8000dfc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	4413      	add	r3, r2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff8a 	bl	8000d28 <lcd_send_cmd>
}
 8000e14:	bf00      	nop
 8000e16:	371c      	adds	r7, #28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	08005c90 	.word	0x08005c90
 8000e20:	200000cc 	.word	0x200000cc

08000e24 <lcd_logo>:
void heater_coil_page(void);
void mode_level_page(void);
void limit_sw_err_page(void);
void complete_page(void);

void lcd_logo(void){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	lcd_clear();
 8000e28:	f7ff ff94 	bl	8000d54 <lcd_clear>
	lcd_set_cursor(5, 0);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f7ff ffc6 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("AL WALI");
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <lcd_logo+0x48>)
 8000e36:	f7ff ffad 	bl	8000d94 <lcd_print>
	lcd_set_cursor(1,1);
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ffbf 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("+9710504952138");
 8000e42:	480b      	ldr	r0, [pc, #44]	; (8000e70 <lcd_logo+0x4c>)
 8000e44:	f7ff ffa6 	bl	8000d94 <lcd_print>
	lcd_set_cursor(-1, 2);
 8000e48:	2102      	movs	r1, #2
 8000e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4e:	f7ff ffb7 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("ALwaliajman");
 8000e52:	4808      	ldr	r0, [pc, #32]	; (8000e74 <lcd_logo+0x50>)
 8000e54:	f7ff ff9e 	bl	8000d94 <lcd_print>
	lcd_set_cursor(0, 3);
 8000e58:	2103      	movs	r1, #3
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff ffb0 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("@gmail.com");
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <lcd_logo+0x54>)
 8000e62:	f7ff ff97 	bl	8000d94 <lcd_print>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08005ca0 	.word	0x08005ca0
 8000e70:	08005ca8 	.word	0x08005ca8
 8000e74:	08005cb8 	.word	0x08005cb8
 8000e78:	08005cc4 	.word	0x08005cc4

08000e7c <lcd_update>:

void lcd_update(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	switch(cur_page){
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <lcd_update+0x5c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b07      	cmp	r3, #7
 8000e86:	d825      	bhi.n	8000ed4 <lcd_update+0x58>
 8000e88:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <lcd_update+0x14>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000eb1 	.word	0x08000eb1
 8000e94:	08000eb7 	.word	0x08000eb7
 8000e98:	08000eb7 	.word	0x08000eb7
 8000e9c:	08000eb7 	.word	0x08000eb7
 8000ea0:	08000ebd 	.word	0x08000ebd
 8000ea4:	08000ec3 	.word	0x08000ec3
 8000ea8:	08000ec9 	.word	0x08000ec9
 8000eac:	08000ecf 	.word	0x08000ecf
	case INIT_PAGE:
		welcome_page();
 8000eb0:	f000 f814 	bl	8000edc <welcome_page>
		break;
 8000eb4:	e00e      	b.n	8000ed4 <lcd_update+0x58>
	case LOW_LEVEL_PAGE:
	case MED_LEVEL_PAGE:
	case HIGH_LEVEL_PAGE:
		mode_level_page();
 8000eb6:	f000 f8ed 	bl	8001094 <mode_level_page>
		break;
 8000eba:	e00b      	b.n	8000ed4 <lcd_update+0x58>
	case COMPLETE_PAGE:
		complete_page();
 8000ebc:	f000 f8c0 	bl	8001040 <complete_page>
		break;
 8000ec0:	e008      	b.n	8000ed4 <lcd_update+0x58>
	case DOOR_OPEN_PAGE:
		door_open_page();
 8000ec2:	f000 f83f 	bl	8000f44 <door_open_page>
		break;
 8000ec6:	e005      	b.n	8000ed4 <lcd_update+0x58>
	case LIMIT_SW_ERR_PAGE:
		limit_sw_err_page();
 8000ec8:	f000 f890 	bl	8000fec <limit_sw_err_page>
		break;
 8000ecc:	e002      	b.n	8000ed4 <lcd_update+0x58>
	case HEATER_COIL_PAGE:
		heater_coil_page();
 8000ece:	f000 f863 	bl	8000f98 <heater_coil_page>
		break;
 8000ed2:	bf00      	nop
	}

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000013b 	.word	0x2000013b

08000edc <welcome_page>:

void welcome_page(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
//	printf("welcome_page\r\n");
	if(last_page!=cur_page)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <welcome_page+0x54>)
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <welcome_page+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d006      	beq.n	8000efa <welcome_page+0x1e>
	{
		lcd_clear();
 8000eec:	f7ff ff32 	bl	8000d54 <lcd_clear>
		last_page = cur_page;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <welcome_page+0x58>)
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <welcome_page+0x54>)
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e001      	b.n	8000efe <welcome_page+0x22>
	}
	else{
		lcd_home();
 8000efa:	f7ff fe39 	bl	8000b70 <lcd_home>
	}
	
	lcd_set_cursor(5, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2005      	movs	r0, #5
 8000f02:	f7ff ff5d 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("WELCOME!");
 8000f06:	480c      	ldr	r0, [pc, #48]	; (8000f38 <welcome_page+0x5c>)
 8000f08:	f7ff ff44 	bl	8000d94 <lcd_print>
	lcd_set_cursor(-3,2);
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	f06f 0002 	mvn.w	r0, #2
 8000f12:	f7ff ff55 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("Select a mode");
 8000f16:	4809      	ldr	r0, [pc, #36]	; (8000f3c <welcome_page+0x60>)
 8000f18:	f7ff ff3c 	bl	8000d94 <lcd_print>
	lcd_set_cursor(-3,3);
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	f06f 0002 	mvn.w	r0, #2
 8000f22:	f7ff ff4d 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("to start dryer");
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <welcome_page+0x64>)
 8000f28:	f7ff ff34 	bl	8000d94 <lcd_print>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000013c 	.word	0x2000013c
 8000f34:	2000013b 	.word	0x2000013b
 8000f38:	08005cd0 	.word	0x08005cd0
 8000f3c:	08005cdc 	.word	0x08005cdc
 8000f40:	08005cec 	.word	0x08005cec

08000f44 <door_open_page>:

void door_open_page(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
//	printf("door_open_page\r\n");
	if(last_page!=cur_page)
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <door_open_page+0x44>)
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <door_open_page+0x48>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d006      	beq.n	8000f62 <door_open_page+0x1e>
	{
		lcd_clear();
 8000f54:	f7ff fefe 	bl	8000d54 <lcd_clear>

		last_page = cur_page;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <door_open_page+0x48>)
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <door_open_page+0x44>)
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	e001      	b.n	8000f66 <door_open_page+0x22>
	}
	else{
		lcd_home();
 8000f62:	f7ff fe05 	bl	8000b70 <lcd_home>
	}

	lcd_set_cursor(6, 1);
 8000f66:	2101      	movs	r1, #1
 8000f68:	2006      	movs	r0, #6
 8000f6a:	f7ff ff29 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("DOOR");
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <door_open_page+0x4c>)
 8000f70:	f7ff ff10 	bl	8000d94 <lcd_print>
	lcd_set_cursor(6,2);
 8000f74:	2102      	movs	r1, #2
 8000f76:	2006      	movs	r0, #6
 8000f78:	f7ff ff22 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("OPEN");
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <door_open_page+0x50>)
 8000f7e:	f7ff ff09 	bl	8000d94 <lcd_print>
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000013c 	.word	0x2000013c
 8000f8c:	2000013b 	.word	0x2000013b
 8000f90:	08005cfc 	.word	0x08005cfc
 8000f94:	08005d04 	.word	0x08005d04

08000f98 <heater_coil_page>:

void heater_coil_page(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
//	printf("heater_coil_page\r\n");
	if(last_page!=cur_page)
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <heater_coil_page+0x44>)
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <heater_coil_page+0x48>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d006      	beq.n	8000fb6 <heater_coil_page+0x1e>
	{
		lcd_clear();
 8000fa8:	f7ff fed4 	bl	8000d54 <lcd_clear>
		last_page = cur_page;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <heater_coil_page+0x48>)
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <heater_coil_page+0x44>)
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e001      	b.n	8000fba <heater_coil_page+0x22>
	}
	else{
		lcd_home();
 8000fb6:	f7ff fddb 	bl	8000b70 <lcd_home>
	}

	lcd_set_cursor(5, 1);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2005      	movs	r0, #5
 8000fbe:	f7ff feff 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("HEATER");
 8000fc2:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <heater_coil_page+0x4c>)
 8000fc4:	f7ff fee6 	bl	8000d94 <lcd_print>
	lcd_set_cursor(5,2);
 8000fc8:	2102      	movs	r1, #2
 8000fca:	2005      	movs	r0, #5
 8000fcc:	f7ff fef8 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("ERROR");
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <heater_coil_page+0x50>)
 8000fd2:	f7ff fedf 	bl	8000d94 <lcd_print>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000013c 	.word	0x2000013c
 8000fe0:	2000013b 	.word	0x2000013b
 8000fe4:	08005d0c 	.word	0x08005d0c
 8000fe8:	08005d14 	.word	0x08005d14

08000fec <limit_sw_err_page>:

void limit_sw_err_page(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
//	printf("limit_sw_err_page\r\n");
	if(last_page!=cur_page)
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <limit_sw_err_page+0x44>)
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <limit_sw_err_page+0x48>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d006      	beq.n	800100a <limit_sw_err_page+0x1e>
	{
		lcd_clear();
 8000ffc:	f7ff feaa 	bl	8000d54 <lcd_clear>
		last_page = cur_page;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <limit_sw_err_page+0x48>)
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <limit_sw_err_page+0x44>)
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e001      	b.n	800100e <limit_sw_err_page+0x22>
	}
	else{
		lcd_home();
 800100a:	f7ff fdb1 	bl	8000b70 <lcd_home>
	}

	lcd_set_cursor(5, 0);
 800100e:	2100      	movs	r1, #0
 8001010:	2005      	movs	r0, #5
 8001012:	f7ff fed5 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("LIMIT");
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <limit_sw_err_page+0x4c>)
 8001018:	f7ff febc 	bl	8000d94 <lcd_print>
	lcd_set_cursor(5, 2);
 800101c:	2102      	movs	r1, #2
 800101e:	2005      	movs	r0, #5
 8001020:	f7ff fece 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("ERROR");
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <limit_sw_err_page+0x50>)
 8001026:	f7ff feb5 	bl	8000d94 <lcd_print>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000013c 	.word	0x2000013c
 8001034:	2000013b 	.word	0x2000013b
 8001038:	08005d1c 	.word	0x08005d1c
 800103c:	08005d14 	.word	0x08005d14

08001040 <complete_page>:

void complete_page(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
//	printf("complete_page\r\n");
	if(last_page!=cur_page)
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <complete_page+0x44>)
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <complete_page+0x48>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d006      	beq.n	800105e <complete_page+0x1e>
	{
		lcd_clear();
 8001050:	f7ff fe80 	bl	8000d54 <lcd_clear>
		last_page = cur_page;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <complete_page+0x48>)
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <complete_page+0x44>)
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e001      	b.n	8001062 <complete_page+0x22>
	}
	else{
		lcd_home();
 800105e:	f7ff fd87 	bl	8000b70 <lcd_home>
	}

	lcd_set_cursor(4, 0);
 8001062:	2100      	movs	r1, #0
 8001064:	2004      	movs	r0, #4
 8001066:	f7ff feab 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("PROCESS");
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <complete_page+0x4c>)
 800106c:	f7ff fe92 	bl	8000d94 <lcd_print>
	lcd_set_cursor(0, 2);
 8001070:	2102      	movs	r1, #2
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fea4 	bl	8000dc0 <lcd_set_cursor>
	lcd_print("COMPLETE");
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <complete_page+0x50>)
 800107a:	f7ff fe8b 	bl	8000d94 <lcd_print>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000013c 	.word	0x2000013c
 8001088:	2000013b 	.word	0x2000013b
 800108c:	08005d24 	.word	0x08005d24
 8001090:	08005d2c 	.word	0x08005d2c

08001094 <mode_level_page>:

void mode_level_page(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
//	printf("mode_level_page\r\n");
	static uint16_t a = 0,b = 0;
	if(last_page!=cur_page)
 8001098:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <mode_level_page+0x15c>)
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	4b55      	ldr	r3, [pc, #340]	; (80011f4 <mode_level_page+0x160>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d006      	beq.n	80010b2 <mode_level_page+0x1e>
	{
		lcd_clear();
 80010a4:	f7ff fe56 	bl	8000d54 <lcd_clear>
		last_page = cur_page;
 80010a8:	4b52      	ldr	r3, [pc, #328]	; (80011f4 <mode_level_page+0x160>)
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <mode_level_page+0x15c>)
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e001      	b.n	80010b6 <mode_level_page+0x22>
	}
	else lcd_home();
 80010b2:	f7ff fd5d 	bl	8000b70 <lcd_home>

	a = dryer.heatTime % 60;
 80010b6:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <mode_level_page+0x164>)
 80010b8:	885a      	ldrh	r2, [r3, #2]
 80010ba:	4b50      	ldr	r3, [pc, #320]	; (80011fc <mode_level_page+0x168>)
 80010bc:	fba3 1302 	umull	r1, r3, r3, r2
 80010c0:	0959      	lsrs	r1, r3, #5
 80010c2:	460b      	mov	r3, r1
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	1a5b      	subs	r3, r3, r1
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <mode_level_page+0x16c>)
 80010d0:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 80010d2:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <mode_level_page+0x164>)
 80010d4:	885b      	ldrh	r3, [r3, #2]
 80010d6:	4a49      	ldr	r2, [pc, #292]	; (80011fc <mode_level_page+0x168>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	095b      	lsrs	r3, r3, #5
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b48      	ldr	r3, [pc, #288]	; (8001204 <mode_level_page+0x170>)
 80010e2:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"h=%02d:%02d",b,a);
 80010e4:	4b47      	ldr	r3, [pc, #284]	; (8001204 <mode_level_page+0x170>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b45      	ldr	r3, [pc, #276]	; (8001200 <mode_level_page+0x16c>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	4946      	ldr	r1, [pc, #280]	; (8001208 <mode_level_page+0x174>)
 80010f0:	4846      	ldr	r0, [pc, #280]	; (800120c <mode_level_page+0x178>)
 80010f2:	f003 fc43 	bl	800497c <siprintf>
	lcd_set_cursor(0, 0);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fe61 	bl	8000dc0 <lcd_set_cursor>
	lcd_print(lcd_buf);
 80010fe:	4843      	ldr	r0, [pc, #268]	; (800120c <mode_level_page+0x178>)
 8001100:	f7ff fe48 	bl	8000d94 <lcd_print>

	a = dryer.coolTime % 60;
 8001104:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <mode_level_page+0x164>)
 8001106:	889a      	ldrh	r2, [r3, #4]
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <mode_level_page+0x168>)
 800110a:	fba3 1302 	umull	r1, r3, r3, r2
 800110e:	0959      	lsrs	r1, r3, #5
 8001110:	460b      	mov	r3, r1
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	1a5b      	subs	r3, r3, r1
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <mode_level_page+0x16c>)
 800111e:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <mode_level_page+0x164>)
 8001122:	889b      	ldrh	r3, [r3, #4]
 8001124:	4a35      	ldr	r2, [pc, #212]	; (80011fc <mode_level_page+0x168>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	b29a      	uxth	r2, r3
 800112e:	4b35      	ldr	r3, [pc, #212]	; (8001204 <mode_level_page+0x170>)
 8001130:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"c=%02d:%02d",b,a);
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <mode_level_page+0x170>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <mode_level_page+0x16c>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	4934      	ldr	r1, [pc, #208]	; (8001210 <mode_level_page+0x17c>)
 800113e:	4833      	ldr	r0, [pc, #204]	; (800120c <mode_level_page+0x178>)
 8001140:	f003 fc1c 	bl	800497c <siprintf>
	lcd_set_cursor(9, 0);
 8001144:	2100      	movs	r1, #0
 8001146:	2009      	movs	r0, #9
 8001148:	f7ff fe3a 	bl	8000dc0 <lcd_set_cursor>
	lcd_print(lcd_buf);
 800114c:	482f      	ldr	r0, [pc, #188]	; (800120c <mode_level_page+0x178>)
 800114e:	f7ff fe21 	bl	8000d94 <lcd_print>

	if(dryer.mode == LOW_LEVEL)sprintf(lcd_buf,"LEVEL: LOW");
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <mode_level_page+0x164>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d104      	bne.n	8001164 <mode_level_page+0xd0>
 800115a:	492e      	ldr	r1, [pc, #184]	; (8001214 <mode_level_page+0x180>)
 800115c:	482b      	ldr	r0, [pc, #172]	; (800120c <mode_level_page+0x178>)
 800115e:	f003 fc0d 	bl	800497c <siprintf>
 8001162:	e010      	b.n	8001186 <mode_level_page+0xf2>
	else if(dryer.mode == MED_LEVEL)sprintf(lcd_buf,"LEVEL: MEDIUM");
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <mode_level_page+0x164>)
 8001166:	785b      	ldrb	r3, [r3, #1]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d104      	bne.n	8001176 <mode_level_page+0xe2>
 800116c:	492a      	ldr	r1, [pc, #168]	; (8001218 <mode_level_page+0x184>)
 800116e:	4827      	ldr	r0, [pc, #156]	; (800120c <mode_level_page+0x178>)
 8001170:	f003 fc04 	bl	800497c <siprintf>
 8001174:	e007      	b.n	8001186 <mode_level_page+0xf2>
	else if(dryer.mode == HIGH_LEVEL)sprintf(lcd_buf,"LEVEL: HIGH");
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <mode_level_page+0x164>)
 8001178:	785b      	ldrb	r3, [r3, #1]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d103      	bne.n	8001186 <mode_level_page+0xf2>
 800117e:	4927      	ldr	r1, [pc, #156]	; (800121c <mode_level_page+0x188>)
 8001180:	4822      	ldr	r0, [pc, #136]	; (800120c <mode_level_page+0x178>)
 8001182:	f003 fbfb 	bl	800497c <siprintf>
	else;

	lcd_set_cursor(2, 1);
 8001186:	2101      	movs	r1, #1
 8001188:	2002      	movs	r0, #2
 800118a:	f7ff fe19 	bl	8000dc0 <lcd_set_cursor>
	lcd_print(lcd_buf);
 800118e:	481f      	ldr	r0, [pc, #124]	; (800120c <mode_level_page+0x178>)
 8001190:	f7ff fe00 	bl	8000d94 <lcd_print>

	sprintf(lcd_buf,"SetTemp: %02dC",dryer.setTemp);
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <mode_level_page+0x164>)
 8001196:	799b      	ldrb	r3, [r3, #6]
 8001198:	461a      	mov	r2, r3
 800119a:	4921      	ldr	r1, [pc, #132]	; (8001220 <mode_level_page+0x18c>)
 800119c:	481b      	ldr	r0, [pc, #108]	; (800120c <mode_level_page+0x178>)
 800119e:	f003 fbed 	bl	800497c <siprintf>
	lcd_set_cursor(-1, 2);
 80011a2:	2102      	movs	r1, #2
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff fe0a 	bl	8000dc0 <lcd_set_cursor>
	lcd_print(lcd_buf);
 80011ac:	4817      	ldr	r0, [pc, #92]	; (800120c <mode_level_page+0x178>)
 80011ae:	f7ff fdf1 	bl	8000d94 <lcd_print>

	 //cur_temp = (int)Max6675_Read_Temp();

	if(cur_temp == -1 || cur_temp == 0)
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <mode_level_page+0x190>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ba:	d003      	beq.n	80011c4 <mode_level_page+0x130>
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <mode_level_page+0x190>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <mode_level_page+0x13a>
	{
		sprintf(lcd_buf,"CurTemp: ERR");
 80011c4:	4918      	ldr	r1, [pc, #96]	; (8001228 <mode_level_page+0x194>)
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <mode_level_page+0x178>)
 80011c8:	f003 fbd8 	bl	800497c <siprintf>
 80011cc:	e006      	b.n	80011dc <mode_level_page+0x148>
	}
	else
	{
		sprintf(lcd_buf,"CurTemp: %02dC ",cur_temp);
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <mode_level_page+0x190>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	4915      	ldr	r1, [pc, #84]	; (800122c <mode_level_page+0x198>)
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <mode_level_page+0x178>)
 80011d8:	f003 fbd0 	bl	800497c <siprintf>
	}
	lcd_set_cursor(-1, 3);
 80011dc:	2103      	movs	r1, #3
 80011de:	f04f 30ff 	mov.w	r0, #4294967295
 80011e2:	f7ff fded 	bl	8000dc0 <lcd_set_cursor>
	lcd_print(lcd_buf);
 80011e6:	4809      	ldr	r0, [pc, #36]	; (800120c <mode_level_page+0x178>)
 80011e8:	f7ff fdd4 	bl	8000d94 <lcd_print>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000013c 	.word	0x2000013c
 80011f4:	2000013b 	.word	0x2000013b
 80011f8:	20000124 	.word	0x20000124
 80011fc:	88888889 	.word	0x88888889
 8001200:	20000120 	.word	0x20000120
 8001204:	20000122 	.word	0x20000122
 8001208:	08005d38 	.word	0x08005d38
 800120c:	200000d0 	.word	0x200000d0
 8001210:	08005d44 	.word	0x08005d44
 8001214:	08005d50 	.word	0x08005d50
 8001218:	08005d5c 	.word	0x08005d5c
 800121c:	08005d6c 	.word	0x08005d6c
 8001220:	08005d78 	.word	0x08005d78
 8001224:	20000004 	.word	0x20000004
 8001228:	08005d88 	.word	0x08005d88
 800122c:	08005d98 	.word	0x08005d98

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4906      	ldr	r1, [pc, #24]	; (8001264 <__NVIC_EnableIRQ+0x34>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db12      	blt.n	80012a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	490a      	ldr	r1, [pc, #40]	; (80012ac <__NVIC_DisableIRQ+0x44>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	3320      	adds	r3, #32
 8001290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001294:	f3bf 8f4f 	dsb	sy
}
 8001298:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800129a:	f3bf 8f6f 	isb	sy
}
 800129e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*For Debug use printf to Print data on UART*/
int __io_putchar(int ch) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 80012b8:	1d39      	adds	r1, r7, #4
 80012ba:	230a      	movs	r3, #10
 80012bc:	2201      	movs	r2, #1
 80012be:	4804      	ldr	r0, [pc, #16]	; (80012d0 <__io_putchar+0x20>)
 80012c0:	f003 f931 	bl	8004526 <HAL_UART_Transmit>
	return ch;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001e4 	.word	0x200001e4

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f001 f8ee 	bl	80024b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 fd2e 	bl	8001d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f7ff f96e 	bl	80005c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012e4:	f001 f84c 	bl	8002380 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80012e8:	f000 ffd6 	bl	8002298 <MX_TIM4_Init>
  MX_SPI1_Init();
 80012ec:	f000 fe54 	bl	8001f98 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	lcd_init(0);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff fba7 	bl	8000a44 <lcd_init>
	lcd_begin(16, 4, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2104      	movs	r1, #4
 80012fa:	2010      	movs	r0, #16
 80012fc:	f7ff fbb8 	bl	8000a70 <lcd_begin>

	dryer.state = INIT;
 8001300:	4b9e      	ldr	r3, [pc, #632]	; (800157c <main+0x2a8>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8001306:	4b9d      	ldr	r3, [pc, #628]	; (800157c <main+0x2a8>)
 8001308:	2200      	movs	r2, #0
 800130a:	705a      	strb	r2, [r3, #1]

	lcd_logo();
 800130c:	f7ff fd8a 	bl	8000e24 <lcd_logo>

	HAL_Delay(3000);
 8001310:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001314:	f001 f932 	bl	800257c <HAL_Delay>

	lcd_clear();
 8001318:	f7ff fd1c 	bl	8000d54 <lcd_clear>


	if (HAL_GPIO_ReadPin(DOOR_SW_GPIO_Port, DOOR_SW_Pin) == HIGH) {
 800131c:	2101      	movs	r1, #1
 800131e:	4898      	ldr	r0, [pc, #608]	; (8001580 <main+0x2ac>)
 8001320:	f001 fbe2 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d106      	bne.n	8001338 <main+0x64>
		door_open_flag = 1U;
 800132a:	4b96      	ldr	r3, [pc, #600]	; (8001584 <main+0x2b0>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8001330:	4b95      	ldr	r3, [pc, #596]	; (8001588 <main+0x2b4>)
 8001332:	2205      	movs	r2, #5
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	e002      	b.n	800133e <main+0x6a>
	}
	else{
		cur_page = INIT_PAGE;
 8001338:	4b93      	ldr	r3, [pc, #588]	; (8001588 <main+0x2b4>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
	}

	lcd_update();
 800133e:	f7ff fd9d 	bl	8000e7c <lcd_update>

    /* USER CODE BEGIN 3 */
		/**********************************************************************************************************
		 **************************************** LCD SCREEN UPDATE RUTINE ****************************************
		 **********************************************************************************************************/
		if (lcd_update_evt) {
 8001342:	4b92      	ldr	r3, [pc, #584]	; (800158c <main+0x2b8>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d004      	beq.n	8001354 <main+0x80>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 800134a:	f7ff fd97 	bl	8000e7c <lcd_update>
			lcd_update_evt = 0U;
 800134e:	4b8f      	ldr	r3, [pc, #572]	; (800158c <main+0x2b8>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* TIMER EVENT RUTINE ************************************************
		 ***************************************************************************************************************/
		if (timer_stop_evt) {
 8001354:	4b8e      	ldr	r3, [pc, #568]	; (8001590 <main+0x2bc>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <main+0x96>
			//printf("Timer Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 800135c:	488d      	ldr	r0, [pc, #564]	; (8001594 <main+0x2c0>)
 800135e:	f002 fd0f 	bl	8003d80 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 8001362:	4b8b      	ldr	r3, [pc, #556]	; (8001590 <main+0x2bc>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e00d      	b.n	8001386 <main+0xb2>

		} else if ((timer_start_evt) && (dryer.state == START)) {
 800136a:	4b8b      	ldr	r3, [pc, #556]	; (8001598 <main+0x2c4>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <main+0xb2>
 8001372:	4b82      	ldr	r3, [pc, #520]	; (800157c <main+0x2a8>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d105      	bne.n	8001386 <main+0xb2>
			//printf("Timer Started\r\n");
			HAL_TIM_Base_Start_IT(&htim4);
 800137a:	4886      	ldr	r0, [pc, #536]	; (8001594 <main+0x2c0>)
 800137c:	f002 fcae 	bl	8003cdc <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 8001380:	4b85      	ldr	r3, [pc, #532]	; (8001598 <main+0x2c4>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
		/***************************************************************************************************************
		 ********************************************* KEYBOARD SCANNING ***********************************************
		 ********************************** INCREMENT DECREMENT OF TIMER AND MODE SET **********************************
		 ***************************************************************************************************************/
		// if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
			if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 8001386:	4b7f      	ldr	r3, [pc, #508]	; (8001584 <main+0x2b0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 81f6 	bne.w	800177c <main+0x4a8>
 8001390:	4b82      	ldr	r3, [pc, #520]	; (800159c <main+0x2c8>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 81f1 	bne.w	800177c <main+0x4a8>
 800139a:	4b81      	ldr	r3, [pc, #516]	; (80015a0 <main+0x2cc>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 81ec 	bne.w	800177c <main+0x4a8>
//				printf("Scaning...\r\n");
				scaned_key = scan_keypad();
 80013a4:	f7ff fa34 	bl	8000810 <scan_keypad>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b7d      	ldr	r3, [pc, #500]	; (80015a4 <main+0x2d0>)
 80013ae:	701a      	strb	r2, [r3, #0]

			if (dryer.state == START) {
 80013b0:	4b72      	ldr	r3, [pc, #456]	; (800157c <main+0x2a8>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	f040 80ff 	bne.w	80015b8 <main+0x2e4>

				switch (scaned_key) {
 80013ba:	4b7a      	ldr	r3, [pc, #488]	; (80015a4 <main+0x2d0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	f200 80d8 	bhi.w	8001574 <main+0x2a0>
 80013c4:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <main+0xf8>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	08001575 	.word	0x08001575
 80013d0:	080013e1 	.word	0x080013e1
 80013d4:	0800143f 	.word	0x0800143f
 80013d8:	0800149b 	.word	0x0800149b
 80013dc:	08001543 	.word	0x08001543
					case NO_KEY_PRESSED:
						break;
					case LOW_KEY_PRESSED:
						lcd_update_evt = 1U;
 80013e0:	4b6a      	ldr	r3, [pc, #424]	; (800158c <main+0x2b8>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
						if (dryer.cycle == HEAT_CYCLE && dryer.heatTime > 60U)
 80013e6:	4b65      	ldr	r3, [pc, #404]	; (800157c <main+0x2a8>)
 80013e8:	7a1b      	ldrb	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d110      	bne.n	8001410 <main+0x13c>
 80013ee:	4b63      	ldr	r3, [pc, #396]	; (800157c <main+0x2a8>)
 80013f0:	885b      	ldrh	r3, [r3, #2]
 80013f2:	2b3c      	cmp	r3, #60	; 0x3c
 80013f4:	d90c      	bls.n	8001410 <main+0x13c>
						{
							dryer.heatTime -= 60U;
 80013f6:	4b61      	ldr	r3, [pc, #388]	; (800157c <main+0x2a8>)
 80013f8:	885b      	ldrh	r3, [r3, #2]
 80013fa:	3b3c      	subs	r3, #60	; 0x3c
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <main+0x2a8>)
 8001400:	805a      	strh	r2, [r3, #2]
							printf("HeatTime = %d\r\n", dryer.heatTime);
 8001402:	4b5e      	ldr	r3, [pc, #376]	; (800157c <main+0x2a8>)
 8001404:	885b      	ldrh	r3, [r3, #2]
 8001406:	4619      	mov	r1, r3
 8001408:	4867      	ldr	r0, [pc, #412]	; (80015a8 <main+0x2d4>)
 800140a:	f003 fa29 	bl	8004860 <iprintf>
						else if (dryer.cycle == COOL_CYCLE && dryer.coolTime > 60U)
						{
							dryer.coolTime -= 60U;
							printf("CoolTime = %d\r\n", dryer.coolTime);
						}
						break;
 800140e:	e0ae      	b.n	800156e <main+0x29a>
						else if (dryer.cycle == COOL_CYCLE && dryer.coolTime > 60U)
 8001410:	4b5a      	ldr	r3, [pc, #360]	; (800157c <main+0x2a8>)
 8001412:	7a1b      	ldrb	r3, [r3, #8]
 8001414:	2b01      	cmp	r3, #1
 8001416:	f040 80aa 	bne.w	800156e <main+0x29a>
 800141a:	4b58      	ldr	r3, [pc, #352]	; (800157c <main+0x2a8>)
 800141c:	889b      	ldrh	r3, [r3, #4]
 800141e:	2b3c      	cmp	r3, #60	; 0x3c
 8001420:	f240 80a5 	bls.w	800156e <main+0x29a>
							dryer.coolTime -= 60U;
 8001424:	4b55      	ldr	r3, [pc, #340]	; (800157c <main+0x2a8>)
 8001426:	889b      	ldrh	r3, [r3, #4]
 8001428:	3b3c      	subs	r3, #60	; 0x3c
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <main+0x2a8>)
 800142e:	809a      	strh	r2, [r3, #4]
							printf("CoolTime = %d\r\n", dryer.coolTime);
 8001430:	4b52      	ldr	r3, [pc, #328]	; (800157c <main+0x2a8>)
 8001432:	889b      	ldrh	r3, [r3, #4]
 8001434:	4619      	mov	r1, r3
 8001436:	485d      	ldr	r0, [pc, #372]	; (80015ac <main+0x2d8>)
 8001438:	f003 fa12 	bl	8004860 <iprintf>
						break;
 800143c:	e097      	b.n	800156e <main+0x29a>
					case MED_KEY_PRESSED:
						lcd_update_evt = 1U;
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <main+0x2b8>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <main+0x2a8>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
						dryer.mode = NO_MODE;
 800144a:	4b4c      	ldr	r3, [pc, #304]	; (800157c <main+0x2a8>)
 800144c:	2200      	movs	r2, #0
 800144e:	705a      	strb	r2, [r3, #1]
						cur_page = INIT_PAGE;
 8001450:	4b4d      	ldr	r3, [pc, #308]	; (8001588 <main+0x2b4>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
						timer_stop_evt = 1U;
 8001456:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <main+0x2bc>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001462:	4853      	ldr	r0, [pc, #332]	; (80015b0 <main+0x2dc>)
 8001464:	f001 fb57 	bl	8002b16 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146e:	4844      	ldr	r0, [pc, #272]	; (8001580 <main+0x2ac>)
 8001470:	f001 fb51 	bl	8002b16 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147a:	484e      	ldr	r0, [pc, #312]	; (80015b4 <main+0x2e0>)
 800147c:	f001 fb4b 	bl	8002b16 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001486:	484b      	ldr	r0, [pc, #300]	; (80015b4 <main+0x2e0>)
 8001488:	f001 fb45 	bl	8002b16 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001492:	4848      	ldr	r0, [pc, #288]	; (80015b4 <main+0x2e0>)
 8001494:	f001 fb3f 	bl	8002b16 <HAL_GPIO_WritePin>
						break;
 8001498:	e06c      	b.n	8001574 <main+0x2a0>
					case HIGH_KEY_PRESSED:
						lcd_update_evt = 1U;
 800149a:	4b3c      	ldr	r3, [pc, #240]	; (800158c <main+0x2b8>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
						if(dryer.cycle == HEAT_CYCLE){
 80014a0:	4b36      	ldr	r3, [pc, #216]	; (800157c <main+0x2a8>)
 80014a2:	7a1b      	ldrb	r3, [r3, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d136      	bne.n	8001516 <main+0x242>
							if(dryer.mode == LOW_LEVEL){
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <main+0x2a8>)
 80014aa:	785b      	ldrb	r3, [r3, #1]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d10b      	bne.n	80014c8 <main+0x1f4>
								if(dryer.heatTime < 1800U){
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <main+0x2a8>)
 80014b2:	885b      	ldrh	r3, [r3, #2]
 80014b4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80014b8:	d226      	bcs.n	8001508 <main+0x234>
									dryer.heatTime += 60U;
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <main+0x2a8>)
 80014bc:	885b      	ldrh	r3, [r3, #2]
 80014be:	333c      	adds	r3, #60	; 0x3c
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <main+0x2a8>)
 80014c4:	805a      	strh	r2, [r3, #2]
 80014c6:	e01f      	b.n	8001508 <main+0x234>
								}
							}
							else if(dryer.mode == MED_LEVEL){
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <main+0x2a8>)
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d10b      	bne.n	80014e8 <main+0x214>
								if(dryer.heatTime < 2400U){
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <main+0x2a8>)
 80014d2:	885b      	ldrh	r3, [r3, #2]
 80014d4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80014d8:	d216      	bcs.n	8001508 <main+0x234>
									dryer.heatTime += 60U;
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <main+0x2a8>)
 80014dc:	885b      	ldrh	r3, [r3, #2]
 80014de:	333c      	adds	r3, #60	; 0x3c
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <main+0x2a8>)
 80014e4:	805a      	strh	r2, [r3, #2]
 80014e6:	e00f      	b.n	8001508 <main+0x234>
								}
							}
							else if(dryer.mode == HIGH_LEVEL){
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <main+0x2a8>)
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d10b      	bne.n	8001508 <main+0x234>
								if(dryer.heatTime < 3000U){
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <main+0x2a8>)
 80014f2:	885b      	ldrh	r3, [r3, #2]
 80014f4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d805      	bhi.n	8001508 <main+0x234>
									dryer.heatTime += 60U;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <main+0x2a8>)
 80014fe:	885b      	ldrh	r3, [r3, #2]
 8001500:	333c      	adds	r3, #60	; 0x3c
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <main+0x2a8>)
 8001506:	805a      	strh	r2, [r3, #2]
								}
							}
							printf("HeatTime = %d\r\n", dryer.heatTime);
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <main+0x2a8>)
 800150a:	885b      	ldrh	r3, [r3, #2]
 800150c:	4619      	mov	r1, r3
 800150e:	4826      	ldr	r0, [pc, #152]	; (80015a8 <main+0x2d4>)
 8001510:	f003 f9a6 	bl	8004860 <iprintf>
						} else if (dryer.cycle == COOL_CYCLE) {
								if (dryer.coolTime < 900U)
									dryer.coolTime += 60U;
								printf("CoolTime = %d\r\n", dryer.coolTime);
							}
						break;
 8001514:	e02d      	b.n	8001572 <main+0x29e>
						} else if (dryer.cycle == COOL_CYCLE) {
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <main+0x2a8>)
 8001518:	7a1b      	ldrb	r3, [r3, #8]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d129      	bne.n	8001572 <main+0x29e>
								if (dryer.coolTime < 900U)
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <main+0x2a8>)
 8001520:	889b      	ldrh	r3, [r3, #4]
 8001522:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001526:	d205      	bcs.n	8001534 <main+0x260>
									dryer.coolTime += 60U;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <main+0x2a8>)
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	333c      	adds	r3, #60	; 0x3c
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <main+0x2a8>)
 8001532:	809a      	strh	r2, [r3, #4]
								printf("CoolTime = %d\r\n", dryer.coolTime);
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <main+0x2a8>)
 8001536:	889b      	ldrh	r3, [r3, #4]
 8001538:	4619      	mov	r1, r3
 800153a:	481c      	ldr	r0, [pc, #112]	; (80015ac <main+0x2d8>)
 800153c:	f003 f990 	bl	8004860 <iprintf>
						break;
 8001540:	e017      	b.n	8001572 <main+0x29e>
					case FN_KEY_PRESSED:
						lcd_update_evt = 1U;
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <main+0x2b8>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
						dryer.heatTime = 0U;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <main+0x2a8>)
 800154a:	2200      	movs	r2, #0
 800154c:	805a      	strh	r2, [r3, #2]
						dryer.cycle = COOL_CYCLE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <main+0x2a8>)
 8001550:	2201      	movs	r2, #1
 8001552:	721a      	strb	r2, [r3, #8]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <main+0x2a8>)
 8001556:	885b      	ldrh	r3, [r3, #2]
 8001558:	4619      	mov	r1, r3
 800155a:	4813      	ldr	r0, [pc, #76]	; (80015a8 <main+0x2d4>)
 800155c:	f003 f980 	bl	8004860 <iprintf>
						printf("CoolTime = %d\r\n", dryer.coolTime);
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <main+0x2a8>)
 8001562:	889b      	ldrh	r3, [r3, #4]
 8001564:	4619      	mov	r1, r3
 8001566:	4811      	ldr	r0, [pc, #68]	; (80015ac <main+0x2d8>)
 8001568:	f003 f97a 	bl	8004860 <iprintf>
						break;
 800156c:	e002      	b.n	8001574 <main+0x2a0>
						break;
 800156e:	bf00      	nop
 8001570:	e000      	b.n	8001574 <main+0x2a0>
						break;
 8001572:	bf00      	nop
				}
				scaned_key = NO_KEY_PRESSED;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <main+0x2d0>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	e0ff      	b.n	800177c <main+0x4a8>
 800157c:	20000124 	.word	0x20000124
 8001580:	40010800 	.word	0x40010800
 8001584:	2000012e 	.word	0x2000012e
 8001588:	2000013b 	.word	0x2000013b
 800158c:	20000132 	.word	0x20000132
 8001590:	20000130 	.word	0x20000130
 8001594:	2000019c 	.word	0x2000019c
 8001598:	20000131 	.word	0x20000131
 800159c:	20000135 	.word	0x20000135
 80015a0:	20000134 	.word	0x20000134
 80015a4:	2000013a 	.word	0x2000013a
 80015a8:	08005da8 	.word	0x08005da8
 80015ac:	08005db8 	.word	0x08005db8
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40010c00 	.word	0x40010c00
			} else if (dryer.state == INIT) {
 80015b8:	4bb5      	ldr	r3, [pc, #724]	; (8001890 <main+0x5bc>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f040 80a5 	bne.w	800170c <main+0x438>

				switch (scaned_key) {
 80015c2:	4bb4      	ldr	r3, [pc, #720]	; (8001894 <main+0x5c0>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	f200 809c 	bhi.w	8001704 <main+0x430>
 80015cc:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <main+0x300>)
 80015ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d2:	bf00      	nop
 80015d4:	08001705 	.word	0x08001705
 80015d8:	080015e5 	.word	0x080015e5
 80015dc:	08001645 	.word	0x08001645
 80015e0:	080016a5 	.word	0x080016a5
					case NO_KEY_PRESSED:
						break;
					
					case LOW_KEY_PRESSED:
						dryer.state = START;
 80015e4:	4baa      	ldr	r3, [pc, #680]	; (8001890 <main+0x5bc>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
						dryer.mode = LOW_LEVEL;
 80015ea:	4ba9      	ldr	r3, [pc, #676]	; (8001890 <main+0x5bc>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	705a      	strb	r2, [r3, #1]
						dryer.heatTime = 600U;
 80015f0:	4ba7      	ldr	r3, [pc, #668]	; (8001890 <main+0x5bc>)
 80015f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80015f6:	805a      	strh	r2, [r3, #2]
						dryer.coolTime = 300U;
 80015f8:	4ba5      	ldr	r3, [pc, #660]	; (8001890 <main+0x5bc>)
 80015fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015fe:	809a      	strh	r2, [r3, #4]
						dryer.beepTime = 30U;
 8001600:	4ba3      	ldr	r3, [pc, #652]	; (8001890 <main+0x5bc>)
 8001602:	221e      	movs	r2, #30
 8001604:	71da      	strb	r2, [r3, #7]
						dryer.setTemp = 40U;
 8001606:	4ba2      	ldr	r3, [pc, #648]	; (8001890 <main+0x5bc>)
 8001608:	2228      	movs	r2, #40	; 0x28
 800160a:	719a      	strb	r2, [r3, #6]
						dryer.cycle = HEAT_CYCLE;
 800160c:	4ba0      	ldr	r3, [pc, #640]	; (8001890 <main+0x5bc>)
 800160e:	2200      	movs	r2, #0
 8001610:	721a      	strb	r2, [r3, #8]
						rot_left_cunt = 30U;
 8001612:	4ba1      	ldr	r3, [pc, #644]	; (8001898 <main+0x5c4>)
 8001614:	221e      	movs	r2, #30
 8001616:	701a      	strb	r2, [r3, #0]
						rot_right_cunt = 0U;
 8001618:	4ba0      	ldr	r3, [pc, #640]	; (800189c <main+0x5c8>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
						pasue_cunt = 0U;
 800161e:	4ba0      	ldr	r3, [pc, #640]	; (80018a0 <main+0x5cc>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001624:	4b9f      	ldr	r3, [pc, #636]	; (80018a4 <main+0x5d0>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
						cur_page = LOW_LEVEL_PAGE;
 800162a:	4b9f      	ldr	r3, [pc, #636]	; (80018a8 <main+0x5d4>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
						lcd_update_evt = 1U;
 8001630:	4b9e      	ldr	r3, [pc, #632]	; (80018ac <main+0x5d8>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
						op_update_evt = 1U;
 8001636:	4b9e      	ldr	r3, [pc, #632]	; (80018b0 <main+0x5dc>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
						printf("LOW LEVEL\r\n");
 800163c:	489d      	ldr	r0, [pc, #628]	; (80018b4 <main+0x5e0>)
 800163e:	f003 f995 	bl	800496c <puts>
						break;
 8001642:	e05f      	b.n	8001704 <main+0x430>

					case MED_KEY_PRESSED:
						dryer.state = START;
 8001644:	4b92      	ldr	r3, [pc, #584]	; (8001890 <main+0x5bc>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
						dryer.mode = MED_LEVEL;
 800164a:	4b91      	ldr	r3, [pc, #580]	; (8001890 <main+0x5bc>)
 800164c:	2202      	movs	r2, #2
 800164e:	705a      	strb	r2, [r3, #1]
						dryer.heatTime = 1200U;
 8001650:	4b8f      	ldr	r3, [pc, #572]	; (8001890 <main+0x5bc>)
 8001652:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001656:	805a      	strh	r2, [r3, #2]
						dryer.coolTime = 300U;
 8001658:	4b8d      	ldr	r3, [pc, #564]	; (8001890 <main+0x5bc>)
 800165a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800165e:	809a      	strh	r2, [r3, #4]
						dryer.beepTime = 30U;
 8001660:	4b8b      	ldr	r3, [pc, #556]	; (8001890 <main+0x5bc>)
 8001662:	221e      	movs	r2, #30
 8001664:	71da      	strb	r2, [r3, #7]
						dryer.setTemp = 70U;
 8001666:	4b8a      	ldr	r3, [pc, #552]	; (8001890 <main+0x5bc>)
 8001668:	2246      	movs	r2, #70	; 0x46
 800166a:	719a      	strb	r2, [r3, #6]
						dryer.cycle = HEAT_CYCLE;
 800166c:	4b88      	ldr	r3, [pc, #544]	; (8001890 <main+0x5bc>)
 800166e:	2200      	movs	r2, #0
 8001670:	721a      	strb	r2, [r3, #8]
						rot_left_cunt = 30U;
 8001672:	4b89      	ldr	r3, [pc, #548]	; (8001898 <main+0x5c4>)
 8001674:	221e      	movs	r2, #30
 8001676:	701a      	strb	r2, [r3, #0]
						rot_right_cunt = 0U;
 8001678:	4b88      	ldr	r3, [pc, #544]	; (800189c <main+0x5c8>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
						pasue_cunt = 0U;
 800167e:	4b88      	ldr	r3, [pc, #544]	; (80018a0 <main+0x5cc>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001684:	4b87      	ldr	r3, [pc, #540]	; (80018a4 <main+0x5d0>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
						cur_page = MED_LEVEL_PAGE;
 800168a:	4b87      	ldr	r3, [pc, #540]	; (80018a8 <main+0x5d4>)
 800168c:	2202      	movs	r2, #2
 800168e:	701a      	strb	r2, [r3, #0]
						lcd_update_evt = 1U;
 8001690:	4b86      	ldr	r3, [pc, #536]	; (80018ac <main+0x5d8>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
						op_update_evt = 1U;
 8001696:	4b86      	ldr	r3, [pc, #536]	; (80018b0 <main+0x5dc>)
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
						printf("MED_LEVEL\r\n");
 800169c:	4886      	ldr	r0, [pc, #536]	; (80018b8 <main+0x5e4>)
 800169e:	f003 f965 	bl	800496c <puts>
						break;
 80016a2:	e02f      	b.n	8001704 <main+0x430>

					case HIGH_KEY_PRESSED:
						dryer.state = START;
 80016a4:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <main+0x5bc>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
						dryer.mode = HIGH_LEVEL;
 80016aa:	4b79      	ldr	r3, [pc, #484]	; (8001890 <main+0x5bc>)
 80016ac:	2203      	movs	r2, #3
 80016ae:	705a      	strb	r2, [r3, #1]
						dryer.heatTime = 1800U;
 80016b0:	4b77      	ldr	r3, [pc, #476]	; (8001890 <main+0x5bc>)
 80016b2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80016b6:	805a      	strh	r2, [r3, #2]
						dryer.coolTime = 300U;
 80016b8:	4b75      	ldr	r3, [pc, #468]	; (8001890 <main+0x5bc>)
 80016ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016be:	809a      	strh	r2, [r3, #4]
						dryer.beepTime = 30U;
 80016c0:	4b73      	ldr	r3, [pc, #460]	; (8001890 <main+0x5bc>)
 80016c2:	221e      	movs	r2, #30
 80016c4:	71da      	strb	r2, [r3, #7]
						dryer.setTemp = 90U;
 80016c6:	4b72      	ldr	r3, [pc, #456]	; (8001890 <main+0x5bc>)
 80016c8:	225a      	movs	r2, #90	; 0x5a
 80016ca:	719a      	strb	r2, [r3, #6]
						dryer.cycle = HEAT_CYCLE;
 80016cc:	4b70      	ldr	r3, [pc, #448]	; (8001890 <main+0x5bc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	721a      	strb	r2, [r3, #8]
						rot_left_cunt = 30U;
 80016d2:	4b71      	ldr	r3, [pc, #452]	; (8001898 <main+0x5c4>)
 80016d4:	221e      	movs	r2, #30
 80016d6:	701a      	strb	r2, [r3, #0]
						rot_right_cunt = 0U;
 80016d8:	4b70      	ldr	r3, [pc, #448]	; (800189c <main+0x5c8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
						pasue_cunt = 0U;
 80016de:	4b70      	ldr	r3, [pc, #448]	; (80018a0 <main+0x5cc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 80016e4:	4b6f      	ldr	r3, [pc, #444]	; (80018a4 <main+0x5d0>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
						cur_page = HIGH_LEVEL_PAGE;
 80016ea:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <main+0x5d4>)
 80016ec:	2203      	movs	r2, #3
 80016ee:	701a      	strb	r2, [r3, #0]
						lcd_update_evt = 1U;
 80016f0:	4b6e      	ldr	r3, [pc, #440]	; (80018ac <main+0x5d8>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
						op_update_evt = 1U;
 80016f6:	4b6e      	ldr	r3, [pc, #440]	; (80018b0 <main+0x5dc>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
						printf("HIGH_LEVEL\r\n");
 80016fc:	486f      	ldr	r0, [pc, #444]	; (80018bc <main+0x5e8>)
 80016fe:	f003 f935 	bl	800496c <puts>
						break;
 8001702:	bf00      	nop
				}
				scaned_key = NO_KEY_PRESSED;
 8001704:	4b63      	ldr	r3, [pc, #396]	; (8001894 <main+0x5c0>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
 800170a:	e037      	b.n	800177c <main+0x4a8>
			}else if(dryer.state == COMPLETE){
 800170c:	4b60      	ldr	r3, [pc, #384]	; (8001890 <main+0x5bc>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d133      	bne.n	800177c <main+0x4a8>
				if(scaned_key == MED_KEY_PRESSED){
 8001714:	4b5f      	ldr	r3, [pc, #380]	; (8001894 <main+0x5c0>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d12c      	bne.n	8001776 <main+0x4a2>
					lcd_update_evt = 1U;
 800171c:	4b63      	ldr	r3, [pc, #396]	; (80018ac <main+0x5d8>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8001722:	4b5b      	ldr	r3, [pc, #364]	; (8001890 <main+0x5bc>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001728:	4b59      	ldr	r3, [pc, #356]	; (8001890 <main+0x5bc>)
 800172a:	2200      	movs	r2, #0
 800172c:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 800172e:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <main+0x5d4>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8001734:	4b62      	ldr	r3, [pc, #392]	; (80018c0 <main+0x5ec>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001740:	4860      	ldr	r0, [pc, #384]	; (80018c4 <main+0x5f0>)
 8001742:	f001 f9e8 	bl	8002b16 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001746:	2200      	movs	r2, #0
 8001748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174c:	485e      	ldr	r0, [pc, #376]	; (80018c8 <main+0x5f4>)
 800174e:	f001 f9e2 	bl	8002b16 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001758:	485c      	ldr	r0, [pc, #368]	; (80018cc <main+0x5f8>)
 800175a:	f001 f9dc 	bl	8002b16 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001764:	4859      	ldr	r0, [pc, #356]	; (80018cc <main+0x5f8>)
 8001766:	f001 f9d6 	bl	8002b16 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001770:	4856      	ldr	r0, [pc, #344]	; (80018cc <main+0x5f8>)
 8001772:	f001 f9d0 	bl	8002b16 <HAL_GPIO_WritePin>
				}
				scaned_key = NO_KEY_PRESSED;
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <main+0x5c0>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
			}
		}

		if (door_open_evt) {
 800177c:	4b54      	ldr	r3, [pc, #336]	; (80018d0 <main+0x5fc>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80b9 	beq.w	80018f8 <main+0x624>
			static volatile uint8_t temp_pin_state = 0U;

			temp_pin_state = HAL_GPIO_ReadPin(DOOR_SW_GPIO_Port, DOOR_SW_Pin);
 8001786:	2101      	movs	r1, #1
 8001788:	484f      	ldr	r0, [pc, #316]	; (80018c8 <main+0x5f4>)
 800178a:	f001 f9ad 	bl	8002ae8 <HAL_GPIO_ReadPin>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <main+0x600>)
 8001794:	701a      	strb	r2, [r3, #0]
			//printf("Pin: %d\r\n",temp_pin_state);

			if (temp_pin_state == HIGH) {
 8001796:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <main+0x600>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b01      	cmp	r3, #1
 800179e:	d13d      	bne.n	800181c <main+0x548>

				if (dryer.state == COMPLETE) {
 80017a0:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <main+0x5bc>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d10b      	bne.n	80017c0 <main+0x4ec>
					timer_stop_evt = 1U;
 80017a8:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <main+0x5ec>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
					dryer.beepTime = 0U;
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <main+0x5bc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	71da      	strb	r2, [r3, #7]
					dryer.state = INIT;
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <main+0x5bc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80017ba:	4b35      	ldr	r3, [pc, #212]	; (8001890 <main+0x5bc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	705a      	strb	r2, [r3, #1]
				}

				door_open_flag = 1U;
 80017c0:	4b45      	ldr	r3, [pc, #276]	; (80018d8 <main+0x604>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 80017c6:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <main+0x5ec>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
				cur_page = DOOR_OPEN_PAGE;
 80017cc:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <main+0x5d4>)
 80017ce:	2205      	movs	r2, #5
 80017d0:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 80017d2:	4b36      	ldr	r3, [pc, #216]	; (80018ac <main+0x5d8>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <main+0x5bc>)
 80017da:	2203      	movs	r2, #3
 80017dc:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e4:	4837      	ldr	r0, [pc, #220]	; (80018c4 <main+0x5f0>)
 80017e6:	f001 f996 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4835      	ldr	r0, [pc, #212]	; (80018c8 <main+0x5f4>)
 80017f2:	f001 f990 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fc:	4833      	ldr	r0, [pc, #204]	; (80018cc <main+0x5f8>)
 80017fe:	f001 f98a 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001808:	4830      	ldr	r0, [pc, #192]	; (80018cc <main+0x5f8>)
 800180a:	f001 f984 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001814:	482d      	ldr	r0, [pc, #180]	; (80018cc <main+0x5f8>)
 8001816:	f001 f97e 	bl	8002b16 <HAL_GPIO_WritePin>
 800181a:	e06a      	b.n	80018f2 <main+0x61e>

				
			} else {
				if (!limit_timeout_flag) {
 800181c:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <main+0x608>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d15d      	bne.n	80018e0 <main+0x60c>
					switch (dryer.mode) {
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <main+0x5bc>)
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d85c      	bhi.n	80018e6 <main+0x612>
 800182c:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <main+0x560>)
 800182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	08001845 	.word	0x08001845
 8001838:	08001853 	.word	0x08001853
 800183c:	08001867 	.word	0x08001867
 8001840:	0800187b 	.word	0x0800187b
					case NO_MODE:
						cur_page = INIT_PAGE;
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <main+0x5d4>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <main+0x5bc>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
						break;
 8001850:	e049      	b.n	80018e6 <main+0x612>
					case LOW_LEVEL:
						cur_page = LOW_LEVEL_PAGE;
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <main+0x5d4>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <main+0x5bc>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <main+0x5d0>)
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
						break;
 8001864:	e03f      	b.n	80018e6 <main+0x612>
					case MED_LEVEL:
						cur_page = MED_LEVEL_PAGE;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <main+0x5d4>)
 8001868:	2202      	movs	r2, #2
 800186a:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <main+0x5bc>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <main+0x5d0>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
						break;
 8001878:	e035      	b.n	80018e6 <main+0x612>
					case HIGH_LEVEL:
						cur_page = HIGH_LEVEL_PAGE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <main+0x5d4>)
 800187c:	2203      	movs	r2, #3
 800187e:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <main+0x5bc>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <main+0x5d0>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
						break;
 800188c:	e02b      	b.n	80018e6 <main+0x612>
 800188e:	bf00      	nop
 8001890:	20000124 	.word	0x20000124
 8001894:	2000013a 	.word	0x2000013a
 8001898:	20000001 	.word	0x20000001
 800189c:	20000136 	.word	0x20000136
 80018a0:	20000137 	.word	0x20000137
 80018a4:	20000131 	.word	0x20000131
 80018a8:	2000013b 	.word	0x2000013b
 80018ac:	20000132 	.word	0x20000132
 80018b0:	20000133 	.word	0x20000133
 80018b4:	08005dc8 	.word	0x08005dc8
 80018b8:	08005dd4 	.word	0x08005dd4
 80018bc:	08005de0 	.word	0x08005de0
 80018c0:	20000130 	.word	0x20000130
 80018c4:	40011000 	.word	0x40011000
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	2000012f 	.word	0x2000012f
 80018d4:	2000013d 	.word	0x2000013d
 80018d8:	2000012e 	.word	0x2000012e
 80018dc:	20000134 	.word	0x20000134
					}
				} else
					cur_page = LIMIT_SW_ERR_PAGE;
 80018e0:	4b9b      	ldr	r3, [pc, #620]	; (8001b50 <main+0x87c>)
 80018e2:	2206      	movs	r2, #6
 80018e4:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 80018e6:	4b9b      	ldr	r3, [pc, #620]	; (8001b54 <main+0x880>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
				door_open_flag = 0U;
 80018ec:	4b9a      	ldr	r3, [pc, #616]	; (8001b58 <main+0x884>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
			}
			door_open_evt = 0U;
 80018f2:	4b9a      	ldr	r3, [pc, #616]	; (8001b5c <main+0x888>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
		}

		/*************************************************************************************************************
		 *************************************************HERTER COIL CHECK*******************************************
		 *************************************************************************************************************/
		if (!door_open_flag && !limit_timeout_flag && dryer.state != COMPLETE) {
 80018f8:	4b97      	ldr	r3, [pc, #604]	; (8001b58 <main+0x884>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d179      	bne.n	80019f4 <main+0x720>
 8001900:	4b97      	ldr	r3, [pc, #604]	; (8001b60 <main+0x88c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d175      	bne.n	80019f4 <main+0x720>
 8001908:	4b96      	ldr	r3, [pc, #600]	; (8001b64 <main+0x890>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d071      	beq.n	80019f4 <main+0x720>

			if (is_coil_open()) {
 8001910:	f7fe ff2e 	bl	8000770 <is_coil_open>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d02d      	beq.n	8001976 <main+0x6a2>

				coil_open_flag = 1U;
 800191a:	4b93      	ldr	r3, [pc, #588]	; (8001b68 <main+0x894>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001920:	4b92      	ldr	r3, [pc, #584]	; (8001b6c <main+0x898>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
				cur_page = HEATER_COIL_PAGE;
 8001926:	4b8a      	ldr	r3, [pc, #552]	; (8001b50 <main+0x87c>)
 8001928:	2207      	movs	r2, #7
 800192a:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 800192c:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <main+0x880>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8001932:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <main+0x890>)
 8001934:	2203      	movs	r2, #3
 8001936:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800193e:	488c      	ldr	r0, [pc, #560]	; (8001b70 <main+0x89c>)
 8001940:	f001 f8e9 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800194a:	488a      	ldr	r0, [pc, #552]	; (8001b74 <main+0x8a0>)
 800194c:	f001 f8e3 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001956:	4888      	ldr	r0, [pc, #544]	; (8001b78 <main+0x8a4>)
 8001958:	f001 f8dd 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001962:	4885      	ldr	r0, [pc, #532]	; (8001b78 <main+0x8a4>)
 8001964:	f001 f8d7 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	4882      	ldr	r0, [pc, #520]	; (8001b78 <main+0x8a4>)
 8001970:	f001 f8d1 	bl	8002b16 <HAL_GPIO_WritePin>
 8001974:	e03e      	b.n	80019f4 <main+0x720>

			} else {
				coil_open_flag = 0U;
 8001976:	4b7c      	ldr	r3, [pc, #496]	; (8001b68 <main+0x894>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
				if(dryer.state == STOP){
 800197c:	4b79      	ldr	r3, [pc, #484]	; (8001b64 <main+0x890>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d137      	bne.n	80019f4 <main+0x720>
					switch (dryer.mode) {
 8001984:	4b77      	ldr	r3, [pc, #476]	; (8001b64 <main+0x890>)
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d830      	bhi.n	80019ee <main+0x71a>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <main+0x6c0>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019a5 	.word	0x080019a5
 8001998:	080019b3 	.word	0x080019b3
 800199c:	080019c7 	.word	0x080019c7
 80019a0:	080019db 	.word	0x080019db
					case NO_MODE:
						cur_page = INIT_PAGE;
 80019a4:	4b6a      	ldr	r3, [pc, #424]	; (8001b50 <main+0x87c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 80019aa:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <main+0x890>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
						break;
 80019b0:	e01d      	b.n	80019ee <main+0x71a>
					case LOW_LEVEL:
						cur_page = LOW_LEVEL_PAGE;
 80019b2:	4b67      	ldr	r3, [pc, #412]	; (8001b50 <main+0x87c>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 80019b8:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <main+0x890>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 80019be:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <main+0x8a8>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
						break;
 80019c4:	e013      	b.n	80019ee <main+0x71a>
					case MED_LEVEL:
						cur_page = MED_LEVEL_PAGE;
 80019c6:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <main+0x87c>)
 80019c8:	2202      	movs	r2, #2
 80019ca:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 80019cc:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <main+0x890>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 80019d2:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <main+0x8a8>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
						break;
 80019d8:	e009      	b.n	80019ee <main+0x71a>
					case HIGH_LEVEL:
						cur_page = HIGH_LEVEL_PAGE;
 80019da:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <main+0x87c>)
 80019dc:	2203      	movs	r2, #3
 80019de:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 80019e0:	4b60      	ldr	r3, [pc, #384]	; (8001b64 <main+0x890>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <main+0x8a8>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
						break;
 80019ec:	bf00      	nop
					}
					lcd_update_evt = 1U;
 80019ee:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <main+0x880>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* LIMIT SWITCH ERROR RUTINE ************************************************
		 ***************************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 80019f4:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <main+0x884>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d140      	bne.n	8001a7e <main+0x7aa>
 80019fc:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <main+0x894>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d13c      	bne.n	8001a7e <main+0x7aa>
 8001a04:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <main+0x88c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d138      	bne.n	8001a7e <main+0x7aa>
			if (dryer.state == START && limit_timeout == 0U) {
 8001a0c:	4b55      	ldr	r3, [pc, #340]	; (8001b64 <main+0x890>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d15a      	bne.n	8001aca <main+0x7f6>
 8001a14:	4b5a      	ldr	r3, [pc, #360]	; (8001b80 <main+0x8ac>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d156      	bne.n	8001aca <main+0x7f6>
				limit_timeout_flag = 1U;
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <main+0x88c>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 8001a22:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <main+0x880>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <main+0x898>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]

				dryer.state = STOP;
 8001a2e:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <main+0x890>)
 8001a30:	2203      	movs	r2, #3
 8001a32:	701a      	strb	r2, [r3, #0]
				dryer.mode = NO_MODE;
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <main+0x890>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	705a      	strb	r2, [r3, #1]
				cur_page = LIMIT_SW_ERR_PAGE;
 8001a3a:	4b45      	ldr	r3, [pc, #276]	; (8001b50 <main+0x87c>)
 8001a3c:	2206      	movs	r2, #6
 8001a3e:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8001a40:	2200      	movs	r2, #0
 8001a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a46:	484a      	ldr	r0, [pc, #296]	; (8001b70 <main+0x89c>)
 8001a48:	f001 f865 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a52:	4848      	ldr	r0, [pc, #288]	; (8001b74 <main+0x8a0>)
 8001a54:	f001 f85f 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a5e:	4846      	ldr	r0, [pc, #280]	; (8001b78 <main+0x8a4>)
 8001a60:	f001 f859 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6a:	4843      	ldr	r0, [pc, #268]	; (8001b78 <main+0x8a4>)
 8001a6c:	f001 f853 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a76:	4840      	ldr	r0, [pc, #256]	; (8001b78 <main+0x8a4>)
 8001a78:	f001 f84d 	bl	8002b16 <HAL_GPIO_WritePin>
			if (dryer.state == START && limit_timeout == 0U) {
 8001a7c:	e025      	b.n	8001aca <main+0x7f6>
			}
		} else if (!door_open_flag && !coil_open_flag && limit_timeout_flag) {
 8001a7e:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <main+0x884>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d122      	bne.n	8001acc <main+0x7f8>
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <main+0x894>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d11e      	bne.n	8001acc <main+0x7f8>
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <main+0x88c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d01a      	beq.n	8001acc <main+0x7f8>
			scaned_key = scan_keypad();
 8001a96:	f7fe febb 	bl	8000810 <scan_keypad>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <main+0x8b0>)
 8001aa0:	701a      	strb	r2, [r3, #0]
			if (scaned_key == MED_KEY_PRESSED) {
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <main+0x8b0>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d110      	bne.n	8001acc <main+0x7f8>
				dryer.state = INIT;
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <main+0x890>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
				cur_page = INIT_PAGE;
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <main+0x87c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
				limit_timeout = 30U;
 8001ab6:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <main+0x8ac>)
 8001ab8:	221e      	movs	r2, #30
 8001aba:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <main+0x880>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
				limit_timeout_flag = 0U;
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <main+0x88c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e000      	b.n	8001acc <main+0x7f8>
			if (dryer.state == START && limit_timeout == 0U) {
 8001aca:	bf00      	nop
		 * @COMPLETE STATE
		 * 		->TURNS OFF FAN, DRUM MOTORS, HEATER
		 * 		->TRUNS ON/OFF BEEP EVERY 3s FOR 30s
		 * 		->WATCHS DOOR OPEN
		 **********************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag && op_update_evt) {
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <main+0x884>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f ac36 	bne.w	8001342 <main+0x6e>
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <main+0x894>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f47f ac31 	bne.w	8001342 <main+0x6e>
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <main+0x88c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f ac2c 	bne.w	8001342 <main+0x6e>
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <main+0x8b4>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f43f ac27 	beq.w	8001342 <main+0x6e>

			if (dryer.state == START) {
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <main+0x890>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	f040 80a9 	bne.w	8001c50 <main+0x97c>

				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, HIGH);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b04:	481b      	ldr	r0, [pc, #108]	; (8001b74 <main+0x8a0>)
 8001b06:	f001 f806 	bl	8002b16 <HAL_GPIO_WritePin>
//				 	printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
//				 	otp = 0;
//				 }

				//start Flip Flop
				if (pasue_cunt > 0) {
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <main+0x8b8>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <main+0x858>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b18:	4817      	ldr	r0, [pc, #92]	; (8001b78 <main+0x8a4>)
 8001b1a:	f000 fffc 	bl	8002b16 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b24:	4814      	ldr	r0, [pc, #80]	; (8001b78 <main+0x8a4>)
 8001b26:	f000 fff6 	bl	8002b16 <HAL_GPIO_WritePin>
 8001b2a:	e043      	b.n	8001bb4 <main+0x8e0>
				} else if (rot_left_cunt > 0) {
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <main+0x8bc>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02f      	beq.n	8001b94 <main+0x8c0>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, HIGH);
 8001b34:	2201      	movs	r2, #1
 8001b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3a:	480f      	ldr	r0, [pc, #60]	; (8001b78 <main+0x8a4>)
 8001b3c:	f000 ffeb 	bl	8002b16 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b46:	480c      	ldr	r0, [pc, #48]	; (8001b78 <main+0x8a4>)
 8001b48:	f000 ffe5 	bl	8002b16 <HAL_GPIO_WritePin>
 8001b4c:	e032      	b.n	8001bb4 <main+0x8e0>
 8001b4e:	bf00      	nop
 8001b50:	2000013b 	.word	0x2000013b
 8001b54:	20000132 	.word	0x20000132
 8001b58:	2000012e 	.word	0x2000012e
 8001b5c:	2000012f 	.word	0x2000012f
 8001b60:	20000134 	.word	0x20000134
 8001b64:	20000124 	.word	0x20000124
 8001b68:	20000135 	.word	0x20000135
 8001b6c:	20000130 	.word	0x20000130
 8001b70:	40011000 	.word	0x40011000
 8001b74:	40010800 	.word	0x40010800
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	20000131 	.word	0x20000131
 8001b80:	20000000 	.word	0x20000000
 8001b84:	2000013a 	.word	0x2000013a
 8001b88:	20000133 	.word	0x20000133
 8001b8c:	20000137 	.word	0x20000137
 8001b90:	20000001 	.word	0x20000001
				} else if (rot_right_cunt > 0) {
 8001b94:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <main+0xa40>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00b      	beq.n	8001bb4 <main+0x8e0>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba2:	485d      	ldr	r0, [pc, #372]	; (8001d18 <main+0xa44>)
 8001ba4:	f000 ffb7 	bl	8002b16 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, HIGH);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bae:	485a      	ldr	r0, [pc, #360]	; (8001d18 <main+0xa44>)
 8001bb0:	f000 ffb1 	bl	8002b16 <HAL_GPIO_WritePin>
				}

				cur_temp = (int) Max6675_Read_Temp();//takes time
 8001bb4:	f7fe fcb2 	bl	800051c <Max6675_Read_Temp>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc88 	bl	80004d0 <__aeabi_f2iz>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a56      	ldr	r2, [pc, #344]	; (8001d1c <main+0xa48>)
 8001bc4:	6013      	str	r3, [r2, #0]
				//Maintain Heater
				if (dryer.cycle == HEAT_CYCLE && !limit_sw_open()) {
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <main+0xa4c>)
 8001bc8:	7a1b      	ldrb	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d139      	bne.n	8001c42 <main+0x96e>
 8001bce:	f7fe fdf7 	bl	80007c0 <limit_sw_open>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d134      	bne.n	8001c42 <main+0x96e>
					if (cur_temp == -1 || cur_temp == 0) {
 8001bd8:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <main+0xa48>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d003      	beq.n	8001bea <main+0x916>
 8001be2:	4b4e      	ldr	r3, [pc, #312]	; (8001d1c <main+0xa48>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <main+0x924>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf0:	4849      	ldr	r0, [pc, #292]	; (8001d18 <main+0xa44>)
 8001bf2:	f000 ff90 	bl	8002b16 <HAL_GPIO_WritePin>
 8001bf6:	e023      	b.n	8001c40 <main+0x96c>
					} else if ((cur_temp > (dryer.setTemp + 2))
 8001bf8:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <main+0xa4c>)
 8001bfa:	799b      	ldrb	r3, [r3, #6]
 8001bfc:	1c9a      	adds	r2, r3, #2
 8001bfe:	4b47      	ldr	r3, [pc, #284]	; (8001d1c <main+0xa48>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	db03      	blt.n	8001c0e <main+0x93a>
							|| (cur_temp <= 0)) {
 8001c06:	4b45      	ldr	r3, [pc, #276]	; (8001d1c <main+0xa48>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	dc06      	bgt.n	8001c1c <main+0x948>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c14:	4840      	ldr	r0, [pc, #256]	; (8001d18 <main+0xa44>)
 8001c16:	f000 ff7e 	bl	8002b16 <HAL_GPIO_WritePin>
 8001c1a:	e011      	b.n	8001c40 <main+0x96c>
					} else if ((cur_temp < (dryer.setTemp - 5))
 8001c1c:	4b40      	ldr	r3, [pc, #256]	; (8001d20 <main+0xa4c>)
 8001c1e:	799b      	ldrb	r3, [r3, #6]
 8001c20:	1f5a      	subs	r2, r3, #5
 8001c22:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <main+0xa48>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dd6d      	ble.n	8001d06 <main+0xa32>
							&& (cur_temp > 0)) {
 8001c2a:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <main+0xa48>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	dd69      	ble.n	8001d06 <main+0xa32>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, HIGH);
 8001c32:	2201      	movs	r2, #1
 8001c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c38:	4837      	ldr	r0, [pc, #220]	; (8001d18 <main+0xa44>)
 8001c3a:	f000 ff6c 	bl	8002b16 <HAL_GPIO_WritePin>
					if (cur_temp == -1 || cur_temp == 0) {
 8001c3e:	e062      	b.n	8001d06 <main+0xa32>
 8001c40:	e061      	b.n	8001d06 <main+0xa32>
					}
				} else {
					HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c48:	4833      	ldr	r0, [pc, #204]	; (8001d18 <main+0xa44>)
 8001c4a:	f000 ff64 	bl	8002b16 <HAL_GPIO_WritePin>
 8001c4e:	e05b      	b.n	8001d08 <main+0xa34>
				}
			} else if (dryer.state == COMPLETE) {
 8001c50:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <main+0xa4c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d137      	bne.n	8001cc8 <main+0x9f4>

				if (dryer.beepTime == 0) {
 8001c58:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <main+0xa4c>)
 8001c5a:	79db      	ldrb	r3, [r3, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d115      	bne.n	8001c8c <main+0x9b8>
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c66:	482f      	ldr	r0, [pc, #188]	; (8001d24 <main+0xa50>)
 8001c68:	f000 ff55 	bl	8002b16 <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 8001c6c:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <main+0xa54>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
					lcd_update_evt = 1U;
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <main+0xa58>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <main+0xa5c>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <main+0xa4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <main+0xa4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	705a      	strb	r2, [r3, #1]
 8001c8a:	e004      	b.n	8001c96 <main+0x9c2>
				}else{
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001c8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c90:	4824      	ldr	r0, [pc, #144]	; (8001d24 <main+0xa50>)
 8001c92:	f000 ff58 	bl	8002b46 <HAL_GPIO_TogglePin>
				}
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c9c:	4825      	ldr	r0, [pc, #148]	; (8001d34 <main+0xa60>)
 8001c9e:	f000 ff3a 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca8:	481b      	ldr	r0, [pc, #108]	; (8001d18 <main+0xa44>)
 8001caa:	f000 ff34 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb4:	4818      	ldr	r0, [pc, #96]	; (8001d18 <main+0xa44>)
 8001cb6:	f000 ff2e 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc0:	4815      	ldr	r0, [pc, #84]	; (8001d18 <main+0xa44>)
 8001cc2:	f000 ff28 	bl	8002b16 <HAL_GPIO_WritePin>
 8001cc6:	e01f      	b.n	8001d08 <main+0xa34>

			} else {
				//beep off
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cce:	4815      	ldr	r0, [pc, #84]	; (8001d24 <main+0xa50>)
 8001cd0:	f000 ff21 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cda:	4816      	ldr	r0, [pc, #88]	; (8001d34 <main+0xa60>)
 8001cdc:	f000 ff1b 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <main+0xa44>)
 8001ce8:	f000 ff15 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf2:	4809      	ldr	r0, [pc, #36]	; (8001d18 <main+0xa44>)
 8001cf4:	f000 ff0f 	bl	8002b16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <main+0xa44>)
 8001d00:	f000 ff09 	bl	8002b16 <HAL_GPIO_WritePin>
 8001d04:	e000      	b.n	8001d08 <main+0xa34>
					if (cur_temp == -1 || cur_temp == 0) {
 8001d06:	bf00      	nop
			}
			op_update_evt = 0U;
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <main+0xa64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
		if (lcd_update_evt) {
 8001d0e:	f7ff bb18 	b.w	8001342 <main+0x6e>
 8001d12:	bf00      	nop
 8001d14:	20000136 	.word	0x20000136
 8001d18:	40010c00 	.word	0x40010c00
 8001d1c:	20000004 	.word	0x20000004
 8001d20:	20000124 	.word	0x20000124
 8001d24:	40011000 	.word	0x40011000
 8001d28:	2000013b 	.word	0x2000013b
 8001d2c:	20000132 	.word	0x20000132
 8001d30:	20000130 	.word	0x20000130
 8001d34:	40010800 	.word	0x40010800
 8001d38:	20000133 	.word	0x20000133

08001d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b090      	sub	sp, #64	; 0x40
 8001d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d42:	f107 0318 	add.w	r3, r7, #24
 8001d46:	2228      	movs	r2, #40	; 0x28
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f002 fd80 	bl	8004850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d70:	2302      	movs	r3, #2
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d80:	f107 0318 	add.w	r3, r7, #24
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 ff0f 	bl	8002ba8 <HAL_RCC_OscConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d90:	f000 f8fc 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d94:	230f      	movs	r3, #15
 8001d96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2102      	movs	r1, #2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 f97c 	bl	80030ac <HAL_RCC_ClockConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001dba:	f000 f8e7 	bl	8001f8c <Error_Handler>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3740      	adds	r7, #64	; 0x40
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
//	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW_Pin) {
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d10b      	bne.n	8001df0 <HAL_GPIO_EXTI_Callback+0x28>
		NVIC_DisableIRQ(EXTI0_IRQn);
 8001dd8:	2006      	movs	r0, #6
 8001dda:	f7ff fa45 	bl	8001268 <__NVIC_DisableIRQ>

		door_open_flag = 1U;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x30>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
		door_open_evt = 1U;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x34>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]

		NVIC_EnableIRQ(EXTI0_IRQn);
 8001dea:	2006      	movs	r0, #6
 8001dec:	f7ff fa20 	bl	8001230 <__NVIC_EnableIRQ>
//		printf("Door_EXTI\r\n");
	}
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2000012e 	.word	0x2000012e
 8001dfc:	2000012f 	.word	0x2000012f

08001e00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	
//	printf("Timer\r\n");

	if (dryer.heatTime > 0) {
 8001e08:	4b54      	ldr	r3, [pc, #336]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_TIM_PeriodElapsedCallback+0x1e>
		dryer.heatTime--;
 8001e10:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e12:	885b      	ldrh	r3, [r3, #2]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e1a:	805a      	strh	r2, [r3, #2]
 8001e1c:	e014      	b.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x48>
	} else if (dryer.coolTime > 0) {
 8001e1e:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e20:	889b      	ldrh	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x34>
		dryer.coolTime--;
 8001e26:	4b4d      	ldr	r3, [pc, #308]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e28:	889b      	ldrh	r3, [r3, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e30:	809a      	strh	r2, [r3, #4]
 8001e32:	e009      	b.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x48>
	} else if (dryer.state == COMPLETE) {
 8001e34:	4b49      	ldr	r3, [pc, #292]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d105      	bne.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x48>
		dryer.beepTime--;
 8001e3c:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e3e:	79db      	ldrb	r3, [r3, #7]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e46:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 8001e48:	4b44      	ldr	r3, [pc, #272]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e4a:	885b      	ldrh	r3, [r3, #2]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <HAL_TIM_PeriodElapsedCallback+0x60>
 8001e50:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e52:	7a1b      	ldrb	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d103      	bne.n	8001e60 <HAL_TIM_PeriodElapsedCallback+0x60>
		dryer.cycle = COOL_CYCLE;
 8001e58:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	721a      	strb	r2, [r3, #8]
 8001e5e:	e010      	b.n	8001e82 <HAL_TIM_PeriodElapsedCallback+0x82>
	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8001e60:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e62:	889b      	ldrh	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10c      	bne.n	8001e82 <HAL_TIM_PeriodElapsedCallback+0x82>
 8001e68:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e6a:	7a1b      	ldrb	r3, [r3, #8]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d108      	bne.n	8001e82 <HAL_TIM_PeriodElapsedCallback+0x82>
		//printf("Complete\r\n");
		dryer.state = COMPLETE;
 8001e70:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e72:	2202      	movs	r2, #2
 8001e74:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 8001e76:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 8001e7c:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001e7e:	2204      	movs	r2, #4
 8001e80:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d006      	beq.n	8001e98 <HAL_TIM_PeriodElapsedCallback+0x98>
		pasue_cunt--;
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e03c      	b.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x112>
	} else if (rot_left_cunt > 0) {
 8001e98:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d009      	beq.n	8001eb4 <HAL_TIM_PeriodElapsedCallback+0xb4>
		rot_left_cunt--;
 8001ea0:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001eaa:	701a      	strb	r2, [r3, #0]
		flipflop = 1;
 8001eac:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e02e      	b.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x112>
	} else if (rot_right_cunt > 0) {
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <HAL_TIM_PeriodElapsedCallback+0xd0>
		rot_right_cunt--;
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ec6:	701a      	strb	r2, [r3, #0]
		flipflop = 0;
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e020      	b.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x112>
	} else {
		rot_sw_state = HAL_GPIO_ReadPin(SEL_ROT_SW_GPIO_Port, SEL_ROT_SW_Pin);
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	4828      	ldr	r0, [pc, #160]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001ed4:	f000 fe08 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001ede:	701a      	strb	r2, [r3, #0]
		if (rot_sw_state) {
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <HAL_TIM_PeriodElapsedCallback+0xf6>
			pasue_cunt = 0U;
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
			rot_left_cunt = 30U;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001ef0:	221e      	movs	r2, #30
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	e00d      	b.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x112>
		} else {
			pasue_cunt = 3U;
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001ef8:	2203      	movs	r2, #3
 8001efa:	701a      	strb	r2, [r3, #0]
			if (flipflop)rot_right_cunt = 30U;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_TIM_PeriodElapsedCallback+0x10c>
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f06:	221e      	movs	r2, #30
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	e002      	b.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x112>
			else rot_left_cunt = 30U;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001f0e:	221e      	movs	r2, #30
 8001f10:	701a      	strb	r2, [r3, #0]
		}
	}

	if (limit_sw_open() && (dryer.cycle == HEAT_CYCLE)) {
 8001f12:	f7fe fc55 	bl	80007c0 <limit_sw_open>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00e      	beq.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0x13a>
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001f1e:	7a1b      	ldrb	r3, [r3, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10a      	bne.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0x13a>
		if (limit_timeout > 0)
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00c      	beq.n	8001f46 <HAL_TIM_PeriodElapsedCallback+0x146>
			limit_timeout--;
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f36:	701a      	strb	r2, [r3, #0]
		if (limit_timeout > 0)
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_PeriodElapsedCallback+0x146>
	} else {
		limit_timeout = 30U;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f3c:	221e      	movs	r2, #30
 8001f3e:	701a      	strb	r2, [r3, #0]
	    limit_timeout_flag = 0U;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
	}
//	otp = 1;
	op_update_evt = 1U;
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
	lcd_update_evt = 1U;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000124 	.word	0x20000124
 8001f60:	2000013b 	.word	0x2000013b
 8001f64:	20000137 	.word	0x20000137
 8001f68:	20000001 	.word	0x20000001
 8001f6c:	20000139 	.word	0x20000139
 8001f70:	20000136 	.word	0x20000136
 8001f74:	40010800 	.word	0x40010800
 8001f78:	20000138 	.word	0x20000138
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000134 	.word	0x20000134
 8001f84:	20000133 	.word	0x20000133
 8001f88:	20000132 	.word	0x20000132

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f94:	e7fe      	b.n	8001f94 <Error_Handler+0x8>
	...

08001f98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001f9e:	4a18      	ldr	r2, [pc, #96]	; (8002000 <MX_SPI1_Init+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fcc:	2230      	movs	r2, #48	; 0x30
 8001fce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fe4:	220a      	movs	r2, #10
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <MX_SPI1_Init+0x64>)
 8001fea:	f001 f9f7 	bl	80033dc <HAL_SPI_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ff4:	f7ff ffca 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000140 	.word	0x20000140
 8002000:	40013000 	.word	0x40013000

08002004 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1b      	ldr	r2, [pc, #108]	; (800208c <HAL_SPI_MspInit+0x88>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d12f      	bne.n	8002084 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_SPI_MspInit+0x8c>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a19      	ldr	r2, [pc, #100]	; (8002090 <HAL_SPI_MspInit+0x8c>)
 800202a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_SPI_MspInit+0x8c>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_SPI_MspInit+0x8c>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a13      	ldr	r2, [pc, #76]	; (8002090 <HAL_SPI_MspInit+0x8c>)
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_SPI_MspInit+0x8c>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002054:	23a0      	movs	r3, #160	; 0xa0
 8002056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4619      	mov	r1, r3
 8002066:	480b      	ldr	r0, [pc, #44]	; (8002094 <HAL_SPI_MspInit+0x90>)
 8002068:	f000 fbba 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800206c:	2340      	movs	r3, #64	; 0x40
 800206e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	4619      	mov	r1, r3
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_SPI_MspInit+0x90>)
 8002080:	f000 fbae 	bl	80027e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002084:	bf00      	nop
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40013000 	.word	0x40013000
 8002090:	40021000 	.word	0x40021000
 8002094:	40010800 	.word	0x40010800

08002098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_MspInit+0x40>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <HAL_MspInit+0x40>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6193      	str	r3, [r2, #24]
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_MspInit+0x40>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_MspInit+0x40>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a07      	ldr	r2, [pc, #28]	; (80020d8 <HAL_MspInit+0x40>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_MspInit+0x40>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	40021000 	.word	0x40021000

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x4>

080020e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler+0x4>

080020ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0x4>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler+0x4>

080020fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002122:	f000 fa0f 	bl	8002544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}

0800212a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOOR_SW_Pin);
 800212e:	2001      	movs	r0, #1
 8002130:	f000 fd22 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <TIM4_IRQHandler+0x10>)
 800213e:	f001 fe4d 	bl	8003ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000019c 	.word	0x2000019c

0800214c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e00a      	b.n	8002174 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800215e:	f3af 8000 	nop.w
 8002162:	4601      	mov	r1, r0
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	60ba      	str	r2, [r7, #8]
 800216a:	b2ca      	uxtb	r2, r1
 800216c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	dbf0      	blt.n	800215e <_read+0x12>
  }

  return len;
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e009      	b.n	80021ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f885 	bl	80012b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dbf1      	blt.n	8002198 <_write+0x12>
  }
  return len;
 80021b4:	687b      	ldr	r3, [r7, #4]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_close>:

int _close(int file)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e4:	605a      	str	r2, [r3, #4]
  return 0;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <_isatty>:

int _isatty(int file)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002206:	b480      	push	{r7}
 8002208:	b085      	sub	sp, #20
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f002 fad4 	bl	80047fc <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20005000 	.word	0x20005000
 8002280:	00000400 	.word	0x00000400
 8002284:	20000198 	.word	0x20000198
 8002288:	20000240 	.word	0x20000240

0800228c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	463b      	mov	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <MX_TIM4_Init+0x94>)
 80022b6:	4a1e      	ldr	r2, [pc, #120]	; (8002330 <MX_TIM4_Init+0x98>)
 80022b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <MX_TIM4_Init+0x94>)
 80022bc:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80022c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <MX_TIM4_Init+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <MX_TIM4_Init+0x94>)
 80022ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80022ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <MX_TIM4_Init+0x94>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <MX_TIM4_Init+0x94>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022dc:	4813      	ldr	r0, [pc, #76]	; (800232c <MX_TIM4_Init+0x94>)
 80022de:	f001 fcad 	bl	8003c3c <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80022e8:	f7ff fe50 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	4619      	mov	r1, r3
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <MX_TIM4_Init+0x94>)
 80022fa:	f001 fe77 	bl	8003fec <HAL_TIM_ConfigClockSource>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002304:	f7ff fe42 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002308:	2320      	movs	r3, #32
 800230a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002310:	463b      	mov	r3, r7
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <MX_TIM4_Init+0x94>)
 8002316:	f002 f849 	bl	80043ac <HAL_TIMEx_MasterConfigSynchronization>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002320:	f7ff fe34 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2000019c 	.word	0x2000019c
 8002330:	40000800 	.word	0x40000800

08002334 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <HAL_TIM_Base_MspInit+0x44>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d113      	bne.n	800236e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <HAL_TIM_Base_MspInit+0x48>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a0c      	ldr	r2, [pc, #48]	; (800237c <HAL_TIM_Base_MspInit+0x48>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	61d3      	str	r3, [r2, #28]
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_TIM_Base_MspInit+0x48>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2101      	movs	r1, #1
 8002362:	201e      	movs	r0, #30
 8002364:	f000 fa05 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002368:	201e      	movs	r0, #30
 800236a:	f000 fa1e 	bl	80027aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40000800 	.word	0x40000800
 800237c:	40021000 	.word	0x40021000

08002380 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <MX_USART1_UART_Init+0x50>)
 8002388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 800238c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <MX_USART1_UART_Init+0x4c>)
 80023b8:	f002 f868 	bl	800448c <HAL_UART_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023c2:	f7ff fde3 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200001e4 	.word	0x200001e4
 80023d0:	40013800 	.word	0x40013800

080023d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <HAL_UART_MspInit+0x8c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d131      	bne.n	8002458 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_UART_MspInit+0x90>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <HAL_UART_MspInit+0x90>)
 80023fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_UART_MspInit+0x90>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_UART_MspInit+0x90>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <HAL_UART_MspInit+0x90>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_UART_MspInit+0x90>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002428:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	f107 0310 	add.w	r3, r7, #16
 8002436:	4619      	mov	r1, r3
 8002438:	480b      	ldr	r0, [pc, #44]	; (8002468 <HAL_UART_MspInit+0x94>)
 800243a:	f000 f9d1 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800243e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	4619      	mov	r1, r3
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <HAL_UART_MspInit+0x94>)
 8002454:	f000 f9c4 	bl	80027e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002458:	bf00      	nop
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40013800 	.word	0x40013800
 8002464:	40021000 	.word	0x40021000
 8002468:	40010800 	.word	0x40010800

0800246c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800246c:	480c      	ldr	r0, [pc, #48]	; (80024a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800246e:	490d      	ldr	r1, [pc, #52]	; (80024a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002470:	4a0d      	ldr	r2, [pc, #52]	; (80024a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002474:	e002      	b.n	800247c <LoopCopyDataInit>

08002476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247a:	3304      	adds	r3, #4

0800247c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800247c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002480:	d3f9      	bcc.n	8002476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002484:	4c0a      	ldr	r4, [pc, #40]	; (80024b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002488:	e001      	b.n	800248e <LoopFillZerobss>

0800248a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800248c:	3204      	adds	r2, #4

0800248e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002490:	d3fb      	bcc.n	800248a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002492:	f7ff fefb 	bl	800228c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002496:	f002 f9b7 	bl	8004808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249a:	f7fe ff1b 	bl	80012d4 <main>
  bx lr
 800249e:	4770      	bx	lr
  ldr r0, =_sdata
 80024a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024a8:	08005eb4 	.word	0x08005eb4
  ldr r2, =_sbss
 80024ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024b0:	2000023c 	.word	0x2000023c

080024b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <ADC1_2_IRQHandler>
	...

080024b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_Init+0x28>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <HAL_Init+0x28>)
 80024c2:	f043 0310 	orr.w	r3, r3, #16
 80024c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c8:	2003      	movs	r0, #3
 80024ca:	f000 f947 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ce:	200f      	movs	r0, #15
 80024d0:	f000 f808 	bl	80024e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d4:	f7ff fde0 	bl	8002098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_InitTick+0x54>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x58>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f95f 	bl	80027c6 <HAL_SYSTICK_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e00e      	b.n	8002530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d80a      	bhi.n	800252e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002518:	2200      	movs	r2, #0
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f000 f927 	bl	8002772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <HAL_InitTick+0x5c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000008 	.word	0x20000008
 800253c:	20000010 	.word	0x20000010
 8002540:	2000000c 	.word	0x2000000c

08002544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_IncTick+0x1c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_IncTick+0x20>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4413      	add	r3, r2
 8002554:	4a03      	ldr	r2, [pc, #12]	; (8002564 <HAL_IncTick+0x20>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	20000010 	.word	0x20000010
 8002564:	20000228 	.word	0x20000228

08002568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b02      	ldr	r3, [pc, #8]	; (8002578 <HAL_GetTick+0x10>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000228 	.word	0x20000228

0800257c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff fff0 	bl	8002568 <HAL_GetTick>
 8002588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d005      	beq.n	80025a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_Delay+0x44>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025a2:	bf00      	nop
 80025a4:	f7ff ffe0 	bl	8002568 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8f7      	bhi.n	80025a4 <HAL_Delay+0x28>
  {
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000010 	.word	0x20000010

080025c4 <__NVIC_SetPriorityGrouping>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f6:	4a04      	ldr	r2, [pc, #16]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	60d3      	str	r3, [r2, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_GetPriorityGrouping>:
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <__NVIC_GetPriorityGrouping+0x18>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0307 	and.w	r3, r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_EnableIRQ>:
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db0b      	blt.n	8002652 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4906      	ldr	r1, [pc, #24]	; (800265c <__NVIC_EnableIRQ+0x34>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2001      	movs	r0, #1
 800264a:	fa00 f202 	lsl.w	r2, r0, r2
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100

08002660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	db0a      	blt.n	800268a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	490c      	ldr	r1, [pc, #48]	; (80026ac <__NVIC_SetPriority+0x4c>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	440b      	add	r3, r1
 8002684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002688:	e00a      	b.n	80026a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <__NVIC_SetPriority+0x50>)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3b04      	subs	r3, #4
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	440b      	add	r3, r1
 800269e:	761a      	strb	r2, [r3, #24]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f1c3 0307 	rsb	r3, r3, #7
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	bf28      	it	cs
 80026d2:	2304      	movcs	r3, #4
 80026d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3304      	adds	r3, #4
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d902      	bls.n	80026e4 <NVIC_EncodePriority+0x30>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3b03      	subs	r3, #3
 80026e2:	e000      	b.n	80026e6 <NVIC_EncodePriority+0x32>
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43d9      	mvns	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	4313      	orrs	r3, r2
         );
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f7ff ff90 	bl	8002660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff2d 	bl	80025c4 <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002784:	f7ff ff42 	bl	800260c <__NVIC_GetPriorityGrouping>
 8002788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7ff ff90 	bl	80026b4 <NVIC_EncodePriority>
 8002794:	4602      	mov	r2, r0
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff5f 	bl	8002660 <__NVIC_SetPriority>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff35 	bl	8002628 <__NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffa2 	bl	8002718 <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b08b      	sub	sp, #44	; 0x2c
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f2:	e169      	b.n	8002ac8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027f4:	2201      	movs	r2, #1
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	429a      	cmp	r2, r3
 800280e:	f040 8158 	bne.w	8002ac2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a9a      	ldr	r2, [pc, #616]	; (8002a80 <HAL_GPIO_Init+0x2a0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d05e      	beq.n	80028da <HAL_GPIO_Init+0xfa>
 800281c:	4a98      	ldr	r2, [pc, #608]	; (8002a80 <HAL_GPIO_Init+0x2a0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d875      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 8002822:	4a98      	ldr	r2, [pc, #608]	; (8002a84 <HAL_GPIO_Init+0x2a4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d058      	beq.n	80028da <HAL_GPIO_Init+0xfa>
 8002828:	4a96      	ldr	r2, [pc, #600]	; (8002a84 <HAL_GPIO_Init+0x2a4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d86f      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 800282e:	4a96      	ldr	r2, [pc, #600]	; (8002a88 <HAL_GPIO_Init+0x2a8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d052      	beq.n	80028da <HAL_GPIO_Init+0xfa>
 8002834:	4a94      	ldr	r2, [pc, #592]	; (8002a88 <HAL_GPIO_Init+0x2a8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d869      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 800283a:	4a94      	ldr	r2, [pc, #592]	; (8002a8c <HAL_GPIO_Init+0x2ac>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d04c      	beq.n	80028da <HAL_GPIO_Init+0xfa>
 8002840:	4a92      	ldr	r2, [pc, #584]	; (8002a8c <HAL_GPIO_Init+0x2ac>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d863      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 8002846:	4a92      	ldr	r2, [pc, #584]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d046      	beq.n	80028da <HAL_GPIO_Init+0xfa>
 800284c:	4a90      	ldr	r2, [pc, #576]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d85d      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 8002852:	2b12      	cmp	r3, #18
 8002854:	d82a      	bhi.n	80028ac <HAL_GPIO_Init+0xcc>
 8002856:	2b12      	cmp	r3, #18
 8002858:	d859      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 800285a:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <HAL_GPIO_Init+0x80>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	080028db 	.word	0x080028db
 8002864:	080028b5 	.word	0x080028b5
 8002868:	080028c7 	.word	0x080028c7
 800286c:	08002909 	.word	0x08002909
 8002870:	0800290f 	.word	0x0800290f
 8002874:	0800290f 	.word	0x0800290f
 8002878:	0800290f 	.word	0x0800290f
 800287c:	0800290f 	.word	0x0800290f
 8002880:	0800290f 	.word	0x0800290f
 8002884:	0800290f 	.word	0x0800290f
 8002888:	0800290f 	.word	0x0800290f
 800288c:	0800290f 	.word	0x0800290f
 8002890:	0800290f 	.word	0x0800290f
 8002894:	0800290f 	.word	0x0800290f
 8002898:	0800290f 	.word	0x0800290f
 800289c:	0800290f 	.word	0x0800290f
 80028a0:	0800290f 	.word	0x0800290f
 80028a4:	080028bd 	.word	0x080028bd
 80028a8:	080028d1 	.word	0x080028d1
 80028ac:	4a79      	ldr	r2, [pc, #484]	; (8002a94 <HAL_GPIO_Init+0x2b4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028b2:	e02c      	b.n	800290e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	623b      	str	r3, [r7, #32]
          break;
 80028ba:	e029      	b.n	8002910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	3304      	adds	r3, #4
 80028c2:	623b      	str	r3, [r7, #32]
          break;
 80028c4:	e024      	b.n	8002910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	3308      	adds	r3, #8
 80028cc:	623b      	str	r3, [r7, #32]
          break;
 80028ce:	e01f      	b.n	8002910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	330c      	adds	r3, #12
 80028d6:	623b      	str	r3, [r7, #32]
          break;
 80028d8:	e01a      	b.n	8002910 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028e2:	2304      	movs	r3, #4
 80028e4:	623b      	str	r3, [r7, #32]
          break;
 80028e6:	e013      	b.n	8002910 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f0:	2308      	movs	r3, #8
 80028f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	611a      	str	r2, [r3, #16]
          break;
 80028fa:	e009      	b.n	8002910 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028fc:	2308      	movs	r3, #8
 80028fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	615a      	str	r2, [r3, #20]
          break;
 8002906:	e003      	b.n	8002910 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
          break;
 800290c:	e000      	b.n	8002910 <HAL_GPIO_Init+0x130>
          break;
 800290e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d801      	bhi.n	800291a <HAL_GPIO_Init+0x13a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	e001      	b.n	800291e <HAL_GPIO_Init+0x13e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2bff      	cmp	r3, #255	; 0xff
 8002924:	d802      	bhi.n	800292c <HAL_GPIO_Init+0x14c>
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	e002      	b.n	8002932 <HAL_GPIO_Init+0x152>
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	3b08      	subs	r3, #8
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	210f      	movs	r1, #15
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	6a39      	ldr	r1, [r7, #32]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	431a      	orrs	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80b1 	beq.w	8002ac2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002960:	4b4d      	ldr	r3, [pc, #308]	; (8002a98 <HAL_GPIO_Init+0x2b8>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4a4c      	ldr	r2, [pc, #304]	; (8002a98 <HAL_GPIO_Init+0x2b8>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6193      	str	r3, [r2, #24]
 800296c:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <HAL_GPIO_Init+0x2b8>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002978:	4a48      	ldr	r2, [pc, #288]	; (8002a9c <HAL_GPIO_Init+0x2bc>)
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	220f      	movs	r2, #15
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a40      	ldr	r2, [pc, #256]	; (8002aa0 <HAL_GPIO_Init+0x2c0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_GPIO_Init+0x1ec>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3f      	ldr	r2, [pc, #252]	; (8002aa4 <HAL_GPIO_Init+0x2c4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00d      	beq.n	80029c8 <HAL_GPIO_Init+0x1e8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3e      	ldr	r2, [pc, #248]	; (8002aa8 <HAL_GPIO_Init+0x2c8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <HAL_GPIO_Init+0x1e4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3d      	ldr	r2, [pc, #244]	; (8002aac <HAL_GPIO_Init+0x2cc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d101      	bne.n	80029c0 <HAL_GPIO_Init+0x1e0>
 80029bc:	2303      	movs	r3, #3
 80029be:	e006      	b.n	80029ce <HAL_GPIO_Init+0x1ee>
 80029c0:	2304      	movs	r3, #4
 80029c2:	e004      	b.n	80029ce <HAL_GPIO_Init+0x1ee>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e002      	b.n	80029ce <HAL_GPIO_Init+0x1ee>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <HAL_GPIO_Init+0x1ee>
 80029cc:	2300      	movs	r3, #0
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	f002 0203 	and.w	r2, r2, #3
 80029d4:	0092      	lsls	r2, r2, #2
 80029d6:	4093      	lsls	r3, r2
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029de:	492f      	ldr	r1, [pc, #188]	; (8002a9c <HAL_GPIO_Init+0x2bc>)
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	3302      	adds	r3, #2
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029f8:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	492c      	ldr	r1, [pc, #176]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	4928      	ldr	r1, [pc, #160]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a20:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	4922      	ldr	r1, [pc, #136]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	491e      	ldr	r1, [pc, #120]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	4918      	ldr	r1, [pc, #96]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	4914      	ldr	r1, [pc, #80]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d021      	beq.n	8002ab4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
 8002a7c:	e021      	b.n	8002ac2 <HAL_GPIO_Init+0x2e2>
 8002a7e:	bf00      	nop
 8002a80:	10320000 	.word	0x10320000
 8002a84:	10310000 	.word	0x10310000
 8002a88:	10220000 	.word	0x10220000
 8002a8c:	10210000 	.word	0x10210000
 8002a90:	10120000 	.word	0x10120000
 8002a94:	10110000 	.word	0x10110000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40010800 	.word	0x40010800
 8002aa4:	40010c00 	.word	0x40010c00
 8002aa8:	40011000 	.word	0x40011000
 8002aac:	40011400 	.word	0x40011400
 8002ab0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_GPIO_Init+0x304>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	4909      	ldr	r1, [pc, #36]	; (8002ae4 <HAL_GPIO_Init+0x304>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f47f ae8e 	bne.w	80027f4 <HAL_GPIO_Init+0x14>
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	372c      	adds	r7, #44	; 0x2c
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	40010400 	.word	0x40010400

08002ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e001      	b.n	8002b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]
 8002b22:	4613      	mov	r3, r2
 8002b24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b26:	787b      	ldrb	r3, [r7, #1]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2c:	887a      	ldrh	r2, [r7, #2]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b32:	e003      	b.n	8002b3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	041a      	lsls	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	611a      	str	r2, [r3, #16]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b58:	887a      	ldrh	r2, [r7, #2]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	041a      	lsls	r2, r3, #16
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43d9      	mvns	r1, r3
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	400b      	ands	r3, r1
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff f916 	bl	8001dc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e272      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8087 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc8:	4b92      	ldr	r3, [pc, #584]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d00c      	beq.n	8002bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd4:	4b8f      	ldr	r3, [pc, #572]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d112      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5e>
 8002be0:	4b8c      	ldr	r3, [pc, #560]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bec:	d10b      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bee:	4b89      	ldr	r3, [pc, #548]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d06c      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x12c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d168      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e24c      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x76>
 8002c10:	4b80      	ldr	r3, [pc, #512]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a7f      	ldr	r2, [pc, #508]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e02e      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x98>
 8002c26:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7a      	ldr	r2, [pc, #488]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b78      	ldr	r3, [pc, #480]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a77      	ldr	r2, [pc, #476]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e01d      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0xbc>
 8002c4a:	4b72      	ldr	r3, [pc, #456]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a71      	ldr	r2, [pc, #452]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c64:	4b6b      	ldr	r3, [pc, #428]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a6a      	ldr	r2, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a67      	ldr	r2, [pc, #412]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff fc70 	bl	8002568 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7ff fc6c 	bl	8002568 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e200      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b5d      	ldr	r3, [pc, #372]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0xe4>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff fc5c 	bl	8002568 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7ff fc58 	bl	8002568 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1ec      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x10c>
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d063      	beq.n	8002daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce2:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cee:	4b49      	ldr	r3, [pc, #292]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d11c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x18c>
 8002cfa:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d116      	bne.n	8002d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_RCC_OscConfig+0x176>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e1c0      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4939      	ldr	r1, [pc, #228]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	e03a      	b.n	8002daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7ff fc11 	bl	8002568 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7ff fc0d 	bl	8002568 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e1a1      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4927      	ldr	r1, [pc, #156]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
 8002d7c:	e015      	b.n	8002daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7ff fbf0 	bl	8002568 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7ff fbec 	bl	8002568 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e180      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d03a      	beq.n	8002e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d019      	beq.n	8002df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7ff fbd0 	bl	8002568 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7ff fbcc 	bl	8002568 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e160      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dea:	2001      	movs	r0, #1
 8002dec:	f000 fad8 	bl	80033a0 <RCC_Delay>
 8002df0:	e01c      	b.n	8002e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df8:	f7ff fbb6 	bl	8002568 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfe:	e00f      	b.n	8002e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e00:	f7ff fbb2 	bl	8002568 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d908      	bls.n	8002e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e146      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	42420000 	.word	0x42420000
 8002e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e9      	bne.n	8002e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a6 	beq.w	8002f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3e:	4b8b      	ldr	r3, [pc, #556]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10d      	bne.n	8002e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4b88      	ldr	r3, [pc, #544]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4a87      	ldr	r2, [pc, #540]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	61d3      	str	r3, [r2, #28]
 8002e56:	4b85      	ldr	r3, [pc, #532]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b82      	ldr	r3, [pc, #520]	; (8003070 <HAL_RCC_OscConfig+0x4c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b7f      	ldr	r3, [pc, #508]	; (8003070 <HAL_RCC_OscConfig+0x4c8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a7e      	ldr	r2, [pc, #504]	; (8003070 <HAL_RCC_OscConfig+0x4c8>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7ff fb73 	bl	8002568 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7ff fb6f 	bl	8002568 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	; 0x64
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e103      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b75      	ldr	r3, [pc, #468]	; (8003070 <HAL_RCC_OscConfig+0x4c8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x312>
 8002eac:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	e02d      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x334>
 8002ec2:	4b6a      	ldr	r3, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a69      	ldr	r2, [pc, #420]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	4b67      	ldr	r3, [pc, #412]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a66      	ldr	r2, [pc, #408]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	e01c      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCC_OscConfig+0x356>
 8002ee4:	4b61      	ldr	r3, [pc, #388]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a60      	ldr	r2, [pc, #384]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	f043 0304 	orr.w	r3, r3, #4
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	4b5e      	ldr	r3, [pc, #376]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a5d      	ldr	r2, [pc, #372]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	e00b      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002efe:	4b5b      	ldr	r3, [pc, #364]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a5a      	ldr	r2, [pc, #360]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	4b58      	ldr	r3, [pc, #352]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a57      	ldr	r2, [pc, #348]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d015      	beq.n	8002f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7ff fb23 	bl	8002568 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7ff fb1f 	bl	8002568 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0b1      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3c:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ee      	beq.n	8002f26 <HAL_RCC_OscConfig+0x37e>
 8002f48:	e014      	b.n	8002f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7ff fb0d 	bl	8002568 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7ff fb09 	bl	8002568 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e09b      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f68:	4b40      	ldr	r3, [pc, #256]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ee      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d105      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	4b3c      	ldr	r3, [pc, #240]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4a3b      	ldr	r2, [pc, #236]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8087 	beq.w	800309e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f90:	4b36      	ldr	r3, [pc, #216]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d061      	beq.n	8003060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d146      	bne.n	8003032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa4:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7ff fadd 	bl	8002568 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7ff fad9 	bl	8002568 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e06d      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc4:	4b29      	ldr	r3, [pc, #164]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d108      	bne.n	8002fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4921      	ldr	r1, [pc, #132]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a19      	ldr	r1, [r3, #32]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	491b      	ldr	r1, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7ff faad 	bl	8002568 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003012:	f7ff faa9 	bl	8002568 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e03d      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x46a>
 8003030:	e035      	b.n	800309e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7ff fa96 	bl	8002568 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7ff fa92 	bl	8002568 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e026      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x498>
 800305e:	e01e      	b.n	800309e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d107      	bne.n	8003078 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e019      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
 800306c:	40021000 	.word	0x40021000
 8003070:	40007000 	.word	0x40007000
 8003074:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_OscConfig+0x500>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	429a      	cmp	r2, r3
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000

080030ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0d0      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d910      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b67      	ldr	r3, [pc, #412]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4965      	ldr	r1, [pc, #404]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b8      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800312a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	494d      	ldr	r1, [pc, #308]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d040      	beq.n	80031cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e073      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06b      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318a:	4b39      	ldr	r3, [pc, #228]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4936      	ldr	r1, [pc, #216]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800319c:	f7ff f9e4 	bl	8002568 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a4:	f7ff f9e0 	bl	8002568 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e053      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 020c 	and.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1eb      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b27      	ldr	r3, [pc, #156]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d210      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 0207 	bic.w	r2, r3, #7
 80031e2:	4922      	ldr	r1, [pc, #136]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e032      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323a:	f000 f821 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1cc>)
 8003254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1d0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff f942 	bl	80024e4 <HAL_InitTick>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40022000 	.word	0x40022000
 8003270:	40021000 	.word	0x40021000
 8003274:	08005dfc 	.word	0x08005dfc
 8003278:	20000008 	.word	0x20000008
 800327c:	2000000c 	.word	0x2000000c

08003280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	b490      	push	{r4, r7}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_RCC_GetSysClockFreq+0xac>)
 8003288:	1d3c      	adds	r4, r7, #4
 800328a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800328c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003290:	f240 2301 	movw	r3, #513	; 0x201
 8003294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032aa:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x40>
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x46>
 80032be:	e02b      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032c2:	623b      	str	r3, [r7, #32]
      break;
 80032c4:	e02b      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	3328      	adds	r3, #40	; 0x28
 80032d0:	443b      	add	r3, r7
 80032d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d012      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0c5b      	lsrs	r3, r3, #17
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	3328      	adds	r3, #40	; 0x28
 80032ee:	443b      	add	r3, r7
 80032f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032fa:	fb03 f202 	mul.w	r2, r3, r2
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	e004      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <HAL_RCC_GetSysClockFreq+0xb8>)
 800330c:	fb02 f303 	mul.w	r3, r2, r3
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	623b      	str	r3, [r7, #32]
      break;
 8003316:	e002      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 800331a:	623b      	str	r3, [r7, #32]
      break;
 800331c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331e:	6a3b      	ldr	r3, [r7, #32]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bc90      	pop	{r4, r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	08005dec 	.word	0x08005dec
 8003330:	40021000 	.word	0x40021000
 8003334:	007a1200 	.word	0x007a1200
 8003338:	003d0900 	.word	0x003d0900

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003340:	4b02      	ldr	r3, [pc, #8]	; (800334c <HAL_RCC_GetHCLKFreq+0x10>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20000008 	.word	0x20000008

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003354:	f7ff fff2 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4903      	ldr	r1, [pc, #12]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	08005e0c 	.word	0x08005e0c

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800337c:	f7ff ffde 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	0adb      	lsrs	r3, r3, #11
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	; (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	08005e0c 	.word	0x08005e0c

080033a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <RCC_Delay+0x34>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <RCC_Delay+0x38>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0a5b      	lsrs	r3, r3, #9
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033bc:	bf00      	nop
  }
  while (Delay --);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	60fa      	str	r2, [r7, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f9      	bne.n	80033bc <RCC_Delay+0x1c>
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	20000008 	.word	0x20000008
 80033d8:	10624dd3 	.word	0x10624dd3

080033dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e076      	b.n	80034dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033fe:	d009      	beq.n	8003414 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]
 8003406:	e005      	b.n	8003414 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe fde8 	bl	8002004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	ea42 0103 	orr.w	r1, r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	0c1a      	lsrs	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f002 0204 	and.w	r2, r2, #4
 80034ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	4613      	mov	r3, r2
 80034f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003500:	d112      	bne.n	8003528 <HAL_SPI_Receive+0x44>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10e      	bne.n	8003528 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2204      	movs	r2, #4
 800350e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003512:	88fa      	ldrh	r2, [r7, #6]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f8f1 	bl	8003706 <HAL_SPI_TransmitReceive>
 8003524:	4603      	mov	r3, r0
 8003526:	e0ea      	b.n	80036fe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_SPI_Receive+0x52>
 8003532:	2302      	movs	r3, #2
 8003534:	e0e3      	b.n	80036fe <HAL_SPI_Receive+0x21a>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800353e:	f7ff f813 	bl	8002568 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d002      	beq.n	8003556 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003550:	2302      	movs	r3, #2
 8003552:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003554:	e0ca      	b.n	80036ec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_SPI_Receive+0x7e>
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003566:	e0c1      	b.n	80036ec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2204      	movs	r2, #4
 800356c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	88fa      	ldrh	r2, [r7, #6]
 8003586:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ae:	d10f      	bne.n	80035d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d007      	beq.n	80035ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d162      	bne.n	80036bc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035f6:	e02e      	b.n	8003656 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d115      	bne.n	8003632 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f103 020c 	add.w	r2, r3, #12
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	7812      	ldrb	r2, [r2, #0]
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003630:	e011      	b.n	8003656 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003632:	f7fe ff99 	bl	8002568 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d803      	bhi.n	800364a <HAL_SPI_Receive+0x166>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d102      	bne.n	8003650 <HAL_SPI_Receive+0x16c>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003654:	e04a      	b.n	80036ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1cb      	bne.n	80035f8 <HAL_SPI_Receive+0x114>
 8003660:	e031      	b.n	80036c6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d113      	bne.n	8003698 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	b292      	uxth	r2, r2
 800367c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	1c9a      	adds	r2, r3, #2
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003696:	e011      	b.n	80036bc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003698:	f7fe ff66 	bl	8002568 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d803      	bhi.n	80036b0 <HAL_SPI_Receive+0x1cc>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d102      	bne.n	80036b6 <HAL_SPI_Receive+0x1d2>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036ba:	e017      	b.n	80036ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1cd      	bne.n	8003662 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	6839      	ldr	r1, [r7, #0]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fa46 	bl	8003b5c <SPI_EndRxTransaction>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	75fb      	strb	r3, [r7, #23]
 80036e8:	e000      	b.n	80036ec <HAL_SPI_Receive+0x208>
  }

error :
 80036ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b08c      	sub	sp, #48	; 0x30
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003714:	2301      	movs	r3, #1
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_SPI_TransmitReceive+0x26>
 8003728:	2302      	movs	r3, #2
 800372a:	e18a      	b.n	8003a42 <HAL_SPI_TransmitReceive+0x33c>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003734:	f7fe ff18 	bl	8002568 <HAL_GetTick>
 8003738:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800374a:	887b      	ldrh	r3, [r7, #2]
 800374c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800374e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003752:	2b01      	cmp	r3, #1
 8003754:	d00f      	beq.n	8003776 <HAL_SPI_TransmitReceive+0x70>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375c:	d107      	bne.n	800376e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <HAL_SPI_TransmitReceive+0x68>
 8003766:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800376a:	2b04      	cmp	r3, #4
 800376c:	d003      	beq.n	8003776 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800376e:	2302      	movs	r3, #2
 8003770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003774:	e15b      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_SPI_TransmitReceive+0x82>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_SPI_TransmitReceive+0x82>
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d103      	bne.n	8003790 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800378e:	e14e      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b04      	cmp	r3, #4
 800379a:	d003      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2205      	movs	r2, #5
 80037a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	887a      	ldrh	r2, [r7, #2]
 80037ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	887a      	ldrh	r2, [r7, #2]
 80037c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	887a      	ldrh	r2, [r7, #2]
 80037cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d007      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003800:	d178      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_SPI_TransmitReceive+0x10a>
 800380a:	8b7b      	ldrh	r3, [r7, #26]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d166      	bne.n	80038de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	881a      	ldrh	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	1c9a      	adds	r2, r3, #2
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003834:	e053      	b.n	80038de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b02      	cmp	r3, #2
 8003842:	d11b      	bne.n	800387c <HAL_SPI_TransmitReceive+0x176>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d016      	beq.n	800387c <HAL_SPI_TransmitReceive+0x176>
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d113      	bne.n	800387c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d119      	bne.n	80038be <HAL_SPI_TransmitReceive+0x1b8>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d014      	beq.n	80038be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	b292      	uxth	r2, r2
 80038a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	1c9a      	adds	r2, r3, #2
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038ba:	2301      	movs	r3, #1
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038be:	f7fe fe53 	bl	8002568 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d807      	bhi.n	80038de <HAL_SPI_TransmitReceive+0x1d8>
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d003      	beq.n	80038de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038dc:	e0a7      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1a6      	bne.n	8003836 <HAL_SPI_TransmitReceive+0x130>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1a1      	bne.n	8003836 <HAL_SPI_TransmitReceive+0x130>
 80038f2:	e07c      	b.n	80039ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x1fc>
 80038fc:	8b7b      	ldrh	r3, [r7, #26]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d16b      	bne.n	80039da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	7812      	ldrb	r2, [r2, #0]
 800390e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003928:	e057      	b.n	80039da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d11c      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x26c>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d017      	beq.n	8003972 <HAL_SPI_TransmitReceive+0x26c>
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d114      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	7812      	ldrb	r2, [r2, #0]
 8003954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d119      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x2ae>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d014      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b0:	2301      	movs	r3, #1
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039b4:	f7fe fdd8 	bl	8002568 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d803      	bhi.n	80039cc <HAL_SPI_TransmitReceive+0x2c6>
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d102      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x2cc>
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039d8:	e029      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1a2      	bne.n	800392a <HAL_SPI_TransmitReceive+0x224>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d19d      	bne.n	800392a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f904 	bl	8003c00 <SPI_EndRxTxTransaction>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d006      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a0a:	e010      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	e000      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3730      	adds	r7, #48	; 0x30
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a5c:	f7fe fd84 	bl	8002568 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	4413      	add	r3, r2
 8003a6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a6c:	f7fe fd7c 	bl	8002568 <HAL_GetTick>
 8003a70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a72:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	015b      	lsls	r3, r3, #5
 8003a78:	0d1b      	lsrs	r3, r3, #20
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a82:	e054      	b.n	8003b2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d050      	beq.n	8003b2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a8c:	f7fe fd6c 	bl	8002568 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d902      	bls.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d13d      	bne.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ab0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aba:	d111      	bne.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac4:	d004      	beq.n	8003ad0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ace:	d107      	bne.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ade:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae8:	d10f      	bne.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e017      	b.n	8003b4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4013      	ands	r3, r2
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	bf0c      	ite	eq
 8003b3e:	2301      	moveq	r3, #1
 8003b40:	2300      	movne	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d19b      	bne.n	8003a84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000008 	.word	0x20000008

08003b5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b70:	d111      	bne.n	8003b96 <SPI_EndRxTransaction+0x3a>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7a:	d004      	beq.n	8003b86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b84:	d107      	bne.n	8003b96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b94:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b9e:	d117      	bne.n	8003bd0 <SPI_EndRxTransaction+0x74>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba8:	d112      	bne.n	8003bd0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff ff49 	bl	8003a4c <SPI_WaitFlagStateUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01a      	beq.n	8003bf6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e013      	b.n	8003bf8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7ff ff36 	bl	8003a4c <SPI_WaitFlagStateUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e000      	b.n	8003bf8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2200      	movs	r2, #0
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f7ff ff18 	bl	8003a4c <SPI_WaitFlagStateUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	f043 0220 	orr.w	r2, r3, #32
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e000      	b.n	8003c34 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e041      	b.n	8003cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fe fb66 	bl	8002334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f000 fa9e 	bl	80041bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d001      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e03a      	b.n	8003d6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <HAL_TIM_Base_Start_IT+0x98>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x58>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1e:	d009      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x58>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x58>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <HAL_TIM_Base_Start_IT+0xa0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d111      	bne.n	8003d58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d010      	beq.n	8003d68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d56:	e007      	b.n	8003d68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800

08003d80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <HAL_TIM_Base_Stop_IT+0x48>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6a1a      	ldr	r2, [r3, #32]
 8003dae:	f240 4344 	movw	r3, #1092	; 0x444
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <HAL_TIM_Base_Stop_IT+0x48>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0202 	mvn.w	r2, #2
 8003e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f9b1 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9a4 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f9b3 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d122      	bne.n	8003e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11b      	bne.n	8003e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0204 	mvn.w	r2, #4
 8003e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f987 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003e78:	e005      	b.n	8003e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f97a 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f989 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d122      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0208 	mvn.w	r2, #8
 8003eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f95d 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f950 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f95f 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b10      	cmp	r3, #16
 8003eec:	d122      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d11b      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0210 	mvn.w	r2, #16
 8003f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f933 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f926 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f935 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d10e      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d107      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0201 	mvn.w	r2, #1
 8003f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd ff50 	bl	8001e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b80      	cmp	r3, #128	; 0x80
 8003f6c:	d10e      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f78:	2b80      	cmp	r3, #128	; 0x80
 8003f7a:	d107      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa77 	bl	800447a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d10e      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d107      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8f9 	bl	80041aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d107      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0220 	mvn.w	r2, #32
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fa42 	bl	8004468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_TIM_ConfigClockSource+0x18>
 8004000:	2302      	movs	r3, #2
 8004002:	e0b3      	b.n	800416c <HAL_TIM_ConfigClockSource+0x180>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004022:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800402a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403c:	d03e      	beq.n	80040bc <HAL_TIM_ConfigClockSource+0xd0>
 800403e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004042:	f200 8087 	bhi.w	8004154 <HAL_TIM_ConfigClockSource+0x168>
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	f000 8085 	beq.w	8004158 <HAL_TIM_ConfigClockSource+0x16c>
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d87f      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x168>
 8004054:	2b70      	cmp	r3, #112	; 0x70
 8004056:	d01a      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xa2>
 8004058:	2b70      	cmp	r3, #112	; 0x70
 800405a:	d87b      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x168>
 800405c:	2b60      	cmp	r3, #96	; 0x60
 800405e:	d050      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x116>
 8004060:	2b60      	cmp	r3, #96	; 0x60
 8004062:	d877      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x168>
 8004064:	2b50      	cmp	r3, #80	; 0x50
 8004066:	d03c      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0xf6>
 8004068:	2b50      	cmp	r3, #80	; 0x50
 800406a:	d873      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x168>
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d058      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x136>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d86f      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x168>
 8004074:	2b30      	cmp	r3, #48	; 0x30
 8004076:	d064      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x156>
 8004078:	2b30      	cmp	r3, #48	; 0x30
 800407a:	d86b      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x168>
 800407c:	2b20      	cmp	r3, #32
 800407e:	d060      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x156>
 8004080:	2b20      	cmp	r3, #32
 8004082:	d867      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x168>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d05c      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x156>
 8004088:	2b10      	cmp	r3, #16
 800408a:	d05a      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800408c:	e062      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6899      	ldr	r1, [r3, #8]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f000 f966 	bl	800436e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	609a      	str	r2, [r3, #8]
      break;
 80040ba:	e04e      	b.n	800415a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6899      	ldr	r1, [r3, #8]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f000 f94f 	bl	800436e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040de:	609a      	str	r2, [r3, #8]
      break;
 80040e0:	e03b      	b.n	800415a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f000 f8c6 	bl	8004280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2150      	movs	r1, #80	; 0x50
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f91d 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8004100:	e02b      	b.n	800415a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	461a      	mov	r2, r3
 8004110:	f000 f8e4 	bl	80042dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2160      	movs	r1, #96	; 0x60
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f90d 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8004120:	e01b      	b.n	800415a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6859      	ldr	r1, [r3, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	461a      	mov	r2, r3
 8004130:	f000 f8a6 	bl	8004280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2140      	movs	r1, #64	; 0x40
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f8fd 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8004140:	e00b      	b.n	800415a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f000 f8f4 	bl	800433a <TIM_ITRx_SetConfig>
        break;
 8004152:	e002      	b.n	800415a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004154:	bf00      	nop
 8004156:	e000      	b.n	800415a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004158:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a29      	ldr	r2, [pc, #164]	; (8004274 <TIM_Base_SetConfig+0xb8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00b      	beq.n	80041ec <TIM_Base_SetConfig+0x30>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d007      	beq.n	80041ec <TIM_Base_SetConfig+0x30>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a26      	ldr	r2, [pc, #152]	; (8004278 <TIM_Base_SetConfig+0xbc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0x30>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a25      	ldr	r2, [pc, #148]	; (800427c <TIM_Base_SetConfig+0xc0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d108      	bne.n	80041fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <TIM_Base_SetConfig+0xb8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00b      	beq.n	800421e <TIM_Base_SetConfig+0x62>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d007      	beq.n	800421e <TIM_Base_SetConfig+0x62>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <TIM_Base_SetConfig+0xbc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_Base_SetConfig+0x62>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a18      	ldr	r2, [pc, #96]	; (800427c <TIM_Base_SetConfig+0xc0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d108      	bne.n	8004230 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a07      	ldr	r2, [pc, #28]	; (8004274 <TIM_Base_SetConfig+0xb8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d103      	bne.n	8004264 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	615a      	str	r2, [r3, #20]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800

08004280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f023 0201 	bic.w	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 030a 	bic.w	r3, r3, #10
 80042bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f023 0210 	bic.w	r2, r3, #16
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004306:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	031b      	lsls	r3, r3, #12
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004318:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	f043 0307 	orr.w	r3, r3, #7
 800435c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	609a      	str	r2, [r3, #8]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800436e:	b480      	push	{r7}
 8004370:	b087      	sub	sp, #28
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004388:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	021a      	lsls	r2, r3, #8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	431a      	orrs	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4313      	orrs	r3, r2
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	609a      	str	r2, [r3, #8]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e046      	b.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d009      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a10      	ldr	r2, [pc, #64]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10c      	bne.n	8004440 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800442c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4313      	orrs	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800

08004468 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e03f      	b.n	800451e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd ff8e 	bl	80023d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	; 0x24
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f905 	bl	80046e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b08a      	sub	sp, #40	; 0x28
 800452a:	af02      	add	r7, sp, #8
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b20      	cmp	r3, #32
 8004544:	d17c      	bne.n	8004640 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_UART_Transmit+0x2c>
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e075      	b.n	8004642 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_UART_Transmit+0x3e>
 8004560:	2302      	movs	r3, #2
 8004562:	e06e      	b.n	8004642 <HAL_UART_Transmit+0x11c>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2221      	movs	r2, #33	; 0x21
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800457a:	f7fd fff5 	bl	8002568 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d108      	bne.n	80045a8 <HAL_UART_Transmit+0x82>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e003      	b.n	80045b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045b8:	e02a      	b.n	8004610 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2200      	movs	r2, #0
 80045c2:	2180      	movs	r1, #128	; 0x80
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f840 	bl	800464a <UART_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e036      	b.n	8004642 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	3302      	adds	r3, #2
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	e007      	b.n	8004602 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	3301      	adds	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1cf      	bne.n	80045ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2200      	movs	r2, #0
 8004622:	2140      	movs	r1, #64	; 0x40
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f810 	bl	800464a <UART_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e006      	b.n	8004642 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465a:	e02c      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d028      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <UART_WaitOnFlagUntilTimeout+0x30>
 800466a:	f7fd ff7d 	bl	8002568 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	429a      	cmp	r2, r3
 8004678:	d21d      	bcs.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004688:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e00f      	b.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4013      	ands	r3, r2
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	bf0c      	ite	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	2300      	movne	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d0c3      	beq.n	800465c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800471a:	f023 030c 	bic.w	r3, r3, #12
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	430b      	orrs	r3, r1
 8004726:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <UART_SetConfig+0x114>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d103      	bne.n	8004750 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004748:	f7fe fe16 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	e002      	b.n	8004756 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004750:	f7fe fdfe 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 8004754:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009a      	lsls	r2, r3, #2
 8004760:	441a      	add	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	4a22      	ldr	r2, [pc, #136]	; (80047f8 <UART_SetConfig+0x118>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	0119      	lsls	r1, r3, #4
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009a      	lsls	r2, r3, #2
 8004780:	441a      	add	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	fbb2 f2f3 	udiv	r2, r2, r3
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <UART_SetConfig+0x118>)
 800478e:	fba3 0302 	umull	r0, r3, r3, r2
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2064      	movs	r0, #100	; 0x64
 8004796:	fb00 f303 	mul.w	r3, r0, r3
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	3332      	adds	r3, #50	; 0x32
 80047a0:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <UART_SetConfig+0x118>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ac:	4419      	add	r1, r3
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	009a      	lsls	r2, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <UART_SetConfig+0x118>)
 80047c6:	fba3 0302 	umull	r0, r3, r3, r2
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2064      	movs	r0, #100	; 0x64
 80047ce:	fb00 f303 	mul.w	r3, r0, r3
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	3332      	adds	r3, #50	; 0x32
 80047d8:	4a07      	ldr	r2, [pc, #28]	; (80047f8 <UART_SetConfig+0x118>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	f003 020f 	and.w	r2, r3, #15
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	440a      	add	r2, r1
 80047ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047ec:	bf00      	nop
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40013800 	.word	0x40013800
 80047f8:	51eb851f 	.word	0x51eb851f

080047fc <__errno>:
 80047fc:	4b01      	ldr	r3, [pc, #4]	; (8004804 <__errno+0x8>)
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000014 	.word	0x20000014

08004808 <__libc_init_array>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	2600      	movs	r6, #0
 800480c:	4d0c      	ldr	r5, [pc, #48]	; (8004840 <__libc_init_array+0x38>)
 800480e:	4c0d      	ldr	r4, [pc, #52]	; (8004844 <__libc_init_array+0x3c>)
 8004810:	1b64      	subs	r4, r4, r5
 8004812:	10a4      	asrs	r4, r4, #2
 8004814:	42a6      	cmp	r6, r4
 8004816:	d109      	bne.n	800482c <__libc_init_array+0x24>
 8004818:	f001 fa08 	bl	8005c2c <_init>
 800481c:	2600      	movs	r6, #0
 800481e:	4d0a      	ldr	r5, [pc, #40]	; (8004848 <__libc_init_array+0x40>)
 8004820:	4c0a      	ldr	r4, [pc, #40]	; (800484c <__libc_init_array+0x44>)
 8004822:	1b64      	subs	r4, r4, r5
 8004824:	10a4      	asrs	r4, r4, #2
 8004826:	42a6      	cmp	r6, r4
 8004828:	d105      	bne.n	8004836 <__libc_init_array+0x2e>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004830:	4798      	blx	r3
 8004832:	3601      	adds	r6, #1
 8004834:	e7ee      	b.n	8004814 <__libc_init_array+0xc>
 8004836:	f855 3b04 	ldr.w	r3, [r5], #4
 800483a:	4798      	blx	r3
 800483c:	3601      	adds	r6, #1
 800483e:	e7f2      	b.n	8004826 <__libc_init_array+0x1e>
 8004840:	08005eac 	.word	0x08005eac
 8004844:	08005eac 	.word	0x08005eac
 8004848:	08005eac 	.word	0x08005eac
 800484c:	08005eb0 	.word	0x08005eb0

08004850 <memset>:
 8004850:	4603      	mov	r3, r0
 8004852:	4402      	add	r2, r0
 8004854:	4293      	cmp	r3, r2
 8004856:	d100      	bne.n	800485a <memset+0xa>
 8004858:	4770      	bx	lr
 800485a:	f803 1b01 	strb.w	r1, [r3], #1
 800485e:	e7f9      	b.n	8004854 <memset+0x4>

08004860 <iprintf>:
 8004860:	b40f      	push	{r0, r1, r2, r3}
 8004862:	4b0a      	ldr	r3, [pc, #40]	; (800488c <iprintf+0x2c>)
 8004864:	b513      	push	{r0, r1, r4, lr}
 8004866:	681c      	ldr	r4, [r3, #0]
 8004868:	b124      	cbz	r4, 8004874 <iprintf+0x14>
 800486a:	69a3      	ldr	r3, [r4, #24]
 800486c:	b913      	cbnz	r3, 8004874 <iprintf+0x14>
 800486e:	4620      	mov	r0, r4
 8004870:	f000 fa7a 	bl	8004d68 <__sinit>
 8004874:	ab05      	add	r3, sp, #20
 8004876:	4620      	mov	r0, r4
 8004878:	9a04      	ldr	r2, [sp, #16]
 800487a:	68a1      	ldr	r1, [r4, #8]
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	f000 fdd9 	bl	8005434 <_vfiprintf_r>
 8004882:	b002      	add	sp, #8
 8004884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004888:	b004      	add	sp, #16
 800488a:	4770      	bx	lr
 800488c:	20000014 	.word	0x20000014

08004890 <_puts_r>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	460e      	mov	r6, r1
 8004894:	4605      	mov	r5, r0
 8004896:	b118      	cbz	r0, 80048a0 <_puts_r+0x10>
 8004898:	6983      	ldr	r3, [r0, #24]
 800489a:	b90b      	cbnz	r3, 80048a0 <_puts_r+0x10>
 800489c:	f000 fa64 	bl	8004d68 <__sinit>
 80048a0:	69ab      	ldr	r3, [r5, #24]
 80048a2:	68ac      	ldr	r4, [r5, #8]
 80048a4:	b913      	cbnz	r3, 80048ac <_puts_r+0x1c>
 80048a6:	4628      	mov	r0, r5
 80048a8:	f000 fa5e 	bl	8004d68 <__sinit>
 80048ac:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <_puts_r+0xd0>)
 80048ae:	429c      	cmp	r4, r3
 80048b0:	d120      	bne.n	80048f4 <_puts_r+0x64>
 80048b2:	686c      	ldr	r4, [r5, #4]
 80048b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048b6:	07db      	lsls	r3, r3, #31
 80048b8:	d405      	bmi.n	80048c6 <_puts_r+0x36>
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	0598      	lsls	r0, r3, #22
 80048be:	d402      	bmi.n	80048c6 <_puts_r+0x36>
 80048c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048c2:	f000 faef 	bl	8004ea4 <__retarget_lock_acquire_recursive>
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	0719      	lsls	r1, r3, #28
 80048ca:	d51d      	bpl.n	8004908 <_puts_r+0x78>
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	b1db      	cbz	r3, 8004908 <_puts_r+0x78>
 80048d0:	3e01      	subs	r6, #1
 80048d2:	68a3      	ldr	r3, [r4, #8]
 80048d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048d8:	3b01      	subs	r3, #1
 80048da:	60a3      	str	r3, [r4, #8]
 80048dc:	bb39      	cbnz	r1, 800492e <_puts_r+0x9e>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da38      	bge.n	8004954 <_puts_r+0xc4>
 80048e2:	4622      	mov	r2, r4
 80048e4:	210a      	movs	r1, #10
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 f868 	bl	80049bc <__swbuf_r>
 80048ec:	3001      	adds	r0, #1
 80048ee:	d011      	beq.n	8004914 <_puts_r+0x84>
 80048f0:	250a      	movs	r5, #10
 80048f2:	e011      	b.n	8004918 <_puts_r+0x88>
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <_puts_r+0xd4>)
 80048f6:	429c      	cmp	r4, r3
 80048f8:	d101      	bne.n	80048fe <_puts_r+0x6e>
 80048fa:	68ac      	ldr	r4, [r5, #8]
 80048fc:	e7da      	b.n	80048b4 <_puts_r+0x24>
 80048fe:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <_puts_r+0xd8>)
 8004900:	429c      	cmp	r4, r3
 8004902:	bf08      	it	eq
 8004904:	68ec      	ldreq	r4, [r5, #12]
 8004906:	e7d5      	b.n	80048b4 <_puts_r+0x24>
 8004908:	4621      	mov	r1, r4
 800490a:	4628      	mov	r0, r5
 800490c:	f000 f8a8 	bl	8004a60 <__swsetup_r>
 8004910:	2800      	cmp	r0, #0
 8004912:	d0dd      	beq.n	80048d0 <_puts_r+0x40>
 8004914:	f04f 35ff 	mov.w	r5, #4294967295
 8004918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800491a:	07da      	lsls	r2, r3, #31
 800491c:	d405      	bmi.n	800492a <_puts_r+0x9a>
 800491e:	89a3      	ldrh	r3, [r4, #12]
 8004920:	059b      	lsls	r3, r3, #22
 8004922:	d402      	bmi.n	800492a <_puts_r+0x9a>
 8004924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004926:	f000 fabe 	bl	8004ea6 <__retarget_lock_release_recursive>
 800492a:	4628      	mov	r0, r5
 800492c:	bd70      	pop	{r4, r5, r6, pc}
 800492e:	2b00      	cmp	r3, #0
 8004930:	da04      	bge.n	800493c <_puts_r+0xac>
 8004932:	69a2      	ldr	r2, [r4, #24]
 8004934:	429a      	cmp	r2, r3
 8004936:	dc06      	bgt.n	8004946 <_puts_r+0xb6>
 8004938:	290a      	cmp	r1, #10
 800493a:	d004      	beq.n	8004946 <_puts_r+0xb6>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	6022      	str	r2, [r4, #0]
 8004942:	7019      	strb	r1, [r3, #0]
 8004944:	e7c5      	b.n	80048d2 <_puts_r+0x42>
 8004946:	4622      	mov	r2, r4
 8004948:	4628      	mov	r0, r5
 800494a:	f000 f837 	bl	80049bc <__swbuf_r>
 800494e:	3001      	adds	r0, #1
 8004950:	d1bf      	bne.n	80048d2 <_puts_r+0x42>
 8004952:	e7df      	b.n	8004914 <_puts_r+0x84>
 8004954:	250a      	movs	r5, #10
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	6022      	str	r2, [r4, #0]
 800495c:	701d      	strb	r5, [r3, #0]
 800495e:	e7db      	b.n	8004918 <_puts_r+0x88>
 8004960:	08005e38 	.word	0x08005e38
 8004964:	08005e58 	.word	0x08005e58
 8004968:	08005e18 	.word	0x08005e18

0800496c <puts>:
 800496c:	4b02      	ldr	r3, [pc, #8]	; (8004978 <puts+0xc>)
 800496e:	4601      	mov	r1, r0
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	f7ff bf8d 	b.w	8004890 <_puts_r>
 8004976:	bf00      	nop
 8004978:	20000014 	.word	0x20000014

0800497c <siprintf>:
 800497c:	b40e      	push	{r1, r2, r3}
 800497e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004982:	b500      	push	{lr}
 8004984:	b09c      	sub	sp, #112	; 0x70
 8004986:	ab1d      	add	r3, sp, #116	; 0x74
 8004988:	9002      	str	r0, [sp, #8]
 800498a:	9006      	str	r0, [sp, #24]
 800498c:	9107      	str	r1, [sp, #28]
 800498e:	9104      	str	r1, [sp, #16]
 8004990:	4808      	ldr	r0, [pc, #32]	; (80049b4 <siprintf+0x38>)
 8004992:	4909      	ldr	r1, [pc, #36]	; (80049b8 <siprintf+0x3c>)
 8004994:	f853 2b04 	ldr.w	r2, [r3], #4
 8004998:	9105      	str	r1, [sp, #20]
 800499a:	6800      	ldr	r0, [r0, #0]
 800499c:	a902      	add	r1, sp, #8
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	f000 fc20 	bl	80051e4 <_svfiprintf_r>
 80049a4:	2200      	movs	r2, #0
 80049a6:	9b02      	ldr	r3, [sp, #8]
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	b01c      	add	sp, #112	; 0x70
 80049ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80049b0:	b003      	add	sp, #12
 80049b2:	4770      	bx	lr
 80049b4:	20000014 	.word	0x20000014
 80049b8:	ffff0208 	.word	0xffff0208

080049bc <__swbuf_r>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	460e      	mov	r6, r1
 80049c0:	4614      	mov	r4, r2
 80049c2:	4605      	mov	r5, r0
 80049c4:	b118      	cbz	r0, 80049ce <__swbuf_r+0x12>
 80049c6:	6983      	ldr	r3, [r0, #24]
 80049c8:	b90b      	cbnz	r3, 80049ce <__swbuf_r+0x12>
 80049ca:	f000 f9cd 	bl	8004d68 <__sinit>
 80049ce:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <__swbuf_r+0x98>)
 80049d0:	429c      	cmp	r4, r3
 80049d2:	d12b      	bne.n	8004a2c <__swbuf_r+0x70>
 80049d4:	686c      	ldr	r4, [r5, #4]
 80049d6:	69a3      	ldr	r3, [r4, #24]
 80049d8:	60a3      	str	r3, [r4, #8]
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	071a      	lsls	r2, r3, #28
 80049de:	d52f      	bpl.n	8004a40 <__swbuf_r+0x84>
 80049e0:	6923      	ldr	r3, [r4, #16]
 80049e2:	b36b      	cbz	r3, 8004a40 <__swbuf_r+0x84>
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	6820      	ldr	r0, [r4, #0]
 80049e8:	b2f6      	uxtb	r6, r6
 80049ea:	1ac0      	subs	r0, r0, r3
 80049ec:	6963      	ldr	r3, [r4, #20]
 80049ee:	4637      	mov	r7, r6
 80049f0:	4283      	cmp	r3, r0
 80049f2:	dc04      	bgt.n	80049fe <__swbuf_r+0x42>
 80049f4:	4621      	mov	r1, r4
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 f922 	bl	8004c40 <_fflush_r>
 80049fc:	bb30      	cbnz	r0, 8004a4c <__swbuf_r+0x90>
 80049fe:	68a3      	ldr	r3, [r4, #8]
 8004a00:	3001      	adds	r0, #1
 8004a02:	3b01      	subs	r3, #1
 8004a04:	60a3      	str	r3, [r4, #8]
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	6022      	str	r2, [r4, #0]
 8004a0c:	701e      	strb	r6, [r3, #0]
 8004a0e:	6963      	ldr	r3, [r4, #20]
 8004a10:	4283      	cmp	r3, r0
 8004a12:	d004      	beq.n	8004a1e <__swbuf_r+0x62>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	07db      	lsls	r3, r3, #31
 8004a18:	d506      	bpl.n	8004a28 <__swbuf_r+0x6c>
 8004a1a:	2e0a      	cmp	r6, #10
 8004a1c:	d104      	bne.n	8004a28 <__swbuf_r+0x6c>
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 f90d 	bl	8004c40 <_fflush_r>
 8004a26:	b988      	cbnz	r0, 8004a4c <__swbuf_r+0x90>
 8004a28:	4638      	mov	r0, r7
 8004a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <__swbuf_r+0x9c>)
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	d101      	bne.n	8004a36 <__swbuf_r+0x7a>
 8004a32:	68ac      	ldr	r4, [r5, #8]
 8004a34:	e7cf      	b.n	80049d6 <__swbuf_r+0x1a>
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <__swbuf_r+0xa0>)
 8004a38:	429c      	cmp	r4, r3
 8004a3a:	bf08      	it	eq
 8004a3c:	68ec      	ldreq	r4, [r5, #12]
 8004a3e:	e7ca      	b.n	80049d6 <__swbuf_r+0x1a>
 8004a40:	4621      	mov	r1, r4
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f80c 	bl	8004a60 <__swsetup_r>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d0cb      	beq.n	80049e4 <__swbuf_r+0x28>
 8004a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8004a50:	e7ea      	b.n	8004a28 <__swbuf_r+0x6c>
 8004a52:	bf00      	nop
 8004a54:	08005e38 	.word	0x08005e38
 8004a58:	08005e58 	.word	0x08005e58
 8004a5c:	08005e18 	.word	0x08005e18

08004a60 <__swsetup_r>:
 8004a60:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <__swsetup_r+0xcc>)
 8004a62:	b570      	push	{r4, r5, r6, lr}
 8004a64:	681d      	ldr	r5, [r3, #0]
 8004a66:	4606      	mov	r6, r0
 8004a68:	460c      	mov	r4, r1
 8004a6a:	b125      	cbz	r5, 8004a76 <__swsetup_r+0x16>
 8004a6c:	69ab      	ldr	r3, [r5, #24]
 8004a6e:	b913      	cbnz	r3, 8004a76 <__swsetup_r+0x16>
 8004a70:	4628      	mov	r0, r5
 8004a72:	f000 f979 	bl	8004d68 <__sinit>
 8004a76:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <__swsetup_r+0xd0>)
 8004a78:	429c      	cmp	r4, r3
 8004a7a:	d10f      	bne.n	8004a9c <__swsetup_r+0x3c>
 8004a7c:	686c      	ldr	r4, [r5, #4]
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a84:	0719      	lsls	r1, r3, #28
 8004a86:	d42c      	bmi.n	8004ae2 <__swsetup_r+0x82>
 8004a88:	06dd      	lsls	r5, r3, #27
 8004a8a:	d411      	bmi.n	8004ab0 <__swsetup_r+0x50>
 8004a8c:	2309      	movs	r3, #9
 8004a8e:	6033      	str	r3, [r6, #0]
 8004a90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	81a3      	strh	r3, [r4, #12]
 8004a9a:	e03e      	b.n	8004b1a <__swsetup_r+0xba>
 8004a9c:	4b25      	ldr	r3, [pc, #148]	; (8004b34 <__swsetup_r+0xd4>)
 8004a9e:	429c      	cmp	r4, r3
 8004aa0:	d101      	bne.n	8004aa6 <__swsetup_r+0x46>
 8004aa2:	68ac      	ldr	r4, [r5, #8]
 8004aa4:	e7eb      	b.n	8004a7e <__swsetup_r+0x1e>
 8004aa6:	4b24      	ldr	r3, [pc, #144]	; (8004b38 <__swsetup_r+0xd8>)
 8004aa8:	429c      	cmp	r4, r3
 8004aaa:	bf08      	it	eq
 8004aac:	68ec      	ldreq	r4, [r5, #12]
 8004aae:	e7e6      	b.n	8004a7e <__swsetup_r+0x1e>
 8004ab0:	0758      	lsls	r0, r3, #29
 8004ab2:	d512      	bpl.n	8004ada <__swsetup_r+0x7a>
 8004ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ab6:	b141      	cbz	r1, 8004aca <__swsetup_r+0x6a>
 8004ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004abc:	4299      	cmp	r1, r3
 8004abe:	d002      	beq.n	8004ac6 <__swsetup_r+0x66>
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f000 fa57 	bl	8004f74 <_free_r>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6363      	str	r3, [r4, #52]	; 0x34
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6063      	str	r3, [r4, #4]
 8004ad6:	6923      	ldr	r3, [r4, #16]
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	f043 0308 	orr.w	r3, r3, #8
 8004ae0:	81a3      	strh	r3, [r4, #12]
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	b94b      	cbnz	r3, 8004afa <__swsetup_r+0x9a>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af0:	d003      	beq.n	8004afa <__swsetup_r+0x9a>
 8004af2:	4621      	mov	r1, r4
 8004af4:	4630      	mov	r0, r6
 8004af6:	f000 f9fd 	bl	8004ef4 <__smakebuf_r>
 8004afa:	89a0      	ldrh	r0, [r4, #12]
 8004afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b00:	f010 0301 	ands.w	r3, r0, #1
 8004b04:	d00a      	beq.n	8004b1c <__swsetup_r+0xbc>
 8004b06:	2300      	movs	r3, #0
 8004b08:	60a3      	str	r3, [r4, #8]
 8004b0a:	6963      	ldr	r3, [r4, #20]
 8004b0c:	425b      	negs	r3, r3
 8004b0e:	61a3      	str	r3, [r4, #24]
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	b943      	cbnz	r3, 8004b26 <__swsetup_r+0xc6>
 8004b14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b18:	d1ba      	bne.n	8004a90 <__swsetup_r+0x30>
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	0781      	lsls	r1, r0, #30
 8004b1e:	bf58      	it	pl
 8004b20:	6963      	ldrpl	r3, [r4, #20]
 8004b22:	60a3      	str	r3, [r4, #8]
 8004b24:	e7f4      	b.n	8004b10 <__swsetup_r+0xb0>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e7f7      	b.n	8004b1a <__swsetup_r+0xba>
 8004b2a:	bf00      	nop
 8004b2c:	20000014 	.word	0x20000014
 8004b30:	08005e38 	.word	0x08005e38
 8004b34:	08005e58 	.word	0x08005e58
 8004b38:	08005e18 	.word	0x08005e18

08004b3c <__sflush_r>:
 8004b3c:	898a      	ldrh	r2, [r1, #12]
 8004b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b40:	4605      	mov	r5, r0
 8004b42:	0710      	lsls	r0, r2, #28
 8004b44:	460c      	mov	r4, r1
 8004b46:	d457      	bmi.n	8004bf8 <__sflush_r+0xbc>
 8004b48:	684b      	ldr	r3, [r1, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	dc04      	bgt.n	8004b58 <__sflush_r+0x1c>
 8004b4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	dc01      	bgt.n	8004b58 <__sflush_r+0x1c>
 8004b54:	2000      	movs	r0, #0
 8004b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b5a:	2e00      	cmp	r6, #0
 8004b5c:	d0fa      	beq.n	8004b54 <__sflush_r+0x18>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b64:	682f      	ldr	r7, [r5, #0]
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	d032      	beq.n	8004bd0 <__sflush_r+0x94>
 8004b6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	075a      	lsls	r2, r3, #29
 8004b70:	d505      	bpl.n	8004b7e <__sflush_r+0x42>
 8004b72:	6863      	ldr	r3, [r4, #4]
 8004b74:	1ac0      	subs	r0, r0, r3
 8004b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b78:	b10b      	cbz	r3, 8004b7e <__sflush_r+0x42>
 8004b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b7c:	1ac0      	subs	r0, r0, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	4602      	mov	r2, r0
 8004b82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b84:	4628      	mov	r0, r5
 8004b86:	6a21      	ldr	r1, [r4, #32]
 8004b88:	47b0      	blx	r6
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	d106      	bne.n	8004b9e <__sflush_r+0x62>
 8004b90:	6829      	ldr	r1, [r5, #0]
 8004b92:	291d      	cmp	r1, #29
 8004b94:	d82c      	bhi.n	8004bf0 <__sflush_r+0xb4>
 8004b96:	4a29      	ldr	r2, [pc, #164]	; (8004c3c <__sflush_r+0x100>)
 8004b98:	40ca      	lsrs	r2, r1
 8004b9a:	07d6      	lsls	r6, r2, #31
 8004b9c:	d528      	bpl.n	8004bf0 <__sflush_r+0xb4>
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	6062      	str	r2, [r4, #4]
 8004ba2:	6922      	ldr	r2, [r4, #16]
 8004ba4:	04d9      	lsls	r1, r3, #19
 8004ba6:	6022      	str	r2, [r4, #0]
 8004ba8:	d504      	bpl.n	8004bb4 <__sflush_r+0x78>
 8004baa:	1c42      	adds	r2, r0, #1
 8004bac:	d101      	bne.n	8004bb2 <__sflush_r+0x76>
 8004bae:	682b      	ldr	r3, [r5, #0]
 8004bb0:	b903      	cbnz	r3, 8004bb4 <__sflush_r+0x78>
 8004bb2:	6560      	str	r0, [r4, #84]	; 0x54
 8004bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bb6:	602f      	str	r7, [r5, #0]
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d0cb      	beq.n	8004b54 <__sflush_r+0x18>
 8004bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	d002      	beq.n	8004bca <__sflush_r+0x8e>
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 f9d5 	bl	8004f74 <_free_r>
 8004bca:	2000      	movs	r0, #0
 8004bcc:	6360      	str	r0, [r4, #52]	; 0x34
 8004bce:	e7c2      	b.n	8004b56 <__sflush_r+0x1a>
 8004bd0:	6a21      	ldr	r1, [r4, #32]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b0      	blx	r6
 8004bd8:	1c41      	adds	r1, r0, #1
 8004bda:	d1c7      	bne.n	8004b6c <__sflush_r+0x30>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0c4      	beq.n	8004b6c <__sflush_r+0x30>
 8004be2:	2b1d      	cmp	r3, #29
 8004be4:	d001      	beq.n	8004bea <__sflush_r+0xae>
 8004be6:	2b16      	cmp	r3, #22
 8004be8:	d101      	bne.n	8004bee <__sflush_r+0xb2>
 8004bea:	602f      	str	r7, [r5, #0]
 8004bec:	e7b2      	b.n	8004b54 <__sflush_r+0x18>
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	e7ae      	b.n	8004b56 <__sflush_r+0x1a>
 8004bf8:	690f      	ldr	r7, [r1, #16]
 8004bfa:	2f00      	cmp	r7, #0
 8004bfc:	d0aa      	beq.n	8004b54 <__sflush_r+0x18>
 8004bfe:	0793      	lsls	r3, r2, #30
 8004c00:	bf18      	it	ne
 8004c02:	2300      	movne	r3, #0
 8004c04:	680e      	ldr	r6, [r1, #0]
 8004c06:	bf08      	it	eq
 8004c08:	694b      	ldreq	r3, [r1, #20]
 8004c0a:	1bf6      	subs	r6, r6, r7
 8004c0c:	600f      	str	r7, [r1, #0]
 8004c0e:	608b      	str	r3, [r1, #8]
 8004c10:	2e00      	cmp	r6, #0
 8004c12:	dd9f      	ble.n	8004b54 <__sflush_r+0x18>
 8004c14:	4633      	mov	r3, r6
 8004c16:	463a      	mov	r2, r7
 8004c18:	4628      	mov	r0, r5
 8004c1a:	6a21      	ldr	r1, [r4, #32]
 8004c1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004c20:	47e0      	blx	ip
 8004c22:	2800      	cmp	r0, #0
 8004c24:	dc06      	bgt.n	8004c34 <__sflush_r+0xf8>
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c30:	81a3      	strh	r3, [r4, #12]
 8004c32:	e790      	b.n	8004b56 <__sflush_r+0x1a>
 8004c34:	4407      	add	r7, r0
 8004c36:	1a36      	subs	r6, r6, r0
 8004c38:	e7ea      	b.n	8004c10 <__sflush_r+0xd4>
 8004c3a:	bf00      	nop
 8004c3c:	20400001 	.word	0x20400001

08004c40 <_fflush_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	690b      	ldr	r3, [r1, #16]
 8004c44:	4605      	mov	r5, r0
 8004c46:	460c      	mov	r4, r1
 8004c48:	b913      	cbnz	r3, 8004c50 <_fflush_r+0x10>
 8004c4a:	2500      	movs	r5, #0
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	b118      	cbz	r0, 8004c5a <_fflush_r+0x1a>
 8004c52:	6983      	ldr	r3, [r0, #24]
 8004c54:	b90b      	cbnz	r3, 8004c5a <_fflush_r+0x1a>
 8004c56:	f000 f887 	bl	8004d68 <__sinit>
 8004c5a:	4b14      	ldr	r3, [pc, #80]	; (8004cac <_fflush_r+0x6c>)
 8004c5c:	429c      	cmp	r4, r3
 8004c5e:	d11b      	bne.n	8004c98 <_fflush_r+0x58>
 8004c60:	686c      	ldr	r4, [r5, #4]
 8004c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0ef      	beq.n	8004c4a <_fflush_r+0xa>
 8004c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c6c:	07d0      	lsls	r0, r2, #31
 8004c6e:	d404      	bmi.n	8004c7a <_fflush_r+0x3a>
 8004c70:	0599      	lsls	r1, r3, #22
 8004c72:	d402      	bmi.n	8004c7a <_fflush_r+0x3a>
 8004c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c76:	f000 f915 	bl	8004ea4 <__retarget_lock_acquire_recursive>
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	f7ff ff5d 	bl	8004b3c <__sflush_r>
 8004c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c84:	4605      	mov	r5, r0
 8004c86:	07da      	lsls	r2, r3, #31
 8004c88:	d4e0      	bmi.n	8004c4c <_fflush_r+0xc>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	059b      	lsls	r3, r3, #22
 8004c8e:	d4dd      	bmi.n	8004c4c <_fflush_r+0xc>
 8004c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c92:	f000 f908 	bl	8004ea6 <__retarget_lock_release_recursive>
 8004c96:	e7d9      	b.n	8004c4c <_fflush_r+0xc>
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <_fflush_r+0x70>)
 8004c9a:	429c      	cmp	r4, r3
 8004c9c:	d101      	bne.n	8004ca2 <_fflush_r+0x62>
 8004c9e:	68ac      	ldr	r4, [r5, #8]
 8004ca0:	e7df      	b.n	8004c62 <_fflush_r+0x22>
 8004ca2:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <_fflush_r+0x74>)
 8004ca4:	429c      	cmp	r4, r3
 8004ca6:	bf08      	it	eq
 8004ca8:	68ec      	ldreq	r4, [r5, #12]
 8004caa:	e7da      	b.n	8004c62 <_fflush_r+0x22>
 8004cac:	08005e38 	.word	0x08005e38
 8004cb0:	08005e58 	.word	0x08005e58
 8004cb4:	08005e18 	.word	0x08005e18

08004cb8 <std>:
 8004cb8:	2300      	movs	r3, #0
 8004cba:	b510      	push	{r4, lr}
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8004cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cc6:	6083      	str	r3, [r0, #8]
 8004cc8:	8181      	strh	r1, [r0, #12]
 8004cca:	6643      	str	r3, [r0, #100]	; 0x64
 8004ccc:	81c2      	strh	r2, [r0, #14]
 8004cce:	6183      	str	r3, [r0, #24]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	305c      	adds	r0, #92	; 0x5c
 8004cd6:	f7ff fdbb 	bl	8004850 <memset>
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <std+0x38>)
 8004cdc:	6224      	str	r4, [r4, #32]
 8004cde:	6263      	str	r3, [r4, #36]	; 0x24
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <std+0x3c>)
 8004ce2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <std+0x40>)
 8004ce6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ce8:	4b04      	ldr	r3, [pc, #16]	; (8004cfc <std+0x44>)
 8004cea:	6323      	str	r3, [r4, #48]	; 0x30
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	bf00      	nop
 8004cf0:	080059e1 	.word	0x080059e1
 8004cf4:	08005a03 	.word	0x08005a03
 8004cf8:	08005a3b 	.word	0x08005a3b
 8004cfc:	08005a5f 	.word	0x08005a5f

08004d00 <_cleanup_r>:
 8004d00:	4901      	ldr	r1, [pc, #4]	; (8004d08 <_cleanup_r+0x8>)
 8004d02:	f000 b8af 	b.w	8004e64 <_fwalk_reent>
 8004d06:	bf00      	nop
 8004d08:	08004c41 	.word	0x08004c41

08004d0c <__sfmoreglue>:
 8004d0c:	2268      	movs	r2, #104	; 0x68
 8004d0e:	b570      	push	{r4, r5, r6, lr}
 8004d10:	1e4d      	subs	r5, r1, #1
 8004d12:	4355      	muls	r5, r2
 8004d14:	460e      	mov	r6, r1
 8004d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d1a:	f000 f993 	bl	8005044 <_malloc_r>
 8004d1e:	4604      	mov	r4, r0
 8004d20:	b140      	cbz	r0, 8004d34 <__sfmoreglue+0x28>
 8004d22:	2100      	movs	r1, #0
 8004d24:	e9c0 1600 	strd	r1, r6, [r0]
 8004d28:	300c      	adds	r0, #12
 8004d2a:	60a0      	str	r0, [r4, #8]
 8004d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d30:	f7ff fd8e 	bl	8004850 <memset>
 8004d34:	4620      	mov	r0, r4
 8004d36:	bd70      	pop	{r4, r5, r6, pc}

08004d38 <__sfp_lock_acquire>:
 8004d38:	4801      	ldr	r0, [pc, #4]	; (8004d40 <__sfp_lock_acquire+0x8>)
 8004d3a:	f000 b8b3 	b.w	8004ea4 <__retarget_lock_acquire_recursive>
 8004d3e:	bf00      	nop
 8004d40:	2000022d 	.word	0x2000022d

08004d44 <__sfp_lock_release>:
 8004d44:	4801      	ldr	r0, [pc, #4]	; (8004d4c <__sfp_lock_release+0x8>)
 8004d46:	f000 b8ae 	b.w	8004ea6 <__retarget_lock_release_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	2000022d 	.word	0x2000022d

08004d50 <__sinit_lock_acquire>:
 8004d50:	4801      	ldr	r0, [pc, #4]	; (8004d58 <__sinit_lock_acquire+0x8>)
 8004d52:	f000 b8a7 	b.w	8004ea4 <__retarget_lock_acquire_recursive>
 8004d56:	bf00      	nop
 8004d58:	2000022e 	.word	0x2000022e

08004d5c <__sinit_lock_release>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	; (8004d64 <__sinit_lock_release+0x8>)
 8004d5e:	f000 b8a2 	b.w	8004ea6 <__retarget_lock_release_recursive>
 8004d62:	bf00      	nop
 8004d64:	2000022e 	.word	0x2000022e

08004d68 <__sinit>:
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	f7ff fff0 	bl	8004d50 <__sinit_lock_acquire>
 8004d70:	69a3      	ldr	r3, [r4, #24]
 8004d72:	b11b      	cbz	r3, 8004d7c <__sinit+0x14>
 8004d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d78:	f7ff bff0 	b.w	8004d5c <__sinit_lock_release>
 8004d7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d80:	6523      	str	r3, [r4, #80]	; 0x50
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <__sinit+0x68>)
 8004d84:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <__sinit+0x6c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d8a:	42a3      	cmp	r3, r4
 8004d8c:	bf08      	it	eq
 8004d8e:	2301      	moveq	r3, #1
 8004d90:	4620      	mov	r0, r4
 8004d92:	bf08      	it	eq
 8004d94:	61a3      	streq	r3, [r4, #24]
 8004d96:	f000 f81f 	bl	8004dd8 <__sfp>
 8004d9a:	6060      	str	r0, [r4, #4]
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f000 f81b 	bl	8004dd8 <__sfp>
 8004da2:	60a0      	str	r0, [r4, #8]
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 f817 	bl	8004dd8 <__sfp>
 8004daa:	2200      	movs	r2, #0
 8004dac:	2104      	movs	r1, #4
 8004dae:	60e0      	str	r0, [r4, #12]
 8004db0:	6860      	ldr	r0, [r4, #4]
 8004db2:	f7ff ff81 	bl	8004cb8 <std>
 8004db6:	2201      	movs	r2, #1
 8004db8:	2109      	movs	r1, #9
 8004dba:	68a0      	ldr	r0, [r4, #8]
 8004dbc:	f7ff ff7c 	bl	8004cb8 <std>
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	2112      	movs	r1, #18
 8004dc4:	68e0      	ldr	r0, [r4, #12]
 8004dc6:	f7ff ff77 	bl	8004cb8 <std>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61a3      	str	r3, [r4, #24]
 8004dce:	e7d1      	b.n	8004d74 <__sinit+0xc>
 8004dd0:	08005e14 	.word	0x08005e14
 8004dd4:	08004d01 	.word	0x08004d01

08004dd8 <__sfp>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	4607      	mov	r7, r0
 8004ddc:	f7ff ffac 	bl	8004d38 <__sfp_lock_acquire>
 8004de0:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <__sfp+0x84>)
 8004de2:	681e      	ldr	r6, [r3, #0]
 8004de4:	69b3      	ldr	r3, [r6, #24]
 8004de6:	b913      	cbnz	r3, 8004dee <__sfp+0x16>
 8004de8:	4630      	mov	r0, r6
 8004dea:	f7ff ffbd 	bl	8004d68 <__sinit>
 8004dee:	3648      	adds	r6, #72	; 0x48
 8004df0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	d503      	bpl.n	8004e00 <__sfp+0x28>
 8004df8:	6833      	ldr	r3, [r6, #0]
 8004dfa:	b30b      	cbz	r3, 8004e40 <__sfp+0x68>
 8004dfc:	6836      	ldr	r6, [r6, #0]
 8004dfe:	e7f7      	b.n	8004df0 <__sfp+0x18>
 8004e00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e04:	b9d5      	cbnz	r5, 8004e3c <__sfp+0x64>
 8004e06:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <__sfp+0x88>)
 8004e08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e0c:	60e3      	str	r3, [r4, #12]
 8004e0e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e10:	f000 f847 	bl	8004ea2 <__retarget_lock_init_recursive>
 8004e14:	f7ff ff96 	bl	8004d44 <__sfp_lock_release>
 8004e18:	2208      	movs	r2, #8
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e24:	6025      	str	r5, [r4, #0]
 8004e26:	61a5      	str	r5, [r4, #24]
 8004e28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e2c:	f7ff fd10 	bl	8004850 <memset>
 8004e30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e38:	4620      	mov	r0, r4
 8004e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e3c:	3468      	adds	r4, #104	; 0x68
 8004e3e:	e7d9      	b.n	8004df4 <__sfp+0x1c>
 8004e40:	2104      	movs	r1, #4
 8004e42:	4638      	mov	r0, r7
 8004e44:	f7ff ff62 	bl	8004d0c <__sfmoreglue>
 8004e48:	4604      	mov	r4, r0
 8004e4a:	6030      	str	r0, [r6, #0]
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d1d5      	bne.n	8004dfc <__sfp+0x24>
 8004e50:	f7ff ff78 	bl	8004d44 <__sfp_lock_release>
 8004e54:	230c      	movs	r3, #12
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	e7ee      	b.n	8004e38 <__sfp+0x60>
 8004e5a:	bf00      	nop
 8004e5c:	08005e14 	.word	0x08005e14
 8004e60:	ffff0001 	.word	0xffff0001

08004e64 <_fwalk_reent>:
 8004e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e68:	4606      	mov	r6, r0
 8004e6a:	4688      	mov	r8, r1
 8004e6c:	2700      	movs	r7, #0
 8004e6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e76:	f1b9 0901 	subs.w	r9, r9, #1
 8004e7a:	d505      	bpl.n	8004e88 <_fwalk_reent+0x24>
 8004e7c:	6824      	ldr	r4, [r4, #0]
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	d1f7      	bne.n	8004e72 <_fwalk_reent+0xe>
 8004e82:	4638      	mov	r0, r7
 8004e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e88:	89ab      	ldrh	r3, [r5, #12]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d907      	bls.n	8004e9e <_fwalk_reent+0x3a>
 8004e8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e92:	3301      	adds	r3, #1
 8004e94:	d003      	beq.n	8004e9e <_fwalk_reent+0x3a>
 8004e96:	4629      	mov	r1, r5
 8004e98:	4630      	mov	r0, r6
 8004e9a:	47c0      	blx	r8
 8004e9c:	4307      	orrs	r7, r0
 8004e9e:	3568      	adds	r5, #104	; 0x68
 8004ea0:	e7e9      	b.n	8004e76 <_fwalk_reent+0x12>

08004ea2 <__retarget_lock_init_recursive>:
 8004ea2:	4770      	bx	lr

08004ea4 <__retarget_lock_acquire_recursive>:
 8004ea4:	4770      	bx	lr

08004ea6 <__retarget_lock_release_recursive>:
 8004ea6:	4770      	bx	lr

08004ea8 <__swhatbuf_r>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	460e      	mov	r6, r1
 8004eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	2900      	cmp	r1, #0
 8004eb4:	461d      	mov	r5, r3
 8004eb6:	b096      	sub	sp, #88	; 0x58
 8004eb8:	da08      	bge.n	8004ecc <__swhatbuf_r+0x24>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004ec0:	602a      	str	r2, [r5, #0]
 8004ec2:	061a      	lsls	r2, r3, #24
 8004ec4:	d410      	bmi.n	8004ee8 <__swhatbuf_r+0x40>
 8004ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eca:	e00e      	b.n	8004eea <__swhatbuf_r+0x42>
 8004ecc:	466a      	mov	r2, sp
 8004ece:	f000 fded 	bl	8005aac <_fstat_r>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	dbf1      	blt.n	8004eba <__swhatbuf_r+0x12>
 8004ed6:	9a01      	ldr	r2, [sp, #4]
 8004ed8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004edc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ee0:	425a      	negs	r2, r3
 8004ee2:	415a      	adcs	r2, r3
 8004ee4:	602a      	str	r2, [r5, #0]
 8004ee6:	e7ee      	b.n	8004ec6 <__swhatbuf_r+0x1e>
 8004ee8:	2340      	movs	r3, #64	; 0x40
 8004eea:	2000      	movs	r0, #0
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	b016      	add	sp, #88	; 0x58
 8004ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ef4 <__smakebuf_r>:
 8004ef4:	898b      	ldrh	r3, [r1, #12]
 8004ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ef8:	079d      	lsls	r5, r3, #30
 8004efa:	4606      	mov	r6, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	d507      	bpl.n	8004f10 <__smakebuf_r+0x1c>
 8004f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	2301      	movs	r3, #1
 8004f0a:	6163      	str	r3, [r4, #20]
 8004f0c:	b002      	add	sp, #8
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	466a      	mov	r2, sp
 8004f12:	ab01      	add	r3, sp, #4
 8004f14:	f7ff ffc8 	bl	8004ea8 <__swhatbuf_r>
 8004f18:	9900      	ldr	r1, [sp, #0]
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f000 f891 	bl	8005044 <_malloc_r>
 8004f22:	b948      	cbnz	r0, 8004f38 <__smakebuf_r+0x44>
 8004f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f28:	059a      	lsls	r2, r3, #22
 8004f2a:	d4ef      	bmi.n	8004f0c <__smakebuf_r+0x18>
 8004f2c:	f023 0303 	bic.w	r3, r3, #3
 8004f30:	f043 0302 	orr.w	r3, r3, #2
 8004f34:	81a3      	strh	r3, [r4, #12]
 8004f36:	e7e3      	b.n	8004f00 <__smakebuf_r+0xc>
 8004f38:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <__smakebuf_r+0x7c>)
 8004f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	6020      	str	r0, [r4, #0]
 8004f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	9b00      	ldr	r3, [sp, #0]
 8004f48:	6120      	str	r0, [r4, #16]
 8004f4a:	6163      	str	r3, [r4, #20]
 8004f4c:	9b01      	ldr	r3, [sp, #4]
 8004f4e:	b15b      	cbz	r3, 8004f68 <__smakebuf_r+0x74>
 8004f50:	4630      	mov	r0, r6
 8004f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f56:	f000 fdbb 	bl	8005ad0 <_isatty_r>
 8004f5a:	b128      	cbz	r0, 8004f68 <__smakebuf_r+0x74>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	89a0      	ldrh	r0, [r4, #12]
 8004f6a:	4305      	orrs	r5, r0
 8004f6c:	81a5      	strh	r5, [r4, #12]
 8004f6e:	e7cd      	b.n	8004f0c <__smakebuf_r+0x18>
 8004f70:	08004d01 	.word	0x08004d01

08004f74 <_free_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4605      	mov	r5, r0
 8004f78:	2900      	cmp	r1, #0
 8004f7a:	d040      	beq.n	8004ffe <_free_r+0x8a>
 8004f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f80:	1f0c      	subs	r4, r1, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	bfb8      	it	lt
 8004f86:	18e4      	addlt	r4, r4, r3
 8004f88:	f000 fdfa 	bl	8005b80 <__malloc_lock>
 8004f8c:	4a1c      	ldr	r2, [pc, #112]	; (8005000 <_free_r+0x8c>)
 8004f8e:	6813      	ldr	r3, [r2, #0]
 8004f90:	b933      	cbnz	r3, 8004fa0 <_free_r+0x2c>
 8004f92:	6063      	str	r3, [r4, #4]
 8004f94:	6014      	str	r4, [r2, #0]
 8004f96:	4628      	mov	r0, r5
 8004f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f9c:	f000 bdf6 	b.w	8005b8c <__malloc_unlock>
 8004fa0:	42a3      	cmp	r3, r4
 8004fa2:	d908      	bls.n	8004fb6 <_free_r+0x42>
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	1821      	adds	r1, r4, r0
 8004fa8:	428b      	cmp	r3, r1
 8004faa:	bf01      	itttt	eq
 8004fac:	6819      	ldreq	r1, [r3, #0]
 8004fae:	685b      	ldreq	r3, [r3, #4]
 8004fb0:	1809      	addeq	r1, r1, r0
 8004fb2:	6021      	streq	r1, [r4, #0]
 8004fb4:	e7ed      	b.n	8004f92 <_free_r+0x1e>
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	b10b      	cbz	r3, 8004fc0 <_free_r+0x4c>
 8004fbc:	42a3      	cmp	r3, r4
 8004fbe:	d9fa      	bls.n	8004fb6 <_free_r+0x42>
 8004fc0:	6811      	ldr	r1, [r2, #0]
 8004fc2:	1850      	adds	r0, r2, r1
 8004fc4:	42a0      	cmp	r0, r4
 8004fc6:	d10b      	bne.n	8004fe0 <_free_r+0x6c>
 8004fc8:	6820      	ldr	r0, [r4, #0]
 8004fca:	4401      	add	r1, r0
 8004fcc:	1850      	adds	r0, r2, r1
 8004fce:	4283      	cmp	r3, r0
 8004fd0:	6011      	str	r1, [r2, #0]
 8004fd2:	d1e0      	bne.n	8004f96 <_free_r+0x22>
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4401      	add	r1, r0
 8004fda:	6011      	str	r1, [r2, #0]
 8004fdc:	6053      	str	r3, [r2, #4]
 8004fde:	e7da      	b.n	8004f96 <_free_r+0x22>
 8004fe0:	d902      	bls.n	8004fe8 <_free_r+0x74>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	602b      	str	r3, [r5, #0]
 8004fe6:	e7d6      	b.n	8004f96 <_free_r+0x22>
 8004fe8:	6820      	ldr	r0, [r4, #0]
 8004fea:	1821      	adds	r1, r4, r0
 8004fec:	428b      	cmp	r3, r1
 8004fee:	bf01      	itttt	eq
 8004ff0:	6819      	ldreq	r1, [r3, #0]
 8004ff2:	685b      	ldreq	r3, [r3, #4]
 8004ff4:	1809      	addeq	r1, r1, r0
 8004ff6:	6021      	streq	r1, [r4, #0]
 8004ff8:	6063      	str	r3, [r4, #4]
 8004ffa:	6054      	str	r4, [r2, #4]
 8004ffc:	e7cb      	b.n	8004f96 <_free_r+0x22>
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	20000230 	.word	0x20000230

08005004 <sbrk_aligned>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	4e0e      	ldr	r6, [pc, #56]	; (8005040 <sbrk_aligned+0x3c>)
 8005008:	460c      	mov	r4, r1
 800500a:	6831      	ldr	r1, [r6, #0]
 800500c:	4605      	mov	r5, r0
 800500e:	b911      	cbnz	r1, 8005016 <sbrk_aligned+0x12>
 8005010:	f000 fcd6 	bl	80059c0 <_sbrk_r>
 8005014:	6030      	str	r0, [r6, #0]
 8005016:	4621      	mov	r1, r4
 8005018:	4628      	mov	r0, r5
 800501a:	f000 fcd1 	bl	80059c0 <_sbrk_r>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	d00a      	beq.n	8005038 <sbrk_aligned+0x34>
 8005022:	1cc4      	adds	r4, r0, #3
 8005024:	f024 0403 	bic.w	r4, r4, #3
 8005028:	42a0      	cmp	r0, r4
 800502a:	d007      	beq.n	800503c <sbrk_aligned+0x38>
 800502c:	1a21      	subs	r1, r4, r0
 800502e:	4628      	mov	r0, r5
 8005030:	f000 fcc6 	bl	80059c0 <_sbrk_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d101      	bne.n	800503c <sbrk_aligned+0x38>
 8005038:	f04f 34ff 	mov.w	r4, #4294967295
 800503c:	4620      	mov	r0, r4
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	20000234 	.word	0x20000234

08005044 <_malloc_r>:
 8005044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005048:	1ccd      	adds	r5, r1, #3
 800504a:	f025 0503 	bic.w	r5, r5, #3
 800504e:	3508      	adds	r5, #8
 8005050:	2d0c      	cmp	r5, #12
 8005052:	bf38      	it	cc
 8005054:	250c      	movcc	r5, #12
 8005056:	2d00      	cmp	r5, #0
 8005058:	4607      	mov	r7, r0
 800505a:	db01      	blt.n	8005060 <_malloc_r+0x1c>
 800505c:	42a9      	cmp	r1, r5
 800505e:	d905      	bls.n	800506c <_malloc_r+0x28>
 8005060:	230c      	movs	r3, #12
 8005062:	2600      	movs	r6, #0
 8005064:	603b      	str	r3, [r7, #0]
 8005066:	4630      	mov	r0, r6
 8005068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800506c:	4e2e      	ldr	r6, [pc, #184]	; (8005128 <_malloc_r+0xe4>)
 800506e:	f000 fd87 	bl	8005b80 <__malloc_lock>
 8005072:	6833      	ldr	r3, [r6, #0]
 8005074:	461c      	mov	r4, r3
 8005076:	bb34      	cbnz	r4, 80050c6 <_malloc_r+0x82>
 8005078:	4629      	mov	r1, r5
 800507a:	4638      	mov	r0, r7
 800507c:	f7ff ffc2 	bl	8005004 <sbrk_aligned>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	4604      	mov	r4, r0
 8005084:	d14d      	bne.n	8005122 <_malloc_r+0xde>
 8005086:	6834      	ldr	r4, [r6, #0]
 8005088:	4626      	mov	r6, r4
 800508a:	2e00      	cmp	r6, #0
 800508c:	d140      	bne.n	8005110 <_malloc_r+0xcc>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	4631      	mov	r1, r6
 8005092:	4638      	mov	r0, r7
 8005094:	eb04 0803 	add.w	r8, r4, r3
 8005098:	f000 fc92 	bl	80059c0 <_sbrk_r>
 800509c:	4580      	cmp	r8, r0
 800509e:	d13a      	bne.n	8005116 <_malloc_r+0xd2>
 80050a0:	6821      	ldr	r1, [r4, #0]
 80050a2:	3503      	adds	r5, #3
 80050a4:	1a6d      	subs	r5, r5, r1
 80050a6:	f025 0503 	bic.w	r5, r5, #3
 80050aa:	3508      	adds	r5, #8
 80050ac:	2d0c      	cmp	r5, #12
 80050ae:	bf38      	it	cc
 80050b0:	250c      	movcc	r5, #12
 80050b2:	4638      	mov	r0, r7
 80050b4:	4629      	mov	r1, r5
 80050b6:	f7ff ffa5 	bl	8005004 <sbrk_aligned>
 80050ba:	3001      	adds	r0, #1
 80050bc:	d02b      	beq.n	8005116 <_malloc_r+0xd2>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	442b      	add	r3, r5
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	e00e      	b.n	80050e4 <_malloc_r+0xa0>
 80050c6:	6822      	ldr	r2, [r4, #0]
 80050c8:	1b52      	subs	r2, r2, r5
 80050ca:	d41e      	bmi.n	800510a <_malloc_r+0xc6>
 80050cc:	2a0b      	cmp	r2, #11
 80050ce:	d916      	bls.n	80050fe <_malloc_r+0xba>
 80050d0:	1961      	adds	r1, r4, r5
 80050d2:	42a3      	cmp	r3, r4
 80050d4:	6025      	str	r5, [r4, #0]
 80050d6:	bf18      	it	ne
 80050d8:	6059      	strne	r1, [r3, #4]
 80050da:	6863      	ldr	r3, [r4, #4]
 80050dc:	bf08      	it	eq
 80050de:	6031      	streq	r1, [r6, #0]
 80050e0:	5162      	str	r2, [r4, r5]
 80050e2:	604b      	str	r3, [r1, #4]
 80050e4:	4638      	mov	r0, r7
 80050e6:	f104 060b 	add.w	r6, r4, #11
 80050ea:	f000 fd4f 	bl	8005b8c <__malloc_unlock>
 80050ee:	f026 0607 	bic.w	r6, r6, #7
 80050f2:	1d23      	adds	r3, r4, #4
 80050f4:	1af2      	subs	r2, r6, r3
 80050f6:	d0b6      	beq.n	8005066 <_malloc_r+0x22>
 80050f8:	1b9b      	subs	r3, r3, r6
 80050fa:	50a3      	str	r3, [r4, r2]
 80050fc:	e7b3      	b.n	8005066 <_malloc_r+0x22>
 80050fe:	6862      	ldr	r2, [r4, #4]
 8005100:	42a3      	cmp	r3, r4
 8005102:	bf0c      	ite	eq
 8005104:	6032      	streq	r2, [r6, #0]
 8005106:	605a      	strne	r2, [r3, #4]
 8005108:	e7ec      	b.n	80050e4 <_malloc_r+0xa0>
 800510a:	4623      	mov	r3, r4
 800510c:	6864      	ldr	r4, [r4, #4]
 800510e:	e7b2      	b.n	8005076 <_malloc_r+0x32>
 8005110:	4634      	mov	r4, r6
 8005112:	6876      	ldr	r6, [r6, #4]
 8005114:	e7b9      	b.n	800508a <_malloc_r+0x46>
 8005116:	230c      	movs	r3, #12
 8005118:	4638      	mov	r0, r7
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	f000 fd36 	bl	8005b8c <__malloc_unlock>
 8005120:	e7a1      	b.n	8005066 <_malloc_r+0x22>
 8005122:	6025      	str	r5, [r4, #0]
 8005124:	e7de      	b.n	80050e4 <_malloc_r+0xa0>
 8005126:	bf00      	nop
 8005128:	20000230 	.word	0x20000230

0800512c <__ssputs_r>:
 800512c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	688e      	ldr	r6, [r1, #8]
 8005132:	4682      	mov	sl, r0
 8005134:	429e      	cmp	r6, r3
 8005136:	460c      	mov	r4, r1
 8005138:	4690      	mov	r8, r2
 800513a:	461f      	mov	r7, r3
 800513c:	d838      	bhi.n	80051b0 <__ssputs_r+0x84>
 800513e:	898a      	ldrh	r2, [r1, #12]
 8005140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005144:	d032      	beq.n	80051ac <__ssputs_r+0x80>
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	6909      	ldr	r1, [r1, #16]
 800514a:	3301      	adds	r3, #1
 800514c:	eba5 0901 	sub.w	r9, r5, r1
 8005150:	6965      	ldr	r5, [r4, #20]
 8005152:	444b      	add	r3, r9
 8005154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800515c:	106d      	asrs	r5, r5, #1
 800515e:	429d      	cmp	r5, r3
 8005160:	bf38      	it	cc
 8005162:	461d      	movcc	r5, r3
 8005164:	0553      	lsls	r3, r2, #21
 8005166:	d531      	bpl.n	80051cc <__ssputs_r+0xa0>
 8005168:	4629      	mov	r1, r5
 800516a:	f7ff ff6b 	bl	8005044 <_malloc_r>
 800516e:	4606      	mov	r6, r0
 8005170:	b950      	cbnz	r0, 8005188 <__ssputs_r+0x5c>
 8005172:	230c      	movs	r3, #12
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	f8ca 3000 	str.w	r3, [sl]
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005182:	81a3      	strh	r3, [r4, #12]
 8005184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005188:	464a      	mov	r2, r9
 800518a:	6921      	ldr	r1, [r4, #16]
 800518c:	f000 fcd0 	bl	8005b30 <memcpy>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	6126      	str	r6, [r4, #16]
 800519e:	444e      	add	r6, r9
 80051a0:	6026      	str	r6, [r4, #0]
 80051a2:	463e      	mov	r6, r7
 80051a4:	6165      	str	r5, [r4, #20]
 80051a6:	eba5 0509 	sub.w	r5, r5, r9
 80051aa:	60a5      	str	r5, [r4, #8]
 80051ac:	42be      	cmp	r6, r7
 80051ae:	d900      	bls.n	80051b2 <__ssputs_r+0x86>
 80051b0:	463e      	mov	r6, r7
 80051b2:	4632      	mov	r2, r6
 80051b4:	4641      	mov	r1, r8
 80051b6:	6820      	ldr	r0, [r4, #0]
 80051b8:	f000 fcc8 	bl	8005b4c <memmove>
 80051bc:	68a3      	ldr	r3, [r4, #8]
 80051be:	2000      	movs	r0, #0
 80051c0:	1b9b      	subs	r3, r3, r6
 80051c2:	60a3      	str	r3, [r4, #8]
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	4433      	add	r3, r6
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	e7db      	b.n	8005184 <__ssputs_r+0x58>
 80051cc:	462a      	mov	r2, r5
 80051ce:	f000 fce3 	bl	8005b98 <_realloc_r>
 80051d2:	4606      	mov	r6, r0
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d1e1      	bne.n	800519c <__ssputs_r+0x70>
 80051d8:	4650      	mov	r0, sl
 80051da:	6921      	ldr	r1, [r4, #16]
 80051dc:	f7ff feca 	bl	8004f74 <_free_r>
 80051e0:	e7c7      	b.n	8005172 <__ssputs_r+0x46>
	...

080051e4 <_svfiprintf_r>:
 80051e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e8:	4698      	mov	r8, r3
 80051ea:	898b      	ldrh	r3, [r1, #12]
 80051ec:	4607      	mov	r7, r0
 80051ee:	061b      	lsls	r3, r3, #24
 80051f0:	460d      	mov	r5, r1
 80051f2:	4614      	mov	r4, r2
 80051f4:	b09d      	sub	sp, #116	; 0x74
 80051f6:	d50e      	bpl.n	8005216 <_svfiprintf_r+0x32>
 80051f8:	690b      	ldr	r3, [r1, #16]
 80051fa:	b963      	cbnz	r3, 8005216 <_svfiprintf_r+0x32>
 80051fc:	2140      	movs	r1, #64	; 0x40
 80051fe:	f7ff ff21 	bl	8005044 <_malloc_r>
 8005202:	6028      	str	r0, [r5, #0]
 8005204:	6128      	str	r0, [r5, #16]
 8005206:	b920      	cbnz	r0, 8005212 <_svfiprintf_r+0x2e>
 8005208:	230c      	movs	r3, #12
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	e0d1      	b.n	80053b6 <_svfiprintf_r+0x1d2>
 8005212:	2340      	movs	r3, #64	; 0x40
 8005214:	616b      	str	r3, [r5, #20]
 8005216:	2300      	movs	r3, #0
 8005218:	9309      	str	r3, [sp, #36]	; 0x24
 800521a:	2320      	movs	r3, #32
 800521c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005220:	2330      	movs	r3, #48	; 0x30
 8005222:	f04f 0901 	mov.w	r9, #1
 8005226:	f8cd 800c 	str.w	r8, [sp, #12]
 800522a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053d0 <_svfiprintf_r+0x1ec>
 800522e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005232:	4623      	mov	r3, r4
 8005234:	469a      	mov	sl, r3
 8005236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800523a:	b10a      	cbz	r2, 8005240 <_svfiprintf_r+0x5c>
 800523c:	2a25      	cmp	r2, #37	; 0x25
 800523e:	d1f9      	bne.n	8005234 <_svfiprintf_r+0x50>
 8005240:	ebba 0b04 	subs.w	fp, sl, r4
 8005244:	d00b      	beq.n	800525e <_svfiprintf_r+0x7a>
 8005246:	465b      	mov	r3, fp
 8005248:	4622      	mov	r2, r4
 800524a:	4629      	mov	r1, r5
 800524c:	4638      	mov	r0, r7
 800524e:	f7ff ff6d 	bl	800512c <__ssputs_r>
 8005252:	3001      	adds	r0, #1
 8005254:	f000 80aa 	beq.w	80053ac <_svfiprintf_r+0x1c8>
 8005258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800525a:	445a      	add	r2, fp
 800525c:	9209      	str	r2, [sp, #36]	; 0x24
 800525e:	f89a 3000 	ldrb.w	r3, [sl]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80a2 	beq.w	80053ac <_svfiprintf_r+0x1c8>
 8005268:	2300      	movs	r3, #0
 800526a:	f04f 32ff 	mov.w	r2, #4294967295
 800526e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005272:	f10a 0a01 	add.w	sl, sl, #1
 8005276:	9304      	str	r3, [sp, #16]
 8005278:	9307      	str	r3, [sp, #28]
 800527a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800527e:	931a      	str	r3, [sp, #104]	; 0x68
 8005280:	4654      	mov	r4, sl
 8005282:	2205      	movs	r2, #5
 8005284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005288:	4851      	ldr	r0, [pc, #324]	; (80053d0 <_svfiprintf_r+0x1ec>)
 800528a:	f000 fc43 	bl	8005b14 <memchr>
 800528e:	9a04      	ldr	r2, [sp, #16]
 8005290:	b9d8      	cbnz	r0, 80052ca <_svfiprintf_r+0xe6>
 8005292:	06d0      	lsls	r0, r2, #27
 8005294:	bf44      	itt	mi
 8005296:	2320      	movmi	r3, #32
 8005298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800529c:	0711      	lsls	r1, r2, #28
 800529e:	bf44      	itt	mi
 80052a0:	232b      	movmi	r3, #43	; 0x2b
 80052a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a6:	f89a 3000 	ldrb.w	r3, [sl]
 80052aa:	2b2a      	cmp	r3, #42	; 0x2a
 80052ac:	d015      	beq.n	80052da <_svfiprintf_r+0xf6>
 80052ae:	4654      	mov	r4, sl
 80052b0:	2000      	movs	r0, #0
 80052b2:	f04f 0c0a 	mov.w	ip, #10
 80052b6:	9a07      	ldr	r2, [sp, #28]
 80052b8:	4621      	mov	r1, r4
 80052ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052be:	3b30      	subs	r3, #48	; 0x30
 80052c0:	2b09      	cmp	r3, #9
 80052c2:	d94e      	bls.n	8005362 <_svfiprintf_r+0x17e>
 80052c4:	b1b0      	cbz	r0, 80052f4 <_svfiprintf_r+0x110>
 80052c6:	9207      	str	r2, [sp, #28]
 80052c8:	e014      	b.n	80052f4 <_svfiprintf_r+0x110>
 80052ca:	eba0 0308 	sub.w	r3, r0, r8
 80052ce:	fa09 f303 	lsl.w	r3, r9, r3
 80052d2:	4313      	orrs	r3, r2
 80052d4:	46a2      	mov	sl, r4
 80052d6:	9304      	str	r3, [sp, #16]
 80052d8:	e7d2      	b.n	8005280 <_svfiprintf_r+0x9c>
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	1d19      	adds	r1, r3, #4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	9103      	str	r1, [sp, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	bfbb      	ittet	lt
 80052e6:	425b      	neglt	r3, r3
 80052e8:	f042 0202 	orrlt.w	r2, r2, #2
 80052ec:	9307      	strge	r3, [sp, #28]
 80052ee:	9307      	strlt	r3, [sp, #28]
 80052f0:	bfb8      	it	lt
 80052f2:	9204      	strlt	r2, [sp, #16]
 80052f4:	7823      	ldrb	r3, [r4, #0]
 80052f6:	2b2e      	cmp	r3, #46	; 0x2e
 80052f8:	d10c      	bne.n	8005314 <_svfiprintf_r+0x130>
 80052fa:	7863      	ldrb	r3, [r4, #1]
 80052fc:	2b2a      	cmp	r3, #42	; 0x2a
 80052fe:	d135      	bne.n	800536c <_svfiprintf_r+0x188>
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	3402      	adds	r4, #2
 8005304:	1d1a      	adds	r2, r3, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	9203      	str	r2, [sp, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	bfb8      	it	lt
 800530e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005312:	9305      	str	r3, [sp, #20]
 8005314:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80053d4 <_svfiprintf_r+0x1f0>
 8005318:	2203      	movs	r2, #3
 800531a:	4650      	mov	r0, sl
 800531c:	7821      	ldrb	r1, [r4, #0]
 800531e:	f000 fbf9 	bl	8005b14 <memchr>
 8005322:	b140      	cbz	r0, 8005336 <_svfiprintf_r+0x152>
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	eba0 000a 	sub.w	r0, r0, sl
 800532a:	fa03 f000 	lsl.w	r0, r3, r0
 800532e:	9b04      	ldr	r3, [sp, #16]
 8005330:	3401      	adds	r4, #1
 8005332:	4303      	orrs	r3, r0
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800533a:	2206      	movs	r2, #6
 800533c:	4826      	ldr	r0, [pc, #152]	; (80053d8 <_svfiprintf_r+0x1f4>)
 800533e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005342:	f000 fbe7 	bl	8005b14 <memchr>
 8005346:	2800      	cmp	r0, #0
 8005348:	d038      	beq.n	80053bc <_svfiprintf_r+0x1d8>
 800534a:	4b24      	ldr	r3, [pc, #144]	; (80053dc <_svfiprintf_r+0x1f8>)
 800534c:	bb1b      	cbnz	r3, 8005396 <_svfiprintf_r+0x1b2>
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	3307      	adds	r3, #7
 8005352:	f023 0307 	bic.w	r3, r3, #7
 8005356:	3308      	adds	r3, #8
 8005358:	9303      	str	r3, [sp, #12]
 800535a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800535c:	4433      	add	r3, r6
 800535e:	9309      	str	r3, [sp, #36]	; 0x24
 8005360:	e767      	b.n	8005232 <_svfiprintf_r+0x4e>
 8005362:	460c      	mov	r4, r1
 8005364:	2001      	movs	r0, #1
 8005366:	fb0c 3202 	mla	r2, ip, r2, r3
 800536a:	e7a5      	b.n	80052b8 <_svfiprintf_r+0xd4>
 800536c:	2300      	movs	r3, #0
 800536e:	f04f 0c0a 	mov.w	ip, #10
 8005372:	4619      	mov	r1, r3
 8005374:	3401      	adds	r4, #1
 8005376:	9305      	str	r3, [sp, #20]
 8005378:	4620      	mov	r0, r4
 800537a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800537e:	3a30      	subs	r2, #48	; 0x30
 8005380:	2a09      	cmp	r2, #9
 8005382:	d903      	bls.n	800538c <_svfiprintf_r+0x1a8>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0c5      	beq.n	8005314 <_svfiprintf_r+0x130>
 8005388:	9105      	str	r1, [sp, #20]
 800538a:	e7c3      	b.n	8005314 <_svfiprintf_r+0x130>
 800538c:	4604      	mov	r4, r0
 800538e:	2301      	movs	r3, #1
 8005390:	fb0c 2101 	mla	r1, ip, r1, r2
 8005394:	e7f0      	b.n	8005378 <_svfiprintf_r+0x194>
 8005396:	ab03      	add	r3, sp, #12
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	462a      	mov	r2, r5
 800539c:	4638      	mov	r0, r7
 800539e:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <_svfiprintf_r+0x1fc>)
 80053a0:	a904      	add	r1, sp, #16
 80053a2:	f3af 8000 	nop.w
 80053a6:	1c42      	adds	r2, r0, #1
 80053a8:	4606      	mov	r6, r0
 80053aa:	d1d6      	bne.n	800535a <_svfiprintf_r+0x176>
 80053ac:	89ab      	ldrh	r3, [r5, #12]
 80053ae:	065b      	lsls	r3, r3, #25
 80053b0:	f53f af2c 	bmi.w	800520c <_svfiprintf_r+0x28>
 80053b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053b6:	b01d      	add	sp, #116	; 0x74
 80053b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053bc:	ab03      	add	r3, sp, #12
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	462a      	mov	r2, r5
 80053c2:	4638      	mov	r0, r7
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <_svfiprintf_r+0x1fc>)
 80053c6:	a904      	add	r1, sp, #16
 80053c8:	f000 f9d4 	bl	8005774 <_printf_i>
 80053cc:	e7eb      	b.n	80053a6 <_svfiprintf_r+0x1c2>
 80053ce:	bf00      	nop
 80053d0:	08005e78 	.word	0x08005e78
 80053d4:	08005e7e 	.word	0x08005e7e
 80053d8:	08005e82 	.word	0x08005e82
 80053dc:	00000000 	.word	0x00000000
 80053e0:	0800512d 	.word	0x0800512d

080053e4 <__sfputc_r>:
 80053e4:	6893      	ldr	r3, [r2, #8]
 80053e6:	b410      	push	{r4}
 80053e8:	3b01      	subs	r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	6093      	str	r3, [r2, #8]
 80053ee:	da07      	bge.n	8005400 <__sfputc_r+0x1c>
 80053f0:	6994      	ldr	r4, [r2, #24]
 80053f2:	42a3      	cmp	r3, r4
 80053f4:	db01      	blt.n	80053fa <__sfputc_r+0x16>
 80053f6:	290a      	cmp	r1, #10
 80053f8:	d102      	bne.n	8005400 <__sfputc_r+0x1c>
 80053fa:	bc10      	pop	{r4}
 80053fc:	f7ff bade 	b.w	80049bc <__swbuf_r>
 8005400:	6813      	ldr	r3, [r2, #0]
 8005402:	1c58      	adds	r0, r3, #1
 8005404:	6010      	str	r0, [r2, #0]
 8005406:	7019      	strb	r1, [r3, #0]
 8005408:	4608      	mov	r0, r1
 800540a:	bc10      	pop	{r4}
 800540c:	4770      	bx	lr

0800540e <__sfputs_r>:
 800540e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005410:	4606      	mov	r6, r0
 8005412:	460f      	mov	r7, r1
 8005414:	4614      	mov	r4, r2
 8005416:	18d5      	adds	r5, r2, r3
 8005418:	42ac      	cmp	r4, r5
 800541a:	d101      	bne.n	8005420 <__sfputs_r+0x12>
 800541c:	2000      	movs	r0, #0
 800541e:	e007      	b.n	8005430 <__sfputs_r+0x22>
 8005420:	463a      	mov	r2, r7
 8005422:	4630      	mov	r0, r6
 8005424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005428:	f7ff ffdc 	bl	80053e4 <__sfputc_r>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d1f3      	bne.n	8005418 <__sfputs_r+0xa>
 8005430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005434 <_vfiprintf_r>:
 8005434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005438:	460d      	mov	r5, r1
 800543a:	4614      	mov	r4, r2
 800543c:	4698      	mov	r8, r3
 800543e:	4606      	mov	r6, r0
 8005440:	b09d      	sub	sp, #116	; 0x74
 8005442:	b118      	cbz	r0, 800544c <_vfiprintf_r+0x18>
 8005444:	6983      	ldr	r3, [r0, #24]
 8005446:	b90b      	cbnz	r3, 800544c <_vfiprintf_r+0x18>
 8005448:	f7ff fc8e 	bl	8004d68 <__sinit>
 800544c:	4b89      	ldr	r3, [pc, #548]	; (8005674 <_vfiprintf_r+0x240>)
 800544e:	429d      	cmp	r5, r3
 8005450:	d11b      	bne.n	800548a <_vfiprintf_r+0x56>
 8005452:	6875      	ldr	r5, [r6, #4]
 8005454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005456:	07d9      	lsls	r1, r3, #31
 8005458:	d405      	bmi.n	8005466 <_vfiprintf_r+0x32>
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	059a      	lsls	r2, r3, #22
 800545e:	d402      	bmi.n	8005466 <_vfiprintf_r+0x32>
 8005460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005462:	f7ff fd1f 	bl	8004ea4 <__retarget_lock_acquire_recursive>
 8005466:	89ab      	ldrh	r3, [r5, #12]
 8005468:	071b      	lsls	r3, r3, #28
 800546a:	d501      	bpl.n	8005470 <_vfiprintf_r+0x3c>
 800546c:	692b      	ldr	r3, [r5, #16]
 800546e:	b9eb      	cbnz	r3, 80054ac <_vfiprintf_r+0x78>
 8005470:	4629      	mov	r1, r5
 8005472:	4630      	mov	r0, r6
 8005474:	f7ff faf4 	bl	8004a60 <__swsetup_r>
 8005478:	b1c0      	cbz	r0, 80054ac <_vfiprintf_r+0x78>
 800547a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800547c:	07dc      	lsls	r4, r3, #31
 800547e:	d50e      	bpl.n	800549e <_vfiprintf_r+0x6a>
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	b01d      	add	sp, #116	; 0x74
 8005486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548a:	4b7b      	ldr	r3, [pc, #492]	; (8005678 <_vfiprintf_r+0x244>)
 800548c:	429d      	cmp	r5, r3
 800548e:	d101      	bne.n	8005494 <_vfiprintf_r+0x60>
 8005490:	68b5      	ldr	r5, [r6, #8]
 8005492:	e7df      	b.n	8005454 <_vfiprintf_r+0x20>
 8005494:	4b79      	ldr	r3, [pc, #484]	; (800567c <_vfiprintf_r+0x248>)
 8005496:	429d      	cmp	r5, r3
 8005498:	bf08      	it	eq
 800549a:	68f5      	ldreq	r5, [r6, #12]
 800549c:	e7da      	b.n	8005454 <_vfiprintf_r+0x20>
 800549e:	89ab      	ldrh	r3, [r5, #12]
 80054a0:	0598      	lsls	r0, r3, #22
 80054a2:	d4ed      	bmi.n	8005480 <_vfiprintf_r+0x4c>
 80054a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054a6:	f7ff fcfe 	bl	8004ea6 <__retarget_lock_release_recursive>
 80054aa:	e7e9      	b.n	8005480 <_vfiprintf_r+0x4c>
 80054ac:	2300      	movs	r3, #0
 80054ae:	9309      	str	r3, [sp, #36]	; 0x24
 80054b0:	2320      	movs	r3, #32
 80054b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054b6:	2330      	movs	r3, #48	; 0x30
 80054b8:	f04f 0901 	mov.w	r9, #1
 80054bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80054c0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005680 <_vfiprintf_r+0x24c>
 80054c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054c8:	4623      	mov	r3, r4
 80054ca:	469a      	mov	sl, r3
 80054cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054d0:	b10a      	cbz	r2, 80054d6 <_vfiprintf_r+0xa2>
 80054d2:	2a25      	cmp	r2, #37	; 0x25
 80054d4:	d1f9      	bne.n	80054ca <_vfiprintf_r+0x96>
 80054d6:	ebba 0b04 	subs.w	fp, sl, r4
 80054da:	d00b      	beq.n	80054f4 <_vfiprintf_r+0xc0>
 80054dc:	465b      	mov	r3, fp
 80054de:	4622      	mov	r2, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	4630      	mov	r0, r6
 80054e4:	f7ff ff93 	bl	800540e <__sfputs_r>
 80054e8:	3001      	adds	r0, #1
 80054ea:	f000 80aa 	beq.w	8005642 <_vfiprintf_r+0x20e>
 80054ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f0:	445a      	add	r2, fp
 80054f2:	9209      	str	r2, [sp, #36]	; 0x24
 80054f4:	f89a 3000 	ldrb.w	r3, [sl]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80a2 	beq.w	8005642 <_vfiprintf_r+0x20e>
 80054fe:	2300      	movs	r3, #0
 8005500:	f04f 32ff 	mov.w	r2, #4294967295
 8005504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005508:	f10a 0a01 	add.w	sl, sl, #1
 800550c:	9304      	str	r3, [sp, #16]
 800550e:	9307      	str	r3, [sp, #28]
 8005510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005514:	931a      	str	r3, [sp, #104]	; 0x68
 8005516:	4654      	mov	r4, sl
 8005518:	2205      	movs	r2, #5
 800551a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800551e:	4858      	ldr	r0, [pc, #352]	; (8005680 <_vfiprintf_r+0x24c>)
 8005520:	f000 faf8 	bl	8005b14 <memchr>
 8005524:	9a04      	ldr	r2, [sp, #16]
 8005526:	b9d8      	cbnz	r0, 8005560 <_vfiprintf_r+0x12c>
 8005528:	06d1      	lsls	r1, r2, #27
 800552a:	bf44      	itt	mi
 800552c:	2320      	movmi	r3, #32
 800552e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005532:	0713      	lsls	r3, r2, #28
 8005534:	bf44      	itt	mi
 8005536:	232b      	movmi	r3, #43	; 0x2b
 8005538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800553c:	f89a 3000 	ldrb.w	r3, [sl]
 8005540:	2b2a      	cmp	r3, #42	; 0x2a
 8005542:	d015      	beq.n	8005570 <_vfiprintf_r+0x13c>
 8005544:	4654      	mov	r4, sl
 8005546:	2000      	movs	r0, #0
 8005548:	f04f 0c0a 	mov.w	ip, #10
 800554c:	9a07      	ldr	r2, [sp, #28]
 800554e:	4621      	mov	r1, r4
 8005550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005554:	3b30      	subs	r3, #48	; 0x30
 8005556:	2b09      	cmp	r3, #9
 8005558:	d94e      	bls.n	80055f8 <_vfiprintf_r+0x1c4>
 800555a:	b1b0      	cbz	r0, 800558a <_vfiprintf_r+0x156>
 800555c:	9207      	str	r2, [sp, #28]
 800555e:	e014      	b.n	800558a <_vfiprintf_r+0x156>
 8005560:	eba0 0308 	sub.w	r3, r0, r8
 8005564:	fa09 f303 	lsl.w	r3, r9, r3
 8005568:	4313      	orrs	r3, r2
 800556a:	46a2      	mov	sl, r4
 800556c:	9304      	str	r3, [sp, #16]
 800556e:	e7d2      	b.n	8005516 <_vfiprintf_r+0xe2>
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	1d19      	adds	r1, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	9103      	str	r1, [sp, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	bfbb      	ittet	lt
 800557c:	425b      	neglt	r3, r3
 800557e:	f042 0202 	orrlt.w	r2, r2, #2
 8005582:	9307      	strge	r3, [sp, #28]
 8005584:	9307      	strlt	r3, [sp, #28]
 8005586:	bfb8      	it	lt
 8005588:	9204      	strlt	r2, [sp, #16]
 800558a:	7823      	ldrb	r3, [r4, #0]
 800558c:	2b2e      	cmp	r3, #46	; 0x2e
 800558e:	d10c      	bne.n	80055aa <_vfiprintf_r+0x176>
 8005590:	7863      	ldrb	r3, [r4, #1]
 8005592:	2b2a      	cmp	r3, #42	; 0x2a
 8005594:	d135      	bne.n	8005602 <_vfiprintf_r+0x1ce>
 8005596:	9b03      	ldr	r3, [sp, #12]
 8005598:	3402      	adds	r4, #2
 800559a:	1d1a      	adds	r2, r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	9203      	str	r2, [sp, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	bfb8      	it	lt
 80055a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80055a8:	9305      	str	r3, [sp, #20]
 80055aa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005684 <_vfiprintf_r+0x250>
 80055ae:	2203      	movs	r2, #3
 80055b0:	4650      	mov	r0, sl
 80055b2:	7821      	ldrb	r1, [r4, #0]
 80055b4:	f000 faae 	bl	8005b14 <memchr>
 80055b8:	b140      	cbz	r0, 80055cc <_vfiprintf_r+0x198>
 80055ba:	2340      	movs	r3, #64	; 0x40
 80055bc:	eba0 000a 	sub.w	r0, r0, sl
 80055c0:	fa03 f000 	lsl.w	r0, r3, r0
 80055c4:	9b04      	ldr	r3, [sp, #16]
 80055c6:	3401      	adds	r4, #1
 80055c8:	4303      	orrs	r3, r0
 80055ca:	9304      	str	r3, [sp, #16]
 80055cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d0:	2206      	movs	r2, #6
 80055d2:	482d      	ldr	r0, [pc, #180]	; (8005688 <_vfiprintf_r+0x254>)
 80055d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055d8:	f000 fa9c 	bl	8005b14 <memchr>
 80055dc:	2800      	cmp	r0, #0
 80055de:	d03f      	beq.n	8005660 <_vfiprintf_r+0x22c>
 80055e0:	4b2a      	ldr	r3, [pc, #168]	; (800568c <_vfiprintf_r+0x258>)
 80055e2:	bb1b      	cbnz	r3, 800562c <_vfiprintf_r+0x1f8>
 80055e4:	9b03      	ldr	r3, [sp, #12]
 80055e6:	3307      	adds	r3, #7
 80055e8:	f023 0307 	bic.w	r3, r3, #7
 80055ec:	3308      	adds	r3, #8
 80055ee:	9303      	str	r3, [sp, #12]
 80055f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f2:	443b      	add	r3, r7
 80055f4:	9309      	str	r3, [sp, #36]	; 0x24
 80055f6:	e767      	b.n	80054c8 <_vfiprintf_r+0x94>
 80055f8:	460c      	mov	r4, r1
 80055fa:	2001      	movs	r0, #1
 80055fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005600:	e7a5      	b.n	800554e <_vfiprintf_r+0x11a>
 8005602:	2300      	movs	r3, #0
 8005604:	f04f 0c0a 	mov.w	ip, #10
 8005608:	4619      	mov	r1, r3
 800560a:	3401      	adds	r4, #1
 800560c:	9305      	str	r3, [sp, #20]
 800560e:	4620      	mov	r0, r4
 8005610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005614:	3a30      	subs	r2, #48	; 0x30
 8005616:	2a09      	cmp	r2, #9
 8005618:	d903      	bls.n	8005622 <_vfiprintf_r+0x1ee>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0c5      	beq.n	80055aa <_vfiprintf_r+0x176>
 800561e:	9105      	str	r1, [sp, #20]
 8005620:	e7c3      	b.n	80055aa <_vfiprintf_r+0x176>
 8005622:	4604      	mov	r4, r0
 8005624:	2301      	movs	r3, #1
 8005626:	fb0c 2101 	mla	r1, ip, r1, r2
 800562a:	e7f0      	b.n	800560e <_vfiprintf_r+0x1da>
 800562c:	ab03      	add	r3, sp, #12
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	462a      	mov	r2, r5
 8005632:	4630      	mov	r0, r6
 8005634:	4b16      	ldr	r3, [pc, #88]	; (8005690 <_vfiprintf_r+0x25c>)
 8005636:	a904      	add	r1, sp, #16
 8005638:	f3af 8000 	nop.w
 800563c:	4607      	mov	r7, r0
 800563e:	1c78      	adds	r0, r7, #1
 8005640:	d1d6      	bne.n	80055f0 <_vfiprintf_r+0x1bc>
 8005642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005644:	07d9      	lsls	r1, r3, #31
 8005646:	d405      	bmi.n	8005654 <_vfiprintf_r+0x220>
 8005648:	89ab      	ldrh	r3, [r5, #12]
 800564a:	059a      	lsls	r2, r3, #22
 800564c:	d402      	bmi.n	8005654 <_vfiprintf_r+0x220>
 800564e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005650:	f7ff fc29 	bl	8004ea6 <__retarget_lock_release_recursive>
 8005654:	89ab      	ldrh	r3, [r5, #12]
 8005656:	065b      	lsls	r3, r3, #25
 8005658:	f53f af12 	bmi.w	8005480 <_vfiprintf_r+0x4c>
 800565c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800565e:	e711      	b.n	8005484 <_vfiprintf_r+0x50>
 8005660:	ab03      	add	r3, sp, #12
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	462a      	mov	r2, r5
 8005666:	4630      	mov	r0, r6
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <_vfiprintf_r+0x25c>)
 800566a:	a904      	add	r1, sp, #16
 800566c:	f000 f882 	bl	8005774 <_printf_i>
 8005670:	e7e4      	b.n	800563c <_vfiprintf_r+0x208>
 8005672:	bf00      	nop
 8005674:	08005e38 	.word	0x08005e38
 8005678:	08005e58 	.word	0x08005e58
 800567c:	08005e18 	.word	0x08005e18
 8005680:	08005e78 	.word	0x08005e78
 8005684:	08005e7e 	.word	0x08005e7e
 8005688:	08005e82 	.word	0x08005e82
 800568c:	00000000 	.word	0x00000000
 8005690:	0800540f 	.word	0x0800540f

08005694 <_printf_common>:
 8005694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	4616      	mov	r6, r2
 800569a:	4699      	mov	r9, r3
 800569c:	688a      	ldr	r2, [r1, #8]
 800569e:	690b      	ldr	r3, [r1, #16]
 80056a0:	4607      	mov	r7, r0
 80056a2:	4293      	cmp	r3, r2
 80056a4:	bfb8      	it	lt
 80056a6:	4613      	movlt	r3, r2
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ae:	460c      	mov	r4, r1
 80056b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056b4:	b10a      	cbz	r2, 80056ba <_printf_common+0x26>
 80056b6:	3301      	adds	r3, #1
 80056b8:	6033      	str	r3, [r6, #0]
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	0699      	lsls	r1, r3, #26
 80056be:	bf42      	ittt	mi
 80056c0:	6833      	ldrmi	r3, [r6, #0]
 80056c2:	3302      	addmi	r3, #2
 80056c4:	6033      	strmi	r3, [r6, #0]
 80056c6:	6825      	ldr	r5, [r4, #0]
 80056c8:	f015 0506 	ands.w	r5, r5, #6
 80056cc:	d106      	bne.n	80056dc <_printf_common+0x48>
 80056ce:	f104 0a19 	add.w	sl, r4, #25
 80056d2:	68e3      	ldr	r3, [r4, #12]
 80056d4:	6832      	ldr	r2, [r6, #0]
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	42ab      	cmp	r3, r5
 80056da:	dc28      	bgt.n	800572e <_printf_common+0x9a>
 80056dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e0:	1e13      	subs	r3, r2, #0
 80056e2:	6822      	ldr	r2, [r4, #0]
 80056e4:	bf18      	it	ne
 80056e6:	2301      	movne	r3, #1
 80056e8:	0692      	lsls	r2, r2, #26
 80056ea:	d42d      	bmi.n	8005748 <_printf_common+0xb4>
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f4:	47c0      	blx	r8
 80056f6:	3001      	adds	r0, #1
 80056f8:	d020      	beq.n	800573c <_printf_common+0xa8>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	68e5      	ldr	r5, [r4, #12]
 80056fe:	f003 0306 	and.w	r3, r3, #6
 8005702:	2b04      	cmp	r3, #4
 8005704:	bf18      	it	ne
 8005706:	2500      	movne	r5, #0
 8005708:	6832      	ldr	r2, [r6, #0]
 800570a:	f04f 0600 	mov.w	r6, #0
 800570e:	68a3      	ldr	r3, [r4, #8]
 8005710:	bf08      	it	eq
 8005712:	1aad      	subeq	r5, r5, r2
 8005714:	6922      	ldr	r2, [r4, #16]
 8005716:	bf08      	it	eq
 8005718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800571c:	4293      	cmp	r3, r2
 800571e:	bfc4      	itt	gt
 8005720:	1a9b      	subgt	r3, r3, r2
 8005722:	18ed      	addgt	r5, r5, r3
 8005724:	341a      	adds	r4, #26
 8005726:	42b5      	cmp	r5, r6
 8005728:	d11a      	bne.n	8005760 <_printf_common+0xcc>
 800572a:	2000      	movs	r0, #0
 800572c:	e008      	b.n	8005740 <_printf_common+0xac>
 800572e:	2301      	movs	r3, #1
 8005730:	4652      	mov	r2, sl
 8005732:	4649      	mov	r1, r9
 8005734:	4638      	mov	r0, r7
 8005736:	47c0      	blx	r8
 8005738:	3001      	adds	r0, #1
 800573a:	d103      	bne.n	8005744 <_printf_common+0xb0>
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005744:	3501      	adds	r5, #1
 8005746:	e7c4      	b.n	80056d2 <_printf_common+0x3e>
 8005748:	2030      	movs	r0, #48	; 0x30
 800574a:	18e1      	adds	r1, r4, r3
 800574c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005756:	4422      	add	r2, r4
 8005758:	3302      	adds	r3, #2
 800575a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800575e:	e7c5      	b.n	80056ec <_printf_common+0x58>
 8005760:	2301      	movs	r3, #1
 8005762:	4622      	mov	r2, r4
 8005764:	4649      	mov	r1, r9
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	3001      	adds	r0, #1
 800576c:	d0e6      	beq.n	800573c <_printf_common+0xa8>
 800576e:	3601      	adds	r6, #1
 8005770:	e7d9      	b.n	8005726 <_printf_common+0x92>
	...

08005774 <_printf_i>:
 8005774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005778:	7e0f      	ldrb	r7, [r1, #24]
 800577a:	4691      	mov	r9, r2
 800577c:	2f78      	cmp	r7, #120	; 0x78
 800577e:	4680      	mov	r8, r0
 8005780:	460c      	mov	r4, r1
 8005782:	469a      	mov	sl, r3
 8005784:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800578a:	d807      	bhi.n	800579c <_printf_i+0x28>
 800578c:	2f62      	cmp	r7, #98	; 0x62
 800578e:	d80a      	bhi.n	80057a6 <_printf_i+0x32>
 8005790:	2f00      	cmp	r7, #0
 8005792:	f000 80d9 	beq.w	8005948 <_printf_i+0x1d4>
 8005796:	2f58      	cmp	r7, #88	; 0x58
 8005798:	f000 80a4 	beq.w	80058e4 <_printf_i+0x170>
 800579c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057a4:	e03a      	b.n	800581c <_printf_i+0xa8>
 80057a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057aa:	2b15      	cmp	r3, #21
 80057ac:	d8f6      	bhi.n	800579c <_printf_i+0x28>
 80057ae:	a101      	add	r1, pc, #4	; (adr r1, 80057b4 <_printf_i+0x40>)
 80057b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057b4:	0800580d 	.word	0x0800580d
 80057b8:	08005821 	.word	0x08005821
 80057bc:	0800579d 	.word	0x0800579d
 80057c0:	0800579d 	.word	0x0800579d
 80057c4:	0800579d 	.word	0x0800579d
 80057c8:	0800579d 	.word	0x0800579d
 80057cc:	08005821 	.word	0x08005821
 80057d0:	0800579d 	.word	0x0800579d
 80057d4:	0800579d 	.word	0x0800579d
 80057d8:	0800579d 	.word	0x0800579d
 80057dc:	0800579d 	.word	0x0800579d
 80057e0:	0800592f 	.word	0x0800592f
 80057e4:	08005851 	.word	0x08005851
 80057e8:	08005911 	.word	0x08005911
 80057ec:	0800579d 	.word	0x0800579d
 80057f0:	0800579d 	.word	0x0800579d
 80057f4:	08005951 	.word	0x08005951
 80057f8:	0800579d 	.word	0x0800579d
 80057fc:	08005851 	.word	0x08005851
 8005800:	0800579d 	.word	0x0800579d
 8005804:	0800579d 	.word	0x0800579d
 8005808:	08005919 	.word	0x08005919
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	1d1a      	adds	r2, r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	602a      	str	r2, [r5, #0]
 8005814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800581c:	2301      	movs	r3, #1
 800581e:	e0a4      	b.n	800596a <_printf_i+0x1f6>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	6829      	ldr	r1, [r5, #0]
 8005824:	0606      	lsls	r6, r0, #24
 8005826:	f101 0304 	add.w	r3, r1, #4
 800582a:	d50a      	bpl.n	8005842 <_printf_i+0xce>
 800582c:	680e      	ldr	r6, [r1, #0]
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	2e00      	cmp	r6, #0
 8005832:	da03      	bge.n	800583c <_printf_i+0xc8>
 8005834:	232d      	movs	r3, #45	; 0x2d
 8005836:	4276      	negs	r6, r6
 8005838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583c:	230a      	movs	r3, #10
 800583e:	485e      	ldr	r0, [pc, #376]	; (80059b8 <_printf_i+0x244>)
 8005840:	e019      	b.n	8005876 <_printf_i+0x102>
 8005842:	680e      	ldr	r6, [r1, #0]
 8005844:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	bf18      	it	ne
 800584c:	b236      	sxthne	r6, r6
 800584e:	e7ef      	b.n	8005830 <_printf_i+0xbc>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	1d19      	adds	r1, r3, #4
 8005856:	6029      	str	r1, [r5, #0]
 8005858:	0601      	lsls	r1, r0, #24
 800585a:	d501      	bpl.n	8005860 <_printf_i+0xec>
 800585c:	681e      	ldr	r6, [r3, #0]
 800585e:	e002      	b.n	8005866 <_printf_i+0xf2>
 8005860:	0646      	lsls	r6, r0, #25
 8005862:	d5fb      	bpl.n	800585c <_printf_i+0xe8>
 8005864:	881e      	ldrh	r6, [r3, #0]
 8005866:	2f6f      	cmp	r7, #111	; 0x6f
 8005868:	bf0c      	ite	eq
 800586a:	2308      	moveq	r3, #8
 800586c:	230a      	movne	r3, #10
 800586e:	4852      	ldr	r0, [pc, #328]	; (80059b8 <_printf_i+0x244>)
 8005870:	2100      	movs	r1, #0
 8005872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005876:	6865      	ldr	r5, [r4, #4]
 8005878:	2d00      	cmp	r5, #0
 800587a:	bfa8      	it	ge
 800587c:	6821      	ldrge	r1, [r4, #0]
 800587e:	60a5      	str	r5, [r4, #8]
 8005880:	bfa4      	itt	ge
 8005882:	f021 0104 	bicge.w	r1, r1, #4
 8005886:	6021      	strge	r1, [r4, #0]
 8005888:	b90e      	cbnz	r6, 800588e <_printf_i+0x11a>
 800588a:	2d00      	cmp	r5, #0
 800588c:	d04d      	beq.n	800592a <_printf_i+0x1b6>
 800588e:	4615      	mov	r5, r2
 8005890:	fbb6 f1f3 	udiv	r1, r6, r3
 8005894:	fb03 6711 	mls	r7, r3, r1, r6
 8005898:	5dc7      	ldrb	r7, [r0, r7]
 800589a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800589e:	4637      	mov	r7, r6
 80058a0:	42bb      	cmp	r3, r7
 80058a2:	460e      	mov	r6, r1
 80058a4:	d9f4      	bls.n	8005890 <_printf_i+0x11c>
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d10b      	bne.n	80058c2 <_printf_i+0x14e>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	07de      	lsls	r6, r3, #31
 80058ae:	d508      	bpl.n	80058c2 <_printf_i+0x14e>
 80058b0:	6923      	ldr	r3, [r4, #16]
 80058b2:	6861      	ldr	r1, [r4, #4]
 80058b4:	4299      	cmp	r1, r3
 80058b6:	bfde      	ittt	le
 80058b8:	2330      	movle	r3, #48	; 0x30
 80058ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058c2:	1b52      	subs	r2, r2, r5
 80058c4:	6122      	str	r2, [r4, #16]
 80058c6:	464b      	mov	r3, r9
 80058c8:	4621      	mov	r1, r4
 80058ca:	4640      	mov	r0, r8
 80058cc:	f8cd a000 	str.w	sl, [sp]
 80058d0:	aa03      	add	r2, sp, #12
 80058d2:	f7ff fedf 	bl	8005694 <_printf_common>
 80058d6:	3001      	adds	r0, #1
 80058d8:	d14c      	bne.n	8005974 <_printf_i+0x200>
 80058da:	f04f 30ff 	mov.w	r0, #4294967295
 80058de:	b004      	add	sp, #16
 80058e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e4:	4834      	ldr	r0, [pc, #208]	; (80059b8 <_printf_i+0x244>)
 80058e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058ea:	6829      	ldr	r1, [r5, #0]
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80058f2:	6029      	str	r1, [r5, #0]
 80058f4:	061d      	lsls	r5, r3, #24
 80058f6:	d514      	bpl.n	8005922 <_printf_i+0x1ae>
 80058f8:	07df      	lsls	r7, r3, #31
 80058fa:	bf44      	itt	mi
 80058fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005900:	6023      	strmi	r3, [r4, #0]
 8005902:	b91e      	cbnz	r6, 800590c <_printf_i+0x198>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	f023 0320 	bic.w	r3, r3, #32
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	2310      	movs	r3, #16
 800590e:	e7af      	b.n	8005870 <_printf_i+0xfc>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	f043 0320 	orr.w	r3, r3, #32
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	2378      	movs	r3, #120	; 0x78
 800591a:	4828      	ldr	r0, [pc, #160]	; (80059bc <_printf_i+0x248>)
 800591c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005920:	e7e3      	b.n	80058ea <_printf_i+0x176>
 8005922:	0659      	lsls	r1, r3, #25
 8005924:	bf48      	it	mi
 8005926:	b2b6      	uxthmi	r6, r6
 8005928:	e7e6      	b.n	80058f8 <_printf_i+0x184>
 800592a:	4615      	mov	r5, r2
 800592c:	e7bb      	b.n	80058a6 <_printf_i+0x132>
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	6826      	ldr	r6, [r4, #0]
 8005932:	1d18      	adds	r0, r3, #4
 8005934:	6961      	ldr	r1, [r4, #20]
 8005936:	6028      	str	r0, [r5, #0]
 8005938:	0635      	lsls	r5, r6, #24
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	d501      	bpl.n	8005942 <_printf_i+0x1ce>
 800593e:	6019      	str	r1, [r3, #0]
 8005940:	e002      	b.n	8005948 <_printf_i+0x1d4>
 8005942:	0670      	lsls	r0, r6, #25
 8005944:	d5fb      	bpl.n	800593e <_printf_i+0x1ca>
 8005946:	8019      	strh	r1, [r3, #0]
 8005948:	2300      	movs	r3, #0
 800594a:	4615      	mov	r5, r2
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	e7ba      	b.n	80058c6 <_printf_i+0x152>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	2100      	movs	r1, #0
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	602a      	str	r2, [r5, #0]
 8005958:	681d      	ldr	r5, [r3, #0]
 800595a:	6862      	ldr	r2, [r4, #4]
 800595c:	4628      	mov	r0, r5
 800595e:	f000 f8d9 	bl	8005b14 <memchr>
 8005962:	b108      	cbz	r0, 8005968 <_printf_i+0x1f4>
 8005964:	1b40      	subs	r0, r0, r5
 8005966:	6060      	str	r0, [r4, #4]
 8005968:	6863      	ldr	r3, [r4, #4]
 800596a:	6123      	str	r3, [r4, #16]
 800596c:	2300      	movs	r3, #0
 800596e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005972:	e7a8      	b.n	80058c6 <_printf_i+0x152>
 8005974:	462a      	mov	r2, r5
 8005976:	4649      	mov	r1, r9
 8005978:	4640      	mov	r0, r8
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	47d0      	blx	sl
 800597e:	3001      	adds	r0, #1
 8005980:	d0ab      	beq.n	80058da <_printf_i+0x166>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	079b      	lsls	r3, r3, #30
 8005986:	d413      	bmi.n	80059b0 <_printf_i+0x23c>
 8005988:	68e0      	ldr	r0, [r4, #12]
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	4298      	cmp	r0, r3
 800598e:	bfb8      	it	lt
 8005990:	4618      	movlt	r0, r3
 8005992:	e7a4      	b.n	80058de <_printf_i+0x16a>
 8005994:	2301      	movs	r3, #1
 8005996:	4632      	mov	r2, r6
 8005998:	4649      	mov	r1, r9
 800599a:	4640      	mov	r0, r8
 800599c:	47d0      	blx	sl
 800599e:	3001      	adds	r0, #1
 80059a0:	d09b      	beq.n	80058da <_printf_i+0x166>
 80059a2:	3501      	adds	r5, #1
 80059a4:	68e3      	ldr	r3, [r4, #12]
 80059a6:	9903      	ldr	r1, [sp, #12]
 80059a8:	1a5b      	subs	r3, r3, r1
 80059aa:	42ab      	cmp	r3, r5
 80059ac:	dcf2      	bgt.n	8005994 <_printf_i+0x220>
 80059ae:	e7eb      	b.n	8005988 <_printf_i+0x214>
 80059b0:	2500      	movs	r5, #0
 80059b2:	f104 0619 	add.w	r6, r4, #25
 80059b6:	e7f5      	b.n	80059a4 <_printf_i+0x230>
 80059b8:	08005e89 	.word	0x08005e89
 80059bc:	08005e9a 	.word	0x08005e9a

080059c0 <_sbrk_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	2300      	movs	r3, #0
 80059c4:	4d05      	ldr	r5, [pc, #20]	; (80059dc <_sbrk_r+0x1c>)
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	f7fc fc28 	bl	8002220 <_sbrk>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_sbrk_r+0x1a>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	b103      	cbz	r3, 80059da <_sbrk_r+0x1a>
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	20000238 	.word	0x20000238

080059e0 <__sread>:
 80059e0:	b510      	push	{r4, lr}
 80059e2:	460c      	mov	r4, r1
 80059e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e8:	f000 f906 	bl	8005bf8 <_read_r>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	bfab      	itete	ge
 80059f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059f2:	89a3      	ldrhlt	r3, [r4, #12]
 80059f4:	181b      	addge	r3, r3, r0
 80059f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059fa:	bfac      	ite	ge
 80059fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80059fe:	81a3      	strhlt	r3, [r4, #12]
 8005a00:	bd10      	pop	{r4, pc}

08005a02 <__swrite>:
 8005a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a06:	461f      	mov	r7, r3
 8005a08:	898b      	ldrh	r3, [r1, #12]
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	05db      	lsls	r3, r3, #23
 8005a0e:	460c      	mov	r4, r1
 8005a10:	4616      	mov	r6, r2
 8005a12:	d505      	bpl.n	8005a20 <__swrite+0x1e>
 8005a14:	2302      	movs	r3, #2
 8005a16:	2200      	movs	r2, #0
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	f000 f868 	bl	8005af0 <_lseek_r>
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	4632      	mov	r2, r6
 8005a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a28:	81a3      	strh	r3, [r4, #12]
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a36:	f000 b817 	b.w	8005a68 <_write_r>

08005a3a <__sseek>:
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a42:	f000 f855 	bl	8005af0 <_lseek_r>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	bf15      	itete	ne
 8005a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a56:	81a3      	strheq	r3, [r4, #12]
 8005a58:	bf18      	it	ne
 8005a5a:	81a3      	strhne	r3, [r4, #12]
 8005a5c:	bd10      	pop	{r4, pc}

08005a5e <__sclose>:
 8005a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a62:	f000 b813 	b.w	8005a8c <_close_r>
	...

08005a68 <_write_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	2200      	movs	r2, #0
 8005a72:	4d05      	ldr	r5, [pc, #20]	; (8005a88 <_write_r+0x20>)
 8005a74:	602a      	str	r2, [r5, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f7fc fb85 	bl	8002186 <_write>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	d102      	bne.n	8005a86 <_write_r+0x1e>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	b103      	cbz	r3, 8005a86 <_write_r+0x1e>
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	20000238 	.word	0x20000238

08005a8c <_close_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4d05      	ldr	r5, [pc, #20]	; (8005aa8 <_close_r+0x1c>)
 8005a92:	4604      	mov	r4, r0
 8005a94:	4608      	mov	r0, r1
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	f7fc fb91 	bl	80021be <_close>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_close_r+0x1a>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_close_r+0x1a>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	20000238 	.word	0x20000238

08005aac <_fstat_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	2300      	movs	r3, #0
 8005ab0:	4d06      	ldr	r5, [pc, #24]	; (8005acc <_fstat_r+0x20>)
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	f7fc fb8b 	bl	80021d4 <_fstat>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	d102      	bne.n	8005ac8 <_fstat_r+0x1c>
 8005ac2:	682b      	ldr	r3, [r5, #0]
 8005ac4:	b103      	cbz	r3, 8005ac8 <_fstat_r+0x1c>
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	bd38      	pop	{r3, r4, r5, pc}
 8005aca:	bf00      	nop
 8005acc:	20000238 	.word	0x20000238

08005ad0 <_isatty_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4d05      	ldr	r5, [pc, #20]	; (8005aec <_isatty_r+0x1c>)
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	4608      	mov	r0, r1
 8005ada:	602b      	str	r3, [r5, #0]
 8005adc:	f7fc fb89 	bl	80021f2 <_isatty>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d102      	bne.n	8005aea <_isatty_r+0x1a>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	b103      	cbz	r3, 8005aea <_isatty_r+0x1a>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	20000238 	.word	0x20000238

08005af0 <_lseek_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4604      	mov	r4, r0
 8005af4:	4608      	mov	r0, r1
 8005af6:	4611      	mov	r1, r2
 8005af8:	2200      	movs	r2, #0
 8005afa:	4d05      	ldr	r5, [pc, #20]	; (8005b10 <_lseek_r+0x20>)
 8005afc:	602a      	str	r2, [r5, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f7fc fb81 	bl	8002206 <_lseek>
 8005b04:	1c43      	adds	r3, r0, #1
 8005b06:	d102      	bne.n	8005b0e <_lseek_r+0x1e>
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	b103      	cbz	r3, 8005b0e <_lseek_r+0x1e>
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	bd38      	pop	{r3, r4, r5, pc}
 8005b10:	20000238 	.word	0x20000238

08005b14 <memchr>:
 8005b14:	4603      	mov	r3, r0
 8005b16:	b510      	push	{r4, lr}
 8005b18:	b2c9      	uxtb	r1, r1
 8005b1a:	4402      	add	r2, r0
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	d101      	bne.n	8005b26 <memchr+0x12>
 8005b22:	2000      	movs	r0, #0
 8005b24:	e003      	b.n	8005b2e <memchr+0x1a>
 8005b26:	7804      	ldrb	r4, [r0, #0]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	428c      	cmp	r4, r1
 8005b2c:	d1f6      	bne.n	8005b1c <memchr+0x8>
 8005b2e:	bd10      	pop	{r4, pc}

08005b30 <memcpy>:
 8005b30:	440a      	add	r2, r1
 8005b32:	4291      	cmp	r1, r2
 8005b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b38:	d100      	bne.n	8005b3c <memcpy+0xc>
 8005b3a:	4770      	bx	lr
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b42:	4291      	cmp	r1, r2
 8005b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b48:	d1f9      	bne.n	8005b3e <memcpy+0xe>
 8005b4a:	bd10      	pop	{r4, pc}

08005b4c <memmove>:
 8005b4c:	4288      	cmp	r0, r1
 8005b4e:	b510      	push	{r4, lr}
 8005b50:	eb01 0402 	add.w	r4, r1, r2
 8005b54:	d902      	bls.n	8005b5c <memmove+0x10>
 8005b56:	4284      	cmp	r4, r0
 8005b58:	4623      	mov	r3, r4
 8005b5a:	d807      	bhi.n	8005b6c <memmove+0x20>
 8005b5c:	1e43      	subs	r3, r0, #1
 8005b5e:	42a1      	cmp	r1, r4
 8005b60:	d008      	beq.n	8005b74 <memmove+0x28>
 8005b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b6a:	e7f8      	b.n	8005b5e <memmove+0x12>
 8005b6c:	4601      	mov	r1, r0
 8005b6e:	4402      	add	r2, r0
 8005b70:	428a      	cmp	r2, r1
 8005b72:	d100      	bne.n	8005b76 <memmove+0x2a>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b7e:	e7f7      	b.n	8005b70 <memmove+0x24>

08005b80 <__malloc_lock>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__malloc_lock+0x8>)
 8005b82:	f7ff b98f 	b.w	8004ea4 <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	2000022c 	.word	0x2000022c

08005b8c <__malloc_unlock>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__malloc_unlock+0x8>)
 8005b8e:	f7ff b98a 	b.w	8004ea6 <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	2000022c 	.word	0x2000022c

08005b98 <_realloc_r>:
 8005b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	4614      	mov	r4, r2
 8005ba0:	460e      	mov	r6, r1
 8005ba2:	b921      	cbnz	r1, 8005bae <_realloc_r+0x16>
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005baa:	f7ff ba4b 	b.w	8005044 <_malloc_r>
 8005bae:	b92a      	cbnz	r2, 8005bbc <_realloc_r+0x24>
 8005bb0:	f7ff f9e0 	bl	8004f74 <_free_r>
 8005bb4:	4625      	mov	r5, r4
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bbc:	f000 f82e 	bl	8005c1c <_malloc_usable_size_r>
 8005bc0:	4284      	cmp	r4, r0
 8005bc2:	4607      	mov	r7, r0
 8005bc4:	d802      	bhi.n	8005bcc <_realloc_r+0x34>
 8005bc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bca:	d812      	bhi.n	8005bf2 <_realloc_r+0x5a>
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4640      	mov	r0, r8
 8005bd0:	f7ff fa38 	bl	8005044 <_malloc_r>
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d0ed      	beq.n	8005bb6 <_realloc_r+0x1e>
 8005bda:	42bc      	cmp	r4, r7
 8005bdc:	4622      	mov	r2, r4
 8005bde:	4631      	mov	r1, r6
 8005be0:	bf28      	it	cs
 8005be2:	463a      	movcs	r2, r7
 8005be4:	f7ff ffa4 	bl	8005b30 <memcpy>
 8005be8:	4631      	mov	r1, r6
 8005bea:	4640      	mov	r0, r8
 8005bec:	f7ff f9c2 	bl	8004f74 <_free_r>
 8005bf0:	e7e1      	b.n	8005bb6 <_realloc_r+0x1e>
 8005bf2:	4635      	mov	r5, r6
 8005bf4:	e7df      	b.n	8005bb6 <_realloc_r+0x1e>
	...

08005bf8 <_read_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	4611      	mov	r1, r2
 8005c00:	2200      	movs	r2, #0
 8005c02:	4d05      	ldr	r5, [pc, #20]	; (8005c18 <_read_r+0x20>)
 8005c04:	602a      	str	r2, [r5, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f7fc faa0 	bl	800214c <_read>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d102      	bne.n	8005c16 <_read_r+0x1e>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	b103      	cbz	r3, 8005c16 <_read_r+0x1e>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	20000238 	.word	0x20000238

08005c1c <_malloc_usable_size_r>:
 8005c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c20:	1f18      	subs	r0, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bfbc      	itt	lt
 8005c26:	580b      	ldrlt	r3, [r1, r0]
 8005c28:	18c0      	addlt	r0, r0, r3
 8005c2a:	4770      	bx	lr

08005c2c <_init>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	bf00      	nop
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr

08005c38 <_fini>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	bf00      	nop
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr
