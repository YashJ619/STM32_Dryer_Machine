
Dryer_Build2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005efc  08005efc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005efc  08005efc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005efc  08005efc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005efc  08005efc  00015efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000088  08005f8c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08005f8c  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7f0  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a39  00000000  00000000  0002e8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000312e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00032300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad39  00000000  00000000  000331d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001374f  00000000  00000000  0004df11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f909  00000000  00000000  00061660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0f69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af4  00000000  00000000  000f0fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08005c7c 	.word	0x08005c7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08005c7c 	.word	0x08005c7c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <Max6675_Read_Temp>:
// ------------------- Variables ----------------
_Bool TCF = 0;                       // Thermocouple Connection acknowledge Flag
uint8_t DATARX[2];                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max6675_Read_Temp(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	float Temp = 0;                                      // Temperature Variable
 8000522:	f04f 0300 	mov.w	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8000528:	2200      	movs	r2, #0
 800052a:	2110      	movs	r1, #16
 800052c:	481f      	ldr	r0, [pc, #124]	; (80005ac <Max6675_Read_Temp+0x90>)
 800052e:	f002 fb1a 	bl	8002b66 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, DATARX, 2, 50);                  // DATA Transfer
 8000532:	2332      	movs	r3, #50	; 0x32
 8000534:	2202      	movs	r2, #2
 8000536:	491e      	ldr	r1, [pc, #120]	; (80005b0 <Max6675_Read_Temp+0x94>)
 8000538:	481e      	ldr	r0, [pc, #120]	; (80005b4 <Max6675_Read_Temp+0x98>)
 800053a:	f002 fffb 	bl	8003534 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 800053e:	2201      	movs	r2, #1
 8000540:	2110      	movs	r1, #16
 8000542:	481a      	ldr	r0, [pc, #104]	; (80005ac <Max6675_Read_Temp+0x90>)
 8000544:	f002 fb0f 	bl	8002b66 <HAL_GPIO_WritePin>
//printf("Mix = %x\r\n",((DATARX[0] << 8)|DATARX[1]));
//printf("MSB = %x\r\n",DATARX[1]);

//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2) & 0x0001);        // State of Connecting
	TCF = ((((DATARX[0] << 8) | DATARX[1]) >> 2) & 0x0001);
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <Max6675_Read_Temp+0x94>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	4a18      	ldr	r2, [pc, #96]	; (80005b0 <Max6675_Read_Temp+0x94>)
 8000550:	7852      	ldrb	r2, [r2, #1]
 8000552:	4313      	orrs	r3, r2
 8000554:	109b      	asrs	r3, r3, #2
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <Max6675_Read_Temp+0x9c>)
 8000566:	701a      	strb	r2, [r3, #0]
//printf("TCF = %d\r\n",TCF);

//Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
	if (TCF == 0) {
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <Max6675_Read_Temp+0x9c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f083 0301 	eor.w	r3, r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d013      	beq.n	800059e <Max6675_Read_Temp+0x82>
		Temp = (((DATARX[0] << 8) | DATARX[1]) >> 3);
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <Max6675_Read_Temp+0x94>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <Max6675_Read_Temp+0x94>)
 800057e:	7852      	ldrb	r2, [r2, #1]
 8000580:	4313      	orrs	r3, r2
 8000582:	10db      	asrs	r3, r3, #3
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff4f 	bl	8000428 <__aeabi_i2f>
 800058a:	4603      	mov	r3, r0
 800058c:	607b      	str	r3, [r7, #4]
		Temp *= 0.25;                         // Data to Centigrade Conversation
 800058e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff fdda 	bl	800014c <__aeabi_fmul>
 8000598:	4603      	mov	r3, r0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e001      	b.n	80005a2 <Max6675_Read_Temp+0x86>
	} else
		Temp = -1;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <Max6675_Read_Temp+0xa0>)
 80005a0:	607b      	str	r3, [r7, #4]
	//HAL_Delay(250); // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
	return Temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010800 	.word	0x40010800
 80005b0:	200000a8 	.word	0x200000a8
 80005b4:	20000150 	.word	0x20000150
 80005b8:	200000a4 	.word	0x200000a4
 80005bc:	bf800000 	.word	0xbf800000

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d4:	4b69      	ldr	r3, [pc, #420]	; (800077c <MX_GPIO_Init+0x1bc>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a68      	ldr	r2, [pc, #416]	; (800077c <MX_GPIO_Init+0x1bc>)
 80005da:	f043 0310 	orr.w	r3, r3, #16
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b66      	ldr	r3, [pc, #408]	; (800077c <MX_GPIO_Init+0x1bc>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0310 	and.w	r3, r3, #16
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ec:	4b63      	ldr	r3, [pc, #396]	; (800077c <MX_GPIO_Init+0x1bc>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a62      	ldr	r2, [pc, #392]	; (800077c <MX_GPIO_Init+0x1bc>)
 80005f2:	f043 0320 	orr.w	r3, r3, #32
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b60      	ldr	r3, [pc, #384]	; (800077c <MX_GPIO_Init+0x1bc>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0320 	and.w	r3, r3, #32
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b5d      	ldr	r3, [pc, #372]	; (800077c <MX_GPIO_Init+0x1bc>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a5c      	ldr	r2, [pc, #368]	; (800077c <MX_GPIO_Init+0x1bc>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b5a      	ldr	r3, [pc, #360]	; (800077c <MX_GPIO_Init+0x1bc>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	4b57      	ldr	r3, [pc, #348]	; (800077c <MX_GPIO_Init+0x1bc>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a56      	ldr	r2, [pc, #344]	; (800077c <MX_GPIO_Init+0x1bc>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b54      	ldr	r3, [pc, #336]	; (800077c <MX_GPIO_Init+0x1bc>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063a:	4851      	ldr	r0, [pc, #324]	; (8000780 <MX_GPIO_Init+0x1c0>)
 800063c:	f002 fa93 	bl	8002b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000646:	484e      	ldr	r0, [pc, #312]	; (8000780 <MX_GPIO_Init+0x1c0>)
 8000648:	f002 fa8d 	bl	8002b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_Pin|FAN_Pin|LCD_RS_Pin|LCD_EN_Pin
 800064c:	2200      	movs	r2, #0
 800064e:	f649 1110 	movw	r1, #39184	; 0x9910
 8000652:	484c      	ldr	r0, [pc, #304]	; (8000784 <MX_GPIO_Init+0x1c4>)
 8000654:	f002 fa87 	bl	8002b66 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRUM_LEFT_Pin|DRUM_RIGHT_Pin|HEATER_Pin|LCD_D1_Pin
 8000658:	2200      	movs	r2, #0
 800065a:	f24e 31f8 	movw	r1, #58360	; 0xe3f8
 800065e:	484a      	ldr	r0, [pc, #296]	; (8000788 <MX_GPIO_Init+0x1c8>)
 8000660:	f002 fa81 	bl	8002b66 <HAL_GPIO_WritePin>
                          |LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2302      	movs	r3, #2
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	4840      	ldr	r0, [pc, #256]	; (8000780 <MX_GPIO_Init+0x1c0>)
 800067e:	f002 f8d7 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800068c:	2302      	movs	r3, #2
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4839      	ldr	r0, [pc, #228]	; (8000780 <MX_GPIO_Init+0x1c0>)
 800069c:	f002 f8c8 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DOOR_SW_Pin;
 80006a0:	2301      	movs	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006a4:	4b39      	ldr	r3, [pc, #228]	; (800078c <MX_GPIO_Init+0x1cc>)
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DOOR_SW_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	4834      	ldr	r0, [pc, #208]	; (8000784 <MX_GPIO_Init+0x1c4>)
 80006b4:	f002 f8bc 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin|SEL_ROT_SW_Pin|HEATER_SW_Pin;
 80006b8:	230e      	movs	r3, #14
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	482e      	ldr	r0, [pc, #184]	; (8000784 <MX_GPIO_Init+0x1c4>)
 80006cc:	f002 f8b0 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SS_Pin|LCD_RS_Pin|LCD_EN_Pin|LCD_D0_Pin;
 80006d0:	f649 0310 	movw	r3, #38928	; 0x9810
 80006d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006da:	2302      	movs	r3, #2
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	4619      	mov	r1, r3
 80006e8:	4826      	ldr	r0, [pc, #152]	; (8000784 <MX_GPIO_Init+0x1c4>)
 80006ea:	f002 f8a1 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FN_KEY_Pin|LOW_KEY_Pin|MED_KEY_Pin|HIGH_KEY_Pin;
 80006ee:	f640 4303 	movw	r3, #3075	; 0xc03
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4821      	ldr	r0, [pc, #132]	; (8000788 <MX_GPIO_Init+0x1c8>)
 8000704:	f002 f894 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRUM_LEFT_Pin|DRUM_RIGHT_Pin|HEATER_Pin;
 8000708:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2302      	movs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4619      	mov	r1, r3
 8000720:	4819      	ldr	r0, [pc, #100]	; (8000788 <MX_GPIO_Init+0x1c8>)
 8000722:	f002 f885 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FAN_Pin;
 8000726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000730:	2302      	movs	r3, #2
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4811      	ldr	r0, [pc, #68]	; (8000784 <MX_GPIO_Init+0x1c4>)
 8000740:	f002 f876 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 8000744:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000748:	613b      	str	r3, [r7, #16]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074e:	2302      	movs	r3, #2
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	4619      	mov	r1, r3
 800075c:	480a      	ldr	r0, [pc, #40]	; (8000788 <MX_GPIO_Init+0x1c8>)
 800075e:	f002 f867 	bl	8002830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2006      	movs	r0, #6
 8000768:	f002 f82b 	bl	80027c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800076c:	2006      	movs	r0, #6
 800076e:	f002 f844 	bl	80027fa <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000
 8000780:	40011000 	.word	0x40011000
 8000784:	40010800 	.word	0x40010800
 8000788:	40010c00 	.word	0x40010c00
 800078c:	10310000 	.word	0x10310000

08000790 <is_coil_open>:
		last_time = HAL_GetTick();
	}
	return last_state;
}

uint8_t is_coil_open(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 8000794:	f001 ff10 	bl	80025b8 <HAL_GetTick>
 8000798:	4602      	mov	r2, r0
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <is_coil_open+0x44>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	2b05      	cmp	r3, #5
 80007a2:	d912      	bls.n	80007ca <is_coil_open+0x3a>
		if (HAL_GPIO_ReadPin(HEATER_SW_GPIO_Port, HEATER_SW_Pin) == GPIO_PIN_RESET) {
 80007a4:	2108      	movs	r1, #8
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <is_coil_open+0x48>)
 80007a8:	f002 f9c6 	bl	8002b38 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d103      	bne.n	80007ba <is_coil_open+0x2a>
			last_state = 0;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <is_coil_open+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e002      	b.n	80007c0 <is_coil_open+0x30>
		} else {
			last_state = 1;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <is_coil_open+0x4c>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80007c0:	f001 fefa 	bl	80025b8 <HAL_GetTick>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <is_coil_open+0x44>)
 80007c8:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <is_coil_open+0x4c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2db      	uxtb	r3, r3
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000ac 	.word	0x200000ac
 80007d8:	40010800 	.word	0x40010800
 80007dc:	200000b0 	.word	0x200000b0

080007e0 <limit_sw_open>:

uint8_t limit_sw_open(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 80007e4:	f001 fee8 	bl	80025b8 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <limit_sw_open+0x44>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	2b05      	cmp	r3, #5
 80007f2:	d912      	bls.n	800081a <limit_sw_open+0x3a>
		if (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_RESET) {
 80007f4:	2102      	movs	r1, #2
 80007f6:	480c      	ldr	r0, [pc, #48]	; (8000828 <limit_sw_open+0x48>)
 80007f8:	f002 f99e 	bl	8002b38 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d103      	bne.n	800080a <limit_sw_open+0x2a>
			last_state = 0;
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <limit_sw_open+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e002      	b.n	8000810 <limit_sw_open+0x30>
		} else {
			last_state = 1;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <limit_sw_open+0x4c>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000810:	f001 fed2 	bl	80025b8 <HAL_GetTick>
 8000814:	4603      	mov	r3, r0
 8000816:	4a03      	ldr	r2, [pc, #12]	; (8000824 <limit_sw_open+0x44>)
 8000818:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <limit_sw_open+0x4c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b2db      	uxtb	r3, r3
}
 8000820:	4618      	mov	r0, r3
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200000b4 	.word	0x200000b4
 8000828:	40010800 	.word	0x40010800
 800082c:	200000b8 	.word	0x200000b8

08000830 <scan_keypad>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

uint8_t scan_keypad(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 8000834:	f000 f832 	bl	800089c <is_low_key_pressed>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 800083e:	4813      	ldr	r0, [pc, #76]	; (800088c <scan_keypad+0x5c>)
 8000840:	f004 f8bc 	bl	80049bc <puts>
		return LOW_KEY_PRESSED;
 8000844:	2301      	movs	r3, #1
 8000846:	e01e      	b.n	8000886 <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 8000848:	f000 f860 	bl	800090c <is_med_key_pressed>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <scan_keypad+0x60>)
 8000854:	f004 f8b2 	bl	80049bc <puts>
		return MED_KEY_PRESSED;
 8000858:	2302      	movs	r3, #2
 800085a:	e014      	b.n	8000886 <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 800085c:	f000 f890 	bl	8000980 <is_high_key_pressed>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d004      	beq.n	8000870 <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <scan_keypad+0x64>)
 8000868:	f004 f8a8 	bl	80049bc <puts>
		return HIGH_KEY_PRESSED;
 800086c:	2303      	movs	r3, #3
 800086e:	e00a      	b.n	8000886 <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 8000870:	f000 f8c0 	bl	80009f4 <is_fn_key_pressed>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d004      	beq.n	8000884 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <scan_keypad+0x68>)
 800087c:	f004 f89e 	bl	80049bc <puts>
		return FN_KEY_PRESSED;
 8000880:	2304      	movs	r3, #4
 8000882:	e000      	b.n	8000886 <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08005c94 	.word	0x08005c94
 8000890:	08005ca8 	.word	0x08005ca8
 8000894:	08005cbc 	.word	0x08005cbc
 8000898:	08005cd0 	.word	0x08005cd0

0800089c <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 80008a0:	f001 fe8a 	bl	80025b8 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <is_low_key_pressed+0x64>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d923      	bls.n	80008f8 <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(LOW_KEY_GPIO_Port, LOW_KEY_Pin) == GPIO_PIN_RESET)
 80008b0:	2102      	movs	r1, #2
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <is_low_key_pressed+0x68>)
 80008b4:	f002 f940 	bl	8002b38 <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d114      	bne.n	80008e8 <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <is_low_key_pressed+0x6c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d112      	bne.n	80008ee <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(LOW_KEY_GPIO_Port, LOW_KEY_Pin) == GPIO_PIN_RESET)
 80008c8:	2102      	movs	r1, #2
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <is_low_key_pressed+0x68>)
 80008cc:	f002 f934 	bl	8002b38 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d104      	bne.n	80008e0 <is_low_key_pressed+0x44>
				{
					last_state = 0;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <is_low_key_pressed+0x6c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
					return 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	e00c      	b.n	80008fa <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <is_low_key_pressed+0x6c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e002      	b.n	80008ee <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <is_low_key_pressed+0x6c>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80008ee:	f001 fe63 	bl	80025b8 <HAL_GetTick>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a02      	ldr	r2, [pc, #8]	; (8000900 <is_low_key_pressed+0x64>)
 80008f6:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000bc 	.word	0x200000bc
 8000904:	40010c00 	.word	0x40010c00
 8000908:	200000c0 	.word	0x200000c0

0800090c <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 8000910:	f001 fe52 	bl	80025b8 <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <is_med_key_pressed+0x68>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	2b01      	cmp	r3, #1
 800091e:	d925      	bls.n	800096c <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(MED_KEY_GPIO_Port, MED_KEY_Pin) == GPIO_PIN_RESET)
 8000920:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000924:	4814      	ldr	r0, [pc, #80]	; (8000978 <is_med_key_pressed+0x6c>)
 8000926:	f002 f907 	bl	8002b38 <HAL_GPIO_ReadPin>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d115      	bne.n	800095c <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <is_med_key_pressed+0x70>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b01      	cmp	r3, #1
 8000938:	d113      	bne.n	8000962 <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(MED_KEY_GPIO_Port, MED_KEY_Pin) == GPIO_PIN_RESET)
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <is_med_key_pressed+0x6c>)
 8000940:	f002 f8fa 	bl	8002b38 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d104      	bne.n	8000954 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <is_med_key_pressed+0x70>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
					return 1;
 8000950:	2301      	movs	r3, #1
 8000952:	e00c      	b.n	800096e <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <is_med_key_pressed+0x70>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	e002      	b.n	8000962 <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <is_med_key_pressed+0x70>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000962:	f001 fe29 	bl	80025b8 <HAL_GetTick>
 8000966:	4603      	mov	r3, r0
 8000968:	4a02      	ldr	r2, [pc, #8]	; (8000974 <is_med_key_pressed+0x68>)
 800096a:	6013      	str	r3, [r2, #0]
	}
	return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000c4 	.word	0x200000c4
 8000978:	40010c00 	.word	0x40010c00
 800097c:	200000c8 	.word	0x200000c8

08000980 <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 8000984:	f001 fe18 	bl	80025b8 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <is_high_key_pressed+0x68>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	2b01      	cmp	r3, #1
 8000992:	d925      	bls.n	80009e0 <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(HIGH_KEY_GPIO_Port, HIGH_KEY_Pin) == GPIO_PIN_RESET)
 8000994:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000998:	4814      	ldr	r0, [pc, #80]	; (80009ec <is_high_key_pressed+0x6c>)
 800099a:	f002 f8cd 	bl	8002b38 <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d115      	bne.n	80009d0 <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <is_high_key_pressed+0x70>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d113      	bne.n	80009d6 <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(HIGH_KEY_GPIO_Port, HIGH_KEY_Pin) == GPIO_PIN_RESET)
 80009ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <is_high_key_pressed+0x6c>)
 80009b4:	f002 f8c0 	bl	8002b38 <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d104      	bne.n	80009c8 <is_high_key_pressed+0x48>
				{
					last_state = 0;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <is_high_key_pressed+0x70>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
					return 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	e00c      	b.n	80009e2 <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <is_high_key_pressed+0x70>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	e002      	b.n	80009d6 <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <is_high_key_pressed+0x70>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80009d6:	f001 fdef 	bl	80025b8 <HAL_GetTick>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a02      	ldr	r2, [pc, #8]	; (80009e8 <is_high_key_pressed+0x68>)
 80009de:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000cc 	.word	0x200000cc
 80009ec:	40010c00 	.word	0x40010c00
 80009f0:	200000d0 	.word	0x200000d0

080009f4 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 80009f8:	f001 fdde 	bl	80025b8 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <is_fn_key_pressed+0x64>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d923      	bls.n	8000a50 <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(FN_KEY_GPIO_Port, FN_KEY_Pin) == GPIO_PIN_RESET)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <is_fn_key_pressed+0x68>)
 8000a0c:	f002 f894 	bl	8002b38 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d114      	bne.n	8000a40 <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <is_fn_key_pressed+0x6c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d112      	bne.n	8000a46 <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(FN_KEY_GPIO_Port, FN_KEY_Pin) == GPIO_PIN_RESET)
 8000a20:	2101      	movs	r1, #1
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <is_fn_key_pressed+0x68>)
 8000a24:	f002 f888 	bl	8002b38 <HAL_GPIO_ReadPin>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d104      	bne.n	8000a38 <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <is_fn_key_pressed+0x6c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
					return 1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e00c      	b.n	8000a52 <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <is_fn_key_pressed+0x6c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	e002      	b.n	8000a46 <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <is_fn_key_pressed+0x6c>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8000a46:	f001 fdb7 	bl	80025b8 <HAL_GetTick>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a02      	ldr	r2, [pc, #8]	; (8000a58 <is_fn_key_pressed+0x64>)
 8000a4e:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000d4 	.word	0x200000d4
 8000a5c:	40010c00 	.word	0x40010c00
 8000a60:	200000d8 	.word	0x200000d8

08000a64 <lcd_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_init(uint8_t fourbitmode)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <lcd_init+0x28>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 8000a7a:	e002      	b.n	8000a82 <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <lcd_init+0x28>)
 8000a7e:	2210      	movs	r2, #16
 8000a80:	701a      	strb	r2, [r3, #0]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	200000d9 	.word	0x200000d9

08000a90 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	71bb      	strb	r3, [r7, #6]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d906      	bls.n	8000ab6 <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 8000aa8:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <lcd_begin+0xe8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <lcd_begin+0xe8>)
 8000ab4:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 8000ab6:	4a31      	ldr	r2, [pc, #196]	; (8000b7c <lcd_begin+0xec>)
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 8000abc:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <lcd_begin+0xf0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 8000ac2:	797b      	ldrb	r3, [r7, #5]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d009      	beq.n	8000adc <lcd_begin+0x4c>
 8000ac8:	79bb      	ldrb	r3, [r7, #6]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d106      	bne.n	8000adc <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <lcd_begin+0xe8>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <lcd_begin+0xe8>)
 8000ada:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 8000adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae0:	f001 fd74 	bl	80025cc <HAL_Delay>
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aea:	4826      	ldr	r0, [pc, #152]	; (8000b84 <lcd_begin+0xf4>)
 8000aec:	f002 f83b 	bl	8002b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af6:	4823      	ldr	r0, [pc, #140]	; (8000b84 <lcd_begin+0xf4>)
 8000af8:	f002 f835 	bl	8002b66 <HAL_GPIO_WritePin>
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <lcd_begin+0xe8>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	f043 0320 	orr.w	r3, r3, #32
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f91e 	bl	8000d48 <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 8000b0c:	200a      	movs	r0, #10
 8000b0e:	f001 fd5d 	bl	80025cc <HAL_Delay>

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <lcd_begin+0xe8>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f913 	bl	8000d48 <lcd_send_cmd>
	    HAL_Delay(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f001 fd52 	bl	80025cc <HAL_Delay>

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <lcd_begin+0xe8>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	f043 0320 	orr.w	r3, r3, #32
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f908 	bl	8000d48 <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <lcd_begin+0xe8>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	f043 0320 	orr.w	r3, r3, #32
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f900 	bl	8000d48 <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <lcd_begin+0xf8>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f000 f828 	bl	8000ba4 <lcd_display>

	// clear it off
	lcd_clear();
 8000b54:	f000 f90e 	bl	8000d74 <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <lcd_begin+0xfc>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <lcd_begin+0xfc>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f8ed 	bl	8000d48 <lcd_send_cmd>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000d9 	.word	0x200000d9
 8000b7c:	200000dc 	.word	0x200000dc
 8000b80:	200000dd 	.word	0x200000dd
 8000b84:	40010800 	.word	0x40010800
 8000b88:	200000da 	.word	0x200000da
 8000b8c:	200000db 	.word	0x200000db

08000b90 <lcd_home>:

void lcd_home(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 f8d7 	bl	8000d48 <lcd_send_cmd>
	HAL_Delay(2); // this command takes a long time!
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f001 fd16 	bl	80025cc <HAL_Delay>
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <lcd_display>:

void lcd_display(uint8_t state)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	if(state)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00f      	beq.n	8000bd4 <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <lcd_display+0x58>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <lcd_display+0x58>)
 8000bc0:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <lcd_display+0x58>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f8bb 	bl	8000d48 <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 8000bd2:	e00e      	b.n	8000bf2 <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <lcd_display+0x58>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	f023 0304 	bic.w	r3, r3, #4
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <lcd_display+0x58>)
 8000be0:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <lcd_display+0x58>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f8ab 	bl	8000d48 <lcd_send_cmd>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000da 	.word	0x200000da

08000c00 <lcd_enable>:

void lcd_enable(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0c:	481a      	ldr	r0, [pc, #104]	; (8000c78 <lcd_enable+0x78>)
 8000c0e:	f001 ffaa 	bl	8002b66 <HAL_GPIO_WritePin>
	for(int i = 0;i<5000;i++);
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	e002      	b.n	8000c1e <lcd_enable+0x1e>
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c24:	4293      	cmp	r3, r2
 8000c26:	ddf7      	ble.n	8000c18 <lcd_enable+0x18>
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2e:	4812      	ldr	r0, [pc, #72]	; (8000c78 <lcd_enable+0x78>)
 8000c30:	f001 ff99 	bl	8002b66 <HAL_GPIO_WritePin>
	for(int i = 0;i<5000;i++); // enable pulse must be >450ns
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	e002      	b.n	8000c40 <lcd_enable+0x40>
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c46:	4293      	cmp	r3, r2
 8000c48:	ddf7      	ble.n	8000c3a <lcd_enable+0x3a>
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <lcd_enable+0x78>)
 8000c52:	f001 ff88 	bl	8002b66 <HAL_GPIO_WritePin>
	for(int i = 0;i<5000;i++); // commands need > 37us to settle
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e002      	b.n	8000c62 <lcd_enable+0x62>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	ddf7      	ble.n	8000c5c <lcd_enable+0x5c>
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40010800 	.word	0x40010800

08000c7c <write_8bit>:

void write_8bit(uint8_t value)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D7_Port, LCD_D7, (value >> 7) & 0x01);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	09db      	lsrs	r3, r3, #7
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c92:	482b      	ldr	r0, [pc, #172]	; (8000d40 <write_8bit+0xc4>)
 8000c94:	f001 ff67 	bl	8002b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_Port, LCD_D6, (value >> 6) & 0x01);
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	099b      	lsrs	r3, r3, #6
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000caa:	4825      	ldr	r0, [pc, #148]	; (8000d40 <write_8bit+0xc4>)
 8000cac:	f001 ff5b 	bl	8002b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_Port, LCD_D5, (value >> 5) & 0x01);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	481f      	ldr	r0, [pc, #124]	; (8000d40 <write_8bit+0xc4>)
 8000cc2:	f001 ff50 	bl	8002b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_Port, LCD_D4, (value >> 4) & 0x01);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	2140      	movs	r1, #64	; 0x40
 8000cd6:	481a      	ldr	r0, [pc, #104]	; (8000d40 <write_8bit+0xc4>)
 8000cd8:	f001 ff45 	bl	8002b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_Port, LCD_D3, (value >> 3) & 0x01);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	08db      	lsrs	r3, r3, #3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2120      	movs	r1, #32
 8000cec:	4814      	ldr	r0, [pc, #80]	; (8000d40 <write_8bit+0xc4>)
 8000cee:	f001 ff3a 	bl	8002b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_Port, LCD_D2, (value >> 2) & 0x01);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	089b      	lsrs	r3, r3, #2
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	461a      	mov	r2, r3
 8000d00:	2110      	movs	r1, #16
 8000d02:	480f      	ldr	r0, [pc, #60]	; (8000d40 <write_8bit+0xc4>)
 8000d04:	f001 ff2f 	bl	8002b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_Port, LCD_D1, (value >> 1) & 0x01);
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	085b      	lsrs	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	461a      	mov	r2, r3
 8000d16:	2108      	movs	r1, #8
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <write_8bit+0xc4>)
 8000d1a:	f001 ff24 	bl	8002b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D0_Port, LCD_D0, (value >> 0) & 0x01);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <write_8bit+0xc8>)
 8000d2e:	f001 ff1a 	bl	8002b66 <HAL_GPIO_WritePin>

	lcd_enable();
 8000d32:	f7ff ff65 	bl	8000c00 <lcd_enable>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40010c00 	.word	0x40010c00
 8000d44:	40010800 	.word	0x40010800

08000d48 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <lcd_send_cmd+0x28>)
 8000d5a:	f001 ff04 	bl	8002b66 <HAL_GPIO_WritePin>
	write_8bit(cmd);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff8b 	bl	8000c7c <write_8bit>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40010800 	.word	0x40010800

08000d74 <lcd_clear>:

void lcd_clear(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f7ff ffe5 	bl	8000d48 <lcd_send_cmd>
	HAL_Delay(2);
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f001 fc24 	bl	80025cc <HAL_Delay>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <lcd_send_data+0x28>)
 8000d9a:	f001 fee4 	bl	8002b66 <HAL_GPIO_WritePin>
	write_8bit(data);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff6b 	bl	8000c7c <write_8bit>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40010800 	.word	0x40010800

08000db4 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ffe1 	bl	8000d88 <lcd_send_data>
		str++;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f3      	bne.n	8000dbc <lcd_print+0x8>
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <lcd_set_cursor>:

void lcd_set_cursor(int8_t col, int8_t row)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	460a      	mov	r2, r1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	4613      	mov	r3, r2
 8000dee:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <lcd_set_cursor+0x5c>)
 8000df2:	f107 0408 	add.w	r4, r7, #8
 8000df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _numlines) {
 8000dfc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e00:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <lcd_set_cursor+0x60>)
 8000e02:	7812      	ldrb	r2, [r2, #0]
 8000e04:	4293      	cmp	r3, r2
 8000e06:	dd04      	ble.n	8000e12 <lcd_set_cursor+0x32>
		row = _numlines - 1; // we count rows starting w/0
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <lcd_set_cursor+0x60>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	71bb      	strb	r3, [r7, #6]
		}
	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
 8000e12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	3318      	adds	r3, #24
 8000e1a:	443b      	add	r3, r7
 8000e1c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	4413      	add	r3, r2
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff8a 	bl	8000d48 <lcd_send_cmd>
}
 8000e34:	bf00      	nop
 8000e36:	371c      	adds	r7, #28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	08005ce0 	.word	0x08005ce0
 8000e40:	200000dc 	.word	0x200000dc

08000e44 <lcd_logo>:
void heater_coil_page(void);
void mode_level_page(void);
void limit_sw_err_page(void);
void complete_page(void);

void lcd_logo(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	lcd_clear();
 8000e48:	f7ff ff94 	bl	8000d74 <lcd_clear>
	lcd_set_cursor(5, 0);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2005      	movs	r0, #5
 8000e50:	f7ff ffc6 	bl	8000de0 <lcd_set_cursor>
	lcd_print("AL WALI");
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <lcd_logo+0x48>)
 8000e56:	f7ff ffad 	bl	8000db4 <lcd_print>
	lcd_set_cursor(1,1);
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff ffbf 	bl	8000de0 <lcd_set_cursor>
	lcd_print("+9710504952138");
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <lcd_logo+0x4c>)
 8000e64:	f7ff ffa6 	bl	8000db4 <lcd_print>
	lcd_set_cursor(-1, 2);
 8000e68:	2102      	movs	r1, #2
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6e:	f7ff ffb7 	bl	8000de0 <lcd_set_cursor>
	lcd_print("ALwaliajman");
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <lcd_logo+0x50>)
 8000e74:	f7ff ff9e 	bl	8000db4 <lcd_print>
	lcd_set_cursor(0, 3);
 8000e78:	2103      	movs	r1, #3
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff ffb0 	bl	8000de0 <lcd_set_cursor>
	lcd_print("@gmail.com");
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <lcd_logo+0x54>)
 8000e82:	f7ff ff97 	bl	8000db4 <lcd_print>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	08005cf0 	.word	0x08005cf0
 8000e90:	08005cf8 	.word	0x08005cf8
 8000e94:	08005d08 	.word	0x08005d08
 8000e98:	08005d14 	.word	0x08005d14

08000e9c <lcd_update>:

void lcd_update(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	switch(cur_page){
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <lcd_update+0x5c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	d825      	bhi.n	8000ef4 <lcd_update+0x58>
 8000ea8:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <lcd_update+0x14>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000ed1 	.word	0x08000ed1
 8000eb4:	08000ed7 	.word	0x08000ed7
 8000eb8:	08000ed7 	.word	0x08000ed7
 8000ebc:	08000ed7 	.word	0x08000ed7
 8000ec0:	08000edd 	.word	0x08000edd
 8000ec4:	08000ee3 	.word	0x08000ee3
 8000ec8:	08000ee9 	.word	0x08000ee9
 8000ecc:	08000eef 	.word	0x08000eef
	case INIT_PAGE:
		welcome_page();
 8000ed0:	f000 f814 	bl	8000efc <welcome_page>
		break;
 8000ed4:	e00e      	b.n	8000ef4 <lcd_update+0x58>
	case LOW_LEVEL_PAGE:
	case MED_LEVEL_PAGE:
	case HIGH_LEVEL_PAGE:
		mode_level_page();
 8000ed6:	f000 f8ed 	bl	80010b4 <mode_level_page>
		break;
 8000eda:	e00b      	b.n	8000ef4 <lcd_update+0x58>
	case COMPLETE_PAGE:
		complete_page();
 8000edc:	f000 f8c0 	bl	8001060 <complete_page>
		break;
 8000ee0:	e008      	b.n	8000ef4 <lcd_update+0x58>
	case DOOR_OPEN_PAGE:
		door_open_page();
 8000ee2:	f000 f83f 	bl	8000f64 <door_open_page>
		break;
 8000ee6:	e005      	b.n	8000ef4 <lcd_update+0x58>
	case LIMIT_SW_ERR_PAGE:
		limit_sw_err_page();
 8000ee8:	f000 f890 	bl	800100c <limit_sw_err_page>
		break;
 8000eec:	e002      	b.n	8000ef4 <lcd_update+0x58>
	case HEATER_COIL_PAGE:
		heater_coil_page();
 8000eee:	f000 f863 	bl	8000fb8 <heater_coil_page>
		break;
 8000ef2:	bf00      	nop
	}

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000014b 	.word	0x2000014b

08000efc <welcome_page>:

void welcome_page(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
//	printf("welcome_page\r\n");
	if(last_page!=cur_page)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <welcome_page+0x54>)
 8000f02:	781a      	ldrb	r2, [r3, #0]
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <welcome_page+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d006      	beq.n	8000f1a <welcome_page+0x1e>
	{
		lcd_clear();
 8000f0c:	f7ff ff32 	bl	8000d74 <lcd_clear>
		last_page = cur_page;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <welcome_page+0x58>)
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <welcome_page+0x54>)
 8000f16:	701a      	strb	r2, [r3, #0]
 8000f18:	e001      	b.n	8000f1e <welcome_page+0x22>
	}
	else{
		lcd_home();
 8000f1a:	f7ff fe39 	bl	8000b90 <lcd_home>
	}
	
	lcd_set_cursor(5, 0);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2005      	movs	r0, #5
 8000f22:	f7ff ff5d 	bl	8000de0 <lcd_set_cursor>
	lcd_print("WELCOME!");
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <welcome_page+0x5c>)
 8000f28:	f7ff ff44 	bl	8000db4 <lcd_print>
	lcd_set_cursor(-3,2);
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	f06f 0002 	mvn.w	r0, #2
 8000f32:	f7ff ff55 	bl	8000de0 <lcd_set_cursor>
	lcd_print("Select a mode");
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <welcome_page+0x60>)
 8000f38:	f7ff ff3c 	bl	8000db4 <lcd_print>
	lcd_set_cursor(-3,3);
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	f06f 0002 	mvn.w	r0, #2
 8000f42:	f7ff ff4d 	bl	8000de0 <lcd_set_cursor>
	lcd_print("to start dryer");
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <welcome_page+0x64>)
 8000f48:	f7ff ff34 	bl	8000db4 <lcd_print>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000014c 	.word	0x2000014c
 8000f54:	2000014b 	.word	0x2000014b
 8000f58:	08005d20 	.word	0x08005d20
 8000f5c:	08005d2c 	.word	0x08005d2c
 8000f60:	08005d3c 	.word	0x08005d3c

08000f64 <door_open_page>:

void door_open_page(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
//	printf("door_open_page\r\n");
	if(last_page!=cur_page)
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <door_open_page+0x44>)
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <door_open_page+0x48>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d006      	beq.n	8000f82 <door_open_page+0x1e>
	{
		lcd_clear();
 8000f74:	f7ff fefe 	bl	8000d74 <lcd_clear>

		last_page = cur_page;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <door_open_page+0x48>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <door_open_page+0x44>)
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e001      	b.n	8000f86 <door_open_page+0x22>
	}
	else{
		lcd_home();
 8000f82:	f7ff fe05 	bl	8000b90 <lcd_home>
	}

	lcd_set_cursor(6, 1);
 8000f86:	2101      	movs	r1, #1
 8000f88:	2006      	movs	r0, #6
 8000f8a:	f7ff ff29 	bl	8000de0 <lcd_set_cursor>
	lcd_print("DOOR");
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <door_open_page+0x4c>)
 8000f90:	f7ff ff10 	bl	8000db4 <lcd_print>
	lcd_set_cursor(6,2);
 8000f94:	2102      	movs	r1, #2
 8000f96:	2006      	movs	r0, #6
 8000f98:	f7ff ff22 	bl	8000de0 <lcd_set_cursor>
	lcd_print("OPEN");
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <door_open_page+0x50>)
 8000f9e:	f7ff ff09 	bl	8000db4 <lcd_print>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000014c 	.word	0x2000014c
 8000fac:	2000014b 	.word	0x2000014b
 8000fb0:	08005d4c 	.word	0x08005d4c
 8000fb4:	08005d54 	.word	0x08005d54

08000fb8 <heater_coil_page>:

void heater_coil_page(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
//	printf("heater_coil_page\r\n");
	if(last_page!=cur_page)
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <heater_coil_page+0x44>)
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <heater_coil_page+0x48>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d006      	beq.n	8000fd6 <heater_coil_page+0x1e>
	{
		lcd_clear();
 8000fc8:	f7ff fed4 	bl	8000d74 <lcd_clear>
		last_page = cur_page;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <heater_coil_page+0x48>)
 8000fce:	781a      	ldrb	r2, [r3, #0]
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <heater_coil_page+0x44>)
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e001      	b.n	8000fda <heater_coil_page+0x22>
	}
	else{
		lcd_home();
 8000fd6:	f7ff fddb 	bl	8000b90 <lcd_home>
	}

	lcd_set_cursor(5, 1);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2005      	movs	r0, #5
 8000fde:	f7ff feff 	bl	8000de0 <lcd_set_cursor>
	lcd_print("HEATER");
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <heater_coil_page+0x4c>)
 8000fe4:	f7ff fee6 	bl	8000db4 <lcd_print>
	lcd_set_cursor(5,2);
 8000fe8:	2102      	movs	r1, #2
 8000fea:	2005      	movs	r0, #5
 8000fec:	f7ff fef8 	bl	8000de0 <lcd_set_cursor>
	lcd_print("ERROR");
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <heater_coil_page+0x50>)
 8000ff2:	f7ff fedf 	bl	8000db4 <lcd_print>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000014c 	.word	0x2000014c
 8001000:	2000014b 	.word	0x2000014b
 8001004:	08005d5c 	.word	0x08005d5c
 8001008:	08005d64 	.word	0x08005d64

0800100c <limit_sw_err_page>:

void limit_sw_err_page(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
//	printf("limit_sw_err_page\r\n");
	if(last_page!=cur_page)
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <limit_sw_err_page+0x44>)
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <limit_sw_err_page+0x48>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d006      	beq.n	800102a <limit_sw_err_page+0x1e>
	{
		lcd_clear();
 800101c:	f7ff feaa 	bl	8000d74 <lcd_clear>
		last_page = cur_page;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <limit_sw_err_page+0x48>)
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <limit_sw_err_page+0x44>)
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e001      	b.n	800102e <limit_sw_err_page+0x22>
	}
	else{
		lcd_home();
 800102a:	f7ff fdb1 	bl	8000b90 <lcd_home>
	}

	lcd_set_cursor(5, 0);
 800102e:	2100      	movs	r1, #0
 8001030:	2005      	movs	r0, #5
 8001032:	f7ff fed5 	bl	8000de0 <lcd_set_cursor>
	lcd_print("LIMIT");
 8001036:	4808      	ldr	r0, [pc, #32]	; (8001058 <limit_sw_err_page+0x4c>)
 8001038:	f7ff febc 	bl	8000db4 <lcd_print>
	lcd_set_cursor(5, 2);
 800103c:	2102      	movs	r1, #2
 800103e:	2005      	movs	r0, #5
 8001040:	f7ff fece 	bl	8000de0 <lcd_set_cursor>
	lcd_print("ERROR");
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <limit_sw_err_page+0x50>)
 8001046:	f7ff feb5 	bl	8000db4 <lcd_print>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000014c 	.word	0x2000014c
 8001054:	2000014b 	.word	0x2000014b
 8001058:	08005d6c 	.word	0x08005d6c
 800105c:	08005d64 	.word	0x08005d64

08001060 <complete_page>:

void complete_page(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
//	printf("complete_page\r\n");
	if(last_page!=cur_page)
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <complete_page+0x44>)
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <complete_page+0x48>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d006      	beq.n	800107e <complete_page+0x1e>
	{
		lcd_clear();
 8001070:	f7ff fe80 	bl	8000d74 <lcd_clear>
		last_page = cur_page;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <complete_page+0x48>)
 8001076:	781a      	ldrb	r2, [r3, #0]
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <complete_page+0x44>)
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	e001      	b.n	8001082 <complete_page+0x22>
	}
	else{
		lcd_home();
 800107e:	f7ff fd87 	bl	8000b90 <lcd_home>
	}

	lcd_set_cursor(4, 0);
 8001082:	2100      	movs	r1, #0
 8001084:	2004      	movs	r0, #4
 8001086:	f7ff feab 	bl	8000de0 <lcd_set_cursor>
	lcd_print("PROCESS");
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <complete_page+0x4c>)
 800108c:	f7ff fe92 	bl	8000db4 <lcd_print>
	lcd_set_cursor(0, 2);
 8001090:	2102      	movs	r1, #2
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff fea4 	bl	8000de0 <lcd_set_cursor>
	lcd_print("COMPLETE");
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <complete_page+0x50>)
 800109a:	f7ff fe8b 	bl	8000db4 <lcd_print>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000014c 	.word	0x2000014c
 80010a8:	2000014b 	.word	0x2000014b
 80010ac:	08005d74 	.word	0x08005d74
 80010b0:	08005d7c 	.word	0x08005d7c

080010b4 <mode_level_page>:

void mode_level_page(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
//	printf("mode_level_page\r\n");
	static uint16_t a = 0,b = 0;
	if(last_page!=cur_page)
 80010b8:	4b55      	ldr	r3, [pc, #340]	; (8001210 <mode_level_page+0x15c>)
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	4b55      	ldr	r3, [pc, #340]	; (8001214 <mode_level_page+0x160>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d006      	beq.n	80010d2 <mode_level_page+0x1e>
	{
		lcd_clear();
 80010c4:	f7ff fe56 	bl	8000d74 <lcd_clear>
		last_page = cur_page;
 80010c8:	4b52      	ldr	r3, [pc, #328]	; (8001214 <mode_level_page+0x160>)
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	4b50      	ldr	r3, [pc, #320]	; (8001210 <mode_level_page+0x15c>)
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e001      	b.n	80010d6 <mode_level_page+0x22>
	}
	else lcd_home();
 80010d2:	f7ff fd5d 	bl	8000b90 <lcd_home>

	a = dryer.heatTime % 60;
 80010d6:	4b50      	ldr	r3, [pc, #320]	; (8001218 <mode_level_page+0x164>)
 80010d8:	885a      	ldrh	r2, [r3, #2]
 80010da:	4b50      	ldr	r3, [pc, #320]	; (800121c <mode_level_page+0x168>)
 80010dc:	fba3 1302 	umull	r1, r3, r3, r2
 80010e0:	0959      	lsrs	r1, r3, #5
 80010e2:	460b      	mov	r3, r1
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	1a5b      	subs	r3, r3, r1
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <mode_level_page+0x16c>)
 80010f0:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 80010f2:	4b49      	ldr	r3, [pc, #292]	; (8001218 <mode_level_page+0x164>)
 80010f4:	885b      	ldrh	r3, [r3, #2]
 80010f6:	4a49      	ldr	r2, [pc, #292]	; (800121c <mode_level_page+0x168>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	095b      	lsrs	r3, r3, #5
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b48      	ldr	r3, [pc, #288]	; (8001224 <mode_level_page+0x170>)
 8001102:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"h=%02d:%02d",b,a);
 8001104:	4b47      	ldr	r3, [pc, #284]	; (8001224 <mode_level_page+0x170>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b45      	ldr	r3, [pc, #276]	; (8001220 <mode_level_page+0x16c>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	4946      	ldr	r1, [pc, #280]	; (8001228 <mode_level_page+0x174>)
 8001110:	4846      	ldr	r0, [pc, #280]	; (800122c <mode_level_page+0x178>)
 8001112:	f003 fc5b 	bl	80049cc <siprintf>
	lcd_set_cursor(0, 0);
 8001116:	2100      	movs	r1, #0
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fe61 	bl	8000de0 <lcd_set_cursor>
	lcd_print(lcd_buf);
 800111e:	4843      	ldr	r0, [pc, #268]	; (800122c <mode_level_page+0x178>)
 8001120:	f7ff fe48 	bl	8000db4 <lcd_print>

	a = dryer.coolTime % 60;
 8001124:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <mode_level_page+0x164>)
 8001126:	889a      	ldrh	r2, [r3, #4]
 8001128:	4b3c      	ldr	r3, [pc, #240]	; (800121c <mode_level_page+0x168>)
 800112a:	fba3 1302 	umull	r1, r3, r3, r2
 800112e:	0959      	lsrs	r1, r3, #5
 8001130:	460b      	mov	r3, r1
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	1a5b      	subs	r3, r3, r1
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b38      	ldr	r3, [pc, #224]	; (8001220 <mode_level_page+0x16c>)
 800113e:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <mode_level_page+0x164>)
 8001142:	889b      	ldrh	r3, [r3, #4]
 8001144:	4a35      	ldr	r2, [pc, #212]	; (800121c <mode_level_page+0x168>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b35      	ldr	r3, [pc, #212]	; (8001224 <mode_level_page+0x170>)
 8001150:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf,"c=%02d:%02d",b,a);
 8001152:	4b34      	ldr	r3, [pc, #208]	; (8001224 <mode_level_page+0x170>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	4b31      	ldr	r3, [pc, #196]	; (8001220 <mode_level_page+0x16c>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	4934      	ldr	r1, [pc, #208]	; (8001230 <mode_level_page+0x17c>)
 800115e:	4833      	ldr	r0, [pc, #204]	; (800122c <mode_level_page+0x178>)
 8001160:	f003 fc34 	bl	80049cc <siprintf>
	lcd_set_cursor(9, 0);
 8001164:	2100      	movs	r1, #0
 8001166:	2009      	movs	r0, #9
 8001168:	f7ff fe3a 	bl	8000de0 <lcd_set_cursor>
	lcd_print(lcd_buf);
 800116c:	482f      	ldr	r0, [pc, #188]	; (800122c <mode_level_page+0x178>)
 800116e:	f7ff fe21 	bl	8000db4 <lcd_print>

	if(dryer.mode == LOW_LEVEL)sprintf(lcd_buf,"LEVEL: LOW");
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <mode_level_page+0x164>)
 8001174:	785b      	ldrb	r3, [r3, #1]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d104      	bne.n	8001184 <mode_level_page+0xd0>
 800117a:	492e      	ldr	r1, [pc, #184]	; (8001234 <mode_level_page+0x180>)
 800117c:	482b      	ldr	r0, [pc, #172]	; (800122c <mode_level_page+0x178>)
 800117e:	f003 fc25 	bl	80049cc <siprintf>
 8001182:	e010      	b.n	80011a6 <mode_level_page+0xf2>
	else if(dryer.mode == MED_LEVEL)sprintf(lcd_buf,"LEVEL: MEDIUM");
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <mode_level_page+0x164>)
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d104      	bne.n	8001196 <mode_level_page+0xe2>
 800118c:	492a      	ldr	r1, [pc, #168]	; (8001238 <mode_level_page+0x184>)
 800118e:	4827      	ldr	r0, [pc, #156]	; (800122c <mode_level_page+0x178>)
 8001190:	f003 fc1c 	bl	80049cc <siprintf>
 8001194:	e007      	b.n	80011a6 <mode_level_page+0xf2>
	else if(dryer.mode == HIGH_LEVEL)sprintf(lcd_buf,"LEVEL: HIGH");
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <mode_level_page+0x164>)
 8001198:	785b      	ldrb	r3, [r3, #1]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d103      	bne.n	80011a6 <mode_level_page+0xf2>
 800119e:	4927      	ldr	r1, [pc, #156]	; (800123c <mode_level_page+0x188>)
 80011a0:	4822      	ldr	r0, [pc, #136]	; (800122c <mode_level_page+0x178>)
 80011a2:	f003 fc13 	bl	80049cc <siprintf>
	else;

	lcd_set_cursor(2, 1);
 80011a6:	2101      	movs	r1, #1
 80011a8:	2002      	movs	r0, #2
 80011aa:	f7ff fe19 	bl	8000de0 <lcd_set_cursor>
	lcd_print(lcd_buf);
 80011ae:	481f      	ldr	r0, [pc, #124]	; (800122c <mode_level_page+0x178>)
 80011b0:	f7ff fe00 	bl	8000db4 <lcd_print>

	sprintf(lcd_buf,"SetTemp: %02dC",dryer.setTemp);
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <mode_level_page+0x164>)
 80011b6:	799b      	ldrb	r3, [r3, #6]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4921      	ldr	r1, [pc, #132]	; (8001240 <mode_level_page+0x18c>)
 80011bc:	481b      	ldr	r0, [pc, #108]	; (800122c <mode_level_page+0x178>)
 80011be:	f003 fc05 	bl	80049cc <siprintf>
	lcd_set_cursor(-1, 2);
 80011c2:	2102      	movs	r1, #2
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff fe0a 	bl	8000de0 <lcd_set_cursor>
	lcd_print(lcd_buf);
 80011cc:	4817      	ldr	r0, [pc, #92]	; (800122c <mode_level_page+0x178>)
 80011ce:	f7ff fdf1 	bl	8000db4 <lcd_print>

	 //cur_temp = (int)Max6675_Read_Temp();

	if(cur_temp == -1 || cur_temp == 0)
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <mode_level_page+0x190>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011da:	d003      	beq.n	80011e4 <mode_level_page+0x130>
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <mode_level_page+0x190>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <mode_level_page+0x13a>
	{
		sprintf(lcd_buf,"CurTemp: ERR");
 80011e4:	4918      	ldr	r1, [pc, #96]	; (8001248 <mode_level_page+0x194>)
 80011e6:	4811      	ldr	r0, [pc, #68]	; (800122c <mode_level_page+0x178>)
 80011e8:	f003 fbf0 	bl	80049cc <siprintf>
 80011ec:	e006      	b.n	80011fc <mode_level_page+0x148>
	}
	else
	{
		sprintf(lcd_buf,"CurTemp: %02dC ",cur_temp);
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <mode_level_page+0x190>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4915      	ldr	r1, [pc, #84]	; (800124c <mode_level_page+0x198>)
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <mode_level_page+0x178>)
 80011f8:	f003 fbe8 	bl	80049cc <siprintf>
	}
	lcd_set_cursor(-1, 3);
 80011fc:	2103      	movs	r1, #3
 80011fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001202:	f7ff fded 	bl	8000de0 <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <mode_level_page+0x178>)
 8001208:	f7ff fdd4 	bl	8000db4 <lcd_print>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000014c 	.word	0x2000014c
 8001214:	2000014b 	.word	0x2000014b
 8001218:	20000134 	.word	0x20000134
 800121c:	88888889 	.word	0x88888889
 8001220:	20000130 	.word	0x20000130
 8001224:	20000132 	.word	0x20000132
 8001228:	08005d88 	.word	0x08005d88
 800122c:	200000e0 	.word	0x200000e0
 8001230:	08005d94 	.word	0x08005d94
 8001234:	08005da0 	.word	0x08005da0
 8001238:	08005dac 	.word	0x08005dac
 800123c:	08005dbc 	.word	0x08005dbc
 8001240:	08005dc8 	.word	0x08005dc8
 8001244:	20000014 	.word	0x20000014
 8001248:	08005dd8 	.word	0x08005dd8
 800124c:	08005de8 	.word	0x08005de8

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4906      	ldr	r1, [pc, #24]	; (8001284 <__NVIC_EnableIRQ+0x34>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db12      	blt.n	80012c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	490a      	ldr	r1, [pc, #40]	; (80012cc <__NVIC_DisableIRQ+0x44>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	3320      	adds	r3, #32
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012b4:	f3bf 8f4f 	dsb	sy
}
 80012b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ba:	f3bf 8f6f 	isb	sy
}
 80012be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*For Debug use printf to Print data on UART*/
int __io_putchar(int ch) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 80012d8:	1d39      	adds	r1, r7, #4
 80012da:	230a      	movs	r3, #10
 80012dc:	2201      	movs	r2, #1
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <__io_putchar+0x20>)
 80012e0:	f003 f949 	bl	8004576 <HAL_UART_Transmit>
	return ch;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001f4 	.word	0x200001f4

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f8:	f001 f906 	bl	8002508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fc:	f000 fd36 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001300:	f7ff f95e 	bl	80005c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001304:	f001 f864 	bl	80023d0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001308:	f000 ffee 	bl	80022e8 <MX_TIM4_Init>
  MX_SPI1_Init();
 800130c:	f000 fe5c 	bl	8001fc8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	lcd_init(0);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fba7 	bl	8000a64 <lcd_init>
	lcd_begin(16, 4, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2104      	movs	r1, #4
 800131a:	2010      	movs	r0, #16
 800131c:	f7ff fbb8 	bl	8000a90 <lcd_begin>

	dryer.state = INIT;
 8001320:	4b9e      	ldr	r3, [pc, #632]	; (800159c <main+0x2a8>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8001326:	4b9d      	ldr	r3, [pc, #628]	; (800159c <main+0x2a8>)
 8001328:	2200      	movs	r2, #0
 800132a:	705a      	strb	r2, [r3, #1]

	lcd_logo();
 800132c:	f7ff fd8a 	bl	8000e44 <lcd_logo>

	HAL_Delay(3000);
 8001330:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001334:	f001 f94a 	bl	80025cc <HAL_Delay>

	lcd_clear();
 8001338:	f7ff fd1c 	bl	8000d74 <lcd_clear>


	if (HAL_GPIO_ReadPin(DOOR_SW_GPIO_Port, DOOR_SW_Pin) == HIGH) {
 800133c:	2101      	movs	r1, #1
 800133e:	4898      	ldr	r0, [pc, #608]	; (80015a0 <main+0x2ac>)
 8001340:	f001 fbfa 	bl	8002b38 <HAL_GPIO_ReadPin>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d106      	bne.n	8001358 <main+0x64>
		door_open_flag = 1U;
 800134a:	4b96      	ldr	r3, [pc, #600]	; (80015a4 <main+0x2b0>)
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8001350:	4b95      	ldr	r3, [pc, #596]	; (80015a8 <main+0x2b4>)
 8001352:	2205      	movs	r2, #5
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	e002      	b.n	800135e <main+0x6a>
	}
	else{
		cur_page = INIT_PAGE;
 8001358:	4b93      	ldr	r3, [pc, #588]	; (80015a8 <main+0x2b4>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
	}

	lcd_update();
 800135e:	f7ff fd9d 	bl	8000e9c <lcd_update>

    /* USER CODE BEGIN 3 */
		/**********************************************************************************************************
		 **************************************** LCD SCREEN UPDATE RUTINE ****************************************
		 **********************************************************************************************************/
		if (lcd_update_evt) {
 8001362:	4b92      	ldr	r3, [pc, #584]	; (80015ac <main+0x2b8>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <main+0x80>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 800136a:	f7ff fd97 	bl	8000e9c <lcd_update>
			lcd_update_evt = 0U;
 800136e:	4b8f      	ldr	r3, [pc, #572]	; (80015ac <main+0x2b8>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* TIMER EVENT RUTINE ************************************************
		 ***************************************************************************************************************/
		if (timer_stop_evt) {
 8001374:	4b8e      	ldr	r3, [pc, #568]	; (80015b0 <main+0x2bc>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <main+0x96>
			//printf("Timer Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 800137c:	488d      	ldr	r0, [pc, #564]	; (80015b4 <main+0x2c0>)
 800137e:	f002 fd27 	bl	8003dd0 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 8001382:	4b8b      	ldr	r3, [pc, #556]	; (80015b0 <main+0x2bc>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e00d      	b.n	80013a6 <main+0xb2>

		} else if ((timer_start_evt) && (dryer.state == START)) {
 800138a:	4b8b      	ldr	r3, [pc, #556]	; (80015b8 <main+0x2c4>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <main+0xb2>
 8001392:	4b82      	ldr	r3, [pc, #520]	; (800159c <main+0x2a8>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d105      	bne.n	80013a6 <main+0xb2>
			//printf("Timer Started\r\n");
			HAL_TIM_Base_Start_IT(&htim4);
 800139a:	4886      	ldr	r0, [pc, #536]	; (80015b4 <main+0x2c0>)
 800139c:	f002 fcc6 	bl	8003d2c <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 80013a0:	4b85      	ldr	r3, [pc, #532]	; (80015b8 <main+0x2c4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
		/***************************************************************************************************************
		 ********************************************* KEYBOARD SCANNING ***********************************************
		 ********************************** INCREMENT DECREMENT OF TIMER AND MODE SET **********************************
		 ***************************************************************************************************************/
		// if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
			if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 80013a6:	4b7f      	ldr	r3, [pc, #508]	; (80015a4 <main+0x2b0>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 81fc 	bne.w	80017a8 <main+0x4b4>
 80013b0:	4b82      	ldr	r3, [pc, #520]	; (80015bc <main+0x2c8>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f040 81f7 	bne.w	80017a8 <main+0x4b4>
 80013ba:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <main+0x2cc>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 81f2 	bne.w	80017a8 <main+0x4b4>
//				printf("Scaning...\r\n");
				scaned_key = scan_keypad();
 80013c4:	f7ff fa34 	bl	8000830 <scan_keypad>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b7d      	ldr	r3, [pc, #500]	; (80015c4 <main+0x2d0>)
 80013ce:	701a      	strb	r2, [r3, #0]

			if (dryer.state == START) {
 80013d0:	4b72      	ldr	r3, [pc, #456]	; (800159c <main+0x2a8>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	f040 80ff 	bne.w	80015d8 <main+0x2e4>

				switch (scaned_key) {
 80013da:	4b7a      	ldr	r3, [pc, #488]	; (80015c4 <main+0x2d0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b04      	cmp	r3, #4
 80013e0:	f200 80d8 	bhi.w	8001594 <main+0x2a0>
 80013e4:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <main+0xf8>)
 80013e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ea:	bf00      	nop
 80013ec:	08001595 	.word	0x08001595
 80013f0:	08001401 	.word	0x08001401
 80013f4:	0800145f 	.word	0x0800145f
 80013f8:	080014bb 	.word	0x080014bb
 80013fc:	08001563 	.word	0x08001563
					case NO_KEY_PRESSED:
						break;
					case LOW_KEY_PRESSED:
						lcd_update_evt = 1U;
 8001400:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <main+0x2b8>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
						if (dryer.cycle == HEAT_CYCLE && dryer.heatTime > 60U)
 8001406:	4b65      	ldr	r3, [pc, #404]	; (800159c <main+0x2a8>)
 8001408:	7a1b      	ldrb	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d110      	bne.n	8001430 <main+0x13c>
 800140e:	4b63      	ldr	r3, [pc, #396]	; (800159c <main+0x2a8>)
 8001410:	885b      	ldrh	r3, [r3, #2]
 8001412:	2b3c      	cmp	r3, #60	; 0x3c
 8001414:	d90c      	bls.n	8001430 <main+0x13c>
						{
							dryer.heatTime -= 60U;
 8001416:	4b61      	ldr	r3, [pc, #388]	; (800159c <main+0x2a8>)
 8001418:	885b      	ldrh	r3, [r3, #2]
 800141a:	3b3c      	subs	r3, #60	; 0x3c
 800141c:	b29a      	uxth	r2, r3
 800141e:	4b5f      	ldr	r3, [pc, #380]	; (800159c <main+0x2a8>)
 8001420:	805a      	strh	r2, [r3, #2]
							printf("HeatTime = %d\r\n", dryer.heatTime);
 8001422:	4b5e      	ldr	r3, [pc, #376]	; (800159c <main+0x2a8>)
 8001424:	885b      	ldrh	r3, [r3, #2]
 8001426:	4619      	mov	r1, r3
 8001428:	4867      	ldr	r0, [pc, #412]	; (80015c8 <main+0x2d4>)
 800142a:	f003 fa41 	bl	80048b0 <iprintf>
						else if (dryer.cycle == COOL_CYCLE && dryer.coolTime > 60U)
						{
							dryer.coolTime -= 60U;
							printf("CoolTime = %d\r\n", dryer.coolTime);
						}
						break;
 800142e:	e0ae      	b.n	800158e <main+0x29a>
						else if (dryer.cycle == COOL_CYCLE && dryer.coolTime > 60U)
 8001430:	4b5a      	ldr	r3, [pc, #360]	; (800159c <main+0x2a8>)
 8001432:	7a1b      	ldrb	r3, [r3, #8]
 8001434:	2b01      	cmp	r3, #1
 8001436:	f040 80aa 	bne.w	800158e <main+0x29a>
 800143a:	4b58      	ldr	r3, [pc, #352]	; (800159c <main+0x2a8>)
 800143c:	889b      	ldrh	r3, [r3, #4]
 800143e:	2b3c      	cmp	r3, #60	; 0x3c
 8001440:	f240 80a5 	bls.w	800158e <main+0x29a>
							dryer.coolTime -= 60U;
 8001444:	4b55      	ldr	r3, [pc, #340]	; (800159c <main+0x2a8>)
 8001446:	889b      	ldrh	r3, [r3, #4]
 8001448:	3b3c      	subs	r3, #60	; 0x3c
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <main+0x2a8>)
 800144e:	809a      	strh	r2, [r3, #4]
							printf("CoolTime = %d\r\n", dryer.coolTime);
 8001450:	4b52      	ldr	r3, [pc, #328]	; (800159c <main+0x2a8>)
 8001452:	889b      	ldrh	r3, [r3, #4]
 8001454:	4619      	mov	r1, r3
 8001456:	485d      	ldr	r0, [pc, #372]	; (80015cc <main+0x2d8>)
 8001458:	f003 fa2a 	bl	80048b0 <iprintf>
						break;
 800145c:	e097      	b.n	800158e <main+0x29a>
					case MED_KEY_PRESSED:
						lcd_update_evt = 1U;
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <main+0x2b8>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 8001464:	4b4d      	ldr	r3, [pc, #308]	; (800159c <main+0x2a8>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
						dryer.mode = NO_MODE;
 800146a:	4b4c      	ldr	r3, [pc, #304]	; (800159c <main+0x2a8>)
 800146c:	2200      	movs	r2, #0
 800146e:	705a      	strb	r2, [r3, #1]
						cur_page = INIT_PAGE;
 8001470:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <main+0x2b4>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
						timer_stop_evt = 1U;
 8001476:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <main+0x2bc>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001482:	4853      	ldr	r0, [pc, #332]	; (80015d0 <main+0x2dc>)
 8001484:	f001 fb6f 	bl	8002b66 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	4844      	ldr	r0, [pc, #272]	; (80015a0 <main+0x2ac>)
 8001490:	f001 fb69 	bl	8002b66 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149a:	484e      	ldr	r0, [pc, #312]	; (80015d4 <main+0x2e0>)
 800149c:	f001 fb63 	bl	8002b66 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a6:	484b      	ldr	r0, [pc, #300]	; (80015d4 <main+0x2e0>)
 80014a8:	f001 fb5d 	bl	8002b66 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b2:	4848      	ldr	r0, [pc, #288]	; (80015d4 <main+0x2e0>)
 80014b4:	f001 fb57 	bl	8002b66 <HAL_GPIO_WritePin>
						break;
 80014b8:	e06c      	b.n	8001594 <main+0x2a0>
					case HIGH_KEY_PRESSED:
						lcd_update_evt = 1U;
 80014ba:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <main+0x2b8>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
						if(dryer.cycle == HEAT_CYCLE){
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <main+0x2a8>)
 80014c2:	7a1b      	ldrb	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d136      	bne.n	8001536 <main+0x242>
							if(dryer.mode == LOW_LEVEL){
 80014c8:	4b34      	ldr	r3, [pc, #208]	; (800159c <main+0x2a8>)
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d10b      	bne.n	80014e8 <main+0x1f4>
								if(dryer.heatTime < 1800U){
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <main+0x2a8>)
 80014d2:	885b      	ldrh	r3, [r3, #2]
 80014d4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80014d8:	d226      	bcs.n	8001528 <main+0x234>
									dryer.heatTime += 60U;
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <main+0x2a8>)
 80014dc:	885b      	ldrh	r3, [r3, #2]
 80014de:	333c      	adds	r3, #60	; 0x3c
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <main+0x2a8>)
 80014e4:	805a      	strh	r2, [r3, #2]
 80014e6:	e01f      	b.n	8001528 <main+0x234>
								}
							}
							else if(dryer.mode == MED_LEVEL){
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <main+0x2a8>)
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d10b      	bne.n	8001508 <main+0x214>
								if(dryer.heatTime < 2400U){
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <main+0x2a8>)
 80014f2:	885b      	ldrh	r3, [r3, #2]
 80014f4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80014f8:	d216      	bcs.n	8001528 <main+0x234>
									dryer.heatTime += 60U;
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <main+0x2a8>)
 80014fc:	885b      	ldrh	r3, [r3, #2]
 80014fe:	333c      	adds	r3, #60	; 0x3c
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <main+0x2a8>)
 8001504:	805a      	strh	r2, [r3, #2]
 8001506:	e00f      	b.n	8001528 <main+0x234>
								}
							}
							else if(dryer.mode == HIGH_LEVEL){
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <main+0x2a8>)
 800150a:	785b      	ldrb	r3, [r3, #1]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d10b      	bne.n	8001528 <main+0x234>
								if(dryer.heatTime < 3000U){
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <main+0x2a8>)
 8001512:	885b      	ldrh	r3, [r3, #2]
 8001514:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001518:	4293      	cmp	r3, r2
 800151a:	d805      	bhi.n	8001528 <main+0x234>
									dryer.heatTime += 60U;
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <main+0x2a8>)
 800151e:	885b      	ldrh	r3, [r3, #2]
 8001520:	333c      	adds	r3, #60	; 0x3c
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <main+0x2a8>)
 8001526:	805a      	strh	r2, [r3, #2]
								}
							}
							printf("HeatTime = %d\r\n", dryer.heatTime);
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <main+0x2a8>)
 800152a:	885b      	ldrh	r3, [r3, #2]
 800152c:	4619      	mov	r1, r3
 800152e:	4826      	ldr	r0, [pc, #152]	; (80015c8 <main+0x2d4>)
 8001530:	f003 f9be 	bl	80048b0 <iprintf>
						} else if (dryer.cycle == COOL_CYCLE) {
								if (dryer.coolTime < 900U)
									dryer.coolTime += 60U;
								printf("CoolTime = %d\r\n", dryer.coolTime);
							}
						break;
 8001534:	e02d      	b.n	8001592 <main+0x29e>
						} else if (dryer.cycle == COOL_CYCLE) {
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <main+0x2a8>)
 8001538:	7a1b      	ldrb	r3, [r3, #8]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d129      	bne.n	8001592 <main+0x29e>
								if (dryer.coolTime < 900U)
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <main+0x2a8>)
 8001540:	889b      	ldrh	r3, [r3, #4]
 8001542:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001546:	d205      	bcs.n	8001554 <main+0x260>
									dryer.coolTime += 60U;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <main+0x2a8>)
 800154a:	889b      	ldrh	r3, [r3, #4]
 800154c:	333c      	adds	r3, #60	; 0x3c
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <main+0x2a8>)
 8001552:	809a      	strh	r2, [r3, #4]
								printf("CoolTime = %d\r\n", dryer.coolTime);
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <main+0x2a8>)
 8001556:	889b      	ldrh	r3, [r3, #4]
 8001558:	4619      	mov	r1, r3
 800155a:	481c      	ldr	r0, [pc, #112]	; (80015cc <main+0x2d8>)
 800155c:	f003 f9a8 	bl	80048b0 <iprintf>
						break;
 8001560:	e017      	b.n	8001592 <main+0x29e>
					case FN_KEY_PRESSED:
						lcd_update_evt = 1U;
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <main+0x2b8>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
						dryer.heatTime = 0U;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <main+0x2a8>)
 800156a:	2200      	movs	r2, #0
 800156c:	805a      	strh	r2, [r3, #2]
						dryer.cycle = COOL_CYCLE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <main+0x2a8>)
 8001570:	2201      	movs	r2, #1
 8001572:	721a      	strb	r2, [r3, #8]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <main+0x2a8>)
 8001576:	885b      	ldrh	r3, [r3, #2]
 8001578:	4619      	mov	r1, r3
 800157a:	4813      	ldr	r0, [pc, #76]	; (80015c8 <main+0x2d4>)
 800157c:	f003 f998 	bl	80048b0 <iprintf>
						printf("CoolTime = %d\r\n", dryer.coolTime);
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <main+0x2a8>)
 8001582:	889b      	ldrh	r3, [r3, #4]
 8001584:	4619      	mov	r1, r3
 8001586:	4811      	ldr	r0, [pc, #68]	; (80015cc <main+0x2d8>)
 8001588:	f003 f992 	bl	80048b0 <iprintf>
						break;
 800158c:	e002      	b.n	8001594 <main+0x2a0>
						break;
 800158e:	bf00      	nop
 8001590:	e000      	b.n	8001594 <main+0x2a0>
						break;
 8001592:	bf00      	nop
				}
				scaned_key = NO_KEY_PRESSED;
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <main+0x2d0>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e105      	b.n	80017a8 <main+0x4b4>
 800159c:	20000134 	.word	0x20000134
 80015a0:	40010800 	.word	0x40010800
 80015a4:	2000013e 	.word	0x2000013e
 80015a8:	2000014b 	.word	0x2000014b
 80015ac:	20000142 	.word	0x20000142
 80015b0:	20000140 	.word	0x20000140
 80015b4:	200001ac 	.word	0x200001ac
 80015b8:	20000141 	.word	0x20000141
 80015bc:	20000145 	.word	0x20000145
 80015c0:	20000144 	.word	0x20000144
 80015c4:	2000014a 	.word	0x2000014a
 80015c8:	08005df8 	.word	0x08005df8
 80015cc:	08005e08 	.word	0x08005e08
 80015d0:	40011000 	.word	0x40011000
 80015d4:	40010c00 	.word	0x40010c00
			} else if (dryer.state == INIT) {
 80015d8:	4bae      	ldr	r3, [pc, #696]	; (8001894 <main+0x5a0>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 80ab 	bne.w	8001738 <main+0x444>

				switch (scaned_key) {
 80015e2:	4bad      	ldr	r3, [pc, #692]	; (8001898 <main+0x5a4>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	f200 80a2 	bhi.w	8001730 <main+0x43c>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <main+0x300>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	08001731 	.word	0x08001731
 80015f8:	08001605 	.word	0x08001605
 80015fc:	08001669 	.word	0x08001669
 8001600:	080016cd 	.word	0x080016cd
					case NO_KEY_PRESSED:
						break;
					
					case LOW_KEY_PRESSED:
						dryer.state = START;
 8001604:	4ba3      	ldr	r3, [pc, #652]	; (8001894 <main+0x5a0>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
						dryer.mode = LOW_LEVEL;
 800160a:	4ba2      	ldr	r3, [pc, #648]	; (8001894 <main+0x5a0>)
 800160c:	2201      	movs	r2, #1
 800160e:	705a      	strb	r2, [r3, #1]
						dryer.heatTime = val_arr[0];
 8001610:	4ba2      	ldr	r3, [pc, #648]	; (800189c <main+0x5a8>)
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	4b9f      	ldr	r3, [pc, #636]	; (8001894 <main+0x5a0>)
 8001616:	805a      	strh	r2, [r3, #2]
						dryer.coolTime = val_arr[1];
 8001618:	4ba0      	ldr	r3, [pc, #640]	; (800189c <main+0x5a8>)
 800161a:	885a      	ldrh	r2, [r3, #2]
 800161c:	4b9d      	ldr	r3, [pc, #628]	; (8001894 <main+0x5a0>)
 800161e:	809a      	strh	r2, [r3, #4]
						dryer.setTemp = val_arr[2];
 8001620:	4b9e      	ldr	r3, [pc, #632]	; (800189c <main+0x5a8>)
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b9b      	ldr	r3, [pc, #620]	; (8001894 <main+0x5a0>)
 8001628:	719a      	strb	r2, [r3, #6]
						dryer.beepTime = 30U;
 800162a:	4b9a      	ldr	r3, [pc, #616]	; (8001894 <main+0x5a0>)
 800162c:	221e      	movs	r2, #30
 800162e:	71da      	strb	r2, [r3, #7]
						dryer.cycle = HEAT_CYCLE;
 8001630:	4b98      	ldr	r3, [pc, #608]	; (8001894 <main+0x5a0>)
 8001632:	2200      	movs	r2, #0
 8001634:	721a      	strb	r2, [r3, #8]
						rot_left_cunt = 30U;
 8001636:	4b9a      	ldr	r3, [pc, #616]	; (80018a0 <main+0x5ac>)
 8001638:	221e      	movs	r2, #30
 800163a:	701a      	strb	r2, [r3, #0]
						rot_right_cunt = 0U;
 800163c:	4b99      	ldr	r3, [pc, #612]	; (80018a4 <main+0x5b0>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
						pasue_cunt = 0U;
 8001642:	4b99      	ldr	r3, [pc, #612]	; (80018a8 <main+0x5b4>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001648:	4b98      	ldr	r3, [pc, #608]	; (80018ac <main+0x5b8>)
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
						cur_page = LOW_LEVEL_PAGE;
 800164e:	4b98      	ldr	r3, [pc, #608]	; (80018b0 <main+0x5bc>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
						lcd_update_evt = 1U;
 8001654:	4b97      	ldr	r3, [pc, #604]	; (80018b4 <main+0x5c0>)
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
						op_update_evt = 1U;
 800165a:	4b97      	ldr	r3, [pc, #604]	; (80018b8 <main+0x5c4>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
						printf("LOW LEVEL\r\n");
 8001660:	4896      	ldr	r0, [pc, #600]	; (80018bc <main+0x5c8>)
 8001662:	f003 f9ab 	bl	80049bc <puts>
						break;
 8001666:	e063      	b.n	8001730 <main+0x43c>

					case MED_KEY_PRESSED:
						dryer.state = START;
 8001668:	4b8a      	ldr	r3, [pc, #552]	; (8001894 <main+0x5a0>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
						dryer.mode = MED_LEVEL;
 800166e:	4b89      	ldr	r3, [pc, #548]	; (8001894 <main+0x5a0>)
 8001670:	2202      	movs	r2, #2
 8001672:	705a      	strb	r2, [r3, #1]
						dryer.heatTime = val_arr[3];
 8001674:	4b89      	ldr	r3, [pc, #548]	; (800189c <main+0x5a8>)
 8001676:	88da      	ldrh	r2, [r3, #6]
 8001678:	4b86      	ldr	r3, [pc, #536]	; (8001894 <main+0x5a0>)
 800167a:	805a      	strh	r2, [r3, #2]
						dryer.coolTime = val_arr[4];
 800167c:	4b87      	ldr	r3, [pc, #540]	; (800189c <main+0x5a8>)
 800167e:	891a      	ldrh	r2, [r3, #8]
 8001680:	4b84      	ldr	r3, [pc, #528]	; (8001894 <main+0x5a0>)
 8001682:	809a      	strh	r2, [r3, #4]
						dryer.setTemp = val_arr[5];
 8001684:	4b85      	ldr	r3, [pc, #532]	; (800189c <main+0x5a8>)
 8001686:	895b      	ldrh	r3, [r3, #10]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b82      	ldr	r3, [pc, #520]	; (8001894 <main+0x5a0>)
 800168c:	719a      	strb	r2, [r3, #6]
						dryer.beepTime = 30U;
 800168e:	4b81      	ldr	r3, [pc, #516]	; (8001894 <main+0x5a0>)
 8001690:	221e      	movs	r2, #30
 8001692:	71da      	strb	r2, [r3, #7]
						dryer.cycle = HEAT_CYCLE;
 8001694:	4b7f      	ldr	r3, [pc, #508]	; (8001894 <main+0x5a0>)
 8001696:	2200      	movs	r2, #0
 8001698:	721a      	strb	r2, [r3, #8]
						rot_left_cunt = 30U;
 800169a:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <main+0x5ac>)
 800169c:	221e      	movs	r2, #30
 800169e:	701a      	strb	r2, [r3, #0]
						rot_right_cunt = 0U;
 80016a0:	4b80      	ldr	r3, [pc, #512]	; (80018a4 <main+0x5b0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
						pasue_cunt = 0U;
 80016a6:	4b80      	ldr	r3, [pc, #512]	; (80018a8 <main+0x5b4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 80016ac:	4b7f      	ldr	r3, [pc, #508]	; (80018ac <main+0x5b8>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
						cur_page = MED_LEVEL_PAGE;
 80016b2:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <main+0x5bc>)
 80016b4:	2202      	movs	r2, #2
 80016b6:	701a      	strb	r2, [r3, #0]
						lcd_update_evt = 1U;
 80016b8:	4b7e      	ldr	r3, [pc, #504]	; (80018b4 <main+0x5c0>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
						op_update_evt = 1U;
 80016be:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <main+0x5c4>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
						printf("MED_LEVEL\r\n");
 80016c4:	487e      	ldr	r0, [pc, #504]	; (80018c0 <main+0x5cc>)
 80016c6:	f003 f979 	bl	80049bc <puts>
						break;
 80016ca:	e031      	b.n	8001730 <main+0x43c>

					case HIGH_KEY_PRESSED:
						dryer.state = START;
 80016cc:	4b71      	ldr	r3, [pc, #452]	; (8001894 <main+0x5a0>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
						dryer.mode = HIGH_LEVEL;
 80016d2:	4b70      	ldr	r3, [pc, #448]	; (8001894 <main+0x5a0>)
 80016d4:	2203      	movs	r2, #3
 80016d6:	705a      	strb	r2, [r3, #1]
						dryer.heatTime = val_arr[6];
 80016d8:	4b70      	ldr	r3, [pc, #448]	; (800189c <main+0x5a8>)
 80016da:	899a      	ldrh	r2, [r3, #12]
 80016dc:	4b6d      	ldr	r3, [pc, #436]	; (8001894 <main+0x5a0>)
 80016de:	805a      	strh	r2, [r3, #2]
						dryer.coolTime = val_arr[7];
 80016e0:	4b6e      	ldr	r3, [pc, #440]	; (800189c <main+0x5a8>)
 80016e2:	89da      	ldrh	r2, [r3, #14]
 80016e4:	4b6b      	ldr	r3, [pc, #428]	; (8001894 <main+0x5a0>)
 80016e6:	809a      	strh	r2, [r3, #4]
						dryer.setTemp = val_arr[8];
 80016e8:	4b6c      	ldr	r3, [pc, #432]	; (800189c <main+0x5a8>)
 80016ea:	8a1b      	ldrh	r3, [r3, #16]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b69      	ldr	r3, [pc, #420]	; (8001894 <main+0x5a0>)
 80016f0:	719a      	strb	r2, [r3, #6]
						dryer.beepTime = 30U;
 80016f2:	4b68      	ldr	r3, [pc, #416]	; (8001894 <main+0x5a0>)
 80016f4:	221e      	movs	r2, #30
 80016f6:	71da      	strb	r2, [r3, #7]
						dryer.cycle = HEAT_CYCLE;
 80016f8:	4b66      	ldr	r3, [pc, #408]	; (8001894 <main+0x5a0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	721a      	strb	r2, [r3, #8]
						rot_left_cunt = 30U;
 80016fe:	4b68      	ldr	r3, [pc, #416]	; (80018a0 <main+0x5ac>)
 8001700:	221e      	movs	r2, #30
 8001702:	701a      	strb	r2, [r3, #0]
						rot_right_cunt = 0U;
 8001704:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <main+0x5b0>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
						pasue_cunt = 0U;
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <main+0x5b4>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001710:	4b66      	ldr	r3, [pc, #408]	; (80018ac <main+0x5b8>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
						cur_page = HIGH_LEVEL_PAGE;
 8001716:	4b66      	ldr	r3, [pc, #408]	; (80018b0 <main+0x5bc>)
 8001718:	2203      	movs	r2, #3
 800171a:	701a      	strb	r2, [r3, #0]
						lcd_update_evt = 1U;
 800171c:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <main+0x5c0>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
						op_update_evt = 1U;
 8001722:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <main+0x5c4>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
						printf("HIGH_LEVEL\r\n");
 8001728:	4866      	ldr	r0, [pc, #408]	; (80018c4 <main+0x5d0>)
 800172a:	f003 f947 	bl	80049bc <puts>
						break;
 800172e:	bf00      	nop
				}
				scaned_key = NO_KEY_PRESSED;
 8001730:	4b59      	ldr	r3, [pc, #356]	; (8001898 <main+0x5a4>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
 8001736:	e037      	b.n	80017a8 <main+0x4b4>
			}else if(dryer.state == COMPLETE){
 8001738:	4b56      	ldr	r3, [pc, #344]	; (8001894 <main+0x5a0>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d133      	bne.n	80017a8 <main+0x4b4>
				if(scaned_key == MED_KEY_PRESSED){
 8001740:	4b55      	ldr	r3, [pc, #340]	; (8001898 <main+0x5a4>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d12c      	bne.n	80017a2 <main+0x4ae>
					lcd_update_evt = 1U;
 8001748:	4b5a      	ldr	r3, [pc, #360]	; (80018b4 <main+0x5c0>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 800174e:	4b51      	ldr	r3, [pc, #324]	; (8001894 <main+0x5a0>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001754:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <main+0x5a0>)
 8001756:	2200      	movs	r2, #0
 8001758:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 800175a:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <main+0x5bc>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8001760:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <main+0x5d4>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800176c:	4857      	ldr	r0, [pc, #348]	; (80018cc <main+0x5d8>)
 800176e:	f001 f9fa 	bl	8002b66 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	4855      	ldr	r0, [pc, #340]	; (80018d0 <main+0x5dc>)
 800177a:	f001 f9f4 	bl	8002b66 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001784:	4853      	ldr	r0, [pc, #332]	; (80018d4 <main+0x5e0>)
 8001786:	f001 f9ee 	bl	8002b66 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001790:	4850      	ldr	r0, [pc, #320]	; (80018d4 <main+0x5e0>)
 8001792:	f001 f9e8 	bl	8002b66 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179c:	484d      	ldr	r0, [pc, #308]	; (80018d4 <main+0x5e0>)
 800179e:	f001 f9e2 	bl	8002b66 <HAL_GPIO_WritePin>
				}
				scaned_key = NO_KEY_PRESSED;
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <main+0x5a4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
			}
		}

		if (door_open_evt) {
 80017a8:	4b4b      	ldr	r3, [pc, #300]	; (80018d8 <main+0x5e4>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80bb 	beq.w	8001928 <main+0x634>
			static volatile uint8_t temp_pin_state = 0U;

			temp_pin_state = HAL_GPIO_ReadPin(DOOR_SW_GPIO_Port, DOOR_SW_Pin);
 80017b2:	2101      	movs	r1, #1
 80017b4:	4846      	ldr	r0, [pc, #280]	; (80018d0 <main+0x5dc>)
 80017b6:	f001 f9bf 	bl	8002b38 <HAL_GPIO_ReadPin>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <main+0x5e8>)
 80017c0:	701a      	strb	r2, [r3, #0]
			//printf("Pin: %d\r\n",temp_pin_state);

			if (temp_pin_state == HIGH) {
 80017c2:	4b46      	ldr	r3, [pc, #280]	; (80018dc <main+0x5e8>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d13d      	bne.n	8001848 <main+0x554>

				if (dryer.state == COMPLETE) {
 80017cc:	4b31      	ldr	r3, [pc, #196]	; (8001894 <main+0x5a0>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d10b      	bne.n	80017ec <main+0x4f8>
					timer_stop_evt = 1U;
 80017d4:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <main+0x5d4>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
					dryer.beepTime = 0U;
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <main+0x5a0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	71da      	strb	r2, [r3, #7]
					dryer.state = INIT;
 80017e0:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <main+0x5a0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <main+0x5a0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	705a      	strb	r2, [r3, #1]
				}

				door_open_flag = 1U;
 80017ec:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <main+0x5ec>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 80017f2:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <main+0x5d4>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
				cur_page = DOOR_OPEN_PAGE;
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <main+0x5bc>)
 80017fa:	2205      	movs	r2, #5
 80017fc:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <main+0x5c0>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <main+0x5a0>)
 8001806:	2203      	movs	r2, #3
 8001808:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001810:	482e      	ldr	r0, [pc, #184]	; (80018cc <main+0x5d8>)
 8001812:	f001 f9a8 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181c:	482c      	ldr	r0, [pc, #176]	; (80018d0 <main+0x5dc>)
 800181e:	f001 f9a2 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001828:	482a      	ldr	r0, [pc, #168]	; (80018d4 <main+0x5e0>)
 800182a:	f001 f99c 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001834:	4827      	ldr	r0, [pc, #156]	; (80018d4 <main+0x5e0>)
 8001836:	f001 f996 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001840:	4824      	ldr	r0, [pc, #144]	; (80018d4 <main+0x5e0>)
 8001842:	f001 f990 	bl	8002b66 <HAL_GPIO_WritePin>
 8001846:	e06c      	b.n	8001922 <main+0x62e>

				
			} else {
				if (!limit_timeout_flag) {
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <main+0x5f0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d15f      	bne.n	8001910 <main+0x61c>
					switch (dryer.mode) {
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <main+0x5a0>)
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d85e      	bhi.n	8001916 <main+0x622>
 8001858:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <main+0x56c>)
 800185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185e:	bf00      	nop
 8001860:	08001871 	.word	0x08001871
 8001864:	0800187f 	.word	0x0800187f
 8001868:	080018e9 	.word	0x080018e9
 800186c:	080018fd 	.word	0x080018fd
					case NO_MODE:
						cur_page = INIT_PAGE;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <main+0x5bc>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <main+0x5a0>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
						break;
 800187c:	e04b      	b.n	8001916 <main+0x622>
					case LOW_LEVEL:
						cur_page = LOW_LEVEL_PAGE;
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <main+0x5bc>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <main+0x5a0>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <main+0x5b8>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
						break;
 8001890:	e041      	b.n	8001916 <main+0x622>
 8001892:	bf00      	nop
 8001894:	20000134 	.word	0x20000134
 8001898:	2000014a 	.word	0x2000014a
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000013 	.word	0x20000013
 80018a4:	20000146 	.word	0x20000146
 80018a8:	20000147 	.word	0x20000147
 80018ac:	20000141 	.word	0x20000141
 80018b0:	2000014b 	.word	0x2000014b
 80018b4:	20000142 	.word	0x20000142
 80018b8:	20000143 	.word	0x20000143
 80018bc:	08005e18 	.word	0x08005e18
 80018c0:	08005e24 	.word	0x08005e24
 80018c4:	08005e30 	.word	0x08005e30
 80018c8:	20000140 	.word	0x20000140
 80018cc:	40011000 	.word	0x40011000
 80018d0:	40010800 	.word	0x40010800
 80018d4:	40010c00 	.word	0x40010c00
 80018d8:	2000013f 	.word	0x2000013f
 80018dc:	2000014d 	.word	0x2000014d
 80018e0:	2000013e 	.word	0x2000013e
 80018e4:	20000144 	.word	0x20000144
					case MED_LEVEL:
						cur_page = MED_LEVEL_PAGE;
 80018e8:	4ba5      	ldr	r3, [pc, #660]	; (8001b80 <main+0x88c>)
 80018ea:	2202      	movs	r2, #2
 80018ec:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 80018ee:	4ba5      	ldr	r3, [pc, #660]	; (8001b84 <main+0x890>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 80018f4:	4ba4      	ldr	r3, [pc, #656]	; (8001b88 <main+0x894>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
						break;
 80018fa:	e00c      	b.n	8001916 <main+0x622>
					case HIGH_LEVEL:
						cur_page = HIGH_LEVEL_PAGE;
 80018fc:	4ba0      	ldr	r3, [pc, #640]	; (8001b80 <main+0x88c>)
 80018fe:	2203      	movs	r2, #3
 8001900:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001902:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <main+0x890>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001908:	4b9f      	ldr	r3, [pc, #636]	; (8001b88 <main+0x894>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
						break;
 800190e:	e002      	b.n	8001916 <main+0x622>
					}
				} else
					cur_page = LIMIT_SW_ERR_PAGE;
 8001910:	4b9b      	ldr	r3, [pc, #620]	; (8001b80 <main+0x88c>)
 8001912:	2206      	movs	r2, #6
 8001914:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 8001916:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <main+0x898>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
				door_open_flag = 0U;
 800191c:	4b9c      	ldr	r3, [pc, #624]	; (8001b90 <main+0x89c>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
			}
			door_open_evt = 0U;
 8001922:	4b9c      	ldr	r3, [pc, #624]	; (8001b94 <main+0x8a0>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
		}

		/*************************************************************************************************************
		 *************************************************HERTER COIL CHECK*******************************************
		 *************************************************************************************************************/
		if (!door_open_flag && !limit_timeout_flag && dryer.state != COMPLETE) {
 8001928:	4b99      	ldr	r3, [pc, #612]	; (8001b90 <main+0x89c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d179      	bne.n	8001a24 <main+0x730>
 8001930:	4b99      	ldr	r3, [pc, #612]	; (8001b98 <main+0x8a4>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d175      	bne.n	8001a24 <main+0x730>
 8001938:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <main+0x890>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d071      	beq.n	8001a24 <main+0x730>

			if (is_coil_open()) {
 8001940:	f7fe ff26 	bl	8000790 <is_coil_open>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d02d      	beq.n	80019a6 <main+0x6b2>

				coil_open_flag = 1U;
 800194a:	4b94      	ldr	r3, [pc, #592]	; (8001b9c <main+0x8a8>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001950:	4b93      	ldr	r3, [pc, #588]	; (8001ba0 <main+0x8ac>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
				cur_page = HEATER_COIL_PAGE;
 8001956:	4b8a      	ldr	r3, [pc, #552]	; (8001b80 <main+0x88c>)
 8001958:	2207      	movs	r2, #7
 800195a:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 800195c:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <main+0x898>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <main+0x890>)
 8001964:	2203      	movs	r2, #3
 8001966:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	488d      	ldr	r0, [pc, #564]	; (8001ba4 <main+0x8b0>)
 8001970:	f001 f8f9 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800197a:	488b      	ldr	r0, [pc, #556]	; (8001ba8 <main+0x8b4>)
 800197c:	f001 f8f3 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001986:	4889      	ldr	r0, [pc, #548]	; (8001bac <main+0x8b8>)
 8001988:	f001 f8ed 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001992:	4886      	ldr	r0, [pc, #536]	; (8001bac <main+0x8b8>)
 8001994:	f001 f8e7 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199e:	4883      	ldr	r0, [pc, #524]	; (8001bac <main+0x8b8>)
 80019a0:	f001 f8e1 	bl	8002b66 <HAL_GPIO_WritePin>
 80019a4:	e03e      	b.n	8001a24 <main+0x730>

			} else {
				coil_open_flag = 0U;
 80019a6:	4b7d      	ldr	r3, [pc, #500]	; (8001b9c <main+0x8a8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
				if(dryer.state == STOP){
 80019ac:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <main+0x890>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d137      	bne.n	8001a24 <main+0x730>
					switch (dryer.mode) {
 80019b4:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <main+0x890>)
 80019b6:	785b      	ldrb	r3, [r3, #1]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d830      	bhi.n	8001a1e <main+0x72a>
 80019bc:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <main+0x6d0>)
 80019be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c2:	bf00      	nop
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019e3 	.word	0x080019e3
 80019cc:	080019f7 	.word	0x080019f7
 80019d0:	08001a0b 	.word	0x08001a0b
					case NO_MODE:
						cur_page = INIT_PAGE;
 80019d4:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <main+0x88c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <main+0x890>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
						break;
 80019e0:	e01d      	b.n	8001a1e <main+0x72a>
					case LOW_LEVEL:
						cur_page = LOW_LEVEL_PAGE;
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <main+0x88c>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 80019e8:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <main+0x890>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 80019ee:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <main+0x894>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
						break;
 80019f4:	e013      	b.n	8001a1e <main+0x72a>
					case MED_LEVEL:
						cur_page = MED_LEVEL_PAGE;
 80019f6:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <main+0x88c>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 80019fc:	4b61      	ldr	r3, [pc, #388]	; (8001b84 <main+0x890>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001a02:	4b61      	ldr	r3, [pc, #388]	; (8001b88 <main+0x894>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
						break;
 8001a08:	e009      	b.n	8001a1e <main+0x72a>
					case HIGH_LEVEL:
						cur_page = HIGH_LEVEL_PAGE;
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <main+0x88c>)
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8001a10:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <main+0x890>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8001a16:	4b5c      	ldr	r3, [pc, #368]	; (8001b88 <main+0x894>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
						break;
 8001a1c:	bf00      	nop
					}
					lcd_update_evt = 1U;
 8001a1e:	4b5b      	ldr	r3, [pc, #364]	; (8001b8c <main+0x898>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* LIMIT SWITCH ERROR RUTINE ************************************************
		 ***************************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 8001a24:	4b5a      	ldr	r3, [pc, #360]	; (8001b90 <main+0x89c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d140      	bne.n	8001aae <main+0x7ba>
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <main+0x8a8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d13c      	bne.n	8001aae <main+0x7ba>
 8001a34:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <main+0x8a4>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d138      	bne.n	8001aae <main+0x7ba>
			if (dryer.state == START && limit_timeout == 0U) {
 8001a3c:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <main+0x890>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d15a      	bne.n	8001afa <main+0x806>
 8001a44:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <main+0x8bc>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d156      	bne.n	8001afa <main+0x806>
				limit_timeout_flag = 1U;
 8001a4c:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <main+0x8a4>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 8001a52:	4b4e      	ldr	r3, [pc, #312]	; (8001b8c <main+0x898>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8001a58:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <main+0x8ac>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]

				dryer.state = STOP;
 8001a5e:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <main+0x890>)
 8001a60:	2203      	movs	r2, #3
 8001a62:	701a      	strb	r2, [r3, #0]
				dryer.mode = NO_MODE;
 8001a64:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <main+0x890>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	705a      	strb	r2, [r3, #1]
				cur_page = LIMIT_SW_ERR_PAGE;
 8001a6a:	4b45      	ldr	r3, [pc, #276]	; (8001b80 <main+0x88c>)
 8001a6c:	2206      	movs	r2, #6
 8001a6e:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a76:	484b      	ldr	r0, [pc, #300]	; (8001ba4 <main+0x8b0>)
 8001a78:	f001 f875 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a82:	4849      	ldr	r0, [pc, #292]	; (8001ba8 <main+0x8b4>)
 8001a84:	f001 f86f 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a8e:	4847      	ldr	r0, [pc, #284]	; (8001bac <main+0x8b8>)
 8001a90:	f001 f869 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9a:	4844      	ldr	r0, [pc, #272]	; (8001bac <main+0x8b8>)
 8001a9c:	f001 f863 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa6:	4841      	ldr	r0, [pc, #260]	; (8001bac <main+0x8b8>)
 8001aa8:	f001 f85d 	bl	8002b66 <HAL_GPIO_WritePin>
			if (dryer.state == START && limit_timeout == 0U) {
 8001aac:	e025      	b.n	8001afa <main+0x806>
			}
		} else if (!door_open_flag && !coil_open_flag && limit_timeout_flag) {
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <main+0x89c>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d122      	bne.n	8001afc <main+0x808>
 8001ab6:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <main+0x8a8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d11e      	bne.n	8001afc <main+0x808>
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <main+0x8a4>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d01a      	beq.n	8001afc <main+0x808>
			scaned_key = scan_keypad();
 8001ac6:	f7fe feb3 	bl	8000830 <scan_keypad>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <main+0x8c0>)
 8001ad0:	701a      	strb	r2, [r3, #0]
			if (scaned_key == MED_KEY_PRESSED) {
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <main+0x8c0>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d110      	bne.n	8001afc <main+0x808>
				dryer.state = INIT;
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <main+0x890>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
				cur_page = INIT_PAGE;
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <main+0x88c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
				limit_timeout = 30U;
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <main+0x8bc>)
 8001ae8:	221e      	movs	r2, #30
 8001aea:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <main+0x898>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
				limit_timeout_flag = 0U;
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <main+0x8a4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e000      	b.n	8001afc <main+0x808>
			if (dryer.state == START && limit_timeout == 0U) {
 8001afa:	bf00      	nop
		 * @COMPLETE STATE
		 * 		->TURNS OFF FAN, DRUM MOTORS, HEATER
		 * 		->TRUNS ON/OFF BEEP EVERY 3s FOR 30s
		 * 		->WATCHS DOOR OPEN
		 **********************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag && op_update_evt) {
 8001afc:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <main+0x89c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f47f ac2e 	bne.w	8001362 <main+0x6e>
 8001b06:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <main+0x8a8>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f47f ac29 	bne.w	8001362 <main+0x6e>
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <main+0x8a4>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f ac24 	bne.w	8001362 <main+0x6e>
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <main+0x8c4>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f43f ac1f 	beq.w	8001362 <main+0x6e>

			if (dryer.state == START) {
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <main+0x890>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	f040 80a9 	bne.w	8001c80 <main+0x98c>

				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, HIGH);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b34:	481c      	ldr	r0, [pc, #112]	; (8001ba8 <main+0x8b4>)
 8001b36:	f001 f816 	bl	8002b66 <HAL_GPIO_WritePin>
//				 	printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
//				 	otp = 0;
//				 }

				//start Flip Flop
				if (pasue_cunt > 0) {
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <main+0x8c8>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <main+0x868>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b48:	4818      	ldr	r0, [pc, #96]	; (8001bac <main+0x8b8>)
 8001b4a:	f001 f80c 	bl	8002b66 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b54:	4815      	ldr	r0, [pc, #84]	; (8001bac <main+0x8b8>)
 8001b56:	f001 f806 	bl	8002b66 <HAL_GPIO_WritePin>
 8001b5a:	e043      	b.n	8001be4 <main+0x8f0>
				} else if (rot_left_cunt > 0) {
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <main+0x8cc>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d02f      	beq.n	8001bc4 <main+0x8d0>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, HIGH);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6a:	4810      	ldr	r0, [pc, #64]	; (8001bac <main+0x8b8>)
 8001b6c:	f000 fffb 	bl	8002b66 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b76:	480d      	ldr	r0, [pc, #52]	; (8001bac <main+0x8b8>)
 8001b78:	f000 fff5 	bl	8002b66 <HAL_GPIO_WritePin>
 8001b7c:	e032      	b.n	8001be4 <main+0x8f0>
 8001b7e:	bf00      	nop
 8001b80:	2000014b 	.word	0x2000014b
 8001b84:	20000134 	.word	0x20000134
 8001b88:	20000141 	.word	0x20000141
 8001b8c:	20000142 	.word	0x20000142
 8001b90:	2000013e 	.word	0x2000013e
 8001b94:	2000013f 	.word	0x2000013f
 8001b98:	20000144 	.word	0x20000144
 8001b9c:	20000145 	.word	0x20000145
 8001ba0:	20000140 	.word	0x20000140
 8001ba4:	40011000 	.word	0x40011000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	20000012 	.word	0x20000012
 8001bb4:	2000014a 	.word	0x2000014a
 8001bb8:	20000143 	.word	0x20000143
 8001bbc:	20000147 	.word	0x20000147
 8001bc0:	20000013 	.word	0x20000013
				} else if (rot_right_cunt > 0) {
 8001bc4:	4b5f      	ldr	r3, [pc, #380]	; (8001d44 <main+0xa50>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <main+0x8f0>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd2:	485d      	ldr	r0, [pc, #372]	; (8001d48 <main+0xa54>)
 8001bd4:	f000 ffc7 	bl	8002b66 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, HIGH);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bde:	485a      	ldr	r0, [pc, #360]	; (8001d48 <main+0xa54>)
 8001be0:	f000 ffc1 	bl	8002b66 <HAL_GPIO_WritePin>
				}

				cur_temp = (int) Max6675_Read_Temp();//takes time
 8001be4:	f7fe fc9a 	bl	800051c <Max6675_Read_Temp>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc70 	bl	80004d0 <__aeabi_f2iz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <main+0xa58>)
 8001bf4:	6013      	str	r3, [r2, #0]
				//Maintain Heater
				if (dryer.cycle == HEAT_CYCLE && !limit_sw_open()) {
 8001bf6:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <main+0xa5c>)
 8001bf8:	7a1b      	ldrb	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d139      	bne.n	8001c72 <main+0x97e>
 8001bfe:	f7fe fdef 	bl	80007e0 <limit_sw_open>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d134      	bne.n	8001c72 <main+0x97e>
					if (cur_temp == -1 || cur_temp == 0) {
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <main+0xa58>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d003      	beq.n	8001c1a <main+0x926>
 8001c12:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <main+0xa58>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <main+0x934>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c20:	4849      	ldr	r0, [pc, #292]	; (8001d48 <main+0xa54>)
 8001c22:	f000 ffa0 	bl	8002b66 <HAL_GPIO_WritePin>
 8001c26:	e023      	b.n	8001c70 <main+0x97c>
					} else if ((cur_temp > (dryer.setTemp + 2))
 8001c28:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <main+0xa5c>)
 8001c2a:	799b      	ldrb	r3, [r3, #6]
 8001c2c:	1c9a      	adds	r2, r3, #2
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <main+0xa58>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	db03      	blt.n	8001c3e <main+0x94a>
							|| (cur_temp <= 0)) {
 8001c36:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <main+0xa58>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	dc06      	bgt.n	8001c4c <main+0x958>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c44:	4840      	ldr	r0, [pc, #256]	; (8001d48 <main+0xa54>)
 8001c46:	f000 ff8e 	bl	8002b66 <HAL_GPIO_WritePin>
 8001c4a:	e011      	b.n	8001c70 <main+0x97c>
					} else if ((cur_temp < (dryer.setTemp - 5))
 8001c4c:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <main+0xa5c>)
 8001c4e:	799b      	ldrb	r3, [r3, #6]
 8001c50:	1f5a      	subs	r2, r3, #5
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <main+0xa58>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dd6d      	ble.n	8001d36 <main+0xa42>
							&& (cur_temp > 0)) {
 8001c5a:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <main+0xa58>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	dd69      	ble.n	8001d36 <main+0xa42>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, HIGH);
 8001c62:	2201      	movs	r2, #1
 8001c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c68:	4837      	ldr	r0, [pc, #220]	; (8001d48 <main+0xa54>)
 8001c6a:	f000 ff7c 	bl	8002b66 <HAL_GPIO_WritePin>
					if (cur_temp == -1 || cur_temp == 0) {
 8001c6e:	e062      	b.n	8001d36 <main+0xa42>
 8001c70:	e061      	b.n	8001d36 <main+0xa42>
					}
				} else {
					HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001c72:	2200      	movs	r2, #0
 8001c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c78:	4833      	ldr	r0, [pc, #204]	; (8001d48 <main+0xa54>)
 8001c7a:	f000 ff74 	bl	8002b66 <HAL_GPIO_WritePin>
 8001c7e:	e05b      	b.n	8001d38 <main+0xa44>
				}
			} else if (dryer.state == COMPLETE) {
 8001c80:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <main+0xa5c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d137      	bne.n	8001cf8 <main+0xa04>

				if (dryer.beepTime == 0) {
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <main+0xa5c>)
 8001c8a:	79db      	ldrb	r3, [r3, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d115      	bne.n	8001cbc <main+0x9c8>
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c96:	482f      	ldr	r0, [pc, #188]	; (8001d54 <main+0xa60>)
 8001c98:	f000 ff65 	bl	8002b66 <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <main+0xa64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
					lcd_update_evt = 1U;
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <main+0xa68>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <main+0xa6c>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8001cae:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <main+0xa5c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <main+0xa5c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	705a      	strb	r2, [r3, #1]
 8001cba:	e004      	b.n	8001cc6 <main+0x9d2>
				}else{
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc0:	4824      	ldr	r0, [pc, #144]	; (8001d54 <main+0xa60>)
 8001cc2:	f000 ff68 	bl	8002b96 <HAL_GPIO_TogglePin>
				}
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ccc:	4825      	ldr	r0, [pc, #148]	; (8001d64 <main+0xa70>)
 8001cce:	f000 ff4a 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd8:	481b      	ldr	r0, [pc, #108]	; (8001d48 <main+0xa54>)
 8001cda:	f000 ff44 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce4:	4818      	ldr	r0, [pc, #96]	; (8001d48 <main+0xa54>)
 8001ce6:	f000 ff3e 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001cea:	2200      	movs	r2, #0
 8001cec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf0:	4815      	ldr	r0, [pc, #84]	; (8001d48 <main+0xa54>)
 8001cf2:	f000 ff38 	bl	8002b66 <HAL_GPIO_WritePin>
 8001cf6:	e01f      	b.n	8001d38 <main+0xa44>

			} else {
				//beep off
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cfe:	4815      	ldr	r0, [pc, #84]	; (8001d54 <main+0xa60>)
 8001d00:	f000 ff31 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d0a:	4816      	ldr	r0, [pc, #88]	; (8001d64 <main+0xa70>)
 8001d0c:	f000 ff2b 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d16:	480c      	ldr	r0, [pc, #48]	; (8001d48 <main+0xa54>)
 8001d18:	f000 ff25 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin, LOW);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d22:	4809      	ldr	r0, [pc, #36]	; (8001d48 <main+0xa54>)
 8001d24:	f000 ff1f 	bl	8002b66 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d2e:	4806      	ldr	r0, [pc, #24]	; (8001d48 <main+0xa54>)
 8001d30:	f000 ff19 	bl	8002b66 <HAL_GPIO_WritePin>
 8001d34:	e000      	b.n	8001d38 <main+0xa44>
					if (cur_temp == -1 || cur_temp == 0) {
 8001d36:	bf00      	nop
			}
			op_update_evt = 0U;
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <main+0xa74>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
		if (lcd_update_evt) {
 8001d3e:	f7ff bb10 	b.w	8001362 <main+0x6e>
 8001d42:	bf00      	nop
 8001d44:	20000146 	.word	0x20000146
 8001d48:	40010c00 	.word	0x40010c00
 8001d4c:	20000014 	.word	0x20000014
 8001d50:	20000134 	.word	0x20000134
 8001d54:	40011000 	.word	0x40011000
 8001d58:	2000014b 	.word	0x2000014b
 8001d5c:	20000142 	.word	0x20000142
 8001d60:	20000140 	.word	0x20000140
 8001d64:	40010800 	.word	0x40010800
 8001d68:	20000143 	.word	0x20000143

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b090      	sub	sp, #64	; 0x40
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	2228      	movs	r2, #40	; 0x28
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 fd90 	bl	80048a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da0:	2302      	movs	r3, #2
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001daa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db0:	f107 0318 	add.w	r3, r7, #24
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 ff1f 	bl	8002bf8 <HAL_RCC_OscConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001dc0:	f000 f8fc 	bl	8001fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2102      	movs	r1, #2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f001 f98c 	bl	80030fc <HAL_RCC_ClockConfig>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001dea:	f000 f8e7 	bl	8001fbc <Error_Handler>
  }
}
 8001dee:	bf00      	nop
 8001df0:	3740      	adds	r7, #64	; 0x40
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
//	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW_Pin) {
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10b      	bne.n	8001e20 <HAL_GPIO_EXTI_Callback+0x28>
		NVIC_DisableIRQ(EXTI0_IRQn);
 8001e08:	2006      	movs	r0, #6
 8001e0a:	f7ff fa3d 	bl	8001288 <__NVIC_DisableIRQ>

		door_open_flag = 1U;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_GPIO_EXTI_Callback+0x30>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
		door_open_evt = 1U;
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_GPIO_EXTI_Callback+0x34>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]

		NVIC_EnableIRQ(EXTI0_IRQn);
 8001e1a:	2006      	movs	r0, #6
 8001e1c:	f7ff fa18 	bl	8001250 <__NVIC_EnableIRQ>
//		printf("Door_EXTI\r\n");
	}
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	2000013e 	.word	0x2000013e
 8001e2c:	2000013f 	.word	0x2000013f

08001e30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	
//	printf("Timer\r\n");

	if (dryer.heatTime > 0) {
 8001e38:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <HAL_TIM_PeriodElapsedCallback+0x1e>
		dryer.heatTime--;
 8001e40:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e42:	885b      	ldrh	r3, [r3, #2]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e4a:	805a      	strh	r2, [r3, #2]
 8001e4c:	e014      	b.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x48>
	} else if (dryer.coolTime > 0) {
 8001e4e:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e50:	889b      	ldrh	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <HAL_TIM_PeriodElapsedCallback+0x34>
		dryer.coolTime--;
 8001e56:	4b4d      	ldr	r3, [pc, #308]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e58:	889b      	ldrh	r3, [r3, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e60:	809a      	strh	r2, [r3, #4]
 8001e62:	e009      	b.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x48>
	} else if (dryer.state == COMPLETE) {
 8001e64:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d105      	bne.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x48>
		dryer.beepTime--;
 8001e6c:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e6e:	79db      	ldrb	r3, [r3, #7]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e76:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 8001e78:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e7a:	885b      	ldrh	r3, [r3, #2]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0x60>
 8001e80:	4b42      	ldr	r3, [pc, #264]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e82:	7a1b      	ldrb	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0x60>
		dryer.cycle = COOL_CYCLE;
 8001e88:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	721a      	strb	r2, [r3, #8]
 8001e8e:	e010      	b.n	8001eb2 <HAL_TIM_PeriodElapsedCallback+0x82>
	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8001e90:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e92:	889b      	ldrh	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10c      	bne.n	8001eb2 <HAL_TIM_PeriodElapsedCallback+0x82>
 8001e98:	4b3c      	ldr	r3, [pc, #240]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e9a:	7a1b      	ldrb	r3, [r3, #8]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d108      	bne.n	8001eb2 <HAL_TIM_PeriodElapsedCallback+0x82>
		//printf("Complete\r\n");
		dryer.state = COMPLETE;
 8001ea0:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 8001ea6:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 8001eac:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001eae:	2204      	movs	r2, #4
 8001eb0:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <HAL_TIM_PeriodElapsedCallback+0x98>
		pasue_cunt--;
 8001eba:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e03c      	b.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x112>
	} else if (rot_left_cunt > 0) {
 8001ec8:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_TIM_PeriodElapsedCallback+0xb4>
		rot_left_cunt--;
 8001ed0:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001eda:	701a      	strb	r2, [r3, #0]
		flipflop = 1;
 8001edc:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e02e      	b.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x112>
	} else if (rot_right_cunt > 0) {
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d009      	beq.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0xd0>
		rot_right_cunt--;
 8001eec:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ef6:	701a      	strb	r2, [r3, #0]
		flipflop = 0;
 8001ef8:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e020      	b.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x112>
	} else {
		rot_sw_state = HAL_GPIO_ReadPin(SEL_ROT_SW_GPIO_Port, SEL_ROT_SW_Pin);
 8001f00:	2104      	movs	r1, #4
 8001f02:	4828      	ldr	r0, [pc, #160]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001f04:	f000 fe18 	bl	8002b38 <HAL_GPIO_ReadPin>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001f0e:	701a      	strb	r2, [r3, #0]
		if (rot_sw_state) {
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0xf6>
			pasue_cunt = 0U;
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
			rot_left_cunt = 30U;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001f20:	221e      	movs	r2, #30
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e00d      	b.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x112>
		} else {
			pasue_cunt = 3U;
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001f28:	2203      	movs	r2, #3
 8001f2a:	701a      	strb	r2, [r3, #0]
			if (flipflop)rot_right_cunt = 30U;
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_TIM_PeriodElapsedCallback+0x10c>
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f36:	221e      	movs	r2, #30
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e002      	b.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x112>
			else rot_left_cunt = 30U;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001f3e:	221e      	movs	r2, #30
 8001f40:	701a      	strb	r2, [r3, #0]
		}
	}

	if (limit_sw_open() && (dryer.cycle == HEAT_CYCLE)) {
 8001f42:	f7fe fc4d 	bl	80007e0 <limit_sw_open>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <HAL_TIM_PeriodElapsedCallback+0x13a>
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001f4e:	7a1b      	ldrb	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10a      	bne.n	8001f6a <HAL_TIM_PeriodElapsedCallback+0x13a>
		if (limit_timeout > 0)
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x146>
			limit_timeout--;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f66:	701a      	strb	r2, [r3, #0]
		if (limit_timeout > 0)
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x146>
	} else {
		limit_timeout = 30U;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f6c:	221e      	movs	r2, #30
 8001f6e:	701a      	strb	r2, [r3, #0]
	    limit_timeout_flag = 0U;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
	}
//	otp = 1;
	op_update_evt = 1U;
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
	lcd_update_evt = 1U;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000134 	.word	0x20000134
 8001f90:	2000014b 	.word	0x2000014b
 8001f94:	20000147 	.word	0x20000147
 8001f98:	20000013 	.word	0x20000013
 8001f9c:	20000149 	.word	0x20000149
 8001fa0:	20000146 	.word	0x20000146
 8001fa4:	40010800 	.word	0x40010800
 8001fa8:	20000148 	.word	0x20000148
 8001fac:	20000012 	.word	0x20000012
 8001fb0:	20000144 	.word	0x20000144
 8001fb4:	20000143 	.word	0x20000143
 8001fb8:	20000142 	.word	0x20000142

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fc4:	e7fe      	b.n	8001fc4 <Error_Handler+0x8>
	...

08001fc8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <MX_SPI1_Init+0x64>)
 8001fce:	4a18      	ldr	r2, [pc, #96]	; (8002030 <MX_SPI1_Init+0x68>)
 8001fd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <MX_SPI1_Init+0x64>)
 8001fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <MX_SPI1_Init+0x64>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <MX_SPI1_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <MX_SPI1_Init+0x64>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <MX_SPI1_Init+0x64>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <MX_SPI1_Init+0x64>)
 8001ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <MX_SPI1_Init+0x64>)
 8001ffc:	2230      	movs	r2, #48	; 0x30
 8001ffe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <MX_SPI1_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <MX_SPI1_Init+0x64>)
 8002008:	2200      	movs	r2, #0
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <MX_SPI1_Init+0x64>)
 800200e:	2200      	movs	r2, #0
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <MX_SPI1_Init+0x64>)
 8002014:	220a      	movs	r2, #10
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <MX_SPI1_Init+0x64>)
 800201a:	f001 fa07 	bl	800342c <HAL_SPI_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002024:	f7ff ffca 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000150 	.word	0x20000150
 8002030:	40013000 	.word	0x40013000

08002034 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_SPI_MspInit+0x88>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d12f      	bne.n	80020b4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <HAL_SPI_MspInit+0x8c>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <HAL_SPI_MspInit+0x8c>)
 800205a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <HAL_SPI_MspInit+0x8c>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_SPI_MspInit+0x8c>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <HAL_SPI_MspInit+0x8c>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_SPI_MspInit+0x8c>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002084:	23a0      	movs	r3, #160	; 0xa0
 8002086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	4619      	mov	r1, r3
 8002096:	480b      	ldr	r0, [pc, #44]	; (80020c4 <HAL_SPI_MspInit+0x90>)
 8002098:	f000 fbca 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800209c:	2340      	movs	r3, #64	; 0x40
 800209e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	4619      	mov	r1, r3
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <HAL_SPI_MspInit+0x90>)
 80020b0:	f000 fbbe 	bl	8002830 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020b4:	bf00      	nop
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40013000 	.word	0x40013000
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010800 	.word	0x40010800

080020c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_MspInit+0x5c>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	4a14      	ldr	r2, [pc, #80]	; (8002124 <HAL_MspInit+0x5c>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6193      	str	r3, [r2, #24]
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_MspInit+0x5c>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_MspInit+0x5c>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_MspInit+0x5c>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_MspInit+0x5c>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_MspInit+0x60>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_MspInit+0x60>)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <NMI_Handler+0x4>

08002132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <HardFault_Handler+0x4>

08002138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <MemManage_Handler+0x4>

0800213e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <UsageFault_Handler+0x4>

0800214a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002172:	f000 fa0f 	bl	8002594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}

0800217a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOOR_SW_Pin);
 800217e:	2001      	movs	r0, #1
 8002180:	f000 fd22 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <TIM4_IRQHandler+0x10>)
 800218e:	f001 fe4d 	bl	8003e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200001ac 	.word	0x200001ac

0800219c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e00a      	b.n	80021c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ae:	f3af 8000 	nop.w
 80021b2:	4601      	mov	r1, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	60ba      	str	r2, [r7, #8]
 80021ba:	b2ca      	uxtb	r2, r1
 80021bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbf0      	blt.n	80021ae <_read+0x12>
  }

  return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e009      	b.n	80021fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	60ba      	str	r2, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f86d 	bl	80012d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	dbf1      	blt.n	80021e8 <_write+0x12>
  }
  return len;
 8002204:	687b      	ldr	r3, [r7, #4]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_close>:

int _close(int file)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002234:	605a      	str	r2, [r3, #4]
  return 0;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <_isatty>:

int _isatty(int file)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
	...

08002270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <_sbrk+0x5c>)
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <_sbrk+0x60>)
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <_sbrk+0x64>)
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <_sbrk+0x68>)
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <_sbrk+0x64>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	429a      	cmp	r2, r3
 800229e:	d207      	bcs.n	80022b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a0:	f002 fad4 	bl	800484c <__errno>
 80022a4:	4603      	mov	r3, r0
 80022a6:	220c      	movs	r2, #12
 80022a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	e009      	b.n	80022c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <_sbrk+0x64>)
 80022c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20005000 	.word	0x20005000
 80022d0:	00000400 	.word	0x00000400
 80022d4:	200001a8 	.word	0x200001a8
 80022d8:	20000250 	.word	0x20000250

080022dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	463b      	mov	r3, r7
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <MX_TIM4_Init+0x94>)
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <MX_TIM4_Init+0x98>)
 8002308:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <MX_TIM4_Init+0x94>)
 800230c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002310:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <MX_TIM4_Init+0x94>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <MX_TIM4_Init+0x94>)
 800231a:	f242 720f 	movw	r2, #9999	; 0x270f
 800231e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <MX_TIM4_Init+0x94>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_TIM4_Init+0x94>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800232c:	4813      	ldr	r0, [pc, #76]	; (800237c <MX_TIM4_Init+0x94>)
 800232e:	f001 fcad 	bl	8003c8c <HAL_TIM_Base_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002338:	f7ff fe40 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002340:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	4619      	mov	r1, r3
 8002348:	480c      	ldr	r0, [pc, #48]	; (800237c <MX_TIM4_Init+0x94>)
 800234a:	f001 fe77 	bl	800403c <HAL_TIM_ConfigClockSource>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002354:	f7ff fe32 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002358:	2320      	movs	r3, #32
 800235a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002360:	463b      	mov	r3, r7
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_TIM4_Init+0x94>)
 8002366:	f002 f849 	bl	80043fc <HAL_TIMEx_MasterConfigSynchronization>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002370:	f7ff fe24 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200001ac 	.word	0x200001ac
 8002380:	40000800 	.word	0x40000800

08002384 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <HAL_TIM_Base_MspInit+0x44>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d113      	bne.n	80023be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_TIM_Base_MspInit+0x48>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <HAL_TIM_Base_MspInit+0x48>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_TIM_Base_MspInit+0x48>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2101      	movs	r1, #1
 80023b2:	201e      	movs	r0, #30
 80023b4:	f000 fa05 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023b8:	201e      	movs	r0, #30
 80023ba:	f000 fa1e 	bl	80027fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40000800 	.word	0x40000800
 80023cc:	40021000 	.word	0x40021000

080023d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_USART1_UART_Init+0x4c>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <MX_USART1_UART_Init+0x50>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <MX_USART1_UART_Init+0x4c>)
 80023dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_USART1_UART_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_USART1_UART_Init+0x4c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <MX_USART1_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_USART1_UART_Init+0x4c>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <MX_USART1_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_USART1_UART_Init+0x4c>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_USART1_UART_Init+0x4c>)
 8002408:	f002 f868 	bl	80044dc <HAL_UART_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002412:	f7ff fdd3 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200001f4 	.word	0x200001f4
 8002420:	40013800 	.word	0x40013800

08002424 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_UART_MspInit+0x8c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d131      	bne.n	80024a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_UART_MspInit+0x90>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <HAL_UART_MspInit+0x90>)
 800244a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_UART_MspInit+0x90>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_UART_MspInit+0x90>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_UART_MspInit+0x90>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_UART_MspInit+0x90>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002478:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002482:	f107 0310 	add.w	r3, r7, #16
 8002486:	4619      	mov	r1, r3
 8002488:	480b      	ldr	r0, [pc, #44]	; (80024b8 <HAL_UART_MspInit+0x94>)
 800248a:	f000 f9d1 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800248e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	4619      	mov	r1, r3
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <HAL_UART_MspInit+0x94>)
 80024a4:	f000 f9c4 	bl	8002830 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024a8:	bf00      	nop
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010800 	.word	0x40010800

080024bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024bc:	480c      	ldr	r0, [pc, #48]	; (80024f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024be:	490d      	ldr	r1, [pc, #52]	; (80024f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024c0:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c4:	e002      	b.n	80024cc <LoopCopyDataInit>

080024c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ca:	3304      	adds	r3, #4

080024cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d0:	d3f9      	bcc.n	80024c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024d4:	4c0a      	ldr	r4, [pc, #40]	; (8002500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d8:	e001      	b.n	80024de <LoopFillZerobss>

080024da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024dc:	3204      	adds	r2, #4

080024de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e0:	d3fb      	bcc.n	80024da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024e2:	f7ff fefb 	bl	80022dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e6:	f002 f9b7 	bl	8004858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ea:	f7fe ff03 	bl	80012f4 <main>
  bx lr
 80024ee:	4770      	bx	lr
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80024f8:	08005f04 	.word	0x08005f04
  ldr r2, =_sbss
 80024fc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002500:	2000024c 	.word	0x2000024c

08002504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC1_2_IRQHandler>
	...

08002508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_Init+0x28>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_Init+0x28>)
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002518:	2003      	movs	r0, #3
 800251a:	f000 f947 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251e:	200f      	movs	r0, #15
 8002520:	f000 f808 	bl	8002534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002524:	f7ff fdd0 	bl	80020c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40022000 	.word	0x40022000

08002534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x54>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_InitTick+0x58>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f95f 	bl	8002816 <HAL_SYSTICK_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e00e      	b.n	8002580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b0f      	cmp	r3, #15
 8002566:	d80a      	bhi.n	800257e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002568:	2200      	movs	r2, #0
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f000 f927 	bl	80027c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <HAL_InitTick+0x5c>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000018 	.word	0x20000018
 800258c:	20000020 	.word	0x20000020
 8002590:	2000001c 	.word	0x2000001c

08002594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_IncTick+0x1c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_IncTick+0x20>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	4a03      	ldr	r2, [pc, #12]	; (80025b4 <HAL_IncTick+0x20>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000020 	.word	0x20000020
 80025b4:	20000238 	.word	0x20000238

080025b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <HAL_GetTick+0x10>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000238 	.word	0x20000238

080025cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff fff0 	bl	80025b8 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d005      	beq.n	80025f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_Delay+0x44>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025f2:	bf00      	nop
 80025f4:	f7ff ffe0 	bl	80025b8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d8f7      	bhi.n	80025f4 <HAL_Delay+0x28>
  {
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000020 	.word	0x20000020

08002614 <__NVIC_SetPriorityGrouping>:
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4906      	ldr	r1, [pc, #24]	; (80026ac <__NVIC_EnableIRQ+0x34>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d301      	bcc.n	800277e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277a:	2301      	movs	r3, #1
 800277c:	e00f      	b.n	800279e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <SysTick_Config+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002786:	210f      	movs	r1, #15
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f7ff ff90 	bl	80026b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Config+0x40>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <SysTick_Config+0x40>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff2d 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d4:	f7ff ff42 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff90 	bl	8002704 <NVIC_EncodePriority>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff5f 	bl	80026b0 <__NVIC_SetPriority>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff35 	bl	8002678 <__NVIC_EnableIRQ>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ffa2 	bl	8002768 <SysTick_Config>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b480      	push	{r7}
 8002832:	b08b      	sub	sp, #44	; 0x2c
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002842:	e169      	b.n	8002b18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002844:	2201      	movs	r2, #1
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	429a      	cmp	r2, r3
 800285e:	f040 8158 	bne.w	8002b12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a9a      	ldr	r2, [pc, #616]	; (8002ad0 <HAL_GPIO_Init+0x2a0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d05e      	beq.n	800292a <HAL_GPIO_Init+0xfa>
 800286c:	4a98      	ldr	r2, [pc, #608]	; (8002ad0 <HAL_GPIO_Init+0x2a0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d875      	bhi.n	800295e <HAL_GPIO_Init+0x12e>
 8002872:	4a98      	ldr	r2, [pc, #608]	; (8002ad4 <HAL_GPIO_Init+0x2a4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d058      	beq.n	800292a <HAL_GPIO_Init+0xfa>
 8002878:	4a96      	ldr	r2, [pc, #600]	; (8002ad4 <HAL_GPIO_Init+0x2a4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d86f      	bhi.n	800295e <HAL_GPIO_Init+0x12e>
 800287e:	4a96      	ldr	r2, [pc, #600]	; (8002ad8 <HAL_GPIO_Init+0x2a8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d052      	beq.n	800292a <HAL_GPIO_Init+0xfa>
 8002884:	4a94      	ldr	r2, [pc, #592]	; (8002ad8 <HAL_GPIO_Init+0x2a8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d869      	bhi.n	800295e <HAL_GPIO_Init+0x12e>
 800288a:	4a94      	ldr	r2, [pc, #592]	; (8002adc <HAL_GPIO_Init+0x2ac>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d04c      	beq.n	800292a <HAL_GPIO_Init+0xfa>
 8002890:	4a92      	ldr	r2, [pc, #584]	; (8002adc <HAL_GPIO_Init+0x2ac>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d863      	bhi.n	800295e <HAL_GPIO_Init+0x12e>
 8002896:	4a92      	ldr	r2, [pc, #584]	; (8002ae0 <HAL_GPIO_Init+0x2b0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d046      	beq.n	800292a <HAL_GPIO_Init+0xfa>
 800289c:	4a90      	ldr	r2, [pc, #576]	; (8002ae0 <HAL_GPIO_Init+0x2b0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d85d      	bhi.n	800295e <HAL_GPIO_Init+0x12e>
 80028a2:	2b12      	cmp	r3, #18
 80028a4:	d82a      	bhi.n	80028fc <HAL_GPIO_Init+0xcc>
 80028a6:	2b12      	cmp	r3, #18
 80028a8:	d859      	bhi.n	800295e <HAL_GPIO_Init+0x12e>
 80028aa:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <HAL_GPIO_Init+0x80>)
 80028ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b0:	0800292b 	.word	0x0800292b
 80028b4:	08002905 	.word	0x08002905
 80028b8:	08002917 	.word	0x08002917
 80028bc:	08002959 	.word	0x08002959
 80028c0:	0800295f 	.word	0x0800295f
 80028c4:	0800295f 	.word	0x0800295f
 80028c8:	0800295f 	.word	0x0800295f
 80028cc:	0800295f 	.word	0x0800295f
 80028d0:	0800295f 	.word	0x0800295f
 80028d4:	0800295f 	.word	0x0800295f
 80028d8:	0800295f 	.word	0x0800295f
 80028dc:	0800295f 	.word	0x0800295f
 80028e0:	0800295f 	.word	0x0800295f
 80028e4:	0800295f 	.word	0x0800295f
 80028e8:	0800295f 	.word	0x0800295f
 80028ec:	0800295f 	.word	0x0800295f
 80028f0:	0800295f 	.word	0x0800295f
 80028f4:	0800290d 	.word	0x0800290d
 80028f8:	08002921 	.word	0x08002921
 80028fc:	4a79      	ldr	r2, [pc, #484]	; (8002ae4 <HAL_GPIO_Init+0x2b4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002902:	e02c      	b.n	800295e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	623b      	str	r3, [r7, #32]
          break;
 800290a:	e029      	b.n	8002960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	3304      	adds	r3, #4
 8002912:	623b      	str	r3, [r7, #32]
          break;
 8002914:	e024      	b.n	8002960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	3308      	adds	r3, #8
 800291c:	623b      	str	r3, [r7, #32]
          break;
 800291e:	e01f      	b.n	8002960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	330c      	adds	r3, #12
 8002926:	623b      	str	r3, [r7, #32]
          break;
 8002928:	e01a      	b.n	8002960 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002932:	2304      	movs	r3, #4
 8002934:	623b      	str	r3, [r7, #32]
          break;
 8002936:	e013      	b.n	8002960 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002940:	2308      	movs	r3, #8
 8002942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	611a      	str	r2, [r3, #16]
          break;
 800294a:	e009      	b.n	8002960 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800294c:	2308      	movs	r3, #8
 800294e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	615a      	str	r2, [r3, #20]
          break;
 8002956:	e003      	b.n	8002960 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
          break;
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x130>
          break;
 800295e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2bff      	cmp	r3, #255	; 0xff
 8002964:	d801      	bhi.n	800296a <HAL_GPIO_Init+0x13a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	e001      	b.n	800296e <HAL_GPIO_Init+0x13e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2bff      	cmp	r3, #255	; 0xff
 8002974:	d802      	bhi.n	800297c <HAL_GPIO_Init+0x14c>
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0x152>
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	3b08      	subs	r3, #8
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	210f      	movs	r1, #15
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	401a      	ands	r2, r3
 8002994:	6a39      	ldr	r1, [r7, #32]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	431a      	orrs	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80b1 	beq.w	8002b12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029b0:	4b4d      	ldr	r3, [pc, #308]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a4c      	ldr	r2, [pc, #304]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029c8:	4a48      	ldr	r2, [pc, #288]	; (8002aec <HAL_GPIO_Init+0x2bc>)
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a40      	ldr	r2, [pc, #256]	; (8002af0 <HAL_GPIO_Init+0x2c0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <HAL_GPIO_Init+0x1ec>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3f      	ldr	r2, [pc, #252]	; (8002af4 <HAL_GPIO_Init+0x2c4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00d      	beq.n	8002a18 <HAL_GPIO_Init+0x1e8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a3e      	ldr	r2, [pc, #248]	; (8002af8 <HAL_GPIO_Init+0x2c8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d007      	beq.n	8002a14 <HAL_GPIO_Init+0x1e4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3d      	ldr	r2, [pc, #244]	; (8002afc <HAL_GPIO_Init+0x2cc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_GPIO_Init+0x1e0>
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e006      	b.n	8002a1e <HAL_GPIO_Init+0x1ee>
 8002a10:	2304      	movs	r3, #4
 8002a12:	e004      	b.n	8002a1e <HAL_GPIO_Init+0x1ee>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e002      	b.n	8002a1e <HAL_GPIO_Init+0x1ee>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_GPIO_Init+0x1ee>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	f002 0203 	and.w	r2, r2, #3
 8002a24:	0092      	lsls	r2, r2, #2
 8002a26:	4093      	lsls	r3, r2
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a2e:	492f      	ldr	r1, [pc, #188]	; (8002aec <HAL_GPIO_Init+0x2bc>)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	492c      	ldr	r1, [pc, #176]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a56:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	4928      	ldr	r1, [pc, #160]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d006      	beq.n	8002a7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4922      	ldr	r1, [pc, #136]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	491e      	ldr	r1, [pc, #120]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	4918      	ldr	r1, [pc, #96]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	4914      	ldr	r1, [pc, #80]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d021      	beq.n	8002b04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	490e      	ldr	r1, [pc, #56]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60cb      	str	r3, [r1, #12]
 8002acc:	e021      	b.n	8002b12 <HAL_GPIO_Init+0x2e2>
 8002ace:	bf00      	nop
 8002ad0:	10320000 	.word	0x10320000
 8002ad4:	10310000 	.word	0x10310000
 8002ad8:	10220000 	.word	0x10220000
 8002adc:	10210000 	.word	0x10210000
 8002ae0:	10120000 	.word	0x10120000
 8002ae4:	10110000 	.word	0x10110000
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40010800 	.word	0x40010800
 8002af4:	40010c00 	.word	0x40010c00
 8002af8:	40011000 	.word	0x40011000
 8002afc:	40011400 	.word	0x40011400
 8002b00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_GPIO_Init+0x304>)
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	4909      	ldr	r1, [pc, #36]	; (8002b34 <HAL_GPIO_Init+0x304>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	3301      	adds	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f47f ae8e 	bne.w	8002844 <HAL_GPIO_Init+0x14>
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	372c      	adds	r7, #44	; 0x2c
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	40010400 	.word	0x40010400

08002b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	887b      	ldrh	r3, [r7, #2]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
 8002b54:	e001      	b.n	8002b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	807b      	strh	r3, [r7, #2]
 8002b72:	4613      	mov	r3, r2
 8002b74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b76:	787b      	ldrb	r3, [r7, #1]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7c:	887a      	ldrh	r2, [r7, #2]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b82:	e003      	b.n	8002b8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	041a      	lsls	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	611a      	str	r2, [r3, #16]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ba8:	887a      	ldrh	r2, [r7, #2]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4013      	ands	r3, r2
 8002bae:	041a      	lsls	r2, r3, #16
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	611a      	str	r2, [r3, #16]
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff f906 	bl	8001df8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e272      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8087 	beq.w	8002d26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c18:	4b92      	ldr	r3, [pc, #584]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d00c      	beq.n	8002c3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c24:	4b8f      	ldr	r3, [pc, #572]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d112      	bne.n	8002c56 <HAL_RCC_OscConfig+0x5e>
 8002c30:	4b8c      	ldr	r3, [pc, #560]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3c:	d10b      	bne.n	8002c56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3e:	4b89      	ldr	r3, [pc, #548]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d06c      	beq.n	8002d24 <HAL_RCC_OscConfig+0x12c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d168      	bne.n	8002d24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e24c      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x76>
 8002c60:	4b80      	ldr	r3, [pc, #512]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7f      	ldr	r2, [pc, #508]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	e02e      	b.n	8002ccc <HAL_RCC_OscConfig+0xd4>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x98>
 8002c76:	4b7b      	ldr	r3, [pc, #492]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7a      	ldr	r2, [pc, #488]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b78      	ldr	r3, [pc, #480]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a77      	ldr	r2, [pc, #476]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e01d      	b.n	8002ccc <HAL_RCC_OscConfig+0xd4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xbc>
 8002c9a:	4b72      	ldr	r3, [pc, #456]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a71      	ldr	r2, [pc, #452]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b6f      	ldr	r3, [pc, #444]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6e      	ldr	r2, [pc, #440]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0xd4>
 8002cb4:	4b6b      	ldr	r3, [pc, #428]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6a      	ldr	r2, [pc, #424]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b68      	ldr	r3, [pc, #416]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a67      	ldr	r2, [pc, #412]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7ff fc70 	bl	80025b8 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7ff fc6c 	bl	80025b8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e200      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b5d      	ldr	r3, [pc, #372]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0xe4>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff fc5c 	bl	80025b8 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7ff fc58 	bl	80025b8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1ec      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x10c>
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d063      	beq.n	8002dfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d32:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d3e:	4b49      	ldr	r3, [pc, #292]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d11c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x18c>
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d116      	bne.n	8002d84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	4b43      	ldr	r3, [pc, #268]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_RCC_OscConfig+0x176>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e1c0      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4939      	ldr	r1, [pc, #228]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d82:	e03a      	b.n	8002dfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7ff fc11 	bl	80025b8 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7ff fc0d 	bl	80025b8 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e1a1      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4927      	ldr	r1, [pc, #156]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
 8002dcc:	e015      	b.n	8002dfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff fbf0 	bl	80025b8 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ddc:	f7ff fbec 	bl	80025b8 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e180      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d03a      	beq.n	8002e7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d019      	beq.n	8002e42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e14:	f7ff fbd0 	bl	80025b8 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1c:	f7ff fbcc 	bl	80025b8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e160      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f000 fad8 	bl	80033f0 <RCC_Delay>
 8002e40:	e01c      	b.n	8002e7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e48:	f7ff fbb6 	bl	80025b8 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4e:	e00f      	b.n	8002e70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e50:	f7ff fbb2 	bl	80025b8 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d908      	bls.n	8002e70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e146      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	42420000 	.word	0x42420000
 8002e6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	4b92      	ldr	r3, [pc, #584]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e9      	bne.n	8002e50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80a6 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b8b      	ldr	r3, [pc, #556]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	4b88      	ldr	r3, [pc, #544]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4a87      	ldr	r2, [pc, #540]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	61d3      	str	r3, [r2, #28]
 8002ea6:	4b85      	ldr	r3, [pc, #532]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	4b82      	ldr	r3, [pc, #520]	; (80030c0 <HAL_RCC_OscConfig+0x4c8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec2:	4b7f      	ldr	r3, [pc, #508]	; (80030c0 <HAL_RCC_OscConfig+0x4c8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a7e      	ldr	r2, [pc, #504]	; (80030c0 <HAL_RCC_OscConfig+0x4c8>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7ff fb73 	bl	80025b8 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed6:	f7ff fb6f 	bl	80025b8 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b64      	cmp	r3, #100	; 0x64
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e103      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	4b75      	ldr	r3, [pc, #468]	; (80030c0 <HAL_RCC_OscConfig+0x4c8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x312>
 8002efc:	4b6f      	ldr	r3, [pc, #444]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a6e      	ldr	r2, [pc, #440]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	e02d      	b.n	8002f66 <HAL_RCC_OscConfig+0x36e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x334>
 8002f12:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4a69      	ldr	r2, [pc, #420]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6213      	str	r3, [r2, #32]
 8002f1e:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4a66      	ldr	r2, [pc, #408]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	6213      	str	r3, [r2, #32]
 8002f2a:	e01c      	b.n	8002f66 <HAL_RCC_OscConfig+0x36e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d10c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x356>
 8002f34:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4a60      	ldr	r2, [pc, #384]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6213      	str	r3, [r2, #32]
 8002f40:	4b5e      	ldr	r3, [pc, #376]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4a5d      	ldr	r2, [pc, #372]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6213      	str	r3, [r2, #32]
 8002f4c:	e00b      	b.n	8002f66 <HAL_RCC_OscConfig+0x36e>
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	4a5a      	ldr	r2, [pc, #360]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6213      	str	r3, [r2, #32]
 8002f5a:	4b58      	ldr	r3, [pc, #352]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4a57      	ldr	r2, [pc, #348]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	f023 0304 	bic.w	r3, r3, #4
 8002f64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6e:	f7ff fb23 	bl	80025b8 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7ff fb1f 	bl	80025b8 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0b1      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ee      	beq.n	8002f76 <HAL_RCC_OscConfig+0x37e>
 8002f98:	e014      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9a:	f7ff fb0d 	bl	80025b8 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7ff fb09 	bl	80025b8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e09b      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb8:	4b40      	ldr	r3, [pc, #256]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ee      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fca:	4b3c      	ldr	r3, [pc, #240]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4a3b      	ldr	r2, [pc, #236]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8087 	beq.w	80030ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d061      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d146      	bne.n	8003082 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7ff fadd 	bl	80025b8 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7ff fad9 	bl	80025b8 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e06d      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003028:	d108      	bne.n	800303c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	4921      	ldr	r1, [pc, #132]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303c:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a19      	ldr	r1, [r3, #32]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	430b      	orrs	r3, r1
 800304e:	491b      	ldr	r1, [pc, #108]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_RCC_OscConfig+0x4cc>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7ff faad 	bl	80025b8 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7ff faa9 	bl	80025b8 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e03d      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003074:	4b11      	ldr	r3, [pc, #68]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x46a>
 8003080:	e035      	b.n	80030ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_RCC_OscConfig+0x4cc>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff fa96 	bl	80025b8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7ff fa92 	bl	80025b8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e026      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x498>
 80030ae:	e01e      	b.n	80030ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e019      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40007000 	.word	0x40007000
 80030c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCC_OscConfig+0x500>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0d0      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d910      	bls.n	8003140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b67      	ldr	r3, [pc, #412]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 0207 	bic.w	r2, r3, #7
 8003126:	4965      	ldr	r1, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003162:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800317a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d040      	beq.n	800321c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d115      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e073      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ca:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06b      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4936      	ldr	r1, [pc, #216]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ec:	f7ff f9e4 	bl	80025b8 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7ff f9e0 	bl	80025b8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e053      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d210      	bcs.n	800324c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 0207 	bic.w	r2, r3, #7
 8003232:	4922      	ldr	r1, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1cc>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1d0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f942 	bl	8002534 <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08005e4c 	.word	0x08005e4c
 80032c8:	20000018 	.word	0x20000018
 80032cc:	2000001c 	.word	0x2000001c

080032d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	b490      	push	{r4, r7}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_RCC_GetSysClockFreq+0xac>)
 80032d8:	1d3c      	adds	r4, r7, #4
 80032da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032e0:	f240 2301 	movw	r3, #513	; 0x201
 80032e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	2300      	movs	r3, #0
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032fa:	4b21      	ldr	r3, [pc, #132]	; (8003380 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b04      	cmp	r3, #4
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x40>
 800330a:	2b08      	cmp	r3, #8
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x46>
 800330e:	e02b      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003310:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003312:	623b      	str	r3, [r7, #32]
      break;
 8003314:	e02b      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	0c9b      	lsrs	r3, r3, #18
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	3328      	adds	r3, #40	; 0x28
 8003320:	443b      	add	r3, r7
 8003322:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003326:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	0c5b      	lsrs	r3, r3, #17
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	3328      	adds	r3, #40	; 0x28
 800333e:	443b      	add	r3, r7
 8003340:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003344:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <HAL_RCC_GetSysClockFreq+0xb4>)
 800334a:	fb03 f202 	mul.w	r2, r3, r2
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
 8003356:	e004      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <HAL_RCC_GetSysClockFreq+0xb8>)
 800335c:	fb02 f303 	mul.w	r3, r2, r3
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	623b      	str	r3, [r7, #32]
      break;
 8003366:	e002      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCC_GetSysClockFreq+0xb4>)
 800336a:	623b      	str	r3, [r7, #32]
      break;
 800336c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336e:	6a3b      	ldr	r3, [r7, #32]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3728      	adds	r7, #40	; 0x28
 8003374:	46bd      	mov	sp, r7
 8003376:	bc90      	pop	{r4, r7}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	08005e3c 	.word	0x08005e3c
 8003380:	40021000 	.word	0x40021000
 8003384:	007a1200 	.word	0x007a1200
 8003388:	003d0900 	.word	0x003d0900

0800338c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003390:	4b02      	ldr	r3, [pc, #8]	; (800339c <HAL_RCC_GetHCLKFreq+0x10>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	20000018 	.word	0x20000018

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033a4:	f7ff fff2 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	08005e5c 	.word	0x08005e5c

080033c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033cc:	f7ff ffde 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	0adb      	lsrs	r3, r3, #11
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	08005e5c 	.word	0x08005e5c

080033f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <RCC_Delay+0x34>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <RCC_Delay+0x38>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	0a5b      	lsrs	r3, r3, #9
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800340c:	bf00      	nop
  }
  while (Delay --);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1e5a      	subs	r2, r3, #1
 8003412:	60fa      	str	r2, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f9      	bne.n	800340c <RCC_Delay+0x1c>
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	20000018 	.word	0x20000018
 8003428:	10624dd3 	.word	0x10624dd3

0800342c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e076      	b.n	800352c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344e:	d009      	beq.n	8003464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
 8003456:	e005      	b.n	8003464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe fdd8 	bl	8002034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	ea42 0103 	orr.w	r1, r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	0c1a      	lsrs	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f002 0204 	and.w	r2, r2, #4
 800350a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003550:	d112      	bne.n	8003578 <HAL_SPI_Receive+0x44>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10e      	bne.n	8003578 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2204      	movs	r2, #4
 800355e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f8f1 	bl	8003756 <HAL_SPI_TransmitReceive>
 8003574:	4603      	mov	r3, r0
 8003576:	e0ea      	b.n	800374e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_SPI_Receive+0x52>
 8003582:	2302      	movs	r3, #2
 8003584:	e0e3      	b.n	800374e <HAL_SPI_Receive+0x21a>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800358e:	f7ff f813 	bl	80025b8 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d002      	beq.n	80035a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
 80035a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035a4:	e0ca      	b.n	800373c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_SPI_Receive+0x7e>
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035b6:	e0c1      	b.n	800373c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2204      	movs	r2, #4
 80035bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	88fa      	ldrh	r2, [r7, #6]
 80035d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fe:	d10f      	bne.n	8003620 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d007      	beq.n	800363e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d162      	bne.n	800370c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003646:	e02e      	b.n	80036a6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d115      	bne.n	8003682 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f103 020c 	add.w	r2, r3, #12
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	7812      	ldrb	r2, [r2, #0]
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003680:	e011      	b.n	80036a6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003682:	f7fe ff99 	bl	80025b8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d803      	bhi.n	800369a <HAL_SPI_Receive+0x166>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d102      	bne.n	80036a0 <HAL_SPI_Receive+0x16c>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036a4:	e04a      	b.n	800373c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1cb      	bne.n	8003648 <HAL_SPI_Receive+0x114>
 80036b0:	e031      	b.n	8003716 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d113      	bne.n	80036e8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	b292      	uxth	r2, r2
 80036cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	1c9a      	adds	r2, r3, #2
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036e6:	e011      	b.n	800370c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e8:	f7fe ff66 	bl	80025b8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d803      	bhi.n	8003700 <HAL_SPI_Receive+0x1cc>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d102      	bne.n	8003706 <HAL_SPI_Receive+0x1d2>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	75fb      	strb	r3, [r7, #23]
          goto error;
 800370a:	e017      	b.n	800373c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1cd      	bne.n	80036b2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fa46 	bl	8003bac <SPI_EndRxTransaction>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
 8003738:	e000      	b.n	800373c <HAL_SPI_Receive+0x208>
  }

error :
 800373a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800374c:	7dfb      	ldrb	r3, [r7, #23]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b08c      	sub	sp, #48	; 0x30
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003764:	2301      	movs	r3, #1
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_SPI_TransmitReceive+0x26>
 8003778:	2302      	movs	r3, #2
 800377a:	e18a      	b.n	8003a92 <HAL_SPI_TransmitReceive+0x33c>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003784:	f7fe ff18 	bl	80025b8 <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800379a:	887b      	ldrh	r3, [r7, #2]
 800379c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800379e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d00f      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x70>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ac:	d107      	bne.n	80037be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <HAL_SPI_TransmitReceive+0x68>
 80037b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d003      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037be:	2302      	movs	r3, #2
 80037c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037c4:	e15b      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x82>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x82>
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d103      	bne.n	80037e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037de:	e14e      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d003      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2205      	movs	r2, #5
 80037f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	887a      	ldrh	r2, [r7, #2]
 800380a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	887a      	ldrh	r2, [r7, #2]
 8003816:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003834:	2b40      	cmp	r3, #64	; 0x40
 8003836:	d007      	beq.n	8003848 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003850:	d178      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x10a>
 800385a:	8b7b      	ldrh	r3, [r7, #26]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d166      	bne.n	800392e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	1c9a      	adds	r2, r3, #2
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003884:	e053      	b.n	800392e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	d11b      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x176>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <HAL_SPI_TransmitReceive+0x176>
 800389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d113      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d119      	bne.n	800390e <HAL_SPI_TransmitReceive+0x1b8>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d014      	beq.n	800390e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	b292      	uxth	r2, r2
 80038f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800390a:	2301      	movs	r3, #1
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800390e:	f7fe fe53 	bl	80025b8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800391a:	429a      	cmp	r2, r3
 800391c:	d807      	bhi.n	800392e <HAL_SPI_TransmitReceive+0x1d8>
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d003      	beq.n	800392e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800392c:	e0a7      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1a6      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x130>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1a1      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x130>
 8003942:	e07c      	b.n	8003a3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x1fc>
 800394c:	8b7b      	ldrh	r3, [r7, #26]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d16b      	bne.n	8003a2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	330c      	adds	r3, #12
 800395c:	7812      	ldrb	r2, [r2, #0]
 800395e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003978:	e057      	b.n	8003a2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b02      	cmp	r3, #2
 8003986:	d11c      	bne.n	80039c2 <HAL_SPI_TransmitReceive+0x26c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d017      	beq.n	80039c2 <HAL_SPI_TransmitReceive+0x26c>
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d114      	bne.n	80039c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	7812      	ldrb	r2, [r2, #0]
 80039a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d119      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x2ae>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d014      	beq.n	8003a04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a00:	2301      	movs	r3, #1
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a04:	f7fe fdd8 	bl	80025b8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d803      	bhi.n	8003a1c <HAL_SPI_TransmitReceive+0x2c6>
 8003a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d102      	bne.n	8003a22 <HAL_SPI_TransmitReceive+0x2cc>
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a28:	e029      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1a2      	bne.n	800397a <HAL_SPI_TransmitReceive+0x224>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d19d      	bne.n	800397a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f904 	bl	8003c50 <SPI_EndRxTxTransaction>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a5a:	e010      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	e000      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3730      	adds	r7, #48	; 0x30
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003aac:	f7fe fd84 	bl	80025b8 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003abc:	f7fe fd7c 	bl	80025b8 <HAL_GetTick>
 8003ac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	015b      	lsls	r3, r3, #5
 8003ac8:	0d1b      	lsrs	r3, r3, #20
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	fb02 f303 	mul.w	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ad2:	e054      	b.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d050      	beq.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003adc:	f7fe fd6c 	bl	80025b8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d902      	bls.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d13d      	bne.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0a:	d111      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	d004      	beq.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1e:	d107      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b38:	d10f      	bne.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e017      	b.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d19b      	bne.n	8003ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000018 	.word	0x20000018

08003bac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc0:	d111      	bne.n	8003be6 <SPI_EndRxTransaction+0x3a>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bca:	d004      	beq.n	8003bd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd4:	d107      	bne.n	8003be6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bee:	d117      	bne.n	8003c20 <SPI_EndRxTransaction+0x74>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d112      	bne.n	8003c20 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2101      	movs	r1, #1
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f7ff ff49 	bl	8003a9c <SPI_WaitFlagStateUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01a      	beq.n	8003c46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f043 0220 	orr.w	r2, r3, #32
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e013      	b.n	8003c48 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2200      	movs	r2, #0
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff ff36 	bl	8003a9c <SPI_WaitFlagStateUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e000      	b.n	8003c48 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2200      	movs	r2, #0
 8003c64:	2180      	movs	r1, #128	; 0x80
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff ff18 	bl	8003a9c <SPI_WaitFlagStateUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	f043 0220 	orr.w	r2, r3, #32
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e000      	b.n	8003c84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e041      	b.n	8003d22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fe fb66 	bl	8002384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f000 fa9e 	bl	800420c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d001      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e03a      	b.n	8003dba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <HAL_TIM_Base_Start_IT+0x98>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00e      	beq.n	8003d84 <HAL_TIM_Base_Start_IT+0x58>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d009      	beq.n	8003d84 <HAL_TIM_Base_Start_IT+0x58>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_TIM_Base_Start_IT+0x58>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <HAL_TIM_Base_Start_IT+0xa0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d111      	bne.n	8003da8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	d010      	beq.n	8003db8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da6:	e007      	b.n	8003db8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800

08003dd0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6a1a      	ldr	r2, [r3, #32]
 8003dee:	f241 1311 	movw	r3, #4369	; 0x1111
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10f      	bne.n	8003e18 <HAL_TIM_Base_Stop_IT+0x48>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6a1a      	ldr	r2, [r3, #32]
 8003dfe:	f240 4344 	movw	r3, #1092	; 0x444
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d107      	bne.n	8003e18 <HAL_TIM_Base_Stop_IT+0x48>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d122      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d11b      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0202 	mvn.w	r2, #2
 8003e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f9b1 	bl	80041d6 <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9a4 	bl	80041c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f9b3 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d122      	bne.n	8003edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d11b      	bne.n	8003edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0204 	mvn.w	r2, #4
 8003eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f987 	bl	80041d6 <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f97a 	bl	80041c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f989 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d122      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0208 	mvn.w	r2, #8
 8003f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2204      	movs	r2, #4
 8003f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f95d 	bl	80041d6 <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f950 	bl	80041c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f95f 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d122      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d11b      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0210 	mvn.w	r2, #16
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f933 	bl	80041d6 <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f926 	bl	80041c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f935 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d10e      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d107      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0201 	mvn.w	r2, #1
 8003fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd ff40 	bl	8001e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	d10e      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d107      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fa77 	bl	80044ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d10e      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d107      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8f9 	bl	80041fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b20      	cmp	r3, #32
 8004014:	d10e      	bne.n	8004034 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b20      	cmp	r3, #32
 8004022:	d107      	bne.n	8004034 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0220 	mvn.w	r2, #32
 800402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa42 	bl	80044b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_TIM_ConfigClockSource+0x18>
 8004050:	2302      	movs	r3, #2
 8004052:	e0b3      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x180>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004072:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800407a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408c:	d03e      	beq.n	800410c <HAL_TIM_ConfigClockSource+0xd0>
 800408e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004092:	f200 8087 	bhi.w	80041a4 <HAL_TIM_ConfigClockSource+0x168>
 8004096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409a:	f000 8085 	beq.w	80041a8 <HAL_TIM_ConfigClockSource+0x16c>
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	d87f      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x168>
 80040a4:	2b70      	cmp	r3, #112	; 0x70
 80040a6:	d01a      	beq.n	80040de <HAL_TIM_ConfigClockSource+0xa2>
 80040a8:	2b70      	cmp	r3, #112	; 0x70
 80040aa:	d87b      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x168>
 80040ac:	2b60      	cmp	r3, #96	; 0x60
 80040ae:	d050      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x116>
 80040b0:	2b60      	cmp	r3, #96	; 0x60
 80040b2:	d877      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x168>
 80040b4:	2b50      	cmp	r3, #80	; 0x50
 80040b6:	d03c      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0xf6>
 80040b8:	2b50      	cmp	r3, #80	; 0x50
 80040ba:	d873      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x168>
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d058      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x136>
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d86f      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x168>
 80040c4:	2b30      	cmp	r3, #48	; 0x30
 80040c6:	d064      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0x156>
 80040c8:	2b30      	cmp	r3, #48	; 0x30
 80040ca:	d86b      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x168>
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d060      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0x156>
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d867      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x168>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d05c      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0x156>
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d05a      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80040dc:	e062      	b.n	80041a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6899      	ldr	r1, [r3, #8]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f000 f966 	bl	80043be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004100:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	609a      	str	r2, [r3, #8]
      break;
 800410a:	e04e      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6899      	ldr	r1, [r3, #8]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f000 f94f 	bl	80043be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800412e:	609a      	str	r2, [r3, #8]
      break;
 8004130:	e03b      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	461a      	mov	r2, r3
 8004140:	f000 f8c6 	bl	80042d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2150      	movs	r1, #80	; 0x50
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f91d 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8004150:	e02b      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	461a      	mov	r2, r3
 8004160:	f000 f8e4 	bl	800432c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2160      	movs	r1, #96	; 0x60
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f90d 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8004170:	e01b      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6859      	ldr	r1, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	461a      	mov	r2, r3
 8004180:	f000 f8a6 	bl	80042d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2140      	movs	r1, #64	; 0x40
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f8fd 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8004190:	e00b      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f000 f8f4 	bl	800438a <TIM_ITRx_SetConfig>
        break;
 80041a2:	e002      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041a4:	bf00      	nop
 80041a6:	e000      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a29      	ldr	r2, [pc, #164]	; (80042c4 <TIM_Base_SetConfig+0xb8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00b      	beq.n	800423c <TIM_Base_SetConfig+0x30>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422a:	d007      	beq.n	800423c <TIM_Base_SetConfig+0x30>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <TIM_Base_SetConfig+0xbc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_Base_SetConfig+0x30>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a25      	ldr	r2, [pc, #148]	; (80042cc <TIM_Base_SetConfig+0xc0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d108      	bne.n	800424e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <TIM_Base_SetConfig+0xb8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00b      	beq.n	800426e <TIM_Base_SetConfig+0x62>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d007      	beq.n	800426e <TIM_Base_SetConfig+0x62>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <TIM_Base_SetConfig+0xbc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_Base_SetConfig+0x62>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a18      	ldr	r2, [pc, #96]	; (80042cc <TIM_Base_SetConfig+0xc0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d108      	bne.n	8004280 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <TIM_Base_SetConfig+0xb8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d103      	bne.n	80042b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	615a      	str	r2, [r3, #20]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40000800 	.word	0x40000800

080042d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f023 0201 	bic.w	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f023 030a 	bic.w	r3, r3, #10
 800430c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f023 0210 	bic.w	r2, r3, #16
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004356:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	031b      	lsls	r3, r3, #12
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004368:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f043 0307 	orr.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043be:	b480      	push	{r7}
 80043c0:	b087      	sub	sp, #28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	021a      	lsls	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	609a      	str	r2, [r3, #8]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004410:	2302      	movs	r3, #2
 8004412:	e046      	b.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004460:	d009      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10c      	bne.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4313      	orrs	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800

080044b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr

080044ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e03f      	b.n	800456e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fd ff8e 	bl	8002424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800451e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f905 	bl	8004730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004534:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004544:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004554:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08a      	sub	sp, #40	; 0x28
 800457a:	af02      	add	r7, sp, #8
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b20      	cmp	r3, #32
 8004594:	d17c      	bne.n	8004690 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <HAL_UART_Transmit+0x2c>
 800459c:	88fb      	ldrh	r3, [r7, #6]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e075      	b.n	8004692 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_UART_Transmit+0x3e>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e06e      	b.n	8004692 <HAL_UART_Transmit+0x11c>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2221      	movs	r2, #33	; 0x21
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ca:	f7fd fff5 	bl	80025b8 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e4:	d108      	bne.n	80045f8 <HAL_UART_Transmit+0x82>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e003      	b.n	8004600 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004608:	e02a      	b.n	8004660 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	2180      	movs	r1, #128	; 0x80
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f840 	bl	800469a <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e036      	b.n	8004692 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	3302      	adds	r3, #2
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e007      	b.n	8004652 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	3301      	adds	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1cf      	bne.n	800460a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2200      	movs	r2, #0
 8004672:	2140      	movs	r1, #64	; 0x40
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f810 	bl	800469a <UART_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e006      	b.n	8004692 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	e000      	b.n	8004692 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004690:	2302      	movs	r3, #2
  }
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	4613      	mov	r3, r2
 80046a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046aa:	e02c      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d028      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <UART_WaitOnFlagUntilTimeout+0x30>
 80046ba:	f7fd ff7d 	bl	80025b8 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d21d      	bcs.n	8004706 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046d8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0201 	bic.w	r2, r2, #1
 80046e8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e00f      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	429a      	cmp	r2, r3
 8004722:	d0c3      	beq.n	80046ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800476a:	f023 030c 	bic.w	r3, r3, #12
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	430b      	orrs	r3, r1
 8004776:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2c      	ldr	r2, [pc, #176]	; (8004844 <UART_SetConfig+0x114>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d103      	bne.n	80047a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004798:	f7fe fe16 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	e002      	b.n	80047a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047a0:	f7fe fdfe 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 80047a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009a      	lsls	r2, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	4a22      	ldr	r2, [pc, #136]	; (8004848 <UART_SetConfig+0x118>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	0119      	lsls	r1, r3, #4
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009a      	lsls	r2, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047dc:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <UART_SetConfig+0x118>)
 80047de:	fba3 0302 	umull	r0, r3, r3, r2
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	2064      	movs	r0, #100	; 0x64
 80047e6:	fb00 f303 	mul.w	r3, r0, r3
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	3332      	adds	r3, #50	; 0x32
 80047f0:	4a15      	ldr	r2, [pc, #84]	; (8004848 <UART_SetConfig+0x118>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fc:	4419      	add	r1, r3
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	009a      	lsls	r2, r3, #2
 8004808:	441a      	add	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	fbb2 f2f3 	udiv	r2, r2, r3
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <UART_SetConfig+0x118>)
 8004816:	fba3 0302 	umull	r0, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2064      	movs	r0, #100	; 0x64
 800481e:	fb00 f303 	mul.w	r3, r0, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	; 0x32
 8004828:	4a07      	ldr	r2, [pc, #28]	; (8004848 <UART_SetConfig+0x118>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 020f 	and.w	r2, r3, #15
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	440a      	add	r2, r1
 800483a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40013800 	.word	0x40013800
 8004848:	51eb851f 	.word	0x51eb851f

0800484c <__errno>:
 800484c:	4b01      	ldr	r3, [pc, #4]	; (8004854 <__errno+0x8>)
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000024 	.word	0x20000024

08004858 <__libc_init_array>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	2600      	movs	r6, #0
 800485c:	4d0c      	ldr	r5, [pc, #48]	; (8004890 <__libc_init_array+0x38>)
 800485e:	4c0d      	ldr	r4, [pc, #52]	; (8004894 <__libc_init_array+0x3c>)
 8004860:	1b64      	subs	r4, r4, r5
 8004862:	10a4      	asrs	r4, r4, #2
 8004864:	42a6      	cmp	r6, r4
 8004866:	d109      	bne.n	800487c <__libc_init_array+0x24>
 8004868:	f001 fa08 	bl	8005c7c <_init>
 800486c:	2600      	movs	r6, #0
 800486e:	4d0a      	ldr	r5, [pc, #40]	; (8004898 <__libc_init_array+0x40>)
 8004870:	4c0a      	ldr	r4, [pc, #40]	; (800489c <__libc_init_array+0x44>)
 8004872:	1b64      	subs	r4, r4, r5
 8004874:	10a4      	asrs	r4, r4, #2
 8004876:	42a6      	cmp	r6, r4
 8004878:	d105      	bne.n	8004886 <__libc_init_array+0x2e>
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004880:	4798      	blx	r3
 8004882:	3601      	adds	r6, #1
 8004884:	e7ee      	b.n	8004864 <__libc_init_array+0xc>
 8004886:	f855 3b04 	ldr.w	r3, [r5], #4
 800488a:	4798      	blx	r3
 800488c:	3601      	adds	r6, #1
 800488e:	e7f2      	b.n	8004876 <__libc_init_array+0x1e>
 8004890:	08005efc 	.word	0x08005efc
 8004894:	08005efc 	.word	0x08005efc
 8004898:	08005efc 	.word	0x08005efc
 800489c:	08005f00 	.word	0x08005f00

080048a0 <memset>:
 80048a0:	4603      	mov	r3, r0
 80048a2:	4402      	add	r2, r0
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d100      	bne.n	80048aa <memset+0xa>
 80048a8:	4770      	bx	lr
 80048aa:	f803 1b01 	strb.w	r1, [r3], #1
 80048ae:	e7f9      	b.n	80048a4 <memset+0x4>

080048b0 <iprintf>:
 80048b0:	b40f      	push	{r0, r1, r2, r3}
 80048b2:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <iprintf+0x2c>)
 80048b4:	b513      	push	{r0, r1, r4, lr}
 80048b6:	681c      	ldr	r4, [r3, #0]
 80048b8:	b124      	cbz	r4, 80048c4 <iprintf+0x14>
 80048ba:	69a3      	ldr	r3, [r4, #24]
 80048bc:	b913      	cbnz	r3, 80048c4 <iprintf+0x14>
 80048be:	4620      	mov	r0, r4
 80048c0:	f000 fa7a 	bl	8004db8 <__sinit>
 80048c4:	ab05      	add	r3, sp, #20
 80048c6:	4620      	mov	r0, r4
 80048c8:	9a04      	ldr	r2, [sp, #16]
 80048ca:	68a1      	ldr	r1, [r4, #8]
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	f000 fdd9 	bl	8005484 <_vfiprintf_r>
 80048d2:	b002      	add	sp, #8
 80048d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d8:	b004      	add	sp, #16
 80048da:	4770      	bx	lr
 80048dc:	20000024 	.word	0x20000024

080048e0 <_puts_r>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	460e      	mov	r6, r1
 80048e4:	4605      	mov	r5, r0
 80048e6:	b118      	cbz	r0, 80048f0 <_puts_r+0x10>
 80048e8:	6983      	ldr	r3, [r0, #24]
 80048ea:	b90b      	cbnz	r3, 80048f0 <_puts_r+0x10>
 80048ec:	f000 fa64 	bl	8004db8 <__sinit>
 80048f0:	69ab      	ldr	r3, [r5, #24]
 80048f2:	68ac      	ldr	r4, [r5, #8]
 80048f4:	b913      	cbnz	r3, 80048fc <_puts_r+0x1c>
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 fa5e 	bl	8004db8 <__sinit>
 80048fc:	4b2c      	ldr	r3, [pc, #176]	; (80049b0 <_puts_r+0xd0>)
 80048fe:	429c      	cmp	r4, r3
 8004900:	d120      	bne.n	8004944 <_puts_r+0x64>
 8004902:	686c      	ldr	r4, [r5, #4]
 8004904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004906:	07db      	lsls	r3, r3, #31
 8004908:	d405      	bmi.n	8004916 <_puts_r+0x36>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	0598      	lsls	r0, r3, #22
 800490e:	d402      	bmi.n	8004916 <_puts_r+0x36>
 8004910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004912:	f000 faef 	bl	8004ef4 <__retarget_lock_acquire_recursive>
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	0719      	lsls	r1, r3, #28
 800491a:	d51d      	bpl.n	8004958 <_puts_r+0x78>
 800491c:	6923      	ldr	r3, [r4, #16]
 800491e:	b1db      	cbz	r3, 8004958 <_puts_r+0x78>
 8004920:	3e01      	subs	r6, #1
 8004922:	68a3      	ldr	r3, [r4, #8]
 8004924:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004928:	3b01      	subs	r3, #1
 800492a:	60a3      	str	r3, [r4, #8]
 800492c:	bb39      	cbnz	r1, 800497e <_puts_r+0x9e>
 800492e:	2b00      	cmp	r3, #0
 8004930:	da38      	bge.n	80049a4 <_puts_r+0xc4>
 8004932:	4622      	mov	r2, r4
 8004934:	210a      	movs	r1, #10
 8004936:	4628      	mov	r0, r5
 8004938:	f000 f868 	bl	8004a0c <__swbuf_r>
 800493c:	3001      	adds	r0, #1
 800493e:	d011      	beq.n	8004964 <_puts_r+0x84>
 8004940:	250a      	movs	r5, #10
 8004942:	e011      	b.n	8004968 <_puts_r+0x88>
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <_puts_r+0xd4>)
 8004946:	429c      	cmp	r4, r3
 8004948:	d101      	bne.n	800494e <_puts_r+0x6e>
 800494a:	68ac      	ldr	r4, [r5, #8]
 800494c:	e7da      	b.n	8004904 <_puts_r+0x24>
 800494e:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <_puts_r+0xd8>)
 8004950:	429c      	cmp	r4, r3
 8004952:	bf08      	it	eq
 8004954:	68ec      	ldreq	r4, [r5, #12]
 8004956:	e7d5      	b.n	8004904 <_puts_r+0x24>
 8004958:	4621      	mov	r1, r4
 800495a:	4628      	mov	r0, r5
 800495c:	f000 f8a8 	bl	8004ab0 <__swsetup_r>
 8004960:	2800      	cmp	r0, #0
 8004962:	d0dd      	beq.n	8004920 <_puts_r+0x40>
 8004964:	f04f 35ff 	mov.w	r5, #4294967295
 8004968:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800496a:	07da      	lsls	r2, r3, #31
 800496c:	d405      	bmi.n	800497a <_puts_r+0x9a>
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	059b      	lsls	r3, r3, #22
 8004972:	d402      	bmi.n	800497a <_puts_r+0x9a>
 8004974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004976:	f000 fabe 	bl	8004ef6 <__retarget_lock_release_recursive>
 800497a:	4628      	mov	r0, r5
 800497c:	bd70      	pop	{r4, r5, r6, pc}
 800497e:	2b00      	cmp	r3, #0
 8004980:	da04      	bge.n	800498c <_puts_r+0xac>
 8004982:	69a2      	ldr	r2, [r4, #24]
 8004984:	429a      	cmp	r2, r3
 8004986:	dc06      	bgt.n	8004996 <_puts_r+0xb6>
 8004988:	290a      	cmp	r1, #10
 800498a:	d004      	beq.n	8004996 <_puts_r+0xb6>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	6022      	str	r2, [r4, #0]
 8004992:	7019      	strb	r1, [r3, #0]
 8004994:	e7c5      	b.n	8004922 <_puts_r+0x42>
 8004996:	4622      	mov	r2, r4
 8004998:	4628      	mov	r0, r5
 800499a:	f000 f837 	bl	8004a0c <__swbuf_r>
 800499e:	3001      	adds	r0, #1
 80049a0:	d1bf      	bne.n	8004922 <_puts_r+0x42>
 80049a2:	e7df      	b.n	8004964 <_puts_r+0x84>
 80049a4:	250a      	movs	r5, #10
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	6022      	str	r2, [r4, #0]
 80049ac:	701d      	strb	r5, [r3, #0]
 80049ae:	e7db      	b.n	8004968 <_puts_r+0x88>
 80049b0:	08005e88 	.word	0x08005e88
 80049b4:	08005ea8 	.word	0x08005ea8
 80049b8:	08005e68 	.word	0x08005e68

080049bc <puts>:
 80049bc:	4b02      	ldr	r3, [pc, #8]	; (80049c8 <puts+0xc>)
 80049be:	4601      	mov	r1, r0
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	f7ff bf8d 	b.w	80048e0 <_puts_r>
 80049c6:	bf00      	nop
 80049c8:	20000024 	.word	0x20000024

080049cc <siprintf>:
 80049cc:	b40e      	push	{r1, r2, r3}
 80049ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049d2:	b500      	push	{lr}
 80049d4:	b09c      	sub	sp, #112	; 0x70
 80049d6:	ab1d      	add	r3, sp, #116	; 0x74
 80049d8:	9002      	str	r0, [sp, #8]
 80049da:	9006      	str	r0, [sp, #24]
 80049dc:	9107      	str	r1, [sp, #28]
 80049de:	9104      	str	r1, [sp, #16]
 80049e0:	4808      	ldr	r0, [pc, #32]	; (8004a04 <siprintf+0x38>)
 80049e2:	4909      	ldr	r1, [pc, #36]	; (8004a08 <siprintf+0x3c>)
 80049e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049e8:	9105      	str	r1, [sp, #20]
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	a902      	add	r1, sp, #8
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	f000 fc20 	bl	8005234 <_svfiprintf_r>
 80049f4:	2200      	movs	r2, #0
 80049f6:	9b02      	ldr	r3, [sp, #8]
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	b01c      	add	sp, #112	; 0x70
 80049fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a00:	b003      	add	sp, #12
 8004a02:	4770      	bx	lr
 8004a04:	20000024 	.word	0x20000024
 8004a08:	ffff0208 	.word	0xffff0208

08004a0c <__swbuf_r>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	460e      	mov	r6, r1
 8004a10:	4614      	mov	r4, r2
 8004a12:	4605      	mov	r5, r0
 8004a14:	b118      	cbz	r0, 8004a1e <__swbuf_r+0x12>
 8004a16:	6983      	ldr	r3, [r0, #24]
 8004a18:	b90b      	cbnz	r3, 8004a1e <__swbuf_r+0x12>
 8004a1a:	f000 f9cd 	bl	8004db8 <__sinit>
 8004a1e:	4b21      	ldr	r3, [pc, #132]	; (8004aa4 <__swbuf_r+0x98>)
 8004a20:	429c      	cmp	r4, r3
 8004a22:	d12b      	bne.n	8004a7c <__swbuf_r+0x70>
 8004a24:	686c      	ldr	r4, [r5, #4]
 8004a26:	69a3      	ldr	r3, [r4, #24]
 8004a28:	60a3      	str	r3, [r4, #8]
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	071a      	lsls	r2, r3, #28
 8004a2e:	d52f      	bpl.n	8004a90 <__swbuf_r+0x84>
 8004a30:	6923      	ldr	r3, [r4, #16]
 8004a32:	b36b      	cbz	r3, 8004a90 <__swbuf_r+0x84>
 8004a34:	6923      	ldr	r3, [r4, #16]
 8004a36:	6820      	ldr	r0, [r4, #0]
 8004a38:	b2f6      	uxtb	r6, r6
 8004a3a:	1ac0      	subs	r0, r0, r3
 8004a3c:	6963      	ldr	r3, [r4, #20]
 8004a3e:	4637      	mov	r7, r6
 8004a40:	4283      	cmp	r3, r0
 8004a42:	dc04      	bgt.n	8004a4e <__swbuf_r+0x42>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4628      	mov	r0, r5
 8004a48:	f000 f922 	bl	8004c90 <_fflush_r>
 8004a4c:	bb30      	cbnz	r0, 8004a9c <__swbuf_r+0x90>
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	3001      	adds	r0, #1
 8004a52:	3b01      	subs	r3, #1
 8004a54:	60a3      	str	r3, [r4, #8]
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	6022      	str	r2, [r4, #0]
 8004a5c:	701e      	strb	r6, [r3, #0]
 8004a5e:	6963      	ldr	r3, [r4, #20]
 8004a60:	4283      	cmp	r3, r0
 8004a62:	d004      	beq.n	8004a6e <__swbuf_r+0x62>
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	07db      	lsls	r3, r3, #31
 8004a68:	d506      	bpl.n	8004a78 <__swbuf_r+0x6c>
 8004a6a:	2e0a      	cmp	r6, #10
 8004a6c:	d104      	bne.n	8004a78 <__swbuf_r+0x6c>
 8004a6e:	4621      	mov	r1, r4
 8004a70:	4628      	mov	r0, r5
 8004a72:	f000 f90d 	bl	8004c90 <_fflush_r>
 8004a76:	b988      	cbnz	r0, 8004a9c <__swbuf_r+0x90>
 8004a78:	4638      	mov	r0, r7
 8004a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <__swbuf_r+0x9c>)
 8004a7e:	429c      	cmp	r4, r3
 8004a80:	d101      	bne.n	8004a86 <__swbuf_r+0x7a>
 8004a82:	68ac      	ldr	r4, [r5, #8]
 8004a84:	e7cf      	b.n	8004a26 <__swbuf_r+0x1a>
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <__swbuf_r+0xa0>)
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	bf08      	it	eq
 8004a8c:	68ec      	ldreq	r4, [r5, #12]
 8004a8e:	e7ca      	b.n	8004a26 <__swbuf_r+0x1a>
 8004a90:	4621      	mov	r1, r4
 8004a92:	4628      	mov	r0, r5
 8004a94:	f000 f80c 	bl	8004ab0 <__swsetup_r>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d0cb      	beq.n	8004a34 <__swbuf_r+0x28>
 8004a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004aa0:	e7ea      	b.n	8004a78 <__swbuf_r+0x6c>
 8004aa2:	bf00      	nop
 8004aa4:	08005e88 	.word	0x08005e88
 8004aa8:	08005ea8 	.word	0x08005ea8
 8004aac:	08005e68 	.word	0x08005e68

08004ab0 <__swsetup_r>:
 8004ab0:	4b32      	ldr	r3, [pc, #200]	; (8004b7c <__swsetup_r+0xcc>)
 8004ab2:	b570      	push	{r4, r5, r6, lr}
 8004ab4:	681d      	ldr	r5, [r3, #0]
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	460c      	mov	r4, r1
 8004aba:	b125      	cbz	r5, 8004ac6 <__swsetup_r+0x16>
 8004abc:	69ab      	ldr	r3, [r5, #24]
 8004abe:	b913      	cbnz	r3, 8004ac6 <__swsetup_r+0x16>
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f000 f979 	bl	8004db8 <__sinit>
 8004ac6:	4b2e      	ldr	r3, [pc, #184]	; (8004b80 <__swsetup_r+0xd0>)
 8004ac8:	429c      	cmp	r4, r3
 8004aca:	d10f      	bne.n	8004aec <__swsetup_r+0x3c>
 8004acc:	686c      	ldr	r4, [r5, #4]
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ad4:	0719      	lsls	r1, r3, #28
 8004ad6:	d42c      	bmi.n	8004b32 <__swsetup_r+0x82>
 8004ad8:	06dd      	lsls	r5, r3, #27
 8004ada:	d411      	bmi.n	8004b00 <__swsetup_r+0x50>
 8004adc:	2309      	movs	r3, #9
 8004ade:	6033      	str	r3, [r6, #0]
 8004ae0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	e03e      	b.n	8004b6a <__swsetup_r+0xba>
 8004aec:	4b25      	ldr	r3, [pc, #148]	; (8004b84 <__swsetup_r+0xd4>)
 8004aee:	429c      	cmp	r4, r3
 8004af0:	d101      	bne.n	8004af6 <__swsetup_r+0x46>
 8004af2:	68ac      	ldr	r4, [r5, #8]
 8004af4:	e7eb      	b.n	8004ace <__swsetup_r+0x1e>
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <__swsetup_r+0xd8>)
 8004af8:	429c      	cmp	r4, r3
 8004afa:	bf08      	it	eq
 8004afc:	68ec      	ldreq	r4, [r5, #12]
 8004afe:	e7e6      	b.n	8004ace <__swsetup_r+0x1e>
 8004b00:	0758      	lsls	r0, r3, #29
 8004b02:	d512      	bpl.n	8004b2a <__swsetup_r+0x7a>
 8004b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b06:	b141      	cbz	r1, 8004b1a <__swsetup_r+0x6a>
 8004b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b0c:	4299      	cmp	r1, r3
 8004b0e:	d002      	beq.n	8004b16 <__swsetup_r+0x66>
 8004b10:	4630      	mov	r0, r6
 8004b12:	f000 fa57 	bl	8004fc4 <_free_r>
 8004b16:	2300      	movs	r3, #0
 8004b18:	6363      	str	r3, [r4, #52]	; 0x34
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b20:	81a3      	strh	r3, [r4, #12]
 8004b22:	2300      	movs	r3, #0
 8004b24:	6063      	str	r3, [r4, #4]
 8004b26:	6923      	ldr	r3, [r4, #16]
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	f043 0308 	orr.w	r3, r3, #8
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	6923      	ldr	r3, [r4, #16]
 8004b34:	b94b      	cbnz	r3, 8004b4a <__swsetup_r+0x9a>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b40:	d003      	beq.n	8004b4a <__swsetup_r+0x9a>
 8004b42:	4621      	mov	r1, r4
 8004b44:	4630      	mov	r0, r6
 8004b46:	f000 f9fd 	bl	8004f44 <__smakebuf_r>
 8004b4a:	89a0      	ldrh	r0, [r4, #12]
 8004b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b50:	f010 0301 	ands.w	r3, r0, #1
 8004b54:	d00a      	beq.n	8004b6c <__swsetup_r+0xbc>
 8004b56:	2300      	movs	r3, #0
 8004b58:	60a3      	str	r3, [r4, #8]
 8004b5a:	6963      	ldr	r3, [r4, #20]
 8004b5c:	425b      	negs	r3, r3
 8004b5e:	61a3      	str	r3, [r4, #24]
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	b943      	cbnz	r3, 8004b76 <__swsetup_r+0xc6>
 8004b64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b68:	d1ba      	bne.n	8004ae0 <__swsetup_r+0x30>
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	0781      	lsls	r1, r0, #30
 8004b6e:	bf58      	it	pl
 8004b70:	6963      	ldrpl	r3, [r4, #20]
 8004b72:	60a3      	str	r3, [r4, #8]
 8004b74:	e7f4      	b.n	8004b60 <__swsetup_r+0xb0>
 8004b76:	2000      	movs	r0, #0
 8004b78:	e7f7      	b.n	8004b6a <__swsetup_r+0xba>
 8004b7a:	bf00      	nop
 8004b7c:	20000024 	.word	0x20000024
 8004b80:	08005e88 	.word	0x08005e88
 8004b84:	08005ea8 	.word	0x08005ea8
 8004b88:	08005e68 	.word	0x08005e68

08004b8c <__sflush_r>:
 8004b8c:	898a      	ldrh	r2, [r1, #12]
 8004b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b90:	4605      	mov	r5, r0
 8004b92:	0710      	lsls	r0, r2, #28
 8004b94:	460c      	mov	r4, r1
 8004b96:	d457      	bmi.n	8004c48 <__sflush_r+0xbc>
 8004b98:	684b      	ldr	r3, [r1, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	dc04      	bgt.n	8004ba8 <__sflush_r+0x1c>
 8004b9e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	dc01      	bgt.n	8004ba8 <__sflush_r+0x1c>
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004baa:	2e00      	cmp	r6, #0
 8004bac:	d0fa      	beq.n	8004ba4 <__sflush_r+0x18>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bb4:	682f      	ldr	r7, [r5, #0]
 8004bb6:	602b      	str	r3, [r5, #0]
 8004bb8:	d032      	beq.n	8004c20 <__sflush_r+0x94>
 8004bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	075a      	lsls	r2, r3, #29
 8004bc0:	d505      	bpl.n	8004bce <__sflush_r+0x42>
 8004bc2:	6863      	ldr	r3, [r4, #4]
 8004bc4:	1ac0      	subs	r0, r0, r3
 8004bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bc8:	b10b      	cbz	r3, 8004bce <__sflush_r+0x42>
 8004bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bcc:	1ac0      	subs	r0, r0, r3
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	6a21      	ldr	r1, [r4, #32]
 8004bd8:	47b0      	blx	r6
 8004bda:	1c43      	adds	r3, r0, #1
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	d106      	bne.n	8004bee <__sflush_r+0x62>
 8004be0:	6829      	ldr	r1, [r5, #0]
 8004be2:	291d      	cmp	r1, #29
 8004be4:	d82c      	bhi.n	8004c40 <__sflush_r+0xb4>
 8004be6:	4a29      	ldr	r2, [pc, #164]	; (8004c8c <__sflush_r+0x100>)
 8004be8:	40ca      	lsrs	r2, r1
 8004bea:	07d6      	lsls	r6, r2, #31
 8004bec:	d528      	bpl.n	8004c40 <__sflush_r+0xb4>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	6062      	str	r2, [r4, #4]
 8004bf2:	6922      	ldr	r2, [r4, #16]
 8004bf4:	04d9      	lsls	r1, r3, #19
 8004bf6:	6022      	str	r2, [r4, #0]
 8004bf8:	d504      	bpl.n	8004c04 <__sflush_r+0x78>
 8004bfa:	1c42      	adds	r2, r0, #1
 8004bfc:	d101      	bne.n	8004c02 <__sflush_r+0x76>
 8004bfe:	682b      	ldr	r3, [r5, #0]
 8004c00:	b903      	cbnz	r3, 8004c04 <__sflush_r+0x78>
 8004c02:	6560      	str	r0, [r4, #84]	; 0x54
 8004c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c06:	602f      	str	r7, [r5, #0]
 8004c08:	2900      	cmp	r1, #0
 8004c0a:	d0cb      	beq.n	8004ba4 <__sflush_r+0x18>
 8004c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c10:	4299      	cmp	r1, r3
 8004c12:	d002      	beq.n	8004c1a <__sflush_r+0x8e>
 8004c14:	4628      	mov	r0, r5
 8004c16:	f000 f9d5 	bl	8004fc4 <_free_r>
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c1e:	e7c2      	b.n	8004ba6 <__sflush_r+0x1a>
 8004c20:	6a21      	ldr	r1, [r4, #32]
 8004c22:	2301      	movs	r3, #1
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b0      	blx	r6
 8004c28:	1c41      	adds	r1, r0, #1
 8004c2a:	d1c7      	bne.n	8004bbc <__sflush_r+0x30>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0c4      	beq.n	8004bbc <__sflush_r+0x30>
 8004c32:	2b1d      	cmp	r3, #29
 8004c34:	d001      	beq.n	8004c3a <__sflush_r+0xae>
 8004c36:	2b16      	cmp	r3, #22
 8004c38:	d101      	bne.n	8004c3e <__sflush_r+0xb2>
 8004c3a:	602f      	str	r7, [r5, #0]
 8004c3c:	e7b2      	b.n	8004ba4 <__sflush_r+0x18>
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c44:	81a3      	strh	r3, [r4, #12]
 8004c46:	e7ae      	b.n	8004ba6 <__sflush_r+0x1a>
 8004c48:	690f      	ldr	r7, [r1, #16]
 8004c4a:	2f00      	cmp	r7, #0
 8004c4c:	d0aa      	beq.n	8004ba4 <__sflush_r+0x18>
 8004c4e:	0793      	lsls	r3, r2, #30
 8004c50:	bf18      	it	ne
 8004c52:	2300      	movne	r3, #0
 8004c54:	680e      	ldr	r6, [r1, #0]
 8004c56:	bf08      	it	eq
 8004c58:	694b      	ldreq	r3, [r1, #20]
 8004c5a:	1bf6      	subs	r6, r6, r7
 8004c5c:	600f      	str	r7, [r1, #0]
 8004c5e:	608b      	str	r3, [r1, #8]
 8004c60:	2e00      	cmp	r6, #0
 8004c62:	dd9f      	ble.n	8004ba4 <__sflush_r+0x18>
 8004c64:	4633      	mov	r3, r6
 8004c66:	463a      	mov	r2, r7
 8004c68:	4628      	mov	r0, r5
 8004c6a:	6a21      	ldr	r1, [r4, #32]
 8004c6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004c70:	47e0      	blx	ip
 8004c72:	2800      	cmp	r0, #0
 8004c74:	dc06      	bgt.n	8004c84 <__sflush_r+0xf8>
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c80:	81a3      	strh	r3, [r4, #12]
 8004c82:	e790      	b.n	8004ba6 <__sflush_r+0x1a>
 8004c84:	4407      	add	r7, r0
 8004c86:	1a36      	subs	r6, r6, r0
 8004c88:	e7ea      	b.n	8004c60 <__sflush_r+0xd4>
 8004c8a:	bf00      	nop
 8004c8c:	20400001 	.word	0x20400001

08004c90 <_fflush_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	690b      	ldr	r3, [r1, #16]
 8004c94:	4605      	mov	r5, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	b913      	cbnz	r3, 8004ca0 <_fflush_r+0x10>
 8004c9a:	2500      	movs	r5, #0
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	b118      	cbz	r0, 8004caa <_fflush_r+0x1a>
 8004ca2:	6983      	ldr	r3, [r0, #24]
 8004ca4:	b90b      	cbnz	r3, 8004caa <_fflush_r+0x1a>
 8004ca6:	f000 f887 	bl	8004db8 <__sinit>
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <_fflush_r+0x6c>)
 8004cac:	429c      	cmp	r4, r3
 8004cae:	d11b      	bne.n	8004ce8 <_fflush_r+0x58>
 8004cb0:	686c      	ldr	r4, [r5, #4]
 8004cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0ef      	beq.n	8004c9a <_fflush_r+0xa>
 8004cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cbc:	07d0      	lsls	r0, r2, #31
 8004cbe:	d404      	bmi.n	8004cca <_fflush_r+0x3a>
 8004cc0:	0599      	lsls	r1, r3, #22
 8004cc2:	d402      	bmi.n	8004cca <_fflush_r+0x3a>
 8004cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cc6:	f000 f915 	bl	8004ef4 <__retarget_lock_acquire_recursive>
 8004cca:	4628      	mov	r0, r5
 8004ccc:	4621      	mov	r1, r4
 8004cce:	f7ff ff5d 	bl	8004b8c <__sflush_r>
 8004cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	07da      	lsls	r2, r3, #31
 8004cd8:	d4e0      	bmi.n	8004c9c <_fflush_r+0xc>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	059b      	lsls	r3, r3, #22
 8004cde:	d4dd      	bmi.n	8004c9c <_fflush_r+0xc>
 8004ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ce2:	f000 f908 	bl	8004ef6 <__retarget_lock_release_recursive>
 8004ce6:	e7d9      	b.n	8004c9c <_fflush_r+0xc>
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <_fflush_r+0x70>)
 8004cea:	429c      	cmp	r4, r3
 8004cec:	d101      	bne.n	8004cf2 <_fflush_r+0x62>
 8004cee:	68ac      	ldr	r4, [r5, #8]
 8004cf0:	e7df      	b.n	8004cb2 <_fflush_r+0x22>
 8004cf2:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <_fflush_r+0x74>)
 8004cf4:	429c      	cmp	r4, r3
 8004cf6:	bf08      	it	eq
 8004cf8:	68ec      	ldreq	r4, [r5, #12]
 8004cfa:	e7da      	b.n	8004cb2 <_fflush_r+0x22>
 8004cfc:	08005e88 	.word	0x08005e88
 8004d00:	08005ea8 	.word	0x08005ea8
 8004d04:	08005e68 	.word	0x08005e68

08004d08 <std>:
 8004d08:	2300      	movs	r3, #0
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d16:	6083      	str	r3, [r0, #8]
 8004d18:	8181      	strh	r1, [r0, #12]
 8004d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d1c:	81c2      	strh	r2, [r0, #14]
 8004d1e:	6183      	str	r3, [r0, #24]
 8004d20:	4619      	mov	r1, r3
 8004d22:	2208      	movs	r2, #8
 8004d24:	305c      	adds	r0, #92	; 0x5c
 8004d26:	f7ff fdbb 	bl	80048a0 <memset>
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <std+0x38>)
 8004d2c:	6224      	str	r4, [r4, #32]
 8004d2e:	6263      	str	r3, [r4, #36]	; 0x24
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <std+0x3c>)
 8004d32:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <std+0x40>)
 8004d36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <std+0x44>)
 8004d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	bf00      	nop
 8004d40:	08005a31 	.word	0x08005a31
 8004d44:	08005a53 	.word	0x08005a53
 8004d48:	08005a8b 	.word	0x08005a8b
 8004d4c:	08005aaf 	.word	0x08005aaf

08004d50 <_cleanup_r>:
 8004d50:	4901      	ldr	r1, [pc, #4]	; (8004d58 <_cleanup_r+0x8>)
 8004d52:	f000 b8af 	b.w	8004eb4 <_fwalk_reent>
 8004d56:	bf00      	nop
 8004d58:	08004c91 	.word	0x08004c91

08004d5c <__sfmoreglue>:
 8004d5c:	2268      	movs	r2, #104	; 0x68
 8004d5e:	b570      	push	{r4, r5, r6, lr}
 8004d60:	1e4d      	subs	r5, r1, #1
 8004d62:	4355      	muls	r5, r2
 8004d64:	460e      	mov	r6, r1
 8004d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d6a:	f000 f993 	bl	8005094 <_malloc_r>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	b140      	cbz	r0, 8004d84 <__sfmoreglue+0x28>
 8004d72:	2100      	movs	r1, #0
 8004d74:	e9c0 1600 	strd	r1, r6, [r0]
 8004d78:	300c      	adds	r0, #12
 8004d7a:	60a0      	str	r0, [r4, #8]
 8004d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d80:	f7ff fd8e 	bl	80048a0 <memset>
 8004d84:	4620      	mov	r0, r4
 8004d86:	bd70      	pop	{r4, r5, r6, pc}

08004d88 <__sfp_lock_acquire>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__sfp_lock_acquire+0x8>)
 8004d8a:	f000 b8b3 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8004d8e:	bf00      	nop
 8004d90:	2000023d 	.word	0x2000023d

08004d94 <__sfp_lock_release>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__sfp_lock_release+0x8>)
 8004d96:	f000 b8ae 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	2000023d 	.word	0x2000023d

08004da0 <__sinit_lock_acquire>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__sinit_lock_acquire+0x8>)
 8004da2:	f000 b8a7 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8004da6:	bf00      	nop
 8004da8:	2000023e 	.word	0x2000023e

08004dac <__sinit_lock_release>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__sinit_lock_release+0x8>)
 8004dae:	f000 b8a2 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8004db2:	bf00      	nop
 8004db4:	2000023e 	.word	0x2000023e

08004db8 <__sinit>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	4604      	mov	r4, r0
 8004dbc:	f7ff fff0 	bl	8004da0 <__sinit_lock_acquire>
 8004dc0:	69a3      	ldr	r3, [r4, #24]
 8004dc2:	b11b      	cbz	r3, 8004dcc <__sinit+0x14>
 8004dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc8:	f7ff bff0 	b.w	8004dac <__sinit_lock_release>
 8004dcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004dd0:	6523      	str	r3, [r4, #80]	; 0x50
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <__sinit+0x68>)
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <__sinit+0x6c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	bf08      	it	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	4620      	mov	r0, r4
 8004de2:	bf08      	it	eq
 8004de4:	61a3      	streq	r3, [r4, #24]
 8004de6:	f000 f81f 	bl	8004e28 <__sfp>
 8004dea:	6060      	str	r0, [r4, #4]
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 f81b 	bl	8004e28 <__sfp>
 8004df2:	60a0      	str	r0, [r4, #8]
 8004df4:	4620      	mov	r0, r4
 8004df6:	f000 f817 	bl	8004e28 <__sfp>
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	60e0      	str	r0, [r4, #12]
 8004e00:	6860      	ldr	r0, [r4, #4]
 8004e02:	f7ff ff81 	bl	8004d08 <std>
 8004e06:	2201      	movs	r2, #1
 8004e08:	2109      	movs	r1, #9
 8004e0a:	68a0      	ldr	r0, [r4, #8]
 8004e0c:	f7ff ff7c 	bl	8004d08 <std>
 8004e10:	2202      	movs	r2, #2
 8004e12:	2112      	movs	r1, #18
 8004e14:	68e0      	ldr	r0, [r4, #12]
 8004e16:	f7ff ff77 	bl	8004d08 <std>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	61a3      	str	r3, [r4, #24]
 8004e1e:	e7d1      	b.n	8004dc4 <__sinit+0xc>
 8004e20:	08005e64 	.word	0x08005e64
 8004e24:	08004d51 	.word	0x08004d51

08004e28 <__sfp>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	4607      	mov	r7, r0
 8004e2c:	f7ff ffac 	bl	8004d88 <__sfp_lock_acquire>
 8004e30:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <__sfp+0x84>)
 8004e32:	681e      	ldr	r6, [r3, #0]
 8004e34:	69b3      	ldr	r3, [r6, #24]
 8004e36:	b913      	cbnz	r3, 8004e3e <__sfp+0x16>
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f7ff ffbd 	bl	8004db8 <__sinit>
 8004e3e:	3648      	adds	r6, #72	; 0x48
 8004e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	d503      	bpl.n	8004e50 <__sfp+0x28>
 8004e48:	6833      	ldr	r3, [r6, #0]
 8004e4a:	b30b      	cbz	r3, 8004e90 <__sfp+0x68>
 8004e4c:	6836      	ldr	r6, [r6, #0]
 8004e4e:	e7f7      	b.n	8004e40 <__sfp+0x18>
 8004e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e54:	b9d5      	cbnz	r5, 8004e8c <__sfp+0x64>
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <__sfp+0x88>)
 8004e58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e5c:	60e3      	str	r3, [r4, #12]
 8004e5e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e60:	f000 f847 	bl	8004ef2 <__retarget_lock_init_recursive>
 8004e64:	f7ff ff96 	bl	8004d94 <__sfp_lock_release>
 8004e68:	2208      	movs	r2, #8
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e74:	6025      	str	r5, [r4, #0]
 8004e76:	61a5      	str	r5, [r4, #24]
 8004e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e7c:	f7ff fd10 	bl	80048a0 <memset>
 8004e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e88:	4620      	mov	r0, r4
 8004e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e8c:	3468      	adds	r4, #104	; 0x68
 8004e8e:	e7d9      	b.n	8004e44 <__sfp+0x1c>
 8004e90:	2104      	movs	r1, #4
 8004e92:	4638      	mov	r0, r7
 8004e94:	f7ff ff62 	bl	8004d5c <__sfmoreglue>
 8004e98:	4604      	mov	r4, r0
 8004e9a:	6030      	str	r0, [r6, #0]
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d1d5      	bne.n	8004e4c <__sfp+0x24>
 8004ea0:	f7ff ff78 	bl	8004d94 <__sfp_lock_release>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	e7ee      	b.n	8004e88 <__sfp+0x60>
 8004eaa:	bf00      	nop
 8004eac:	08005e64 	.word	0x08005e64
 8004eb0:	ffff0001 	.word	0xffff0001

08004eb4 <_fwalk_reent>:
 8004eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb8:	4606      	mov	r6, r0
 8004eba:	4688      	mov	r8, r1
 8004ebc:	2700      	movs	r7, #0
 8004ebe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ec6:	f1b9 0901 	subs.w	r9, r9, #1
 8004eca:	d505      	bpl.n	8004ed8 <_fwalk_reent+0x24>
 8004ecc:	6824      	ldr	r4, [r4, #0]
 8004ece:	2c00      	cmp	r4, #0
 8004ed0:	d1f7      	bne.n	8004ec2 <_fwalk_reent+0xe>
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed8:	89ab      	ldrh	r3, [r5, #12]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d907      	bls.n	8004eee <_fwalk_reent+0x3a>
 8004ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	d003      	beq.n	8004eee <_fwalk_reent+0x3a>
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	4630      	mov	r0, r6
 8004eea:	47c0      	blx	r8
 8004eec:	4307      	orrs	r7, r0
 8004eee:	3568      	adds	r5, #104	; 0x68
 8004ef0:	e7e9      	b.n	8004ec6 <_fwalk_reent+0x12>

08004ef2 <__retarget_lock_init_recursive>:
 8004ef2:	4770      	bx	lr

08004ef4 <__retarget_lock_acquire_recursive>:
 8004ef4:	4770      	bx	lr

08004ef6 <__retarget_lock_release_recursive>:
 8004ef6:	4770      	bx	lr

08004ef8 <__swhatbuf_r>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	460e      	mov	r6, r1
 8004efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f00:	4614      	mov	r4, r2
 8004f02:	2900      	cmp	r1, #0
 8004f04:	461d      	mov	r5, r3
 8004f06:	b096      	sub	sp, #88	; 0x58
 8004f08:	da08      	bge.n	8004f1c <__swhatbuf_r+0x24>
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f10:	602a      	str	r2, [r5, #0]
 8004f12:	061a      	lsls	r2, r3, #24
 8004f14:	d410      	bmi.n	8004f38 <__swhatbuf_r+0x40>
 8004f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f1a:	e00e      	b.n	8004f3a <__swhatbuf_r+0x42>
 8004f1c:	466a      	mov	r2, sp
 8004f1e:	f000 fded 	bl	8005afc <_fstat_r>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	dbf1      	blt.n	8004f0a <__swhatbuf_r+0x12>
 8004f26:	9a01      	ldr	r2, [sp, #4]
 8004f28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f30:	425a      	negs	r2, r3
 8004f32:	415a      	adcs	r2, r3
 8004f34:	602a      	str	r2, [r5, #0]
 8004f36:	e7ee      	b.n	8004f16 <__swhatbuf_r+0x1e>
 8004f38:	2340      	movs	r3, #64	; 0x40
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	b016      	add	sp, #88	; 0x58
 8004f40:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f44 <__smakebuf_r>:
 8004f44:	898b      	ldrh	r3, [r1, #12]
 8004f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f48:	079d      	lsls	r5, r3, #30
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	d507      	bpl.n	8004f60 <__smakebuf_r+0x1c>
 8004f50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	6123      	str	r3, [r4, #16]
 8004f58:	2301      	movs	r3, #1
 8004f5a:	6163      	str	r3, [r4, #20]
 8004f5c:	b002      	add	sp, #8
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	466a      	mov	r2, sp
 8004f62:	ab01      	add	r3, sp, #4
 8004f64:	f7ff ffc8 	bl	8004ef8 <__swhatbuf_r>
 8004f68:	9900      	ldr	r1, [sp, #0]
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f000 f891 	bl	8005094 <_malloc_r>
 8004f72:	b948      	cbnz	r0, 8004f88 <__smakebuf_r+0x44>
 8004f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f78:	059a      	lsls	r2, r3, #22
 8004f7a:	d4ef      	bmi.n	8004f5c <__smakebuf_r+0x18>
 8004f7c:	f023 0303 	bic.w	r3, r3, #3
 8004f80:	f043 0302 	orr.w	r3, r3, #2
 8004f84:	81a3      	strh	r3, [r4, #12]
 8004f86:	e7e3      	b.n	8004f50 <__smakebuf_r+0xc>
 8004f88:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <__smakebuf_r+0x7c>)
 8004f8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	6020      	str	r0, [r4, #0]
 8004f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f94:	81a3      	strh	r3, [r4, #12]
 8004f96:	9b00      	ldr	r3, [sp, #0]
 8004f98:	6120      	str	r0, [r4, #16]
 8004f9a:	6163      	str	r3, [r4, #20]
 8004f9c:	9b01      	ldr	r3, [sp, #4]
 8004f9e:	b15b      	cbz	r3, 8004fb8 <__smakebuf_r+0x74>
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa6:	f000 fdbb 	bl	8005b20 <_isatty_r>
 8004faa:	b128      	cbz	r0, 8004fb8 <__smakebuf_r+0x74>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	89a0      	ldrh	r0, [r4, #12]
 8004fba:	4305      	orrs	r5, r0
 8004fbc:	81a5      	strh	r5, [r4, #12]
 8004fbe:	e7cd      	b.n	8004f5c <__smakebuf_r+0x18>
 8004fc0:	08004d51 	.word	0x08004d51

08004fc4 <_free_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	2900      	cmp	r1, #0
 8004fca:	d040      	beq.n	800504e <_free_r+0x8a>
 8004fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fd0:	1f0c      	subs	r4, r1, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bfb8      	it	lt
 8004fd6:	18e4      	addlt	r4, r4, r3
 8004fd8:	f000 fdfa 	bl	8005bd0 <__malloc_lock>
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <_free_r+0x8c>)
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	b933      	cbnz	r3, 8004ff0 <_free_r+0x2c>
 8004fe2:	6063      	str	r3, [r4, #4]
 8004fe4:	6014      	str	r4, [r2, #0]
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fec:	f000 bdf6 	b.w	8005bdc <__malloc_unlock>
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d908      	bls.n	8005006 <_free_r+0x42>
 8004ff4:	6820      	ldr	r0, [r4, #0]
 8004ff6:	1821      	adds	r1, r4, r0
 8004ff8:	428b      	cmp	r3, r1
 8004ffa:	bf01      	itttt	eq
 8004ffc:	6819      	ldreq	r1, [r3, #0]
 8004ffe:	685b      	ldreq	r3, [r3, #4]
 8005000:	1809      	addeq	r1, r1, r0
 8005002:	6021      	streq	r1, [r4, #0]
 8005004:	e7ed      	b.n	8004fe2 <_free_r+0x1e>
 8005006:	461a      	mov	r2, r3
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	b10b      	cbz	r3, 8005010 <_free_r+0x4c>
 800500c:	42a3      	cmp	r3, r4
 800500e:	d9fa      	bls.n	8005006 <_free_r+0x42>
 8005010:	6811      	ldr	r1, [r2, #0]
 8005012:	1850      	adds	r0, r2, r1
 8005014:	42a0      	cmp	r0, r4
 8005016:	d10b      	bne.n	8005030 <_free_r+0x6c>
 8005018:	6820      	ldr	r0, [r4, #0]
 800501a:	4401      	add	r1, r0
 800501c:	1850      	adds	r0, r2, r1
 800501e:	4283      	cmp	r3, r0
 8005020:	6011      	str	r1, [r2, #0]
 8005022:	d1e0      	bne.n	8004fe6 <_free_r+0x22>
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4401      	add	r1, r0
 800502a:	6011      	str	r1, [r2, #0]
 800502c:	6053      	str	r3, [r2, #4]
 800502e:	e7da      	b.n	8004fe6 <_free_r+0x22>
 8005030:	d902      	bls.n	8005038 <_free_r+0x74>
 8005032:	230c      	movs	r3, #12
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	e7d6      	b.n	8004fe6 <_free_r+0x22>
 8005038:	6820      	ldr	r0, [r4, #0]
 800503a:	1821      	adds	r1, r4, r0
 800503c:	428b      	cmp	r3, r1
 800503e:	bf01      	itttt	eq
 8005040:	6819      	ldreq	r1, [r3, #0]
 8005042:	685b      	ldreq	r3, [r3, #4]
 8005044:	1809      	addeq	r1, r1, r0
 8005046:	6021      	streq	r1, [r4, #0]
 8005048:	6063      	str	r3, [r4, #4]
 800504a:	6054      	str	r4, [r2, #4]
 800504c:	e7cb      	b.n	8004fe6 <_free_r+0x22>
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	20000240 	.word	0x20000240

08005054 <sbrk_aligned>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	4e0e      	ldr	r6, [pc, #56]	; (8005090 <sbrk_aligned+0x3c>)
 8005058:	460c      	mov	r4, r1
 800505a:	6831      	ldr	r1, [r6, #0]
 800505c:	4605      	mov	r5, r0
 800505e:	b911      	cbnz	r1, 8005066 <sbrk_aligned+0x12>
 8005060:	f000 fcd6 	bl	8005a10 <_sbrk_r>
 8005064:	6030      	str	r0, [r6, #0]
 8005066:	4621      	mov	r1, r4
 8005068:	4628      	mov	r0, r5
 800506a:	f000 fcd1 	bl	8005a10 <_sbrk_r>
 800506e:	1c43      	adds	r3, r0, #1
 8005070:	d00a      	beq.n	8005088 <sbrk_aligned+0x34>
 8005072:	1cc4      	adds	r4, r0, #3
 8005074:	f024 0403 	bic.w	r4, r4, #3
 8005078:	42a0      	cmp	r0, r4
 800507a:	d007      	beq.n	800508c <sbrk_aligned+0x38>
 800507c:	1a21      	subs	r1, r4, r0
 800507e:	4628      	mov	r0, r5
 8005080:	f000 fcc6 	bl	8005a10 <_sbrk_r>
 8005084:	3001      	adds	r0, #1
 8005086:	d101      	bne.n	800508c <sbrk_aligned+0x38>
 8005088:	f04f 34ff 	mov.w	r4, #4294967295
 800508c:	4620      	mov	r0, r4
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	20000244 	.word	0x20000244

08005094 <_malloc_r>:
 8005094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005098:	1ccd      	adds	r5, r1, #3
 800509a:	f025 0503 	bic.w	r5, r5, #3
 800509e:	3508      	adds	r5, #8
 80050a0:	2d0c      	cmp	r5, #12
 80050a2:	bf38      	it	cc
 80050a4:	250c      	movcc	r5, #12
 80050a6:	2d00      	cmp	r5, #0
 80050a8:	4607      	mov	r7, r0
 80050aa:	db01      	blt.n	80050b0 <_malloc_r+0x1c>
 80050ac:	42a9      	cmp	r1, r5
 80050ae:	d905      	bls.n	80050bc <_malloc_r+0x28>
 80050b0:	230c      	movs	r3, #12
 80050b2:	2600      	movs	r6, #0
 80050b4:	603b      	str	r3, [r7, #0]
 80050b6:	4630      	mov	r0, r6
 80050b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050bc:	4e2e      	ldr	r6, [pc, #184]	; (8005178 <_malloc_r+0xe4>)
 80050be:	f000 fd87 	bl	8005bd0 <__malloc_lock>
 80050c2:	6833      	ldr	r3, [r6, #0]
 80050c4:	461c      	mov	r4, r3
 80050c6:	bb34      	cbnz	r4, 8005116 <_malloc_r+0x82>
 80050c8:	4629      	mov	r1, r5
 80050ca:	4638      	mov	r0, r7
 80050cc:	f7ff ffc2 	bl	8005054 <sbrk_aligned>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	4604      	mov	r4, r0
 80050d4:	d14d      	bne.n	8005172 <_malloc_r+0xde>
 80050d6:	6834      	ldr	r4, [r6, #0]
 80050d8:	4626      	mov	r6, r4
 80050da:	2e00      	cmp	r6, #0
 80050dc:	d140      	bne.n	8005160 <_malloc_r+0xcc>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	4631      	mov	r1, r6
 80050e2:	4638      	mov	r0, r7
 80050e4:	eb04 0803 	add.w	r8, r4, r3
 80050e8:	f000 fc92 	bl	8005a10 <_sbrk_r>
 80050ec:	4580      	cmp	r8, r0
 80050ee:	d13a      	bne.n	8005166 <_malloc_r+0xd2>
 80050f0:	6821      	ldr	r1, [r4, #0]
 80050f2:	3503      	adds	r5, #3
 80050f4:	1a6d      	subs	r5, r5, r1
 80050f6:	f025 0503 	bic.w	r5, r5, #3
 80050fa:	3508      	adds	r5, #8
 80050fc:	2d0c      	cmp	r5, #12
 80050fe:	bf38      	it	cc
 8005100:	250c      	movcc	r5, #12
 8005102:	4638      	mov	r0, r7
 8005104:	4629      	mov	r1, r5
 8005106:	f7ff ffa5 	bl	8005054 <sbrk_aligned>
 800510a:	3001      	adds	r0, #1
 800510c:	d02b      	beq.n	8005166 <_malloc_r+0xd2>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	442b      	add	r3, r5
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	e00e      	b.n	8005134 <_malloc_r+0xa0>
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	1b52      	subs	r2, r2, r5
 800511a:	d41e      	bmi.n	800515a <_malloc_r+0xc6>
 800511c:	2a0b      	cmp	r2, #11
 800511e:	d916      	bls.n	800514e <_malloc_r+0xba>
 8005120:	1961      	adds	r1, r4, r5
 8005122:	42a3      	cmp	r3, r4
 8005124:	6025      	str	r5, [r4, #0]
 8005126:	bf18      	it	ne
 8005128:	6059      	strne	r1, [r3, #4]
 800512a:	6863      	ldr	r3, [r4, #4]
 800512c:	bf08      	it	eq
 800512e:	6031      	streq	r1, [r6, #0]
 8005130:	5162      	str	r2, [r4, r5]
 8005132:	604b      	str	r3, [r1, #4]
 8005134:	4638      	mov	r0, r7
 8005136:	f104 060b 	add.w	r6, r4, #11
 800513a:	f000 fd4f 	bl	8005bdc <__malloc_unlock>
 800513e:	f026 0607 	bic.w	r6, r6, #7
 8005142:	1d23      	adds	r3, r4, #4
 8005144:	1af2      	subs	r2, r6, r3
 8005146:	d0b6      	beq.n	80050b6 <_malloc_r+0x22>
 8005148:	1b9b      	subs	r3, r3, r6
 800514a:	50a3      	str	r3, [r4, r2]
 800514c:	e7b3      	b.n	80050b6 <_malloc_r+0x22>
 800514e:	6862      	ldr	r2, [r4, #4]
 8005150:	42a3      	cmp	r3, r4
 8005152:	bf0c      	ite	eq
 8005154:	6032      	streq	r2, [r6, #0]
 8005156:	605a      	strne	r2, [r3, #4]
 8005158:	e7ec      	b.n	8005134 <_malloc_r+0xa0>
 800515a:	4623      	mov	r3, r4
 800515c:	6864      	ldr	r4, [r4, #4]
 800515e:	e7b2      	b.n	80050c6 <_malloc_r+0x32>
 8005160:	4634      	mov	r4, r6
 8005162:	6876      	ldr	r6, [r6, #4]
 8005164:	e7b9      	b.n	80050da <_malloc_r+0x46>
 8005166:	230c      	movs	r3, #12
 8005168:	4638      	mov	r0, r7
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	f000 fd36 	bl	8005bdc <__malloc_unlock>
 8005170:	e7a1      	b.n	80050b6 <_malloc_r+0x22>
 8005172:	6025      	str	r5, [r4, #0]
 8005174:	e7de      	b.n	8005134 <_malloc_r+0xa0>
 8005176:	bf00      	nop
 8005178:	20000240 	.word	0x20000240

0800517c <__ssputs_r>:
 800517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	688e      	ldr	r6, [r1, #8]
 8005182:	4682      	mov	sl, r0
 8005184:	429e      	cmp	r6, r3
 8005186:	460c      	mov	r4, r1
 8005188:	4690      	mov	r8, r2
 800518a:	461f      	mov	r7, r3
 800518c:	d838      	bhi.n	8005200 <__ssputs_r+0x84>
 800518e:	898a      	ldrh	r2, [r1, #12]
 8005190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005194:	d032      	beq.n	80051fc <__ssputs_r+0x80>
 8005196:	6825      	ldr	r5, [r4, #0]
 8005198:	6909      	ldr	r1, [r1, #16]
 800519a:	3301      	adds	r3, #1
 800519c:	eba5 0901 	sub.w	r9, r5, r1
 80051a0:	6965      	ldr	r5, [r4, #20]
 80051a2:	444b      	add	r3, r9
 80051a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051ac:	106d      	asrs	r5, r5, #1
 80051ae:	429d      	cmp	r5, r3
 80051b0:	bf38      	it	cc
 80051b2:	461d      	movcc	r5, r3
 80051b4:	0553      	lsls	r3, r2, #21
 80051b6:	d531      	bpl.n	800521c <__ssputs_r+0xa0>
 80051b8:	4629      	mov	r1, r5
 80051ba:	f7ff ff6b 	bl	8005094 <_malloc_r>
 80051be:	4606      	mov	r6, r0
 80051c0:	b950      	cbnz	r0, 80051d8 <__ssputs_r+0x5c>
 80051c2:	230c      	movs	r3, #12
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	f8ca 3000 	str.w	r3, [sl]
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d8:	464a      	mov	r2, r9
 80051da:	6921      	ldr	r1, [r4, #16]
 80051dc:	f000 fcd0 	bl	8005b80 <memcpy>
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	6126      	str	r6, [r4, #16]
 80051ee:	444e      	add	r6, r9
 80051f0:	6026      	str	r6, [r4, #0]
 80051f2:	463e      	mov	r6, r7
 80051f4:	6165      	str	r5, [r4, #20]
 80051f6:	eba5 0509 	sub.w	r5, r5, r9
 80051fa:	60a5      	str	r5, [r4, #8]
 80051fc:	42be      	cmp	r6, r7
 80051fe:	d900      	bls.n	8005202 <__ssputs_r+0x86>
 8005200:	463e      	mov	r6, r7
 8005202:	4632      	mov	r2, r6
 8005204:	4641      	mov	r1, r8
 8005206:	6820      	ldr	r0, [r4, #0]
 8005208:	f000 fcc8 	bl	8005b9c <memmove>
 800520c:	68a3      	ldr	r3, [r4, #8]
 800520e:	2000      	movs	r0, #0
 8005210:	1b9b      	subs	r3, r3, r6
 8005212:	60a3      	str	r3, [r4, #8]
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	4433      	add	r3, r6
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	e7db      	b.n	80051d4 <__ssputs_r+0x58>
 800521c:	462a      	mov	r2, r5
 800521e:	f000 fce3 	bl	8005be8 <_realloc_r>
 8005222:	4606      	mov	r6, r0
 8005224:	2800      	cmp	r0, #0
 8005226:	d1e1      	bne.n	80051ec <__ssputs_r+0x70>
 8005228:	4650      	mov	r0, sl
 800522a:	6921      	ldr	r1, [r4, #16]
 800522c:	f7ff feca 	bl	8004fc4 <_free_r>
 8005230:	e7c7      	b.n	80051c2 <__ssputs_r+0x46>
	...

08005234 <_svfiprintf_r>:
 8005234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	4698      	mov	r8, r3
 800523a:	898b      	ldrh	r3, [r1, #12]
 800523c:	4607      	mov	r7, r0
 800523e:	061b      	lsls	r3, r3, #24
 8005240:	460d      	mov	r5, r1
 8005242:	4614      	mov	r4, r2
 8005244:	b09d      	sub	sp, #116	; 0x74
 8005246:	d50e      	bpl.n	8005266 <_svfiprintf_r+0x32>
 8005248:	690b      	ldr	r3, [r1, #16]
 800524a:	b963      	cbnz	r3, 8005266 <_svfiprintf_r+0x32>
 800524c:	2140      	movs	r1, #64	; 0x40
 800524e:	f7ff ff21 	bl	8005094 <_malloc_r>
 8005252:	6028      	str	r0, [r5, #0]
 8005254:	6128      	str	r0, [r5, #16]
 8005256:	b920      	cbnz	r0, 8005262 <_svfiprintf_r+0x2e>
 8005258:	230c      	movs	r3, #12
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	e0d1      	b.n	8005406 <_svfiprintf_r+0x1d2>
 8005262:	2340      	movs	r3, #64	; 0x40
 8005264:	616b      	str	r3, [r5, #20]
 8005266:	2300      	movs	r3, #0
 8005268:	9309      	str	r3, [sp, #36]	; 0x24
 800526a:	2320      	movs	r3, #32
 800526c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005270:	2330      	movs	r3, #48	; 0x30
 8005272:	f04f 0901 	mov.w	r9, #1
 8005276:	f8cd 800c 	str.w	r8, [sp, #12]
 800527a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005420 <_svfiprintf_r+0x1ec>
 800527e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005282:	4623      	mov	r3, r4
 8005284:	469a      	mov	sl, r3
 8005286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800528a:	b10a      	cbz	r2, 8005290 <_svfiprintf_r+0x5c>
 800528c:	2a25      	cmp	r2, #37	; 0x25
 800528e:	d1f9      	bne.n	8005284 <_svfiprintf_r+0x50>
 8005290:	ebba 0b04 	subs.w	fp, sl, r4
 8005294:	d00b      	beq.n	80052ae <_svfiprintf_r+0x7a>
 8005296:	465b      	mov	r3, fp
 8005298:	4622      	mov	r2, r4
 800529a:	4629      	mov	r1, r5
 800529c:	4638      	mov	r0, r7
 800529e:	f7ff ff6d 	bl	800517c <__ssputs_r>
 80052a2:	3001      	adds	r0, #1
 80052a4:	f000 80aa 	beq.w	80053fc <_svfiprintf_r+0x1c8>
 80052a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052aa:	445a      	add	r2, fp
 80052ac:	9209      	str	r2, [sp, #36]	; 0x24
 80052ae:	f89a 3000 	ldrb.w	r3, [sl]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80a2 	beq.w	80053fc <_svfiprintf_r+0x1c8>
 80052b8:	2300      	movs	r3, #0
 80052ba:	f04f 32ff 	mov.w	r2, #4294967295
 80052be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052c2:	f10a 0a01 	add.w	sl, sl, #1
 80052c6:	9304      	str	r3, [sp, #16]
 80052c8:	9307      	str	r3, [sp, #28]
 80052ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052ce:	931a      	str	r3, [sp, #104]	; 0x68
 80052d0:	4654      	mov	r4, sl
 80052d2:	2205      	movs	r2, #5
 80052d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d8:	4851      	ldr	r0, [pc, #324]	; (8005420 <_svfiprintf_r+0x1ec>)
 80052da:	f000 fc43 	bl	8005b64 <memchr>
 80052de:	9a04      	ldr	r2, [sp, #16]
 80052e0:	b9d8      	cbnz	r0, 800531a <_svfiprintf_r+0xe6>
 80052e2:	06d0      	lsls	r0, r2, #27
 80052e4:	bf44      	itt	mi
 80052e6:	2320      	movmi	r3, #32
 80052e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ec:	0711      	lsls	r1, r2, #28
 80052ee:	bf44      	itt	mi
 80052f0:	232b      	movmi	r3, #43	; 0x2b
 80052f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052f6:	f89a 3000 	ldrb.w	r3, [sl]
 80052fa:	2b2a      	cmp	r3, #42	; 0x2a
 80052fc:	d015      	beq.n	800532a <_svfiprintf_r+0xf6>
 80052fe:	4654      	mov	r4, sl
 8005300:	2000      	movs	r0, #0
 8005302:	f04f 0c0a 	mov.w	ip, #10
 8005306:	9a07      	ldr	r2, [sp, #28]
 8005308:	4621      	mov	r1, r4
 800530a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800530e:	3b30      	subs	r3, #48	; 0x30
 8005310:	2b09      	cmp	r3, #9
 8005312:	d94e      	bls.n	80053b2 <_svfiprintf_r+0x17e>
 8005314:	b1b0      	cbz	r0, 8005344 <_svfiprintf_r+0x110>
 8005316:	9207      	str	r2, [sp, #28]
 8005318:	e014      	b.n	8005344 <_svfiprintf_r+0x110>
 800531a:	eba0 0308 	sub.w	r3, r0, r8
 800531e:	fa09 f303 	lsl.w	r3, r9, r3
 8005322:	4313      	orrs	r3, r2
 8005324:	46a2      	mov	sl, r4
 8005326:	9304      	str	r3, [sp, #16]
 8005328:	e7d2      	b.n	80052d0 <_svfiprintf_r+0x9c>
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	1d19      	adds	r1, r3, #4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	9103      	str	r1, [sp, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	bfbb      	ittet	lt
 8005336:	425b      	neglt	r3, r3
 8005338:	f042 0202 	orrlt.w	r2, r2, #2
 800533c:	9307      	strge	r3, [sp, #28]
 800533e:	9307      	strlt	r3, [sp, #28]
 8005340:	bfb8      	it	lt
 8005342:	9204      	strlt	r2, [sp, #16]
 8005344:	7823      	ldrb	r3, [r4, #0]
 8005346:	2b2e      	cmp	r3, #46	; 0x2e
 8005348:	d10c      	bne.n	8005364 <_svfiprintf_r+0x130>
 800534a:	7863      	ldrb	r3, [r4, #1]
 800534c:	2b2a      	cmp	r3, #42	; 0x2a
 800534e:	d135      	bne.n	80053bc <_svfiprintf_r+0x188>
 8005350:	9b03      	ldr	r3, [sp, #12]
 8005352:	3402      	adds	r4, #2
 8005354:	1d1a      	adds	r2, r3, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	9203      	str	r2, [sp, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	bfb8      	it	lt
 800535e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005362:	9305      	str	r3, [sp, #20]
 8005364:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005424 <_svfiprintf_r+0x1f0>
 8005368:	2203      	movs	r2, #3
 800536a:	4650      	mov	r0, sl
 800536c:	7821      	ldrb	r1, [r4, #0]
 800536e:	f000 fbf9 	bl	8005b64 <memchr>
 8005372:	b140      	cbz	r0, 8005386 <_svfiprintf_r+0x152>
 8005374:	2340      	movs	r3, #64	; 0x40
 8005376:	eba0 000a 	sub.w	r0, r0, sl
 800537a:	fa03 f000 	lsl.w	r0, r3, r0
 800537e:	9b04      	ldr	r3, [sp, #16]
 8005380:	3401      	adds	r4, #1
 8005382:	4303      	orrs	r3, r0
 8005384:	9304      	str	r3, [sp, #16]
 8005386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800538a:	2206      	movs	r2, #6
 800538c:	4826      	ldr	r0, [pc, #152]	; (8005428 <_svfiprintf_r+0x1f4>)
 800538e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005392:	f000 fbe7 	bl	8005b64 <memchr>
 8005396:	2800      	cmp	r0, #0
 8005398:	d038      	beq.n	800540c <_svfiprintf_r+0x1d8>
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <_svfiprintf_r+0x1f8>)
 800539c:	bb1b      	cbnz	r3, 80053e6 <_svfiprintf_r+0x1b2>
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	3307      	adds	r3, #7
 80053a2:	f023 0307 	bic.w	r3, r3, #7
 80053a6:	3308      	adds	r3, #8
 80053a8:	9303      	str	r3, [sp, #12]
 80053aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ac:	4433      	add	r3, r6
 80053ae:	9309      	str	r3, [sp, #36]	; 0x24
 80053b0:	e767      	b.n	8005282 <_svfiprintf_r+0x4e>
 80053b2:	460c      	mov	r4, r1
 80053b4:	2001      	movs	r0, #1
 80053b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80053ba:	e7a5      	b.n	8005308 <_svfiprintf_r+0xd4>
 80053bc:	2300      	movs	r3, #0
 80053be:	f04f 0c0a 	mov.w	ip, #10
 80053c2:	4619      	mov	r1, r3
 80053c4:	3401      	adds	r4, #1
 80053c6:	9305      	str	r3, [sp, #20]
 80053c8:	4620      	mov	r0, r4
 80053ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ce:	3a30      	subs	r2, #48	; 0x30
 80053d0:	2a09      	cmp	r2, #9
 80053d2:	d903      	bls.n	80053dc <_svfiprintf_r+0x1a8>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0c5      	beq.n	8005364 <_svfiprintf_r+0x130>
 80053d8:	9105      	str	r1, [sp, #20]
 80053da:	e7c3      	b.n	8005364 <_svfiprintf_r+0x130>
 80053dc:	4604      	mov	r4, r0
 80053de:	2301      	movs	r3, #1
 80053e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80053e4:	e7f0      	b.n	80053c8 <_svfiprintf_r+0x194>
 80053e6:	ab03      	add	r3, sp, #12
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	462a      	mov	r2, r5
 80053ec:	4638      	mov	r0, r7
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <_svfiprintf_r+0x1fc>)
 80053f0:	a904      	add	r1, sp, #16
 80053f2:	f3af 8000 	nop.w
 80053f6:	1c42      	adds	r2, r0, #1
 80053f8:	4606      	mov	r6, r0
 80053fa:	d1d6      	bne.n	80053aa <_svfiprintf_r+0x176>
 80053fc:	89ab      	ldrh	r3, [r5, #12]
 80053fe:	065b      	lsls	r3, r3, #25
 8005400:	f53f af2c 	bmi.w	800525c <_svfiprintf_r+0x28>
 8005404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005406:	b01d      	add	sp, #116	; 0x74
 8005408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540c:	ab03      	add	r3, sp, #12
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	462a      	mov	r2, r5
 8005412:	4638      	mov	r0, r7
 8005414:	4b06      	ldr	r3, [pc, #24]	; (8005430 <_svfiprintf_r+0x1fc>)
 8005416:	a904      	add	r1, sp, #16
 8005418:	f000 f9d4 	bl	80057c4 <_printf_i>
 800541c:	e7eb      	b.n	80053f6 <_svfiprintf_r+0x1c2>
 800541e:	bf00      	nop
 8005420:	08005ec8 	.word	0x08005ec8
 8005424:	08005ece 	.word	0x08005ece
 8005428:	08005ed2 	.word	0x08005ed2
 800542c:	00000000 	.word	0x00000000
 8005430:	0800517d 	.word	0x0800517d

08005434 <__sfputc_r>:
 8005434:	6893      	ldr	r3, [r2, #8]
 8005436:	b410      	push	{r4}
 8005438:	3b01      	subs	r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	6093      	str	r3, [r2, #8]
 800543e:	da07      	bge.n	8005450 <__sfputc_r+0x1c>
 8005440:	6994      	ldr	r4, [r2, #24]
 8005442:	42a3      	cmp	r3, r4
 8005444:	db01      	blt.n	800544a <__sfputc_r+0x16>
 8005446:	290a      	cmp	r1, #10
 8005448:	d102      	bne.n	8005450 <__sfputc_r+0x1c>
 800544a:	bc10      	pop	{r4}
 800544c:	f7ff bade 	b.w	8004a0c <__swbuf_r>
 8005450:	6813      	ldr	r3, [r2, #0]
 8005452:	1c58      	adds	r0, r3, #1
 8005454:	6010      	str	r0, [r2, #0]
 8005456:	7019      	strb	r1, [r3, #0]
 8005458:	4608      	mov	r0, r1
 800545a:	bc10      	pop	{r4}
 800545c:	4770      	bx	lr

0800545e <__sfputs_r>:
 800545e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005460:	4606      	mov	r6, r0
 8005462:	460f      	mov	r7, r1
 8005464:	4614      	mov	r4, r2
 8005466:	18d5      	adds	r5, r2, r3
 8005468:	42ac      	cmp	r4, r5
 800546a:	d101      	bne.n	8005470 <__sfputs_r+0x12>
 800546c:	2000      	movs	r0, #0
 800546e:	e007      	b.n	8005480 <__sfputs_r+0x22>
 8005470:	463a      	mov	r2, r7
 8005472:	4630      	mov	r0, r6
 8005474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005478:	f7ff ffdc 	bl	8005434 <__sfputc_r>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d1f3      	bne.n	8005468 <__sfputs_r+0xa>
 8005480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005484 <_vfiprintf_r>:
 8005484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005488:	460d      	mov	r5, r1
 800548a:	4614      	mov	r4, r2
 800548c:	4698      	mov	r8, r3
 800548e:	4606      	mov	r6, r0
 8005490:	b09d      	sub	sp, #116	; 0x74
 8005492:	b118      	cbz	r0, 800549c <_vfiprintf_r+0x18>
 8005494:	6983      	ldr	r3, [r0, #24]
 8005496:	b90b      	cbnz	r3, 800549c <_vfiprintf_r+0x18>
 8005498:	f7ff fc8e 	bl	8004db8 <__sinit>
 800549c:	4b89      	ldr	r3, [pc, #548]	; (80056c4 <_vfiprintf_r+0x240>)
 800549e:	429d      	cmp	r5, r3
 80054a0:	d11b      	bne.n	80054da <_vfiprintf_r+0x56>
 80054a2:	6875      	ldr	r5, [r6, #4]
 80054a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054a6:	07d9      	lsls	r1, r3, #31
 80054a8:	d405      	bmi.n	80054b6 <_vfiprintf_r+0x32>
 80054aa:	89ab      	ldrh	r3, [r5, #12]
 80054ac:	059a      	lsls	r2, r3, #22
 80054ae:	d402      	bmi.n	80054b6 <_vfiprintf_r+0x32>
 80054b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054b2:	f7ff fd1f 	bl	8004ef4 <__retarget_lock_acquire_recursive>
 80054b6:	89ab      	ldrh	r3, [r5, #12]
 80054b8:	071b      	lsls	r3, r3, #28
 80054ba:	d501      	bpl.n	80054c0 <_vfiprintf_r+0x3c>
 80054bc:	692b      	ldr	r3, [r5, #16]
 80054be:	b9eb      	cbnz	r3, 80054fc <_vfiprintf_r+0x78>
 80054c0:	4629      	mov	r1, r5
 80054c2:	4630      	mov	r0, r6
 80054c4:	f7ff faf4 	bl	8004ab0 <__swsetup_r>
 80054c8:	b1c0      	cbz	r0, 80054fc <_vfiprintf_r+0x78>
 80054ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054cc:	07dc      	lsls	r4, r3, #31
 80054ce:	d50e      	bpl.n	80054ee <_vfiprintf_r+0x6a>
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	b01d      	add	sp, #116	; 0x74
 80054d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054da:	4b7b      	ldr	r3, [pc, #492]	; (80056c8 <_vfiprintf_r+0x244>)
 80054dc:	429d      	cmp	r5, r3
 80054de:	d101      	bne.n	80054e4 <_vfiprintf_r+0x60>
 80054e0:	68b5      	ldr	r5, [r6, #8]
 80054e2:	e7df      	b.n	80054a4 <_vfiprintf_r+0x20>
 80054e4:	4b79      	ldr	r3, [pc, #484]	; (80056cc <_vfiprintf_r+0x248>)
 80054e6:	429d      	cmp	r5, r3
 80054e8:	bf08      	it	eq
 80054ea:	68f5      	ldreq	r5, [r6, #12]
 80054ec:	e7da      	b.n	80054a4 <_vfiprintf_r+0x20>
 80054ee:	89ab      	ldrh	r3, [r5, #12]
 80054f0:	0598      	lsls	r0, r3, #22
 80054f2:	d4ed      	bmi.n	80054d0 <_vfiprintf_r+0x4c>
 80054f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054f6:	f7ff fcfe 	bl	8004ef6 <__retarget_lock_release_recursive>
 80054fa:	e7e9      	b.n	80054d0 <_vfiprintf_r+0x4c>
 80054fc:	2300      	movs	r3, #0
 80054fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005500:	2320      	movs	r3, #32
 8005502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005506:	2330      	movs	r3, #48	; 0x30
 8005508:	f04f 0901 	mov.w	r9, #1
 800550c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005510:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80056d0 <_vfiprintf_r+0x24c>
 8005514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005518:	4623      	mov	r3, r4
 800551a:	469a      	mov	sl, r3
 800551c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005520:	b10a      	cbz	r2, 8005526 <_vfiprintf_r+0xa2>
 8005522:	2a25      	cmp	r2, #37	; 0x25
 8005524:	d1f9      	bne.n	800551a <_vfiprintf_r+0x96>
 8005526:	ebba 0b04 	subs.w	fp, sl, r4
 800552a:	d00b      	beq.n	8005544 <_vfiprintf_r+0xc0>
 800552c:	465b      	mov	r3, fp
 800552e:	4622      	mov	r2, r4
 8005530:	4629      	mov	r1, r5
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff ff93 	bl	800545e <__sfputs_r>
 8005538:	3001      	adds	r0, #1
 800553a:	f000 80aa 	beq.w	8005692 <_vfiprintf_r+0x20e>
 800553e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005540:	445a      	add	r2, fp
 8005542:	9209      	str	r2, [sp, #36]	; 0x24
 8005544:	f89a 3000 	ldrb.w	r3, [sl]
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80a2 	beq.w	8005692 <_vfiprintf_r+0x20e>
 800554e:	2300      	movs	r3, #0
 8005550:	f04f 32ff 	mov.w	r2, #4294967295
 8005554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005558:	f10a 0a01 	add.w	sl, sl, #1
 800555c:	9304      	str	r3, [sp, #16]
 800555e:	9307      	str	r3, [sp, #28]
 8005560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005564:	931a      	str	r3, [sp, #104]	; 0x68
 8005566:	4654      	mov	r4, sl
 8005568:	2205      	movs	r2, #5
 800556a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800556e:	4858      	ldr	r0, [pc, #352]	; (80056d0 <_vfiprintf_r+0x24c>)
 8005570:	f000 faf8 	bl	8005b64 <memchr>
 8005574:	9a04      	ldr	r2, [sp, #16]
 8005576:	b9d8      	cbnz	r0, 80055b0 <_vfiprintf_r+0x12c>
 8005578:	06d1      	lsls	r1, r2, #27
 800557a:	bf44      	itt	mi
 800557c:	2320      	movmi	r3, #32
 800557e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005582:	0713      	lsls	r3, r2, #28
 8005584:	bf44      	itt	mi
 8005586:	232b      	movmi	r3, #43	; 0x2b
 8005588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800558c:	f89a 3000 	ldrb.w	r3, [sl]
 8005590:	2b2a      	cmp	r3, #42	; 0x2a
 8005592:	d015      	beq.n	80055c0 <_vfiprintf_r+0x13c>
 8005594:	4654      	mov	r4, sl
 8005596:	2000      	movs	r0, #0
 8005598:	f04f 0c0a 	mov.w	ip, #10
 800559c:	9a07      	ldr	r2, [sp, #28]
 800559e:	4621      	mov	r1, r4
 80055a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055a4:	3b30      	subs	r3, #48	; 0x30
 80055a6:	2b09      	cmp	r3, #9
 80055a8:	d94e      	bls.n	8005648 <_vfiprintf_r+0x1c4>
 80055aa:	b1b0      	cbz	r0, 80055da <_vfiprintf_r+0x156>
 80055ac:	9207      	str	r2, [sp, #28]
 80055ae:	e014      	b.n	80055da <_vfiprintf_r+0x156>
 80055b0:	eba0 0308 	sub.w	r3, r0, r8
 80055b4:	fa09 f303 	lsl.w	r3, r9, r3
 80055b8:	4313      	orrs	r3, r2
 80055ba:	46a2      	mov	sl, r4
 80055bc:	9304      	str	r3, [sp, #16]
 80055be:	e7d2      	b.n	8005566 <_vfiprintf_r+0xe2>
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	1d19      	adds	r1, r3, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	9103      	str	r1, [sp, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bfbb      	ittet	lt
 80055cc:	425b      	neglt	r3, r3
 80055ce:	f042 0202 	orrlt.w	r2, r2, #2
 80055d2:	9307      	strge	r3, [sp, #28]
 80055d4:	9307      	strlt	r3, [sp, #28]
 80055d6:	bfb8      	it	lt
 80055d8:	9204      	strlt	r2, [sp, #16]
 80055da:	7823      	ldrb	r3, [r4, #0]
 80055dc:	2b2e      	cmp	r3, #46	; 0x2e
 80055de:	d10c      	bne.n	80055fa <_vfiprintf_r+0x176>
 80055e0:	7863      	ldrb	r3, [r4, #1]
 80055e2:	2b2a      	cmp	r3, #42	; 0x2a
 80055e4:	d135      	bne.n	8005652 <_vfiprintf_r+0x1ce>
 80055e6:	9b03      	ldr	r3, [sp, #12]
 80055e8:	3402      	adds	r4, #2
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	9203      	str	r2, [sp, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bfb8      	it	lt
 80055f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80055f8:	9305      	str	r3, [sp, #20]
 80055fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80056d4 <_vfiprintf_r+0x250>
 80055fe:	2203      	movs	r2, #3
 8005600:	4650      	mov	r0, sl
 8005602:	7821      	ldrb	r1, [r4, #0]
 8005604:	f000 faae 	bl	8005b64 <memchr>
 8005608:	b140      	cbz	r0, 800561c <_vfiprintf_r+0x198>
 800560a:	2340      	movs	r3, #64	; 0x40
 800560c:	eba0 000a 	sub.w	r0, r0, sl
 8005610:	fa03 f000 	lsl.w	r0, r3, r0
 8005614:	9b04      	ldr	r3, [sp, #16]
 8005616:	3401      	adds	r4, #1
 8005618:	4303      	orrs	r3, r0
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005620:	2206      	movs	r2, #6
 8005622:	482d      	ldr	r0, [pc, #180]	; (80056d8 <_vfiprintf_r+0x254>)
 8005624:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005628:	f000 fa9c 	bl	8005b64 <memchr>
 800562c:	2800      	cmp	r0, #0
 800562e:	d03f      	beq.n	80056b0 <_vfiprintf_r+0x22c>
 8005630:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <_vfiprintf_r+0x258>)
 8005632:	bb1b      	cbnz	r3, 800567c <_vfiprintf_r+0x1f8>
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	3307      	adds	r3, #7
 8005638:	f023 0307 	bic.w	r3, r3, #7
 800563c:	3308      	adds	r3, #8
 800563e:	9303      	str	r3, [sp, #12]
 8005640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005642:	443b      	add	r3, r7
 8005644:	9309      	str	r3, [sp, #36]	; 0x24
 8005646:	e767      	b.n	8005518 <_vfiprintf_r+0x94>
 8005648:	460c      	mov	r4, r1
 800564a:	2001      	movs	r0, #1
 800564c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005650:	e7a5      	b.n	800559e <_vfiprintf_r+0x11a>
 8005652:	2300      	movs	r3, #0
 8005654:	f04f 0c0a 	mov.w	ip, #10
 8005658:	4619      	mov	r1, r3
 800565a:	3401      	adds	r4, #1
 800565c:	9305      	str	r3, [sp, #20]
 800565e:	4620      	mov	r0, r4
 8005660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005664:	3a30      	subs	r2, #48	; 0x30
 8005666:	2a09      	cmp	r2, #9
 8005668:	d903      	bls.n	8005672 <_vfiprintf_r+0x1ee>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0c5      	beq.n	80055fa <_vfiprintf_r+0x176>
 800566e:	9105      	str	r1, [sp, #20]
 8005670:	e7c3      	b.n	80055fa <_vfiprintf_r+0x176>
 8005672:	4604      	mov	r4, r0
 8005674:	2301      	movs	r3, #1
 8005676:	fb0c 2101 	mla	r1, ip, r1, r2
 800567a:	e7f0      	b.n	800565e <_vfiprintf_r+0x1da>
 800567c:	ab03      	add	r3, sp, #12
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	462a      	mov	r2, r5
 8005682:	4630      	mov	r0, r6
 8005684:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <_vfiprintf_r+0x25c>)
 8005686:	a904      	add	r1, sp, #16
 8005688:	f3af 8000 	nop.w
 800568c:	4607      	mov	r7, r0
 800568e:	1c78      	adds	r0, r7, #1
 8005690:	d1d6      	bne.n	8005640 <_vfiprintf_r+0x1bc>
 8005692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005694:	07d9      	lsls	r1, r3, #31
 8005696:	d405      	bmi.n	80056a4 <_vfiprintf_r+0x220>
 8005698:	89ab      	ldrh	r3, [r5, #12]
 800569a:	059a      	lsls	r2, r3, #22
 800569c:	d402      	bmi.n	80056a4 <_vfiprintf_r+0x220>
 800569e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056a0:	f7ff fc29 	bl	8004ef6 <__retarget_lock_release_recursive>
 80056a4:	89ab      	ldrh	r3, [r5, #12]
 80056a6:	065b      	lsls	r3, r3, #25
 80056a8:	f53f af12 	bmi.w	80054d0 <_vfiprintf_r+0x4c>
 80056ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056ae:	e711      	b.n	80054d4 <_vfiprintf_r+0x50>
 80056b0:	ab03      	add	r3, sp, #12
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	462a      	mov	r2, r5
 80056b6:	4630      	mov	r0, r6
 80056b8:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <_vfiprintf_r+0x25c>)
 80056ba:	a904      	add	r1, sp, #16
 80056bc:	f000 f882 	bl	80057c4 <_printf_i>
 80056c0:	e7e4      	b.n	800568c <_vfiprintf_r+0x208>
 80056c2:	bf00      	nop
 80056c4:	08005e88 	.word	0x08005e88
 80056c8:	08005ea8 	.word	0x08005ea8
 80056cc:	08005e68 	.word	0x08005e68
 80056d0:	08005ec8 	.word	0x08005ec8
 80056d4:	08005ece 	.word	0x08005ece
 80056d8:	08005ed2 	.word	0x08005ed2
 80056dc:	00000000 	.word	0x00000000
 80056e0:	0800545f 	.word	0x0800545f

080056e4 <_printf_common>:
 80056e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e8:	4616      	mov	r6, r2
 80056ea:	4699      	mov	r9, r3
 80056ec:	688a      	ldr	r2, [r1, #8]
 80056ee:	690b      	ldr	r3, [r1, #16]
 80056f0:	4607      	mov	r7, r0
 80056f2:	4293      	cmp	r3, r2
 80056f4:	bfb8      	it	lt
 80056f6:	4613      	movlt	r3, r2
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056fe:	460c      	mov	r4, r1
 8005700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005704:	b10a      	cbz	r2, 800570a <_printf_common+0x26>
 8005706:	3301      	adds	r3, #1
 8005708:	6033      	str	r3, [r6, #0]
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	0699      	lsls	r1, r3, #26
 800570e:	bf42      	ittt	mi
 8005710:	6833      	ldrmi	r3, [r6, #0]
 8005712:	3302      	addmi	r3, #2
 8005714:	6033      	strmi	r3, [r6, #0]
 8005716:	6825      	ldr	r5, [r4, #0]
 8005718:	f015 0506 	ands.w	r5, r5, #6
 800571c:	d106      	bne.n	800572c <_printf_common+0x48>
 800571e:	f104 0a19 	add.w	sl, r4, #25
 8005722:	68e3      	ldr	r3, [r4, #12]
 8005724:	6832      	ldr	r2, [r6, #0]
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	42ab      	cmp	r3, r5
 800572a:	dc28      	bgt.n	800577e <_printf_common+0x9a>
 800572c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005730:	1e13      	subs	r3, r2, #0
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	bf18      	it	ne
 8005736:	2301      	movne	r3, #1
 8005738:	0692      	lsls	r2, r2, #26
 800573a:	d42d      	bmi.n	8005798 <_printf_common+0xb4>
 800573c:	4649      	mov	r1, r9
 800573e:	4638      	mov	r0, r7
 8005740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005744:	47c0      	blx	r8
 8005746:	3001      	adds	r0, #1
 8005748:	d020      	beq.n	800578c <_printf_common+0xa8>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	68e5      	ldr	r5, [r4, #12]
 800574e:	f003 0306 	and.w	r3, r3, #6
 8005752:	2b04      	cmp	r3, #4
 8005754:	bf18      	it	ne
 8005756:	2500      	movne	r5, #0
 8005758:	6832      	ldr	r2, [r6, #0]
 800575a:	f04f 0600 	mov.w	r6, #0
 800575e:	68a3      	ldr	r3, [r4, #8]
 8005760:	bf08      	it	eq
 8005762:	1aad      	subeq	r5, r5, r2
 8005764:	6922      	ldr	r2, [r4, #16]
 8005766:	bf08      	it	eq
 8005768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800576c:	4293      	cmp	r3, r2
 800576e:	bfc4      	itt	gt
 8005770:	1a9b      	subgt	r3, r3, r2
 8005772:	18ed      	addgt	r5, r5, r3
 8005774:	341a      	adds	r4, #26
 8005776:	42b5      	cmp	r5, r6
 8005778:	d11a      	bne.n	80057b0 <_printf_common+0xcc>
 800577a:	2000      	movs	r0, #0
 800577c:	e008      	b.n	8005790 <_printf_common+0xac>
 800577e:	2301      	movs	r3, #1
 8005780:	4652      	mov	r2, sl
 8005782:	4649      	mov	r1, r9
 8005784:	4638      	mov	r0, r7
 8005786:	47c0      	blx	r8
 8005788:	3001      	adds	r0, #1
 800578a:	d103      	bne.n	8005794 <_printf_common+0xb0>
 800578c:	f04f 30ff 	mov.w	r0, #4294967295
 8005790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005794:	3501      	adds	r5, #1
 8005796:	e7c4      	b.n	8005722 <_printf_common+0x3e>
 8005798:	2030      	movs	r0, #48	; 0x30
 800579a:	18e1      	adds	r1, r4, r3
 800579c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057a6:	4422      	add	r2, r4
 80057a8:	3302      	adds	r3, #2
 80057aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057ae:	e7c5      	b.n	800573c <_printf_common+0x58>
 80057b0:	2301      	movs	r3, #1
 80057b2:	4622      	mov	r2, r4
 80057b4:	4649      	mov	r1, r9
 80057b6:	4638      	mov	r0, r7
 80057b8:	47c0      	blx	r8
 80057ba:	3001      	adds	r0, #1
 80057bc:	d0e6      	beq.n	800578c <_printf_common+0xa8>
 80057be:	3601      	adds	r6, #1
 80057c0:	e7d9      	b.n	8005776 <_printf_common+0x92>
	...

080057c4 <_printf_i>:
 80057c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	7e0f      	ldrb	r7, [r1, #24]
 80057ca:	4691      	mov	r9, r2
 80057cc:	2f78      	cmp	r7, #120	; 0x78
 80057ce:	4680      	mov	r8, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	469a      	mov	sl, r3
 80057d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057da:	d807      	bhi.n	80057ec <_printf_i+0x28>
 80057dc:	2f62      	cmp	r7, #98	; 0x62
 80057de:	d80a      	bhi.n	80057f6 <_printf_i+0x32>
 80057e0:	2f00      	cmp	r7, #0
 80057e2:	f000 80d9 	beq.w	8005998 <_printf_i+0x1d4>
 80057e6:	2f58      	cmp	r7, #88	; 0x58
 80057e8:	f000 80a4 	beq.w	8005934 <_printf_i+0x170>
 80057ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057f4:	e03a      	b.n	800586c <_printf_i+0xa8>
 80057f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057fa:	2b15      	cmp	r3, #21
 80057fc:	d8f6      	bhi.n	80057ec <_printf_i+0x28>
 80057fe:	a101      	add	r1, pc, #4	; (adr r1, 8005804 <_printf_i+0x40>)
 8005800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005804:	0800585d 	.word	0x0800585d
 8005808:	08005871 	.word	0x08005871
 800580c:	080057ed 	.word	0x080057ed
 8005810:	080057ed 	.word	0x080057ed
 8005814:	080057ed 	.word	0x080057ed
 8005818:	080057ed 	.word	0x080057ed
 800581c:	08005871 	.word	0x08005871
 8005820:	080057ed 	.word	0x080057ed
 8005824:	080057ed 	.word	0x080057ed
 8005828:	080057ed 	.word	0x080057ed
 800582c:	080057ed 	.word	0x080057ed
 8005830:	0800597f 	.word	0x0800597f
 8005834:	080058a1 	.word	0x080058a1
 8005838:	08005961 	.word	0x08005961
 800583c:	080057ed 	.word	0x080057ed
 8005840:	080057ed 	.word	0x080057ed
 8005844:	080059a1 	.word	0x080059a1
 8005848:	080057ed 	.word	0x080057ed
 800584c:	080058a1 	.word	0x080058a1
 8005850:	080057ed 	.word	0x080057ed
 8005854:	080057ed 	.word	0x080057ed
 8005858:	08005969 	.word	0x08005969
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	1d1a      	adds	r2, r3, #4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	602a      	str	r2, [r5, #0]
 8005864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800586c:	2301      	movs	r3, #1
 800586e:	e0a4      	b.n	80059ba <_printf_i+0x1f6>
 8005870:	6820      	ldr	r0, [r4, #0]
 8005872:	6829      	ldr	r1, [r5, #0]
 8005874:	0606      	lsls	r6, r0, #24
 8005876:	f101 0304 	add.w	r3, r1, #4
 800587a:	d50a      	bpl.n	8005892 <_printf_i+0xce>
 800587c:	680e      	ldr	r6, [r1, #0]
 800587e:	602b      	str	r3, [r5, #0]
 8005880:	2e00      	cmp	r6, #0
 8005882:	da03      	bge.n	800588c <_printf_i+0xc8>
 8005884:	232d      	movs	r3, #45	; 0x2d
 8005886:	4276      	negs	r6, r6
 8005888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800588c:	230a      	movs	r3, #10
 800588e:	485e      	ldr	r0, [pc, #376]	; (8005a08 <_printf_i+0x244>)
 8005890:	e019      	b.n	80058c6 <_printf_i+0x102>
 8005892:	680e      	ldr	r6, [r1, #0]
 8005894:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005898:	602b      	str	r3, [r5, #0]
 800589a:	bf18      	it	ne
 800589c:	b236      	sxthne	r6, r6
 800589e:	e7ef      	b.n	8005880 <_printf_i+0xbc>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	6820      	ldr	r0, [r4, #0]
 80058a4:	1d19      	adds	r1, r3, #4
 80058a6:	6029      	str	r1, [r5, #0]
 80058a8:	0601      	lsls	r1, r0, #24
 80058aa:	d501      	bpl.n	80058b0 <_printf_i+0xec>
 80058ac:	681e      	ldr	r6, [r3, #0]
 80058ae:	e002      	b.n	80058b6 <_printf_i+0xf2>
 80058b0:	0646      	lsls	r6, r0, #25
 80058b2:	d5fb      	bpl.n	80058ac <_printf_i+0xe8>
 80058b4:	881e      	ldrh	r6, [r3, #0]
 80058b6:	2f6f      	cmp	r7, #111	; 0x6f
 80058b8:	bf0c      	ite	eq
 80058ba:	2308      	moveq	r3, #8
 80058bc:	230a      	movne	r3, #10
 80058be:	4852      	ldr	r0, [pc, #328]	; (8005a08 <_printf_i+0x244>)
 80058c0:	2100      	movs	r1, #0
 80058c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058c6:	6865      	ldr	r5, [r4, #4]
 80058c8:	2d00      	cmp	r5, #0
 80058ca:	bfa8      	it	ge
 80058cc:	6821      	ldrge	r1, [r4, #0]
 80058ce:	60a5      	str	r5, [r4, #8]
 80058d0:	bfa4      	itt	ge
 80058d2:	f021 0104 	bicge.w	r1, r1, #4
 80058d6:	6021      	strge	r1, [r4, #0]
 80058d8:	b90e      	cbnz	r6, 80058de <_printf_i+0x11a>
 80058da:	2d00      	cmp	r5, #0
 80058dc:	d04d      	beq.n	800597a <_printf_i+0x1b6>
 80058de:	4615      	mov	r5, r2
 80058e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80058e4:	fb03 6711 	mls	r7, r3, r1, r6
 80058e8:	5dc7      	ldrb	r7, [r0, r7]
 80058ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058ee:	4637      	mov	r7, r6
 80058f0:	42bb      	cmp	r3, r7
 80058f2:	460e      	mov	r6, r1
 80058f4:	d9f4      	bls.n	80058e0 <_printf_i+0x11c>
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d10b      	bne.n	8005912 <_printf_i+0x14e>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	07de      	lsls	r6, r3, #31
 80058fe:	d508      	bpl.n	8005912 <_printf_i+0x14e>
 8005900:	6923      	ldr	r3, [r4, #16]
 8005902:	6861      	ldr	r1, [r4, #4]
 8005904:	4299      	cmp	r1, r3
 8005906:	bfde      	ittt	le
 8005908:	2330      	movle	r3, #48	; 0x30
 800590a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800590e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005912:	1b52      	subs	r2, r2, r5
 8005914:	6122      	str	r2, [r4, #16]
 8005916:	464b      	mov	r3, r9
 8005918:	4621      	mov	r1, r4
 800591a:	4640      	mov	r0, r8
 800591c:	f8cd a000 	str.w	sl, [sp]
 8005920:	aa03      	add	r2, sp, #12
 8005922:	f7ff fedf 	bl	80056e4 <_printf_common>
 8005926:	3001      	adds	r0, #1
 8005928:	d14c      	bne.n	80059c4 <_printf_i+0x200>
 800592a:	f04f 30ff 	mov.w	r0, #4294967295
 800592e:	b004      	add	sp, #16
 8005930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005934:	4834      	ldr	r0, [pc, #208]	; (8005a08 <_printf_i+0x244>)
 8005936:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800593a:	6829      	ldr	r1, [r5, #0]
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005942:	6029      	str	r1, [r5, #0]
 8005944:	061d      	lsls	r5, r3, #24
 8005946:	d514      	bpl.n	8005972 <_printf_i+0x1ae>
 8005948:	07df      	lsls	r7, r3, #31
 800594a:	bf44      	itt	mi
 800594c:	f043 0320 	orrmi.w	r3, r3, #32
 8005950:	6023      	strmi	r3, [r4, #0]
 8005952:	b91e      	cbnz	r6, 800595c <_printf_i+0x198>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	f023 0320 	bic.w	r3, r3, #32
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	2310      	movs	r3, #16
 800595e:	e7af      	b.n	80058c0 <_printf_i+0xfc>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	f043 0320 	orr.w	r3, r3, #32
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	2378      	movs	r3, #120	; 0x78
 800596a:	4828      	ldr	r0, [pc, #160]	; (8005a0c <_printf_i+0x248>)
 800596c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005970:	e7e3      	b.n	800593a <_printf_i+0x176>
 8005972:	0659      	lsls	r1, r3, #25
 8005974:	bf48      	it	mi
 8005976:	b2b6      	uxthmi	r6, r6
 8005978:	e7e6      	b.n	8005948 <_printf_i+0x184>
 800597a:	4615      	mov	r5, r2
 800597c:	e7bb      	b.n	80058f6 <_printf_i+0x132>
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	6826      	ldr	r6, [r4, #0]
 8005982:	1d18      	adds	r0, r3, #4
 8005984:	6961      	ldr	r1, [r4, #20]
 8005986:	6028      	str	r0, [r5, #0]
 8005988:	0635      	lsls	r5, r6, #24
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	d501      	bpl.n	8005992 <_printf_i+0x1ce>
 800598e:	6019      	str	r1, [r3, #0]
 8005990:	e002      	b.n	8005998 <_printf_i+0x1d4>
 8005992:	0670      	lsls	r0, r6, #25
 8005994:	d5fb      	bpl.n	800598e <_printf_i+0x1ca>
 8005996:	8019      	strh	r1, [r3, #0]
 8005998:	2300      	movs	r3, #0
 800599a:	4615      	mov	r5, r2
 800599c:	6123      	str	r3, [r4, #16]
 800599e:	e7ba      	b.n	8005916 <_printf_i+0x152>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	2100      	movs	r1, #0
 80059a4:	1d1a      	adds	r2, r3, #4
 80059a6:	602a      	str	r2, [r5, #0]
 80059a8:	681d      	ldr	r5, [r3, #0]
 80059aa:	6862      	ldr	r2, [r4, #4]
 80059ac:	4628      	mov	r0, r5
 80059ae:	f000 f8d9 	bl	8005b64 <memchr>
 80059b2:	b108      	cbz	r0, 80059b8 <_printf_i+0x1f4>
 80059b4:	1b40      	subs	r0, r0, r5
 80059b6:	6060      	str	r0, [r4, #4]
 80059b8:	6863      	ldr	r3, [r4, #4]
 80059ba:	6123      	str	r3, [r4, #16]
 80059bc:	2300      	movs	r3, #0
 80059be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c2:	e7a8      	b.n	8005916 <_printf_i+0x152>
 80059c4:	462a      	mov	r2, r5
 80059c6:	4649      	mov	r1, r9
 80059c8:	4640      	mov	r0, r8
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	47d0      	blx	sl
 80059ce:	3001      	adds	r0, #1
 80059d0:	d0ab      	beq.n	800592a <_printf_i+0x166>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	079b      	lsls	r3, r3, #30
 80059d6:	d413      	bmi.n	8005a00 <_printf_i+0x23c>
 80059d8:	68e0      	ldr	r0, [r4, #12]
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	4298      	cmp	r0, r3
 80059de:	bfb8      	it	lt
 80059e0:	4618      	movlt	r0, r3
 80059e2:	e7a4      	b.n	800592e <_printf_i+0x16a>
 80059e4:	2301      	movs	r3, #1
 80059e6:	4632      	mov	r2, r6
 80059e8:	4649      	mov	r1, r9
 80059ea:	4640      	mov	r0, r8
 80059ec:	47d0      	blx	sl
 80059ee:	3001      	adds	r0, #1
 80059f0:	d09b      	beq.n	800592a <_printf_i+0x166>
 80059f2:	3501      	adds	r5, #1
 80059f4:	68e3      	ldr	r3, [r4, #12]
 80059f6:	9903      	ldr	r1, [sp, #12]
 80059f8:	1a5b      	subs	r3, r3, r1
 80059fa:	42ab      	cmp	r3, r5
 80059fc:	dcf2      	bgt.n	80059e4 <_printf_i+0x220>
 80059fe:	e7eb      	b.n	80059d8 <_printf_i+0x214>
 8005a00:	2500      	movs	r5, #0
 8005a02:	f104 0619 	add.w	r6, r4, #25
 8005a06:	e7f5      	b.n	80059f4 <_printf_i+0x230>
 8005a08:	08005ed9 	.word	0x08005ed9
 8005a0c:	08005eea 	.word	0x08005eea

08005a10 <_sbrk_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	2300      	movs	r3, #0
 8005a14:	4d05      	ldr	r5, [pc, #20]	; (8005a2c <_sbrk_r+0x1c>)
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	f7fc fc28 	bl	8002270 <_sbrk>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_sbrk_r+0x1a>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_sbrk_r+0x1a>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000248 	.word	0x20000248

08005a30 <__sread>:
 8005a30:	b510      	push	{r4, lr}
 8005a32:	460c      	mov	r4, r1
 8005a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a38:	f000 f906 	bl	8005c48 <_read_r>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	bfab      	itete	ge
 8005a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a42:	89a3      	ldrhlt	r3, [r4, #12]
 8005a44:	181b      	addge	r3, r3, r0
 8005a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a4a:	bfac      	ite	ge
 8005a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a4e:	81a3      	strhlt	r3, [r4, #12]
 8005a50:	bd10      	pop	{r4, pc}

08005a52 <__swrite>:
 8005a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a56:	461f      	mov	r7, r3
 8005a58:	898b      	ldrh	r3, [r1, #12]
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	05db      	lsls	r3, r3, #23
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4616      	mov	r6, r2
 8005a62:	d505      	bpl.n	8005a70 <__swrite+0x1e>
 8005a64:	2302      	movs	r3, #2
 8005a66:	2200      	movs	r2, #0
 8005a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a6c:	f000 f868 	bl	8005b40 <_lseek_r>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	4632      	mov	r2, r6
 8005a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a86:	f000 b817 	b.w	8005ab8 <_write_r>

08005a8a <__sseek>:
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a92:	f000 f855 	bl	8005b40 <_lseek_r>
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	bf15      	itete	ne
 8005a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aa6:	81a3      	strheq	r3, [r4, #12]
 8005aa8:	bf18      	it	ne
 8005aaa:	81a3      	strhne	r3, [r4, #12]
 8005aac:	bd10      	pop	{r4, pc}

08005aae <__sclose>:
 8005aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab2:	f000 b813 	b.w	8005adc <_close_r>
	...

08005ab8 <_write_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4604      	mov	r4, r0
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4d05      	ldr	r5, [pc, #20]	; (8005ad8 <_write_r+0x20>)
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fc fb85 	bl	80021d6 <_write>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_write_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_write_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20000248 	.word	0x20000248

08005adc <_close_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4d05      	ldr	r5, [pc, #20]	; (8005af8 <_close_r+0x1c>)
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	602b      	str	r3, [r5, #0]
 8005ae8:	f7fc fb91 	bl	800220e <_close>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_close_r+0x1a>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_close_r+0x1a>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	20000248 	.word	0x20000248

08005afc <_fstat_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	2300      	movs	r3, #0
 8005b00:	4d06      	ldr	r5, [pc, #24]	; (8005b1c <_fstat_r+0x20>)
 8005b02:	4604      	mov	r4, r0
 8005b04:	4608      	mov	r0, r1
 8005b06:	4611      	mov	r1, r2
 8005b08:	602b      	str	r3, [r5, #0]
 8005b0a:	f7fc fb8b 	bl	8002224 <_fstat>
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	d102      	bne.n	8005b18 <_fstat_r+0x1c>
 8005b12:	682b      	ldr	r3, [r5, #0]
 8005b14:	b103      	cbz	r3, 8005b18 <_fstat_r+0x1c>
 8005b16:	6023      	str	r3, [r4, #0]
 8005b18:	bd38      	pop	{r3, r4, r5, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000248 	.word	0x20000248

08005b20 <_isatty_r>:
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	2300      	movs	r3, #0
 8005b24:	4d05      	ldr	r5, [pc, #20]	; (8005b3c <_isatty_r+0x1c>)
 8005b26:	4604      	mov	r4, r0
 8005b28:	4608      	mov	r0, r1
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	f7fc fb89 	bl	8002242 <_isatty>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d102      	bne.n	8005b3a <_isatty_r+0x1a>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	b103      	cbz	r3, 8005b3a <_isatty_r+0x1a>
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	20000248 	.word	0x20000248

08005b40 <_lseek_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4604      	mov	r4, r0
 8005b44:	4608      	mov	r0, r1
 8005b46:	4611      	mov	r1, r2
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4d05      	ldr	r5, [pc, #20]	; (8005b60 <_lseek_r+0x20>)
 8005b4c:	602a      	str	r2, [r5, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f7fc fb81 	bl	8002256 <_lseek>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d102      	bne.n	8005b5e <_lseek_r+0x1e>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	b103      	cbz	r3, 8005b5e <_lseek_r+0x1e>
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	bd38      	pop	{r3, r4, r5, pc}
 8005b60:	20000248 	.word	0x20000248

08005b64 <memchr>:
 8005b64:	4603      	mov	r3, r0
 8005b66:	b510      	push	{r4, lr}
 8005b68:	b2c9      	uxtb	r1, r1
 8005b6a:	4402      	add	r2, r0
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	d101      	bne.n	8005b76 <memchr+0x12>
 8005b72:	2000      	movs	r0, #0
 8005b74:	e003      	b.n	8005b7e <memchr+0x1a>
 8005b76:	7804      	ldrb	r4, [r0, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	428c      	cmp	r4, r1
 8005b7c:	d1f6      	bne.n	8005b6c <memchr+0x8>
 8005b7e:	bd10      	pop	{r4, pc}

08005b80 <memcpy>:
 8005b80:	440a      	add	r2, r1
 8005b82:	4291      	cmp	r1, r2
 8005b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b88:	d100      	bne.n	8005b8c <memcpy+0xc>
 8005b8a:	4770      	bx	lr
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b92:	4291      	cmp	r1, r2
 8005b94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b98:	d1f9      	bne.n	8005b8e <memcpy+0xe>
 8005b9a:	bd10      	pop	{r4, pc}

08005b9c <memmove>:
 8005b9c:	4288      	cmp	r0, r1
 8005b9e:	b510      	push	{r4, lr}
 8005ba0:	eb01 0402 	add.w	r4, r1, r2
 8005ba4:	d902      	bls.n	8005bac <memmove+0x10>
 8005ba6:	4284      	cmp	r4, r0
 8005ba8:	4623      	mov	r3, r4
 8005baa:	d807      	bhi.n	8005bbc <memmove+0x20>
 8005bac:	1e43      	subs	r3, r0, #1
 8005bae:	42a1      	cmp	r1, r4
 8005bb0:	d008      	beq.n	8005bc4 <memmove+0x28>
 8005bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bba:	e7f8      	b.n	8005bae <memmove+0x12>
 8005bbc:	4601      	mov	r1, r0
 8005bbe:	4402      	add	r2, r0
 8005bc0:	428a      	cmp	r2, r1
 8005bc2:	d100      	bne.n	8005bc6 <memmove+0x2a>
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bce:	e7f7      	b.n	8005bc0 <memmove+0x24>

08005bd0 <__malloc_lock>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	; (8005bd8 <__malloc_lock+0x8>)
 8005bd2:	f7ff b98f 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	2000023c 	.word	0x2000023c

08005bdc <__malloc_unlock>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	; (8005be4 <__malloc_unlock+0x8>)
 8005bde:	f7ff b98a 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8005be2:	bf00      	nop
 8005be4:	2000023c 	.word	0x2000023c

08005be8 <_realloc_r>:
 8005be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bec:	4680      	mov	r8, r0
 8005bee:	4614      	mov	r4, r2
 8005bf0:	460e      	mov	r6, r1
 8005bf2:	b921      	cbnz	r1, 8005bfe <_realloc_r+0x16>
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfa:	f7ff ba4b 	b.w	8005094 <_malloc_r>
 8005bfe:	b92a      	cbnz	r2, 8005c0c <_realloc_r+0x24>
 8005c00:	f7ff f9e0 	bl	8004fc4 <_free_r>
 8005c04:	4625      	mov	r5, r4
 8005c06:	4628      	mov	r0, r5
 8005c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c0c:	f000 f82e 	bl	8005c6c <_malloc_usable_size_r>
 8005c10:	4284      	cmp	r4, r0
 8005c12:	4607      	mov	r7, r0
 8005c14:	d802      	bhi.n	8005c1c <_realloc_r+0x34>
 8005c16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c1a:	d812      	bhi.n	8005c42 <_realloc_r+0x5a>
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4640      	mov	r0, r8
 8005c20:	f7ff fa38 	bl	8005094 <_malloc_r>
 8005c24:	4605      	mov	r5, r0
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d0ed      	beq.n	8005c06 <_realloc_r+0x1e>
 8005c2a:	42bc      	cmp	r4, r7
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	4631      	mov	r1, r6
 8005c30:	bf28      	it	cs
 8005c32:	463a      	movcs	r2, r7
 8005c34:	f7ff ffa4 	bl	8005b80 <memcpy>
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	f7ff f9c2 	bl	8004fc4 <_free_r>
 8005c40:	e7e1      	b.n	8005c06 <_realloc_r+0x1e>
 8005c42:	4635      	mov	r5, r6
 8005c44:	e7df      	b.n	8005c06 <_realloc_r+0x1e>
	...

08005c48 <_read_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	2200      	movs	r2, #0
 8005c52:	4d05      	ldr	r5, [pc, #20]	; (8005c68 <_read_r+0x20>)
 8005c54:	602a      	str	r2, [r5, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f7fc faa0 	bl	800219c <_read>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_read_r+0x1e>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_read_r+0x1e>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20000248 	.word	0x20000248

08005c6c <_malloc_usable_size_r>:
 8005c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c70:	1f18      	subs	r0, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bfbc      	itt	lt
 8005c76:	580b      	ldrlt	r3, [r1, r0]
 8005c78:	18c0      	addlt	r0, r0, r3
 8005c7a:	4770      	bx	lr

08005c7c <_init>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr

08005c88 <_fini>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	bf00      	nop
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr
