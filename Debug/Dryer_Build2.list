
Dryer_Build2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a8  080072a8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080072a8  080072a8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072a8  080072a8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a8  080072a8  000172a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072ac  080072ac  000172ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080072b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000090  0800733c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  0800733c  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc1f  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003085  00000000  00000000  0002fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00032d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00033f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b613  00000000  00000000  00034f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a44  00000000  00000000  0005054b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900f0  00000000  00000000  00065f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f607f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e4  00000000  00000000  000f60d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08006fcc 	.word	0x08006fcc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08006fcc 	.word	0x08006fcc

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <Max6675_Read_Temp>:
// ------------------- Variables ----------------
_Bool TCF = 0;                       // Thermocouple Connection acknowledge Flag
uint8_t DATARX[2];                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max6675_Read_Temp(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	float Temp = 0;                                      // Temperature Variable
 8000522:	f04f 0300 	mov.w	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8000528:	2200      	movs	r2, #0
 800052a:	2110      	movs	r1, #16
 800052c:	481f      	ldr	r0, [pc, #124]	; (80005ac <Max6675_Read_Temp+0x90>)
 800052e:	f003 fcc2 	bl	8003eb6 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, DATARX, 2, 50);                  // DATA Transfer
 8000532:	2332      	movs	r3, #50	; 0x32
 8000534:	2202      	movs	r2, #2
 8000536:	491e      	ldr	r1, [pc, #120]	; (80005b0 <Max6675_Read_Temp+0x94>)
 8000538:	481e      	ldr	r0, [pc, #120]	; (80005b4 <Max6675_Read_Temp+0x98>)
 800053a:	f004 f9a3 	bl	8004884 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 800053e:	2201      	movs	r2, #1
 8000540:	2110      	movs	r1, #16
 8000542:	481a      	ldr	r0, [pc, #104]	; (80005ac <Max6675_Read_Temp+0x90>)
 8000544:	f003 fcb7 	bl	8003eb6 <HAL_GPIO_WritePin>
//printf("Mix = %x\r\n",((DATARX[0] << 8)|DATARX[1]));
//printf("MSB = %x\r\n",DATARX[1]);

//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2) & 0x0001);        // State of Connecting
	TCF = ((((DATARX[0] << 8) | DATARX[1]) >> 2) & 0x0001);
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <Max6675_Read_Temp+0x94>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	4a18      	ldr	r2, [pc, #96]	; (80005b0 <Max6675_Read_Temp+0x94>)
 8000550:	7852      	ldrb	r2, [r2, #1]
 8000552:	4313      	orrs	r3, r2
 8000554:	109b      	asrs	r3, r3, #2
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <Max6675_Read_Temp+0x9c>)
 8000566:	701a      	strb	r2, [r3, #0]
//printf("TCF = %d\r\n",TCF);

//Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
	if (TCF == 0) {
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <Max6675_Read_Temp+0x9c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f083 0301 	eor.w	r3, r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d013      	beq.n	800059e <Max6675_Read_Temp+0x82>
		Temp = (((DATARX[0] << 8) | DATARX[1]) >> 3);
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <Max6675_Read_Temp+0x94>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <Max6675_Read_Temp+0x94>)
 800057e:	7852      	ldrb	r2, [r2, #1]
 8000580:	4313      	orrs	r3, r2
 8000582:	10db      	asrs	r3, r3, #3
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff4f 	bl	8000428 <__aeabi_i2f>
 800058a:	4603      	mov	r3, r0
 800058c:	607b      	str	r3, [r7, #4]
		Temp *= 0.25;                         // Data to Centigrade Conversation
 800058e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff fdda 	bl	800014c <__aeabi_fmul>
 8000598:	4603      	mov	r3, r0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e001      	b.n	80005a2 <Max6675_Read_Temp+0x86>
	} else
		Temp = -1;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <Max6675_Read_Temp+0xa0>)
 80005a0:	607b      	str	r3, [r7, #4]
	//HAL_Delay(250); // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
	return Temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010800 	.word	0x40010800
 80005b0:	200000b0 	.word	0x200000b0
 80005b4:	20000170 	.word	0x20000170
 80005b8:	200000ac 	.word	0x200000ac
 80005bc:	bf800000 	.word	0xbf800000

080005c0 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 80005c6:	2306      	movs	r3, #6
 80005c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80005ca:	2306      	movs	r3, #6
 80005cc:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	83fb      	strh	r3, [r7, #30]
 80005d6:	2300      	movs	r3, #0
 80005d8:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80005da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005de:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80005e4:	4ba0      	ldr	r3, [pc, #640]	; (8000868 <EE_Init+0x2a8>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80005ea:	4ba0      	ldr	r3, [pc, #640]	; (800086c <EE_Init+0x2ac>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 80005f4:	4b9c      	ldr	r3, [pc, #624]	; (8000868 <EE_Init+0x2a8>)
 80005f6:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 80005fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80005fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000602:	4293      	cmp	r3, r2
 8000604:	d00b      	beq.n	800061e <EE_Init+0x5e>
 8000606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800060a:	f280 8196 	bge.w	800093a <EE_Init+0x37a>
 800060e:	2b00      	cmp	r3, #0
 8000610:	f000 80f8 	beq.w	8000804 <EE_Init+0x244>
 8000614:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000618:	4293      	cmp	r3, r2
 800061a:	d050      	beq.n	80006be <EE_Init+0xfe>
 800061c:	e18d      	b.n	800093a <EE_Init+0x37a>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800061e:	8c3b      	ldrh	r3, [r7, #32]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d116      	bne.n	8000652 <EE_Init+0x92>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000624:	4890      	ldr	r0, [pc, #576]	; (8000868 <EE_Init+0x2a8>)
 8000626:	f000 f9a9 	bl	800097c <EE_VerifyPageFullyErased>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	f040 818e 	bne.w	800094e <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000632:	f107 0214 	add.w	r2, r7, #20
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f003 f9f8 	bl	8003a30 <HAL_FLASHEx_Erase>
 8000640:	4603      	mov	r3, r0
 8000642:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000644:	7efb      	ldrb	r3, [r7, #27]
 8000646:	2b00      	cmp	r3, #0
 8000648:	f000 8181 	beq.w	800094e <EE_Init+0x38e>
          {
            return flashstatus;
 800064c:	7efb      	ldrb	r3, [r7, #27]
 800064e:	b29b      	uxth	r3, r3
 8000650:	e185      	b.n	800095e <EE_Init+0x39e>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000652:	8c3b      	ldrh	r3, [r7, #32]
 8000654:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000658:	4293      	cmp	r3, r2
 800065a:	d125      	bne.n	80006a8 <EE_Init+0xe8>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800065c:	4882      	ldr	r0, [pc, #520]	; (8000868 <EE_Init+0x2a8>)
 800065e:	f000 f98d 	bl	800097c <EE_VerifyPageFullyErased>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d10e      	bne.n	8000686 <EE_Init+0xc6>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000668:	f107 0214 	add.w	r2, r7, #20
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f003 f9dd 	bl	8003a30 <HAL_FLASHEx_Erase>
 8000676:	4603      	mov	r3, r0
 8000678:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800067a:	7efb      	ldrb	r3, [r7, #27]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <EE_Init+0xc6>
          {
            return flashstatus;
 8000680:	7efb      	ldrb	r3, [r7, #27]
 8000682:	b29b      	uxth	r3, r3
 8000684:	e16b      	b.n	800095e <EE_Init+0x39e>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	4977      	ldr	r1, [pc, #476]	; (800086c <EE_Init+0x2ac>)
 8000690:	2001      	movs	r0, #1
 8000692:	f003 f885 	bl	80037a0 <HAL_FLASH_Program>
 8000696:	4603      	mov	r3, r0
 8000698:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800069a:	7efb      	ldrb	r3, [r7, #27]
 800069c:	2b00      	cmp	r3, #0
 800069e:	f000 8156 	beq.w	800094e <EE_Init+0x38e>
        {
          return flashstatus;
 80006a2:	7efb      	ldrb	r3, [r7, #27]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	e15a      	b.n	800095e <EE_Init+0x39e>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 80006a8:	f000 f9fa 	bl	8000aa0 <EE_Format>
 80006ac:	4603      	mov	r3, r0
 80006ae:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80006b0:	7efb      	ldrb	r3, [r7, #27]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f000 814b 	beq.w	800094e <EE_Init+0x38e>
        {
          return flashstatus;
 80006b8:	7efb      	ldrb	r3, [r7, #27]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	e14f      	b.n	800095e <EE_Init+0x39e>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80006be:	8c3b      	ldrh	r3, [r7, #32]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d163      	bne.n	800078c <EE_Init+0x1cc>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006c8:	e030      	b.n	800072c <EE_Init+0x16c>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80006ca:	4b69      	ldr	r3, [pc, #420]	; (8000870 <EE_Init+0x2b0>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006d2:	4968      	ldr	r1, [pc, #416]	; (8000874 <EE_Init+0x2b4>)
 80006d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d101      	bne.n	80006e0 <EE_Init+0x120>
          {
            x = varidx;
 80006dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006de:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 80006e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d01d      	beq.n	8000726 <EE_Init+0x166>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80006ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ec:	4a61      	ldr	r2, [pc, #388]	; (8000874 <EE_Init+0x2b4>)
 80006ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f2:	4961      	ldr	r1, [pc, #388]	; (8000878 <EE_Init+0x2b8>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f967 	bl	80009c8 <EE_ReadVariable>
 80006fa:	4603      	mov	r3, r0
 80006fc:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 80006fe:	8bbb      	ldrh	r3, [r7, #28]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d010      	beq.n	8000726 <EE_Init+0x166>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000706:	4a5b      	ldr	r2, [pc, #364]	; (8000874 <EE_Init+0x2b4>)
 8000708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800070c:	4a5a      	ldr	r2, [pc, #360]	; (8000878 <EE_Init+0x2b8>)
 800070e:	8812      	ldrh	r2, [r2, #0]
 8000710:	4611      	mov	r1, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fa58 	bl	8000bc8 <EE_VerifyPageFullWriteVariable>
 8000718:	4603      	mov	r3, r0
 800071a:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 800071c:	8bfb      	ldrh	r3, [r7, #30]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <EE_Init+0x166>
              {
                return eepromstatus;
 8000722:	8bfb      	ldrh	r3, [r7, #30]
 8000724:	e11b      	b.n	800095e <EE_Init+0x39e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000728:	3301      	adds	r3, #1
 800072a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800072c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800072e:	2b1a      	cmp	r3, #26
 8000730:	d9cb      	bls.n	80006ca <EE_Init+0x10a>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	f04f 0300 	mov.w	r3, #0
 800073a:	494b      	ldr	r1, [pc, #300]	; (8000868 <EE_Init+0x2a8>)
 800073c:	2001      	movs	r0, #1
 800073e:	f003 f82f 	bl	80037a0 <HAL_FLASH_Program>
 8000742:	4603      	mov	r3, r0
 8000744:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000746:	7efb      	ldrb	r3, [r7, #27]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d002      	beq.n	8000752 <EE_Init+0x192>
        {
          return flashstatus;
 800074c:	7efb      	ldrb	r3, [r7, #27]
 800074e:	b29b      	uxth	r3, r3
 8000750:	e105      	b.n	800095e <EE_Init+0x39e>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8000756:	4b45      	ldr	r3, [pc, #276]	; (800086c <EE_Init+0x2ac>)
 8000758:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800075e:	4843      	ldr	r0, [pc, #268]	; (800086c <EE_Init+0x2ac>)
 8000760:	f000 f90c 	bl	800097c <EE_VerifyPageFullyErased>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	f040 80f3 	bne.w	8000952 <EE_Init+0x392>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800076c:	f107 0214 	add.w	r2, r7, #20
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f003 f95b 	bl	8003a30 <HAL_FLASHEx_Erase>
 800077a:	4603      	mov	r3, r0
 800077c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800077e:	7efb      	ldrb	r3, [r7, #27]
 8000780:	2b00      	cmp	r3, #0
 8000782:	f000 80e6 	beq.w	8000952 <EE_Init+0x392>
          {
            return flashstatus;
 8000786:	7efb      	ldrb	r3, [r7, #27]
 8000788:	b29b      	uxth	r3, r3
 800078a:	e0e8      	b.n	800095e <EE_Init+0x39e>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 800078c:	8c3b      	ldrh	r3, [r7, #32]
 800078e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000792:	4293      	cmp	r3, r2
 8000794:	d12b      	bne.n	80007ee <EE_Init+0x22e>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 800079a:	4b34      	ldr	r3, [pc, #208]	; (800086c <EE_Init+0x2ac>)
 800079c:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80007a2:	4832      	ldr	r0, [pc, #200]	; (800086c <EE_Init+0x2ac>)
 80007a4:	f000 f8ea 	bl	800097c <EE_VerifyPageFullyErased>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10e      	bne.n	80007cc <EE_Init+0x20c>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80007ae:	f107 0214 	add.w	r2, r7, #20
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 f93a 	bl	8003a30 <HAL_FLASHEx_Erase>
 80007bc:	4603      	mov	r3, r0
 80007be:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80007c0:	7efb      	ldrb	r3, [r7, #27]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <EE_Init+0x20c>
          {
            return flashstatus;
 80007c6:	7efb      	ldrb	r3, [r7, #27]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	e0c8      	b.n	800095e <EE_Init+0x39e>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	4924      	ldr	r1, [pc, #144]	; (8000868 <EE_Init+0x2a8>)
 80007d6:	2001      	movs	r0, #1
 80007d8:	f002 ffe2 	bl	80037a0 <HAL_FLASH_Program>
 80007dc:	4603      	mov	r3, r0
 80007de:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80007e0:	7efb      	ldrb	r3, [r7, #27]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 80b5 	beq.w	8000952 <EE_Init+0x392>
        {
          return flashstatus;
 80007e8:	7efb      	ldrb	r3, [r7, #27]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	e0b7      	b.n	800095e <EE_Init+0x39e>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 80007ee:	f000 f957 	bl	8000aa0 <EE_Format>
 80007f2:	4603      	mov	r3, r0
 80007f4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80007f6:	7efb      	ldrb	r3, [r7, #27]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f000 80aa 	beq.w	8000952 <EE_Init+0x392>
        {
          return flashstatus;
 80007fe:	7efb      	ldrb	r3, [r7, #27]
 8000800:	b29b      	uxth	r3, r3
 8000802:	e0ac      	b.n	800095e <EE_Init+0x39e>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000804:	8c3b      	ldrh	r3, [r7, #32]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d10a      	bne.n	8000820 <EE_Init+0x260>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 800080a:	f000 f949 	bl	8000aa0 <EE_Format>
 800080e:	4603      	mov	r3, r0
 8000810:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000812:	7efb      	ldrb	r3, [r7, #27]
 8000814:	2b00      	cmp	r3, #0
 8000816:	f000 809e 	beq.w	8000956 <EE_Init+0x396>
        {
          return flashstatus;
 800081a:	7efb      	ldrb	r3, [r7, #27]
 800081c:	b29b      	uxth	r3, r3
 800081e:	e09e      	b.n	800095e <EE_Init+0x39e>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000820:	8c3b      	ldrh	r3, [r7, #32]
 8000822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000826:	4293      	cmp	r3, r2
 8000828:	d11b      	bne.n	8000862 <EE_Init+0x2a2>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <EE_Init+0x2ac>)
 8000830:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <EE_Init+0x2ac>)
 8000838:	f000 f8a0 	bl	800097c <EE_VerifyPageFullyErased>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	f040 8089 	bne.w	8000956 <EE_Init+0x396>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000844:	f107 0214 	add.w	r2, r7, #20
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f003 f8ef 	bl	8003a30 <HAL_FLASHEx_Erase>
 8000852:	4603      	mov	r3, r0
 8000854:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000856:	7efb      	ldrb	r3, [r7, #27]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d07c      	beq.n	8000956 <EE_Init+0x396>
          {
            return flashstatus;
 800085c:	7efb      	ldrb	r3, [r7, #27]
 800085e:	b29b      	uxth	r3, r3
 8000860:	e07d      	b.n	800095e <EE_Init+0x39e>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000862:	2300      	movs	r3, #0
 8000864:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000866:	e03a      	b.n	80008de <EE_Init+0x31e>
 8000868:	0801f800 	.word	0x0801f800
 800086c:	0801fc00 	.word	0x0801fc00
 8000870:	0801f806 	.word	0x0801f806
 8000874:	2000013c 	.word	0x2000013c
 8000878:	200000b2 	.word	0x200000b2
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 800087c:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <EE_Init+0x3a8>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b29a      	uxth	r2, r3
 8000882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000884:	4939      	ldr	r1, [pc, #228]	; (800096c <EE_Init+0x3ac>)
 8000886:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800088a:	429a      	cmp	r2, r3
 800088c:	d101      	bne.n	8000892 <EE_Init+0x2d2>
          {
            x = varidx;
 800088e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000890:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8000892:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000894:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000898:	429a      	cmp	r2, r3
 800089a:	d01d      	beq.n	80008d8 <EE_Init+0x318>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 800089c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800089e:	4a33      	ldr	r2, [pc, #204]	; (800096c <EE_Init+0x3ac>)
 80008a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a4:	4932      	ldr	r1, [pc, #200]	; (8000970 <EE_Init+0x3b0>)
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f88e 	bl	80009c8 <EE_ReadVariable>
 80008ac:	4603      	mov	r3, r0
 80008ae:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 80008b0:	8bbb      	ldrh	r3, [r7, #28]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d010      	beq.n	80008d8 <EE_Init+0x318>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80008b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008b8:	4a2c      	ldr	r2, [pc, #176]	; (800096c <EE_Init+0x3ac>)
 80008ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008be:	4a2c      	ldr	r2, [pc, #176]	; (8000970 <EE_Init+0x3b0>)
 80008c0:	8812      	ldrh	r2, [r2, #0]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f97f 	bl	8000bc8 <EE_VerifyPageFullWriteVariable>
 80008ca:	4603      	mov	r3, r0
 80008cc:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 80008ce:	8bfb      	ldrh	r3, [r7, #30]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <EE_Init+0x318>
              {
                return eepromstatus;
 80008d4:	8bfb      	ldrh	r3, [r7, #30]
 80008d6:	e042      	b.n	800095e <EE_Init+0x39e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80008d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008da:	3301      	adds	r3, #1
 80008dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80008de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008e0:	2b1a      	cmp	r3, #26
 80008e2:	d9cb      	bls.n	800087c <EE_Init+0x2bc>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80008e4:	f04f 0200 	mov.w	r2, #0
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	4921      	ldr	r1, [pc, #132]	; (8000974 <EE_Init+0x3b4>)
 80008ee:	2001      	movs	r0, #1
 80008f0:	f002 ff56 	bl	80037a0 <HAL_FLASH_Program>
 80008f4:	4603      	mov	r3, r0
 80008f6:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80008f8:	7efb      	ldrb	r3, [r7, #27]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <EE_Init+0x344>
        {
          return flashstatus;
 80008fe:	7efb      	ldrb	r3, [r7, #27]
 8000900:	b29b      	uxth	r3, r3
 8000902:	e02c      	b.n	800095e <EE_Init+0x39e>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <EE_Init+0x3b8>)
 800090a:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000910:	4819      	ldr	r0, [pc, #100]	; (8000978 <EE_Init+0x3b8>)
 8000912:	f000 f833 	bl	800097c <EE_VerifyPageFullyErased>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d11c      	bne.n	8000956 <EE_Init+0x396>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800091c:	f107 0214 	add.w	r2, r7, #20
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f003 f883 	bl	8003a30 <HAL_FLASHEx_Erase>
 800092a:	4603      	mov	r3, r0
 800092c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d010      	beq.n	8000956 <EE_Init+0x396>
          {
            return flashstatus;
 8000934:	7efb      	ldrb	r3, [r7, #27]
 8000936:	b29b      	uxth	r3, r3
 8000938:	e011      	b.n	800095e <EE_Init+0x39e>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 800093a:	f000 f8b1 	bl	8000aa0 <EE_Format>
 800093e:	4603      	mov	r3, r0
 8000940:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8000942:	7efb      	ldrb	r3, [r7, #27]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d008      	beq.n	800095a <EE_Init+0x39a>
      {
        return flashstatus;
 8000948:	7efb      	ldrb	r3, [r7, #27]
 800094a:	b29b      	uxth	r3, r3
 800094c:	e007      	b.n	800095e <EE_Init+0x39e>
      break;
 800094e:	bf00      	nop
 8000950:	e004      	b.n	800095c <EE_Init+0x39c>
      break;
 8000952:	bf00      	nop
 8000954:	e002      	b.n	800095c <EE_Init+0x39c>
      break;
 8000956:	bf00      	nop
 8000958:	e000      	b.n	800095c <EE_Init+0x39c>
      }
      break;
 800095a:	bf00      	nop
  }

  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	0801fc06 	.word	0x0801fc06
 800096c:	2000013c 	.word	0x2000013c
 8000970:	200000b2 	.word	0x200000b2
 8000974:	0801fc00 	.word	0x0801fc00
 8000978:	0801f800 	.word	0x0801f800

0800097c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 8000988:	f245 5355 	movw	r3, #21845	; 0x5555
 800098c:	817b      	strh	r3, [r7, #10]

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 800098e:	e00d      	b.n	80009ac <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8000996:	897b      	ldrh	r3, [r7, #10]
 8000998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099c:	4293      	cmp	r3, r2
 800099e:	d002      	beq.n	80009a6 <EE_VerifyPageFullyErased+0x2a>
    {

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]

      break;
 80009a4:	e006      	b.n	80009b4 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3304      	adds	r3, #4
 80009aa:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <EE_VerifyPageFullyErased+0x48>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d3ed      	bcc.n	8000990 <EE_VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	b29b      	uxth	r3, r3
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	0801fc00 	.word	0x0801fc00

080009c8 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 80009d8:	f245 5355 	movw	r3, #21845	; 0x5555
 80009dc:	81bb      	strh	r3, [r7, #12]
 80009de:	2301      	movs	r3, #1
 80009e0:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <EE_ReadVariable+0x8c>)
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <EE_ReadVariable+0x8c>)
 80009e8:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 f8a8 	bl	8000b40 <EE_FindValidPage>
 80009f0:	4603      	mov	r3, r0
 80009f2:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 80009f4:	89fb      	ldrh	r3, [r7, #14]
 80009f6:	2bab      	cmp	r3, #171	; 0xab
 80009f8:	d101      	bne.n	80009fe <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80009fa:	23ab      	movs	r3, #171	; 0xab
 80009fc:	e025      	b.n	8000a4a <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000a04:	337e      	adds	r3, #126	; 0x7e
 8000a06:	029b      	lsls	r3, r3, #10
 8000a08:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8000a0a:	89fb      	ldrh	r3, [r7, #14]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	029a      	lsls	r2, r3, #10
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <EE_ReadVariable+0x90>)
 8000a12:	4413      	add	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 8000a16:	e012      	b.n	8000a3e <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 8000a1e:	89ba      	ldrh	r2, [r7, #12]
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d108      	bne.n	8000a38 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	3b02      	subs	r3, #2
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	82fb      	strh	r3, [r7, #22]

      break;
 8000a36:	e007      	b.n	8000a48 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	3302      	adds	r3, #2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d8e7      	bhi.n	8000a18 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 8000a48:	8afb      	ldrh	r3, [r7, #22]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	0801f800 	.word	0x0801f800
 8000a58:	0801f7fe 	.word	0x0801f7fe

08000a5c <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	80fb      	strh	r3, [r7, #6]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000a70:	88ba      	ldrh	r2, [r7, #4]
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f8a6 	bl	8000bc8 <EE_VerifyPageFullWriteVariable>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000a80:	89fb      	ldrh	r3, [r7, #14]
 8000a82:	2b80      	cmp	r3, #128	; 0x80
 8000a84:	d107      	bne.n	8000a96 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000a86:	88ba      	ldrh	r2, [r7, #4]
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f8fd 	bl	8000c8c <EE_PageTransfer>
 8000a92:	4603      	mov	r3, r0
 8000a94:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000a96:	89fb      	ldrh	r3, [r7, #14]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <EE_Format+0x98>)
 8000ab4:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000aba:	481f      	ldr	r0, [pc, #124]	; (8000b38 <EE_Format+0x98>)
 8000abc:	f7ff ff5e 	bl	800097c <EE_VerifyPageFullyErased>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10d      	bne.n	8000ae2 <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000ac6:	f107 0210 	add.w	r2, r7, #16
 8000aca:	463b      	mov	r3, r7
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 ffae 	bl	8003a30 <HAL_FLASHEx_Erase>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8000ad8:	7dfb      	ldrb	r3, [r7, #23]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <EE_Format+0x42>
    {
      return flashstatus;
 8000ade:	7dfb      	ldrb	r3, [r7, #23]
 8000ae0:	e025      	b.n	8000b2e <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000ae2:	f04f 0200 	mov.w	r2, #0
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	4913      	ldr	r1, [pc, #76]	; (8000b38 <EE_Format+0x98>)
 8000aec:	2001      	movs	r0, #1
 8000aee:	f002 fe57 	bl	80037a0 <HAL_FLASH_Program>
 8000af2:	4603      	mov	r3, r0
 8000af4:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000af6:	7dfb      	ldrb	r3, [r7, #23]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <EE_Format+0x60>
  {
    return flashstatus;
 8000afc:	7dfb      	ldrb	r3, [r7, #23]
 8000afe:	e016      	b.n	8000b2e <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <EE_Format+0x9c>)
 8000b02:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <EE_Format+0x9c>)
 8000b06:	f7ff ff39 	bl	800097c <EE_VerifyPageFullyErased>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d10d      	bne.n	8000b2c <EE_Format+0x8c>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	463b      	mov	r3, r7
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 ff89 	bl	8003a30 <HAL_FLASHEx_Erase>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <EE_Format+0x8c>
    {
      return flashstatus;
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
 8000b2a:	e000      	b.n	8000b2e <EE_Format+0x8e>
    }
  }

  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	0801f800 	.word	0x0801f800
 8000b3c:	0801fc00 	.word	0x0801fc00

08000b40 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	81fb      	strh	r3, [r7, #14]
 8000b4e:	2306      	movs	r3, #6
 8000b50:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <EE_FindValidPage+0x80>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <EE_FindValidPage+0x84>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d01b      	beq.n	8000b9c <EE_FindValidPage+0x5c>
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d125      	bne.n	8000bb4 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8000b68:	89bb      	ldrh	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d108      	bne.n	8000b80 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d101      	bne.n	8000b7c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e01c      	b.n	8000bb6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e01a      	b.n	8000bb6 <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d108      	bne.n	8000b98 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 8000b86:	89bb      	ldrh	r3, [r7, #12]
 8000b88:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d101      	bne.n	8000b94 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000b90:	2301      	movs	r3, #1
 8000b92:	e010      	b.n	8000bb6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000b94:	2300      	movs	r3, #0
 8000b96:	e00e      	b.n	8000bb6 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000b98:	23ab      	movs	r3, #171	; 0xab
 8000b9a:	e00c      	b.n	8000bb6 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8000b9c:	89fb      	ldrh	r3, [r7, #14]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e007      	b.n	8000bb6 <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 8000ba6:	89bb      	ldrh	r3, [r7, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000bac:	2301      	movs	r3, #1
 8000bae:	e002      	b.n	8000bb6 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000bb0:	23ab      	movs	r3, #171	; 0xab
 8000bb2:	e000      	b.n	8000bb6 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000bb4:	2300      	movs	r3, #0
  }
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	0801f800 	.word	0x0801f800
 8000bc4:	0801fc00 	.word	0x0801fc00

08000bc8 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000bc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	80fb      	strh	r3, [r7, #6]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000be2:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <EE_VerifyPageFullWriteVariable+0xb8>)
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <EE_VerifyPageFullWriteVariable+0xbc>)
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ffa8 	bl	8000b40 <EE_FindValidPage>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8000bf4:	8a3b      	ldrh	r3, [r7, #16]
 8000bf6:	2bab      	cmp	r3, #171	; 0xab
 8000bf8:	d101      	bne.n	8000bfe <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000bfa:	23ab      	movs	r3, #171	; 0xab
 8000bfc:	e03b      	b.n	8000c76 <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8000bfe:	8a3b      	ldrh	r3, [r7, #16]
 8000c00:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000c04:	337e      	adds	r3, #126	; 0x7e
 8000c06:	029b      	lsls	r3, r3, #10
 8000c08:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 8000c0a:	8a3b      	ldrh	r3, [r7, #16]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	029a      	lsls	r2, r3, #10
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <EE_VerifyPageFullWriteVariable+0xc0>)
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8000c16:	e029      	b.n	8000c6c <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d121      	bne.n	8000c66 <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	461c      	mov	r4, r3
 8000c28:	4615      	mov	r5, r2
 8000c2a:	4622      	mov	r2, r4
 8000c2c:	462b      	mov	r3, r5
 8000c2e:	6979      	ldr	r1, [r7, #20]
 8000c30:	2001      	movs	r0, #1
 8000c32:	f002 fdb5 	bl	80037a0 <HAL_FLASH_Program>
 8000c36:	4603      	mov	r3, r0
 8000c38:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8000c3a:	7cfb      	ldrb	r3, [r7, #19]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return flashstatus;
 8000c40:	7cfb      	ldrb	r3, [r7, #19]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	e017      	b.n	8000c76 <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	1c99      	adds	r1, r3, #2
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4698      	mov	r8, r3
 8000c50:	4691      	mov	r9, r2
 8000c52:	4642      	mov	r2, r8
 8000c54:	464b      	mov	r3, r9
 8000c56:	2001      	movs	r0, #1
 8000c58:	f002 fda2 	bl	80037a0 <HAL_FLASH_Program>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 8000c60:	7cfb      	ldrb	r3, [r7, #19]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	e007      	b.n	8000c76 <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d3d1      	bcc.n	8000c18 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000c74:	2380      	movs	r3, #128	; 0x80
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c80:	0801f800 	.word	0x0801f800
 8000c84:	0801fc00 	.word	0x0801fc00
 8000c88:	0801f7ff 	.word	0x0801f7ff

08000c8c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	460a      	mov	r2, r1
 8000c96:	80fb      	strh	r3, [r7, #6]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
 8000ca2:	4b53      	ldr	r3, [pc, #332]	; (8000df0 <EE_PageTransfer+0x164>)
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t oldpageid = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t validpage = PAGE0, varidx = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	847b      	strh	r3, [r7, #34]	; 0x22
 8000cae:	2300      	movs	r3, #0
 8000cb0:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	843b      	strh	r3, [r7, #32]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	83fb      	strh	r3, [r7, #30]
  uint32_t page_error = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff ff3e 	bl	8000b40 <EE_FindValidPage>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	847b      	strh	r3, [r7, #34]	; 0x22

  if (validpage == PAGE1)       /* Page1 valid */
 8000cc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d104      	bne.n	8000cd8 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;
 8000cce:	4b48      	ldr	r3, [pc, #288]	; (8000df0 <EE_PageTransfer+0x164>)
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <EE_PageTransfer+0x168>)
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cd6:	e009      	b.n	8000cec <EE_PageTransfer+0x60>
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8000cd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d104      	bne.n	8000ce8 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;
 8000cde:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <EE_PageTransfer+0x168>)
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <EE_PageTransfer+0x164>)
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ce6:	e001      	b.n	8000cec <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000ce8:	23ab      	movs	r3, #171	; 0xab
 8000cea:	e07c      	b.n	8000de6 <EE_PageTransfer+0x15a>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);
 8000cec:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f002 fd52 	bl	80037a0 <HAL_FLASH_Program>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000d02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <EE_PageTransfer+0x86>
  {
    return flashstatus;
 8000d0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	e069      	b.n	8000de6 <EE_PageTransfer+0x15a>
  }

  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000d12:	88ba      	ldrh	r2, [r7, #4]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff55 	bl	8000bc8 <EE_VerifyPageFullWriteVariable>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	843b      	strh	r3, [r7, #32]
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 8000d22:	8c3b      	ldrh	r3, [r7, #32]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <EE_PageTransfer+0xa0>
  {
    return eepromstatus;
 8000d28:	8c3b      	ldrh	r3, [r7, #32]
 8000d2a:	e05c      	b.n	8000de6 <EE_PageTransfer+0x15a>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d30:	e027      	b.n	8000d82 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000d32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d34:	4a30      	ldr	r2, [pc, #192]	; (8000df8 <EE_PageTransfer+0x16c>)
 8000d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3a:	88fa      	ldrh	r2, [r7, #6]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d01d      	beq.n	8000d7c <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000d40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d42:	4a2d      	ldr	r2, [pc, #180]	; (8000df8 <EE_PageTransfer+0x16c>)
 8000d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d48:	492c      	ldr	r1, [pc, #176]	; (8000dfc <EE_PageTransfer+0x170>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fe3c 	bl	80009c8 <EE_ReadVariable>
 8000d50:	4603      	mov	r3, r0
 8000d52:	83fb      	strh	r3, [r7, #30]
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 8000d54:	8bfb      	ldrh	r3, [r7, #30]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d010      	beq.n	8000d7c <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000d5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d5c:	4a26      	ldr	r2, [pc, #152]	; (8000df8 <EE_PageTransfer+0x16c>)
 8000d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d62:	4a26      	ldr	r2, [pc, #152]	; (8000dfc <EE_PageTransfer+0x170>)
 8000d64:	8812      	ldrh	r2, [r2, #0]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff2d 	bl	8000bc8 <EE_VerifyPageFullWriteVariable>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	843b      	strh	r3, [r7, #32]
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 8000d72:	8c3b      	ldrh	r3, [r7, #32]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <EE_PageTransfer+0xf0>
        {
          return eepromstatus;
 8000d78:	8c3b      	ldrh	r3, [r7, #32]
 8000d7a:	e034      	b.n	8000de6 <EE_PageTransfer+0x15a>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000d7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d7e:	3301      	adds	r3, #1
 8000d80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d84:	2b1a      	cmp	r3, #26
 8000d86:	d9d4      	bls.n	8000d32 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  s_eraseinit.PageAddress = oldpageid;
 8000d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8e:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = 1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]

  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000d94:	f107 0218 	add.w	r2, r7, #24
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fe46 	bl	8003a30 <HAL_FLASHEx_Erase>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000daa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <EE_PageTransfer+0x12e>
  {
    return flashstatus;
 8000db2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	e015      	b.n	8000de6 <EE_PageTransfer+0x15a>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f002 fceb 	bl	80037a0 <HAL_FLASH_Program>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000dd0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <EE_PageTransfer+0x154>
  {
    return flashstatus;
 8000dd8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	e002      	b.n	8000de6 <EE_PageTransfer+0x15a>
  }



  /* Return last operation flash status */
  return flashstatus;
 8000de0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000de4:	b29b      	uxth	r3, r3
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3730      	adds	r7, #48	; 0x30
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	0801f800 	.word	0x0801f800
 8000df4:	0801fc00 	.word	0x0801fc00
 8000df8:	2000013c 	.word	0x2000013c
 8000dfc:	200000b2 	.word	0x200000b2

08000e00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e14:	4b69      	ldr	r3, [pc, #420]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a68      	ldr	r2, [pc, #416]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b66      	ldr	r3, [pc, #408]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	4b63      	ldr	r3, [pc, #396]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a62      	ldr	r2, [pc, #392]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e32:	f043 0320 	orr.w	r3, r3, #32
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b60      	ldr	r3, [pc, #384]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0320 	and.w	r3, r3, #32
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a5c      	ldr	r2, [pc, #368]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	4b57      	ldr	r3, [pc, #348]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a56      	ldr	r2, [pc, #344]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e62:	f043 0308 	orr.w	r3, r3, #8
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b54      	ldr	r3, [pc, #336]	; (8000fbc <MX_GPIO_Init+0x1bc>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7a:	4851      	ldr	r0, [pc, #324]	; (8000fc0 <MX_GPIO_Init+0x1c0>)
 8000e7c:	f003 f81b 	bl	8003eb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e86:	484e      	ldr	r0, [pc, #312]	; (8000fc0 <MX_GPIO_Init+0x1c0>)
 8000e88:	f003 f815 	bl	8003eb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_Pin|FAN_Pin|LCD_RS_Pin|LCD_EN_Pin
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f649 1110 	movw	r1, #39184	; 0x9910
 8000e92:	484c      	ldr	r0, [pc, #304]	; (8000fc4 <MX_GPIO_Init+0x1c4>)
 8000e94:	f003 f80f 	bl	8003eb6 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRUM_LEFT_Pin|DRUM_RIGHT_Pin|HEATER_Pin|LCD_D1_Pin
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f24e 31f8 	movw	r1, #58360	; 0xe3f8
 8000e9e:	484a      	ldr	r0, [pc, #296]	; (8000fc8 <MX_GPIO_Init+0x1c8>)
 8000ea0:	f003 f809 	bl	8003eb6 <HAL_GPIO_WritePin>
                          |LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4840      	ldr	r0, [pc, #256]	; (8000fc0 <MX_GPIO_Init+0x1c0>)
 8000ebe:	f002 fe5f 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4839      	ldr	r0, [pc, #228]	; (8000fc0 <MX_GPIO_Init+0x1c0>)
 8000edc:	f002 fe50 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DOOR_SW_Pin;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ee4:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <MX_GPIO_Init+0x1cc>)
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DOOR_SW_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4834      	ldr	r0, [pc, #208]	; (8000fc4 <MX_GPIO_Init+0x1c4>)
 8000ef4:	f002 fe44 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin|SEL_ROT_SW_Pin|HEATER_SW_Pin;
 8000ef8:	230e      	movs	r3, #14
 8000efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <MX_GPIO_Init+0x1c4>)
 8000f0c:	f002 fe38 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SS_Pin|LCD_RS_Pin|LCD_EN_Pin|LCD_D0_Pin;
 8000f10:	f649 0310 	movw	r3, #38928	; 0x9810
 8000f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4619      	mov	r1, r3
 8000f28:	4826      	ldr	r0, [pc, #152]	; (8000fc4 <MX_GPIO_Init+0x1c4>)
 8000f2a:	f002 fe29 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FN_KEY_Pin|LOW_KEY_Pin|MED_KEY_Pin|HIGH_KEY_Pin;
 8000f2e:	f640 4303 	movw	r3, #3075	; 0xc03
 8000f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4619      	mov	r1, r3
 8000f42:	4821      	ldr	r0, [pc, #132]	; (8000fc8 <MX_GPIO_Init+0x1c8>)
 8000f44:	f002 fe1c 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRUM_LEFT_Pin|DRUM_RIGHT_Pin|HEATER_Pin;
 8000f48:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4819      	ldr	r0, [pc, #100]	; (8000fc8 <MX_GPIO_Init+0x1c8>)
 8000f62:	f002 fe0d 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FAN_Pin;
 8000f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <MX_GPIO_Init+0x1c4>)
 8000f80:	f002 fdfe 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 8000f84:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000f88:	613b      	str	r3, [r7, #16]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <MX_GPIO_Init+0x1c8>)
 8000f9e:	f002 fdef 	bl	8003b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2006      	movs	r0, #6
 8000fa8:	f002 fbc3 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fac:	2006      	movs	r0, #6
 8000fae:	f002 fbdc 	bl	800376a <HAL_NVIC_EnableIRQ>

}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40011000 	.word	0x40011000
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	10310000 	.word	0x10310000

08000fd0 <is_coil_open>:
		last_time = HAL_GetTick();
	}
	return last_state;
}

uint8_t is_coil_open(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 8000fd4:	f002 faa8 	bl	8003528 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <is_coil_open+0x44>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d912      	bls.n	800100a <is_coil_open+0x3a>
		if (HAL_GPIO_ReadPin(HEATER_SW_GPIO_Port, HEATER_SW_Pin) == GPIO_PIN_RESET) {
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	480c      	ldr	r0, [pc, #48]	; (8001018 <is_coil_open+0x48>)
 8000fe8:	f002 ff4e 	bl	8003e88 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d103      	bne.n	8000ffa <is_coil_open+0x2a>
			last_state = 0;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <is_coil_open+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e002      	b.n	8001000 <is_coil_open+0x30>
		} else {
			last_state = 1;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <is_coil_open+0x4c>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8001000:	f002 fa92 	bl	8003528 <HAL_GetTick>
 8001004:	4603      	mov	r3, r0
 8001006:	4a03      	ldr	r2, [pc, #12]	; (8001014 <is_coil_open+0x44>)
 8001008:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <is_coil_open+0x4c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
}
 8001010:	4618      	mov	r0, r3
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000b4 	.word	0x200000b4
 8001018:	40010800 	.word	0x40010800
 800101c:	200000b8 	.word	0x200000b8

08001020 <limit_sw_open>:

uint8_t limit_sw_open(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if (HAL_GetTick() - last_time > 5U) {
 8001024:	f002 fa80 	bl	8003528 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <limit_sw_open+0x44>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b05      	cmp	r3, #5
 8001032:	d912      	bls.n	800105a <limit_sw_open+0x3a>
		if (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_RESET) {
 8001034:	2102      	movs	r1, #2
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <limit_sw_open+0x48>)
 8001038:	f002 ff26 	bl	8003e88 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d103      	bne.n	800104a <limit_sw_open+0x2a>
			last_state = 0;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <limit_sw_open+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e002      	b.n	8001050 <limit_sw_open+0x30>
		} else {
			last_state = 1;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <limit_sw_open+0x4c>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8001050:	f002 fa6a 	bl	8003528 <HAL_GetTick>
 8001054:	4603      	mov	r3, r0
 8001056:	4a03      	ldr	r2, [pc, #12]	; (8001064 <limit_sw_open+0x44>)
 8001058:	6013      	str	r3, [r2, #0]
	}
	return last_state;
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <limit_sw_open+0x4c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000bc 	.word	0x200000bc
 8001068:	40010800 	.word	0x40010800
 800106c:	200000c0 	.word	0x200000c0

08001070 <scan_keypad>:
uint8_t is_med_key_pressed(void);
uint8_t is_high_key_pressed(void);
uint8_t is_fn_key_pressed(void);

uint8_t scan_keypad(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	if(is_low_key_pressed())
 8001074:	f000 f832 	bl	80010dc <is_low_key_pressed>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <scan_keypad+0x18>
	{
		printf("LOW KEY PRESSED\r\n");
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <scan_keypad+0x5c>)
 8001080:	f004 fe44 	bl	8005d0c <puts>
		return LOW_KEY_PRESSED;
 8001084:	2301      	movs	r3, #1
 8001086:	e01e      	b.n	80010c6 <scan_keypad+0x56>
	}
	else if(is_med_key_pressed())
 8001088:	f000 f860 	bl	800114c <is_med_key_pressed>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d004      	beq.n	800109c <scan_keypad+0x2c>
	{
		printf("MED KEY PRESSED\r\n");
 8001092:	480f      	ldr	r0, [pc, #60]	; (80010d0 <scan_keypad+0x60>)
 8001094:	f004 fe3a 	bl	8005d0c <puts>
		return MED_KEY_PRESSED;
 8001098:	2302      	movs	r3, #2
 800109a:	e014      	b.n	80010c6 <scan_keypad+0x56>
	}
	else if(is_high_key_pressed())
 800109c:	f000 f890 	bl	80011c0 <is_high_key_pressed>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d004      	beq.n	80010b0 <scan_keypad+0x40>
	{
		printf("HIGH KEY PRESSED\r\n");
 80010a6:	480b      	ldr	r0, [pc, #44]	; (80010d4 <scan_keypad+0x64>)
 80010a8:	f004 fe30 	bl	8005d0c <puts>
		return HIGH_KEY_PRESSED;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e00a      	b.n	80010c6 <scan_keypad+0x56>
	}
	else if(is_fn_key_pressed())
 80010b0:	f000 f8c0 	bl	8001234 <is_fn_key_pressed>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <scan_keypad+0x54>
	{
		printf("FN KEY PRESSED\r\n");
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <scan_keypad+0x68>)
 80010bc:	f004 fe26 	bl	8005d0c <puts>
		return FN_KEY_PRESSED;
 80010c0:	2304      	movs	r3, #4
 80010c2:	e000      	b.n	80010c6 <scan_keypad+0x56>
	}
	return NO_KEY_PRESSED;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	08006fe4 	.word	0x08006fe4
 80010d0:	08006ff8 	.word	0x08006ff8
 80010d4:	0800700c 	.word	0x0800700c
 80010d8:	08007020 	.word	0x08007020

080010dc <is_low_key_pressed>:

uint8_t is_low_key_pressed()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 80010e0:	f002 fa22 	bl	8003528 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <is_low_key_pressed+0x64>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d923      	bls.n	8001138 <is_low_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(LOW_KEY_GPIO_Port, LOW_KEY_Pin) == GPIO_PIN_RESET)
 80010f0:	2102      	movs	r1, #2
 80010f2:	4814      	ldr	r0, [pc, #80]	; (8001144 <is_low_key_pressed+0x68>)
 80010f4:	f002 fec8 	bl	8003e88 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d114      	bne.n	8001128 <is_low_key_pressed+0x4c>
		{
			if(last_state == 1)
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <is_low_key_pressed+0x6c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b01      	cmp	r3, #1
 8001106:	d112      	bne.n	800112e <is_low_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(LOW_KEY_GPIO_Port, LOW_KEY_Pin) == GPIO_PIN_RESET)
 8001108:	2102      	movs	r1, #2
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <is_low_key_pressed+0x68>)
 800110c:	f002 febc 	bl	8003e88 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d104      	bne.n	8001120 <is_low_key_pressed+0x44>
				{
					last_state = 0;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <is_low_key_pressed+0x6c>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
					return 1;
 800111c:	2301      	movs	r3, #1
 800111e:	e00c      	b.n	800113a <is_low_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <is_low_key_pressed+0x6c>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e002      	b.n	800112e <is_low_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <is_low_key_pressed+0x6c>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 800112e:	f002 f9fb 	bl	8003528 <HAL_GetTick>
 8001132:	4603      	mov	r3, r0
 8001134:	4a02      	ldr	r2, [pc, #8]	; (8001140 <is_low_key_pressed+0x64>)
 8001136:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000c4 	.word	0x200000c4
 8001144:	40010c00 	.word	0x40010c00
 8001148:	200000c8 	.word	0x200000c8

0800114c <is_med_key_pressed>:

uint8_t is_med_key_pressed()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 8001150:	f002 f9ea 	bl	8003528 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <is_med_key_pressed+0x68>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d925      	bls.n	80011ac <is_med_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(MED_KEY_GPIO_Port, MED_KEY_Pin) == GPIO_PIN_RESET)
 8001160:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <is_med_key_pressed+0x6c>)
 8001166:	f002 fe8f 	bl	8003e88 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d115      	bne.n	800119c <is_med_key_pressed+0x50>
		{
			if(last_state == 1)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <is_med_key_pressed+0x70>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b01      	cmp	r3, #1
 8001178:	d113      	bne.n	80011a2 <is_med_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(MED_KEY_GPIO_Port, MED_KEY_Pin) == GPIO_PIN_RESET)
 800117a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <is_med_key_pressed+0x6c>)
 8001180:	f002 fe82 	bl	8003e88 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d104      	bne.n	8001194 <is_med_key_pressed+0x48>
				{
					last_state = 0;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <is_med_key_pressed+0x70>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
					return 1;
 8001190:	2301      	movs	r3, #1
 8001192:	e00c      	b.n	80011ae <is_med_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <is_med_key_pressed+0x70>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	e002      	b.n	80011a2 <is_med_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <is_med_key_pressed+0x70>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 80011a2:	f002 f9c1 	bl	8003528 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a02      	ldr	r2, [pc, #8]	; (80011b4 <is_med_key_pressed+0x68>)
 80011aa:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000cc 	.word	0x200000cc
 80011b8:	40010c00 	.word	0x40010c00
 80011bc:	200000d0 	.word	0x200000d0

080011c0 <is_high_key_pressed>:

uint8_t is_high_key_pressed()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 80011c4:	f002 f9b0 	bl	8003528 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <is_high_key_pressed+0x68>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d925      	bls.n	8001220 <is_high_key_pressed+0x60>
	{
		if(HAL_GPIO_ReadPin(HIGH_KEY_GPIO_Port, HIGH_KEY_Pin) == GPIO_PIN_RESET)
 80011d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d8:	4814      	ldr	r0, [pc, #80]	; (800122c <is_high_key_pressed+0x6c>)
 80011da:	f002 fe55 	bl	8003e88 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d115      	bne.n	8001210 <is_high_key_pressed+0x50>
		{
			if(last_state == 1)
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <is_high_key_pressed+0x70>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d113      	bne.n	8001216 <is_high_key_pressed+0x56>
			{
				if(HAL_GPIO_ReadPin(HIGH_KEY_GPIO_Port, HIGH_KEY_Pin) == GPIO_PIN_RESET)
 80011ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <is_high_key_pressed+0x6c>)
 80011f4:	f002 fe48 	bl	8003e88 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d104      	bne.n	8001208 <is_high_key_pressed+0x48>
				{
					last_state = 0;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <is_high_key_pressed+0x70>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
					return 1;
 8001204:	2301      	movs	r3, #1
 8001206:	e00c      	b.n	8001222 <is_high_key_pressed+0x62>
				}
				else
				{
					last_state = 1;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <is_high_key_pressed+0x70>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e002      	b.n	8001216 <is_high_key_pressed+0x56>
				}
			}
		}
		else
		{
			last_state = 1;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <is_high_key_pressed+0x70>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8001216:	f002 f987 	bl	8003528 <HAL_GetTick>
 800121a:	4603      	mov	r3, r0
 800121c:	4a02      	ldr	r2, [pc, #8]	; (8001228 <is_high_key_pressed+0x68>)
 800121e:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000d4 	.word	0x200000d4
 800122c:	40010c00 	.word	0x40010c00
 8001230:	200000d8 	.word	0x200000d8

08001234 <is_fn_key_pressed>:

uint8_t is_fn_key_pressed()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	static volatile uint8_t last_state = 0U;
	static volatile uint32_t last_time = 0U;

	if(HAL_GetTick() - last_time > 1U)
 8001238:	f002 f976 	bl	8003528 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <is_fn_key_pressed+0x64>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d923      	bls.n	8001290 <is_fn_key_pressed+0x5c>
	{
		if(HAL_GPIO_ReadPin(FN_KEY_GPIO_Port, FN_KEY_Pin) == GPIO_PIN_RESET)
 8001248:	2101      	movs	r1, #1
 800124a:	4814      	ldr	r0, [pc, #80]	; (800129c <is_fn_key_pressed+0x68>)
 800124c:	f002 fe1c 	bl	8003e88 <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d114      	bne.n	8001280 <is_fn_key_pressed+0x4c>
		{
			if(last_state == 1)
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <is_fn_key_pressed+0x6c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d112      	bne.n	8001286 <is_fn_key_pressed+0x52>
			{
				if(HAL_GPIO_ReadPin(FN_KEY_GPIO_Port, FN_KEY_Pin) == GPIO_PIN_RESET)
 8001260:	2101      	movs	r1, #1
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <is_fn_key_pressed+0x68>)
 8001264:	f002 fe10 	bl	8003e88 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <is_fn_key_pressed+0x44>
				{
					last_state = 0;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <is_fn_key_pressed+0x6c>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
					return 1;
 8001274:	2301      	movs	r3, #1
 8001276:	e00c      	b.n	8001292 <is_fn_key_pressed+0x5e>
				}
				else
				{
					last_state = 1;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <is_fn_key_pressed+0x6c>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	e002      	b.n	8001286 <is_fn_key_pressed+0x52>
				}
			}
		}
		else
		{
			last_state = 1;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <is_fn_key_pressed+0x6c>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
		}
		last_time = HAL_GetTick();
 8001286:	f002 f94f 	bl	8003528 <HAL_GetTick>
 800128a:	4603      	mov	r3, r0
 800128c:	4a02      	ldr	r2, [pc, #8]	; (8001298 <is_fn_key_pressed+0x64>)
 800128e:	6013      	str	r3, [r2, #0]
	}
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200000dc 	.word	0x200000dc
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	200000e0 	.word	0x200000e0

080012a4 <lcd_init>:
uint8_t _shiftset = 0;
uint8_t _numlines = 0;
uint8_t _currline = 0;

void lcd_init(uint8_t fourbitmode)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	if (fourbitmode)
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <lcd_init+0x18>
		_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <lcd_init+0x28>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
	else
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}
 80012ba:	e002      	b.n	80012c2 <lcd_init+0x1e>
		_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <lcd_init+0x28>)
 80012be:	2210      	movs	r2, #16
 80012c0:	701a      	strb	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	200000e1 	.word	0x200000e1

080012d0 <lcd_begin>:

void lcd_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	460b      	mov	r3, r1
 80012dc:	71bb      	strb	r3, [r7, #6]
 80012de:	4613      	mov	r3, r2
 80012e0:	717b      	strb	r3, [r7, #5]
	if (lines > 1)
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d906      	bls.n	80012f6 <lcd_begin+0x26>
	{
		_displayfunction |= LCD_2LINE;
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <lcd_begin+0xe8>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <lcd_begin+0xe8>)
 80012f4:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
 80012f6:	4a31      	ldr	r2, [pc, #196]	; (80013bc <lcd_begin+0xec>)
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	7013      	strb	r3, [r2, #0]
	_currline = 0;
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <lcd_begin+0xf0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d009      	beq.n	800131c <lcd_begin+0x4c>
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d106      	bne.n	800131c <lcd_begin+0x4c>
		_displayfunction |= LCD_5x10DOTS;
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <lcd_begin+0xe8>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <lcd_begin+0xe8>)
 800131a:	701a      	strb	r2, [r3, #0]

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait
	// 50
	HAL_Delay(1000);
 800131c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001320:	f002 f90c 	bl	800353c <HAL_Delay>
	// Now we pull both RS and R/W low to begin commands
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132a:	4826      	ldr	r0, [pc, #152]	; (80013c4 <lcd_begin+0xf4>)
 800132c:	f002 fdc3 	bl	8003eb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001336:	4823      	ldr	r0, [pc, #140]	; (80013c4 <lcd_begin+0xf4>)
 8001338:	f002 fdbd 	bl	8003eb6 <HAL_GPIO_WritePin>
		  */
	    // this is according to the hitachi HD44780 datasheet
	    // page 45 figure 23

	    // Send function set command sequence
		lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); // 38
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <lcd_begin+0xe8>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f043 0320 	orr.w	r3, r3, #32
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f91e 	bl	8001588 <lcd_send_cmd>
		HAL_Delay(10); // wait more than 4.1ms
 800134c:	200a      	movs	r0, #10
 800134e:	f002 f8f5 	bl	800353c <HAL_Delay>

	    // second try
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <lcd_begin+0xe8>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f043 0320 	orr.w	r3, r3, #32
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f913 	bl	8001588 <lcd_send_cmd>
	    HAL_Delay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f002 f8ea 	bl	800353c <HAL_Delay>

	    // third go
	    lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction); //38
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <lcd_begin+0xe8>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f908 	bl	8001588 <lcd_send_cmd>
	  //}

	// finally, set # lines, font size, etc.
	lcd_send_cmd(CMD_FUNCTIONSET | _displayfunction);
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <lcd_begin+0xe8>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f900 	bl	8001588 <lcd_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <lcd_begin+0xf8>)
 800138a:	2204      	movs	r2, #4
 800138c:	701a      	strb	r2, [r3, #0]
	lcd_display(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f000 f828 	bl	80013e4 <lcd_display>

	// clear it off
	lcd_clear();
 8001394:	f000 f90e 	bl	80015b4 <lcd_clear>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <lcd_begin+0xfc>)
 800139a:	2202      	movs	r2, #2
 800139c:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <lcd_begin+0xfc>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f8ed 	bl	8001588 <lcd_send_cmd>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200000e1 	.word	0x200000e1
 80013bc:	200000e4 	.word	0x200000e4
 80013c0:	200000e5 	.word	0x200000e5
 80013c4:	40010800 	.word	0x40010800
 80013c8:	200000e2 	.word	0x200000e2
 80013cc:	200000e3 	.word	0x200000e3

080013d0 <lcd_home>:

void lcd_home(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_RETURNHOME); // set cursor position to zero
 80013d4:	2002      	movs	r0, #2
 80013d6:	f000 f8d7 	bl	8001588 <lcd_send_cmd>
	HAL_Delay(2); // this command takes a long time!
 80013da:	2002      	movs	r0, #2
 80013dc:	f002 f8ae 	bl	800353c <HAL_Delay>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <lcd_display>:

void lcd_display(uint8_t state)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	if(state)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00f      	beq.n	8001414 <lcd_display+0x30>
	{
		_displaycontrol |= DISPLAY_ON;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <lcd_display+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <lcd_display+0x58>)
 8001400:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <lcd_display+0x58>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	b2db      	uxtb	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f8bb 	bl	8001588 <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~DISPLAY_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 8001412:	e00e      	b.n	8001432 <lcd_display+0x4e>
		_displaycontrol &= ~DISPLAY_ON;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <lcd_display+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <lcd_display+0x58>)
 8001420:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <lcd_display+0x58>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	f000 f8ab 	bl	8001588 <lcd_send_cmd>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200000e2 	.word	0x200000e2

08001440 <lcd_enable>:

void lcd_enable(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144c:	481a      	ldr	r0, [pc, #104]	; (80014b8 <lcd_enable+0x78>)
 800144e:	f002 fd32 	bl	8003eb6 <HAL_GPIO_WritePin>
	for(int i = 0;i<5000;i++);
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e002      	b.n	800145e <lcd_enable+0x1e>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f241 3287 	movw	r2, #4999	; 0x1387
 8001464:	4293      	cmp	r3, r2
 8001466:	ddf7      	ble.n	8001458 <lcd_enable+0x18>
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146e:	4812      	ldr	r0, [pc, #72]	; (80014b8 <lcd_enable+0x78>)
 8001470:	f002 fd21 	bl	8003eb6 <HAL_GPIO_WritePin>
	for(int i = 0;i<5000;i++); // enable pulse must be >450ns
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	e002      	b.n	8001480 <lcd_enable+0x40>
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3301      	adds	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f241 3287 	movw	r2, #4999	; 0x1387
 8001486:	4293      	cmp	r3, r2
 8001488:	ddf7      	ble.n	800147a <lcd_enable+0x3a>
	HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <lcd_enable+0x78>)
 8001492:	f002 fd10 	bl	8003eb6 <HAL_GPIO_WritePin>
	for(int i = 0;i<5000;i++); // commands need > 37us to settle
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	e002      	b.n	80014a2 <lcd_enable+0x62>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3301      	adds	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f241 3287 	movw	r2, #4999	; 0x1387
 80014a8:	4293      	cmp	r3, r2
 80014aa:	ddf7      	ble.n	800149c <lcd_enable+0x5c>
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40010800 	.word	0x40010800

080014bc <write_8bit>:

void write_8bit(uint8_t value)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D7_Port, LCD_D7, (value >> 7) & 0x01);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	09db      	lsrs	r3, r3, #7
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d2:	482b      	ldr	r0, [pc, #172]	; (8001580 <write_8bit+0xc4>)
 80014d4:	f002 fcef 	bl	8003eb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_Port, LCD_D6, (value >> 6) & 0x01);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	099b      	lsrs	r3, r3, #6
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ea:	4825      	ldr	r0, [pc, #148]	; (8001580 <write_8bit+0xc4>)
 80014ec:	f002 fce3 	bl	8003eb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_Port, LCD_D5, (value >> 5) & 0x01);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	481f      	ldr	r0, [pc, #124]	; (8001580 <write_8bit+0xc4>)
 8001502:	f002 fcd8 	bl	8003eb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_Port, LCD_D4, (value >> 4) & 0x01);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	2140      	movs	r1, #64	; 0x40
 8001516:	481a      	ldr	r0, [pc, #104]	; (8001580 <write_8bit+0xc4>)
 8001518:	f002 fccd 	bl	8003eb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_Port, LCD_D3, (value >> 3) & 0x01);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	08db      	lsrs	r3, r3, #3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	2120      	movs	r1, #32
 800152c:	4814      	ldr	r0, [pc, #80]	; (8001580 <write_8bit+0xc4>)
 800152e:	f002 fcc2 	bl	8003eb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_Port, LCD_D2, (value >> 2) & 0x01);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	2110      	movs	r1, #16
 8001542:	480f      	ldr	r0, [pc, #60]	; (8001580 <write_8bit+0xc4>)
 8001544:	f002 fcb7 	bl	8003eb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_Port, LCD_D1, (value >> 1) & 0x01);
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	2108      	movs	r1, #8
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <write_8bit+0xc4>)
 800155a:	f002 fcac 	bl	8003eb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D0_Port, LCD_D0, (value >> 0) & 0x01);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <write_8bit+0xc8>)
 800156e:	f002 fca2 	bl	8003eb6 <HAL_GPIO_WritePin>

	lcd_enable();
 8001572:	f7ff ff65 	bl	8001440 <lcd_enable>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40010c00 	.word	0x40010c00
 8001584:	40010800 	.word	0x40010800

08001588 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <lcd_send_cmd+0x28>)
 800159a:	f002 fc8c 	bl	8003eb6 <HAL_GPIO_WritePin>
	write_8bit(cmd);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff8b 	bl	80014bc <write_8bit>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40010800 	.word	0x40010800

080015b4 <lcd_clear>:

void lcd_clear(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	lcd_send_cmd(CMD_CLEARDISPLAY);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff ffe5 	bl	8001588 <lcd_send_cmd>
	HAL_Delay(2);
 80015be:	2002      	movs	r0, #2
 80015c0:	f001 ffbc 	bl	800353c <HAL_Delay>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <lcd_send_data+0x28>)
 80015da:	f002 fc6c 	bl	8003eb6 <HAL_GPIO_WritePin>
	write_8bit(data);
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff6b 	bl	80014bc <write_8bit>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40010800 	.word	0x40010800

080015f4 <lcd_cursor>:

void lcd_cursor(uint8_t state)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
	if(state)
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00f      	beq.n	8001624 <lcd_cursor+0x30>
	{
		_displaycontrol |= CURSOR_ON;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <lcd_cursor+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <lcd_cursor+0x58>)
 8001610:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <lcd_cursor+0x58>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ffb3 	bl	8001588 <lcd_send_cmd>
	else
	{
		_displaycontrol &= ~CURSOR_ON;
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
	}
}
 8001622:	e00e      	b.n	8001642 <lcd_cursor+0x4e>
		_displaycontrol &= ~CURSOR_ON;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <lcd_cursor+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f023 0302 	bic.w	r3, r3, #2
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <lcd_cursor+0x58>)
 8001630:	701a      	strb	r2, [r3, #0]
		lcd_send_cmd(CMD_DISPLAYCONTROL | _displaycontrol);
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <lcd_cursor+0x58>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ffa3 	bl	8001588 <lcd_send_cmd>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200000e2 	.word	0x200000e2

08001650 <lcd_print>:
		lcd_send_cmd(CMD_ENTRYMODE | _displaymode);
	}
}

void lcd_print(char *str)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_data((uint8_t)*str);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ffb3 	bl	80015c8 <lcd_send_data>
		str++;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3301      	adds	r3, #1
 8001666:	607b      	str	r3, [r7, #4]
	}while(*str != '\0');
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f3      	bne.n	8001658 <lcd_print+0x8>
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <lcd_set_cursor>:

void lcd_set_cursor(int8_t col, int8_t row)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	460a      	mov	r2, r1
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	4613      	mov	r3, r2
 800168a:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <lcd_set_cursor+0x5c>)
 800168e:	f107 0408 	add.w	r4, r7, #8
 8001692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _numlines) {
 8001698:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800169c:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <lcd_set_cursor+0x60>)
 800169e:	7812      	ldrb	r2, [r2, #0]
 80016a0:	4293      	cmp	r3, r2
 80016a2:	dd04      	ble.n	80016ae <lcd_set_cursor+0x32>
		row = _numlines - 1; // we count rows starting w/0
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <lcd_set_cursor+0x60>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	71bb      	strb	r3, [r7, #6]
		}
	lcd_send_cmd(CMD_SETDDRAM_ADDR | (col + row_offsets[row]));
 80016ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	3318      	adds	r3, #24
 80016b6:	443b      	add	r3, r7
 80016b8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4413      	add	r3, r2
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff5c 	bl	8001588 <lcd_send_cmd>
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	08007030 	.word	0x08007030
 80016dc:	200000e4 	.word	0x200000e4

080016e0 <lcd_logo>:
void mode_level_page(void);
void limit_sw_err_page(void);
void complete_page(void);
void setting_page(void);

void lcd_logo(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	lcd_clear();
 80016e4:	f7ff ff66 	bl	80015b4 <lcd_clear>
	lcd_set_cursor(5, 0);
 80016e8:	2100      	movs	r1, #0
 80016ea:	2005      	movs	r0, #5
 80016ec:	f7ff ffc6 	bl	800167c <lcd_set_cursor>
	lcd_print("AL WALI");
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <lcd_logo+0x48>)
 80016f2:	f7ff ffad 	bl	8001650 <lcd_print>
	lcd_set_cursor(1, 1);
 80016f6:	2101      	movs	r1, #1
 80016f8:	2001      	movs	r0, #1
 80016fa:	f7ff ffbf 	bl	800167c <lcd_set_cursor>
	lcd_print("+9710504952138");
 80016fe:	480b      	ldr	r0, [pc, #44]	; (800172c <lcd_logo+0x4c>)
 8001700:	f7ff ffa6 	bl	8001650 <lcd_print>
	lcd_set_cursor(-1, 2);
 8001704:	2102      	movs	r1, #2
 8001706:	f04f 30ff 	mov.w	r0, #4294967295
 800170a:	f7ff ffb7 	bl	800167c <lcd_set_cursor>
	lcd_print("ALwaliajman");
 800170e:	4808      	ldr	r0, [pc, #32]	; (8001730 <lcd_logo+0x50>)
 8001710:	f7ff ff9e 	bl	8001650 <lcd_print>
	lcd_set_cursor(0, 3);
 8001714:	2103      	movs	r1, #3
 8001716:	2000      	movs	r0, #0
 8001718:	f7ff ffb0 	bl	800167c <lcd_set_cursor>
	lcd_print("@gmail.com");
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <lcd_logo+0x54>)
 800171e:	f7ff ff97 	bl	8001650 <lcd_print>
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	08007040 	.word	0x08007040
 800172c:	08007048 	.word	0x08007048
 8001730:	08007058 	.word	0x08007058
 8001734:	08007064 	.word	0x08007064

08001738 <lcd_update>:

void lcd_update(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	switch (cur_page) {
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <lcd_update+0x68>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b08      	cmp	r3, #8
 8001742:	d82a      	bhi.n	800179a <lcd_update+0x62>
 8001744:	a201      	add	r2, pc, #4	; (adr r2, 800174c <lcd_update+0x14>)
 8001746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174a:	bf00      	nop
 800174c:	08001771 	.word	0x08001771
 8001750:	08001777 	.word	0x08001777
 8001754:	0800177d 	.word	0x0800177d
 8001758:	0800177d 	.word	0x0800177d
 800175c:	0800177d 	.word	0x0800177d
 8001760:	08001783 	.word	0x08001783
 8001764:	08001789 	.word	0x08001789
 8001768:	0800178f 	.word	0x0800178f
 800176c:	08001795 	.word	0x08001795
	case INIT_PAGE:
		welcome_page();
 8001770:	f000 f818 	bl	80017a4 <welcome_page>
		break;
 8001774:	e011      	b.n	800179a <lcd_update+0x62>
	case SETTING_PAGE:
		setting_page();
 8001776:	f000 f9bf 	bl	8001af8 <setting_page>
		break;
 800177a:	e00e      	b.n	800179a <lcd_update+0x62>
	case LOW_LEVEL_PAGE:
	case MED_LEVEL_PAGE:
	case HIGH_LEVEL_PAGE:
		mode_level_page();
 800177c:	f000 f8ee 	bl	800195c <mode_level_page>
		break;
 8001780:	e00b      	b.n	800179a <lcd_update+0x62>
	case COMPLETE_PAGE:
		complete_page();
 8001782:	f000 f8c1 	bl	8001908 <complete_page>
		break;
 8001786:	e008      	b.n	800179a <lcd_update+0x62>
	case DOOR_OPEN_PAGE:
		door_open_page();
 8001788:	f000 f840 	bl	800180c <door_open_page>
		break;
 800178c:	e005      	b.n	800179a <lcd_update+0x62>
	case LIMIT_SW_ERR_PAGE:
		limit_sw_err_page();
 800178e:	f000 f891 	bl	80018b4 <limit_sw_err_page>
		break;
 8001792:	e002      	b.n	800179a <lcd_update+0x62>
	case HEATER_COIL_PAGE:
		heater_coil_page();
 8001794:	f000 f864 	bl	8001860 <heater_coil_page>
		break;
 8001798:	bf00      	nop
	}

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000016b 	.word	0x2000016b

080017a4 <welcome_page>:

void welcome_page(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
//	printf("welcome_page\r\n");
	if (last_page != cur_page) {
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <welcome_page+0x54>)
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <welcome_page+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d006      	beq.n	80017c2 <welcome_page+0x1e>
		lcd_clear();
 80017b4:	f7ff fefe 	bl	80015b4 <lcd_clear>
		last_page = cur_page;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <welcome_page+0x58>)
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <welcome_page+0x54>)
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e001      	b.n	80017c6 <welcome_page+0x22>
	} else {
		lcd_home();
 80017c2:	f7ff fe05 	bl	80013d0 <lcd_home>
	}

	lcd_set_cursor(5, 0);
 80017c6:	2100      	movs	r1, #0
 80017c8:	2005      	movs	r0, #5
 80017ca:	f7ff ff57 	bl	800167c <lcd_set_cursor>
	lcd_print("WELCOME!");
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <welcome_page+0x5c>)
 80017d0:	f7ff ff3e 	bl	8001650 <lcd_print>
	lcd_set_cursor(-3, 2);
 80017d4:	2102      	movs	r1, #2
 80017d6:	f06f 0002 	mvn.w	r0, #2
 80017da:	f7ff ff4f 	bl	800167c <lcd_set_cursor>
	lcd_print("Select a mode");
 80017de:	4809      	ldr	r0, [pc, #36]	; (8001804 <welcome_page+0x60>)
 80017e0:	f7ff ff36 	bl	8001650 <lcd_print>
	lcd_set_cursor(-3, 3);
 80017e4:	2103      	movs	r1, #3
 80017e6:	f06f 0002 	mvn.w	r0, #2
 80017ea:	f7ff ff47 	bl	800167c <lcd_set_cursor>
	lcd_print("to start dryer");
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <welcome_page+0x64>)
 80017f0:	f7ff ff2e 	bl	8001650 <lcd_print>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000016c 	.word	0x2000016c
 80017fc:	2000016b 	.word	0x2000016b
 8001800:	08007070 	.word	0x08007070
 8001804:	0800707c 	.word	0x0800707c
 8001808:	0800708c 	.word	0x0800708c

0800180c <door_open_page>:

void door_open_page(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
//	printf("door_open_page\r\n");
	if (last_page != cur_page) {
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <door_open_page+0x44>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <door_open_page+0x48>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d006      	beq.n	800182a <door_open_page+0x1e>
		lcd_clear();
 800181c:	f7ff feca 	bl	80015b4 <lcd_clear>

		last_page = cur_page;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <door_open_page+0x48>)
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <door_open_page+0x44>)
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e001      	b.n	800182e <door_open_page+0x22>
	} else {
		lcd_home();
 800182a:	f7ff fdd1 	bl	80013d0 <lcd_home>
	}

	lcd_set_cursor(6, 1);
 800182e:	2101      	movs	r1, #1
 8001830:	2006      	movs	r0, #6
 8001832:	f7ff ff23 	bl	800167c <lcd_set_cursor>
	lcd_print("DOOR");
 8001836:	4808      	ldr	r0, [pc, #32]	; (8001858 <door_open_page+0x4c>)
 8001838:	f7ff ff0a 	bl	8001650 <lcd_print>
	lcd_set_cursor(6, 2);
 800183c:	2102      	movs	r1, #2
 800183e:	2006      	movs	r0, #6
 8001840:	f7ff ff1c 	bl	800167c <lcd_set_cursor>
	lcd_print("OPEN");
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <door_open_page+0x50>)
 8001846:	f7ff ff03 	bl	8001650 <lcd_print>
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000016c 	.word	0x2000016c
 8001854:	2000016b 	.word	0x2000016b
 8001858:	0800709c 	.word	0x0800709c
 800185c:	080070a4 	.word	0x080070a4

08001860 <heater_coil_page>:

void heater_coil_page(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
//	printf("heater_coil_page\r\n");
	if (last_page != cur_page) {
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <heater_coil_page+0x44>)
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <heater_coil_page+0x48>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d006      	beq.n	800187e <heater_coil_page+0x1e>
		lcd_clear();
 8001870:	f7ff fea0 	bl	80015b4 <lcd_clear>
		last_page = cur_page;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <heater_coil_page+0x48>)
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <heater_coil_page+0x44>)
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e001      	b.n	8001882 <heater_coil_page+0x22>
	} else {
		lcd_home();
 800187e:	f7ff fda7 	bl	80013d0 <lcd_home>
	}

	lcd_set_cursor(5, 1);
 8001882:	2101      	movs	r1, #1
 8001884:	2005      	movs	r0, #5
 8001886:	f7ff fef9 	bl	800167c <lcd_set_cursor>
	lcd_print("HEATER");
 800188a:	4808      	ldr	r0, [pc, #32]	; (80018ac <heater_coil_page+0x4c>)
 800188c:	f7ff fee0 	bl	8001650 <lcd_print>
	lcd_set_cursor(5, 2);
 8001890:	2102      	movs	r1, #2
 8001892:	2005      	movs	r0, #5
 8001894:	f7ff fef2 	bl	800167c <lcd_set_cursor>
	lcd_print("ERROR");
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <heater_coil_page+0x50>)
 800189a:	f7ff fed9 	bl	8001650 <lcd_print>
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000016c 	.word	0x2000016c
 80018a8:	2000016b 	.word	0x2000016b
 80018ac:	080070ac 	.word	0x080070ac
 80018b0:	080070b4 	.word	0x080070b4

080018b4 <limit_sw_err_page>:

void limit_sw_err_page(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
//	printf("limit_sw_err_page\r\n");
	if (last_page != cur_page) {
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <limit_sw_err_page+0x44>)
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <limit_sw_err_page+0x48>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d006      	beq.n	80018d2 <limit_sw_err_page+0x1e>
		lcd_clear();
 80018c4:	f7ff fe76 	bl	80015b4 <lcd_clear>
		last_page = cur_page;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <limit_sw_err_page+0x48>)
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <limit_sw_err_page+0x44>)
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e001      	b.n	80018d6 <limit_sw_err_page+0x22>
	} else {
		lcd_home();
 80018d2:	f7ff fd7d 	bl	80013d0 <lcd_home>
	}

	lcd_set_cursor(5, 0);
 80018d6:	2100      	movs	r1, #0
 80018d8:	2005      	movs	r0, #5
 80018da:	f7ff fecf 	bl	800167c <lcd_set_cursor>
	lcd_print("LIMIT");
 80018de:	4808      	ldr	r0, [pc, #32]	; (8001900 <limit_sw_err_page+0x4c>)
 80018e0:	f7ff feb6 	bl	8001650 <lcd_print>
	lcd_set_cursor(5, 2);
 80018e4:	2102      	movs	r1, #2
 80018e6:	2005      	movs	r0, #5
 80018e8:	f7ff fec8 	bl	800167c <lcd_set_cursor>
	lcd_print("ERROR");
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <limit_sw_err_page+0x50>)
 80018ee:	f7ff feaf 	bl	8001650 <lcd_print>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000016c 	.word	0x2000016c
 80018fc:	2000016b 	.word	0x2000016b
 8001900:	080070bc 	.word	0x080070bc
 8001904:	080070b4 	.word	0x080070b4

08001908 <complete_page>:

void complete_page(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
//	printf("complete_page\r\n");
	if (last_page != cur_page) {
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <complete_page+0x44>)
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <complete_page+0x48>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d006      	beq.n	8001926 <complete_page+0x1e>
		lcd_clear();
 8001918:	f7ff fe4c 	bl	80015b4 <lcd_clear>
		last_page = cur_page;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <complete_page+0x48>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <complete_page+0x44>)
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	e001      	b.n	800192a <complete_page+0x22>
	} else {
		lcd_home();
 8001926:	f7ff fd53 	bl	80013d0 <lcd_home>
	}

	lcd_set_cursor(4, 0);
 800192a:	2100      	movs	r1, #0
 800192c:	2004      	movs	r0, #4
 800192e:	f7ff fea5 	bl	800167c <lcd_set_cursor>
	lcd_print("PROCESS");
 8001932:	4808      	ldr	r0, [pc, #32]	; (8001954 <complete_page+0x4c>)
 8001934:	f7ff fe8c 	bl	8001650 <lcd_print>
	lcd_set_cursor(0, 2);
 8001938:	2102      	movs	r1, #2
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff fe9e 	bl	800167c <lcd_set_cursor>
	lcd_print("COMPLETE");
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <complete_page+0x50>)
 8001942:	f7ff fe85 	bl	8001650 <lcd_print>
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000016c 	.word	0x2000016c
 8001950:	2000016b 	.word	0x2000016b
 8001954:	080070c4 	.word	0x080070c4
 8001958:	080070cc 	.word	0x080070cc

0800195c <mode_level_page>:

void mode_level_page(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
//	printf("mode_level_page\r\n");
	static uint16_t a = 0, b = 0;
	if (last_page != cur_page) {
 8001960:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <mode_level_page+0x15c>)
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	4b55      	ldr	r3, [pc, #340]	; (8001abc <mode_level_page+0x160>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d006      	beq.n	800197a <mode_level_page+0x1e>
		lcd_clear();
 800196c:	f7ff fe22 	bl	80015b4 <lcd_clear>
		last_page = cur_page;
 8001970:	4b52      	ldr	r3, [pc, #328]	; (8001abc <mode_level_page+0x160>)
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <mode_level_page+0x15c>)
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	e001      	b.n	800197e <mode_level_page+0x22>
	} else
		lcd_home();
 800197a:	f7ff fd29 	bl	80013d0 <lcd_home>

	a = dryer.heatTime % 60;
 800197e:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <mode_level_page+0x164>)
 8001980:	885a      	ldrh	r2, [r3, #2]
 8001982:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <mode_level_page+0x168>)
 8001984:	fba3 1302 	umull	r1, r3, r3, r2
 8001988:	0959      	lsrs	r1, r3, #5
 800198a:	460b      	mov	r3, r1
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a5b      	subs	r3, r3, r1
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <mode_level_page+0x16c>)
 8001998:	801a      	strh	r2, [r3, #0]
	b = dryer.heatTime / 60;
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <mode_level_page+0x164>)
 800199c:	885b      	ldrh	r3, [r3, #2]
 800199e:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <mode_level_page+0x168>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b48      	ldr	r3, [pc, #288]	; (8001acc <mode_level_page+0x170>)
 80019aa:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf, "h=%02d:%02d", b, a);
 80019ac:	4b47      	ldr	r3, [pc, #284]	; (8001acc <mode_level_page+0x170>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b45      	ldr	r3, [pc, #276]	; (8001ac8 <mode_level_page+0x16c>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	4946      	ldr	r1, [pc, #280]	; (8001ad0 <mode_level_page+0x174>)
 80019b8:	4846      	ldr	r0, [pc, #280]	; (8001ad4 <mode_level_page+0x178>)
 80019ba:	f004 f9af 	bl	8005d1c <siprintf>
	lcd_set_cursor(0, 0);
 80019be:	2100      	movs	r1, #0
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff fe5b 	bl	800167c <lcd_set_cursor>
	lcd_print(lcd_buf);
 80019c6:	4843      	ldr	r0, [pc, #268]	; (8001ad4 <mode_level_page+0x178>)
 80019c8:	f7ff fe42 	bl	8001650 <lcd_print>

	a = dryer.coolTime % 60;
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <mode_level_page+0x164>)
 80019ce:	889a      	ldrh	r2, [r3, #4]
 80019d0:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <mode_level_page+0x168>)
 80019d2:	fba3 1302 	umull	r1, r3, r3, r2
 80019d6:	0959      	lsrs	r1, r3, #5
 80019d8:	460b      	mov	r3, r1
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a5b      	subs	r3, r3, r1
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <mode_level_page+0x16c>)
 80019e6:	801a      	strh	r2, [r3, #0]
	b = dryer.coolTime / 60;
 80019e8:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <mode_level_page+0x164>)
 80019ea:	889b      	ldrh	r3, [r3, #4]
 80019ec:	4a35      	ldr	r2, [pc, #212]	; (8001ac4 <mode_level_page+0x168>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b35      	ldr	r3, [pc, #212]	; (8001acc <mode_level_page+0x170>)
 80019f8:	801a      	strh	r2, [r3, #0]
	sprintf(lcd_buf, "c=%02d:%02d", b, a);
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <mode_level_page+0x170>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <mode_level_page+0x16c>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	4934      	ldr	r1, [pc, #208]	; (8001ad8 <mode_level_page+0x17c>)
 8001a06:	4833      	ldr	r0, [pc, #204]	; (8001ad4 <mode_level_page+0x178>)
 8001a08:	f004 f988 	bl	8005d1c <siprintf>
	lcd_set_cursor(9, 0);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2009      	movs	r0, #9
 8001a10:	f7ff fe34 	bl	800167c <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001a14:	482f      	ldr	r0, [pc, #188]	; (8001ad4 <mode_level_page+0x178>)
 8001a16:	f7ff fe1b 	bl	8001650 <lcd_print>

	if (dryer.mode == LOW_LEVEL)
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <mode_level_page+0x164>)
 8001a1c:	785b      	ldrb	r3, [r3, #1]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d104      	bne.n	8001a2c <mode_level_page+0xd0>
		sprintf(lcd_buf, "LEVEL: LOW");
 8001a22:	492e      	ldr	r1, [pc, #184]	; (8001adc <mode_level_page+0x180>)
 8001a24:	482b      	ldr	r0, [pc, #172]	; (8001ad4 <mode_level_page+0x178>)
 8001a26:	f004 f979 	bl	8005d1c <siprintf>
 8001a2a:	e010      	b.n	8001a4e <mode_level_page+0xf2>
	else if (dryer.mode == MED_LEVEL)
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <mode_level_page+0x164>)
 8001a2e:	785b      	ldrb	r3, [r3, #1]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d104      	bne.n	8001a3e <mode_level_page+0xe2>
		sprintf(lcd_buf, "LEVEL: MEDIUM");
 8001a34:	492a      	ldr	r1, [pc, #168]	; (8001ae0 <mode_level_page+0x184>)
 8001a36:	4827      	ldr	r0, [pc, #156]	; (8001ad4 <mode_level_page+0x178>)
 8001a38:	f004 f970 	bl	8005d1c <siprintf>
 8001a3c:	e007      	b.n	8001a4e <mode_level_page+0xf2>
	else if (dryer.mode == HIGH_LEVEL)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <mode_level_page+0x164>)
 8001a40:	785b      	ldrb	r3, [r3, #1]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d103      	bne.n	8001a4e <mode_level_page+0xf2>
		sprintf(lcd_buf, "LEVEL: HIGH");
 8001a46:	4927      	ldr	r1, [pc, #156]	; (8001ae4 <mode_level_page+0x188>)
 8001a48:	4822      	ldr	r0, [pc, #136]	; (8001ad4 <mode_level_page+0x178>)
 8001a4a:	f004 f967 	bl	8005d1c <siprintf>
	else
		;

	lcd_set_cursor(2, 1);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	2002      	movs	r0, #2
 8001a52:	f7ff fe13 	bl	800167c <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001a56:	481f      	ldr	r0, [pc, #124]	; (8001ad4 <mode_level_page+0x178>)
 8001a58:	f7ff fdfa 	bl	8001650 <lcd_print>

	sprintf(lcd_buf, "SetTemp: %02dC", dryer.setTemp);
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <mode_level_page+0x164>)
 8001a5e:	799b      	ldrb	r3, [r3, #6]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4921      	ldr	r1, [pc, #132]	; (8001ae8 <mode_level_page+0x18c>)
 8001a64:	481b      	ldr	r0, [pc, #108]	; (8001ad4 <mode_level_page+0x178>)
 8001a66:	f004 f959 	bl	8005d1c <siprintf>
	lcd_set_cursor(-1, 2);
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff fe04 	bl	800167c <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001a74:	4817      	ldr	r0, [pc, #92]	; (8001ad4 <mode_level_page+0x178>)
 8001a76:	f7ff fdeb 	bl	8001650 <lcd_print>

	//cur_temp = (int)Max6675_Read_Temp();

	if (cur_temp == -1 || cur_temp == 0) {
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <mode_level_page+0x190>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a82:	d003      	beq.n	8001a8c <mode_level_page+0x130>
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <mode_level_page+0x190>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d104      	bne.n	8001a96 <mode_level_page+0x13a>
		sprintf(lcd_buf, "CurTemp: ERR");
 8001a8c:	4918      	ldr	r1, [pc, #96]	; (8001af0 <mode_level_page+0x194>)
 8001a8e:	4811      	ldr	r0, [pc, #68]	; (8001ad4 <mode_level_page+0x178>)
 8001a90:	f004 f944 	bl	8005d1c <siprintf>
 8001a94:	e006      	b.n	8001aa4 <mode_level_page+0x148>
	} else {
		sprintf(lcd_buf, "CurTemp: %02dC ", cur_temp);
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <mode_level_page+0x190>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4915      	ldr	r1, [pc, #84]	; (8001af4 <mode_level_page+0x198>)
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <mode_level_page+0x178>)
 8001aa0:	f004 f93c 	bl	8005d1c <siprintf>
	}
	lcd_set_cursor(-1, 3);
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aaa:	f7ff fde7 	bl	800167c <lcd_set_cursor>
	lcd_print(lcd_buf);
 8001aae:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <mode_level_page+0x178>)
 8001ab0:	f7ff fdce 	bl	8001650 <lcd_print>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000016c 	.word	0x2000016c
 8001abc:	2000016b 	.word	0x2000016b
 8001ac0:	20000154 	.word	0x20000154
 8001ac4:	88888889 	.word	0x88888889
 8001ac8:	20000138 	.word	0x20000138
 8001acc:	2000013a 	.word	0x2000013a
 8001ad0:	080070d8 	.word	0x080070d8
 8001ad4:	200000e8 	.word	0x200000e8
 8001ad8:	080070e4 	.word	0x080070e4
 8001adc:	080070f0 	.word	0x080070f0
 8001ae0:	080070fc 	.word	0x080070fc
 8001ae4:	0800710c 	.word	0x0800710c
 8001ae8:	08007118 	.word	0x08007118
 8001aec:	20000018 	.word	0x20000018
 8001af0:	08007128 	.word	0x08007128
 8001af4:	08007138 	.word	0x08007138

08001af8 <setting_page>:

void setting_page(void) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	if (last_page != cur_page) {
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <setting_page+0x54>)
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <setting_page+0x58>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d006      	beq.n	8001b16 <setting_page+0x1e>
		lcd_clear();
 8001b08:	f7ff fd54 	bl	80015b4 <lcd_clear>
		last_page = cur_page;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <setting_page+0x58>)
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <setting_page+0x54>)
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e001      	b.n	8001b1a <setting_page+0x22>
	} else {
		lcd_home();
 8001b16:	f7ff fc5b 	bl	80013d0 <lcd_home>
	}
	lcd_set_cursor(5, 0);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2005      	movs	r0, #5
 8001b1e:	f7ff fdad 	bl	800167c <lcd_set_cursor>
	lcd_print("Setting Mode");
 8001b22:	480c      	ldr	r0, [pc, #48]	; (8001b54 <setting_page+0x5c>)
 8001b24:	f7ff fd94 	bl	8001650 <lcd_print>
	lcd_set_cursor(-3, 2);
 8001b28:	2102      	movs	r1, #2
 8001b2a:	f06f 0002 	mvn.w	r0, #2
 8001b2e:	f7ff fda5 	bl	800167c <lcd_set_cursor>
	lcd_print("Select a mode");
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <setting_page+0x60>)
 8001b34:	f7ff fd8c 	bl	8001650 <lcd_print>
	lcd_set_cursor(-3, 3);
 8001b38:	2103      	movs	r1, #3
 8001b3a:	f06f 0002 	mvn.w	r0, #2
 8001b3e:	f7ff fd9d 	bl	800167c <lcd_set_cursor>
	lcd_print("to set");
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <setting_page+0x64>)
 8001b44:	f7ff fd84 	bl	8001650 <lcd_print>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000016c 	.word	0x2000016c
 8001b50:	2000016b 	.word	0x2000016b
 8001b54:	08007148 	.word	0x08007148
 8001b58:	0800707c 	.word	0x0800707c
 8001b5c:	08007158 	.word	0x08007158

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4906      	ldr	r1, [pc, #24]	; (8001b94 <__NVIC_EnableIRQ+0x34>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db12      	blt.n	8001bd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	490a      	ldr	r1, [pc, #40]	; (8001bdc <__NVIC_DisableIRQ+0x44>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	3320      	adds	r3, #32
 8001bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc4:	f3bf 8f4f 	dsb	sy
}
 8001bc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bca:	f3bf 8f6f 	isb	sy
}
 8001bce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*For Debug use printf to Print data on UART*/
int __io_putchar(int ch) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 10);
 8001be8:	1d39      	adds	r1, r7, #4
 8001bea:	230a      	movs	r3, #10
 8001bec:	2201      	movs	r2, #1
 8001bee:	4804      	ldr	r0, [pc, #16]	; (8001c00 <__io_putchar+0x20>)
 8001bf0:	f003 fe69 	bl	80058c6 <HAL_UART_Transmit>
	return ch;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000214 	.word	0x20000214

08001c04 <setting_root_page>:

void setting_root_page(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
	printf("Setting Mode\r\n");
 8001c0a:	489d      	ldr	r0, [pc, #628]	; (8001e80 <setting_root_page+0x27c>)
 8001c0c:	f004 f87e 	bl	8005d0c <puts>

	Cursor_Pos_t cursor_pos = CURSOR_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	71fb      	strb	r3, [r7, #7]
	cur_page = SETTING_PAGE;
 8001c14:	4b9b      	ldr	r3, [pc, #620]	; (8001e84 <setting_root_page+0x280>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
	lcd_update_evt = 1;
 8001c1a:	4b9b      	ldr	r3, [pc, #620]	; (8001e88 <setting_root_page+0x284>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]

	while (1) {

		if (lcd_update_evt) {
 8001c20:	4b99      	ldr	r3, [pc, #612]	; (8001e88 <setting_root_page+0x284>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d02c      	beq.n	8001c82 <setting_root_page+0x7e>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 8001c28:	f7ff fd86 	bl	8001738 <lcd_update>
			if(cursor_pos == CURSOR_DISABLE){
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d103      	bne.n	8001c3a <setting_root_page+0x36>
				lcd_cursor(0);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff fcde 	bl	80015f4 <lcd_cursor>
 8001c38:	e020      	b.n	8001c7c <setting_root_page+0x78>
			}else if(cursor_pos == SET_HEAT_TIMER){
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d107      	bne.n	8001c50 <setting_root_page+0x4c>
				lcd_set_cursor(3, 0);
 8001c40:	2100      	movs	r1, #0
 8001c42:	2003      	movs	r0, #3
 8001c44:	f7ff fd1a 	bl	800167c <lcd_set_cursor>
				lcd_cursor(1);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f7ff fcd3 	bl	80015f4 <lcd_cursor>
 8001c4e:	e015      	b.n	8001c7c <setting_root_page+0x78>
			}else if(cursor_pos == SET_COOL_TIMER){
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d107      	bne.n	8001c66 <setting_root_page+0x62>
				lcd_set_cursor(12, 0);
 8001c56:	2100      	movs	r1, #0
 8001c58:	200c      	movs	r0, #12
 8001c5a:	f7ff fd0f 	bl	800167c <lcd_set_cursor>
				lcd_cursor(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7ff fcc8 	bl	80015f4 <lcd_cursor>
 8001c64:	e00a      	b.n	8001c7c <setting_root_page+0x78>
			}else if(cursor_pos == SET_TEMP){
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d107      	bne.n	8001c7c <setting_root_page+0x78>
				lcd_set_cursor(-1, 2);
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c72:	f7ff fd03 	bl	800167c <lcd_set_cursor>
				lcd_cursor(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff fcbc 	bl	80015f4 <lcd_cursor>
			}
			lcd_update_evt = 0U;
 8001c7c:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <setting_root_page+0x284>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
		}

		if (cur_page == SETTING_PAGE) {
 8001c82:	4b80      	ldr	r3, [pc, #512]	; (8001e84 <setting_root_page+0x280>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d177      	bne.n	8001d7a <setting_root_page+0x176>
			scaned_key = scan_keypad();
 8001c8a:	f7ff f9f1 	bl	8001070 <scan_keypad>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b7e      	ldr	r3, [pc, #504]	; (8001e8c <setting_root_page+0x288>)
 8001c94:	701a      	strb	r2, [r3, #0]
			switch (scaned_key) {
 8001c96:	4b7d      	ldr	r3, [pc, #500]	; (8001e8c <setting_root_page+0x288>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d869      	bhi.n	8001d72 <setting_root_page+0x16e>
 8001c9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <setting_root_page+0xa0>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001d73 	.word	0x08001d73
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001cf7 	.word	0x08001cf7
 8001cb0:	08001d35 	.word	0x08001d35
 8001cb4:	08002031 	.word	0x08002031
			case NO_KEY_PRESSED:
				break;

			case LOW_KEY_PRESSED:
				dryer.mode = LOW_LEVEL;
 8001cb8:	4b75      	ldr	r3, [pc, #468]	; (8001e90 <setting_root_page+0x28c>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	705a      	strb	r2, [r3, #1]
				dryer.heatTime = val_arr[0];
 8001cbe:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <setting_root_page+0x290>)
 8001cc0:	881a      	ldrh	r2, [r3, #0]
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <setting_root_page+0x28c>)
 8001cc4:	805a      	strh	r2, [r3, #2]
				dryer.coolTime = val_arr[1];
 8001cc6:	4b73      	ldr	r3, [pc, #460]	; (8001e94 <setting_root_page+0x290>)
 8001cc8:	885a      	ldrh	r2, [r3, #2]
 8001cca:	4b71      	ldr	r3, [pc, #452]	; (8001e90 <setting_root_page+0x28c>)
 8001ccc:	809a      	strh	r2, [r3, #4]
				dryer.setTemp = val_arr[2];
 8001cce:	4b71      	ldr	r3, [pc, #452]	; (8001e94 <setting_root_page+0x290>)
 8001cd0:	889b      	ldrh	r3, [r3, #4]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b6e      	ldr	r3, [pc, #440]	; (8001e90 <setting_root_page+0x28c>)
 8001cd6:	719a      	strb	r2, [r3, #6]
				cur_page = LOW_LEVEL_PAGE;
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <setting_root_page+0x280>)
 8001cda:	2202      	movs	r2, #2
 8001cdc:	701a      	strb	r2, [r3, #0]
				cursor_pos = SET_HEAT_TIMER;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	71fb      	strb	r3, [r7, #7]
				lcd_update_evt = 1U;
 8001ce2:	4b69      	ldr	r3, [pc, #420]	; (8001e88 <setting_root_page+0x284>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
				op_update_evt = 1U;
 8001ce8:	4b6b      	ldr	r3, [pc, #428]	; (8001e98 <setting_root_page+0x294>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
				printf("LOW LEVEL\r\n");
 8001cee:	486b      	ldr	r0, [pc, #428]	; (8001e9c <setting_root_page+0x298>)
 8001cf0:	f004 f80c 	bl	8005d0c <puts>
				break;
 8001cf4:	e03d      	b.n	8001d72 <setting_root_page+0x16e>

			case MED_KEY_PRESSED:
				dryer.mode = MED_LEVEL;
 8001cf6:	4b66      	ldr	r3, [pc, #408]	; (8001e90 <setting_root_page+0x28c>)
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	705a      	strb	r2, [r3, #1]
				dryer.heatTime = val_arr[3];
 8001cfc:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <setting_root_page+0x290>)
 8001cfe:	88da      	ldrh	r2, [r3, #6]
 8001d00:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <setting_root_page+0x28c>)
 8001d02:	805a      	strh	r2, [r3, #2]
				dryer.coolTime = val_arr[4];
 8001d04:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <setting_root_page+0x290>)
 8001d06:	891a      	ldrh	r2, [r3, #8]
 8001d08:	4b61      	ldr	r3, [pc, #388]	; (8001e90 <setting_root_page+0x28c>)
 8001d0a:	809a      	strh	r2, [r3, #4]
				dryer.setTemp = val_arr[5];
 8001d0c:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <setting_root_page+0x290>)
 8001d0e:	895b      	ldrh	r3, [r3, #10]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b5f      	ldr	r3, [pc, #380]	; (8001e90 <setting_root_page+0x28c>)
 8001d14:	719a      	strb	r2, [r3, #6]
				cur_page = MED_LEVEL_PAGE;
 8001d16:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <setting_root_page+0x280>)
 8001d18:	2203      	movs	r2, #3
 8001d1a:	701a      	strb	r2, [r3, #0]
				cursor_pos = SET_HEAT_TIMER;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	71fb      	strb	r3, [r7, #7]
				lcd_update_evt = 1U;
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <setting_root_page+0x284>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
				op_update_evt = 1U;
 8001d26:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <setting_root_page+0x294>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
				printf("MED_LEVEL\r\n");
 8001d2c:	485c      	ldr	r0, [pc, #368]	; (8001ea0 <setting_root_page+0x29c>)
 8001d2e:	f003 ffed 	bl	8005d0c <puts>
				break;
 8001d32:	e01e      	b.n	8001d72 <setting_root_page+0x16e>

			case HIGH_KEY_PRESSED:
				dryer.mode = HIGH_LEVEL;
 8001d34:	4b56      	ldr	r3, [pc, #344]	; (8001e90 <setting_root_page+0x28c>)
 8001d36:	2203      	movs	r2, #3
 8001d38:	705a      	strb	r2, [r3, #1]
				dryer.heatTime = val_arr[6];
 8001d3a:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <setting_root_page+0x290>)
 8001d3c:	899a      	ldrh	r2, [r3, #12]
 8001d3e:	4b54      	ldr	r3, [pc, #336]	; (8001e90 <setting_root_page+0x28c>)
 8001d40:	805a      	strh	r2, [r3, #2]
				dryer.coolTime = val_arr[7];
 8001d42:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <setting_root_page+0x290>)
 8001d44:	89da      	ldrh	r2, [r3, #14]
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <setting_root_page+0x28c>)
 8001d48:	809a      	strh	r2, [r3, #4]
				dryer.setTemp = val_arr[8];
 8001d4a:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <setting_root_page+0x290>)
 8001d4c:	8a1b      	ldrh	r3, [r3, #16]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b4f      	ldr	r3, [pc, #316]	; (8001e90 <setting_root_page+0x28c>)
 8001d52:	719a      	strb	r2, [r3, #6]
				cur_page = HIGH_LEVEL_PAGE;
 8001d54:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <setting_root_page+0x280>)
 8001d56:	2204      	movs	r2, #4
 8001d58:	701a      	strb	r2, [r3, #0]
				cursor_pos = SET_HEAT_TIMER;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	71fb      	strb	r3, [r7, #7]
				lcd_update_evt = 1U;
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <setting_root_page+0x284>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
				op_update_evt = 1U;
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <setting_root_page+0x294>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
				printf("HIGH_LEVEL\r\n");
 8001d6a:	484e      	ldr	r0, [pc, #312]	; (8001ea4 <setting_root_page+0x2a0>)
 8001d6c:	f003 ffce 	bl	8005d0c <puts>
				break;
 8001d70:	bf00      	nop

			case FN_KEY_PRESSED:
				/*Cancel Function*/
				return;
			}
			scaned_key = NO_KEY_PRESSED;
 8001d72:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <setting_root_page+0x288>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e752      	b.n	8001c20 <setting_root_page+0x1c>
		} else {
			scaned_key = scan_keypad();
 8001d7a:	f7ff f979 	bl	8001070 <scan_keypad>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <setting_root_page+0x288>)
 8001d84:	701a      	strb	r2, [r3, #0]
			switch (scaned_key) {
 8001d86:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <setting_root_page+0x288>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	f200 814c 	bhi.w	8002028 <setting_root_page+0x424>
 8001d90:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <setting_root_page+0x194>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08002029 	.word	0x08002029
 8001d9c:	08001dad 	.word	0x08001dad
 8001da0:	08001e19 	.word	0x08001e19
 8001da4:	08001e39 	.word	0x08001e39
 8001da8:	08001ed1 	.word	0x08001ed1
			case NO_KEY_PRESSED:
				break;
			case LOW_KEY_PRESSED:
				if ((cursor_pos == SET_HEAT_TIMER) && (dryer.heatTime > 60U)) {
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d10d      	bne.n	8001dce <setting_root_page+0x1ca>
 8001db2:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <setting_root_page+0x28c>)
 8001db4:	885b      	ldrh	r3, [r3, #2]
 8001db6:	2b3c      	cmp	r3, #60	; 0x3c
 8001db8:	d909      	bls.n	8001dce <setting_root_page+0x1ca>
					lcd_update_evt = 1;
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <setting_root_page+0x284>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
					dryer.heatTime -= 60U;
 8001dc0:	4b33      	ldr	r3, [pc, #204]	; (8001e90 <setting_root_page+0x28c>)
 8001dc2:	885b      	ldrh	r3, [r3, #2]
 8001dc4:	3b3c      	subs	r3, #60	; 0x3c
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <setting_root_page+0x28c>)
 8001dca:	805a      	strh	r2, [r3, #2]
 8001dcc:	e023      	b.n	8001e16 <setting_root_page+0x212>
				} else if ((cursor_pos == SET_COOL_TIMER)
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d10d      	bne.n	8001df0 <setting_root_page+0x1ec>
						&& (dryer.coolTime > 60U)) {
 8001dd4:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <setting_root_page+0x28c>)
 8001dd6:	889b      	ldrh	r3, [r3, #4]
 8001dd8:	2b3c      	cmp	r3, #60	; 0x3c
 8001dda:	d909      	bls.n	8001df0 <setting_root_page+0x1ec>
					lcd_update_evt = 1;
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <setting_root_page+0x284>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
					dryer.coolTime -= 60U;
 8001de2:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <setting_root_page+0x28c>)
 8001de4:	889b      	ldrh	r3, [r3, #4]
 8001de6:	3b3c      	subs	r3, #60	; 0x3c
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <setting_root_page+0x28c>)
 8001dec:	809a      	strh	r2, [r3, #4]
 8001dee:	e012      	b.n	8001e16 <setting_root_page+0x212>
				} else if ((cursor_pos == SET_TEMP) && (dryer.setTemp > 30U)) {
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	f040 8113 	bne.w	800201e <setting_root_page+0x41a>
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <setting_root_page+0x28c>)
 8001dfa:	799b      	ldrb	r3, [r3, #6]
 8001dfc:	2b1e      	cmp	r3, #30
 8001dfe:	f240 810e 	bls.w	800201e <setting_root_page+0x41a>
					lcd_update_evt = 1;
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <setting_root_page+0x284>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
					dryer.setTemp -= 1U;
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <setting_root_page+0x28c>)
 8001e0a:	799b      	ldrb	r3, [r3, #6]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <setting_root_page+0x28c>)
 8001e12:	719a      	strb	r2, [r3, #6]
				}
				break;
 8001e14:	e103      	b.n	800201e <setting_root_page+0x41a>
 8001e16:	e102      	b.n	800201e <setting_root_page+0x41a>
			case MED_KEY_PRESSED:
				/*Roll Back*/
				if (cursor_pos == SET_TEMP) {
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d105      	bne.n	8001e2a <setting_root_page+0x226>
					lcd_update_evt = 1;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <setting_root_page+0x284>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
					cursor_pos = SET_HEAT_TIMER;
 8001e24:	2301      	movs	r3, #1
 8001e26:	71fb      	strb	r3, [r7, #7]
				} else {
					lcd_update_evt = 1;
					cursor_pos++;
				}
				break;
 8001e28:	e0fe      	b.n	8002028 <setting_root_page+0x424>
					lcd_update_evt = 1;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <setting_root_page+0x284>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
					cursor_pos++;
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	3301      	adds	r3, #1
 8001e34:	71fb      	strb	r3, [r7, #7]
				break;
 8001e36:	e0f7      	b.n	8002028 <setting_root_page+0x424>
			case HIGH_KEY_PRESSED:
				if ((cursor_pos == SET_HEAT_TIMER)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10e      	bne.n	8001e5c <setting_root_page+0x258>
						&& (dryer.heatTime < 3600U)) {
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <setting_root_page+0x28c>)
 8001e40:	885b      	ldrh	r3, [r3, #2]
 8001e42:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001e46:	d209      	bcs.n	8001e5c <setting_root_page+0x258>
					dryer.heatTime += 60U;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <setting_root_page+0x28c>)
 8001e4a:	885b      	ldrh	r3, [r3, #2]
 8001e4c:	333c      	adds	r3, #60	; 0x3c
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <setting_root_page+0x28c>)
 8001e52:	805a      	strh	r2, [r3, #2]
					lcd_update_evt = 1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <setting_root_page+0x284>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e038      	b.n	8001ece <setting_root_page+0x2ca>
				} else if ((cursor_pos == SET_COOL_TIMER)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d122      	bne.n	8001ea8 <setting_root_page+0x2a4>
						&& (dryer.coolTime < 3600U)) {
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <setting_root_page+0x28c>)
 8001e64:	889b      	ldrh	r3, [r3, #4]
 8001e66:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001e6a:	d21d      	bcs.n	8001ea8 <setting_root_page+0x2a4>
					dryer.coolTime += 60U;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <setting_root_page+0x28c>)
 8001e6e:	889b      	ldrh	r3, [r3, #4]
 8001e70:	333c      	adds	r3, #60	; 0x3c
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <setting_root_page+0x28c>)
 8001e76:	809a      	strh	r2, [r3, #4]
					lcd_update_evt = 1;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <setting_root_page+0x284>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	e026      	b.n	8001ece <setting_root_page+0x2ca>
 8001e80:	08007160 	.word	0x08007160
 8001e84:	2000016b 	.word	0x2000016b
 8001e88:	20000162 	.word	0x20000162
 8001e8c:	2000016a 	.word	0x2000016a
 8001e90:	20000154 	.word	0x20000154
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000163 	.word	0x20000163
 8001e9c:	08007170 	.word	0x08007170
 8001ea0:	0800717c 	.word	0x0800717c
 8001ea4:	08007188 	.word	0x08007188
				} else if ((cursor_pos == SET_TEMP) && (dryer.setTemp < 90U)) {
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	f040 80b9 	bne.w	8002022 <setting_root_page+0x41e>
 8001eb0:	4b61      	ldr	r3, [pc, #388]	; (8002038 <setting_root_page+0x434>)
 8001eb2:	799b      	ldrb	r3, [r3, #6]
 8001eb4:	2b59      	cmp	r3, #89	; 0x59
 8001eb6:	f200 80b4 	bhi.w	8002022 <setting_root_page+0x41e>
					dryer.setTemp += 1U;
 8001eba:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <setting_root_page+0x434>)
 8001ebc:	799b      	ldrb	r3, [r3, #6]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	; (8002038 <setting_root_page+0x434>)
 8001ec4:	719a      	strb	r2, [r3, #6]
					lcd_update_evt = 1;
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	; (800203c <setting_root_page+0x438>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001ecc:	e0a9      	b.n	8002022 <setting_root_page+0x41e>
 8001ece:	e0a8      	b.n	8002022 <setting_root_page+0x41e>
				/*TODO Cancel Function*/
				/*
				 * Save data
				 * go to setting mode page
				 */
				cur_page = SETTING_PAGE;
 8001ed0:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <setting_root_page+0x43c>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
				cursor_pos = CURSOR_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	71fb      	strb	r3, [r7, #7]
				lcd_update_evt = 1;
 8001eda:	4b58      	ldr	r3, [pc, #352]	; (800203c <setting_root_page+0x438>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]

				if (dryer.mode == LOW_LEVEL) {
 8001ee0:	4b55      	ldr	r3, [pc, #340]	; (8002038 <setting_root_page+0x434>)
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d130      	bne.n	8001f4a <setting_root_page+0x346>
					val_arr[0] = dryer.heatTime;
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <setting_root_page+0x434>)
 8001eea:	885a      	ldrh	r2, [r3, #2]
 8001eec:	4b55      	ldr	r3, [pc, #340]	; (8002044 <setting_root_page+0x440>)
 8001eee:	801a      	strh	r2, [r3, #0]
					val_arr[1] = dryer.coolTime;
 8001ef0:	4b51      	ldr	r3, [pc, #324]	; (8002038 <setting_root_page+0x434>)
 8001ef2:	889a      	ldrh	r2, [r3, #4]
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <setting_root_page+0x440>)
 8001ef6:	805a      	strh	r2, [r3, #2]
					val_arr[2] = dryer.setTemp;
 8001ef8:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <setting_root_page+0x434>)
 8001efa:	799b      	ldrb	r3, [r3, #6]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b51      	ldr	r3, [pc, #324]	; (8002044 <setting_root_page+0x440>)
 8001f00:	809a      	strh	r2, [r3, #4]

					for (VarIndex = 0; VarIndex < 3; VarIndex++) {
 8001f02:	4b51      	ldr	r3, [pc, #324]	; (8002048 <setting_root_page+0x444>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	801a      	strh	r2, [r3, #0]
 8001f08:	e01a      	b.n	8001f40 <setting_root_page+0x33c>
						/* Sequence 1 */
						if ((EE_WriteVariable(VirtAddVarTab[VarIndex],
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <setting_root_page+0x444>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b4e      	ldr	r3, [pc, #312]	; (800204c <setting_root_page+0x448>)
 8001f12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f16:	4a4c      	ldr	r2, [pc, #304]	; (8002048 <setting_root_page+0x444>)
 8001f18:	8812      	ldrh	r2, [r2, #0]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4a49      	ldr	r2, [pc, #292]	; (8002044 <setting_root_page+0x440>)
 8001f1e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fd99 	bl	8000a5c <EE_WriteVariable>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <setting_root_page+0x330>
								val_arr[VarIndex])) != HAL_OK) {
							Error_Handler();
 8001f30:	f000 fffc 	bl	8002f2c <Error_Handler>
					for (VarIndex = 0; VarIndex < 3; VarIndex++) {
 8001f34:	4b44      	ldr	r3, [pc, #272]	; (8002048 <setting_root_page+0x444>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	4b42      	ldr	r3, [pc, #264]	; (8002048 <setting_root_page+0x444>)
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	4b41      	ldr	r3, [pc, #260]	; (8002048 <setting_root_page+0x444>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d9e0      	bls.n	8001f0a <setting_root_page+0x306>
								val_arr[VarIndex])) != HAL_OK) {
							Error_Handler();
						}
					}
				}
				break;
 8001f48:	e06d      	b.n	8002026 <setting_root_page+0x422>
				} else if (dryer.mode == MED_LEVEL) {
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <setting_root_page+0x434>)
 8001f4c:	785b      	ldrb	r3, [r3, #1]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d130      	bne.n	8001fb4 <setting_root_page+0x3b0>
					val_arr[3] = dryer.heatTime;
 8001f52:	4b39      	ldr	r3, [pc, #228]	; (8002038 <setting_root_page+0x434>)
 8001f54:	885a      	ldrh	r2, [r3, #2]
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <setting_root_page+0x440>)
 8001f58:	80da      	strh	r2, [r3, #6]
					val_arr[4] = dryer.coolTime;
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <setting_root_page+0x434>)
 8001f5c:	889a      	ldrh	r2, [r3, #4]
 8001f5e:	4b39      	ldr	r3, [pc, #228]	; (8002044 <setting_root_page+0x440>)
 8001f60:	811a      	strh	r2, [r3, #8]
					val_arr[5] = dryer.setTemp;
 8001f62:	4b35      	ldr	r3, [pc, #212]	; (8002038 <setting_root_page+0x434>)
 8001f64:	799b      	ldrb	r3, [r3, #6]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <setting_root_page+0x440>)
 8001f6a:	815a      	strh	r2, [r3, #10]
					for (VarIndex = 3; VarIndex < 6; VarIndex++) {
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <setting_root_page+0x444>)
 8001f6e:	2203      	movs	r2, #3
 8001f70:	801a      	strh	r2, [r3, #0]
 8001f72:	e01a      	b.n	8001faa <setting_root_page+0x3a6>
						if ((EE_WriteVariable(VirtAddVarTab[VarIndex],
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <setting_root_page+0x444>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b34      	ldr	r3, [pc, #208]	; (800204c <setting_root_page+0x448>)
 8001f7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f80:	4a31      	ldr	r2, [pc, #196]	; (8002048 <setting_root_page+0x444>)
 8001f82:	8812      	ldrh	r2, [r2, #0]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <setting_root_page+0x440>)
 8001f88:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fd64 	bl	8000a5c <EE_WriteVariable>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <setting_root_page+0x39a>
							Error_Handler();
 8001f9a:	f000 ffc7 	bl	8002f2c <Error_Handler>
					for (VarIndex = 3; VarIndex < 6; VarIndex++) {
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <setting_root_page+0x444>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4b28      	ldr	r3, [pc, #160]	; (8002048 <setting_root_page+0x444>)
 8001fa8:	801a      	strh	r2, [r3, #0]
 8001faa:	4b27      	ldr	r3, [pc, #156]	; (8002048 <setting_root_page+0x444>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d9e0      	bls.n	8001f74 <setting_root_page+0x370>
				break;
 8001fb2:	e038      	b.n	8002026 <setting_root_page+0x422>
				} else if (dryer.mode == HIGH_LEVEL) {
 8001fb4:	4b20      	ldr	r3, [pc, #128]	; (8002038 <setting_root_page+0x434>)
 8001fb6:	785b      	ldrb	r3, [r3, #1]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d134      	bne.n	8002026 <setting_root_page+0x422>
					val_arr[6] = dryer.heatTime;
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <setting_root_page+0x434>)
 8001fbe:	885a      	ldrh	r2, [r3, #2]
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <setting_root_page+0x440>)
 8001fc2:	819a      	strh	r2, [r3, #12]
					val_arr[7] = dryer.coolTime;
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <setting_root_page+0x434>)
 8001fc6:	889a      	ldrh	r2, [r3, #4]
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <setting_root_page+0x440>)
 8001fca:	81da      	strh	r2, [r3, #14]
					val_arr[8] = dryer.setTemp;
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <setting_root_page+0x434>)
 8001fce:	799b      	ldrb	r3, [r3, #6]
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <setting_root_page+0x440>)
 8001fd4:	821a      	strh	r2, [r3, #16]
					for (VarIndex = 6; VarIndex < 9; VarIndex++) {
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <setting_root_page+0x444>)
 8001fd8:	2206      	movs	r2, #6
 8001fda:	801a      	strh	r2, [r3, #0]
 8001fdc:	e01a      	b.n	8002014 <setting_root_page+0x410>
						if ((EE_WriteVariable(VirtAddVarTab[VarIndex],
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <setting_root_page+0x444>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <setting_root_page+0x448>)
 8001fe6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <setting_root_page+0x444>)
 8001fec:	8812      	ldrh	r2, [r2, #0]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <setting_root_page+0x440>)
 8001ff2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fd2f 	bl	8000a5c <EE_WriteVariable>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <setting_root_page+0x404>
							Error_Handler();
 8002004:	f000 ff92 	bl	8002f2c <Error_Handler>
					for (VarIndex = 6; VarIndex < 9; VarIndex++) {
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <setting_root_page+0x444>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <setting_root_page+0x444>)
 8002012:	801a      	strh	r2, [r3, #0]
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <setting_root_page+0x444>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d9e0      	bls.n	8001fde <setting_root_page+0x3da>
				break;
 800201c:	e003      	b.n	8002026 <setting_root_page+0x422>
				break;
 800201e:	bf00      	nop
 8002020:	e002      	b.n	8002028 <setting_root_page+0x424>
				break;
 8002022:	bf00      	nop
 8002024:	e000      	b.n	8002028 <setting_root_page+0x424>
				break;
 8002026:	bf00      	nop
			}
			scaned_key = NO_KEY_PRESSED;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <setting_root_page+0x44c>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
		if (lcd_update_evt) {
 800202e:	e5f7      	b.n	8001c20 <setting_root_page+0x1c>
				return;
 8002030:	bf00      	nop
		}
	}
}
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000154 	.word	0x20000154
 800203c:	20000162 	.word	0x20000162
 8002040:	2000016b 	.word	0x2000016b
 8002044:	20000000 	.word	0x20000000
 8002048:	20000150 	.word	0x20000150
 800204c:	2000013c 	.word	0x2000013c
 8002050:	2000016a 	.word	0x2000016a

08002054 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800205a:	f001 fa0d 	bl	8003478 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800205e:	f000 fe3d 	bl	8002cdc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002062:	f7fe fecd 	bl	8000e00 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8002066:	f001 f96b 	bl	8003340 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 800206a:	f001 f8f5 	bl	8003258 <MX_TIM4_Init>
	MX_SPI1_Init();
 800206e:	f000 ff63 	bl	8002f38 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_FLASH_Unlock();
 8002072:	f001 fc05 	bl	8003880 <HAL_FLASH_Unlock>

	/* EEPROM Init */
	if (EE_Init() != HAL_OK) {
 8002076:	f7fe faa3 	bl	80005c0 <EE_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <main+0x30>
		Error_Handler();
 8002080:	f000 ff54 	bl	8002f2c <Error_Handler>
	}

// Fill EEPROM variables addresses
	for (VarIndex = 1; VarIndex <= 10; VarIndex++) {
 8002084:	4ba7      	ldr	r3, [pc, #668]	; (8002324 <main+0x2d0>)
 8002086:	2201      	movs	r2, #1
 8002088:	801a      	strh	r2, [r3, #0]
 800208a:	e00d      	b.n	80020a8 <main+0x54>
		VirtAddVarTab[VarIndex - 1] = VarIndex;
 800208c:	4ba5      	ldr	r3, [pc, #660]	; (8002324 <main+0x2d0>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	3b01      	subs	r3, #1
 8002092:	4aa4      	ldr	r2, [pc, #656]	; (8002324 <main+0x2d0>)
 8002094:	8811      	ldrh	r1, [r2, #0]
 8002096:	4aa4      	ldr	r2, [pc, #656]	; (8002328 <main+0x2d4>)
 8002098:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (VarIndex = 1; VarIndex <= 10; VarIndex++) {
 800209c:	4ba1      	ldr	r3, [pc, #644]	; (8002324 <main+0x2d0>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b9f      	ldr	r3, [pc, #636]	; (8002324 <main+0x2d0>)
 80020a6:	801a      	strh	r2, [r3, #0]
 80020a8:	4b9e      	ldr	r3, [pc, #632]	; (8002324 <main+0x2d0>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	2b0a      	cmp	r3, #10
 80020ae:	d9ed      	bls.n	800208c <main+0x38>
	}

	uint16_t data_write = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	80bb      	strh	r3, [r7, #4]
	if ((EE_ReadVariable(VirtAddVarTab[9], (uint16_t*) &data_write))
 80020b4:	4b9c      	ldr	r3, [pc, #624]	; (8002328 <main+0x2d4>)
 80020b6:	8a5b      	ldrh	r3, [r3, #18]
 80020b8:	1d3a      	adds	r2, r7, #4
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fc83 	bl	80009c8 <EE_ReadVariable>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <main+0x78>
			!= HAL_OK) {
		data_write = 1U;
 80020c8:	2301      	movs	r3, #1
 80020ca:	80bb      	strh	r3, [r7, #4]
	}

	if (data_write == 1U) {
 80020cc:	88bb      	ldrh	r3, [r7, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d125      	bne.n	800211e <main+0xca>
		printf("Writing.....\r\n");
 80020d2:	4896      	ldr	r0, [pc, #600]	; (800232c <main+0x2d8>)
 80020d4:	f003 fe1a 	bl	8005d0c <puts>
		for (VarIndex = 0; VarIndex < 10; VarIndex++) {
 80020d8:	4b92      	ldr	r3, [pc, #584]	; (8002324 <main+0x2d0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	e01a      	b.n	8002116 <main+0xc2>
			if ((EE_WriteVariable(VirtAddVarTab[VarIndex], val_arr[VarIndex]))
 80020e0:	4b90      	ldr	r3, [pc, #576]	; (8002324 <main+0x2d0>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b90      	ldr	r3, [pc, #576]	; (8002328 <main+0x2d4>)
 80020e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020ec:	4a8d      	ldr	r2, [pc, #564]	; (8002324 <main+0x2d0>)
 80020ee:	8812      	ldrh	r2, [r2, #0]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4a8f      	ldr	r2, [pc, #572]	; (8002330 <main+0x2dc>)
 80020f4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fcae 	bl	8000a5c <EE_WriteVariable>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <main+0xb6>
					!= HAL_OK) {
				Error_Handler();
 8002106:	f000 ff11 	bl	8002f2c <Error_Handler>
		for (VarIndex = 0; VarIndex < 10; VarIndex++) {
 800210a:	4b86      	ldr	r3, [pc, #536]	; (8002324 <main+0x2d0>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b84      	ldr	r3, [pc, #528]	; (8002324 <main+0x2d0>)
 8002114:	801a      	strh	r2, [r3, #0]
 8002116:	4b83      	ldr	r3, [pc, #524]	; (8002324 <main+0x2d0>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	2b09      	cmp	r3, #9
 800211c:	d9e0      	bls.n	80020e0 <main+0x8c>
//		}
//	}
//
// Read values

	for (VarIndex = 0; VarIndex < 10; VarIndex++) {
 800211e:	4b81      	ldr	r3, [pc, #516]	; (8002324 <main+0x2d0>)
 8002120:	2200      	movs	r2, #0
 8002122:	801a      	strh	r2, [r3, #0]
 8002124:	e01c      	b.n	8002160 <main+0x10c>
		if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 8002126:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <main+0x2d0>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	4b7e      	ldr	r3, [pc, #504]	; (8002328 <main+0x2d4>)
 800212e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
				(uint16_t*) &val_arr[VarIndex])) != HAL_OK) {
 8002132:	4b7c      	ldr	r3, [pc, #496]	; (8002324 <main+0x2d0>)
 8002134:	881b      	ldrh	r3, [r3, #0]
		if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	497d      	ldr	r1, [pc, #500]	; (8002330 <main+0x2dc>)
 800213a:	440b      	add	r3, r1
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f7fe fc42 	bl	80009c8 <EE_ReadVariable>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <main+0x100>
			printf("EEPROM Read Error\r\n");
 800214a:	487a      	ldr	r0, [pc, #488]	; (8002334 <main+0x2e0>)
 800214c:	f003 fdde 	bl	8005d0c <puts>
			Error_Handler();
 8002150:	f000 feec 	bl	8002f2c <Error_Handler>
	for (VarIndex = 0; VarIndex < 10; VarIndex++) {
 8002154:	4b73      	ldr	r3, [pc, #460]	; (8002324 <main+0x2d0>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b71      	ldr	r3, [pc, #452]	; (8002324 <main+0x2d0>)
 800215e:	801a      	strh	r2, [r3, #0]
 8002160:	4b70      	ldr	r3, [pc, #448]	; (8002324 <main+0x2d0>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	2b09      	cmp	r3, #9
 8002166:	d9de      	bls.n	8002126 <main+0xd2>
		}
	}

	for (VarIndex = 0; VarIndex < 10; VarIndex++) {
 8002168:	4b6e      	ldr	r3, [pc, #440]	; (8002324 <main+0x2d0>)
 800216a:	2200      	movs	r2, #0
 800216c:	801a      	strh	r2, [r3, #0]
 800216e:	e016      	b.n	800219e <main+0x14a>
		printf("%d -----> %d\r\n", VirtAddVarTab[VarIndex],
 8002170:	4b6c      	ldr	r3, [pc, #432]	; (8002324 <main+0x2d0>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b6c      	ldr	r3, [pc, #432]	; (8002328 <main+0x2d4>)
 8002178:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800217c:	4619      	mov	r1, r3
				val_arr[VarIndex]);
 800217e:	4b69      	ldr	r3, [pc, #420]	; (8002324 <main+0x2d0>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <main+0x2dc>)
 8002186:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
		printf("%d -----> %d\r\n", VirtAddVarTab[VarIndex],
 800218a:	461a      	mov	r2, r3
 800218c:	486a      	ldr	r0, [pc, #424]	; (8002338 <main+0x2e4>)
 800218e:	f003 fd37 	bl	8005c00 <iprintf>
	for (VarIndex = 0; VarIndex < 10; VarIndex++) {
 8002192:	4b64      	ldr	r3, [pc, #400]	; (8002324 <main+0x2d0>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	4b62      	ldr	r3, [pc, #392]	; (8002324 <main+0x2d0>)
 800219c:	801a      	strh	r2, [r3, #0]
 800219e:	4b61      	ldr	r3, [pc, #388]	; (8002324 <main+0x2d0>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	2b09      	cmp	r3, #9
 80021a4:	d9e4      	bls.n	8002170 <main+0x11c>
	}

	lcd_init(0);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7ff f87c 	bl	80012a4 <lcd_init>
	lcd_begin(16, 4, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2104      	movs	r1, #4
 80021b0:	2010      	movs	r0, #16
 80021b2:	f7ff f88d 	bl	80012d0 <lcd_begin>

	lcd_logo();
 80021b6:	f7ff fa93 	bl	80016e0 <lcd_logo>

	unsigned int current_time = HAL_GetTick();
 80021ba:	f001 f9b5 	bl	8003528 <HAL_GetTick>
 80021be:	60b8      	str	r0, [r7, #8]
	unsigned int btn_current_time = HAL_GetTick();
 80021c0:	f001 f9b2 	bl	8003528 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

	while (HAL_GetTick() - current_time < 3000U) {
 80021c6:	e016      	b.n	80021f6 <main+0x1a2>
		uint8_t btn_state = HAL_GPIO_ReadPin(FN_KEY_GPIO_Port, FN_KEY_Pin);
 80021c8:	2101      	movs	r1, #1
 80021ca:	485c      	ldr	r0, [pc, #368]	; (800233c <main+0x2e8>)
 80021cc:	f001 fe5c 	bl	8003e88 <HAL_GPIO_ReadPin>
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
		if (btn_state == LOW) {
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <main+0x19c>
			if (HAL_GetTick() - btn_current_time > 2000) {
 80021da:	f001 f9a5 	bl	8003528 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80021e8:	d905      	bls.n	80021f6 <main+0x1a2>
				setting_root_page();
 80021ea:	f7ff fd0b 	bl	8001c04 <setting_root_page>
 80021ee:	e002      	b.n	80021f6 <main+0x1a2>
			}
		} else {
			btn_current_time = HAL_GetTick();
 80021f0:	f001 f99a 	bl	8003528 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - current_time < 3000U) {
 80021f6:	f001 f997 	bl	8003528 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002204:	4293      	cmp	r3, r2
 8002206:	d9df      	bls.n	80021c8 <main+0x174>
		}
	}

	for (VarIndex = 0; VarIndex < 10; VarIndex++) {
 8002208:	4b46      	ldr	r3, [pc, #280]	; (8002324 <main+0x2d0>)
 800220a:	2200      	movs	r2, #0
 800220c:	801a      	strh	r2, [r3, #0]
 800220e:	e01c      	b.n	800224a <main+0x1f6>
		if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 8002210:	4b44      	ldr	r3, [pc, #272]	; (8002324 <main+0x2d0>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b44      	ldr	r3, [pc, #272]	; (8002328 <main+0x2d4>)
 8002218:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
				(uint16_t*) &val_arr[VarIndex])) != HAL_OK) {
 800221c:	4b41      	ldr	r3, [pc, #260]	; (8002324 <main+0x2d0>)
 800221e:	881b      	ldrh	r3, [r3, #0]
		if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4943      	ldr	r1, [pc, #268]	; (8002330 <main+0x2dc>)
 8002224:	440b      	add	r3, r1
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7fe fbcd 	bl	80009c8 <EE_ReadVariable>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <main+0x1ea>
			printf("EEPROM Read Error\r\n");
 8002234:	483f      	ldr	r0, [pc, #252]	; (8002334 <main+0x2e0>)
 8002236:	f003 fd69 	bl	8005d0c <puts>
			Error_Handler();
 800223a:	f000 fe77 	bl	8002f2c <Error_Handler>
	for (VarIndex = 0; VarIndex < 10; VarIndex++) {
 800223e:	4b39      	ldr	r3, [pc, #228]	; (8002324 <main+0x2d0>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	4b37      	ldr	r3, [pc, #220]	; (8002324 <main+0x2d0>)
 8002248:	801a      	strh	r2, [r3, #0]
 800224a:	4b36      	ldr	r3, [pc, #216]	; (8002324 <main+0x2d0>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	2b09      	cmp	r3, #9
 8002250:	d9de      	bls.n	8002210 <main+0x1bc>
		}
	}

	dryer.state = INIT;
 8002252:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <main+0x2ec>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
	dryer.mode = NO_MODE;
 8002258:	4b39      	ldr	r3, [pc, #228]	; (8002340 <main+0x2ec>)
 800225a:	2200      	movs	r2, #0
 800225c:	705a      	strb	r2, [r3, #1]

	if (HAL_GPIO_ReadPin(DOOR_SW_GPIO_Port, DOOR_SW_Pin) == HIGH) {
 800225e:	2101      	movs	r1, #1
 8002260:	4838      	ldr	r0, [pc, #224]	; (8002344 <main+0x2f0>)
 8002262:	f001 fe11 	bl	8003e88 <HAL_GPIO_ReadPin>
 8002266:	4603      	mov	r3, r0
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <main+0x226>
		door_open_flag = 1U;
 800226c:	4b36      	ldr	r3, [pc, #216]	; (8002348 <main+0x2f4>)
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
		cur_page = DOOR_OPEN_PAGE;
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <main+0x2f8>)
 8002274:	2206      	movs	r2, #6
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e002      	b.n	8002280 <main+0x22c>
	} else {
		cur_page = INIT_PAGE;
 800227a:	4b34      	ldr	r3, [pc, #208]	; (800234c <main+0x2f8>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
	}

	lcd_clear();
 8002280:	f7ff f998 	bl	80015b4 <lcd_clear>
	lcd_update();
 8002284:	f7ff fa58 	bl	8001738 <lcd_update>

		/* USER CODE BEGIN 3 */
		/**********************************************************************************************************
		 **************************************** LCD SCREEN UPDATE RUTINE ****************************************
		 **********************************************************************************************************/
		if (lcd_update_evt) {
 8002288:	4b31      	ldr	r3, [pc, #196]	; (8002350 <main+0x2fc>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <main+0x246>
			//printf("Page: %d\r\n",cur_page);
			lcd_update();
 8002290:	f7ff fa52 	bl	8001738 <lcd_update>
			lcd_update_evt = 0U;
 8002294:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <main+0x2fc>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* TIMER EVENT RUTINE ************************************************
		 ***************************************************************************************************************/
		if (timer_stop_evt) {
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <main+0x300>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <main+0x25c>
			//printf("Timer Stoped\r\n");
			HAL_TIM_Base_Stop_IT(&htim4);
 80022a2:	482d      	ldr	r0, [pc, #180]	; (8002358 <main+0x304>)
 80022a4:	f002 ff3c 	bl	8005120 <HAL_TIM_Base_Stop_IT>
			timer_stop_evt = 0;
 80022a8:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <main+0x300>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e00d      	b.n	80022cc <main+0x278>

		} else if ((timer_start_evt) && (dryer.state == START)) {
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <main+0x308>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <main+0x278>
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <main+0x2ec>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <main+0x278>
			//printf("Timer Started\r\n");
			HAL_TIM_Base_Start_IT(&htim4);
 80022c0:	4825      	ldr	r0, [pc, #148]	; (8002358 <main+0x304>)
 80022c2:	f002 fedb 	bl	800507c <HAL_TIM_Base_Start_IT>
			timer_start_evt = 0;
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <main+0x308>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]

		/***************************************************************************************************************
		 ********************************************* KEYBOARD SCANNING ***********************************************
		 ********************************** INCREMENT DECREMENT OF TIMER AND MODE SET **********************************
		 ***************************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <main+0x2f4>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 8223 	bne.w	800271c <main+0x6c8>
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <main+0x30c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 821e 	bne.w	800271c <main+0x6c8>
 80022e0:	4b20      	ldr	r3, [pc, #128]	; (8002364 <main+0x310>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f040 8219 	bne.w	800271c <main+0x6c8>
			//printf("Scaning...\r\n");
			scaned_key = scan_keypad();
 80022ea:	f7fe fec1 	bl	8001070 <scan_keypad>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <main+0x314>)
 80022f4:	701a      	strb	r2, [r3, #0]

			if (dryer.state == START) {
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <main+0x2ec>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	f040 8104 	bne.w	8002508 <main+0x4b4>

				switch (scaned_key) {
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <main+0x314>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b04      	cmp	r3, #4
 8002306:	f200 80fb 	bhi.w	8002500 <main+0x4ac>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <main+0x2bc>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	08002501 	.word	0x08002501
 8002314:	0800236d 	.word	0x0800236d
 8002318:	080023cb 	.word	0x080023cb
 800231c:	08002427 	.word	0x08002427
 8002320:	080024cf 	.word	0x080024cf
 8002324:	20000150 	.word	0x20000150
 8002328:	2000013c 	.word	0x2000013c
 800232c:	08007194 	.word	0x08007194
 8002330:	20000000 	.word	0x20000000
 8002334:	080071a4 	.word	0x080071a4
 8002338:	080071b8 	.word	0x080071b8
 800233c:	40010c00 	.word	0x40010c00
 8002340:	20000154 	.word	0x20000154
 8002344:	40010800 	.word	0x40010800
 8002348:	2000015e 	.word	0x2000015e
 800234c:	2000016b 	.word	0x2000016b
 8002350:	20000162 	.word	0x20000162
 8002354:	20000160 	.word	0x20000160
 8002358:	200001cc 	.word	0x200001cc
 800235c:	20000161 	.word	0x20000161
 8002360:	20000165 	.word	0x20000165
 8002364:	20000164 	.word	0x20000164
 8002368:	2000016a 	.word	0x2000016a
				case NO_KEY_PRESSED:
					break;
				case LOW_KEY_PRESSED:
					lcd_update_evt = 1U;
 800236c:	4b8a      	ldr	r3, [pc, #552]	; (8002598 <main+0x544>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
					if (dryer.cycle == HEAT_CYCLE && dryer.heatTime > 60U) {
 8002372:	4b8a      	ldr	r3, [pc, #552]	; (800259c <main+0x548>)
 8002374:	7a1b      	ldrb	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d110      	bne.n	800239c <main+0x348>
 800237a:	4b88      	ldr	r3, [pc, #544]	; (800259c <main+0x548>)
 800237c:	885b      	ldrh	r3, [r3, #2]
 800237e:	2b3c      	cmp	r3, #60	; 0x3c
 8002380:	d90c      	bls.n	800239c <main+0x348>
						dryer.heatTime -= 60U;
 8002382:	4b86      	ldr	r3, [pc, #536]	; (800259c <main+0x548>)
 8002384:	885b      	ldrh	r3, [r3, #2]
 8002386:	3b3c      	subs	r3, #60	; 0x3c
 8002388:	b29a      	uxth	r2, r3
 800238a:	4b84      	ldr	r3, [pc, #528]	; (800259c <main+0x548>)
 800238c:	805a      	strh	r2, [r3, #2]
						printf("HeatTime = %d\r\n", dryer.heatTime);
 800238e:	4b83      	ldr	r3, [pc, #524]	; (800259c <main+0x548>)
 8002390:	885b      	ldrh	r3, [r3, #2]
 8002392:	4619      	mov	r1, r3
 8002394:	4882      	ldr	r0, [pc, #520]	; (80025a0 <main+0x54c>)
 8002396:	f003 fc33 	bl	8005c00 <iprintf>
					} else if (dryer.cycle == COOL_CYCLE
							&& dryer.coolTime > 60U) {
						dryer.coolTime -= 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
					}
					break;
 800239a:	e0ae      	b.n	80024fa <main+0x4a6>
					} else if (dryer.cycle == COOL_CYCLE
 800239c:	4b7f      	ldr	r3, [pc, #508]	; (800259c <main+0x548>)
 800239e:	7a1b      	ldrb	r3, [r3, #8]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 80aa 	bne.w	80024fa <main+0x4a6>
							&& dryer.coolTime > 60U) {
 80023a6:	4b7d      	ldr	r3, [pc, #500]	; (800259c <main+0x548>)
 80023a8:	889b      	ldrh	r3, [r3, #4]
 80023aa:	2b3c      	cmp	r3, #60	; 0x3c
 80023ac:	f240 80a5 	bls.w	80024fa <main+0x4a6>
						dryer.coolTime -= 60U;
 80023b0:	4b7a      	ldr	r3, [pc, #488]	; (800259c <main+0x548>)
 80023b2:	889b      	ldrh	r3, [r3, #4]
 80023b4:	3b3c      	subs	r3, #60	; 0x3c
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b78      	ldr	r3, [pc, #480]	; (800259c <main+0x548>)
 80023ba:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 80023bc:	4b77      	ldr	r3, [pc, #476]	; (800259c <main+0x548>)
 80023be:	889b      	ldrh	r3, [r3, #4]
 80023c0:	4619      	mov	r1, r3
 80023c2:	4878      	ldr	r0, [pc, #480]	; (80025a4 <main+0x550>)
 80023c4:	f003 fc1c 	bl	8005c00 <iprintf>
					break;
 80023c8:	e097      	b.n	80024fa <main+0x4a6>
				case MED_KEY_PRESSED:
					lcd_update_evt = 1U;
 80023ca:	4b73      	ldr	r3, [pc, #460]	; (8002598 <main+0x544>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80023d0:	4b72      	ldr	r3, [pc, #456]	; (800259c <main+0x548>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80023d6:	4b71      	ldr	r3, [pc, #452]	; (800259c <main+0x548>)
 80023d8:	2200      	movs	r2, #0
 80023da:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 80023dc:	4b72      	ldr	r3, [pc, #456]	; (80025a8 <main+0x554>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 80023e2:	4b72      	ldr	r3, [pc, #456]	; (80025ac <main+0x558>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 80023e8:	2200      	movs	r2, #0
 80023ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023ee:	4870      	ldr	r0, [pc, #448]	; (80025b0 <main+0x55c>)
 80023f0:	f001 fd61 	bl	8003eb6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 80023f4:	2200      	movs	r2, #0
 80023f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023fa:	486e      	ldr	r0, [pc, #440]	; (80025b4 <main+0x560>)
 80023fc:	f001 fd5b 	bl	8003eb6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin,
 8002400:	2200      	movs	r2, #0
 8002402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002406:	486c      	ldr	r0, [pc, #432]	; (80025b8 <main+0x564>)
 8002408:	f001 fd55 	bl	8003eb6 <HAL_GPIO_WritePin>
					LOW);
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin,
 800240c:	2200      	movs	r2, #0
 800240e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002412:	4869      	ldr	r0, [pc, #420]	; (80025b8 <main+0x564>)
 8002414:	f001 fd4f 	bl	8003eb6 <HAL_GPIO_WritePin>
					LOW);
					HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8002418:	2200      	movs	r2, #0
 800241a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800241e:	4866      	ldr	r0, [pc, #408]	; (80025b8 <main+0x564>)
 8002420:	f001 fd49 	bl	8003eb6 <HAL_GPIO_WritePin>
					break;
 8002424:	e06c      	b.n	8002500 <main+0x4ac>
				case HIGH_KEY_PRESSED:
					lcd_update_evt = 1U;
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <main+0x544>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
					if (dryer.cycle == HEAT_CYCLE) {
 800242c:	4b5b      	ldr	r3, [pc, #364]	; (800259c <main+0x548>)
 800242e:	7a1b      	ldrb	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d136      	bne.n	80024a2 <main+0x44e>
						if (dryer.mode == LOW_LEVEL) {
 8002434:	4b59      	ldr	r3, [pc, #356]	; (800259c <main+0x548>)
 8002436:	785b      	ldrb	r3, [r3, #1]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d10b      	bne.n	8002454 <main+0x400>
							if (dryer.heatTime < 1800U) {
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <main+0x548>)
 800243e:	885b      	ldrh	r3, [r3, #2]
 8002440:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002444:	d226      	bcs.n	8002494 <main+0x440>
								dryer.heatTime += 60U;
 8002446:	4b55      	ldr	r3, [pc, #340]	; (800259c <main+0x548>)
 8002448:	885b      	ldrh	r3, [r3, #2]
 800244a:	333c      	adds	r3, #60	; 0x3c
 800244c:	b29a      	uxth	r2, r3
 800244e:	4b53      	ldr	r3, [pc, #332]	; (800259c <main+0x548>)
 8002450:	805a      	strh	r2, [r3, #2]
 8002452:	e01f      	b.n	8002494 <main+0x440>
							}
						} else if (dryer.mode == MED_LEVEL) {
 8002454:	4b51      	ldr	r3, [pc, #324]	; (800259c <main+0x548>)
 8002456:	785b      	ldrb	r3, [r3, #1]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d10b      	bne.n	8002474 <main+0x420>
							if (dryer.heatTime < 2400U) {
 800245c:	4b4f      	ldr	r3, [pc, #316]	; (800259c <main+0x548>)
 800245e:	885b      	ldrh	r3, [r3, #2]
 8002460:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002464:	d216      	bcs.n	8002494 <main+0x440>
								dryer.heatTime += 60U;
 8002466:	4b4d      	ldr	r3, [pc, #308]	; (800259c <main+0x548>)
 8002468:	885b      	ldrh	r3, [r3, #2]
 800246a:	333c      	adds	r3, #60	; 0x3c
 800246c:	b29a      	uxth	r2, r3
 800246e:	4b4b      	ldr	r3, [pc, #300]	; (800259c <main+0x548>)
 8002470:	805a      	strh	r2, [r3, #2]
 8002472:	e00f      	b.n	8002494 <main+0x440>
							}
						} else if (dryer.mode == HIGH_LEVEL) {
 8002474:	4b49      	ldr	r3, [pc, #292]	; (800259c <main+0x548>)
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d10b      	bne.n	8002494 <main+0x440>
							if (dryer.heatTime < 3000U) {
 800247c:	4b47      	ldr	r3, [pc, #284]	; (800259c <main+0x548>)
 800247e:	885b      	ldrh	r3, [r3, #2]
 8002480:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002484:	4293      	cmp	r3, r2
 8002486:	d805      	bhi.n	8002494 <main+0x440>
								dryer.heatTime += 60U;
 8002488:	4b44      	ldr	r3, [pc, #272]	; (800259c <main+0x548>)
 800248a:	885b      	ldrh	r3, [r3, #2]
 800248c:	333c      	adds	r3, #60	; 0x3c
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b42      	ldr	r3, [pc, #264]	; (800259c <main+0x548>)
 8002492:	805a      	strh	r2, [r3, #2]
							}
						}
						printf("HeatTime = %d\r\n", dryer.heatTime);
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <main+0x548>)
 8002496:	885b      	ldrh	r3, [r3, #2]
 8002498:	4619      	mov	r1, r3
 800249a:	4841      	ldr	r0, [pc, #260]	; (80025a0 <main+0x54c>)
 800249c:	f003 fbb0 	bl	8005c00 <iprintf>
					} else if (dryer.cycle == COOL_CYCLE) {
						if (dryer.coolTime < 900U)
							dryer.coolTime += 60U;
						printf("CoolTime = %d\r\n", dryer.coolTime);
					}
					break;
 80024a0:	e02d      	b.n	80024fe <main+0x4aa>
					} else if (dryer.cycle == COOL_CYCLE) {
 80024a2:	4b3e      	ldr	r3, [pc, #248]	; (800259c <main+0x548>)
 80024a4:	7a1b      	ldrb	r3, [r3, #8]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d129      	bne.n	80024fe <main+0x4aa>
						if (dryer.coolTime < 900U)
 80024aa:	4b3c      	ldr	r3, [pc, #240]	; (800259c <main+0x548>)
 80024ac:	889b      	ldrh	r3, [r3, #4]
 80024ae:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80024b2:	d205      	bcs.n	80024c0 <main+0x46c>
							dryer.coolTime += 60U;
 80024b4:	4b39      	ldr	r3, [pc, #228]	; (800259c <main+0x548>)
 80024b6:	889b      	ldrh	r3, [r3, #4]
 80024b8:	333c      	adds	r3, #60	; 0x3c
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	4b37      	ldr	r3, [pc, #220]	; (800259c <main+0x548>)
 80024be:	809a      	strh	r2, [r3, #4]
						printf("CoolTime = %d\r\n", dryer.coolTime);
 80024c0:	4b36      	ldr	r3, [pc, #216]	; (800259c <main+0x548>)
 80024c2:	889b      	ldrh	r3, [r3, #4]
 80024c4:	4619      	mov	r1, r3
 80024c6:	4837      	ldr	r0, [pc, #220]	; (80025a4 <main+0x550>)
 80024c8:	f003 fb9a 	bl	8005c00 <iprintf>
					break;
 80024cc:	e017      	b.n	80024fe <main+0x4aa>
				case FN_KEY_PRESSED:
					lcd_update_evt = 1U;
 80024ce:	4b32      	ldr	r3, [pc, #200]	; (8002598 <main+0x544>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
					dryer.heatTime = 0U;
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <main+0x548>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	805a      	strh	r2, [r3, #2]
					dryer.cycle = COOL_CYCLE;
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <main+0x548>)
 80024dc:	2201      	movs	r2, #1
 80024de:	721a      	strb	r2, [r3, #8]
					printf("HeatTime = %d\r\n", dryer.heatTime);
 80024e0:	4b2e      	ldr	r3, [pc, #184]	; (800259c <main+0x548>)
 80024e2:	885b      	ldrh	r3, [r3, #2]
 80024e4:	4619      	mov	r1, r3
 80024e6:	482e      	ldr	r0, [pc, #184]	; (80025a0 <main+0x54c>)
 80024e8:	f003 fb8a 	bl	8005c00 <iprintf>
					printf("CoolTime = %d\r\n", dryer.coolTime);
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <main+0x548>)
 80024ee:	889b      	ldrh	r3, [r3, #4]
 80024f0:	4619      	mov	r1, r3
 80024f2:	482c      	ldr	r0, [pc, #176]	; (80025a4 <main+0x550>)
 80024f4:	f003 fb84 	bl	8005c00 <iprintf>
					break;
 80024f8:	e002      	b.n	8002500 <main+0x4ac>
					break;
 80024fa:	bf00      	nop
 80024fc:	e000      	b.n	8002500 <main+0x4ac>
					break;
 80024fe:	bf00      	nop
				}
				scaned_key = NO_KEY_PRESSED;
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <main+0x568>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e109      	b.n	800271c <main+0x6c8>
			} else if (dryer.state == INIT) {
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <main+0x548>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f040 80cd 	bne.w	80026ac <main+0x658>

				switch (scaned_key) {
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <main+0x568>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b03      	cmp	r3, #3
 8002518:	f200 80c4 	bhi.w	80026a4 <main+0x650>
 800251c:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <main+0x4d0>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	080026a5 	.word	0x080026a5
 8002528:	08002535 	.word	0x08002535
 800252c:	080025dd 	.word	0x080025dd
 8002530:	08002641 	.word	0x08002641
				case NO_KEY_PRESSED:
					break;

				case LOW_KEY_PRESSED:
					dryer.state = START;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <main+0x548>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
					dryer.mode = LOW_LEVEL;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <main+0x548>)
 800253c:	2201      	movs	r2, #1
 800253e:	705a      	strb	r2, [r3, #1]
					dryer.heatTime = val_arr[0];
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <main+0x56c>)
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <main+0x548>)
 8002546:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = val_arr[1];
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <main+0x56c>)
 800254a:	885a      	ldrh	r2, [r3, #2]
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <main+0x548>)
 800254e:	809a      	strh	r2, [r3, #4]
					dryer.setTemp = val_arr[2];
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <main+0x56c>)
 8002552:	889b      	ldrh	r3, [r3, #4]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <main+0x548>)
 8002558:	719a      	strb	r2, [r3, #6]
					dryer.beepTime = 30U;
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <main+0x548>)
 800255c:	221e      	movs	r2, #30
 800255e:	71da      	strb	r2, [r3, #7]
					dryer.cycle = HEAT_CYCLE;
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <main+0x548>)
 8002562:	2200      	movs	r2, #0
 8002564:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <main+0x570>)
 8002568:	221e      	movs	r2, #30
 800256a:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 800256c:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <main+0x574>)
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <main+0x578>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <main+0x57c>)
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
					cur_page = LOW_LEVEL_PAGE;
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <main+0x554>)
 8002580:	2202      	movs	r2, #2
 8002582:	701a      	strb	r2, [r3, #0]
					lcd_update_evt = 1U;
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <main+0x544>)
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
					op_update_evt = 1U;
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <main+0x580>)
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
					printf("LOW LEVEL\r\n");
 8002590:	4811      	ldr	r0, [pc, #68]	; (80025d8 <main+0x584>)
 8002592:	f003 fbbb 	bl	8005d0c <puts>
					break;
 8002596:	e085      	b.n	80026a4 <main+0x650>
 8002598:	20000162 	.word	0x20000162
 800259c:	20000154 	.word	0x20000154
 80025a0:	080071c8 	.word	0x080071c8
 80025a4:	080071d8 	.word	0x080071d8
 80025a8:	2000016b 	.word	0x2000016b
 80025ac:	20000160 	.word	0x20000160
 80025b0:	40011000 	.word	0x40011000
 80025b4:	40010800 	.word	0x40010800
 80025b8:	40010c00 	.word	0x40010c00
 80025bc:	2000016a 	.word	0x2000016a
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000015 	.word	0x20000015
 80025c8:	20000166 	.word	0x20000166
 80025cc:	20000167 	.word	0x20000167
 80025d0:	20000161 	.word	0x20000161
 80025d4:	20000163 	.word	0x20000163
 80025d8:	08007170 	.word	0x08007170

				case MED_KEY_PRESSED:
					dryer.state = START;
 80025dc:	4b94      	ldr	r3, [pc, #592]	; (8002830 <main+0x7dc>)
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
					dryer.mode = MED_LEVEL;
 80025e2:	4b93      	ldr	r3, [pc, #588]	; (8002830 <main+0x7dc>)
 80025e4:	2202      	movs	r2, #2
 80025e6:	705a      	strb	r2, [r3, #1]
					dryer.heatTime = val_arr[3];
 80025e8:	4b92      	ldr	r3, [pc, #584]	; (8002834 <main+0x7e0>)
 80025ea:	88da      	ldrh	r2, [r3, #6]
 80025ec:	4b90      	ldr	r3, [pc, #576]	; (8002830 <main+0x7dc>)
 80025ee:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = val_arr[4];
 80025f0:	4b90      	ldr	r3, [pc, #576]	; (8002834 <main+0x7e0>)
 80025f2:	891a      	ldrh	r2, [r3, #8]
 80025f4:	4b8e      	ldr	r3, [pc, #568]	; (8002830 <main+0x7dc>)
 80025f6:	809a      	strh	r2, [r3, #4]
					dryer.setTemp = val_arr[5];
 80025f8:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <main+0x7e0>)
 80025fa:	895b      	ldrh	r3, [r3, #10]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b8c      	ldr	r3, [pc, #560]	; (8002830 <main+0x7dc>)
 8002600:	719a      	strb	r2, [r3, #6]
					dryer.beepTime = 30U;
 8002602:	4b8b      	ldr	r3, [pc, #556]	; (8002830 <main+0x7dc>)
 8002604:	221e      	movs	r2, #30
 8002606:	71da      	strb	r2, [r3, #7]
					dryer.cycle = HEAT_CYCLE;
 8002608:	4b89      	ldr	r3, [pc, #548]	; (8002830 <main+0x7dc>)
 800260a:	2200      	movs	r2, #0
 800260c:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 800260e:	4b8a      	ldr	r3, [pc, #552]	; (8002838 <main+0x7e4>)
 8002610:	221e      	movs	r2, #30
 8002612:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8002614:	4b89      	ldr	r3, [pc, #548]	; (800283c <main+0x7e8>)
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 800261a:	4b89      	ldr	r3, [pc, #548]	; (8002840 <main+0x7ec>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8002620:	4b88      	ldr	r3, [pc, #544]	; (8002844 <main+0x7f0>)
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
					cur_page = MED_LEVEL_PAGE;
 8002626:	4b88      	ldr	r3, [pc, #544]	; (8002848 <main+0x7f4>)
 8002628:	2203      	movs	r2, #3
 800262a:	701a      	strb	r2, [r3, #0]
					lcd_update_evt = 1U;
 800262c:	4b87      	ldr	r3, [pc, #540]	; (800284c <main+0x7f8>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
					op_update_evt = 1U;
 8002632:	4b87      	ldr	r3, [pc, #540]	; (8002850 <main+0x7fc>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
					printf("MED_LEVEL\r\n");
 8002638:	4886      	ldr	r0, [pc, #536]	; (8002854 <main+0x800>)
 800263a:	f003 fb67 	bl	8005d0c <puts>
					break;
 800263e:	e031      	b.n	80026a4 <main+0x650>

				case HIGH_KEY_PRESSED:
					dryer.state = START;
 8002640:	4b7b      	ldr	r3, [pc, #492]	; (8002830 <main+0x7dc>)
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
					dryer.mode = HIGH_LEVEL;
 8002646:	4b7a      	ldr	r3, [pc, #488]	; (8002830 <main+0x7dc>)
 8002648:	2203      	movs	r2, #3
 800264a:	705a      	strb	r2, [r3, #1]
					dryer.heatTime = val_arr[6];
 800264c:	4b79      	ldr	r3, [pc, #484]	; (8002834 <main+0x7e0>)
 800264e:	899a      	ldrh	r2, [r3, #12]
 8002650:	4b77      	ldr	r3, [pc, #476]	; (8002830 <main+0x7dc>)
 8002652:	805a      	strh	r2, [r3, #2]
					dryer.coolTime = val_arr[7];
 8002654:	4b77      	ldr	r3, [pc, #476]	; (8002834 <main+0x7e0>)
 8002656:	89da      	ldrh	r2, [r3, #14]
 8002658:	4b75      	ldr	r3, [pc, #468]	; (8002830 <main+0x7dc>)
 800265a:	809a      	strh	r2, [r3, #4]
					dryer.setTemp = val_arr[8];
 800265c:	4b75      	ldr	r3, [pc, #468]	; (8002834 <main+0x7e0>)
 800265e:	8a1b      	ldrh	r3, [r3, #16]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4b73      	ldr	r3, [pc, #460]	; (8002830 <main+0x7dc>)
 8002664:	719a      	strb	r2, [r3, #6]
					dryer.beepTime = 30U;
 8002666:	4b72      	ldr	r3, [pc, #456]	; (8002830 <main+0x7dc>)
 8002668:	221e      	movs	r2, #30
 800266a:	71da      	strb	r2, [r3, #7]
					dryer.cycle = HEAT_CYCLE;
 800266c:	4b70      	ldr	r3, [pc, #448]	; (8002830 <main+0x7dc>)
 800266e:	2200      	movs	r2, #0
 8002670:	721a      	strb	r2, [r3, #8]
					rot_left_cunt = 30U;
 8002672:	4b71      	ldr	r3, [pc, #452]	; (8002838 <main+0x7e4>)
 8002674:	221e      	movs	r2, #30
 8002676:	701a      	strb	r2, [r3, #0]
					rot_right_cunt = 0U;
 8002678:	4b70      	ldr	r3, [pc, #448]	; (800283c <main+0x7e8>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
					pasue_cunt = 0U;
 800267e:	4b70      	ldr	r3, [pc, #448]	; (8002840 <main+0x7ec>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
					timer_start_evt = 1U;
 8002684:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <main+0x7f0>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
					cur_page = HIGH_LEVEL_PAGE;
 800268a:	4b6f      	ldr	r3, [pc, #444]	; (8002848 <main+0x7f4>)
 800268c:	2204      	movs	r2, #4
 800268e:	701a      	strb	r2, [r3, #0]
					lcd_update_evt = 1U;
 8002690:	4b6e      	ldr	r3, [pc, #440]	; (800284c <main+0x7f8>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
					op_update_evt = 1U;
 8002696:	4b6e      	ldr	r3, [pc, #440]	; (8002850 <main+0x7fc>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
					printf("HIGH_LEVEL\r\n");
 800269c:	486e      	ldr	r0, [pc, #440]	; (8002858 <main+0x804>)
 800269e:	f003 fb35 	bl	8005d0c <puts>
					break;
 80026a2:	bf00      	nop
				}
				scaned_key = NO_KEY_PRESSED;
 80026a4:	4b6d      	ldr	r3, [pc, #436]	; (800285c <main+0x808>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e037      	b.n	800271c <main+0x6c8>
			} else if (dryer.state == COMPLETE) {
 80026ac:	4b60      	ldr	r3, [pc, #384]	; (8002830 <main+0x7dc>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d133      	bne.n	800271c <main+0x6c8>
				if (scaned_key == MED_KEY_PRESSED) {
 80026b4:	4b69      	ldr	r3, [pc, #420]	; (800285c <main+0x808>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d12c      	bne.n	8002716 <main+0x6c2>
					lcd_update_evt = 1U;
 80026bc:	4b63      	ldr	r3, [pc, #396]	; (800284c <main+0x7f8>)
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 80026c2:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <main+0x7dc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <main+0x7dc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	705a      	strb	r2, [r3, #1]
					cur_page = INIT_PAGE;
 80026ce:	4b5e      	ldr	r3, [pc, #376]	; (8002848 <main+0x7f4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 80026d4:	4b62      	ldr	r3, [pc, #392]	; (8002860 <main+0x80c>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 80026da:	2200      	movs	r2, #0
 80026dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e0:	4860      	ldr	r0, [pc, #384]	; (8002864 <main+0x810>)
 80026e2:	f001 fbe8 	bl	8003eb6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 80026e6:	2200      	movs	r2, #0
 80026e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ec:	485e      	ldr	r0, [pc, #376]	; (8002868 <main+0x814>)
 80026ee:	f001 fbe2 	bl	8003eb6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin,
 80026f2:	2200      	movs	r2, #0
 80026f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026f8:	485c      	ldr	r0, [pc, #368]	; (800286c <main+0x818>)
 80026fa:	f001 fbdc 	bl	8003eb6 <HAL_GPIO_WritePin>
					LOW);
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin,
 80026fe:	2200      	movs	r2, #0
 8002700:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002704:	4859      	ldr	r0, [pc, #356]	; (800286c <main+0x818>)
 8002706:	f001 fbd6 	bl	8003eb6 <HAL_GPIO_WritePin>
					LOW);
					HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002710:	4856      	ldr	r0, [pc, #344]	; (800286c <main+0x818>)
 8002712:	f001 fbd0 	bl	8003eb6 <HAL_GPIO_WritePin>
				}
				scaned_key = NO_KEY_PRESSED;
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <main+0x808>)
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
			}
		}

		if (door_open_evt) {
 800271c:	4b54      	ldr	r3, [pc, #336]	; (8002870 <main+0x81c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80b9 	beq.w	8002898 <main+0x844>
			static volatile uint8_t temp_pin_state = 0U;

			temp_pin_state = HAL_GPIO_ReadPin(DOOR_SW_GPIO_Port,
 8002726:	2101      	movs	r1, #1
 8002728:	484f      	ldr	r0, [pc, #316]	; (8002868 <main+0x814>)
 800272a:	f001 fbad 	bl	8003e88 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	4b50      	ldr	r3, [pc, #320]	; (8002874 <main+0x820>)
 8002734:	701a      	strb	r2, [r3, #0]
			DOOR_SW_Pin);
//printf("Pin: %d\r\n",temp_pin_state);

			if (temp_pin_state == HIGH) {
 8002736:	4b4f      	ldr	r3, [pc, #316]	; (8002874 <main+0x820>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d13d      	bne.n	80027bc <main+0x768>

				if (dryer.state == COMPLETE) {
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <main+0x7dc>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d10b      	bne.n	8002760 <main+0x70c>
					timer_stop_evt = 1U;
 8002748:	4b45      	ldr	r3, [pc, #276]	; (8002860 <main+0x80c>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
					dryer.beepTime = 0U;
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <main+0x7dc>)
 8002750:	2200      	movs	r2, #0
 8002752:	71da      	strb	r2, [r3, #7]
					dryer.state = INIT;
 8002754:	4b36      	ldr	r3, [pc, #216]	; (8002830 <main+0x7dc>)
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 800275a:	4b35      	ldr	r3, [pc, #212]	; (8002830 <main+0x7dc>)
 800275c:	2200      	movs	r2, #0
 800275e:	705a      	strb	r2, [r3, #1]
				}

				door_open_flag = 1U;
 8002760:	4b45      	ldr	r3, [pc, #276]	; (8002878 <main+0x824>)
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <main+0x80c>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
				cur_page = DOOR_OPEN_PAGE;
 800276c:	4b36      	ldr	r3, [pc, #216]	; (8002848 <main+0x7f4>)
 800276e:	2206      	movs	r2, #6
 8002770:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 8002772:	4b36      	ldr	r3, [pc, #216]	; (800284c <main+0x7f8>)
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 8002778:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <main+0x7dc>)
 800277a:	2203      	movs	r2, #3
 800277c:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002784:	4837      	ldr	r0, [pc, #220]	; (8002864 <main+0x810>)
 8002786:	f001 fb96 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 800278a:	2200      	movs	r2, #0
 800278c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002790:	4835      	ldr	r0, [pc, #212]	; (8002868 <main+0x814>)
 8002792:	f001 fb90 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8002796:	2200      	movs	r2, #0
 8002798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800279c:	4833      	ldr	r0, [pc, #204]	; (800286c <main+0x818>)
 800279e:	f001 fb8a 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin,
 80027a2:	2200      	movs	r2, #0
 80027a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027a8:	4830      	ldr	r0, [pc, #192]	; (800286c <main+0x818>)
 80027aa:	f001 fb84 	bl	8003eb6 <HAL_GPIO_WritePin>
				LOW);
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b4:	482d      	ldr	r0, [pc, #180]	; (800286c <main+0x818>)
 80027b6:	f001 fb7e 	bl	8003eb6 <HAL_GPIO_WritePin>
 80027ba:	e06a      	b.n	8002892 <main+0x83e>

			} else {
				if (!limit_timeout_flag) {
 80027bc:	4b2f      	ldr	r3, [pc, #188]	; (800287c <main+0x828>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d15d      	bne.n	8002880 <main+0x82c>
					switch (dryer.mode) {
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <main+0x7dc>)
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d85c      	bhi.n	8002886 <main+0x832>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <main+0x780>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	080027e5 	.word	0x080027e5
 80027d8:	080027f3 	.word	0x080027f3
 80027dc:	08002807 	.word	0x08002807
 80027e0:	0800281b 	.word	0x0800281b
					case NO_MODE:
						cur_page = INIT_PAGE;
 80027e4:	4b18      	ldr	r3, [pc, #96]	; (8002848 <main+0x7f4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <main+0x7dc>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
						break;
 80027f0:	e049      	b.n	8002886 <main+0x832>
					case LOW_LEVEL:
						cur_page = LOW_LEVEL_PAGE;
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <main+0x7f4>)
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 80027f8:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <main+0x7dc>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <main+0x7f0>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
						break;
 8002804:	e03f      	b.n	8002886 <main+0x832>
					case MED_LEVEL:
						cur_page = MED_LEVEL_PAGE;
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <main+0x7f4>)
 8002808:	2203      	movs	r2, #3
 800280a:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <main+0x7dc>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <main+0x7f0>)
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
						break;
 8002818:	e035      	b.n	8002886 <main+0x832>
					case HIGH_LEVEL:
						cur_page = HIGH_LEVEL_PAGE;
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <main+0x7f4>)
 800281c:	2204      	movs	r2, #4
 800281e:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <main+0x7dc>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <main+0x7f0>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
						break;
 800282c:	e02b      	b.n	8002886 <main+0x832>
 800282e:	bf00      	nop
 8002830:	20000154 	.word	0x20000154
 8002834:	20000000 	.word	0x20000000
 8002838:	20000015 	.word	0x20000015
 800283c:	20000166 	.word	0x20000166
 8002840:	20000167 	.word	0x20000167
 8002844:	20000161 	.word	0x20000161
 8002848:	2000016b 	.word	0x2000016b
 800284c:	20000162 	.word	0x20000162
 8002850:	20000163 	.word	0x20000163
 8002854:	0800717c 	.word	0x0800717c
 8002858:	08007188 	.word	0x08007188
 800285c:	2000016a 	.word	0x2000016a
 8002860:	20000160 	.word	0x20000160
 8002864:	40011000 	.word	0x40011000
 8002868:	40010800 	.word	0x40010800
 800286c:	40010c00 	.word	0x40010c00
 8002870:	2000015f 	.word	0x2000015f
 8002874:	2000016d 	.word	0x2000016d
 8002878:	2000015e 	.word	0x2000015e
 800287c:	20000164 	.word	0x20000164
					}
				} else
					cur_page = LIMIT_SW_ERR_PAGE;
 8002880:	4b9b      	ldr	r3, [pc, #620]	; (8002af0 <main+0xa9c>)
 8002882:	2207      	movs	r2, #7
 8002884:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 8002886:	4b9b      	ldr	r3, [pc, #620]	; (8002af4 <main+0xaa0>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
				door_open_flag = 0U;
 800288c:	4b9a      	ldr	r3, [pc, #616]	; (8002af8 <main+0xaa4>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
			}
			door_open_evt = 0U;
 8002892:	4b9a      	ldr	r3, [pc, #616]	; (8002afc <main+0xaa8>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
		}

		/*************************************************************************************************************
		 *************************************************HERTER COIL CHECK*******************************************
		 *************************************************************************************************************/
		if (!door_open_flag && !limit_timeout_flag && dryer.state != COMPLETE) {
 8002898:	4b97      	ldr	r3, [pc, #604]	; (8002af8 <main+0xaa4>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d179      	bne.n	8002994 <main+0x940>
 80028a0:	4b97      	ldr	r3, [pc, #604]	; (8002b00 <main+0xaac>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d175      	bne.n	8002994 <main+0x940>
 80028a8:	4b96      	ldr	r3, [pc, #600]	; (8002b04 <main+0xab0>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d071      	beq.n	8002994 <main+0x940>

			if (is_coil_open()) {
 80028b0:	f7fe fb8e 	bl	8000fd0 <is_coil_open>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02d      	beq.n	8002916 <main+0x8c2>

				coil_open_flag = 1U;
 80028ba:	4b93      	ldr	r3, [pc, #588]	; (8002b08 <main+0xab4>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 80028c0:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <main+0xab8>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
				cur_page = HEATER_COIL_PAGE;
 80028c6:	4b8a      	ldr	r3, [pc, #552]	; (8002af0 <main+0xa9c>)
 80028c8:	2208      	movs	r2, #8
 80028ca:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 80028cc:	4b89      	ldr	r3, [pc, #548]	; (8002af4 <main+0xaa0>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
				dryer.state = STOP;
 80028d2:	4b8c      	ldr	r3, [pc, #560]	; (8002b04 <main+0xab0>)
 80028d4:	2203      	movs	r2, #3
 80028d6:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 80028d8:	2200      	movs	r2, #0
 80028da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028de:	488c      	ldr	r0, [pc, #560]	; (8002b10 <main+0xabc>)
 80028e0:	f001 fae9 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ea:	488a      	ldr	r0, [pc, #552]	; (8002b14 <main+0xac0>)
 80028ec:	f001 fae3 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 80028f0:	2200      	movs	r2, #0
 80028f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028f6:	4888      	ldr	r0, [pc, #544]	; (8002b18 <main+0xac4>)
 80028f8:	f001 fadd 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin,
 80028fc:	2200      	movs	r2, #0
 80028fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002902:	4885      	ldr	r0, [pc, #532]	; (8002b18 <main+0xac4>)
 8002904:	f001 fad7 	bl	8003eb6 <HAL_GPIO_WritePin>
				LOW);
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8002908:	2200      	movs	r2, #0
 800290a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800290e:	4882      	ldr	r0, [pc, #520]	; (8002b18 <main+0xac4>)
 8002910:	f001 fad1 	bl	8003eb6 <HAL_GPIO_WritePin>
 8002914:	e03e      	b.n	8002994 <main+0x940>

			} else {
				coil_open_flag = 0U;
 8002916:	4b7c      	ldr	r3, [pc, #496]	; (8002b08 <main+0xab4>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
				if (dryer.state == STOP) {
 800291c:	4b79      	ldr	r3, [pc, #484]	; (8002b04 <main+0xab0>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d137      	bne.n	8002994 <main+0x940>
					switch (dryer.mode) {
 8002924:	4b77      	ldr	r3, [pc, #476]	; (8002b04 <main+0xab0>)
 8002926:	785b      	ldrb	r3, [r3, #1]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d830      	bhi.n	800298e <main+0x93a>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <main+0x8e0>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002945 	.word	0x08002945
 8002938:	08002953 	.word	0x08002953
 800293c:	08002967 	.word	0x08002967
 8002940:	0800297b 	.word	0x0800297b
					case NO_MODE:
						cur_page = INIT_PAGE;
 8002944:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <main+0xa9c>)
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
						dryer.state = INIT;
 800294a:	4b6e      	ldr	r3, [pc, #440]	; (8002b04 <main+0xab0>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
						break;
 8002950:	e01d      	b.n	800298e <main+0x93a>
					case LOW_LEVEL:
						cur_page = LOW_LEVEL_PAGE;
 8002952:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <main+0xa9c>)
 8002954:	2202      	movs	r2, #2
 8002956:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8002958:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <main+0xab0>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 800295e:	4b6f      	ldr	r3, [pc, #444]	; (8002b1c <main+0xac8>)
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
						break;
 8002964:	e013      	b.n	800298e <main+0x93a>
					case MED_LEVEL:
						cur_page = MED_LEVEL_PAGE;
 8002966:	4b62      	ldr	r3, [pc, #392]	; (8002af0 <main+0xa9c>)
 8002968:	2203      	movs	r2, #3
 800296a:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 800296c:	4b65      	ldr	r3, [pc, #404]	; (8002b04 <main+0xab0>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8002972:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <main+0xac8>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
						break;
 8002978:	e009      	b.n	800298e <main+0x93a>
					case HIGH_LEVEL:
						cur_page = HIGH_LEVEL_PAGE;
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <main+0xa9c>)
 800297c:	2204      	movs	r2, #4
 800297e:	701a      	strb	r2, [r3, #0]
						dryer.state = START;
 8002980:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <main+0xab0>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
						timer_start_evt = 1U;
 8002986:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <main+0xac8>)
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
						break;
 800298c:	bf00      	nop
					}
					lcd_update_evt = 1U;
 800298e:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <main+0xaa0>)
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
		}

		/***************************************************************************************************************
		 ******************************************* LIMIT SWITCH ERROR RUTINE ************************************************
		 ***************************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag) {
 8002994:	4b58      	ldr	r3, [pc, #352]	; (8002af8 <main+0xaa4>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d140      	bne.n	8002a1e <main+0x9ca>
 800299c:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <main+0xab4>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d13c      	bne.n	8002a1e <main+0x9ca>
 80029a4:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <main+0xaac>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d138      	bne.n	8002a1e <main+0x9ca>
			if (dryer.state == START && limit_timeout == 0U) {
 80029ac:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <main+0xab0>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d15a      	bne.n	8002a6a <main+0xa16>
 80029b4:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <main+0xacc>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d156      	bne.n	8002a6a <main+0xa16>
				limit_timeout_flag = 1U;
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <main+0xaac>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 80029c2:	4b4c      	ldr	r3, [pc, #304]	; (8002af4 <main+0xaa0>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
				timer_stop_evt = 1U;
 80029c8:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <main+0xab8>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]

				dryer.state = STOP;
 80029ce:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <main+0xab0>)
 80029d0:	2203      	movs	r2, #3
 80029d2:	701a      	strb	r2, [r3, #0]
				dryer.mode = NO_MODE;
 80029d4:	4b4b      	ldr	r3, [pc, #300]	; (8002b04 <main+0xab0>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	705a      	strb	r2, [r3, #1]
				cur_page = LIMIT_SW_ERR_PAGE;
 80029da:	4b45      	ldr	r3, [pc, #276]	; (8002af0 <main+0xa9c>)
 80029dc:	2207      	movs	r2, #7
 80029de:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 80029e0:	2200      	movs	r2, #0
 80029e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e6:	484a      	ldr	r0, [pc, #296]	; (8002b10 <main+0xabc>)
 80029e8:	f001 fa65 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 80029ec:	2200      	movs	r2, #0
 80029ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029f2:	4848      	ldr	r0, [pc, #288]	; (8002b14 <main+0xac0>)
 80029f4:	f001 fa5f 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 80029f8:	2200      	movs	r2, #0
 80029fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029fe:	4846      	ldr	r0, [pc, #280]	; (8002b18 <main+0xac4>)
 8002a00:	f001 fa59 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin,
 8002a04:	2200      	movs	r2, #0
 8002a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a0a:	4843      	ldr	r0, [pc, #268]	; (8002b18 <main+0xac4>)
 8002a0c:	f001 fa53 	bl	8003eb6 <HAL_GPIO_WritePin>
				LOW);
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8002a10:	2200      	movs	r2, #0
 8002a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a16:	4840      	ldr	r0, [pc, #256]	; (8002b18 <main+0xac4>)
 8002a18:	f001 fa4d 	bl	8003eb6 <HAL_GPIO_WritePin>
			if (dryer.state == START && limit_timeout == 0U) {
 8002a1c:	e025      	b.n	8002a6a <main+0xa16>
			}
		} else if (!door_open_flag && !coil_open_flag && limit_timeout_flag) {
 8002a1e:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <main+0xaa4>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d122      	bne.n	8002a6c <main+0xa18>
 8002a26:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <main+0xab4>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d11e      	bne.n	8002a6c <main+0xa18>
 8002a2e:	4b34      	ldr	r3, [pc, #208]	; (8002b00 <main+0xaac>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01a      	beq.n	8002a6c <main+0xa18>
			scaned_key = scan_keypad();
 8002a36:	f7fe fb1b 	bl	8001070 <scan_keypad>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <main+0xad0>)
 8002a40:	701a      	strb	r2, [r3, #0]
			if (scaned_key == MED_KEY_PRESSED) {
 8002a42:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <main+0xad0>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d110      	bne.n	8002a6c <main+0xa18>
				dryer.state = INIT;
 8002a4a:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <main+0xab0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
				cur_page = INIT_PAGE;
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <main+0xa9c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
				limit_timeout = 30U;
 8002a56:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <main+0xacc>)
 8002a58:	221e      	movs	r2, #30
 8002a5a:	701a      	strb	r2, [r3, #0]
				lcd_update_evt = 1U;
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <main+0xaa0>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
				limit_timeout_flag = 0U;
 8002a62:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <main+0xaac>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e000      	b.n	8002a6c <main+0xa18>
			if (dryer.state == START && limit_timeout == 0U) {
 8002a6a:	bf00      	nop
		 * @COMPLETE STATE
		 * 		->TURNS OFF FAN, DRUM MOTORS, HEATER
		 * 		->TRUNS ON/OFF BEEP EVERY 3s FOR 30s
		 * 		->WATCHS DOOR OPEN
		 **********************************************************************************************************/
		if (!door_open_flag && !coil_open_flag && !limit_timeout_flag
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <main+0xaa4>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f47f ac09 	bne.w	8002288 <main+0x234>
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <main+0xab4>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f47f ac04 	bne.w	8002288 <main+0x234>
 8002a80:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <main+0xaac>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f47f abff 	bne.w	8002288 <main+0x234>
				&& op_update_evt) {
 8002a8a:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <main+0xad4>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f43f abfa 	beq.w	8002288 <main+0x234>

			if (dryer.state == START) {
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <main+0xab0>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 80a9 	bne.w	8002bf0 <main+0xb9c>

				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, HIGH);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aa4:	481b      	ldr	r0, [pc, #108]	; (8002b14 <main+0xac0>)
 8002aa6:	f001 fa06 	bl	8003eb6 <HAL_GPIO_WritePin>
//				 	printf("ROT_RIGHT = %d\r\n", rot_right_cunt);
//				 	otp = 0;
//				 }

				//start Flip Flop
				if (pasue_cunt > 0) {
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <main+0xad8>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <main+0xa78>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin,
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ab8:	4817      	ldr	r0, [pc, #92]	; (8002b18 <main+0xac4>)
 8002aba:	f001 f9fc 	bl	8003eb6 <HAL_GPIO_WritePin>
					LOW);
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin,
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ac4:	4814      	ldr	r0, [pc, #80]	; (8002b18 <main+0xac4>)
 8002ac6:	f001 f9f6 	bl	8003eb6 <HAL_GPIO_WritePin>
 8002aca:	e043      	b.n	8002b54 <main+0xb00>
					LOW);
				} else if (rot_left_cunt > 0) {
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <main+0xadc>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02f      	beq.n	8002b34 <main+0xae0>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin,
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ada:	480f      	ldr	r0, [pc, #60]	; (8002b18 <main+0xac4>)
 8002adc:	f001 f9eb 	bl	8003eb6 <HAL_GPIO_WritePin>
					HIGH);
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin,
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ae6:	480c      	ldr	r0, [pc, #48]	; (8002b18 <main+0xac4>)
 8002ae8:	f001 f9e5 	bl	8003eb6 <HAL_GPIO_WritePin>
 8002aec:	e032      	b.n	8002b54 <main+0xb00>
 8002aee:	bf00      	nop
 8002af0:	2000016b 	.word	0x2000016b
 8002af4:	20000162 	.word	0x20000162
 8002af8:	2000015e 	.word	0x2000015e
 8002afc:	2000015f 	.word	0x2000015f
 8002b00:	20000164 	.word	0x20000164
 8002b04:	20000154 	.word	0x20000154
 8002b08:	20000165 	.word	0x20000165
 8002b0c:	20000160 	.word	0x20000160
 8002b10:	40011000 	.word	0x40011000
 8002b14:	40010800 	.word	0x40010800
 8002b18:	40010c00 	.word	0x40010c00
 8002b1c:	20000161 	.word	0x20000161
 8002b20:	20000014 	.word	0x20000014
 8002b24:	2000016a 	.word	0x2000016a
 8002b28:	20000163 	.word	0x20000163
 8002b2c:	20000167 	.word	0x20000167
 8002b30:	20000015 	.word	0x20000015
					LOW);
				} else if (rot_right_cunt > 0) {
 8002b34:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <main+0xc60>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <main+0xb00>
					HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin,
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b42:	485d      	ldr	r0, [pc, #372]	; (8002cb8 <main+0xc64>)
 8002b44:	f001 f9b7 	bl	8003eb6 <HAL_GPIO_WritePin>
					LOW);
					HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin,
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b4e:	485a      	ldr	r0, [pc, #360]	; (8002cb8 <main+0xc64>)
 8002b50:	f001 f9b1 	bl	8003eb6 <HAL_GPIO_WritePin>
					HIGH);
				}

				cur_temp = (int) Max6675_Read_Temp(); //takes time
 8002b54:	f7fd fce2 	bl	800051c <Max6675_Read_Temp>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fcb8 	bl	80004d0 <__aeabi_f2iz>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4a56      	ldr	r2, [pc, #344]	; (8002cbc <main+0xc68>)
 8002b64:	6013      	str	r3, [r2, #0]
				//Maintain Heater
				if (dryer.cycle == HEAT_CYCLE && !limit_sw_open()) {
 8002b66:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <main+0xc6c>)
 8002b68:	7a1b      	ldrb	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d139      	bne.n	8002be2 <main+0xb8e>
 8002b6e:	f7fe fa57 	bl	8001020 <limit_sw_open>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d134      	bne.n	8002be2 <main+0xb8e>
					if (cur_temp == -1 || cur_temp == 0) {
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <main+0xc68>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d003      	beq.n	8002b8a <main+0xb36>
 8002b82:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <main+0xc68>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <main+0xb44>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin,
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b90:	4849      	ldr	r0, [pc, #292]	; (8002cb8 <main+0xc64>)
 8002b92:	f001 f990 	bl	8003eb6 <HAL_GPIO_WritePin>
 8002b96:	e023      	b.n	8002be0 <main+0xb8c>
						LOW);
					} else if ((cur_temp > (dryer.setTemp + 2))
 8002b98:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <main+0xc6c>)
 8002b9a:	799b      	ldrb	r3, [r3, #6]
 8002b9c:	1c9a      	adds	r2, r3, #2
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <main+0xc68>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	db03      	blt.n	8002bae <main+0xb5a>
							|| (cur_temp <= 0)) {
 8002ba6:	4b45      	ldr	r3, [pc, #276]	; (8002cbc <main+0xc68>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	dc06      	bgt.n	8002bbc <main+0xb68>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin,
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb4:	4840      	ldr	r0, [pc, #256]	; (8002cb8 <main+0xc64>)
 8002bb6:	f001 f97e 	bl	8003eb6 <HAL_GPIO_WritePin>
 8002bba:	e011      	b.n	8002be0 <main+0xb8c>
						LOW);
					} else if ((cur_temp < (dryer.setTemp - 5))
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <main+0xc6c>)
 8002bbe:	799b      	ldrb	r3, [r3, #6]
 8002bc0:	1f5a      	subs	r2, r3, #5
 8002bc2:	4b3e      	ldr	r3, [pc, #248]	; (8002cbc <main+0xc68>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	dd6d      	ble.n	8002ca6 <main+0xc52>
							&& (cur_temp > 0)) {
 8002bca:	4b3c      	ldr	r3, [pc, #240]	; (8002cbc <main+0xc68>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	dd69      	ble.n	8002ca6 <main+0xc52>
						HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin,
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bd8:	4837      	ldr	r0, [pc, #220]	; (8002cb8 <main+0xc64>)
 8002bda:	f001 f96c 	bl	8003eb6 <HAL_GPIO_WritePin>
					if (cur_temp == -1 || cur_temp == 0) {
 8002bde:	e062      	b.n	8002ca6 <main+0xc52>
 8002be0:	e061      	b.n	8002ca6 <main+0xc52>
						HIGH);
					}
				} else {
					HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8002be2:	2200      	movs	r2, #0
 8002be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002be8:	4833      	ldr	r0, [pc, #204]	; (8002cb8 <main+0xc64>)
 8002bea:	f001 f964 	bl	8003eb6 <HAL_GPIO_WritePin>
 8002bee:	e05b      	b.n	8002ca8 <main+0xc54>
				}
			} else if (dryer.state == COMPLETE) {
 8002bf0:	4b33      	ldr	r3, [pc, #204]	; (8002cc0 <main+0xc6c>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d137      	bne.n	8002c68 <main+0xc14>

				if (dryer.beepTime == 0) {
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <main+0xc6c>)
 8002bfa:	79db      	ldrb	r3, [r3, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d115      	bne.n	8002c2c <main+0xbd8>
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8002c00:	2200      	movs	r2, #0
 8002c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c06:	482f      	ldr	r0, [pc, #188]	; (8002cc4 <main+0xc70>)
 8002c08:	f001 f955 	bl	8003eb6 <HAL_GPIO_WritePin>
					cur_page = INIT_PAGE;
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <main+0xc74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
					lcd_update_evt = 1U;
 8002c12:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <main+0xc78>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
					timer_stop_evt = 1U;
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <main+0xc7c>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
					dryer.state = INIT;
 8002c1e:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <main+0xc6c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
					dryer.mode = NO_MODE;
 8002c24:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <main+0xc6c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	705a      	strb	r2, [r3, #1]
 8002c2a:	e004      	b.n	8002c36 <main+0xbe2>
				} else {
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8002c2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c30:	4824      	ldr	r0, [pc, #144]	; (8002cc4 <main+0xc70>)
 8002c32:	f001 f958 	bl	8003ee6 <HAL_GPIO_TogglePin>
				}
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8002c36:	2200      	movs	r2, #0
 8002c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c3c:	4825      	ldr	r0, [pc, #148]	; (8002cd4 <main+0xc80>)
 8002c3e:	f001 f93a 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8002c42:	2200      	movs	r2, #0
 8002c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c48:	481b      	ldr	r0, [pc, #108]	; (8002cb8 <main+0xc64>)
 8002c4a:	f001 f934 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin,
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c54:	4818      	ldr	r0, [pc, #96]	; (8002cb8 <main+0xc64>)
 8002c56:	f001 f92e 	bl	8003eb6 <HAL_GPIO_WritePin>
				LOW);
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c60:	4815      	ldr	r0, [pc, #84]	; (8002cb8 <main+0xc64>)
 8002c62:	f001 f928 	bl	8003eb6 <HAL_GPIO_WritePin>
 8002c66:	e01f      	b.n	8002ca8 <main+0xc54>

			} else {
				//beep off
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, LOW);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c6e:	4815      	ldr	r0, [pc, #84]	; (8002cc4 <main+0xc70>)
 8002c70:	f001 f921 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, LOW);
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c7a:	4816      	ldr	r0, [pc, #88]	; (8002cd4 <main+0xc80>)
 8002c7c:	f001 f91b 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_LEFT_GPIO_Port, DRUM_LEFT_Pin, LOW);
 8002c80:	2200      	movs	r2, #0
 8002c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c86:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <main+0xc64>)
 8002c88:	f001 f915 	bl	8003eb6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DRUM_RIGHT_GPIO_Port, DRUM_RIGHT_Pin,
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c92:	4809      	ldr	r0, [pc, #36]	; (8002cb8 <main+0xc64>)
 8002c94:	f001 f90f 	bl	8003eb6 <HAL_GPIO_WritePin>
				LOW);
				HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, LOW);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c9e:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <main+0xc64>)
 8002ca0:	f001 f909 	bl	8003eb6 <HAL_GPIO_WritePin>
 8002ca4:	e000      	b.n	8002ca8 <main+0xc54>
					if (cur_temp == -1 || cur_temp == 0) {
 8002ca6:	bf00      	nop
			}
			op_update_evt = 0U;
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <main+0xc84>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
		if (lcd_update_evt) {
 8002cae:	f7ff baeb 	b.w	8002288 <main+0x234>
 8002cb2:	bf00      	nop
 8002cb4:	20000166 	.word	0x20000166
 8002cb8:	40010c00 	.word	0x40010c00
 8002cbc:	20000018 	.word	0x20000018
 8002cc0:	20000154 	.word	0x20000154
 8002cc4:	40011000 	.word	0x40011000
 8002cc8:	2000016b 	.word	0x2000016b
 8002ccc:	20000162 	.word	0x20000162
 8002cd0:	20000160 	.word	0x20000160
 8002cd4:	40010800 	.word	0x40010800
 8002cd8:	20000163 	.word	0x20000163

08002cdc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b090      	sub	sp, #64	; 0x40
 8002ce0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002ce2:	f107 0318 	add.w	r3, r7, #24
 8002ce6:	2228      	movs	r2, #40	; 0x28
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 ff80 	bl	8005bf0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002cf0:	1d3b      	adds	r3, r7, #4
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
 8002cfc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d06:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d10:	2302      	movs	r3, #2
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d1a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002d20:	f107 0318 	add.w	r3, r7, #24
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 f90f 	bl	8003f48 <HAL_RCC_OscConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <SystemClock_Config+0x58>
		Error_Handler();
 8002d30:	f000 f8fc 	bl	8002f2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002d34:	230f      	movs	r3, #15
 8002d36:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 fb7c 	bl	800444c <HAL_RCC_ClockConfig>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <SystemClock_Config+0x82>
		Error_Handler();
 8002d5a:	f000 f8e7 	bl	8002f2c <Error_Handler>
	}
}
 8002d5e:	bf00      	nop
 8002d60:	3740      	adds	r7, #64	; 0x40
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	80fb      	strh	r3, [r7, #6]
//	static volatile uint8_t temp_pin_state = 0U;
//otp = 1;
	if (GPIO_Pin == DOOR_SW_Pin) {
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d10b      	bne.n	8002d90 <HAL_GPIO_EXTI_Callback+0x28>
		NVIC_DisableIRQ(EXTI0_IRQn);
 8002d78:	2006      	movs	r0, #6
 8002d7a:	f7fe ff0d 	bl	8001b98 <__NVIC_DisableIRQ>

		door_open_flag = 1U;
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x30>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
		door_open_evt = 1U;
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x34>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]

		NVIC_EnableIRQ(EXTI0_IRQn);
 8002d8a:	2006      	movs	r0, #6
 8002d8c:	f7fe fee8 	bl	8001b60 <__NVIC_EnableIRQ>
		//printf("Door_EXTI\r\n");
	}
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	2000015e 	.word	0x2000015e
 8002d9c:	2000015f 	.word	0x2000015f

08002da0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

	//printf("Timer\r\n");

	if (dryer.heatTime > 0) {
 8002da8:	4b54      	ldr	r3, [pc, #336]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002daa:	885b      	ldrh	r3, [r3, #2]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_TIM_PeriodElapsedCallback+0x1e>
		dryer.heatTime--;
 8002db0:	4b52      	ldr	r3, [pc, #328]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002db2:	885b      	ldrh	r3, [r3, #2]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002dba:	805a      	strh	r2, [r3, #2]
 8002dbc:	e014      	b.n	8002de8 <HAL_TIM_PeriodElapsedCallback+0x48>
	} else if (dryer.coolTime > 0) {
 8002dbe:	4b4f      	ldr	r3, [pc, #316]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002dc0:	889b      	ldrh	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <HAL_TIM_PeriodElapsedCallback+0x34>
		dryer.coolTime--;
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002dc8:	889b      	ldrh	r3, [r3, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002dd0:	809a      	strh	r2, [r3, #4]
 8002dd2:	e009      	b.n	8002de8 <HAL_TIM_PeriodElapsedCallback+0x48>
	} else if (dryer.state == COMPLETE) {
 8002dd4:	4b49      	ldr	r3, [pc, #292]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d105      	bne.n	8002de8 <HAL_TIM_PeriodElapsedCallback+0x48>
		dryer.beepTime--;
 8002ddc:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002dde:	79db      	ldrb	r3, [r3, #7]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b45      	ldr	r3, [pc, #276]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002de6:	71da      	strb	r2, [r3, #7]
	}

	if ((dryer.heatTime == 0) && (dryer.cycle == HEAT_CYCLE)) {
 8002de8:	4b44      	ldr	r3, [pc, #272]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002dea:	885b      	ldrh	r3, [r3, #2]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002df0:	4b42      	ldr	r3, [pc, #264]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002df2:	7a1b      	ldrb	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <HAL_TIM_PeriodElapsedCallback+0x60>
		dryer.cycle = COOL_CYCLE;
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	721a      	strb	r2, [r3, #8]
 8002dfe:	e010      	b.n	8002e22 <HAL_TIM_PeriodElapsedCallback+0x82>
	} else if ((dryer.coolTime == 0) && (dryer.cycle == COOL_CYCLE)) {
 8002e00:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002e02:	889b      	ldrh	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10c      	bne.n	8002e22 <HAL_TIM_PeriodElapsedCallback+0x82>
 8002e08:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002e0a:	7a1b      	ldrb	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <HAL_TIM_PeriodElapsedCallback+0x82>
		//printf("Complete\r\n");
		dryer.state = COMPLETE;
 8002e10:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002e12:	2202      	movs	r2, #2
 8002e14:	701a      	strb	r2, [r3, #0]
		dryer.mode = NO_MODE;
 8002e16:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	705a      	strb	r2, [r3, #1]
		cur_page = COMPLETE_PAGE;
 8002e1c:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002e1e:	2205      	movs	r2, #5
 8002e20:	701a      	strb	r2, [r3, #0]
	}

	if (pasue_cunt > 0) {
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <HAL_TIM_PeriodElapsedCallback+0x98>
		pasue_cunt--;
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	e03c      	b.n	8002eb2 <HAL_TIM_PeriodElapsedCallback+0x112>
	} else if (rot_left_cunt > 0) {
 8002e38:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HAL_TIM_PeriodElapsedCallback+0xb4>
		rot_left_cunt--;
 8002e40:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002e4a:	701a      	strb	r2, [r3, #0]
		flipflop = 1;
 8002e4c:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e02e      	b.n	8002eb2 <HAL_TIM_PeriodElapsedCallback+0x112>
	} else if (rot_right_cunt > 0) {
 8002e54:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_TIM_PeriodElapsedCallback+0xd0>
		rot_right_cunt--;
 8002e5c:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002e66:	701a      	strb	r2, [r3, #0]
		flipflop = 0;
 8002e68:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	e020      	b.n	8002eb2 <HAL_TIM_PeriodElapsedCallback+0x112>
	} else {
		rot_sw_state = HAL_GPIO_ReadPin(SEL_ROT_SW_GPIO_Port,
 8002e70:	2104      	movs	r1, #4
 8002e72:	4828      	ldr	r0, [pc, #160]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002e74:	f001 f808 	bl	8003e88 <HAL_GPIO_ReadPin>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002e7e:	701a      	strb	r2, [r3, #0]
		SEL_ROT_SW_Pin);
		if (rot_sw_state) {
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_TIM_PeriodElapsedCallback+0xf6>
			pasue_cunt = 0U;
 8002e88:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
			rot_left_cunt = 30U;
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002e90:	221e      	movs	r2, #30
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e00d      	b.n	8002eb2 <HAL_TIM_PeriodElapsedCallback+0x112>
		} else {
			pasue_cunt = 3U;
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002e98:	2203      	movs	r2, #3
 8002e9a:	701a      	strb	r2, [r3, #0]
			if (flipflop)
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_TIM_PeriodElapsedCallback+0x10c>
				rot_right_cunt = 30U;
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002ea6:	221e      	movs	r2, #30
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e002      	b.n	8002eb2 <HAL_TIM_PeriodElapsedCallback+0x112>
			else
				rot_left_cunt = 30U;
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002eae:	221e      	movs	r2, #30
 8002eb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (limit_sw_open() && (dryer.cycle == HEAT_CYCLE)) {
 8002eb2:	f7fe f8b5 	bl	8001020 <limit_sw_open>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00e      	beq.n	8002eda <HAL_TIM_PeriodElapsedCallback+0x13a>
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002ebe:	7a1b      	ldrb	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <HAL_TIM_PeriodElapsedCallback+0x13a>
		if (limit_timeout > 0)
 8002ec4:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00c      	beq.n	8002ee6 <HAL_TIM_PeriodElapsedCallback+0x146>
			limit_timeout--;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002ed6:	701a      	strb	r2, [r3, #0]
		if (limit_timeout > 0)
 8002ed8:	e005      	b.n	8002ee6 <HAL_TIM_PeriodElapsedCallback+0x146>
	} else {
		limit_timeout = 30U;
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002edc:	221e      	movs	r2, #30
 8002ede:	701a      	strb	r2, [r3, #0]
		limit_timeout_flag = 0U;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
	}
//	otp = 1;
	op_update_evt = 1U;
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
	lcd_update_evt = 1U;
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000154 	.word	0x20000154
 8002f00:	2000016b 	.word	0x2000016b
 8002f04:	20000167 	.word	0x20000167
 8002f08:	20000015 	.word	0x20000015
 8002f0c:	20000169 	.word	0x20000169
 8002f10:	20000166 	.word	0x20000166
 8002f14:	40010800 	.word	0x40010800
 8002f18:	20000168 	.word	0x20000168
 8002f1c:	20000014 	.word	0x20000014
 8002f20:	20000164 	.word	0x20000164
 8002f24:	20000163 	.word	0x20000163
 8002f28:	20000162 	.word	0x20000162

08002f2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f30:	b672      	cpsid	i
}
 8002f32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f34:	e7fe      	b.n	8002f34 <Error_Handler+0x8>
	...

08002f38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f3c:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f3e:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <MX_SPI1_Init+0x68>)
 8002f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f6c:	2230      	movs	r2, #48	; 0x30
 8002f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7c:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f84:	220a      	movs	r2, #10
 8002f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f88:	4804      	ldr	r0, [pc, #16]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f8a:	f001 fbf7 	bl	800477c <HAL_SPI_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f94:	f7ff ffca 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000170 	.word	0x20000170
 8002fa0:	40013000 	.word	0x40013000

08002fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 0310 	add.w	r3, r7, #16
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d12f      	bne.n	8003024 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <HAL_SPI_MspInit+0x8c>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <HAL_SPI_MspInit+0x8c>)
 8002fca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fce:	6193      	str	r3, [r2, #24]
 8002fd0:	4b17      	ldr	r3, [pc, #92]	; (8003030 <HAL_SPI_MspInit+0x8c>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_SPI_MspInit+0x8c>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	4a13      	ldr	r2, [pc, #76]	; (8003030 <HAL_SPI_MspInit+0x8c>)
 8002fe2:	f043 0304 	orr.w	r3, r3, #4
 8002fe6:	6193      	str	r3, [r2, #24]
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_SPI_MspInit+0x8c>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ff4:	23a0      	movs	r3, #160	; 0xa0
 8002ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003000:	f107 0310 	add.w	r3, r7, #16
 8003004:	4619      	mov	r1, r3
 8003006:	480b      	ldr	r0, [pc, #44]	; (8003034 <HAL_SPI_MspInit+0x90>)
 8003008:	f000 fdba 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800300c:	2340      	movs	r3, #64	; 0x40
 800300e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	4619      	mov	r1, r3
 800301e:	4805      	ldr	r0, [pc, #20]	; (8003034 <HAL_SPI_MspInit+0x90>)
 8003020:	f000 fdae 	bl	8003b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003024:	bf00      	nop
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40013000 	.word	0x40013000
 8003030:	40021000 	.word	0x40021000
 8003034:	40010800 	.word	0x40010800

08003038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_MspInit+0x5c>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	4a14      	ldr	r2, [pc, #80]	; (8003094 <HAL_MspInit+0x5c>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6193      	str	r3, [r2, #24]
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_MspInit+0x5c>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_MspInit+0x5c>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <HAL_MspInit+0x5c>)
 800305c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003060:	61d3      	str	r3, [r2, #28]
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_MspInit+0x5c>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_MspInit+0x60>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HAL_MspInit+0x60>)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40021000 	.word	0x40021000
 8003098:	40010000 	.word	0x40010000

0800309c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a0:	e7fe      	b.n	80030a0 <NMI_Handler+0x4>

080030a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <HardFault_Handler+0x4>

080030a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <MemManage_Handler+0x4>

080030ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <BusFault_Handler+0x4>

080030b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <UsageFault_Handler+0x4>

080030ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e2:	f000 fa0f 	bl	8003504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}

080030ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOOR_SW_Pin);
 80030ee:	2001      	movs	r0, #1
 80030f0:	f000 ff12 	bl	8003f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <TIM4_IRQHandler+0x10>)
 80030fe:	f002 f83d 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200001cc 	.word	0x200001cc

0800310c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	e00a      	b.n	8003134 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800311e:	f3af 8000 	nop.w
 8003122:	4601      	mov	r1, r0
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	60ba      	str	r2, [r7, #8]
 800312a:	b2ca      	uxtb	r2, r1
 800312c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	3301      	adds	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	dbf0      	blt.n	800311e <_read+0x12>
  }

  return len;
 800313c:	687b      	ldr	r3, [r7, #4]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	e009      	b.n	800316c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	60ba      	str	r2, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe fd3d 	bl	8001be0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3301      	adds	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	dbf1      	blt.n	8003158 <_write+0x12>
  }
  return len;
 8003174:	687b      	ldr	r3, [r7, #4]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <_close>:

int _close(int file)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031a4:	605a      	str	r2, [r3, #4]
  return 0;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <_isatty>:

int _isatty(int file)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031ba:	2301      	movs	r3, #1
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
	...

080031e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <_sbrk+0x5c>)
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <_sbrk+0x60>)
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f4:	4b13      	ldr	r3, [pc, #76]	; (8003244 <_sbrk+0x64>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <_sbrk+0x64>)
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <_sbrk+0x68>)
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <_sbrk+0x64>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	429a      	cmp	r2, r3
 800320e:	d207      	bcs.n	8003220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003210:	f002 fcc4 	bl	8005b9c <__errno>
 8003214:	4603      	mov	r3, r0
 8003216:	220c      	movs	r2, #12
 8003218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800321a:	f04f 33ff 	mov.w	r3, #4294967295
 800321e:	e009      	b.n	8003234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <_sbrk+0x64>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <_sbrk+0x64>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <_sbrk+0x64>)
 8003230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20005000 	.word	0x20005000
 8003240:	00000400 	.word	0x00000400
 8003244:	200001c8 	.word	0x200001c8
 8003248:	20000290 	.word	0x20000290

0800324c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800325e:	f107 0308 	add.w	r3, r7, #8
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800326c:	463b      	mov	r3, r7
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <MX_TIM4_Init+0x94>)
 8003276:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <MX_TIM4_Init+0x98>)
 8003278:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <MX_TIM4_Init+0x94>)
 800327c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003280:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <MX_TIM4_Init+0x94>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <MX_TIM4_Init+0x94>)
 800328a:	f242 720f 	movw	r2, #9999	; 0x270f
 800328e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <MX_TIM4_Init+0x94>)
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <MX_TIM4_Init+0x94>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800329c:	4813      	ldr	r0, [pc, #76]	; (80032ec <MX_TIM4_Init+0x94>)
 800329e:	f001 fe9d 	bl	8004fdc <HAL_TIM_Base_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80032a8:	f7ff fe40 	bl	8002f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80032b2:	f107 0308 	add.w	r3, r7, #8
 80032b6:	4619      	mov	r1, r3
 80032b8:	480c      	ldr	r0, [pc, #48]	; (80032ec <MX_TIM4_Init+0x94>)
 80032ba:	f002 f867 	bl	800538c <HAL_TIM_ConfigClockSource>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80032c4:	f7ff fe32 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032c8:	2320      	movs	r3, #32
 80032ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032d0:	463b      	mov	r3, r7
 80032d2:	4619      	mov	r1, r3
 80032d4:	4805      	ldr	r0, [pc, #20]	; (80032ec <MX_TIM4_Init+0x94>)
 80032d6:	f002 fa39 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80032e0:	f7ff fe24 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032e4:	bf00      	nop
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	200001cc 	.word	0x200001cc
 80032f0:	40000800 	.word	0x40000800

080032f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0d      	ldr	r2, [pc, #52]	; (8003338 <HAL_TIM_Base_MspInit+0x44>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d113      	bne.n	800332e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <HAL_TIM_Base_MspInit+0x48>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4a0c      	ldr	r2, [pc, #48]	; (800333c <HAL_TIM_Base_MspInit+0x48>)
 800330c:	f043 0304 	orr.w	r3, r3, #4
 8003310:	61d3      	str	r3, [r2, #28]
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_TIM_Base_MspInit+0x48>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	2101      	movs	r1, #1
 8003322:	201e      	movs	r0, #30
 8003324:	f000 fa05 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003328:	201e      	movs	r0, #30
 800332a:	f000 fa1e 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40000800 	.word	0x40000800
 800333c:	40021000 	.word	0x40021000

08003340 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <MX_USART1_UART_Init+0x4c>)
 8003346:	4a12      	ldr	r2, [pc, #72]	; (8003390 <MX_USART1_UART_Init+0x50>)
 8003348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <MX_USART1_UART_Init+0x4c>)
 800334c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <MX_USART1_UART_Init+0x4c>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <MX_USART1_UART_Init+0x4c>)
 800335a:	2200      	movs	r2, #0
 800335c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <MX_USART1_UART_Init+0x4c>)
 8003360:	2200      	movs	r2, #0
 8003362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <MX_USART1_UART_Init+0x4c>)
 8003366:	220c      	movs	r2, #12
 8003368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <MX_USART1_UART_Init+0x4c>)
 800336c:	2200      	movs	r2, #0
 800336e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <MX_USART1_UART_Init+0x4c>)
 8003372:	2200      	movs	r2, #0
 8003374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003376:	4805      	ldr	r0, [pc, #20]	; (800338c <MX_USART1_UART_Init+0x4c>)
 8003378:	f002 fa58 	bl	800582c <HAL_UART_Init>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003382:	f7ff fdd3 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000214 	.word	0x20000214
 8003390:	40013800 	.word	0x40013800

08003394 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 0310 	add.w	r3, r7, #16
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <HAL_UART_MspInit+0x8c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d131      	bne.n	8003418 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_UART_MspInit+0x90>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	4a1a      	ldr	r2, [pc, #104]	; (8003424 <HAL_UART_MspInit+0x90>)
 80033ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033be:	6193      	str	r3, [r2, #24]
 80033c0:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_UART_MspInit+0x90>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033cc:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_UART_MspInit+0x90>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	4a14      	ldr	r2, [pc, #80]	; (8003424 <HAL_UART_MspInit+0x90>)
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6193      	str	r3, [r2, #24]
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_UART_MspInit+0x90>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ee:	2303      	movs	r3, #3
 80033f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f2:	f107 0310 	add.w	r3, r7, #16
 80033f6:	4619      	mov	r1, r3
 80033f8:	480b      	ldr	r0, [pc, #44]	; (8003428 <HAL_UART_MspInit+0x94>)
 80033fa:	f000 fbc1 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003402:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340c:	f107 0310 	add.w	r3, r7, #16
 8003410:	4619      	mov	r1, r3
 8003412:	4805      	ldr	r0, [pc, #20]	; (8003428 <HAL_UART_MspInit+0x94>)
 8003414:	f000 fbb4 	bl	8003b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003418:	bf00      	nop
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40013800 	.word	0x40013800
 8003424:	40021000 	.word	0x40021000
 8003428:	40010800 	.word	0x40010800

0800342c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800342c:	480c      	ldr	r0, [pc, #48]	; (8003460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800342e:	490d      	ldr	r1, [pc, #52]	; (8003464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003430:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003434:	e002      	b.n	800343c <LoopCopyDataInit>

08003436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343a:	3304      	adds	r3, #4

0800343c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800343c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800343e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003440:	d3f9      	bcc.n	8003436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003444:	4c0a      	ldr	r4, [pc, #40]	; (8003470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003448:	e001      	b.n	800344e <LoopFillZerobss>

0800344a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800344c:	3204      	adds	r2, #4

0800344e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800344e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003450:	d3fb      	bcc.n	800344a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003452:	f7ff fefb 	bl	800324c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003456:	f002 fba7 	bl	8005ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800345a:	f7fe fdfb 	bl	8002054 <main>
  bx lr
 800345e:	4770      	bx	lr
  ldr r0, =_sdata
 8003460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003464:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003468:	080072b0 	.word	0x080072b0
  ldr r2, =_sbss
 800346c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003470:	20000290 	.word	0x20000290

08003474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003474:	e7fe      	b.n	8003474 <ADC1_2_IRQHandler>
	...

08003478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <HAL_Init+0x28>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <HAL_Init+0x28>)
 8003482:	f043 0310 	orr.w	r3, r3, #16
 8003486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003488:	2003      	movs	r0, #3
 800348a:	f000 f947 	bl	800371c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800348e:	200f      	movs	r0, #15
 8003490:	f000 f808 	bl	80034a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003494:	f7ff fdd0 	bl	8003038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40022000 	.word	0x40022000

080034a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_InitTick+0x54>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_InitTick+0x58>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	4619      	mov	r1, r3
 80034b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f95f 	bl	8003786 <HAL_SYSTICK_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e00e      	b.n	80034f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b0f      	cmp	r3, #15
 80034d6:	d80a      	bhi.n	80034ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034d8:	2200      	movs	r2, #0
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	f000 f927 	bl	8003732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034e4:	4a06      	ldr	r2, [pc, #24]	; (8003500 <HAL_InitTick+0x5c>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	2000001c 	.word	0x2000001c
 80034fc:	20000024 	.word	0x20000024
 8003500:	20000020 	.word	0x20000020

08003504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_IncTick+0x1c>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_IncTick+0x20>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4413      	add	r3, r2
 8003514:	4a03      	ldr	r2, [pc, #12]	; (8003524 <HAL_IncTick+0x20>)
 8003516:	6013      	str	r3, [r2, #0]
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr
 8003520:	20000024 	.word	0x20000024
 8003524:	20000258 	.word	0x20000258

08003528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return uwTick;
 800352c:	4b02      	ldr	r3, [pc, #8]	; (8003538 <HAL_GetTick+0x10>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	20000258 	.word	0x20000258

0800353c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003544:	f7ff fff0 	bl	8003528 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d005      	beq.n	8003562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <HAL_Delay+0x44>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003562:	bf00      	nop
 8003564:	f7ff ffe0 	bl	8003528 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	429a      	cmp	r2, r3
 8003572:	d8f7      	bhi.n	8003564 <HAL_Delay+0x28>
  {
  }
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000024 	.word	0x20000024

08003584 <__NVIC_SetPriorityGrouping>:
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035a0:	4013      	ands	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b6:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <__NVIC_SetPriorityGrouping+0x44>)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	60d3      	str	r3, [r2, #12]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_GetPriorityGrouping>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <__NVIC_GetPriorityGrouping+0x18>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	f003 0307 	and.w	r3, r3, #7
}
 80035da:	4618      	mov	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_EnableIRQ>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	db0b      	blt.n	8003612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	4906      	ldr	r1, [pc, #24]	; (800361c <__NVIC_EnableIRQ+0x34>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2001      	movs	r0, #1
 800360a:	fa00 f202 	lsl.w	r2, r0, r2
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	e000e100 	.word	0xe000e100

08003620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	2b00      	cmp	r3, #0
 8003632:	db0a      	blt.n	800364a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	490c      	ldr	r1, [pc, #48]	; (800366c <__NVIC_SetPriority+0x4c>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	440b      	add	r3, r1
 8003644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003648:	e00a      	b.n	8003660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4908      	ldr	r1, [pc, #32]	; (8003670 <__NVIC_SetPriority+0x50>)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3b04      	subs	r3, #4
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	440b      	add	r3, r1
 800365e:	761a      	strb	r2, [r3, #24]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000e100 	.word	0xe000e100
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f1c3 0307 	rsb	r3, r3, #7
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf28      	it	cs
 8003692:	2304      	movcs	r3, #4
 8003694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3304      	adds	r3, #4
 800369a:	2b06      	cmp	r3, #6
 800369c:	d902      	bls.n	80036a4 <NVIC_EncodePriority+0x30>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3b03      	subs	r3, #3
 80036a2:	e000      	b.n	80036a6 <NVIC_EncodePriority+0x32>
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	401a      	ands	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036bc:	f04f 31ff 	mov.w	r1, #4294967295
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43d9      	mvns	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	4313      	orrs	r3, r2
         );
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	; 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e8:	d301      	bcc.n	80036ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00f      	b.n	800370e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <SysTick_Config+0x40>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f6:	210f      	movs	r1, #15
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	f7ff ff90 	bl	8003620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <SysTick_Config+0x40>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <SysTick_Config+0x40>)
 8003708:	2207      	movs	r2, #7
 800370a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	e000e010 	.word	0xe000e010

0800371c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff2d 	bl	8003584 <__NVIC_SetPriorityGrouping>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003744:	f7ff ff42 	bl	80035cc <__NVIC_GetPriorityGrouping>
 8003748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	6978      	ldr	r0, [r7, #20]
 8003750:	f7ff ff90 	bl	8003674 <NVIC_EncodePriority>
 8003754:	4602      	mov	r2, r0
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff5f 	bl	8003620 <__NVIC_SetPriority>
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff35 	bl	80035e8 <__NVIC_EnableIRQ>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffa2 	bl	80036d8 <SysTick_Config>
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80037a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_FLASH_Program+0xd8>)
 80037bc:	7e1b      	ldrb	r3, [r3, #24]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_FLASH_Program+0x26>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e054      	b.n	8003870 <HAL_FLASH_Program+0xd0>
 80037c6:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <HAL_FLASH_Program+0xd8>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037d0:	f000 f898 	bl	8003904 <FLASH_WaitForLastOperation>
 80037d4:	4603      	mov	r3, r0
 80037d6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d144      	bne.n	8003868 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d102      	bne.n	80037ea <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80037e4:	2301      	movs	r3, #1
 80037e6:	757b      	strb	r3, [r7, #21]
 80037e8:	e007      	b.n	80037fa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d102      	bne.n	80037f6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80037f0:	2302      	movs	r3, #2
 80037f2:	757b      	strb	r3, [r7, #21]
 80037f4:	e001      	b.n	80037fa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80037f6:	2304      	movs	r3, #4
 80037f8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	75bb      	strb	r3, [r7, #22]
 80037fe:	e02d      	b.n	800385c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003800:	7dbb      	ldrb	r3, [r7, #22]
 8003802:	005a      	lsls	r2, r3, #1
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	eb02 0c03 	add.w	ip, r2, r3
 800380a:	7dbb      	ldrb	r3, [r7, #22]
 800380c:	0119      	lsls	r1, r3, #4
 800380e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003812:	f1c1 0620 	rsb	r6, r1, #32
 8003816:	f1a1 0020 	sub.w	r0, r1, #32
 800381a:	fa22 f401 	lsr.w	r4, r2, r1
 800381e:	fa03 f606 	lsl.w	r6, r3, r6
 8003822:	4334      	orrs	r4, r6
 8003824:	fa23 f000 	lsr.w	r0, r3, r0
 8003828:	4304      	orrs	r4, r0
 800382a:	fa23 f501 	lsr.w	r5, r3, r1
 800382e:	b2a3      	uxth	r3, r4
 8003830:	4619      	mov	r1, r3
 8003832:	4660      	mov	r0, ip
 8003834:	f000 f84a 	bl	80038cc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003838:	f24c 3050 	movw	r0, #50000	; 0xc350
 800383c:	f000 f862 	bl	8003904 <FLASH_WaitForLastOperation>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_FLASH_Program+0xdc>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	4a0c      	ldr	r2, [pc, #48]	; (800387c <HAL_FLASH_Program+0xdc>)
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003856:	7dbb      	ldrb	r3, [r7, #22]
 8003858:	3301      	adds	r3, #1
 800385a:	75bb      	strb	r3, [r7, #22]
 800385c:	7dba      	ldrb	r2, [r7, #22]
 800385e:	7d7b      	ldrb	r3, [r7, #21]
 8003860:	429a      	cmp	r2, r3
 8003862:	d3cd      	bcc.n	8003800 <HAL_FLASH_Program+0x60>
 8003864:	e000      	b.n	8003868 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003866:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_FLASH_Program+0xd8>)
 800386a:	2200      	movs	r2, #0
 800386c:	761a      	strb	r2, [r3, #24]

  return status;
 800386e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003870:	4618      	mov	r0, r3
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003878:	20000260 	.word	0x20000260
 800387c:	40022000 	.word	0x40022000

08003880 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <HAL_FLASH_Unlock+0x40>)
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_FLASH_Unlock+0x40>)
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <HAL_FLASH_Unlock+0x44>)
 800389a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <HAL_FLASH_Unlock+0x40>)
 800389e:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <HAL_FLASH_Unlock+0x48>)
 80038a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <HAL_FLASH_Unlock+0x40>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80038b2:	79fb      	ldrb	r3, [r7, #7]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40022000 	.word	0x40022000
 80038c4:	45670123 	.word	0x45670123
 80038c8:	cdef89ab 	.word	0xcdef89ab

080038cc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <FLASH_Program_HalfWord+0x30>)
 80038da:	2200      	movs	r2, #0
 80038dc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <FLASH_Program_HalfWord+0x34>)
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <FLASH_Program_HalfWord+0x34>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	887a      	ldrh	r2, [r7, #2]
 80038ee:	801a      	strh	r2, [r3, #0]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000260 	.word	0x20000260
 8003900:	40022000 	.word	0x40022000

08003904 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800390c:	f7ff fe0c 	bl	8003528 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003912:	e010      	b.n	8003936 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d00c      	beq.n	8003936 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <FLASH_WaitForLastOperation+0x2e>
 8003922:	f7ff fe01 	bl	8003528 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	429a      	cmp	r2, r3
 8003930:	d201      	bcs.n	8003936 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e025      	b.n	8003982 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e8      	bne.n	8003914 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 8003950:	2220      	movs	r2, #32
 8003952:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800396c:	4b07      	ldr	r3, [pc, #28]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003978:	f000 f80a 	bl	8003990 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40022000 	.word	0x40022000

08003990 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80039a6:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f043 0302 	orr.w	r3, r3, #2
 80039ae:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f043 0310 	orr.w	r3, r3, #16
 80039b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80039ba:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f043 0304 	orr.w	r3, r3, #4
 80039ee:	4a0f      	ldr	r2, [pc, #60]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039f0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f240 1201 	movw	r2, #257	; 0x101
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d106      	bne.n	8003a16 <FLASH_SetErrorCode+0x86>
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	4a06      	ldr	r2, [pc, #24]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	61d3      	str	r3, [r2, #28]
}  
 8003a14:	e002      	b.n	8003a1c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003a16:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60d3      	str	r3, [r2, #12]
}  
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	20000260 	.word	0x20000260

08003a30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_FLASHEx_Erase+0xd0>)
 8003a44:	7e1b      	ldrb	r3, [r3, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_FLASHEx_Erase+0x1e>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e053      	b.n	8003af6 <HAL_FLASHEx_Erase+0xc6>
 8003a4e:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <HAL_FLASHEx_Erase+0xd0>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d116      	bne.n	8003a8a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003a5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a60:	f7ff ff50 	bl	8003904 <FLASH_WaitForLastOperation>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d141      	bne.n	8003aee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f000 f84c 	bl	8003b08 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a74:	f7ff ff46 	bl	8003904 <FLASH_WaitForLastOperation>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <HAL_FLASHEx_Erase+0xd4>)
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	4a20      	ldr	r2, [pc, #128]	; (8003b04 <HAL_FLASHEx_Erase+0xd4>)
 8003a82:	f023 0304 	bic.w	r3, r3, #4
 8003a86:	6113      	str	r3, [r2, #16]
 8003a88:	e031      	b.n	8003aee <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003a8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a8e:	f7ff ff39 	bl	8003904 <FLASH_WaitForLastOperation>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d12a      	bne.n	8003aee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	e019      	b.n	8003adc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003aa8:	68b8      	ldr	r0, [r7, #8]
 8003aaa:	f000 f849 	bl	8003b40 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003aae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ab2:	f7ff ff27 	bl	8003904 <FLASH_WaitForLastOperation>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <HAL_FLASHEx_Erase+0xd4>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <HAL_FLASHEx_Erase+0xd4>)
 8003ac0:	f023 0302 	bic.w	r3, r3, #2
 8003ac4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	601a      	str	r2, [r3, #0]
            break;
 8003ad2:	e00c      	b.n	8003aee <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ada:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	029a      	lsls	r2, r3, #10
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d3dc      	bcc.n	8003aa8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_FLASHEx_Erase+0xd0>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	761a      	strb	r2, [r3, #24]

  return status;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000260 	.word	0x20000260
 8003b04:	40022000 	.word	0x40022000

08003b08 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <FLASH_MassErase+0x30>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <FLASH_MassErase+0x34>)
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <FLASH_MassErase+0x34>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <FLASH_MassErase+0x34>)
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <FLASH_MassErase+0x34>)
 8003b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b2c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	20000260 	.word	0x20000260
 8003b3c:	40022000 	.word	0x40022000

08003b40 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <FLASH_PageErase+0x38>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <FLASH_PageErase+0x3c>)
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <FLASH_PageErase+0x3c>)
 8003b54:	f043 0302 	orr.w	r3, r3, #2
 8003b58:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <FLASH_PageErase+0x3c>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <FLASH_PageErase+0x3c>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <FLASH_PageErase+0x3c>)
 8003b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b6a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000260 	.word	0x20000260
 8003b7c:	40022000 	.word	0x40022000

08003b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b08b      	sub	sp, #44	; 0x2c
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b92:	e169      	b.n	8003e68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b94:	2201      	movs	r2, #1
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	f040 8158 	bne.w	8003e62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4a9a      	ldr	r2, [pc, #616]	; (8003e20 <HAL_GPIO_Init+0x2a0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d05e      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bbc:	4a98      	ldr	r2, [pc, #608]	; (8003e20 <HAL_GPIO_Init+0x2a0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d875      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bc2:	4a98      	ldr	r2, [pc, #608]	; (8003e24 <HAL_GPIO_Init+0x2a4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d058      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bc8:	4a96      	ldr	r2, [pc, #600]	; (8003e24 <HAL_GPIO_Init+0x2a4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d86f      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bce:	4a96      	ldr	r2, [pc, #600]	; (8003e28 <HAL_GPIO_Init+0x2a8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d052      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bd4:	4a94      	ldr	r2, [pc, #592]	; (8003e28 <HAL_GPIO_Init+0x2a8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d869      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bda:	4a94      	ldr	r2, [pc, #592]	; (8003e2c <HAL_GPIO_Init+0x2ac>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04c      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003be0:	4a92      	ldr	r2, [pc, #584]	; (8003e2c <HAL_GPIO_Init+0x2ac>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d863      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003be6:	4a92      	ldr	r2, [pc, #584]	; (8003e30 <HAL_GPIO_Init+0x2b0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d046      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bec:	4a90      	ldr	r2, [pc, #576]	; (8003e30 <HAL_GPIO_Init+0x2b0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d85d      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bf2:	2b12      	cmp	r3, #18
 8003bf4:	d82a      	bhi.n	8003c4c <HAL_GPIO_Init+0xcc>
 8003bf6:	2b12      	cmp	r3, #18
 8003bf8:	d859      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <HAL_GPIO_Init+0x80>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c7b 	.word	0x08003c7b
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003c67 	.word	0x08003c67
 8003c0c:	08003ca9 	.word	0x08003ca9
 8003c10:	08003caf 	.word	0x08003caf
 8003c14:	08003caf 	.word	0x08003caf
 8003c18:	08003caf 	.word	0x08003caf
 8003c1c:	08003caf 	.word	0x08003caf
 8003c20:	08003caf 	.word	0x08003caf
 8003c24:	08003caf 	.word	0x08003caf
 8003c28:	08003caf 	.word	0x08003caf
 8003c2c:	08003caf 	.word	0x08003caf
 8003c30:	08003caf 	.word	0x08003caf
 8003c34:	08003caf 	.word	0x08003caf
 8003c38:	08003caf 	.word	0x08003caf
 8003c3c:	08003caf 	.word	0x08003caf
 8003c40:	08003caf 	.word	0x08003caf
 8003c44:	08003c5d 	.word	0x08003c5d
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	4a79      	ldr	r2, [pc, #484]	; (8003e34 <HAL_GPIO_Init+0x2b4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c52:	e02c      	b.n	8003cae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	623b      	str	r3, [r7, #32]
          break;
 8003c5a:	e029      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	3304      	adds	r3, #4
 8003c62:	623b      	str	r3, [r7, #32]
          break;
 8003c64:	e024      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	623b      	str	r3, [r7, #32]
          break;
 8003c6e:	e01f      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	330c      	adds	r3, #12
 8003c76:	623b      	str	r3, [r7, #32]
          break;
 8003c78:	e01a      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c82:	2304      	movs	r3, #4
 8003c84:	623b      	str	r3, [r7, #32]
          break;
 8003c86:	e013      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c90:	2308      	movs	r3, #8
 8003c92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	611a      	str	r2, [r3, #16]
          break;
 8003c9a:	e009      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	615a      	str	r2, [r3, #20]
          break;
 8003ca6:	e003      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	623b      	str	r3, [r7, #32]
          break;
 8003cac:	e000      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          break;
 8003cae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2bff      	cmp	r3, #255	; 0xff
 8003cb4:	d801      	bhi.n	8003cba <HAL_GPIO_Init+0x13a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	e001      	b.n	8003cbe <HAL_GPIO_Init+0x13e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2bff      	cmp	r3, #255	; 0xff
 8003cc4:	d802      	bhi.n	8003ccc <HAL_GPIO_Init+0x14c>
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	e002      	b.n	8003cd2 <HAL_GPIO_Init+0x152>
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	3b08      	subs	r3, #8
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	210f      	movs	r1, #15
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	6a39      	ldr	r1, [r7, #32]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	431a      	orrs	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80b1 	beq.w	8003e62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d00:	4b4d      	ldr	r3, [pc, #308]	; (8003e38 <HAL_GPIO_Init+0x2b8>)
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	4a4c      	ldr	r2, [pc, #304]	; (8003e38 <HAL_GPIO_Init+0x2b8>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6193      	str	r3, [r2, #24]
 8003d0c:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <HAL_GPIO_Init+0x2b8>)
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d18:	4a48      	ldr	r2, [pc, #288]	; (8003e3c <HAL_GPIO_Init+0x2bc>)
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	3302      	adds	r3, #2
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	220f      	movs	r2, #15
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a40      	ldr	r2, [pc, #256]	; (8003e40 <HAL_GPIO_Init+0x2c0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_GPIO_Init+0x1ec>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3f      	ldr	r2, [pc, #252]	; (8003e44 <HAL_GPIO_Init+0x2c4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00d      	beq.n	8003d68 <HAL_GPIO_Init+0x1e8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3e      	ldr	r2, [pc, #248]	; (8003e48 <HAL_GPIO_Init+0x2c8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <HAL_GPIO_Init+0x1e4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3d      	ldr	r2, [pc, #244]	; (8003e4c <HAL_GPIO_Init+0x2cc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_GPIO_Init+0x1e0>
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d60:	2304      	movs	r3, #4
 8003d62:	e004      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e002      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	f002 0203 	and.w	r2, r2, #3
 8003d74:	0092      	lsls	r2, r2, #2
 8003d76:	4093      	lsls	r3, r2
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d7e:	492f      	ldr	r1, [pc, #188]	; (8003e3c <HAL_GPIO_Init+0x2bc>)
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	3302      	adds	r3, #2
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d006      	beq.n	8003da6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	492c      	ldr	r1, [pc, #176]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
 8003da4:	e006      	b.n	8003db4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	4928      	ldr	r1, [pc, #160]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d006      	beq.n	8003dce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dc0:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	4922      	ldr	r1, [pc, #136]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	491e      	ldr	r1, [pc, #120]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d006      	beq.n	8003df6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	4918      	ldr	r1, [pc, #96]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
 8003df4:	e006      	b.n	8003e04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003df6:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	4914      	ldr	r1, [pc, #80]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d021      	beq.n	8003e54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	490e      	ldr	r1, [pc, #56]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60cb      	str	r3, [r1, #12]
 8003e1c:	e021      	b.n	8003e62 <HAL_GPIO_Init+0x2e2>
 8003e1e:	bf00      	nop
 8003e20:	10320000 	.word	0x10320000
 8003e24:	10310000 	.word	0x10310000
 8003e28:	10220000 	.word	0x10220000
 8003e2c:	10210000 	.word	0x10210000
 8003e30:	10120000 	.word	0x10120000
 8003e34:	10110000 	.word	0x10110000
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40010800 	.word	0x40010800
 8003e44:	40010c00 	.word	0x40010c00
 8003e48:	40011000 	.word	0x40011000
 8003e4c:	40011400 	.word	0x40011400
 8003e50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_GPIO_Init+0x304>)
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	4909      	ldr	r1, [pc, #36]	; (8003e84 <HAL_GPIO_Init+0x304>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	3301      	adds	r3, #1
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f47f ae8e 	bne.w	8003b94 <HAL_GPIO_Init+0x14>
  }
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	372c      	adds	r7, #44	; 0x2c
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	40010400 	.word	0x40010400

08003e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	e001      	b.n	8003eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	807b      	strh	r3, [r7, #2]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ec6:	787b      	ldrb	r3, [r7, #1]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ecc:	887a      	ldrh	r2, [r7, #2]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ed2:	e003      	b.n	8003edc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ed4:	887b      	ldrh	r3, [r7, #2]
 8003ed6:	041a      	lsls	r2, r3, #16
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	611a      	str	r2, [r3, #16]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ef8:	887a      	ldrh	r2, [r7, #2]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4013      	ands	r3, r2
 8003efe:	041a      	lsls	r2, r3, #16
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	43d9      	mvns	r1, r3
 8003f04:	887b      	ldrh	r3, [r7, #2]
 8003f06:	400b      	ands	r3, r1
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d006      	beq.n	8003f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f2e:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe ff16 	bl	8002d68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40010400 	.word	0x40010400

08003f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e272      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8087 	beq.w	8004076 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f68:	4b92      	ldr	r3, [pc, #584]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d00c      	beq.n	8003f8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f74:	4b8f      	ldr	r3, [pc, #572]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d112      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x5e>
 8003f80:	4b8c      	ldr	r3, [pc, #560]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8e:	4b89      	ldr	r3, [pc, #548]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d06c      	beq.n	8004074 <HAL_RCC_OscConfig+0x12c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d168      	bne.n	8004074 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e24c      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x76>
 8003fb0:	4b80      	ldr	r3, [pc, #512]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a7f      	ldr	r2, [pc, #508]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e02e      	b.n	800401c <HAL_RCC_OscConfig+0xd4>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x98>
 8003fc6:	4b7b      	ldr	r3, [pc, #492]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a7a      	ldr	r2, [pc, #488]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b78      	ldr	r3, [pc, #480]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a77      	ldr	r2, [pc, #476]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e01d      	b.n	800401c <HAL_RCC_OscConfig+0xd4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0xbc>
 8003fea:	4b72      	ldr	r3, [pc, #456]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a71      	ldr	r2, [pc, #452]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6e      	ldr	r2, [pc, #440]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xd4>
 8004004:	4b6b      	ldr	r3, [pc, #428]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6a      	ldr	r2, [pc, #424]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b68      	ldr	r3, [pc, #416]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a67      	ldr	r2, [pc, #412]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7ff fa80 	bl	8003528 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800402c:	f7ff fa7c 	bl	8003528 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e200      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xe4>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7ff fa6c 	bl	8003528 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7ff fa68 	bl	8003528 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e1ec      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x10c>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d063      	beq.n	800414a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004082:	4b4c      	ldr	r3, [pc, #304]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800408e:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b08      	cmp	r3, #8
 8004098:	d11c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x18c>
 800409a:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	4b43      	ldr	r3, [pc, #268]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_RCC_OscConfig+0x176>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d001      	beq.n	80040be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e1c0      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040be:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4939      	ldr	r1, [pc, #228]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d2:	e03a      	b.n	800414a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <HAL_RCC_OscConfig+0x270>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7ff fa21 	bl	8003528 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ea:	f7ff fa1d 	bl	8003528 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e1a1      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004108:	4b2a      	ldr	r3, [pc, #168]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4927      	ldr	r1, [pc, #156]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]
 800411c:	e015      	b.n	800414a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_RCC_OscConfig+0x270>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7ff fa00 	bl	8003528 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412c:	f7ff f9fc 	bl	8003528 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e180      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d03a      	beq.n	80041cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d019      	beq.n	8004192 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415e:	4b17      	ldr	r3, [pc, #92]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004164:	f7ff f9e0 	bl	8003528 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800416c:	f7ff f9dc 	bl	8003528 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e160      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800418a:	2001      	movs	r0, #1
 800418c:	f000 fad8 	bl	8004740 <RCC_Delay>
 8004190:	e01c      	b.n	80041cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004198:	f7ff f9c6 	bl	8003528 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419e:	e00f      	b.n	80041c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a0:	f7ff f9c2 	bl	8003528 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d908      	bls.n	80041c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e146      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000
 80041b8:	42420000 	.word	0x42420000
 80041bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c0:	4b92      	ldr	r3, [pc, #584]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e9      	bne.n	80041a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80a6 	beq.w	8004326 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041de:	4b8b      	ldr	r3, [pc, #556]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10d      	bne.n	8004206 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	4b88      	ldr	r3, [pc, #544]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	4a87      	ldr	r2, [pc, #540]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f4:	61d3      	str	r3, [r2, #28]
 80041f6:	4b85      	ldr	r3, [pc, #532]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004206:	4b82      	ldr	r3, [pc, #520]	; (8004410 <HAL_RCC_OscConfig+0x4c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d118      	bne.n	8004244 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004212:	4b7f      	ldr	r3, [pc, #508]	; (8004410 <HAL_RCC_OscConfig+0x4c8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7e      	ldr	r2, [pc, #504]	; (8004410 <HAL_RCC_OscConfig+0x4c8>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421e:	f7ff f983 	bl	8003528 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004226:	f7ff f97f 	bl	8003528 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b64      	cmp	r3, #100	; 0x64
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e103      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	4b75      	ldr	r3, [pc, #468]	; (8004410 <HAL_RCC_OscConfig+0x4c8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d106      	bne.n	800425a <HAL_RCC_OscConfig+0x312>
 800424c:	4b6f      	ldr	r3, [pc, #444]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	4a6e      	ldr	r2, [pc, #440]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	6213      	str	r3, [r2, #32]
 8004258:	e02d      	b.n	80042b6 <HAL_RCC_OscConfig+0x36e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x334>
 8004262:	4b6a      	ldr	r3, [pc, #424]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	4a69      	ldr	r2, [pc, #420]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	6213      	str	r3, [r2, #32]
 800426e:	4b67      	ldr	r3, [pc, #412]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	4a66      	ldr	r2, [pc, #408]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004274:	f023 0304 	bic.w	r3, r3, #4
 8004278:	6213      	str	r3, [r2, #32]
 800427a:	e01c      	b.n	80042b6 <HAL_RCC_OscConfig+0x36e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b05      	cmp	r3, #5
 8004282:	d10c      	bne.n	800429e <HAL_RCC_OscConfig+0x356>
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4a60      	ldr	r2, [pc, #384]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 800428a:	f043 0304 	orr.w	r3, r3, #4
 800428e:	6213      	str	r3, [r2, #32]
 8004290:	4b5e      	ldr	r3, [pc, #376]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4a5d      	ldr	r2, [pc, #372]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6213      	str	r3, [r2, #32]
 800429c:	e00b      	b.n	80042b6 <HAL_RCC_OscConfig+0x36e>
 800429e:	4b5b      	ldr	r3, [pc, #364]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4a5a      	ldr	r2, [pc, #360]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6213      	str	r3, [r2, #32]
 80042aa:	4b58      	ldr	r3, [pc, #352]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a57      	ldr	r2, [pc, #348]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	f023 0304 	bic.w	r3, r3, #4
 80042b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d015      	beq.n	80042ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042be:	f7ff f933 	bl	8003528 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f7ff f92f 	bl	8003528 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0b1      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	4b4b      	ldr	r3, [pc, #300]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ee      	beq.n	80042c6 <HAL_RCC_OscConfig+0x37e>
 80042e8:	e014      	b.n	8004314 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ea:	f7ff f91d 	bl	8003528 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7ff f919 	bl	8003528 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e09b      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004308:	4b40      	ldr	r3, [pc, #256]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ee      	bne.n	80042f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4b3c      	ldr	r3, [pc, #240]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	4a3b      	ldr	r2, [pc, #236]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8087 	beq.w	800443e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004330:	4b36      	ldr	r3, [pc, #216]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b08      	cmp	r3, #8
 800433a:	d061      	beq.n	8004400 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d146      	bne.n	80043d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004344:	4b33      	ldr	r3, [pc, #204]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7ff f8ed 	bl	8003528 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7ff f8e9 	bl	8003528 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e06d      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004364:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004378:	d108      	bne.n	800438c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800437a:	4b24      	ldr	r3, [pc, #144]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	4921      	ldr	r1, [pc, #132]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800438c:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a19      	ldr	r1, [r3, #32]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	430b      	orrs	r3, r1
 800439e:	491b      	ldr	r1, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7ff f8bd 	bl	8003528 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b2:	f7ff f8b9 	bl	8003528 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e03d      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x46a>
 80043d0:	e035      	b.n	800443e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7ff f8a6 	bl	8003528 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e0:	f7ff f8a2 	bl	8003528 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e026      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_RCC_OscConfig+0x4c4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x498>
 80043fe:	e01e      	b.n	800443e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d107      	bne.n	8004418 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e019      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
 800440c:	40021000 	.word	0x40021000
 8004410:	40007000 	.word	0x40007000
 8004414:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_OscConfig+0x500>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	429a      	cmp	r2, r3
 800442a:	d106      	bne.n	800443a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d001      	beq.n	800443e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000

0800444c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0d0      	b.n	8004602 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004460:	4b6a      	ldr	r3, [pc, #424]	; (800460c <HAL_RCC_ClockConfig+0x1c0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d910      	bls.n	8004490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b67      	ldr	r3, [pc, #412]	; (800460c <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0207 	bic.w	r2, r3, #7
 8004476:	4965      	ldr	r1, [pc, #404]	; (800460c <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_RCC_ClockConfig+0x1c0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b8      	b.n	8004602 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80044ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c0:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	494d      	ldr	r1, [pc, #308]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d040      	beq.n	800456c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d115      	bne.n	800452a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d107      	bne.n	800451a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450a:	4b41      	ldr	r3, [pc, #260]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e073      	b.n	8004602 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451a:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e06b      	b.n	8004602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452a:	4b39      	ldr	r3, [pc, #228]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4936      	ldr	r1, [pc, #216]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800453c:	f7fe fff4 	bl	8003528 <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	e00a      	b.n	800455a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004544:	f7fe fff0 	bl	8003528 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e053      	b.n	8004602 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f003 020c 	and.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	429a      	cmp	r2, r3
 800456a:	d1eb      	bne.n	8004544 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800456c:	4b27      	ldr	r3, [pc, #156]	; (800460c <HAL_RCC_ClockConfig+0x1c0>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d210      	bcs.n	800459c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <HAL_RCC_ClockConfig+0x1c0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 0207 	bic.w	r2, r3, #7
 8004582:	4922      	ldr	r1, [pc, #136]	; (800460c <HAL_RCC_ClockConfig+0x1c0>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e032      	b.n	8004602 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4916      	ldr	r1, [pc, #88]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045da:	f000 f821 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	490a      	ldr	r1, [pc, #40]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80045ec:	5ccb      	ldrb	r3, [r1, r3]
 80045ee:	fa22 f303 	lsr.w	r3, r2, r3
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1cc>)
 80045f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1d0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe ff52 	bl	80034a4 <HAL_InitTick>

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40022000 	.word	0x40022000
 8004610:	40021000 	.word	0x40021000
 8004614:	080071f8 	.word	0x080071f8
 8004618:	2000001c 	.word	0x2000001c
 800461c:	20000020 	.word	0x20000020

08004620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	b490      	push	{r4, r7}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004626:	4b29      	ldr	r3, [pc, #164]	; (80046cc <HAL_RCC_GetSysClockFreq+0xac>)
 8004628:	1d3c      	adds	r4, r7, #4
 800462a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800462c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004630:	f240 2301 	movw	r3, #513	; 0x201
 8004634:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	2300      	movs	r3, #0
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	2300      	movs	r3, #0
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800464a:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b04      	cmp	r3, #4
 8004658:	d002      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x40>
 800465a:	2b08      	cmp	r3, #8
 800465c:	d003      	beq.n	8004666 <HAL_RCC_GetSysClockFreq+0x46>
 800465e:	e02b      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004660:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004662:	623b      	str	r3, [r7, #32]
      break;
 8004664:	e02b      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	0c9b      	lsrs	r3, r3, #18
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	3328      	adds	r3, #40	; 0x28
 8004670:	443b      	add	r3, r7
 8004672:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004676:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d012      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004682:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	0c5b      	lsrs	r3, r3, #17
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	3328      	adds	r3, #40	; 0x28
 800468e:	443b      	add	r3, r7
 8004690:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004694:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4a0e      	ldr	r2, [pc, #56]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800469a:	fb03 f202 	mul.w	r2, r3, r2
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
 80046a6:	e004      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ac:	fb02 f303 	mul.w	r3, r2, r3
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	623b      	str	r3, [r7, #32]
      break;
 80046b6:	e002      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046ba:	623b      	str	r3, [r7, #32]
      break;
 80046bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046be:	6a3b      	ldr	r3, [r7, #32]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3728      	adds	r7, #40	; 0x28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc90      	pop	{r4, r7}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	080071e8 	.word	0x080071e8
 80046d0:	40021000 	.word	0x40021000
 80046d4:	007a1200 	.word	0x007a1200
 80046d8:	003d0900 	.word	0x003d0900

080046dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e0:	4b02      	ldr	r3, [pc, #8]	; (80046ec <HAL_RCC_GetHCLKFreq+0x10>)
 80046e2:	681b      	ldr	r3, [r3, #0]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr
 80046ec:	2000001c 	.word	0x2000001c

080046f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046f4:	f7ff fff2 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4903      	ldr	r1, [pc, #12]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000
 8004714:	08007208 	.word	0x08007208

08004718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800471c:	f7ff ffde 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	0adb      	lsrs	r3, r3, #11
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4903      	ldr	r1, [pc, #12]	; (800473c <HAL_RCC_GetPCLK2Freq+0x24>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000
 800473c:	08007208 	.word	0x08007208

08004740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <RCC_Delay+0x34>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <RCC_Delay+0x38>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	0a5b      	lsrs	r3, r3, #9
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800475c:	bf00      	nop
  }
  while (Delay --);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1e5a      	subs	r2, r3, #1
 8004762:	60fa      	str	r2, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f9      	bne.n	800475c <RCC_Delay+0x1c>
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	2000001c 	.word	0x2000001c
 8004778:	10624dd3 	.word	0x10624dd3

0800477c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e076      	b.n	800487c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	2b00      	cmp	r3, #0
 8004794:	d108      	bne.n	80047a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479e:	d009      	beq.n	80047b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	61da      	str	r2, [r3, #28]
 80047a6:	e005      	b.n	80047b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fe fbe8 	bl	8002fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	ea42 0103 	orr.w	r1, r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	0c1a      	lsrs	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f002 0204 	and.w	r2, r2, #4
 800485a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800486a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a0:	d112      	bne.n	80048c8 <HAL_SPI_Receive+0x44>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10e      	bne.n	80048c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2204      	movs	r2, #4
 80048ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048b2:	88fa      	ldrh	r2, [r7, #6]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f8f1 	bl	8004aa6 <HAL_SPI_TransmitReceive>
 80048c4:	4603      	mov	r3, r0
 80048c6:	e0ea      	b.n	8004a9e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_SPI_Receive+0x52>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e0e3      	b.n	8004a9e <HAL_SPI_Receive+0x21a>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048de:	f7fe fe23 	bl	8003528 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d002      	beq.n	80048f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
 80048f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048f4:	e0ca      	b.n	8004a8c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_SPI_Receive+0x7e>
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004906:	e0c1      	b.n	8004a8c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2204      	movs	r2, #4
 800490c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	88fa      	ldrh	r2, [r7, #6]
 8004926:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494e:	d10f      	bne.n	8004970 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800496e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d007      	beq.n	800498e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d162      	bne.n	8004a5c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004996:	e02e      	b.n	80049f6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d115      	bne.n	80049d2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f103 020c 	add.w	r2, r3, #12
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b2:	7812      	ldrb	r2, [r2, #0]
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049d0:	e011      	b.n	80049f6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d2:	f7fe fda9 	bl	8003528 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d803      	bhi.n	80049ea <HAL_SPI_Receive+0x166>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d102      	bne.n	80049f0 <HAL_SPI_Receive+0x16c>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d102      	bne.n	80049f6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049f4:	e04a      	b.n	8004a8c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1cb      	bne.n	8004998 <HAL_SPI_Receive+0x114>
 8004a00:	e031      	b.n	8004a66 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d113      	bne.n	8004a38 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	b292      	uxth	r2, r2
 8004a1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	1c9a      	adds	r2, r3, #2
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a36:	e011      	b.n	8004a5c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a38:	f7fe fd76 	bl	8003528 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d803      	bhi.n	8004a50 <HAL_SPI_Receive+0x1cc>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d102      	bne.n	8004a56 <HAL_SPI_Receive+0x1d2>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a5a:	e017      	b.n	8004a8c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1cd      	bne.n	8004a02 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 fa46 	bl	8004efc <SPI_EndRxTransaction>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
 8004a88:	e000      	b.n	8004a8c <HAL_SPI_Receive+0x208>
  }

error :
 8004a8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b08c      	sub	sp, #48	; 0x30
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x26>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e18a      	b.n	8004de2 <HAL_SPI_TransmitReceive+0x33c>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ad4:	f7fe fd28 	bl	8003528 <HAL_GetTick>
 8004ad8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004aea:	887b      	ldrh	r3, [r7, #2]
 8004aec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d00f      	beq.n	8004b16 <HAL_SPI_TransmitReceive+0x70>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004afc:	d107      	bne.n	8004b0e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <HAL_SPI_TransmitReceive+0x68>
 8004b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d003      	beq.n	8004b16 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b14:	e15b      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x82>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x82>
 8004b22:	887b      	ldrh	r3, [r7, #2]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d103      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b2e:	e14e      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d003      	beq.n	8004b44 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2205      	movs	r2, #5
 8004b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	887a      	ldrh	r2, [r7, #2]
 8004b54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	887a      	ldrh	r2, [r7, #2]
 8004b5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	887a      	ldrh	r2, [r7, #2]
 8004b66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	887a      	ldrh	r2, [r7, #2]
 8004b6c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d007      	beq.n	8004b98 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba0:	d178      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0x10a>
 8004baa:	8b7b      	ldrh	r3, [r7, #26]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d166      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	881a      	ldrh	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	1c9a      	adds	r2, r3, #2
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd4:	e053      	b.n	8004c7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d11b      	bne.n	8004c1c <HAL_SPI_TransmitReceive+0x176>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d016      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x176>
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d113      	bne.n	8004c1c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	881a      	ldrh	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	1c9a      	adds	r2, r3, #2
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d119      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x1b8>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d014      	beq.n	8004c5e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	1c9a      	adds	r2, r3, #2
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c5e:	f7fe fc63 	bl	8003528 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d807      	bhi.n	8004c7e <HAL_SPI_TransmitReceive+0x1d8>
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d003      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c7c:	e0a7      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1a6      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x130>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1a1      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x130>
 8004c92:	e07c      	b.n	8004d8e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x1fc>
 8004c9c:	8b7b      	ldrh	r3, [r7, #26]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d16b      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	7812      	ldrb	r2, [r2, #0]
 8004cae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc8:	e057      	b.n	8004d7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d11c      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x26c>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d017      	beq.n	8004d12 <HAL_SPI_TransmitReceive+0x26c>
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d114      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	7812      	ldrb	r2, [r2, #0]
 8004cf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d119      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x2ae>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d014      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d50:	2301      	movs	r3, #1
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d54:	f7fe fbe8 	bl	8003528 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d803      	bhi.n	8004d6c <HAL_SPI_TransmitReceive+0x2c6>
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d102      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x2cc>
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d78:	e029      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1a2      	bne.n	8004cca <HAL_SPI_TransmitReceive+0x224>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d19d      	bne.n	8004cca <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f904 	bl	8004fa0 <SPI_EndRxTxTransaction>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004daa:	e010      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10b      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	e000      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004dcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004dde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3730      	adds	r7, #48	; 0x30
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dfc:	f7fe fb94 	bl	8003528 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	4413      	add	r3, r2
 8004e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e0c:	f7fe fb8c 	bl	8003528 <HAL_GetTick>
 8004e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e12:	4b39      	ldr	r3, [pc, #228]	; (8004ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	015b      	lsls	r3, r3, #5
 8004e18:	0d1b      	lsrs	r3, r3, #20
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e22:	e054      	b.n	8004ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d050      	beq.n	8004ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e2c:	f7fe fb7c 	bl	8003528 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d902      	bls.n	8004e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d13d      	bne.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e5a:	d111      	bne.n	8004e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e64:	d004      	beq.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	d107      	bne.n	8004e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e88:	d10f      	bne.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e017      	b.n	8004eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	bf0c      	ite	eq
 8004ede:	2301      	moveq	r3, #1
 8004ee0:	2300      	movne	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d19b      	bne.n	8004e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	2000001c 	.word	0x2000001c

08004efc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f10:	d111      	bne.n	8004f36 <SPI_EndRxTransaction+0x3a>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1a:	d004      	beq.n	8004f26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f24:	d107      	bne.n	8004f36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f34:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f3e:	d117      	bne.n	8004f70 <SPI_EndRxTransaction+0x74>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f48:	d112      	bne.n	8004f70 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2200      	movs	r2, #0
 8004f52:	2101      	movs	r1, #1
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff ff49 	bl	8004dec <SPI_WaitFlagStateUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01a      	beq.n	8004f96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e013      	b.n	8004f98 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2200      	movs	r2, #0
 8004f78:	2180      	movs	r1, #128	; 0x80
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff ff36 	bl	8004dec <SPI_WaitFlagStateUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e000      	b.n	8004f98 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7ff ff18 	bl	8004dec <SPI_WaitFlagStateUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e000      	b.n	8004fd4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e041      	b.n	8005072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fe f976 	bl	80032f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f000 fa9e 	bl	800555c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d001      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e03a      	b.n	800510a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a18      	ldr	r2, [pc, #96]	; (8005114 <HAL_TIM_Base_Start_IT+0x98>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00e      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x58>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050be:	d009      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x58>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <HAL_TIM_Base_Start_IT+0x9c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x58>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a13      	ldr	r2, [pc, #76]	; (800511c <HAL_TIM_Base_Start_IT+0xa0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d111      	bne.n	80050f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b06      	cmp	r3, #6
 80050e4:	d010      	beq.n	8005108 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f6:	e007      	b.n	8005108 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800

08005120 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005142:	4013      	ands	r3, r2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10f      	bne.n	8005168 <HAL_TIM_Base_Stop_IT+0x48>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6a1a      	ldr	r2, [r3, #32]
 800514e:	f240 4344 	movw	r3, #1092	; 0x444
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d107      	bne.n	8005168 <HAL_TIM_Base_Stop_IT+0x48>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d122      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b02      	cmp	r3, #2
 800519e:	d11b      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0202 	mvn.w	r2, #2
 80051a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f9b1 	bl	8005526 <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f9a4 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f9b3 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d122      	bne.n	800522c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d11b      	bne.n	800522c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0204 	mvn.w	r2, #4
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f987 	bl	8005526 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f97a 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f989 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b08      	cmp	r3, #8
 8005238:	d122      	bne.n	8005280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b08      	cmp	r3, #8
 8005246:	d11b      	bne.n	8005280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0208 	mvn.w	r2, #8
 8005250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2204      	movs	r2, #4
 8005256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f95d 	bl	8005526 <HAL_TIM_IC_CaptureCallback>
 800526c:	e005      	b.n	800527a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f950 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f95f 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b10      	cmp	r3, #16
 800528c:	d122      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b10      	cmp	r3, #16
 800529a:	d11b      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0210 	mvn.w	r2, #16
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2208      	movs	r2, #8
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f933 	bl	8005526 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f926 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f935 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d10e      	bne.n	8005300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0201 	mvn.w	r2, #1
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fd fd50 	bl	8002da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b80      	cmp	r3, #128	; 0x80
 800530c:	d10e      	bne.n	800532c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b80      	cmp	r3, #128	; 0x80
 800531a:	d107      	bne.n	800532c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa77 	bl	800581a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d10e      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d107      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8f9 	bl	800554a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b20      	cmp	r3, #32
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b20      	cmp	r3, #32
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0220 	mvn.w	r2, #32
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa42 	bl	8005808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_TIM_ConfigClockSource+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e0b3      	b.n	800550c <HAL_TIM_ConfigClockSource+0x180>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053dc:	d03e      	beq.n	800545c <HAL_TIM_ConfigClockSource+0xd0>
 80053de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e2:	f200 8087 	bhi.w	80054f4 <HAL_TIM_ConfigClockSource+0x168>
 80053e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ea:	f000 8085 	beq.w	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	d87f      	bhi.n	80054f4 <HAL_TIM_ConfigClockSource+0x168>
 80053f4:	2b70      	cmp	r3, #112	; 0x70
 80053f6:	d01a      	beq.n	800542e <HAL_TIM_ConfigClockSource+0xa2>
 80053f8:	2b70      	cmp	r3, #112	; 0x70
 80053fa:	d87b      	bhi.n	80054f4 <HAL_TIM_ConfigClockSource+0x168>
 80053fc:	2b60      	cmp	r3, #96	; 0x60
 80053fe:	d050      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x116>
 8005400:	2b60      	cmp	r3, #96	; 0x60
 8005402:	d877      	bhi.n	80054f4 <HAL_TIM_ConfigClockSource+0x168>
 8005404:	2b50      	cmp	r3, #80	; 0x50
 8005406:	d03c      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0xf6>
 8005408:	2b50      	cmp	r3, #80	; 0x50
 800540a:	d873      	bhi.n	80054f4 <HAL_TIM_ConfigClockSource+0x168>
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d058      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x136>
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	d86f      	bhi.n	80054f4 <HAL_TIM_ConfigClockSource+0x168>
 8005414:	2b30      	cmp	r3, #48	; 0x30
 8005416:	d064      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x156>
 8005418:	2b30      	cmp	r3, #48	; 0x30
 800541a:	d86b      	bhi.n	80054f4 <HAL_TIM_ConfigClockSource+0x168>
 800541c:	2b20      	cmp	r3, #32
 800541e:	d060      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x156>
 8005420:	2b20      	cmp	r3, #32
 8005422:	d867      	bhi.n	80054f4 <HAL_TIM_ConfigClockSource+0x168>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d05c      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x156>
 8005428:	2b10      	cmp	r3, #16
 800542a:	d05a      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800542c:	e062      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6899      	ldr	r1, [r3, #8]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f000 f966 	bl	800570e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005450:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	609a      	str	r2, [r3, #8]
      break;
 800545a:	e04e      	b.n	80054fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	6899      	ldr	r1, [r3, #8]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f000 f94f 	bl	800570e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800547e:	609a      	str	r2, [r3, #8]
      break;
 8005480:	e03b      	b.n	80054fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6859      	ldr	r1, [r3, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	461a      	mov	r2, r3
 8005490:	f000 f8c6 	bl	8005620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2150      	movs	r1, #80	; 0x50
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f91d 	bl	80056da <TIM_ITRx_SetConfig>
      break;
 80054a0:	e02b      	b.n	80054fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6859      	ldr	r1, [r3, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f000 f8e4 	bl	800567c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2160      	movs	r1, #96	; 0x60
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f90d 	bl	80056da <TIM_ITRx_SetConfig>
      break;
 80054c0:	e01b      	b.n	80054fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6859      	ldr	r1, [r3, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	461a      	mov	r2, r3
 80054d0:	f000 f8a6 	bl	8005620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2140      	movs	r1, #64	; 0x40
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f8fd 	bl	80056da <TIM_ITRx_SetConfig>
      break;
 80054e0:	e00b      	b.n	80054fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f000 f8f4 	bl	80056da <TIM_ITRx_SetConfig>
        break;
 80054f2:	e002      	b.n	80054fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054f4:	bf00      	nop
 80054f6:	e000      	b.n	80054fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a29      	ldr	r2, [pc, #164]	; (8005614 <TIM_Base_SetConfig+0xb8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00b      	beq.n	800558c <TIM_Base_SetConfig+0x30>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557a:	d007      	beq.n	800558c <TIM_Base_SetConfig+0x30>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a26      	ldr	r2, [pc, #152]	; (8005618 <TIM_Base_SetConfig+0xbc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_Base_SetConfig+0x30>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a25      	ldr	r2, [pc, #148]	; (800561c <TIM_Base_SetConfig+0xc0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d108      	bne.n	800559e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1c      	ldr	r2, [pc, #112]	; (8005614 <TIM_Base_SetConfig+0xb8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00b      	beq.n	80055be <TIM_Base_SetConfig+0x62>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ac:	d007      	beq.n	80055be <TIM_Base_SetConfig+0x62>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a19      	ldr	r2, [pc, #100]	; (8005618 <TIM_Base_SetConfig+0xbc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_Base_SetConfig+0x62>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a18      	ldr	r2, [pc, #96]	; (800561c <TIM_Base_SetConfig+0xc0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d108      	bne.n	80055d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a07      	ldr	r2, [pc, #28]	; (8005614 <TIM_Base_SetConfig+0xb8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d103      	bne.n	8005604 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	615a      	str	r2, [r3, #20]
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800

08005620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0201 	bic.w	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800564a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 030a 	bic.w	r3, r3, #10
 800565c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f023 0210 	bic.w	r2, r3, #16
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	031b      	lsls	r3, r3, #12
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr

080056da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f043 0307 	orr.w	r3, r3, #7
 80056fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	609a      	str	r2, [r3, #8]
}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800570e:	b480      	push	{r7}
 8005710:	b087      	sub	sp, #28
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005728:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	021a      	lsls	r2, r3, #8
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	431a      	orrs	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4313      	orrs	r3, r2
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	609a      	str	r2, [r3, #8]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005760:	2302      	movs	r3, #2
 8005762:	e046      	b.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a16      	ldr	r2, [pc, #88]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00e      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b0:	d009      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a12      	ldr	r2, [pc, #72]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a10      	ldr	r2, [pc, #64]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d10c      	bne.n	80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800

08005808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e03f      	b.n	80058be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fd fd9e 	bl	8003394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2224      	movs	r2, #36	; 0x24
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800586e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f905 	bl	8005a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695a      	ldr	r2, [r3, #20]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005894:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b08a      	sub	sp, #40	; 0x28
 80058ca:	af02      	add	r7, sp, #8
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d17c      	bne.n	80059e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_UART_Transmit+0x2c>
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e075      	b.n	80059e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_UART_Transmit+0x3e>
 8005900:	2302      	movs	r3, #2
 8005902:	e06e      	b.n	80059e2 <HAL_UART_Transmit+0x11c>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2221      	movs	r2, #33	; 0x21
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800591a:	f7fd fe05 	bl	8003528 <HAL_GetTick>
 800591e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	88fa      	ldrh	r2, [r7, #6]
 800592a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005934:	d108      	bne.n	8005948 <HAL_UART_Transmit+0x82>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e003      	b.n	8005950 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005958:	e02a      	b.n	80059b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	2180      	movs	r1, #128	; 0x80
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f840 	bl	80059ea <UART_WaitOnFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e036      	b.n	80059e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005988:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	3302      	adds	r3, #2
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	e007      	b.n	80059a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	3301      	adds	r3, #1
 80059a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1cf      	bne.n	800595a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2200      	movs	r2, #0
 80059c2:	2140      	movs	r1, #64	; 0x40
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f810 	bl	80059ea <UART_WaitOnFlagUntilTimeout>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e006      	b.n	80059e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	e000      	b.n	80059e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059e0:	2302      	movs	r3, #2
  }
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	603b      	str	r3, [r7, #0]
 80059f6:	4613      	mov	r3, r2
 80059f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fa:	e02c      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d028      	beq.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a0a:	f7fd fd8d 	bl	8003528 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d21d      	bcs.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a28:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695a      	ldr	r2, [r3, #20]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e00f      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	bf0c      	ite	eq
 8005a66:	2301      	moveq	r3, #1
 8005a68:	2300      	movne	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d0c3      	beq.n	80059fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005aba:	f023 030c 	bic.w	r3, r3, #12
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a2c      	ldr	r2, [pc, #176]	; (8005b94 <UART_SetConfig+0x114>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ae8:	f7fe fe16 	bl	8004718 <HAL_RCC_GetPCLK2Freq>
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	e002      	b.n	8005af6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005af0:	f7fe fdfe 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8005af4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009a      	lsls	r2, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	4a22      	ldr	r2, [pc, #136]	; (8005b98 <UART_SetConfig+0x118>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	0119      	lsls	r1, r3, #4
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009a      	lsls	r2, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <UART_SetConfig+0x118>)
 8005b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2064      	movs	r0, #100	; 0x64
 8005b36:	fb00 f303 	mul.w	r3, r0, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	3332      	adds	r3, #50	; 0x32
 8005b40:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <UART_SetConfig+0x118>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b4c:	4419      	add	r1, r3
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009a      	lsls	r2, r3, #2
 8005b58:	441a      	add	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b64:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <UART_SetConfig+0x118>)
 8005b66:	fba3 0302 	umull	r0, r3, r3, r2
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	2064      	movs	r0, #100	; 0x64
 8005b6e:	fb00 f303 	mul.w	r3, r0, r3
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	3332      	adds	r3, #50	; 0x32
 8005b78:	4a07      	ldr	r2, [pc, #28]	; (8005b98 <UART_SetConfig+0x118>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	f003 020f 	and.w	r2, r3, #15
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	440a      	add	r2, r1
 8005b8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40013800 	.word	0x40013800
 8005b98:	51eb851f 	.word	0x51eb851f

08005b9c <__errno>:
 8005b9c:	4b01      	ldr	r3, [pc, #4]	; (8005ba4 <__errno+0x8>)
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000028 	.word	0x20000028

08005ba8 <__libc_init_array>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	2600      	movs	r6, #0
 8005bac:	4d0c      	ldr	r5, [pc, #48]	; (8005be0 <__libc_init_array+0x38>)
 8005bae:	4c0d      	ldr	r4, [pc, #52]	; (8005be4 <__libc_init_array+0x3c>)
 8005bb0:	1b64      	subs	r4, r4, r5
 8005bb2:	10a4      	asrs	r4, r4, #2
 8005bb4:	42a6      	cmp	r6, r4
 8005bb6:	d109      	bne.n	8005bcc <__libc_init_array+0x24>
 8005bb8:	f001 fa08 	bl	8006fcc <_init>
 8005bbc:	2600      	movs	r6, #0
 8005bbe:	4d0a      	ldr	r5, [pc, #40]	; (8005be8 <__libc_init_array+0x40>)
 8005bc0:	4c0a      	ldr	r4, [pc, #40]	; (8005bec <__libc_init_array+0x44>)
 8005bc2:	1b64      	subs	r4, r4, r5
 8005bc4:	10a4      	asrs	r4, r4, #2
 8005bc6:	42a6      	cmp	r6, r4
 8005bc8:	d105      	bne.n	8005bd6 <__libc_init_array+0x2e>
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd0:	4798      	blx	r3
 8005bd2:	3601      	adds	r6, #1
 8005bd4:	e7ee      	b.n	8005bb4 <__libc_init_array+0xc>
 8005bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bda:	4798      	blx	r3
 8005bdc:	3601      	adds	r6, #1
 8005bde:	e7f2      	b.n	8005bc6 <__libc_init_array+0x1e>
 8005be0:	080072a8 	.word	0x080072a8
 8005be4:	080072a8 	.word	0x080072a8
 8005be8:	080072a8 	.word	0x080072a8
 8005bec:	080072ac 	.word	0x080072ac

08005bf0 <memset>:
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	4402      	add	r2, r0
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d100      	bne.n	8005bfa <memset+0xa>
 8005bf8:	4770      	bx	lr
 8005bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005bfe:	e7f9      	b.n	8005bf4 <memset+0x4>

08005c00 <iprintf>:
 8005c00:	b40f      	push	{r0, r1, r2, r3}
 8005c02:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <iprintf+0x2c>)
 8005c04:	b513      	push	{r0, r1, r4, lr}
 8005c06:	681c      	ldr	r4, [r3, #0]
 8005c08:	b124      	cbz	r4, 8005c14 <iprintf+0x14>
 8005c0a:	69a3      	ldr	r3, [r4, #24]
 8005c0c:	b913      	cbnz	r3, 8005c14 <iprintf+0x14>
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f000 fa7a 	bl	8006108 <__sinit>
 8005c14:	ab05      	add	r3, sp, #20
 8005c16:	4620      	mov	r0, r4
 8005c18:	9a04      	ldr	r2, [sp, #16]
 8005c1a:	68a1      	ldr	r1, [r4, #8]
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	f000 fdd9 	bl	80067d4 <_vfiprintf_r>
 8005c22:	b002      	add	sp, #8
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c28:	b004      	add	sp, #16
 8005c2a:	4770      	bx	lr
 8005c2c:	20000028 	.word	0x20000028

08005c30 <_puts_r>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	460e      	mov	r6, r1
 8005c34:	4605      	mov	r5, r0
 8005c36:	b118      	cbz	r0, 8005c40 <_puts_r+0x10>
 8005c38:	6983      	ldr	r3, [r0, #24]
 8005c3a:	b90b      	cbnz	r3, 8005c40 <_puts_r+0x10>
 8005c3c:	f000 fa64 	bl	8006108 <__sinit>
 8005c40:	69ab      	ldr	r3, [r5, #24]
 8005c42:	68ac      	ldr	r4, [r5, #8]
 8005c44:	b913      	cbnz	r3, 8005c4c <_puts_r+0x1c>
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 fa5e 	bl	8006108 <__sinit>
 8005c4c:	4b2c      	ldr	r3, [pc, #176]	; (8005d00 <_puts_r+0xd0>)
 8005c4e:	429c      	cmp	r4, r3
 8005c50:	d120      	bne.n	8005c94 <_puts_r+0x64>
 8005c52:	686c      	ldr	r4, [r5, #4]
 8005c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c56:	07db      	lsls	r3, r3, #31
 8005c58:	d405      	bmi.n	8005c66 <_puts_r+0x36>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	0598      	lsls	r0, r3, #22
 8005c5e:	d402      	bmi.n	8005c66 <_puts_r+0x36>
 8005c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c62:	f000 faef 	bl	8006244 <__retarget_lock_acquire_recursive>
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	0719      	lsls	r1, r3, #28
 8005c6a:	d51d      	bpl.n	8005ca8 <_puts_r+0x78>
 8005c6c:	6923      	ldr	r3, [r4, #16]
 8005c6e:	b1db      	cbz	r3, 8005ca8 <_puts_r+0x78>
 8005c70:	3e01      	subs	r6, #1
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	60a3      	str	r3, [r4, #8]
 8005c7c:	bb39      	cbnz	r1, 8005cce <_puts_r+0x9e>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	da38      	bge.n	8005cf4 <_puts_r+0xc4>
 8005c82:	4622      	mov	r2, r4
 8005c84:	210a      	movs	r1, #10
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 f868 	bl	8005d5c <__swbuf_r>
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d011      	beq.n	8005cb4 <_puts_r+0x84>
 8005c90:	250a      	movs	r5, #10
 8005c92:	e011      	b.n	8005cb8 <_puts_r+0x88>
 8005c94:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <_puts_r+0xd4>)
 8005c96:	429c      	cmp	r4, r3
 8005c98:	d101      	bne.n	8005c9e <_puts_r+0x6e>
 8005c9a:	68ac      	ldr	r4, [r5, #8]
 8005c9c:	e7da      	b.n	8005c54 <_puts_r+0x24>
 8005c9e:	4b1a      	ldr	r3, [pc, #104]	; (8005d08 <_puts_r+0xd8>)
 8005ca0:	429c      	cmp	r4, r3
 8005ca2:	bf08      	it	eq
 8005ca4:	68ec      	ldreq	r4, [r5, #12]
 8005ca6:	e7d5      	b.n	8005c54 <_puts_r+0x24>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 f8a8 	bl	8005e00 <__swsetup_r>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d0dd      	beq.n	8005c70 <_puts_r+0x40>
 8005cb4:	f04f 35ff 	mov.w	r5, #4294967295
 8005cb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cba:	07da      	lsls	r2, r3, #31
 8005cbc:	d405      	bmi.n	8005cca <_puts_r+0x9a>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	059b      	lsls	r3, r3, #22
 8005cc2:	d402      	bmi.n	8005cca <_puts_r+0x9a>
 8005cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc6:	f000 fabe 	bl	8006246 <__retarget_lock_release_recursive>
 8005cca:	4628      	mov	r0, r5
 8005ccc:	bd70      	pop	{r4, r5, r6, pc}
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da04      	bge.n	8005cdc <_puts_r+0xac>
 8005cd2:	69a2      	ldr	r2, [r4, #24]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	dc06      	bgt.n	8005ce6 <_puts_r+0xb6>
 8005cd8:	290a      	cmp	r1, #10
 8005cda:	d004      	beq.n	8005ce6 <_puts_r+0xb6>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	6022      	str	r2, [r4, #0]
 8005ce2:	7019      	strb	r1, [r3, #0]
 8005ce4:	e7c5      	b.n	8005c72 <_puts_r+0x42>
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f000 f837 	bl	8005d5c <__swbuf_r>
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d1bf      	bne.n	8005c72 <_puts_r+0x42>
 8005cf2:	e7df      	b.n	8005cb4 <_puts_r+0x84>
 8005cf4:	250a      	movs	r5, #10
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	6022      	str	r2, [r4, #0]
 8005cfc:	701d      	strb	r5, [r3, #0]
 8005cfe:	e7db      	b.n	8005cb8 <_puts_r+0x88>
 8005d00:	08007234 	.word	0x08007234
 8005d04:	08007254 	.word	0x08007254
 8005d08:	08007214 	.word	0x08007214

08005d0c <puts>:
 8005d0c:	4b02      	ldr	r3, [pc, #8]	; (8005d18 <puts+0xc>)
 8005d0e:	4601      	mov	r1, r0
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	f7ff bf8d 	b.w	8005c30 <_puts_r>
 8005d16:	bf00      	nop
 8005d18:	20000028 	.word	0x20000028

08005d1c <siprintf>:
 8005d1c:	b40e      	push	{r1, r2, r3}
 8005d1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d22:	b500      	push	{lr}
 8005d24:	b09c      	sub	sp, #112	; 0x70
 8005d26:	ab1d      	add	r3, sp, #116	; 0x74
 8005d28:	9002      	str	r0, [sp, #8]
 8005d2a:	9006      	str	r0, [sp, #24]
 8005d2c:	9107      	str	r1, [sp, #28]
 8005d2e:	9104      	str	r1, [sp, #16]
 8005d30:	4808      	ldr	r0, [pc, #32]	; (8005d54 <siprintf+0x38>)
 8005d32:	4909      	ldr	r1, [pc, #36]	; (8005d58 <siprintf+0x3c>)
 8005d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d38:	9105      	str	r1, [sp, #20]
 8005d3a:	6800      	ldr	r0, [r0, #0]
 8005d3c:	a902      	add	r1, sp, #8
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	f000 fc20 	bl	8006584 <_svfiprintf_r>
 8005d44:	2200      	movs	r2, #0
 8005d46:	9b02      	ldr	r3, [sp, #8]
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	b01c      	add	sp, #112	; 0x70
 8005d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d50:	b003      	add	sp, #12
 8005d52:	4770      	bx	lr
 8005d54:	20000028 	.word	0x20000028
 8005d58:	ffff0208 	.word	0xffff0208

08005d5c <__swbuf_r>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	460e      	mov	r6, r1
 8005d60:	4614      	mov	r4, r2
 8005d62:	4605      	mov	r5, r0
 8005d64:	b118      	cbz	r0, 8005d6e <__swbuf_r+0x12>
 8005d66:	6983      	ldr	r3, [r0, #24]
 8005d68:	b90b      	cbnz	r3, 8005d6e <__swbuf_r+0x12>
 8005d6a:	f000 f9cd 	bl	8006108 <__sinit>
 8005d6e:	4b21      	ldr	r3, [pc, #132]	; (8005df4 <__swbuf_r+0x98>)
 8005d70:	429c      	cmp	r4, r3
 8005d72:	d12b      	bne.n	8005dcc <__swbuf_r+0x70>
 8005d74:	686c      	ldr	r4, [r5, #4]
 8005d76:	69a3      	ldr	r3, [r4, #24]
 8005d78:	60a3      	str	r3, [r4, #8]
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	071a      	lsls	r2, r3, #28
 8005d7e:	d52f      	bpl.n	8005de0 <__swbuf_r+0x84>
 8005d80:	6923      	ldr	r3, [r4, #16]
 8005d82:	b36b      	cbz	r3, 8005de0 <__swbuf_r+0x84>
 8005d84:	6923      	ldr	r3, [r4, #16]
 8005d86:	6820      	ldr	r0, [r4, #0]
 8005d88:	b2f6      	uxtb	r6, r6
 8005d8a:	1ac0      	subs	r0, r0, r3
 8005d8c:	6963      	ldr	r3, [r4, #20]
 8005d8e:	4637      	mov	r7, r6
 8005d90:	4283      	cmp	r3, r0
 8005d92:	dc04      	bgt.n	8005d9e <__swbuf_r+0x42>
 8005d94:	4621      	mov	r1, r4
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 f922 	bl	8005fe0 <_fflush_r>
 8005d9c:	bb30      	cbnz	r0, 8005dec <__swbuf_r+0x90>
 8005d9e:	68a3      	ldr	r3, [r4, #8]
 8005da0:	3001      	adds	r0, #1
 8005da2:	3b01      	subs	r3, #1
 8005da4:	60a3      	str	r3, [r4, #8]
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	6022      	str	r2, [r4, #0]
 8005dac:	701e      	strb	r6, [r3, #0]
 8005dae:	6963      	ldr	r3, [r4, #20]
 8005db0:	4283      	cmp	r3, r0
 8005db2:	d004      	beq.n	8005dbe <__swbuf_r+0x62>
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	07db      	lsls	r3, r3, #31
 8005db8:	d506      	bpl.n	8005dc8 <__swbuf_r+0x6c>
 8005dba:	2e0a      	cmp	r6, #10
 8005dbc:	d104      	bne.n	8005dc8 <__swbuf_r+0x6c>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 f90d 	bl	8005fe0 <_fflush_r>
 8005dc6:	b988      	cbnz	r0, 8005dec <__swbuf_r+0x90>
 8005dc8:	4638      	mov	r0, r7
 8005dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <__swbuf_r+0x9c>)
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	d101      	bne.n	8005dd6 <__swbuf_r+0x7a>
 8005dd2:	68ac      	ldr	r4, [r5, #8]
 8005dd4:	e7cf      	b.n	8005d76 <__swbuf_r+0x1a>
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <__swbuf_r+0xa0>)
 8005dd8:	429c      	cmp	r4, r3
 8005dda:	bf08      	it	eq
 8005ddc:	68ec      	ldreq	r4, [r5, #12]
 8005dde:	e7ca      	b.n	8005d76 <__swbuf_r+0x1a>
 8005de0:	4621      	mov	r1, r4
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f80c 	bl	8005e00 <__swsetup_r>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d0cb      	beq.n	8005d84 <__swbuf_r+0x28>
 8005dec:	f04f 37ff 	mov.w	r7, #4294967295
 8005df0:	e7ea      	b.n	8005dc8 <__swbuf_r+0x6c>
 8005df2:	bf00      	nop
 8005df4:	08007234 	.word	0x08007234
 8005df8:	08007254 	.word	0x08007254
 8005dfc:	08007214 	.word	0x08007214

08005e00 <__swsetup_r>:
 8005e00:	4b32      	ldr	r3, [pc, #200]	; (8005ecc <__swsetup_r+0xcc>)
 8005e02:	b570      	push	{r4, r5, r6, lr}
 8005e04:	681d      	ldr	r5, [r3, #0]
 8005e06:	4606      	mov	r6, r0
 8005e08:	460c      	mov	r4, r1
 8005e0a:	b125      	cbz	r5, 8005e16 <__swsetup_r+0x16>
 8005e0c:	69ab      	ldr	r3, [r5, #24]
 8005e0e:	b913      	cbnz	r3, 8005e16 <__swsetup_r+0x16>
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 f979 	bl	8006108 <__sinit>
 8005e16:	4b2e      	ldr	r3, [pc, #184]	; (8005ed0 <__swsetup_r+0xd0>)
 8005e18:	429c      	cmp	r4, r3
 8005e1a:	d10f      	bne.n	8005e3c <__swsetup_r+0x3c>
 8005e1c:	686c      	ldr	r4, [r5, #4]
 8005e1e:	89a3      	ldrh	r3, [r4, #12]
 8005e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e24:	0719      	lsls	r1, r3, #28
 8005e26:	d42c      	bmi.n	8005e82 <__swsetup_r+0x82>
 8005e28:	06dd      	lsls	r5, r3, #27
 8005e2a:	d411      	bmi.n	8005e50 <__swsetup_r+0x50>
 8005e2c:	2309      	movs	r3, #9
 8005e2e:	6033      	str	r3, [r6, #0]
 8005e30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	e03e      	b.n	8005eba <__swsetup_r+0xba>
 8005e3c:	4b25      	ldr	r3, [pc, #148]	; (8005ed4 <__swsetup_r+0xd4>)
 8005e3e:	429c      	cmp	r4, r3
 8005e40:	d101      	bne.n	8005e46 <__swsetup_r+0x46>
 8005e42:	68ac      	ldr	r4, [r5, #8]
 8005e44:	e7eb      	b.n	8005e1e <__swsetup_r+0x1e>
 8005e46:	4b24      	ldr	r3, [pc, #144]	; (8005ed8 <__swsetup_r+0xd8>)
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	bf08      	it	eq
 8005e4c:	68ec      	ldreq	r4, [r5, #12]
 8005e4e:	e7e6      	b.n	8005e1e <__swsetup_r+0x1e>
 8005e50:	0758      	lsls	r0, r3, #29
 8005e52:	d512      	bpl.n	8005e7a <__swsetup_r+0x7a>
 8005e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e56:	b141      	cbz	r1, 8005e6a <__swsetup_r+0x6a>
 8005e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e5c:	4299      	cmp	r1, r3
 8005e5e:	d002      	beq.n	8005e66 <__swsetup_r+0x66>
 8005e60:	4630      	mov	r0, r6
 8005e62:	f000 fa57 	bl	8006314 <_free_r>
 8005e66:	2300      	movs	r3, #0
 8005e68:	6363      	str	r3, [r4, #52]	; 0x34
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	2300      	movs	r3, #0
 8005e74:	6063      	str	r3, [r4, #4]
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	f043 0308 	orr.w	r3, r3, #8
 8005e80:	81a3      	strh	r3, [r4, #12]
 8005e82:	6923      	ldr	r3, [r4, #16]
 8005e84:	b94b      	cbnz	r3, 8005e9a <__swsetup_r+0x9a>
 8005e86:	89a3      	ldrh	r3, [r4, #12]
 8005e88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e90:	d003      	beq.n	8005e9a <__swsetup_r+0x9a>
 8005e92:	4621      	mov	r1, r4
 8005e94:	4630      	mov	r0, r6
 8005e96:	f000 f9fd 	bl	8006294 <__smakebuf_r>
 8005e9a:	89a0      	ldrh	r0, [r4, #12]
 8005e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ea0:	f010 0301 	ands.w	r3, r0, #1
 8005ea4:	d00a      	beq.n	8005ebc <__swsetup_r+0xbc>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60a3      	str	r3, [r4, #8]
 8005eaa:	6963      	ldr	r3, [r4, #20]
 8005eac:	425b      	negs	r3, r3
 8005eae:	61a3      	str	r3, [r4, #24]
 8005eb0:	6923      	ldr	r3, [r4, #16]
 8005eb2:	b943      	cbnz	r3, 8005ec6 <__swsetup_r+0xc6>
 8005eb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005eb8:	d1ba      	bne.n	8005e30 <__swsetup_r+0x30>
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	0781      	lsls	r1, r0, #30
 8005ebe:	bf58      	it	pl
 8005ec0:	6963      	ldrpl	r3, [r4, #20]
 8005ec2:	60a3      	str	r3, [r4, #8]
 8005ec4:	e7f4      	b.n	8005eb0 <__swsetup_r+0xb0>
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	e7f7      	b.n	8005eba <__swsetup_r+0xba>
 8005eca:	bf00      	nop
 8005ecc:	20000028 	.word	0x20000028
 8005ed0:	08007234 	.word	0x08007234
 8005ed4:	08007254 	.word	0x08007254
 8005ed8:	08007214 	.word	0x08007214

08005edc <__sflush_r>:
 8005edc:	898a      	ldrh	r2, [r1, #12]
 8005ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	0710      	lsls	r0, r2, #28
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	d457      	bmi.n	8005f98 <__sflush_r+0xbc>
 8005ee8:	684b      	ldr	r3, [r1, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	dc04      	bgt.n	8005ef8 <__sflush_r+0x1c>
 8005eee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	dc01      	bgt.n	8005ef8 <__sflush_r+0x1c>
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005efa:	2e00      	cmp	r6, #0
 8005efc:	d0fa      	beq.n	8005ef4 <__sflush_r+0x18>
 8005efe:	2300      	movs	r3, #0
 8005f00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f04:	682f      	ldr	r7, [r5, #0]
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	d032      	beq.n	8005f70 <__sflush_r+0x94>
 8005f0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	075a      	lsls	r2, r3, #29
 8005f10:	d505      	bpl.n	8005f1e <__sflush_r+0x42>
 8005f12:	6863      	ldr	r3, [r4, #4]
 8005f14:	1ac0      	subs	r0, r0, r3
 8005f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f18:	b10b      	cbz	r3, 8005f1e <__sflush_r+0x42>
 8005f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f1c:	1ac0      	subs	r0, r0, r3
 8005f1e:	2300      	movs	r3, #0
 8005f20:	4602      	mov	r2, r0
 8005f22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f24:	4628      	mov	r0, r5
 8005f26:	6a21      	ldr	r1, [r4, #32]
 8005f28:	47b0      	blx	r6
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	d106      	bne.n	8005f3e <__sflush_r+0x62>
 8005f30:	6829      	ldr	r1, [r5, #0]
 8005f32:	291d      	cmp	r1, #29
 8005f34:	d82c      	bhi.n	8005f90 <__sflush_r+0xb4>
 8005f36:	4a29      	ldr	r2, [pc, #164]	; (8005fdc <__sflush_r+0x100>)
 8005f38:	40ca      	lsrs	r2, r1
 8005f3a:	07d6      	lsls	r6, r2, #31
 8005f3c:	d528      	bpl.n	8005f90 <__sflush_r+0xb4>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	6062      	str	r2, [r4, #4]
 8005f42:	6922      	ldr	r2, [r4, #16]
 8005f44:	04d9      	lsls	r1, r3, #19
 8005f46:	6022      	str	r2, [r4, #0]
 8005f48:	d504      	bpl.n	8005f54 <__sflush_r+0x78>
 8005f4a:	1c42      	adds	r2, r0, #1
 8005f4c:	d101      	bne.n	8005f52 <__sflush_r+0x76>
 8005f4e:	682b      	ldr	r3, [r5, #0]
 8005f50:	b903      	cbnz	r3, 8005f54 <__sflush_r+0x78>
 8005f52:	6560      	str	r0, [r4, #84]	; 0x54
 8005f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f56:	602f      	str	r7, [r5, #0]
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	d0cb      	beq.n	8005ef4 <__sflush_r+0x18>
 8005f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f60:	4299      	cmp	r1, r3
 8005f62:	d002      	beq.n	8005f6a <__sflush_r+0x8e>
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 f9d5 	bl	8006314 <_free_r>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8005f6e:	e7c2      	b.n	8005ef6 <__sflush_r+0x1a>
 8005f70:	6a21      	ldr	r1, [r4, #32]
 8005f72:	2301      	movs	r3, #1
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b0      	blx	r6
 8005f78:	1c41      	adds	r1, r0, #1
 8005f7a:	d1c7      	bne.n	8005f0c <__sflush_r+0x30>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0c4      	beq.n	8005f0c <__sflush_r+0x30>
 8005f82:	2b1d      	cmp	r3, #29
 8005f84:	d001      	beq.n	8005f8a <__sflush_r+0xae>
 8005f86:	2b16      	cmp	r3, #22
 8005f88:	d101      	bne.n	8005f8e <__sflush_r+0xb2>
 8005f8a:	602f      	str	r7, [r5, #0]
 8005f8c:	e7b2      	b.n	8005ef4 <__sflush_r+0x18>
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f94:	81a3      	strh	r3, [r4, #12]
 8005f96:	e7ae      	b.n	8005ef6 <__sflush_r+0x1a>
 8005f98:	690f      	ldr	r7, [r1, #16]
 8005f9a:	2f00      	cmp	r7, #0
 8005f9c:	d0aa      	beq.n	8005ef4 <__sflush_r+0x18>
 8005f9e:	0793      	lsls	r3, r2, #30
 8005fa0:	bf18      	it	ne
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	680e      	ldr	r6, [r1, #0]
 8005fa6:	bf08      	it	eq
 8005fa8:	694b      	ldreq	r3, [r1, #20]
 8005faa:	1bf6      	subs	r6, r6, r7
 8005fac:	600f      	str	r7, [r1, #0]
 8005fae:	608b      	str	r3, [r1, #8]
 8005fb0:	2e00      	cmp	r6, #0
 8005fb2:	dd9f      	ble.n	8005ef4 <__sflush_r+0x18>
 8005fb4:	4633      	mov	r3, r6
 8005fb6:	463a      	mov	r2, r7
 8005fb8:	4628      	mov	r0, r5
 8005fba:	6a21      	ldr	r1, [r4, #32]
 8005fbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005fc0:	47e0      	blx	ip
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	dc06      	bgt.n	8005fd4 <__sflush_r+0xf8>
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	e790      	b.n	8005ef6 <__sflush_r+0x1a>
 8005fd4:	4407      	add	r7, r0
 8005fd6:	1a36      	subs	r6, r6, r0
 8005fd8:	e7ea      	b.n	8005fb0 <__sflush_r+0xd4>
 8005fda:	bf00      	nop
 8005fdc:	20400001 	.word	0x20400001

08005fe0 <_fflush_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	690b      	ldr	r3, [r1, #16]
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	b913      	cbnz	r3, 8005ff0 <_fflush_r+0x10>
 8005fea:	2500      	movs	r5, #0
 8005fec:	4628      	mov	r0, r5
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	b118      	cbz	r0, 8005ffa <_fflush_r+0x1a>
 8005ff2:	6983      	ldr	r3, [r0, #24]
 8005ff4:	b90b      	cbnz	r3, 8005ffa <_fflush_r+0x1a>
 8005ff6:	f000 f887 	bl	8006108 <__sinit>
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <_fflush_r+0x6c>)
 8005ffc:	429c      	cmp	r4, r3
 8005ffe:	d11b      	bne.n	8006038 <_fflush_r+0x58>
 8006000:	686c      	ldr	r4, [r5, #4]
 8006002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0ef      	beq.n	8005fea <_fflush_r+0xa>
 800600a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800600c:	07d0      	lsls	r0, r2, #31
 800600e:	d404      	bmi.n	800601a <_fflush_r+0x3a>
 8006010:	0599      	lsls	r1, r3, #22
 8006012:	d402      	bmi.n	800601a <_fflush_r+0x3a>
 8006014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006016:	f000 f915 	bl	8006244 <__retarget_lock_acquire_recursive>
 800601a:	4628      	mov	r0, r5
 800601c:	4621      	mov	r1, r4
 800601e:	f7ff ff5d 	bl	8005edc <__sflush_r>
 8006022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006024:	4605      	mov	r5, r0
 8006026:	07da      	lsls	r2, r3, #31
 8006028:	d4e0      	bmi.n	8005fec <_fflush_r+0xc>
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	059b      	lsls	r3, r3, #22
 800602e:	d4dd      	bmi.n	8005fec <_fflush_r+0xc>
 8006030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006032:	f000 f908 	bl	8006246 <__retarget_lock_release_recursive>
 8006036:	e7d9      	b.n	8005fec <_fflush_r+0xc>
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <_fflush_r+0x70>)
 800603a:	429c      	cmp	r4, r3
 800603c:	d101      	bne.n	8006042 <_fflush_r+0x62>
 800603e:	68ac      	ldr	r4, [r5, #8]
 8006040:	e7df      	b.n	8006002 <_fflush_r+0x22>
 8006042:	4b04      	ldr	r3, [pc, #16]	; (8006054 <_fflush_r+0x74>)
 8006044:	429c      	cmp	r4, r3
 8006046:	bf08      	it	eq
 8006048:	68ec      	ldreq	r4, [r5, #12]
 800604a:	e7da      	b.n	8006002 <_fflush_r+0x22>
 800604c:	08007234 	.word	0x08007234
 8006050:	08007254 	.word	0x08007254
 8006054:	08007214 	.word	0x08007214

08006058 <std>:
 8006058:	2300      	movs	r3, #0
 800605a:	b510      	push	{r4, lr}
 800605c:	4604      	mov	r4, r0
 800605e:	e9c0 3300 	strd	r3, r3, [r0]
 8006062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006066:	6083      	str	r3, [r0, #8]
 8006068:	8181      	strh	r1, [r0, #12]
 800606a:	6643      	str	r3, [r0, #100]	; 0x64
 800606c:	81c2      	strh	r2, [r0, #14]
 800606e:	6183      	str	r3, [r0, #24]
 8006070:	4619      	mov	r1, r3
 8006072:	2208      	movs	r2, #8
 8006074:	305c      	adds	r0, #92	; 0x5c
 8006076:	f7ff fdbb 	bl	8005bf0 <memset>
 800607a:	4b05      	ldr	r3, [pc, #20]	; (8006090 <std+0x38>)
 800607c:	6224      	str	r4, [r4, #32]
 800607e:	6263      	str	r3, [r4, #36]	; 0x24
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <std+0x3c>)
 8006082:	62a3      	str	r3, [r4, #40]	; 0x28
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <std+0x40>)
 8006086:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006088:	4b04      	ldr	r3, [pc, #16]	; (800609c <std+0x44>)
 800608a:	6323      	str	r3, [r4, #48]	; 0x30
 800608c:	bd10      	pop	{r4, pc}
 800608e:	bf00      	nop
 8006090:	08006d81 	.word	0x08006d81
 8006094:	08006da3 	.word	0x08006da3
 8006098:	08006ddb 	.word	0x08006ddb
 800609c:	08006dff 	.word	0x08006dff

080060a0 <_cleanup_r>:
 80060a0:	4901      	ldr	r1, [pc, #4]	; (80060a8 <_cleanup_r+0x8>)
 80060a2:	f000 b8af 	b.w	8006204 <_fwalk_reent>
 80060a6:	bf00      	nop
 80060a8:	08005fe1 	.word	0x08005fe1

080060ac <__sfmoreglue>:
 80060ac:	2268      	movs	r2, #104	; 0x68
 80060ae:	b570      	push	{r4, r5, r6, lr}
 80060b0:	1e4d      	subs	r5, r1, #1
 80060b2:	4355      	muls	r5, r2
 80060b4:	460e      	mov	r6, r1
 80060b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060ba:	f000 f993 	bl	80063e4 <_malloc_r>
 80060be:	4604      	mov	r4, r0
 80060c0:	b140      	cbz	r0, 80060d4 <__sfmoreglue+0x28>
 80060c2:	2100      	movs	r1, #0
 80060c4:	e9c0 1600 	strd	r1, r6, [r0]
 80060c8:	300c      	adds	r0, #12
 80060ca:	60a0      	str	r0, [r4, #8]
 80060cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060d0:	f7ff fd8e 	bl	8005bf0 <memset>
 80060d4:	4620      	mov	r0, r4
 80060d6:	bd70      	pop	{r4, r5, r6, pc}

080060d8 <__sfp_lock_acquire>:
 80060d8:	4801      	ldr	r0, [pc, #4]	; (80060e0 <__sfp_lock_acquire+0x8>)
 80060da:	f000 b8b3 	b.w	8006244 <__retarget_lock_acquire_recursive>
 80060de:	bf00      	nop
 80060e0:	20000281 	.word	0x20000281

080060e4 <__sfp_lock_release>:
 80060e4:	4801      	ldr	r0, [pc, #4]	; (80060ec <__sfp_lock_release+0x8>)
 80060e6:	f000 b8ae 	b.w	8006246 <__retarget_lock_release_recursive>
 80060ea:	bf00      	nop
 80060ec:	20000281 	.word	0x20000281

080060f0 <__sinit_lock_acquire>:
 80060f0:	4801      	ldr	r0, [pc, #4]	; (80060f8 <__sinit_lock_acquire+0x8>)
 80060f2:	f000 b8a7 	b.w	8006244 <__retarget_lock_acquire_recursive>
 80060f6:	bf00      	nop
 80060f8:	20000282 	.word	0x20000282

080060fc <__sinit_lock_release>:
 80060fc:	4801      	ldr	r0, [pc, #4]	; (8006104 <__sinit_lock_release+0x8>)
 80060fe:	f000 b8a2 	b.w	8006246 <__retarget_lock_release_recursive>
 8006102:	bf00      	nop
 8006104:	20000282 	.word	0x20000282

08006108 <__sinit>:
 8006108:	b510      	push	{r4, lr}
 800610a:	4604      	mov	r4, r0
 800610c:	f7ff fff0 	bl	80060f0 <__sinit_lock_acquire>
 8006110:	69a3      	ldr	r3, [r4, #24]
 8006112:	b11b      	cbz	r3, 800611c <__sinit+0x14>
 8006114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006118:	f7ff bff0 	b.w	80060fc <__sinit_lock_release>
 800611c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006120:	6523      	str	r3, [r4, #80]	; 0x50
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <__sinit+0x68>)
 8006124:	4a13      	ldr	r2, [pc, #76]	; (8006174 <__sinit+0x6c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	62a2      	str	r2, [r4, #40]	; 0x28
 800612a:	42a3      	cmp	r3, r4
 800612c:	bf08      	it	eq
 800612e:	2301      	moveq	r3, #1
 8006130:	4620      	mov	r0, r4
 8006132:	bf08      	it	eq
 8006134:	61a3      	streq	r3, [r4, #24]
 8006136:	f000 f81f 	bl	8006178 <__sfp>
 800613a:	6060      	str	r0, [r4, #4]
 800613c:	4620      	mov	r0, r4
 800613e:	f000 f81b 	bl	8006178 <__sfp>
 8006142:	60a0      	str	r0, [r4, #8]
 8006144:	4620      	mov	r0, r4
 8006146:	f000 f817 	bl	8006178 <__sfp>
 800614a:	2200      	movs	r2, #0
 800614c:	2104      	movs	r1, #4
 800614e:	60e0      	str	r0, [r4, #12]
 8006150:	6860      	ldr	r0, [r4, #4]
 8006152:	f7ff ff81 	bl	8006058 <std>
 8006156:	2201      	movs	r2, #1
 8006158:	2109      	movs	r1, #9
 800615a:	68a0      	ldr	r0, [r4, #8]
 800615c:	f7ff ff7c 	bl	8006058 <std>
 8006160:	2202      	movs	r2, #2
 8006162:	2112      	movs	r1, #18
 8006164:	68e0      	ldr	r0, [r4, #12]
 8006166:	f7ff ff77 	bl	8006058 <std>
 800616a:	2301      	movs	r3, #1
 800616c:	61a3      	str	r3, [r4, #24]
 800616e:	e7d1      	b.n	8006114 <__sinit+0xc>
 8006170:	08007210 	.word	0x08007210
 8006174:	080060a1 	.word	0x080060a1

08006178 <__sfp>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	4607      	mov	r7, r0
 800617c:	f7ff ffac 	bl	80060d8 <__sfp_lock_acquire>
 8006180:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <__sfp+0x84>)
 8006182:	681e      	ldr	r6, [r3, #0]
 8006184:	69b3      	ldr	r3, [r6, #24]
 8006186:	b913      	cbnz	r3, 800618e <__sfp+0x16>
 8006188:	4630      	mov	r0, r6
 800618a:	f7ff ffbd 	bl	8006108 <__sinit>
 800618e:	3648      	adds	r6, #72	; 0x48
 8006190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006194:	3b01      	subs	r3, #1
 8006196:	d503      	bpl.n	80061a0 <__sfp+0x28>
 8006198:	6833      	ldr	r3, [r6, #0]
 800619a:	b30b      	cbz	r3, 80061e0 <__sfp+0x68>
 800619c:	6836      	ldr	r6, [r6, #0]
 800619e:	e7f7      	b.n	8006190 <__sfp+0x18>
 80061a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061a4:	b9d5      	cbnz	r5, 80061dc <__sfp+0x64>
 80061a6:	4b16      	ldr	r3, [pc, #88]	; (8006200 <__sfp+0x88>)
 80061a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061ac:	60e3      	str	r3, [r4, #12]
 80061ae:	6665      	str	r5, [r4, #100]	; 0x64
 80061b0:	f000 f847 	bl	8006242 <__retarget_lock_init_recursive>
 80061b4:	f7ff ff96 	bl	80060e4 <__sfp_lock_release>
 80061b8:	2208      	movs	r2, #8
 80061ba:	4629      	mov	r1, r5
 80061bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061c4:	6025      	str	r5, [r4, #0]
 80061c6:	61a5      	str	r5, [r4, #24]
 80061c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061cc:	f7ff fd10 	bl	8005bf0 <memset>
 80061d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061d8:	4620      	mov	r0, r4
 80061da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061dc:	3468      	adds	r4, #104	; 0x68
 80061de:	e7d9      	b.n	8006194 <__sfp+0x1c>
 80061e0:	2104      	movs	r1, #4
 80061e2:	4638      	mov	r0, r7
 80061e4:	f7ff ff62 	bl	80060ac <__sfmoreglue>
 80061e8:	4604      	mov	r4, r0
 80061ea:	6030      	str	r0, [r6, #0]
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d1d5      	bne.n	800619c <__sfp+0x24>
 80061f0:	f7ff ff78 	bl	80060e4 <__sfp_lock_release>
 80061f4:	230c      	movs	r3, #12
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	e7ee      	b.n	80061d8 <__sfp+0x60>
 80061fa:	bf00      	nop
 80061fc:	08007210 	.word	0x08007210
 8006200:	ffff0001 	.word	0xffff0001

08006204 <_fwalk_reent>:
 8006204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006208:	4606      	mov	r6, r0
 800620a:	4688      	mov	r8, r1
 800620c:	2700      	movs	r7, #0
 800620e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006212:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006216:	f1b9 0901 	subs.w	r9, r9, #1
 800621a:	d505      	bpl.n	8006228 <_fwalk_reent+0x24>
 800621c:	6824      	ldr	r4, [r4, #0]
 800621e:	2c00      	cmp	r4, #0
 8006220:	d1f7      	bne.n	8006212 <_fwalk_reent+0xe>
 8006222:	4638      	mov	r0, r7
 8006224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006228:	89ab      	ldrh	r3, [r5, #12]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d907      	bls.n	800623e <_fwalk_reent+0x3a>
 800622e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006232:	3301      	adds	r3, #1
 8006234:	d003      	beq.n	800623e <_fwalk_reent+0x3a>
 8006236:	4629      	mov	r1, r5
 8006238:	4630      	mov	r0, r6
 800623a:	47c0      	blx	r8
 800623c:	4307      	orrs	r7, r0
 800623e:	3568      	adds	r5, #104	; 0x68
 8006240:	e7e9      	b.n	8006216 <_fwalk_reent+0x12>

08006242 <__retarget_lock_init_recursive>:
 8006242:	4770      	bx	lr

08006244 <__retarget_lock_acquire_recursive>:
 8006244:	4770      	bx	lr

08006246 <__retarget_lock_release_recursive>:
 8006246:	4770      	bx	lr

08006248 <__swhatbuf_r>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	460e      	mov	r6, r1
 800624c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006250:	4614      	mov	r4, r2
 8006252:	2900      	cmp	r1, #0
 8006254:	461d      	mov	r5, r3
 8006256:	b096      	sub	sp, #88	; 0x58
 8006258:	da08      	bge.n	800626c <__swhatbuf_r+0x24>
 800625a:	2200      	movs	r2, #0
 800625c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006260:	602a      	str	r2, [r5, #0]
 8006262:	061a      	lsls	r2, r3, #24
 8006264:	d410      	bmi.n	8006288 <__swhatbuf_r+0x40>
 8006266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800626a:	e00e      	b.n	800628a <__swhatbuf_r+0x42>
 800626c:	466a      	mov	r2, sp
 800626e:	f000 fded 	bl	8006e4c <_fstat_r>
 8006272:	2800      	cmp	r0, #0
 8006274:	dbf1      	blt.n	800625a <__swhatbuf_r+0x12>
 8006276:	9a01      	ldr	r2, [sp, #4]
 8006278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800627c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006280:	425a      	negs	r2, r3
 8006282:	415a      	adcs	r2, r3
 8006284:	602a      	str	r2, [r5, #0]
 8006286:	e7ee      	b.n	8006266 <__swhatbuf_r+0x1e>
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	2000      	movs	r0, #0
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	b016      	add	sp, #88	; 0x58
 8006290:	bd70      	pop	{r4, r5, r6, pc}
	...

08006294 <__smakebuf_r>:
 8006294:	898b      	ldrh	r3, [r1, #12]
 8006296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006298:	079d      	lsls	r5, r3, #30
 800629a:	4606      	mov	r6, r0
 800629c:	460c      	mov	r4, r1
 800629e:	d507      	bpl.n	80062b0 <__smakebuf_r+0x1c>
 80062a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	6123      	str	r3, [r4, #16]
 80062a8:	2301      	movs	r3, #1
 80062aa:	6163      	str	r3, [r4, #20]
 80062ac:	b002      	add	sp, #8
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	466a      	mov	r2, sp
 80062b2:	ab01      	add	r3, sp, #4
 80062b4:	f7ff ffc8 	bl	8006248 <__swhatbuf_r>
 80062b8:	9900      	ldr	r1, [sp, #0]
 80062ba:	4605      	mov	r5, r0
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 f891 	bl	80063e4 <_malloc_r>
 80062c2:	b948      	cbnz	r0, 80062d8 <__smakebuf_r+0x44>
 80062c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c8:	059a      	lsls	r2, r3, #22
 80062ca:	d4ef      	bmi.n	80062ac <__smakebuf_r+0x18>
 80062cc:	f023 0303 	bic.w	r3, r3, #3
 80062d0:	f043 0302 	orr.w	r3, r3, #2
 80062d4:	81a3      	strh	r3, [r4, #12]
 80062d6:	e7e3      	b.n	80062a0 <__smakebuf_r+0xc>
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <__smakebuf_r+0x7c>)
 80062da:	62b3      	str	r3, [r6, #40]	; 0x28
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	6020      	str	r0, [r4, #0]
 80062e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	9b00      	ldr	r3, [sp, #0]
 80062e8:	6120      	str	r0, [r4, #16]
 80062ea:	6163      	str	r3, [r4, #20]
 80062ec:	9b01      	ldr	r3, [sp, #4]
 80062ee:	b15b      	cbz	r3, 8006308 <__smakebuf_r+0x74>
 80062f0:	4630      	mov	r0, r6
 80062f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062f6:	f000 fdbb 	bl	8006e70 <_isatty_r>
 80062fa:	b128      	cbz	r0, 8006308 <__smakebuf_r+0x74>
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	89a0      	ldrh	r0, [r4, #12]
 800630a:	4305      	orrs	r5, r0
 800630c:	81a5      	strh	r5, [r4, #12]
 800630e:	e7cd      	b.n	80062ac <__smakebuf_r+0x18>
 8006310:	080060a1 	.word	0x080060a1

08006314 <_free_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4605      	mov	r5, r0
 8006318:	2900      	cmp	r1, #0
 800631a:	d040      	beq.n	800639e <_free_r+0x8a>
 800631c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006320:	1f0c      	subs	r4, r1, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	bfb8      	it	lt
 8006326:	18e4      	addlt	r4, r4, r3
 8006328:	f000 fdfa 	bl	8006f20 <__malloc_lock>
 800632c:	4a1c      	ldr	r2, [pc, #112]	; (80063a0 <_free_r+0x8c>)
 800632e:	6813      	ldr	r3, [r2, #0]
 8006330:	b933      	cbnz	r3, 8006340 <_free_r+0x2c>
 8006332:	6063      	str	r3, [r4, #4]
 8006334:	6014      	str	r4, [r2, #0]
 8006336:	4628      	mov	r0, r5
 8006338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800633c:	f000 bdf6 	b.w	8006f2c <__malloc_unlock>
 8006340:	42a3      	cmp	r3, r4
 8006342:	d908      	bls.n	8006356 <_free_r+0x42>
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	1821      	adds	r1, r4, r0
 8006348:	428b      	cmp	r3, r1
 800634a:	bf01      	itttt	eq
 800634c:	6819      	ldreq	r1, [r3, #0]
 800634e:	685b      	ldreq	r3, [r3, #4]
 8006350:	1809      	addeq	r1, r1, r0
 8006352:	6021      	streq	r1, [r4, #0]
 8006354:	e7ed      	b.n	8006332 <_free_r+0x1e>
 8006356:	461a      	mov	r2, r3
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	b10b      	cbz	r3, 8006360 <_free_r+0x4c>
 800635c:	42a3      	cmp	r3, r4
 800635e:	d9fa      	bls.n	8006356 <_free_r+0x42>
 8006360:	6811      	ldr	r1, [r2, #0]
 8006362:	1850      	adds	r0, r2, r1
 8006364:	42a0      	cmp	r0, r4
 8006366:	d10b      	bne.n	8006380 <_free_r+0x6c>
 8006368:	6820      	ldr	r0, [r4, #0]
 800636a:	4401      	add	r1, r0
 800636c:	1850      	adds	r0, r2, r1
 800636e:	4283      	cmp	r3, r0
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	d1e0      	bne.n	8006336 <_free_r+0x22>
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	4401      	add	r1, r0
 800637a:	6011      	str	r1, [r2, #0]
 800637c:	6053      	str	r3, [r2, #4]
 800637e:	e7da      	b.n	8006336 <_free_r+0x22>
 8006380:	d902      	bls.n	8006388 <_free_r+0x74>
 8006382:	230c      	movs	r3, #12
 8006384:	602b      	str	r3, [r5, #0]
 8006386:	e7d6      	b.n	8006336 <_free_r+0x22>
 8006388:	6820      	ldr	r0, [r4, #0]
 800638a:	1821      	adds	r1, r4, r0
 800638c:	428b      	cmp	r3, r1
 800638e:	bf01      	itttt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	1809      	addeq	r1, r1, r0
 8006396:	6021      	streq	r1, [r4, #0]
 8006398:	6063      	str	r3, [r4, #4]
 800639a:	6054      	str	r4, [r2, #4]
 800639c:	e7cb      	b.n	8006336 <_free_r+0x22>
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20000284 	.word	0x20000284

080063a4 <sbrk_aligned>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	4e0e      	ldr	r6, [pc, #56]	; (80063e0 <sbrk_aligned+0x3c>)
 80063a8:	460c      	mov	r4, r1
 80063aa:	6831      	ldr	r1, [r6, #0]
 80063ac:	4605      	mov	r5, r0
 80063ae:	b911      	cbnz	r1, 80063b6 <sbrk_aligned+0x12>
 80063b0:	f000 fcd6 	bl	8006d60 <_sbrk_r>
 80063b4:	6030      	str	r0, [r6, #0]
 80063b6:	4621      	mov	r1, r4
 80063b8:	4628      	mov	r0, r5
 80063ba:	f000 fcd1 	bl	8006d60 <_sbrk_r>
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	d00a      	beq.n	80063d8 <sbrk_aligned+0x34>
 80063c2:	1cc4      	adds	r4, r0, #3
 80063c4:	f024 0403 	bic.w	r4, r4, #3
 80063c8:	42a0      	cmp	r0, r4
 80063ca:	d007      	beq.n	80063dc <sbrk_aligned+0x38>
 80063cc:	1a21      	subs	r1, r4, r0
 80063ce:	4628      	mov	r0, r5
 80063d0:	f000 fcc6 	bl	8006d60 <_sbrk_r>
 80063d4:	3001      	adds	r0, #1
 80063d6:	d101      	bne.n	80063dc <sbrk_aligned+0x38>
 80063d8:	f04f 34ff 	mov.w	r4, #4294967295
 80063dc:	4620      	mov	r0, r4
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	20000288 	.word	0x20000288

080063e4 <_malloc_r>:
 80063e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e8:	1ccd      	adds	r5, r1, #3
 80063ea:	f025 0503 	bic.w	r5, r5, #3
 80063ee:	3508      	adds	r5, #8
 80063f0:	2d0c      	cmp	r5, #12
 80063f2:	bf38      	it	cc
 80063f4:	250c      	movcc	r5, #12
 80063f6:	2d00      	cmp	r5, #0
 80063f8:	4607      	mov	r7, r0
 80063fa:	db01      	blt.n	8006400 <_malloc_r+0x1c>
 80063fc:	42a9      	cmp	r1, r5
 80063fe:	d905      	bls.n	800640c <_malloc_r+0x28>
 8006400:	230c      	movs	r3, #12
 8006402:	2600      	movs	r6, #0
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	4630      	mov	r0, r6
 8006408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800640c:	4e2e      	ldr	r6, [pc, #184]	; (80064c8 <_malloc_r+0xe4>)
 800640e:	f000 fd87 	bl	8006f20 <__malloc_lock>
 8006412:	6833      	ldr	r3, [r6, #0]
 8006414:	461c      	mov	r4, r3
 8006416:	bb34      	cbnz	r4, 8006466 <_malloc_r+0x82>
 8006418:	4629      	mov	r1, r5
 800641a:	4638      	mov	r0, r7
 800641c:	f7ff ffc2 	bl	80063a4 <sbrk_aligned>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	4604      	mov	r4, r0
 8006424:	d14d      	bne.n	80064c2 <_malloc_r+0xde>
 8006426:	6834      	ldr	r4, [r6, #0]
 8006428:	4626      	mov	r6, r4
 800642a:	2e00      	cmp	r6, #0
 800642c:	d140      	bne.n	80064b0 <_malloc_r+0xcc>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	4631      	mov	r1, r6
 8006432:	4638      	mov	r0, r7
 8006434:	eb04 0803 	add.w	r8, r4, r3
 8006438:	f000 fc92 	bl	8006d60 <_sbrk_r>
 800643c:	4580      	cmp	r8, r0
 800643e:	d13a      	bne.n	80064b6 <_malloc_r+0xd2>
 8006440:	6821      	ldr	r1, [r4, #0]
 8006442:	3503      	adds	r5, #3
 8006444:	1a6d      	subs	r5, r5, r1
 8006446:	f025 0503 	bic.w	r5, r5, #3
 800644a:	3508      	adds	r5, #8
 800644c:	2d0c      	cmp	r5, #12
 800644e:	bf38      	it	cc
 8006450:	250c      	movcc	r5, #12
 8006452:	4638      	mov	r0, r7
 8006454:	4629      	mov	r1, r5
 8006456:	f7ff ffa5 	bl	80063a4 <sbrk_aligned>
 800645a:	3001      	adds	r0, #1
 800645c:	d02b      	beq.n	80064b6 <_malloc_r+0xd2>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	442b      	add	r3, r5
 8006462:	6023      	str	r3, [r4, #0]
 8006464:	e00e      	b.n	8006484 <_malloc_r+0xa0>
 8006466:	6822      	ldr	r2, [r4, #0]
 8006468:	1b52      	subs	r2, r2, r5
 800646a:	d41e      	bmi.n	80064aa <_malloc_r+0xc6>
 800646c:	2a0b      	cmp	r2, #11
 800646e:	d916      	bls.n	800649e <_malloc_r+0xba>
 8006470:	1961      	adds	r1, r4, r5
 8006472:	42a3      	cmp	r3, r4
 8006474:	6025      	str	r5, [r4, #0]
 8006476:	bf18      	it	ne
 8006478:	6059      	strne	r1, [r3, #4]
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	bf08      	it	eq
 800647e:	6031      	streq	r1, [r6, #0]
 8006480:	5162      	str	r2, [r4, r5]
 8006482:	604b      	str	r3, [r1, #4]
 8006484:	4638      	mov	r0, r7
 8006486:	f104 060b 	add.w	r6, r4, #11
 800648a:	f000 fd4f 	bl	8006f2c <__malloc_unlock>
 800648e:	f026 0607 	bic.w	r6, r6, #7
 8006492:	1d23      	adds	r3, r4, #4
 8006494:	1af2      	subs	r2, r6, r3
 8006496:	d0b6      	beq.n	8006406 <_malloc_r+0x22>
 8006498:	1b9b      	subs	r3, r3, r6
 800649a:	50a3      	str	r3, [r4, r2]
 800649c:	e7b3      	b.n	8006406 <_malloc_r+0x22>
 800649e:	6862      	ldr	r2, [r4, #4]
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	bf0c      	ite	eq
 80064a4:	6032      	streq	r2, [r6, #0]
 80064a6:	605a      	strne	r2, [r3, #4]
 80064a8:	e7ec      	b.n	8006484 <_malloc_r+0xa0>
 80064aa:	4623      	mov	r3, r4
 80064ac:	6864      	ldr	r4, [r4, #4]
 80064ae:	e7b2      	b.n	8006416 <_malloc_r+0x32>
 80064b0:	4634      	mov	r4, r6
 80064b2:	6876      	ldr	r6, [r6, #4]
 80064b4:	e7b9      	b.n	800642a <_malloc_r+0x46>
 80064b6:	230c      	movs	r3, #12
 80064b8:	4638      	mov	r0, r7
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	f000 fd36 	bl	8006f2c <__malloc_unlock>
 80064c0:	e7a1      	b.n	8006406 <_malloc_r+0x22>
 80064c2:	6025      	str	r5, [r4, #0]
 80064c4:	e7de      	b.n	8006484 <_malloc_r+0xa0>
 80064c6:	bf00      	nop
 80064c8:	20000284 	.word	0x20000284

080064cc <__ssputs_r>:
 80064cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	688e      	ldr	r6, [r1, #8]
 80064d2:	4682      	mov	sl, r0
 80064d4:	429e      	cmp	r6, r3
 80064d6:	460c      	mov	r4, r1
 80064d8:	4690      	mov	r8, r2
 80064da:	461f      	mov	r7, r3
 80064dc:	d838      	bhi.n	8006550 <__ssputs_r+0x84>
 80064de:	898a      	ldrh	r2, [r1, #12]
 80064e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064e4:	d032      	beq.n	800654c <__ssputs_r+0x80>
 80064e6:	6825      	ldr	r5, [r4, #0]
 80064e8:	6909      	ldr	r1, [r1, #16]
 80064ea:	3301      	adds	r3, #1
 80064ec:	eba5 0901 	sub.w	r9, r5, r1
 80064f0:	6965      	ldr	r5, [r4, #20]
 80064f2:	444b      	add	r3, r9
 80064f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064fc:	106d      	asrs	r5, r5, #1
 80064fe:	429d      	cmp	r5, r3
 8006500:	bf38      	it	cc
 8006502:	461d      	movcc	r5, r3
 8006504:	0553      	lsls	r3, r2, #21
 8006506:	d531      	bpl.n	800656c <__ssputs_r+0xa0>
 8006508:	4629      	mov	r1, r5
 800650a:	f7ff ff6b 	bl	80063e4 <_malloc_r>
 800650e:	4606      	mov	r6, r0
 8006510:	b950      	cbnz	r0, 8006528 <__ssputs_r+0x5c>
 8006512:	230c      	movs	r3, #12
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	f8ca 3000 	str.w	r3, [sl]
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006522:	81a3      	strh	r3, [r4, #12]
 8006524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006528:	464a      	mov	r2, r9
 800652a:	6921      	ldr	r1, [r4, #16]
 800652c:	f000 fcd0 	bl	8006ed0 <memcpy>
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653a:	81a3      	strh	r3, [r4, #12]
 800653c:	6126      	str	r6, [r4, #16]
 800653e:	444e      	add	r6, r9
 8006540:	6026      	str	r6, [r4, #0]
 8006542:	463e      	mov	r6, r7
 8006544:	6165      	str	r5, [r4, #20]
 8006546:	eba5 0509 	sub.w	r5, r5, r9
 800654a:	60a5      	str	r5, [r4, #8]
 800654c:	42be      	cmp	r6, r7
 800654e:	d900      	bls.n	8006552 <__ssputs_r+0x86>
 8006550:	463e      	mov	r6, r7
 8006552:	4632      	mov	r2, r6
 8006554:	4641      	mov	r1, r8
 8006556:	6820      	ldr	r0, [r4, #0]
 8006558:	f000 fcc8 	bl	8006eec <memmove>
 800655c:	68a3      	ldr	r3, [r4, #8]
 800655e:	2000      	movs	r0, #0
 8006560:	1b9b      	subs	r3, r3, r6
 8006562:	60a3      	str	r3, [r4, #8]
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	4433      	add	r3, r6
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	e7db      	b.n	8006524 <__ssputs_r+0x58>
 800656c:	462a      	mov	r2, r5
 800656e:	f000 fce3 	bl	8006f38 <_realloc_r>
 8006572:	4606      	mov	r6, r0
 8006574:	2800      	cmp	r0, #0
 8006576:	d1e1      	bne.n	800653c <__ssputs_r+0x70>
 8006578:	4650      	mov	r0, sl
 800657a:	6921      	ldr	r1, [r4, #16]
 800657c:	f7ff feca 	bl	8006314 <_free_r>
 8006580:	e7c7      	b.n	8006512 <__ssputs_r+0x46>
	...

08006584 <_svfiprintf_r>:
 8006584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006588:	4698      	mov	r8, r3
 800658a:	898b      	ldrh	r3, [r1, #12]
 800658c:	4607      	mov	r7, r0
 800658e:	061b      	lsls	r3, r3, #24
 8006590:	460d      	mov	r5, r1
 8006592:	4614      	mov	r4, r2
 8006594:	b09d      	sub	sp, #116	; 0x74
 8006596:	d50e      	bpl.n	80065b6 <_svfiprintf_r+0x32>
 8006598:	690b      	ldr	r3, [r1, #16]
 800659a:	b963      	cbnz	r3, 80065b6 <_svfiprintf_r+0x32>
 800659c:	2140      	movs	r1, #64	; 0x40
 800659e:	f7ff ff21 	bl	80063e4 <_malloc_r>
 80065a2:	6028      	str	r0, [r5, #0]
 80065a4:	6128      	str	r0, [r5, #16]
 80065a6:	b920      	cbnz	r0, 80065b2 <_svfiprintf_r+0x2e>
 80065a8:	230c      	movs	r3, #12
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	f04f 30ff 	mov.w	r0, #4294967295
 80065b0:	e0d1      	b.n	8006756 <_svfiprintf_r+0x1d2>
 80065b2:	2340      	movs	r3, #64	; 0x40
 80065b4:	616b      	str	r3, [r5, #20]
 80065b6:	2300      	movs	r3, #0
 80065b8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ba:	2320      	movs	r3, #32
 80065bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065c0:	2330      	movs	r3, #48	; 0x30
 80065c2:	f04f 0901 	mov.w	r9, #1
 80065c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80065ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006770 <_svfiprintf_r+0x1ec>
 80065ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065d2:	4623      	mov	r3, r4
 80065d4:	469a      	mov	sl, r3
 80065d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065da:	b10a      	cbz	r2, 80065e0 <_svfiprintf_r+0x5c>
 80065dc:	2a25      	cmp	r2, #37	; 0x25
 80065de:	d1f9      	bne.n	80065d4 <_svfiprintf_r+0x50>
 80065e0:	ebba 0b04 	subs.w	fp, sl, r4
 80065e4:	d00b      	beq.n	80065fe <_svfiprintf_r+0x7a>
 80065e6:	465b      	mov	r3, fp
 80065e8:	4622      	mov	r2, r4
 80065ea:	4629      	mov	r1, r5
 80065ec:	4638      	mov	r0, r7
 80065ee:	f7ff ff6d 	bl	80064cc <__ssputs_r>
 80065f2:	3001      	adds	r0, #1
 80065f4:	f000 80aa 	beq.w	800674c <_svfiprintf_r+0x1c8>
 80065f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065fa:	445a      	add	r2, fp
 80065fc:	9209      	str	r2, [sp, #36]	; 0x24
 80065fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80a2 	beq.w	800674c <_svfiprintf_r+0x1c8>
 8006608:	2300      	movs	r3, #0
 800660a:	f04f 32ff 	mov.w	r2, #4294967295
 800660e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006612:	f10a 0a01 	add.w	sl, sl, #1
 8006616:	9304      	str	r3, [sp, #16]
 8006618:	9307      	str	r3, [sp, #28]
 800661a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800661e:	931a      	str	r3, [sp, #104]	; 0x68
 8006620:	4654      	mov	r4, sl
 8006622:	2205      	movs	r2, #5
 8006624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006628:	4851      	ldr	r0, [pc, #324]	; (8006770 <_svfiprintf_r+0x1ec>)
 800662a:	f000 fc43 	bl	8006eb4 <memchr>
 800662e:	9a04      	ldr	r2, [sp, #16]
 8006630:	b9d8      	cbnz	r0, 800666a <_svfiprintf_r+0xe6>
 8006632:	06d0      	lsls	r0, r2, #27
 8006634:	bf44      	itt	mi
 8006636:	2320      	movmi	r3, #32
 8006638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800663c:	0711      	lsls	r1, r2, #28
 800663e:	bf44      	itt	mi
 8006640:	232b      	movmi	r3, #43	; 0x2b
 8006642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006646:	f89a 3000 	ldrb.w	r3, [sl]
 800664a:	2b2a      	cmp	r3, #42	; 0x2a
 800664c:	d015      	beq.n	800667a <_svfiprintf_r+0xf6>
 800664e:	4654      	mov	r4, sl
 8006650:	2000      	movs	r0, #0
 8006652:	f04f 0c0a 	mov.w	ip, #10
 8006656:	9a07      	ldr	r2, [sp, #28]
 8006658:	4621      	mov	r1, r4
 800665a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800665e:	3b30      	subs	r3, #48	; 0x30
 8006660:	2b09      	cmp	r3, #9
 8006662:	d94e      	bls.n	8006702 <_svfiprintf_r+0x17e>
 8006664:	b1b0      	cbz	r0, 8006694 <_svfiprintf_r+0x110>
 8006666:	9207      	str	r2, [sp, #28]
 8006668:	e014      	b.n	8006694 <_svfiprintf_r+0x110>
 800666a:	eba0 0308 	sub.w	r3, r0, r8
 800666e:	fa09 f303 	lsl.w	r3, r9, r3
 8006672:	4313      	orrs	r3, r2
 8006674:	46a2      	mov	sl, r4
 8006676:	9304      	str	r3, [sp, #16]
 8006678:	e7d2      	b.n	8006620 <_svfiprintf_r+0x9c>
 800667a:	9b03      	ldr	r3, [sp, #12]
 800667c:	1d19      	adds	r1, r3, #4
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	9103      	str	r1, [sp, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	bfbb      	ittet	lt
 8006686:	425b      	neglt	r3, r3
 8006688:	f042 0202 	orrlt.w	r2, r2, #2
 800668c:	9307      	strge	r3, [sp, #28]
 800668e:	9307      	strlt	r3, [sp, #28]
 8006690:	bfb8      	it	lt
 8006692:	9204      	strlt	r2, [sp, #16]
 8006694:	7823      	ldrb	r3, [r4, #0]
 8006696:	2b2e      	cmp	r3, #46	; 0x2e
 8006698:	d10c      	bne.n	80066b4 <_svfiprintf_r+0x130>
 800669a:	7863      	ldrb	r3, [r4, #1]
 800669c:	2b2a      	cmp	r3, #42	; 0x2a
 800669e:	d135      	bne.n	800670c <_svfiprintf_r+0x188>
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	3402      	adds	r4, #2
 80066a4:	1d1a      	adds	r2, r3, #4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	9203      	str	r2, [sp, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bfb8      	it	lt
 80066ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80066b2:	9305      	str	r3, [sp, #20]
 80066b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006774 <_svfiprintf_r+0x1f0>
 80066b8:	2203      	movs	r2, #3
 80066ba:	4650      	mov	r0, sl
 80066bc:	7821      	ldrb	r1, [r4, #0]
 80066be:	f000 fbf9 	bl	8006eb4 <memchr>
 80066c2:	b140      	cbz	r0, 80066d6 <_svfiprintf_r+0x152>
 80066c4:	2340      	movs	r3, #64	; 0x40
 80066c6:	eba0 000a 	sub.w	r0, r0, sl
 80066ca:	fa03 f000 	lsl.w	r0, r3, r0
 80066ce:	9b04      	ldr	r3, [sp, #16]
 80066d0:	3401      	adds	r4, #1
 80066d2:	4303      	orrs	r3, r0
 80066d4:	9304      	str	r3, [sp, #16]
 80066d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066da:	2206      	movs	r2, #6
 80066dc:	4826      	ldr	r0, [pc, #152]	; (8006778 <_svfiprintf_r+0x1f4>)
 80066de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066e2:	f000 fbe7 	bl	8006eb4 <memchr>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d038      	beq.n	800675c <_svfiprintf_r+0x1d8>
 80066ea:	4b24      	ldr	r3, [pc, #144]	; (800677c <_svfiprintf_r+0x1f8>)
 80066ec:	bb1b      	cbnz	r3, 8006736 <_svfiprintf_r+0x1b2>
 80066ee:	9b03      	ldr	r3, [sp, #12]
 80066f0:	3307      	adds	r3, #7
 80066f2:	f023 0307 	bic.w	r3, r3, #7
 80066f6:	3308      	adds	r3, #8
 80066f8:	9303      	str	r3, [sp, #12]
 80066fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fc:	4433      	add	r3, r6
 80066fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006700:	e767      	b.n	80065d2 <_svfiprintf_r+0x4e>
 8006702:	460c      	mov	r4, r1
 8006704:	2001      	movs	r0, #1
 8006706:	fb0c 3202 	mla	r2, ip, r2, r3
 800670a:	e7a5      	b.n	8006658 <_svfiprintf_r+0xd4>
 800670c:	2300      	movs	r3, #0
 800670e:	f04f 0c0a 	mov.w	ip, #10
 8006712:	4619      	mov	r1, r3
 8006714:	3401      	adds	r4, #1
 8006716:	9305      	str	r3, [sp, #20]
 8006718:	4620      	mov	r0, r4
 800671a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800671e:	3a30      	subs	r2, #48	; 0x30
 8006720:	2a09      	cmp	r2, #9
 8006722:	d903      	bls.n	800672c <_svfiprintf_r+0x1a8>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0c5      	beq.n	80066b4 <_svfiprintf_r+0x130>
 8006728:	9105      	str	r1, [sp, #20]
 800672a:	e7c3      	b.n	80066b4 <_svfiprintf_r+0x130>
 800672c:	4604      	mov	r4, r0
 800672e:	2301      	movs	r3, #1
 8006730:	fb0c 2101 	mla	r1, ip, r1, r2
 8006734:	e7f0      	b.n	8006718 <_svfiprintf_r+0x194>
 8006736:	ab03      	add	r3, sp, #12
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	462a      	mov	r2, r5
 800673c:	4638      	mov	r0, r7
 800673e:	4b10      	ldr	r3, [pc, #64]	; (8006780 <_svfiprintf_r+0x1fc>)
 8006740:	a904      	add	r1, sp, #16
 8006742:	f3af 8000 	nop.w
 8006746:	1c42      	adds	r2, r0, #1
 8006748:	4606      	mov	r6, r0
 800674a:	d1d6      	bne.n	80066fa <_svfiprintf_r+0x176>
 800674c:	89ab      	ldrh	r3, [r5, #12]
 800674e:	065b      	lsls	r3, r3, #25
 8006750:	f53f af2c 	bmi.w	80065ac <_svfiprintf_r+0x28>
 8006754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006756:	b01d      	add	sp, #116	; 0x74
 8006758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675c:	ab03      	add	r3, sp, #12
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	462a      	mov	r2, r5
 8006762:	4638      	mov	r0, r7
 8006764:	4b06      	ldr	r3, [pc, #24]	; (8006780 <_svfiprintf_r+0x1fc>)
 8006766:	a904      	add	r1, sp, #16
 8006768:	f000 f9d4 	bl	8006b14 <_printf_i>
 800676c:	e7eb      	b.n	8006746 <_svfiprintf_r+0x1c2>
 800676e:	bf00      	nop
 8006770:	08007274 	.word	0x08007274
 8006774:	0800727a 	.word	0x0800727a
 8006778:	0800727e 	.word	0x0800727e
 800677c:	00000000 	.word	0x00000000
 8006780:	080064cd 	.word	0x080064cd

08006784 <__sfputc_r>:
 8006784:	6893      	ldr	r3, [r2, #8]
 8006786:	b410      	push	{r4}
 8006788:	3b01      	subs	r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	6093      	str	r3, [r2, #8]
 800678e:	da07      	bge.n	80067a0 <__sfputc_r+0x1c>
 8006790:	6994      	ldr	r4, [r2, #24]
 8006792:	42a3      	cmp	r3, r4
 8006794:	db01      	blt.n	800679a <__sfputc_r+0x16>
 8006796:	290a      	cmp	r1, #10
 8006798:	d102      	bne.n	80067a0 <__sfputc_r+0x1c>
 800679a:	bc10      	pop	{r4}
 800679c:	f7ff bade 	b.w	8005d5c <__swbuf_r>
 80067a0:	6813      	ldr	r3, [r2, #0]
 80067a2:	1c58      	adds	r0, r3, #1
 80067a4:	6010      	str	r0, [r2, #0]
 80067a6:	7019      	strb	r1, [r3, #0]
 80067a8:	4608      	mov	r0, r1
 80067aa:	bc10      	pop	{r4}
 80067ac:	4770      	bx	lr

080067ae <__sfputs_r>:
 80067ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b0:	4606      	mov	r6, r0
 80067b2:	460f      	mov	r7, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	18d5      	adds	r5, r2, r3
 80067b8:	42ac      	cmp	r4, r5
 80067ba:	d101      	bne.n	80067c0 <__sfputs_r+0x12>
 80067bc:	2000      	movs	r0, #0
 80067be:	e007      	b.n	80067d0 <__sfputs_r+0x22>
 80067c0:	463a      	mov	r2, r7
 80067c2:	4630      	mov	r0, r6
 80067c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c8:	f7ff ffdc 	bl	8006784 <__sfputc_r>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d1f3      	bne.n	80067b8 <__sfputs_r+0xa>
 80067d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067d4 <_vfiprintf_r>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	460d      	mov	r5, r1
 80067da:	4614      	mov	r4, r2
 80067dc:	4698      	mov	r8, r3
 80067de:	4606      	mov	r6, r0
 80067e0:	b09d      	sub	sp, #116	; 0x74
 80067e2:	b118      	cbz	r0, 80067ec <_vfiprintf_r+0x18>
 80067e4:	6983      	ldr	r3, [r0, #24]
 80067e6:	b90b      	cbnz	r3, 80067ec <_vfiprintf_r+0x18>
 80067e8:	f7ff fc8e 	bl	8006108 <__sinit>
 80067ec:	4b89      	ldr	r3, [pc, #548]	; (8006a14 <_vfiprintf_r+0x240>)
 80067ee:	429d      	cmp	r5, r3
 80067f0:	d11b      	bne.n	800682a <_vfiprintf_r+0x56>
 80067f2:	6875      	ldr	r5, [r6, #4]
 80067f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067f6:	07d9      	lsls	r1, r3, #31
 80067f8:	d405      	bmi.n	8006806 <_vfiprintf_r+0x32>
 80067fa:	89ab      	ldrh	r3, [r5, #12]
 80067fc:	059a      	lsls	r2, r3, #22
 80067fe:	d402      	bmi.n	8006806 <_vfiprintf_r+0x32>
 8006800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006802:	f7ff fd1f 	bl	8006244 <__retarget_lock_acquire_recursive>
 8006806:	89ab      	ldrh	r3, [r5, #12]
 8006808:	071b      	lsls	r3, r3, #28
 800680a:	d501      	bpl.n	8006810 <_vfiprintf_r+0x3c>
 800680c:	692b      	ldr	r3, [r5, #16]
 800680e:	b9eb      	cbnz	r3, 800684c <_vfiprintf_r+0x78>
 8006810:	4629      	mov	r1, r5
 8006812:	4630      	mov	r0, r6
 8006814:	f7ff faf4 	bl	8005e00 <__swsetup_r>
 8006818:	b1c0      	cbz	r0, 800684c <_vfiprintf_r+0x78>
 800681a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800681c:	07dc      	lsls	r4, r3, #31
 800681e:	d50e      	bpl.n	800683e <_vfiprintf_r+0x6a>
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	b01d      	add	sp, #116	; 0x74
 8006826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682a:	4b7b      	ldr	r3, [pc, #492]	; (8006a18 <_vfiprintf_r+0x244>)
 800682c:	429d      	cmp	r5, r3
 800682e:	d101      	bne.n	8006834 <_vfiprintf_r+0x60>
 8006830:	68b5      	ldr	r5, [r6, #8]
 8006832:	e7df      	b.n	80067f4 <_vfiprintf_r+0x20>
 8006834:	4b79      	ldr	r3, [pc, #484]	; (8006a1c <_vfiprintf_r+0x248>)
 8006836:	429d      	cmp	r5, r3
 8006838:	bf08      	it	eq
 800683a:	68f5      	ldreq	r5, [r6, #12]
 800683c:	e7da      	b.n	80067f4 <_vfiprintf_r+0x20>
 800683e:	89ab      	ldrh	r3, [r5, #12]
 8006840:	0598      	lsls	r0, r3, #22
 8006842:	d4ed      	bmi.n	8006820 <_vfiprintf_r+0x4c>
 8006844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006846:	f7ff fcfe 	bl	8006246 <__retarget_lock_release_recursive>
 800684a:	e7e9      	b.n	8006820 <_vfiprintf_r+0x4c>
 800684c:	2300      	movs	r3, #0
 800684e:	9309      	str	r3, [sp, #36]	; 0x24
 8006850:	2320      	movs	r3, #32
 8006852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006856:	2330      	movs	r3, #48	; 0x30
 8006858:	f04f 0901 	mov.w	r9, #1
 800685c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006860:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006a20 <_vfiprintf_r+0x24c>
 8006864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006868:	4623      	mov	r3, r4
 800686a:	469a      	mov	sl, r3
 800686c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006870:	b10a      	cbz	r2, 8006876 <_vfiprintf_r+0xa2>
 8006872:	2a25      	cmp	r2, #37	; 0x25
 8006874:	d1f9      	bne.n	800686a <_vfiprintf_r+0x96>
 8006876:	ebba 0b04 	subs.w	fp, sl, r4
 800687a:	d00b      	beq.n	8006894 <_vfiprintf_r+0xc0>
 800687c:	465b      	mov	r3, fp
 800687e:	4622      	mov	r2, r4
 8006880:	4629      	mov	r1, r5
 8006882:	4630      	mov	r0, r6
 8006884:	f7ff ff93 	bl	80067ae <__sfputs_r>
 8006888:	3001      	adds	r0, #1
 800688a:	f000 80aa 	beq.w	80069e2 <_vfiprintf_r+0x20e>
 800688e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006890:	445a      	add	r2, fp
 8006892:	9209      	str	r2, [sp, #36]	; 0x24
 8006894:	f89a 3000 	ldrb.w	r3, [sl]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80a2 	beq.w	80069e2 <_vfiprintf_r+0x20e>
 800689e:	2300      	movs	r3, #0
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295
 80068a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a8:	f10a 0a01 	add.w	sl, sl, #1
 80068ac:	9304      	str	r3, [sp, #16]
 80068ae:	9307      	str	r3, [sp, #28]
 80068b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068b4:	931a      	str	r3, [sp, #104]	; 0x68
 80068b6:	4654      	mov	r4, sl
 80068b8:	2205      	movs	r2, #5
 80068ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068be:	4858      	ldr	r0, [pc, #352]	; (8006a20 <_vfiprintf_r+0x24c>)
 80068c0:	f000 faf8 	bl	8006eb4 <memchr>
 80068c4:	9a04      	ldr	r2, [sp, #16]
 80068c6:	b9d8      	cbnz	r0, 8006900 <_vfiprintf_r+0x12c>
 80068c8:	06d1      	lsls	r1, r2, #27
 80068ca:	bf44      	itt	mi
 80068cc:	2320      	movmi	r3, #32
 80068ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d2:	0713      	lsls	r3, r2, #28
 80068d4:	bf44      	itt	mi
 80068d6:	232b      	movmi	r3, #43	; 0x2b
 80068d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068dc:	f89a 3000 	ldrb.w	r3, [sl]
 80068e0:	2b2a      	cmp	r3, #42	; 0x2a
 80068e2:	d015      	beq.n	8006910 <_vfiprintf_r+0x13c>
 80068e4:	4654      	mov	r4, sl
 80068e6:	2000      	movs	r0, #0
 80068e8:	f04f 0c0a 	mov.w	ip, #10
 80068ec:	9a07      	ldr	r2, [sp, #28]
 80068ee:	4621      	mov	r1, r4
 80068f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f4:	3b30      	subs	r3, #48	; 0x30
 80068f6:	2b09      	cmp	r3, #9
 80068f8:	d94e      	bls.n	8006998 <_vfiprintf_r+0x1c4>
 80068fa:	b1b0      	cbz	r0, 800692a <_vfiprintf_r+0x156>
 80068fc:	9207      	str	r2, [sp, #28]
 80068fe:	e014      	b.n	800692a <_vfiprintf_r+0x156>
 8006900:	eba0 0308 	sub.w	r3, r0, r8
 8006904:	fa09 f303 	lsl.w	r3, r9, r3
 8006908:	4313      	orrs	r3, r2
 800690a:	46a2      	mov	sl, r4
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	e7d2      	b.n	80068b6 <_vfiprintf_r+0xe2>
 8006910:	9b03      	ldr	r3, [sp, #12]
 8006912:	1d19      	adds	r1, r3, #4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	9103      	str	r1, [sp, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	bfbb      	ittet	lt
 800691c:	425b      	neglt	r3, r3
 800691e:	f042 0202 	orrlt.w	r2, r2, #2
 8006922:	9307      	strge	r3, [sp, #28]
 8006924:	9307      	strlt	r3, [sp, #28]
 8006926:	bfb8      	it	lt
 8006928:	9204      	strlt	r2, [sp, #16]
 800692a:	7823      	ldrb	r3, [r4, #0]
 800692c:	2b2e      	cmp	r3, #46	; 0x2e
 800692e:	d10c      	bne.n	800694a <_vfiprintf_r+0x176>
 8006930:	7863      	ldrb	r3, [r4, #1]
 8006932:	2b2a      	cmp	r3, #42	; 0x2a
 8006934:	d135      	bne.n	80069a2 <_vfiprintf_r+0x1ce>
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	3402      	adds	r4, #2
 800693a:	1d1a      	adds	r2, r3, #4
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	9203      	str	r2, [sp, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	bfb8      	it	lt
 8006944:	f04f 33ff 	movlt.w	r3, #4294967295
 8006948:	9305      	str	r3, [sp, #20]
 800694a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006a24 <_vfiprintf_r+0x250>
 800694e:	2203      	movs	r2, #3
 8006950:	4650      	mov	r0, sl
 8006952:	7821      	ldrb	r1, [r4, #0]
 8006954:	f000 faae 	bl	8006eb4 <memchr>
 8006958:	b140      	cbz	r0, 800696c <_vfiprintf_r+0x198>
 800695a:	2340      	movs	r3, #64	; 0x40
 800695c:	eba0 000a 	sub.w	r0, r0, sl
 8006960:	fa03 f000 	lsl.w	r0, r3, r0
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	3401      	adds	r4, #1
 8006968:	4303      	orrs	r3, r0
 800696a:	9304      	str	r3, [sp, #16]
 800696c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006970:	2206      	movs	r2, #6
 8006972:	482d      	ldr	r0, [pc, #180]	; (8006a28 <_vfiprintf_r+0x254>)
 8006974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006978:	f000 fa9c 	bl	8006eb4 <memchr>
 800697c:	2800      	cmp	r0, #0
 800697e:	d03f      	beq.n	8006a00 <_vfiprintf_r+0x22c>
 8006980:	4b2a      	ldr	r3, [pc, #168]	; (8006a2c <_vfiprintf_r+0x258>)
 8006982:	bb1b      	cbnz	r3, 80069cc <_vfiprintf_r+0x1f8>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	3307      	adds	r3, #7
 8006988:	f023 0307 	bic.w	r3, r3, #7
 800698c:	3308      	adds	r3, #8
 800698e:	9303      	str	r3, [sp, #12]
 8006990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006992:	443b      	add	r3, r7
 8006994:	9309      	str	r3, [sp, #36]	; 0x24
 8006996:	e767      	b.n	8006868 <_vfiprintf_r+0x94>
 8006998:	460c      	mov	r4, r1
 800699a:	2001      	movs	r0, #1
 800699c:	fb0c 3202 	mla	r2, ip, r2, r3
 80069a0:	e7a5      	b.n	80068ee <_vfiprintf_r+0x11a>
 80069a2:	2300      	movs	r3, #0
 80069a4:	f04f 0c0a 	mov.w	ip, #10
 80069a8:	4619      	mov	r1, r3
 80069aa:	3401      	adds	r4, #1
 80069ac:	9305      	str	r3, [sp, #20]
 80069ae:	4620      	mov	r0, r4
 80069b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069b4:	3a30      	subs	r2, #48	; 0x30
 80069b6:	2a09      	cmp	r2, #9
 80069b8:	d903      	bls.n	80069c2 <_vfiprintf_r+0x1ee>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0c5      	beq.n	800694a <_vfiprintf_r+0x176>
 80069be:	9105      	str	r1, [sp, #20]
 80069c0:	e7c3      	b.n	800694a <_vfiprintf_r+0x176>
 80069c2:	4604      	mov	r4, r0
 80069c4:	2301      	movs	r3, #1
 80069c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80069ca:	e7f0      	b.n	80069ae <_vfiprintf_r+0x1da>
 80069cc:	ab03      	add	r3, sp, #12
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	462a      	mov	r2, r5
 80069d2:	4630      	mov	r0, r6
 80069d4:	4b16      	ldr	r3, [pc, #88]	; (8006a30 <_vfiprintf_r+0x25c>)
 80069d6:	a904      	add	r1, sp, #16
 80069d8:	f3af 8000 	nop.w
 80069dc:	4607      	mov	r7, r0
 80069de:	1c78      	adds	r0, r7, #1
 80069e0:	d1d6      	bne.n	8006990 <_vfiprintf_r+0x1bc>
 80069e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069e4:	07d9      	lsls	r1, r3, #31
 80069e6:	d405      	bmi.n	80069f4 <_vfiprintf_r+0x220>
 80069e8:	89ab      	ldrh	r3, [r5, #12]
 80069ea:	059a      	lsls	r2, r3, #22
 80069ec:	d402      	bmi.n	80069f4 <_vfiprintf_r+0x220>
 80069ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069f0:	f7ff fc29 	bl	8006246 <__retarget_lock_release_recursive>
 80069f4:	89ab      	ldrh	r3, [r5, #12]
 80069f6:	065b      	lsls	r3, r3, #25
 80069f8:	f53f af12 	bmi.w	8006820 <_vfiprintf_r+0x4c>
 80069fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069fe:	e711      	b.n	8006824 <_vfiprintf_r+0x50>
 8006a00:	ab03      	add	r3, sp, #12
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	462a      	mov	r2, r5
 8006a06:	4630      	mov	r0, r6
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <_vfiprintf_r+0x25c>)
 8006a0a:	a904      	add	r1, sp, #16
 8006a0c:	f000 f882 	bl	8006b14 <_printf_i>
 8006a10:	e7e4      	b.n	80069dc <_vfiprintf_r+0x208>
 8006a12:	bf00      	nop
 8006a14:	08007234 	.word	0x08007234
 8006a18:	08007254 	.word	0x08007254
 8006a1c:	08007214 	.word	0x08007214
 8006a20:	08007274 	.word	0x08007274
 8006a24:	0800727a 	.word	0x0800727a
 8006a28:	0800727e 	.word	0x0800727e
 8006a2c:	00000000 	.word	0x00000000
 8006a30:	080067af 	.word	0x080067af

08006a34 <_printf_common>:
 8006a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	4616      	mov	r6, r2
 8006a3a:	4699      	mov	r9, r3
 8006a3c:	688a      	ldr	r2, [r1, #8]
 8006a3e:	690b      	ldr	r3, [r1, #16]
 8006a40:	4607      	mov	r7, r0
 8006a42:	4293      	cmp	r3, r2
 8006a44:	bfb8      	it	lt
 8006a46:	4613      	movlt	r3, r2
 8006a48:	6033      	str	r3, [r6, #0]
 8006a4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a4e:	460c      	mov	r4, r1
 8006a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a54:	b10a      	cbz	r2, 8006a5a <_printf_common+0x26>
 8006a56:	3301      	adds	r3, #1
 8006a58:	6033      	str	r3, [r6, #0]
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	0699      	lsls	r1, r3, #26
 8006a5e:	bf42      	ittt	mi
 8006a60:	6833      	ldrmi	r3, [r6, #0]
 8006a62:	3302      	addmi	r3, #2
 8006a64:	6033      	strmi	r3, [r6, #0]
 8006a66:	6825      	ldr	r5, [r4, #0]
 8006a68:	f015 0506 	ands.w	r5, r5, #6
 8006a6c:	d106      	bne.n	8006a7c <_printf_common+0x48>
 8006a6e:	f104 0a19 	add.w	sl, r4, #25
 8006a72:	68e3      	ldr	r3, [r4, #12]
 8006a74:	6832      	ldr	r2, [r6, #0]
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	42ab      	cmp	r3, r5
 8006a7a:	dc28      	bgt.n	8006ace <_printf_common+0x9a>
 8006a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a80:	1e13      	subs	r3, r2, #0
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	bf18      	it	ne
 8006a86:	2301      	movne	r3, #1
 8006a88:	0692      	lsls	r2, r2, #26
 8006a8a:	d42d      	bmi.n	8006ae8 <_printf_common+0xb4>
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	4638      	mov	r0, r7
 8006a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a94:	47c0      	blx	r8
 8006a96:	3001      	adds	r0, #1
 8006a98:	d020      	beq.n	8006adc <_printf_common+0xa8>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	68e5      	ldr	r5, [r4, #12]
 8006a9e:	f003 0306 	and.w	r3, r3, #6
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	bf18      	it	ne
 8006aa6:	2500      	movne	r5, #0
 8006aa8:	6832      	ldr	r2, [r6, #0]
 8006aaa:	f04f 0600 	mov.w	r6, #0
 8006aae:	68a3      	ldr	r3, [r4, #8]
 8006ab0:	bf08      	it	eq
 8006ab2:	1aad      	subeq	r5, r5, r2
 8006ab4:	6922      	ldr	r2, [r4, #16]
 8006ab6:	bf08      	it	eq
 8006ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006abc:	4293      	cmp	r3, r2
 8006abe:	bfc4      	itt	gt
 8006ac0:	1a9b      	subgt	r3, r3, r2
 8006ac2:	18ed      	addgt	r5, r5, r3
 8006ac4:	341a      	adds	r4, #26
 8006ac6:	42b5      	cmp	r5, r6
 8006ac8:	d11a      	bne.n	8006b00 <_printf_common+0xcc>
 8006aca:	2000      	movs	r0, #0
 8006acc:	e008      	b.n	8006ae0 <_printf_common+0xac>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	4652      	mov	r2, sl
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	47c0      	blx	r8
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d103      	bne.n	8006ae4 <_printf_common+0xb0>
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae4:	3501      	adds	r5, #1
 8006ae6:	e7c4      	b.n	8006a72 <_printf_common+0x3e>
 8006ae8:	2030      	movs	r0, #48	; 0x30
 8006aea:	18e1      	adds	r1, r4, r3
 8006aec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006af6:	4422      	add	r2, r4
 8006af8:	3302      	adds	r3, #2
 8006afa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006afe:	e7c5      	b.n	8006a8c <_printf_common+0x58>
 8006b00:	2301      	movs	r3, #1
 8006b02:	4622      	mov	r2, r4
 8006b04:	4649      	mov	r1, r9
 8006b06:	4638      	mov	r0, r7
 8006b08:	47c0      	blx	r8
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d0e6      	beq.n	8006adc <_printf_common+0xa8>
 8006b0e:	3601      	adds	r6, #1
 8006b10:	e7d9      	b.n	8006ac6 <_printf_common+0x92>
	...

08006b14 <_printf_i>:
 8006b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	7e0f      	ldrb	r7, [r1, #24]
 8006b1a:	4691      	mov	r9, r2
 8006b1c:	2f78      	cmp	r7, #120	; 0x78
 8006b1e:	4680      	mov	r8, r0
 8006b20:	460c      	mov	r4, r1
 8006b22:	469a      	mov	sl, r3
 8006b24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b2a:	d807      	bhi.n	8006b3c <_printf_i+0x28>
 8006b2c:	2f62      	cmp	r7, #98	; 0x62
 8006b2e:	d80a      	bhi.n	8006b46 <_printf_i+0x32>
 8006b30:	2f00      	cmp	r7, #0
 8006b32:	f000 80d9 	beq.w	8006ce8 <_printf_i+0x1d4>
 8006b36:	2f58      	cmp	r7, #88	; 0x58
 8006b38:	f000 80a4 	beq.w	8006c84 <_printf_i+0x170>
 8006b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b44:	e03a      	b.n	8006bbc <_printf_i+0xa8>
 8006b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b4a:	2b15      	cmp	r3, #21
 8006b4c:	d8f6      	bhi.n	8006b3c <_printf_i+0x28>
 8006b4e:	a101      	add	r1, pc, #4	; (adr r1, 8006b54 <_printf_i+0x40>)
 8006b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b54:	08006bad 	.word	0x08006bad
 8006b58:	08006bc1 	.word	0x08006bc1
 8006b5c:	08006b3d 	.word	0x08006b3d
 8006b60:	08006b3d 	.word	0x08006b3d
 8006b64:	08006b3d 	.word	0x08006b3d
 8006b68:	08006b3d 	.word	0x08006b3d
 8006b6c:	08006bc1 	.word	0x08006bc1
 8006b70:	08006b3d 	.word	0x08006b3d
 8006b74:	08006b3d 	.word	0x08006b3d
 8006b78:	08006b3d 	.word	0x08006b3d
 8006b7c:	08006b3d 	.word	0x08006b3d
 8006b80:	08006ccf 	.word	0x08006ccf
 8006b84:	08006bf1 	.word	0x08006bf1
 8006b88:	08006cb1 	.word	0x08006cb1
 8006b8c:	08006b3d 	.word	0x08006b3d
 8006b90:	08006b3d 	.word	0x08006b3d
 8006b94:	08006cf1 	.word	0x08006cf1
 8006b98:	08006b3d 	.word	0x08006b3d
 8006b9c:	08006bf1 	.word	0x08006bf1
 8006ba0:	08006b3d 	.word	0x08006b3d
 8006ba4:	08006b3d 	.word	0x08006b3d
 8006ba8:	08006cb9 	.word	0x08006cb9
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	1d1a      	adds	r2, r3, #4
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	602a      	str	r2, [r5, #0]
 8006bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e0a4      	b.n	8006d0a <_printf_i+0x1f6>
 8006bc0:	6820      	ldr	r0, [r4, #0]
 8006bc2:	6829      	ldr	r1, [r5, #0]
 8006bc4:	0606      	lsls	r6, r0, #24
 8006bc6:	f101 0304 	add.w	r3, r1, #4
 8006bca:	d50a      	bpl.n	8006be2 <_printf_i+0xce>
 8006bcc:	680e      	ldr	r6, [r1, #0]
 8006bce:	602b      	str	r3, [r5, #0]
 8006bd0:	2e00      	cmp	r6, #0
 8006bd2:	da03      	bge.n	8006bdc <_printf_i+0xc8>
 8006bd4:	232d      	movs	r3, #45	; 0x2d
 8006bd6:	4276      	negs	r6, r6
 8006bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bdc:	230a      	movs	r3, #10
 8006bde:	485e      	ldr	r0, [pc, #376]	; (8006d58 <_printf_i+0x244>)
 8006be0:	e019      	b.n	8006c16 <_printf_i+0x102>
 8006be2:	680e      	ldr	r6, [r1, #0]
 8006be4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006be8:	602b      	str	r3, [r5, #0]
 8006bea:	bf18      	it	ne
 8006bec:	b236      	sxthne	r6, r6
 8006bee:	e7ef      	b.n	8006bd0 <_printf_i+0xbc>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	6820      	ldr	r0, [r4, #0]
 8006bf4:	1d19      	adds	r1, r3, #4
 8006bf6:	6029      	str	r1, [r5, #0]
 8006bf8:	0601      	lsls	r1, r0, #24
 8006bfa:	d501      	bpl.n	8006c00 <_printf_i+0xec>
 8006bfc:	681e      	ldr	r6, [r3, #0]
 8006bfe:	e002      	b.n	8006c06 <_printf_i+0xf2>
 8006c00:	0646      	lsls	r6, r0, #25
 8006c02:	d5fb      	bpl.n	8006bfc <_printf_i+0xe8>
 8006c04:	881e      	ldrh	r6, [r3, #0]
 8006c06:	2f6f      	cmp	r7, #111	; 0x6f
 8006c08:	bf0c      	ite	eq
 8006c0a:	2308      	moveq	r3, #8
 8006c0c:	230a      	movne	r3, #10
 8006c0e:	4852      	ldr	r0, [pc, #328]	; (8006d58 <_printf_i+0x244>)
 8006c10:	2100      	movs	r1, #0
 8006c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c16:	6865      	ldr	r5, [r4, #4]
 8006c18:	2d00      	cmp	r5, #0
 8006c1a:	bfa8      	it	ge
 8006c1c:	6821      	ldrge	r1, [r4, #0]
 8006c1e:	60a5      	str	r5, [r4, #8]
 8006c20:	bfa4      	itt	ge
 8006c22:	f021 0104 	bicge.w	r1, r1, #4
 8006c26:	6021      	strge	r1, [r4, #0]
 8006c28:	b90e      	cbnz	r6, 8006c2e <_printf_i+0x11a>
 8006c2a:	2d00      	cmp	r5, #0
 8006c2c:	d04d      	beq.n	8006cca <_printf_i+0x1b6>
 8006c2e:	4615      	mov	r5, r2
 8006c30:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c34:	fb03 6711 	mls	r7, r3, r1, r6
 8006c38:	5dc7      	ldrb	r7, [r0, r7]
 8006c3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c3e:	4637      	mov	r7, r6
 8006c40:	42bb      	cmp	r3, r7
 8006c42:	460e      	mov	r6, r1
 8006c44:	d9f4      	bls.n	8006c30 <_printf_i+0x11c>
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d10b      	bne.n	8006c62 <_printf_i+0x14e>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	07de      	lsls	r6, r3, #31
 8006c4e:	d508      	bpl.n	8006c62 <_printf_i+0x14e>
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	6861      	ldr	r1, [r4, #4]
 8006c54:	4299      	cmp	r1, r3
 8006c56:	bfde      	ittt	le
 8006c58:	2330      	movle	r3, #48	; 0x30
 8006c5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c62:	1b52      	subs	r2, r2, r5
 8006c64:	6122      	str	r2, [r4, #16]
 8006c66:	464b      	mov	r3, r9
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	f8cd a000 	str.w	sl, [sp]
 8006c70:	aa03      	add	r2, sp, #12
 8006c72:	f7ff fedf 	bl	8006a34 <_printf_common>
 8006c76:	3001      	adds	r0, #1
 8006c78:	d14c      	bne.n	8006d14 <_printf_i+0x200>
 8006c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7e:	b004      	add	sp, #16
 8006c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c84:	4834      	ldr	r0, [pc, #208]	; (8006d58 <_printf_i+0x244>)
 8006c86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c8a:	6829      	ldr	r1, [r5, #0]
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c92:	6029      	str	r1, [r5, #0]
 8006c94:	061d      	lsls	r5, r3, #24
 8006c96:	d514      	bpl.n	8006cc2 <_printf_i+0x1ae>
 8006c98:	07df      	lsls	r7, r3, #31
 8006c9a:	bf44      	itt	mi
 8006c9c:	f043 0320 	orrmi.w	r3, r3, #32
 8006ca0:	6023      	strmi	r3, [r4, #0]
 8006ca2:	b91e      	cbnz	r6, 8006cac <_printf_i+0x198>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	f023 0320 	bic.w	r3, r3, #32
 8006caa:	6023      	str	r3, [r4, #0]
 8006cac:	2310      	movs	r3, #16
 8006cae:	e7af      	b.n	8006c10 <_printf_i+0xfc>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	f043 0320 	orr.w	r3, r3, #32
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	2378      	movs	r3, #120	; 0x78
 8006cba:	4828      	ldr	r0, [pc, #160]	; (8006d5c <_printf_i+0x248>)
 8006cbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cc0:	e7e3      	b.n	8006c8a <_printf_i+0x176>
 8006cc2:	0659      	lsls	r1, r3, #25
 8006cc4:	bf48      	it	mi
 8006cc6:	b2b6      	uxthmi	r6, r6
 8006cc8:	e7e6      	b.n	8006c98 <_printf_i+0x184>
 8006cca:	4615      	mov	r5, r2
 8006ccc:	e7bb      	b.n	8006c46 <_printf_i+0x132>
 8006cce:	682b      	ldr	r3, [r5, #0]
 8006cd0:	6826      	ldr	r6, [r4, #0]
 8006cd2:	1d18      	adds	r0, r3, #4
 8006cd4:	6961      	ldr	r1, [r4, #20]
 8006cd6:	6028      	str	r0, [r5, #0]
 8006cd8:	0635      	lsls	r5, r6, #24
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	d501      	bpl.n	8006ce2 <_printf_i+0x1ce>
 8006cde:	6019      	str	r1, [r3, #0]
 8006ce0:	e002      	b.n	8006ce8 <_printf_i+0x1d4>
 8006ce2:	0670      	lsls	r0, r6, #25
 8006ce4:	d5fb      	bpl.n	8006cde <_printf_i+0x1ca>
 8006ce6:	8019      	strh	r1, [r3, #0]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4615      	mov	r5, r2
 8006cec:	6123      	str	r3, [r4, #16]
 8006cee:	e7ba      	b.n	8006c66 <_printf_i+0x152>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	1d1a      	adds	r2, r3, #4
 8006cf6:	602a      	str	r2, [r5, #0]
 8006cf8:	681d      	ldr	r5, [r3, #0]
 8006cfa:	6862      	ldr	r2, [r4, #4]
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f000 f8d9 	bl	8006eb4 <memchr>
 8006d02:	b108      	cbz	r0, 8006d08 <_printf_i+0x1f4>
 8006d04:	1b40      	subs	r0, r0, r5
 8006d06:	6060      	str	r0, [r4, #4]
 8006d08:	6863      	ldr	r3, [r4, #4]
 8006d0a:	6123      	str	r3, [r4, #16]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d12:	e7a8      	b.n	8006c66 <_printf_i+0x152>
 8006d14:	462a      	mov	r2, r5
 8006d16:	4649      	mov	r1, r9
 8006d18:	4640      	mov	r0, r8
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	47d0      	blx	sl
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d0ab      	beq.n	8006c7a <_printf_i+0x166>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	079b      	lsls	r3, r3, #30
 8006d26:	d413      	bmi.n	8006d50 <_printf_i+0x23c>
 8006d28:	68e0      	ldr	r0, [r4, #12]
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	4298      	cmp	r0, r3
 8006d2e:	bfb8      	it	lt
 8006d30:	4618      	movlt	r0, r3
 8006d32:	e7a4      	b.n	8006c7e <_printf_i+0x16a>
 8006d34:	2301      	movs	r3, #1
 8006d36:	4632      	mov	r2, r6
 8006d38:	4649      	mov	r1, r9
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	47d0      	blx	sl
 8006d3e:	3001      	adds	r0, #1
 8006d40:	d09b      	beq.n	8006c7a <_printf_i+0x166>
 8006d42:	3501      	adds	r5, #1
 8006d44:	68e3      	ldr	r3, [r4, #12]
 8006d46:	9903      	ldr	r1, [sp, #12]
 8006d48:	1a5b      	subs	r3, r3, r1
 8006d4a:	42ab      	cmp	r3, r5
 8006d4c:	dcf2      	bgt.n	8006d34 <_printf_i+0x220>
 8006d4e:	e7eb      	b.n	8006d28 <_printf_i+0x214>
 8006d50:	2500      	movs	r5, #0
 8006d52:	f104 0619 	add.w	r6, r4, #25
 8006d56:	e7f5      	b.n	8006d44 <_printf_i+0x230>
 8006d58:	08007285 	.word	0x08007285
 8006d5c:	08007296 	.word	0x08007296

08006d60 <_sbrk_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	2300      	movs	r3, #0
 8006d64:	4d05      	ldr	r5, [pc, #20]	; (8006d7c <_sbrk_r+0x1c>)
 8006d66:	4604      	mov	r4, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	f7fc fa38 	bl	80031e0 <_sbrk>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_sbrk_r+0x1a>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_sbrk_r+0x1a>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	2000028c 	.word	0x2000028c

08006d80 <__sread>:
 8006d80:	b510      	push	{r4, lr}
 8006d82:	460c      	mov	r4, r1
 8006d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d88:	f000 f906 	bl	8006f98 <_read_r>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	bfab      	itete	ge
 8006d90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d92:	89a3      	ldrhlt	r3, [r4, #12]
 8006d94:	181b      	addge	r3, r3, r0
 8006d96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d9a:	bfac      	ite	ge
 8006d9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d9e:	81a3      	strhlt	r3, [r4, #12]
 8006da0:	bd10      	pop	{r4, pc}

08006da2 <__swrite>:
 8006da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da6:	461f      	mov	r7, r3
 8006da8:	898b      	ldrh	r3, [r1, #12]
 8006daa:	4605      	mov	r5, r0
 8006dac:	05db      	lsls	r3, r3, #23
 8006dae:	460c      	mov	r4, r1
 8006db0:	4616      	mov	r6, r2
 8006db2:	d505      	bpl.n	8006dc0 <__swrite+0x1e>
 8006db4:	2302      	movs	r3, #2
 8006db6:	2200      	movs	r2, #0
 8006db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dbc:	f000 f868 	bl	8006e90 <_lseek_r>
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	4632      	mov	r2, r6
 8006dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	4628      	mov	r0, r5
 8006dcc:	463b      	mov	r3, r7
 8006dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd6:	f000 b817 	b.w	8006e08 <_write_r>

08006dda <__sseek>:
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	460c      	mov	r4, r1
 8006dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de2:	f000 f855 	bl	8006e90 <_lseek_r>
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	bf15      	itete	ne
 8006dec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006df6:	81a3      	strheq	r3, [r4, #12]
 8006df8:	bf18      	it	ne
 8006dfa:	81a3      	strhne	r3, [r4, #12]
 8006dfc:	bd10      	pop	{r4, pc}

08006dfe <__sclose>:
 8006dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e02:	f000 b813 	b.w	8006e2c <_close_r>
	...

08006e08 <_write_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	2200      	movs	r2, #0
 8006e12:	4d05      	ldr	r5, [pc, #20]	; (8006e28 <_write_r+0x20>)
 8006e14:	602a      	str	r2, [r5, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f7fc f995 	bl	8003146 <_write>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_write_r+0x1e>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_write_r+0x1e>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	2000028c 	.word	0x2000028c

08006e2c <_close_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	2300      	movs	r3, #0
 8006e30:	4d05      	ldr	r5, [pc, #20]	; (8006e48 <_close_r+0x1c>)
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	f7fc f9a1 	bl	800317e <_close>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_close_r+0x1a>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_close_r+0x1a>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	2000028c 	.word	0x2000028c

08006e4c <_fstat_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	2300      	movs	r3, #0
 8006e50:	4d06      	ldr	r5, [pc, #24]	; (8006e6c <_fstat_r+0x20>)
 8006e52:	4604      	mov	r4, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	4611      	mov	r1, r2
 8006e58:	602b      	str	r3, [r5, #0]
 8006e5a:	f7fc f99b 	bl	8003194 <_fstat>
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	d102      	bne.n	8006e68 <_fstat_r+0x1c>
 8006e62:	682b      	ldr	r3, [r5, #0]
 8006e64:	b103      	cbz	r3, 8006e68 <_fstat_r+0x1c>
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	bd38      	pop	{r3, r4, r5, pc}
 8006e6a:	bf00      	nop
 8006e6c:	2000028c 	.word	0x2000028c

08006e70 <_isatty_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	2300      	movs	r3, #0
 8006e74:	4d05      	ldr	r5, [pc, #20]	; (8006e8c <_isatty_r+0x1c>)
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	602b      	str	r3, [r5, #0]
 8006e7c:	f7fc f999 	bl	80031b2 <_isatty>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_isatty_r+0x1a>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_isatty_r+0x1a>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	2000028c 	.word	0x2000028c

08006e90 <_lseek_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4d05      	ldr	r5, [pc, #20]	; (8006eb0 <_lseek_r+0x20>)
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f7fc f991 	bl	80031c6 <_lseek>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_lseek_r+0x1e>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_lseek_r+0x1e>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	2000028c 	.word	0x2000028c

08006eb4 <memchr>:
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	b2c9      	uxtb	r1, r1
 8006eba:	4402      	add	r2, r0
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	d101      	bne.n	8006ec6 <memchr+0x12>
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	e003      	b.n	8006ece <memchr+0x1a>
 8006ec6:	7804      	ldrb	r4, [r0, #0]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	428c      	cmp	r4, r1
 8006ecc:	d1f6      	bne.n	8006ebc <memchr+0x8>
 8006ece:	bd10      	pop	{r4, pc}

08006ed0 <memcpy>:
 8006ed0:	440a      	add	r2, r1
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ed8:	d100      	bne.n	8006edc <memcpy+0xc>
 8006eda:	4770      	bx	lr
 8006edc:	b510      	push	{r4, lr}
 8006ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee2:	4291      	cmp	r1, r2
 8006ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee8:	d1f9      	bne.n	8006ede <memcpy+0xe>
 8006eea:	bd10      	pop	{r4, pc}

08006eec <memmove>:
 8006eec:	4288      	cmp	r0, r1
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	eb01 0402 	add.w	r4, r1, r2
 8006ef4:	d902      	bls.n	8006efc <memmove+0x10>
 8006ef6:	4284      	cmp	r4, r0
 8006ef8:	4623      	mov	r3, r4
 8006efa:	d807      	bhi.n	8006f0c <memmove+0x20>
 8006efc:	1e43      	subs	r3, r0, #1
 8006efe:	42a1      	cmp	r1, r4
 8006f00:	d008      	beq.n	8006f14 <memmove+0x28>
 8006f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f0a:	e7f8      	b.n	8006efe <memmove+0x12>
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	4402      	add	r2, r0
 8006f10:	428a      	cmp	r2, r1
 8006f12:	d100      	bne.n	8006f16 <memmove+0x2a>
 8006f14:	bd10      	pop	{r4, pc}
 8006f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f1e:	e7f7      	b.n	8006f10 <memmove+0x24>

08006f20 <__malloc_lock>:
 8006f20:	4801      	ldr	r0, [pc, #4]	; (8006f28 <__malloc_lock+0x8>)
 8006f22:	f7ff b98f 	b.w	8006244 <__retarget_lock_acquire_recursive>
 8006f26:	bf00      	nop
 8006f28:	20000280 	.word	0x20000280

08006f2c <__malloc_unlock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__malloc_unlock+0x8>)
 8006f2e:	f7ff b98a 	b.w	8006246 <__retarget_lock_release_recursive>
 8006f32:	bf00      	nop
 8006f34:	20000280 	.word	0x20000280

08006f38 <_realloc_r>:
 8006f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	4614      	mov	r4, r2
 8006f40:	460e      	mov	r6, r1
 8006f42:	b921      	cbnz	r1, 8006f4e <_realloc_r+0x16>
 8006f44:	4611      	mov	r1, r2
 8006f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4a:	f7ff ba4b 	b.w	80063e4 <_malloc_r>
 8006f4e:	b92a      	cbnz	r2, 8006f5c <_realloc_r+0x24>
 8006f50:	f7ff f9e0 	bl	8006314 <_free_r>
 8006f54:	4625      	mov	r5, r4
 8006f56:	4628      	mov	r0, r5
 8006f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f5c:	f000 f82e 	bl	8006fbc <_malloc_usable_size_r>
 8006f60:	4284      	cmp	r4, r0
 8006f62:	4607      	mov	r7, r0
 8006f64:	d802      	bhi.n	8006f6c <_realloc_r+0x34>
 8006f66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f6a:	d812      	bhi.n	8006f92 <_realloc_r+0x5a>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f7ff fa38 	bl	80063e4 <_malloc_r>
 8006f74:	4605      	mov	r5, r0
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d0ed      	beq.n	8006f56 <_realloc_r+0x1e>
 8006f7a:	42bc      	cmp	r4, r7
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	4631      	mov	r1, r6
 8006f80:	bf28      	it	cs
 8006f82:	463a      	movcs	r2, r7
 8006f84:	f7ff ffa4 	bl	8006ed0 <memcpy>
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	f7ff f9c2 	bl	8006314 <_free_r>
 8006f90:	e7e1      	b.n	8006f56 <_realloc_r+0x1e>
 8006f92:	4635      	mov	r5, r6
 8006f94:	e7df      	b.n	8006f56 <_realloc_r+0x1e>
	...

08006f98 <_read_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4d05      	ldr	r5, [pc, #20]	; (8006fb8 <_read_r+0x20>)
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fc f8b0 	bl	800310c <_read>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_read_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_read_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	2000028c 	.word	0x2000028c

08006fbc <_malloc_usable_size_r>:
 8006fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc0:	1f18      	subs	r0, r3, #4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bfbc      	itt	lt
 8006fc6:	580b      	ldrlt	r3, [r1, r0]
 8006fc8:	18c0      	addlt	r0, r0, r3
 8006fca:	4770      	bx	lr

08006fcc <_init>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_fini>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr
